quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"ating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2Binding_double_int_int_.html:32240,integrat,integrator,32240,root/html526/RooCFunction2Binding_double_int_int_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2Binding_double_int_int_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; TString_rangeName; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRangeBoolean.html:32635,integrat,integrator,32635,root/html532/RooRangeBoolean.html,https://root.cern,https://root.cern/root/html532/RooRangeBoolean.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,ation ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum Test error found - save the configuration ; : 116 | 11860.6 10843.2 0.0200362 0.00180159 43872.5 0; : 117 Minimum Test error found - save the configuration ; : 117 | 11765.1 10743.9 0.0200658 0.00179585 43787.7 0; : 118 Minimum Test error found - save the configuration ; : 118 | 11664.5 10650.2 0.0200137 0.00179245 43904.8 0; : 119 Minimum Test error found - save the configuration ; : 119 | 11569.9 10554.7 0.0200191 0.00179411 43895.9 0; : 120 Minimum Test error found - save the configuration ; : 120 | 11473 10462 0.0200241 0.00179418 43883.8 0; : 121 Minimum Test error found - save the configuration ; : 121 | 11379.1 10368.9 0.0200276 0.00179623 43880.4 0; : 122 Minimum Test error found - save the configuration ; : 122 | 11283.5 10279 0.0203977 0.00185462 43142.8 0; : 123 Minimum Test error found - save the configuration ; : 123 | 11193.7 10184.6 0.0202751 0.00180182 43305.7 0; : 124 Minimum Test error found - save the configuration ; : 124 | 11099.9 10093.3 0.0200203 0.00180095 43909.4 0; : 125 Minimum Test error found - save the configuration ; : 125 | 11007.6 10003.9 0.020012 0.00179997 43927 0; : 126 Minimum Test error found - save the configuration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:24615,configurat,configuration,24615,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 123 | 11193.7 10184.6 0.0202751 0.00180182 43305.7 0; : 124 Minimum Test error found - save the configuration ; : 124 | 11099.9 10093.3 0.0200203 0.00180095 43909.4 0; : 125 Minimum Test error found - save the configuration ; : 125 | 11007.6 10003.9 0.020012 0.00179997 43927 0; : 126 Minimum Test error found - save the configuration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:25858,configurat,configuration,25858,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27097,configurat,configuration,27097,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27210,configurat,configuration,27210,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27324,configurat,configuration,27324,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:28794,configurat,configuration,28794,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29020,configurat,configuration,29020,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29133,configurat,configuration,29133,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29247,configurat,configuration,29247,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29361,configurat,configuration,29361,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29475,configurat,configuration,29475,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:30942,configurat,configuration,30942,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31056,configurat,configuration,31056,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:32640,configurat,configuration,32640,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:33885,configurat,configuration,33885,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:33999,configurat,configuration,33999,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:34340,configurat,configuration,34340,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Test error found - save the configuration ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:34454,configurat,configuration,34454,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Minimum Test error found - save the configuration ; : 231 | 4606.79 3681.43 0.020129 0.00181323 43678.1 0; : 232 Minimum Test error found - save the configuration ; : 232 | 4567.71 3646.94 0.0201545 0.0018103 43610.4 0; : 233 Minimum Test error found - save the configuration ; : 233 | 4531.87 3609.69 0.0200999 0.00180936 43738.5 0; : 234 Minimum Test error found - save the configuration ; : 234 | 4493.9 3574.45 0.0204352 0.00182946 42997.5 0; : 235 Minimum Test error found - save the configuration ; : 235 | 4458.22 3537.88 0.0202146 0.00181434 43477.6 0; : 236 Minimum Test error found - save the configuration ; : 236 | 4420.27 3503.48 0.0201332 0.00182095 43686.7 0; : 237 Minimum Test error found - save the configuration ; : 237 | 4384.12 3469.32 0.020111 0.00181828 43733.2 0; : 238 Minimum Test error found - save the configuration ; : 238 | 4349.33 3433.65 0.0201102 0.00181751 43733.3 0; : 239 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:36946,configurat,configuration,36946,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Minimum Test error found - save the configuration ; : 272 | 3280.89 2427.73 0.020272 0.0018293 43377.6 0; : 273 Minimum Test error found - save the configuration ; : 273 | 3252.38 2403.22 0.0201521 0.00183383 43672.2 0; : 274 Minimum Test error found - save the configuration ; : 274 | 3225.54 2378.31 0.0201071 0.00180974 43722.2 0; : 275 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:41024,configurat,configuration,41024,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 274 | 3225.54 2378.31 0.0201071 0.00180974 43722.2 0; : 275 Minimum Test error found - save the configuration ; : 275 | 3198.95 2353.31 0.0201145 0.00180932 43703.5 0; : 276 Minimum Test error found - save the configuration ; : 276 | 3171.39 2329.66 0.0201297 0.00182099 43695.1 0; : 277 Minimum Test error found - save the configuration ; : 277 | 3145.15 2305.54 0.0201561 0.00183399 43663.2 0; : 278 Minimum Test error found - save the configuration ; : 278 | 3119.15 2281.29 0.0205214 0.00187306 42899.3 0; : 279 Minimum Test error found - save the configuration ; : 279 | 3092.67 2258.03 0.0205194 0.00183787 42823.1 0; : 280 Minimum Test error found - save the configuration ; : 280 | 3067.15 2234.03 0.0206301 0.00183798 42571.1 0; : 281 Minimum Test error found - save the configuration ; : 281 | 3041.24 2210.43 0.0205967 0.00188294 42749.4 0; : 282 Minimum Test error found - save the configuration ; : 282 | 3015.05 2187.65 0.0203448 0.00180913 43160 0; : 283 Minimum Test error found - save the configuration ; : 283 | 2989.86 2164.96 0.0201855 0.00181334 43544.1 0; : 284 Minimum Test error found - save the configuration ; : 284 | 2964.88 2142 0.0201236 0.00181217 43688.6 0; : 285 Minimum Test error found - save the configuration ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:42957,configurat,configuration,42957,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:44880,configurat,configuration,44880,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:44993,configurat,configuration,44993,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:45107,configurat,configuration,45107,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:45220,configurat,configuration,45220,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:45334,configurat,configuration,45334,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 326 | 2062.99 1354.16 0.0201231 0.00181474 43695.9 0; : 327 Minimum Test error found - save the configuration ; : 327 | 2044.89 1339.01 0.0203662 0.00185106 43207.9 0; : 328 Minimum Test error found - save the configuration ; : 328 | 2027.08 1324.14 0.0205379 0.00189883 42920.6 0; : 329 Minimum Test error found - save the configuration ; : 329 | 2010.14 1308.4 0.0208465 0.00188706 42195.2 0; : 330 Minimum Test error found - save the configuration ; : 330 | 1991.48 1294.33 0.0203889 0.00185386 43161.4 0; : 331 Minimum Test error found - save the configuration ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimum Test error found - save the configuration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:48852,configurat,configuration,48852,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 327 | 2044.89 1339.01 0.0203662 0.00185106 43207.9 0; : 328 Minimum Test error found - save the configuration ; : 328 | 2027.08 1324.14 0.0205379 0.00189883 42920.6 0; : 329 Minimum Test error found - save the configuration ; : 329 | 2010.14 1308.4 0.0208465 0.00188706 42195.2 0; : 330 Minimum Test error found - save the configuration ; : 330 | 1991.48 1294.33 0.0203889 0.00185386 43161.4 0; : 331 Minimum Test error found - save the configuration ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimum Test error found - save the configuration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum Test error found - save the configuration ; : 344 | 1757.78 1104.57 0.0201146 0.00181274 43711.3 0; : 345 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:48966,configurat,configuration,48966,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 330 | 1991.48 1294.33 0.0203889 0.00185386 43161.4 0; : 331 Minimum Test error found - save the configuration ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimum Test error found - save the configuration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum Test error found - save the configuration ; : 344 | 1757.78 1104.57 0.0201146 0.00181274 43711.3 0; : 345 Minimum Test error found - save the configuration ; : 345 | 1742.23 1092.31 0.0201296 0.00180634 43660.4 0; : 346 Minimum Test error found - save the configuration ; : 346 | 1726.84 1079.76 0.0201287 0.00180534 43660.1 0; : 347 Minimum Test error found - save the configuration ; : 347 | 1711.03 1067.63 0.0201353 0.00181782 43674.2 0; : 348 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:49307,configurat,configuration,49307,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimum Test error found - save the configuration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum Test error found - save the configuration ; : 344 | 1757.78 1104.57 0.0201146 0.00181274 43711.3 0; : 345 Minimum Test error found - save the configuration ; : 345 | 1742.23 1092.31 0.0201296 0.00180634 43660.4 0; : 346 Minimum Test error found - save the configuration ; : 346 | 1726.84 1079.76 0.0201287 0.00180534 43660.1 0; : 347 Minimum Test error found - save the configuration ; : 347 | 1711.03 1067.63 0.0201353 0.00181782 43674.2 0; : 348 Minimum Test error found - save the configuration ; : 348 | 1695.85 1055.38 0.0201691 0.00181876 43596 0; : 349 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:49421,configurat,configuration,49421,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 359 | 1534.11 930.552 0.0201332 0.0018225 43690.3 0; : 360 Minimum Test error found - save the configuration ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Minimum Test error found - save the configuration ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Test error found - save the configuration ; : 368 | 1411.97 839.213 0.020133 0.00180845 43657.3 0; : 369 Minimum Test error found - save the configuration ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimum Test error found - save the configuration ; : 370 | 1385.58 820.462 0.020129 0.00181191 43675 0; : 371 Minimum Test error found - save the configuration ; : 371 | 1373.35 810.549 0.0201499 0.00183853 43688.7 0; : 372 Minimum Test error found - save the configuration ; : 372 | 1359.77 801.896 0.0201658 0.00181611 43597.4 0; : 373 Minimum Test error found - save the configuration ; : 373 | 1347.92 793.298 0.0201248 0.00181285 43687.4 0; : 374 Minimum Test error found - save the configuration ; : 374 | 1335.01 784.052 0.0201186 0.0018071 43688.4 0; : 375 Minimum Test error found - save the configuration ; : 375 | 1322.7 774.736 0.0201382 0.00181076 43650.3 0; : 376 Minimum Test error found - save the configuration ; : 376 | 1310.36 765.843 0.0201418 0.00181155 43643.7 0; : 377 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:52591,configurat,configuration,52591,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Minimum Test error found - save the configuration ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Test error found - save the configuration ; : 368 | 1411.97 839.213 0.020133 0.00180845 43657.3 0; : 369 Minimum Test error found - save the configuration ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimum Test error found - save the configuration ; : 370 | 1385.58 820.462 0.020129 0.00181191 43675 0; : 371 Minimum Test error found - save the configuration ; : 371 | 1373.35 810.549 0.0201499 0.00183853 43688.7 0; : 372 Minimum Test error found - save the configuration ; : 372 | 1359.77 801.896 0.0201658 0.00181611 43597.4 0; : 373 Minimum Test error found - save the configuration ; : 373 | 1347.92 793.298 0.0201248 0.00181285 43687.4 0; : 374 Minimum Test error found - save the configuration ; : 374 | 1335.01 784.052 0.0201186 0.0018071 43688.4 0; : 375 Minimum Test error found - save the configuration ; : 375 | 1322.7 774.736 0.0201382 0.00181076 43650.3 0; : 376 Minimum Test error found - save the configuration ; : 376 | 1310.36 765.843 0.0201418 0.00181155 43643.7 0; : 377 Minimum Test error found - save the configuration ; : 377 | 1298.44 756.891 0.0201268 0.00181403 43685.4 0; : 378 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:52704,configurat,configuration,52704,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 422 | 840.335 457.953 0.0201484 0.0018138 43633.4 0; : 423 Minimum Test error found - save the configuration ; : 423 | 832.226 453.261 0.0201773 0.00182876 43600.2 0; : 424 Minimum Test error found - save the configuration ; : 424 | 824.213 447.823 0.020172 0.00183242 43621.4 0; : 425 Minimum Test error found - save the configuration ; : 425 | 816.038 443.488 0.0201762 0.00183703 43622.6 0; : 426 Minimum Test error found - save the configuration ; : 426 | 807.627 438.586 0.0202495 0.00183837 43452 0; : 427 Minimum Test error found - save the configuration ; : 427 | 799.623 433.9 0.0201527 0.00181997 43637.7 0; : 428 Minimum Test error found - save the configuration ; : 428 | 791.762 429.014 0.0201231 0.00181389 43693.9 0; : 429 Minimum Test error found - save the configuration ; : 429 | 783.663 424.486 0.0202036 0.00181812 43512.5 0; : 430 Minimum Test error found - save the configuration ; : 430 | 776.025 420.47 0.020126 0.00182055 43702.9 0; : 431 Minimum Test error found - save the configuration ; : 431 | 768.212 415.652 0.0201366 0.00182081 43678.1 0; : 432 Minimum Test error found - save the configuration ; : 432 | 761.012 411.218 0.02015 0.00183569 43681.6 0; : 433 Minimum Test error found - save the configuration ; : 433 | 753.136 407.298 0.0201476 0.00182106 43652.7 0; : 434 Minimum Test error found - save the configuration ; : 434 | 745.345 402.751 0.020133 0.00182099 43687.1 0; : 435 Minimum Test error found - save the configuration ; : 435 | 738.037 398.378 0.0201447 0.00181389 43642.5 0; : 436 Minimum Test error found - save the configuration ; : 436 | 730.692 394.216 0.0201655 0.00182279 43614.1 0; : 437 Minimum Test error found - save the configuration ; : 437 | 723.856 389.773 0.0201631 0.00181919 43611.2 0; : 438 Minimum Test error found - save the configuration ; : 438 | 716.113 386.163 0.0201299 0.00181919 43690.3 0; : 439 Minimum Test error found - save the configuration ; : 439 | 709.435 381.839 0.02057 0.00189456 42836.9 0; : 440 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:59724,configurat,configuration,59724,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 425 | 816.038 443.488 0.0201762 0.00183703 43622.6 0; : 426 Minimum Test error found - save the configuration ; : 426 | 807.627 438.586 0.0202495 0.00183837 43452 0; : 427 Minimum Test error found - save the configuration ; : 427 | 799.623 433.9 0.0201527 0.00181997 43637.7 0; : 428 Minimum Test error found - save the configuration ; : 428 | 791.762 429.014 0.0201231 0.00181389 43693.9 0; : 429 Minimum Test error found - save the configuration ; : 429 | 783.663 424.486 0.0202036 0.00181812 43512.5 0; : 430 Minimum Test error found - save the configuration ; : 430 | 776.025 420.47 0.020126 0.00182055 43702.9 0; : 431 Minimum Test error found - save the configuration ; : 431 | 768.212 415.652 0.0201366 0.00182081 43678.1 0; : 432 Minimum Test error found - save the configuration ; : 432 | 761.012 411.218 0.02015 0.00183569 43681.6 0; : 433 Minimum Test error found - save the configuration ; : 433 | 753.136 407.298 0.0201476 0.00182106 43652.7 0; : 434 Minimum Test error found - save the configuration ; : 434 | 745.345 402.751 0.020133 0.00182099 43687.1 0; : 435 Minimum Test error found - save the configuration ; : 435 | 738.037 398.378 0.0201447 0.00181389 43642.5 0; : 436 Minimum Test error found - save the configuration ; : 436 | 730.692 394.216 0.0201655 0.00182279 43614.1 0; : 437 Minimum Test error found - save the configuration ; : 437 | 723.856 389.773 0.0201631 0.00181919 43611.2 0; : 438 Minimum Test error found - save the configuration ; : 438 | 716.113 386.163 0.0201299 0.00181919 43690.3 0; : 439 Minimum Test error found - save the configuration ; : 439 | 709.435 381.839 0.02057 0.00189456 42836.9 0; : 440 Minimum Test error found - save the configuration ; : 440 | 701.662 378.014 0.0205169 0.00184853 42853.2 0; : 441 Minimum Test error found - save the configuration ; : 441 | 695.167 373.877 0.0206789 0.00187467 42543.7 0; : 442 Minimum Test error found - save the configuration ; : 442 | 687.861 370.419 0.0206937 0.00187678 42514.9 0; : 443 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:60064,configurat,configuration,60064,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 468 | 527.38 283.018 0.0206168 0.00187635 42688.4 0; : 469 Minimum Test error found - save the configuration ; : 469 | 521.821 280.136 0.020536 0.00184948 42811.7 0; : 470 Minimum Test error found - save the configuration ; : 470 | 516.179 277.682 0.0201344 0.00181863 43678.3 0; : 471 Minimum Test error found - save the configuration ; : 471 | 510.8 274.83 0.02012 0.00181888 43713.2 0; : 472 Minimum Test error found - save the configuration ; : 472 | 505.541 272.006 0.0201116 0.0018163 43727.1 0; : 473 Minimum Test error found - save the configuration ; : 473 | 500.494 269.395 0.0201254 0.00181777 43697.5 0; : 474 Minimum Test error found - save the configuration ; : 474 | 495.466 266.483 0.0201058 0.00181722 43743.1 0; : 475 Minimum Test error found - save the configuration ; : 475 | 490.186 263.742 0.0201189 0.00181234 43700.1 0; : 476 Minimum Test error found - save the configuration ; : 476 | 485.098 261.173 0.0201246 0.00180486 43668.7 0; : 477 Minimum Test error found - save the configuration ; : 477 | 480.019 258.868 0.0201244 0.00181187 43685.9 0; : 478 Minimum Test error found - save the configuration ; : 478 | 475.092 256.56 0.0201327 0.00181261 43667.9 0; : 479 Minimum Test error found - save the configuration ; : 479 | 470.459 253.447 0.0201134 0.00181351 43716.2 0; : 480 Minimum Test error found - save the configuration ; : 480 | 465.037 251.028 0.0201358 0.00183269 43708.4 0; : 481 Minimum Test error found - save the configuration ; : 481 | 460.485 248.77 0.0203198 0.00182444 43254.2 0; : 482 Minimum Test error found - save the configuration ; : 482 | 455.372 247.229 0.0201175 0.00180448 43684.8 0; : 483 Minimum Test error found - save the configuration ; : 483 | 451.061 243.731 0.0201278 0.0018159 43687.5 0; : 484 Minimum Test error found - save the configuration ; : 484 | 445.909 241.583 0.0201078 0.00181153 43724.8 0; : 485 Minimum Test error found - save the configuration ; : 485 | 441.645 238.817 0.0201252 0.00182817 43723 0; : 486 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:64936,configurat,configuration,64936,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 507 | 349.908 193.134 0.0201154 0.00180497 43690.9 0; : 508 Minimum Test error found - save the configuration ; : 508 | 346.368 191.635 0.0201239 0.00180513 43671.2 0; : 509 Minimum Test error found - save the configuration ; : 509 | 342.684 189.987 0.020479 0.00183624 42912.1 0; : 510 Minimum Test error found - save the configuration ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minimum Test error found - save the configuration ; : 511 | 335.178 185.581 0.0201106 0.0018111 43716.9 0; : 512 Minimum Test error found - save the configuration ; : 512 | 331.755 184.666 0.0201452 0.00182488 43667.3 0; : 513 Minimum Test error found - save the configuration ; : 513 | 328.659 182.798 0.0201844 0.00187405 43691.2 0; : 514 Minimum Test error found - save the configuration ; : 514 | 324.836 180.622 0.0201448 0.00183693 43697 0; : 515 Minimum Test error found - save the configuration ; : 515 | 321.45 179.12 0.020437 0.00183763 43012.3 0; : 516 Minimum Test error found - save the configuration ; : 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 524 Minimum Test error found - save the configuration ; : 524 | 291.692 164.911 0.0201636 0.00183144 43639.1 0; : 525 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:69360,configurat,configuration,69360,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 508 | 346.368 191.635 0.0201239 0.00180513 43671.2 0; : 509 Minimum Test error found - save the configuration ; : 509 | 342.684 189.987 0.020479 0.00183624 42912.1 0; : 510 Minimum Test error found - save the configuration ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minimum Test error found - save the configuration ; : 511 | 335.178 185.581 0.0201106 0.0018111 43716.9 0; : 512 Minimum Test error found - save the configuration ; : 512 | 331.755 184.666 0.0201452 0.00182488 43667.3 0; : 513 Minimum Test error found - save the configuration ; : 513 | 328.659 182.798 0.0201844 0.00187405 43691.2 0; : 514 Minimum Test error found - save the configuration ; : 514 | 324.836 180.622 0.0201448 0.00183693 43697 0; : 515 Minimum Test error found - save the configuration ; : 515 | 321.45 179.12 0.020437 0.00183763 43012.3 0; : 516 Minimum Test error found - save the configuration ; : 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 524 Minimum Test error found - save the configuration ; : 524 | 291.692 164.911 0.0201636 0.00183144 43639.1 0; : 525 Minimum Test error found - save the configuration ; : 525 | 288.615 162.74 0.0201168 0.0018126 43705.7 0; : 526 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:69474,configurat,configuration,69474,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 509 | 342.684 189.987 0.020479 0.00183624 42912.1 0; : 510 Minimum Test error found - save the configuration ; : 510 | 338.936 187.68 0.0201257 0.00181109 43680.9 0; : 511 Minimum Test error found - save the configuration ; : 511 | 335.178 185.581 0.0201106 0.0018111 43716.9 0; : 512 Minimum Test error found - save the configuration ; : 512 | 331.755 184.666 0.0201452 0.00182488 43667.3 0; : 513 Minimum Test error found - save the configuration ; : 513 | 328.659 182.798 0.0201844 0.00187405 43691.2 0; : 514 Minimum Test error found - save the configuration ; : 514 | 324.836 180.622 0.0201448 0.00183693 43697 0; : 515 Minimum Test error found - save the configuration ; : 515 | 321.45 179.12 0.020437 0.00183763 43012.3 0; : 516 Minimum Test error found - save the configuration ; : 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 524 Minimum Test error found - save the configuration ; : 524 | 291.692 164.911 0.0201636 0.00183144 43639.1 0; : 525 Minimum Test error found - save the configuration ; : 525 | 288.615 162.74 0.0201168 0.0018126 43705.7 0; : 526 Minimum Test error found - save the configuration ; : 526 | 285.409 161.045 0.0201121 0.00181244 43716.6 0; : 527 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:69588,configurat,configuration,69588,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 542 | 239.53 138.758 0.0201353 0.00182676 43695.4 0; : 543 Minimum Test error found - save the configuration ; : 543 | 237.23 137.09 0.0201583 0.00184429 43682.4 0; : 544 Minimum Test error found - save the configuration ; : 544 | 234.272 136.088 0.0201297 0.00183112 43719.2 0; : 545 Minimum Test error found - save the configuration ; : 545 | 231.858 134.661 0.021628 0.00191081 40573.6 0; : 546 Minimum Test error found - save the configuration ; : 546 | 229.488 134.189 0.0201396 0.00181917 43667.2 0; : 547 Minimum Test error found - save the configuration ; : 547 | 227.221 132.01 0.0201209 0.00181373 43698.8 0; : 548 Minimum Test error found - save the configuration ; : 548 | 224.347 131.158 0.0201557 0.00181812 43626.4 0; : 549 Minimum Test error found - save the configuration ; : 549 | 221.837 129.708 0.0203141 0.00181657 43249 0; : 550 Minimum Test error found - save the configuration ; : 550 | 219.851 128.33 0.0203838 0.00182729 43111.5 0; : 551 Minimum Test error found - save the configuration ; : 551 | 216.872 126.913 0.0201299 0.00182067 43693.7 0; : 552 Minimum Test error found - save the configuration ; : 552 | 214.625 126.196 0.0204788 0.00185067 42945.7 0; : 553 Minimum Test error found - save the configuration ; : 553 | 212.064 124.627 0.0201455 0.0018227 43661.6 0; : 554 Minimum Test error found - save the configuration ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:73332,configurat,configuration,73332,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 549 | 221.837 129.708 0.0203141 0.00181657 43249 0; : 550 Minimum Test error found - save the configuration ; : 550 | 219.851 128.33 0.0203838 0.00182729 43111.5 0; : 551 Minimum Test error found - save the configuration ; : 551 | 216.872 126.913 0.0201299 0.00182067 43693.7 0; : 552 Minimum Test error found - save the configuration ; : 552 | 214.625 126.196 0.0204788 0.00185067 42945.7 0; : 553 Minimum Test error found - save the configuration ; : 553 | 212.064 124.627 0.0201455 0.0018227 43661.6 0; : 554 Minimum Test error found - save the configuration ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:74125,configurat,configuration,74125,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 550 | 219.851 128.33 0.0203838 0.00182729 43111.5 0; : 551 Minimum Test error found - save the configuration ; : 551 | 216.872 126.913 0.0201299 0.00182067 43693.7 0; : 552 Minimum Test error found - save the configuration ; : 552 | 214.625 126.196 0.0204788 0.00185067 42945.7 0; : 553 Minimum Test error found - save the configuration ; : 553 | 212.064 124.627 0.0201455 0.0018227 43661.6 0; : 554 Minimum Test error found - save the configuration ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:74237,configurat,configuration,74237,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 554 | 209.68 123.549 0.0201264 0.00183279 43731.1 0; : 555 Minimum Test error found - save the configuration ; : 555 | 207.499 123.145 0.0201096 0.00181963 43739.9 0; : 556 Minimum Test error found - save the configuration ; : 556 | 205.232 121.223 0.0203039 0.0018145 43268 0; : 557 Minimum Test error found - save the configuration ; : 557 | 202.969 119.762 0.0201211 0.00181089 43691.5 0; : 558 Minimum Test error found - save the configuration ; : 558 | 200.33 118.775 0.0201089 0.0018057 43708.3 0; : 559 Minimum Test error found - save the configuration ; : 559 | 197.988 117.386 0.0202964 0.00181486 43286.3 0; : 560 Minimum Test error found - save the configuration ; : 560 | 195.761 116.51 0.020118 0.00181561 43710.2 0; : 561 Minimum Test error found - save the configuration ; : 561 | 193.461 115.526 0.0203798 0.00182877 43124.4 0; : 562 Minimum Test error found - save the configuration ; : 562 | 191.212 113.975 0.0203924 0.00182053 43075.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:74691,configurat,configuration,74691,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:77354,configurat,configuration,77354,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:77467,configurat,configuration,77467,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:77806,configurat,configuration,77806,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 Minimum Test error found - save the configuration ; : 589 | 138.544 87.8285 0.0201999 0.00182139 43529 0; : 590 Minimum Test error found - save the configuration ; : 590 | 137.153 86.6949 0.0201619 0.00182129 43619.1 0; : 591 Minimum Test error found - save the configuration ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:78147,configurat,configuration,78147,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 591 | 135.294 85.8941 0.0201222 0.00182247 43716.6 0; : 592 Minimum Test error found - save the configuration ; : 592 | 133.776 84.7442 0.0201242 0.00181719 43699.2 0; : 593 Minimum Test error found - save the configuration ; : 593 | 132.08 84.4617 0.0201178 0.00181703 43714.1 0; : 594 Minimum Test error found - save the configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:78824,configurat,configuration,78824,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81142,configurat,configuration,81142,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81934,configurat,configuration,81934,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:82160,configurat,configuration,82160,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:84424,configurat,configuration,84424,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88899,configurat,configuration,88899,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ation ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:93069,configurat,configuration,93069,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"ation Documentation. ◆ IntOperMode. enum RooRealIntegral::IntOperMode. protected . EnumeratorHybrid ; Analytic ; PassThrough . Definition at line 92 of file RooRealIntegral.h. Constructor & Destructor Documentation. ◆ RooRealIntegral() [1/3]. RooRealIntegral::RooRealIntegral ; (; ). Definition at line 282 of file RooRealIntegral.cxx. ◆ RooRealIntegral() [2/3]. RooRealIntegral::RooRealIntegral ; (; const char * ; name, . const char * ; title, . const RooAbsReal & ; function, . const RooArgSet & ; depList, . const RooArgSet * ; funcNormSet = nullptr, . const RooNumIntConfig * ; config = nullptr, . const char * ; rangeName = nullptr . ). Construct integral of 'function' over observables in 'depList' in range 'rangeName' with normalization observables 'funcNormSet' (for p.d.f.s). ; In the integral is performed to the maximum extent possible the internal (analytical) integrals advertised by function. The other integrations are performed numerically. The optional config object prescribes how these numeric integrations are configured.; \Note If pdf component selection was globally overridden to always include all components (either with RooAbsReal::globalSelectComp(bool) or a RooAbsReal::GlobalSelectComponentRAII), then any created integral will ignore component selections during its lifetime. This is especially useful when creating normalization or projection integrals. ; Definition at line 300 of file RooRealIntegral.cxx. ◆ RooRealIntegral() [3/3]. RooRealIntegral::RooRealIntegral ; (; const RooRealIntegral & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 710 of file RooRealIntegral.cxx. ◆ ~RooRealIntegral(). RooRealIntegral::~RooRealIntegral ; (; ). override . Definition at line 739 of file RooRealIntegral.cxx. Member Function Documentation. ◆ actualFuncNormSet(). RooArgSet const * RooRealIntegral::actualFuncNormSet ; (; ); const. inlineprotected . Definition at line 112 of file RooRealIntegral.h. ◆ addNumIntDep(). void RooRealIntegr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:64760,integrat,integrations,64760,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integrations']
Deployability,"ation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxymsf; RooRealProxysigma; RooRealProxyssf; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGaussModel.html:42154,integrat,integrator,42154,root/html532/RooGaussModel.html,https://root.cern,https://root.cern/root/html532/RooGaussModel.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGammaImplementation of the Gamma PDF for RooFit/RooStats ;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:99978,integrat,integration,99978,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,3,['integrat'],['integration']
Deployability,"ation of data. If you want to store it automatically; during the next TFile::Write() command, you have to attach it to; the corresponding directory. TFile* pFile = new TFile(""passed.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyPassedHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. TH1* GetCopyTotalHisto() const; returns a cloned version of fTotalHistogram. Notes: - The histogram is filled with unit weights. You might want to scale; it with the global weight GetWeight().; - The returned object is owned by the user who has to care about the; deletion of the new TH1 object.; - This histogram is by default NOT attached to the current directory; to avoid duplication of data. If you want to store it automatically; during the next TFile::Write() command, you have to attach it to; the corresponding directory. TFile* pFile = new TFile(""total.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyTotalHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. Int_t GetDimension() const; returns the dimension of the current TEfficiency object. Double_t GetEfficiency(Int_t bin) const; returns the efficiency in the given global bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:54940,update,update,54940,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,6,['update'],['update']
Deployability,"ation parameters; TStringfDataSetName of the dataset being processed (for dataset-driven runs); Float_tfEffSessLastNumber of effective sessions at fProcTimeLast; Float_tfEvtRateLastEvt rate at fProcTimeLast; TList*fFailedPacketsa list of packets that failed while processing; Float_tfInitTimetime before processing; TList*fInputInput list; Float_tfMBsReadLastMBs read at fProcTimeLast; Double_tfMaxPacketTimemaximum packet time; Double_tfMinPacketTimeminimum packet time; Float_tfProcTimetime since start of processing; Float_tfProcTimeLastTime of the last measurement; TTimer*fProgressprogress updates timer; TNtuple*fProgressPerf{Active workers, evt rate, MBs read} as a function of processing time; TProofProgressStatus*fProgressStatuspointer to status in the player.; Float_tfReportPeriodTime between reports if nothing changes (estimated proc time / 100); TMap*fSlaveStatsslave status, keyed by correspondig TSlave; TTimefStartTimetime offset; Bool_tfStopTermination of Process() requested?; Float_tfTimeUpdttime between updates; Long64_tfTotalEntriestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptfUseEstOptControl usage of estimated values for the progress info; Bool_tfValidConstructed properly?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualPacketizer(TList* input, TProofProgressStatus* st = 0); Constructor. ~TVirtualPacketizer(); Destructor. Long64_t GetEntries(Bool_t tree, TDSetElement* e); Get entries. TDSetElement * GetNextPacket(TSlave* sl, TMessage* r); Get next packet. void StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE); Stop process. TDSetElement* CreateNewPacket(TDSetElement* base, Long64_t first, Long64_t num); Creates a new TDSetElement from from base packet starting from; the first entry with num entries.; The function returns a new created objects which have to be deleted. Bool_t HandleTimer(TTimer* timer); Send progress message to client. void SetInitTime(); Set the initializati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPacketizer.html:8512,update,updates,8512,root/html534/TVirtualPacketizer.html,https://root.cern,https://root.cern/root/html534/TVirtualPacketizer.html,1,['update'],['updates']
Deployability,"ation set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_double_.html:44880,integrat,integrator,44880,root/html602/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_double_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ation set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionMultiDim*funcFunctor; RooListProxyvarsArgument reference; Double_t*xArgument value array.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFunctorPdfBinding.html:39917,integrat,integrator,39917,root/html530/RooFunctorPdfBinding.html,https://root.cern,https://root.cern/root/html530/RooFunctorPdfBinding.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ation specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Mon Jul 4 15:23:35 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumIntConfig.html:10837,integrat,integration,10837,root/html530/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html530/RooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"ation specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Thu Nov 3 20:08:52 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumIntConfig.html:10837,integrat,integration,10837,root/html532/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html532/RooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"ation specific to integrator with given name. void setEpsAbs(Double_t newEpsAbs); Set absolute convergence criteria (convergence if abs(Err)<newEpsAbs). RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const. void setEpsRel(Double_t newEpsRel); Set relative convergence criteria (convergence if abs(Err)/abs(Int)<newEpsRel). void printMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; Detailed printing interface. RooCategory& method1D(); Return selected integration techniques for 1,2,N dimensional integrals. { return _method1D ; }. RooCategory& method2D(); { return _method2D ; }. RooCategory& methodND(); { return _methodND ; }. const RooCategory& method1D() const; { return _method1D ; }. const RooCategory& method2D() const; { return _method2D ; }. const RooCategory& methodND() const; { return _methodND ; }. RooCategory& method1DOpen(); Return selected integration techniques for 1,2,N dimensional open-ended integrals. { return _method1DOpen ; }. RooCategory& method2DOpen(); { return _method2DOpen ; }. RooCategory& methodNDOpen(); { return _methodNDOpen ; }. const RooCategory& method1DOpen() const; { return _method1DOpen ; }. const RooCategory& method2DOpen() const; { return _method2DOpen ; }. const RooCategory& methodNDOpen() const; { return _methodNDOpen ; }. Double_t epsAbs() const; Set/get absolute and relative precision convergence criteria. { return _epsAbs ; }. Double_t epsRel() const; { return _epsRel ; }. Bool_t printEvalCounter() const; Set/get switch that activates printing of number of required; function evaluations for each numeric integration. { return _printEvalCounter ; }. void setPrintEvalCounter(Bool_t newVal); { _printEvalCounter = newVal ; }. void Print(Option_t* options = 0) const. » Last changed: Tue Jun 2 15:32:44 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumIntConfig.html:11862,integrat,integration,11862,root/html604/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html604/RooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"ation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16668,configurat,configuration,16668,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['configurat'],['configuration']
Deployability,"ation.; This is particularly important if you fit the histogram after TH1::Divide. Please note also that in the binomial case errors are calculated using standard; binomial statistics, which means when b1 = b2, the error is zero.; If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; error for the case b1=b2. The function return kFALSE if the divide operation failed. void Draw(Option_t* option = """"); Draw this histogram with options. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in different pads.; When an histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If an histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of an histogram in a pad, one can use; h->DrawCopy();; This makes a clone of the histogram. Once the clone is drawn, the original; histogram may be modified or deleted without affecting the aspect of the; clone.; By default, TH1::Draw clears the current pad. One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; value for the maximum or the minimum scale on the plot. TH1::UseCurrentStyle can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle();. See the THistPainter class for a description of all the drawing options. TH1 * DrawCopy(Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:65122,update,updated,65122,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,3,['update'],['updated']
Deployability,"ation.; Virtual from TEveElement. void InitTrack(const TEveVectorD& v, Int_t charge); Initialize internal data-members for given particle parameters. void InitTrack(const TEveVectorF& v, Int_t charge); TEveVectorF wrapper. void ResetTrack(); Reset cache holding particle trajectory. Bool_t GoToVertex(TEveVectorD& v, TEveVectorD& p); Propagate particle with momentum p to vertex v. Bool_t GoToVertex(TEveVectorF& v, TEveVectorF& p); TEveVectorF wrapper. void GoToBounds(TEveVectorD& p); Propagate particle to bounds.; Return TRUE if hit bounds. void GoToBounds(TEveVectorF& p); TEveVectorF wrapper. void Update(const TEveVector4D& v, const TEveVectorD& p, Bool_t full_update = kFALSE, Bool_t enforce_max_step = kFALSE); Update helix / B-field projection state. void Step(const TEveVector4D& v, const TEveVectorD& p, TEveVector4D& vOut, TEveVectorD& pOut); Wrapper to step helix. void LoopToBounds(TEveVectorD& p); Propagate charged particle with momentum p to bounds.; It is expected that Update() with full-update was called before. Bool_t LoopToVertex(TEveVectorD& v, TEveVectorD& p); Propagate charged particle with momentum p to vertex v.; It is expected that Update() with full-update was called before. Bool_t LineToVertex(TEveVectorD& v); Propagate neutral particle to vertex v. void LineToBounds(TEveVectorD& p); Propagatate neutral particle with momentum p to bounds. Bool_t HelixIntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Intersect helix with a plane. Current position and argument p define; the helix. Bool_t LineIntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Intersect line with a plane. Current position and argument p define; the line. Bool_t IntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Find intersection of currently propagated track with a plane.; Current track position is used as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackPropagator.html:26787,update,update,26787,root/html530/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html530/TEveTrackPropagator.html,2,['update'],['update']
Deployability,"ations; of underflow/overflows and not just one single number.; The parameter mode can be any combination of the letters; kKsSiIourRmMen. k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed. For example, to print only name of histogram and number of entries do:. gStyle->SetOptStat(""ne"");. To print only the name of the histogram do:. gStyle->SetOptStat(""n"");. The default value is:. gStyle->SetOptStat(""nemr"");. When a histogram is painted, a TPaveStats object is created and added; to the list of functions of the histogram. If a TPaveStats object; already exists in the histogram list of functions, the existing object is just; updated with the current histogram parameters.; Once a histogram is painted, the statistics box can be accessed using; h->FindObject(""stats""). In the command line it is enough to do:. Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""). because after h->Draw() the histogram is automatically painted. But; in a script file the painting should be forced using gPad->Update(); in order to make sure the statistics box is created:. h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");. Without gPad->Update() the line h->FindObject(""stats""); returns a null pointer.; When a histogram is drawn with the option ""SAME"", the statistics box; is not drawn. To force the statistics box drawing with the option; ""SAME"", the option ""SAMES"" must be used.; If the new statistics box hides the previous statistics box, one can change; its position with these lines (""h"" being the pointer to the histogram):. Root > TPaveStats *st ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:17536,update,updated,17536,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,2,['update'],['updated']
Deployability,"ation ; _regularization = EnumRegularization::NONE, . size_t ; _scaleToNumEvents = 0, . MinimizerType ; _eMinimizerType = MinimizerType::fSteepest, . double ; _learningRate = 1e-5, . double ; _momentum = 0.3, . int ; _repetitions = 3, . bool ; _useMultithreading = true . ). inline . c'tor ; Definition at line 901 of file NeuralNet.h. ◆ ~ClassificationSettings(). virtual TMVA::DNN::ClassificationSettings::~ClassificationSettings ; (; ). inlinevirtual . d'tor ; Definition at line 924 of file NeuralNet.h. Member Function Documentation. ◆ endTestCycle(). void TMVA::DNN::ClassificationSettings::endTestCycle ; (; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 326 of file NeuralNet.cxx. ◆ endTrainCycle(). void TMVA::DNN::ClassificationSettings::endTrainCycle ; (; double ; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 296 of file NeuralNet.cxx. ◆ setResultComputation(). void TMVA::DNN::ClassificationSettings::setResultComputation ; (; std::string ; _fileNameNetConfig, . std::string ; _fileNameResult, . std::vector< Pattern > * ; _resultPatternContainer . ). preparation for monitoring output ; Definition at line 520 of file NeuralNet.cxx. ◆ setWeightSums(). void TMVA::DNN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:7737,update,update,7737,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['update'],['update']
Deployability,"atoi(ctx->dd.config[NUM_THREADS]);; 19835 ; 19836 if ((workerthreadcount > MAX_WORKER_THREADS) || (workerthreadcount <= 0)) {; 19837 if (workerthreadcount <= 0) {; 19838 mg_cry_ctx_internal(ctx, ""%s"", ""Invalid number of worker threads"");; 19839 } else {; 19840 mg_cry_ctx_internal(ctx, ""%s"", ""Too many worker threads"");; 19841 }; 19842 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19843 mg_snprintf(NULL,; 19844 NULL, /* No truncation check for error buffers */; 19845 error->text,; 19846 error->text_buffer_size,; 19847 ""Invalid configuration option value: %s"",; 19848 config_options[NUM_THREADS].name);; 19849 }; 19850 free_context(ctx);; 19851 pthread_setspecific(sTlsKey, NULL);; 19852 return NULL;; 19853 }; 19854 ; 19855 /* Document root */; 19856#if defined(NO_FILES); 19857 if (ctx->dd.config[DOCUMENT_ROOT] != NULL) {; 19858 mg_cry_ctx_internal(ctx, ""%s"", ""Document root must not be set"");; 19859 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19860 mg_snprintf(NULL,; 19861 NULL, /* No truncation check for error buffers */; 19862 error->text,; 19863 error->text_buffer_size,; 19864 ""Invalid configuration option value: %s"",; 19865 config_options[DOCUMENT_ROOT].name);; 19866 }; 19867 free_context(ctx);; 19868 pthread_setspecific(sTlsKey, NULL);; 19869 return NULL;; 19870 }; 19871#endif; 19872 ; 19873 get_system_name(&ctx->systemName);; 19874 ; 19875#if defined(USE_LUA); 19876 /* If a Lua background script has been configured, start it. */; 19877 ctx->lua_bg_log_available = 0;; 19878 if (ctx->dd.config[LUA_BACKGROUND_SCRIPT] != NULL) {; 19879 char ebuf[256];; 19880 struct vec opt_vec;; 19881 struct vec eq_vec;; 19882 const char *sparams;; 19883 ; 19884 memset(ebuf, 0, sizeof(ebuf));; 19885 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19886 ; 19887 /* Create a Lua state, load all standard libraries and the mg table */; 19888 lua_State *state = mg_lua_context_script_prepare(; 19889 ctx->dd.config[LUA_BACKGROUND_SCRIPT], ctx, ebuf, sizeof(ebuf));; 19890 if (!s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:593447,configurat,configuration,593447,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['configurat'],['configuration']
Deployability,"atoi(ctx->dd.config[NUM_THREADS]);; 19836 ; 19837 if ((workerthreadcount > MAX_WORKER_THREADS) || (workerthreadcount <= 0)) {; 19838 if (workerthreadcount <= 0) {; 19839 mg_cry_ctx_internal(ctx, ""%s"", ""Invalid number of worker threads"");; 19840 } else {; 19841 mg_cry_ctx_internal(ctx, ""%s"", ""Too many worker threads"");; 19842 }; 19843 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19844 mg_snprintf(NULL,; 19845 NULL, /* No truncation check for error buffers */; 19846 error->text,; 19847 error->text_buffer_size,; 19848 ""Invalid configuration option value: %s"",; 19849 config_options[NUM_THREADS].name);; 19850 }; 19851 free_context(ctx);; 19852 pthread_setspecific(sTlsKey, NULL);; 19853 return NULL;; 19854 }; 19855 ; 19856 /* Document root */; 19857#if defined(NO_FILES); 19858 if (ctx->dd.config[DOCUMENT_ROOT] != NULL) {; 19859 mg_cry_ctx_internal(ctx, ""%s"", ""Document root must not be set"");; 19860 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19861 mg_snprintf(NULL,; 19862 NULL, /* No truncation check for error buffers */; 19863 error->text,; 19864 error->text_buffer_size,; 19865 ""Invalid configuration option value: %s"",; 19866 config_options[DOCUMENT_ROOT].name);; 19867 }; 19868 free_context(ctx);; 19869 pthread_setspecific(sTlsKey, NULL);; 19870 return NULL;; 19871 }; 19872#endif; 19873 ; 19874 get_system_name(&ctx->systemName);; 19875 ; 19876#if defined(USE_LUA); 19877 /* If a Lua background script has been configured, start it. */; 19878 ctx->lua_bg_log_available = 0;; 19879 if (ctx->dd.config[LUA_BACKGROUND_SCRIPT] != NULL) {; 19880 char ebuf[256];; 19881 struct vec opt_vec;; 19882 struct vec eq_vec;; 19883 const char *sparams;; 19884 ; 19885 memset(ebuf, 0, sizeof(ebuf));; 19886 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19887 ; 19888 /* Create a Lua state, load all standard libraries and the mg table */; 19889 lua_State *state = mg_lua_context_script_prepare(; 19890 ctx->dd.config[LUA_BACKGROUND_SCRIPT], ctx, ebuf, sizeof(ebuf));; 19891 if (!s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:593480,configurat,configuration,593480,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['configurat'],['configuration']
Deployability,"ator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects ;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-catego",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:104085,integrat,integration,104085,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['integrat'],['integration']
Deployability,"ator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id: Integrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:11185,integrat,integrator,11185,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integrator']
Deployability,"ator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id: Integrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IntegratorOneDim.html:11187,integrat,integrator,11187,root/html530/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integrator']
Deployability,"ator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id: Integrator.h 36764 2010-11-19 10:02:00Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:11187,integrat,integrator,11187,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integrator']
Deployability,"ator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Constructor. coverity[UNINIT_CTOR]. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. Bool_t initialize(); One-time integrator initialization. ~RooSegmentedIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. Bool_t setUseIntegrandLimits(Bool_t flag); { _useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Mar 10 17:18:58 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSegmentedIntegrator1D.html:8110,integrat,integration,8110,root/html534/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html534/RooSegmentedIntegrator1D.html,1,['integrat'],['integration']
Deployability,"ator+(TH2L const &h1, TH2L const &h2)Operator +.Definition TH2.cxx:3792; TH2L::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny, Double_t w) overrideIncrement 2D bin content by a weight w.Definition TH2.h:286; TH2L::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow Reallocate bin contents array.Definition TH2.cxx:3758; TH2L::operator*friend TH2L operator*(TH2L const &h1, Float_t c1)Definition TH2.h:292; TH2L::~TH2L~TH2L() overrideDestructor.Definition TH2.cxx:3629; TH2L::Copyvoid Copy(TObject &hnew) const overrideCopy.Definition TH2.cxx:3738; TH2L::RetrieveBinContentDouble_t RetrieveBinContent(Int_t bin) const overrideRaw retrieval of bin content on internal data structure see convention for numbering bins in TH1::Get...Definition TH2.h:299; TH2L::operator/friend TH2L operator/(TH2L const &h1, TH2L const &h2)Operator /.Definition TH2.cxx:3828; TH2L::UpdateBinContentvoid UpdateBinContent(Int_t bin, Double_t content) overrideRaw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH2.h:300; TH2L::TH2LTH2L()Constructor.Definition TH2.cxx:3619; TH2L::operator*friend TH2L operator*(Float_t c1, TH2L const &h1)Operator *.Definition TH2.cxx:3780; TH2L::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH2.cxx:3715; TH2S2-D histogram with a short per channel (see TH1 documentation)Definition TH2.h:182; TH2S::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny, Double_t w) overrideIncrement 2D bin content by a weight w.Definition TH2.h:202; TH2S::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH2.cxx:3222; TH2S::~TH2S~TH2S() overrideDestructor.Definition TH2.cxx:3136; TH2S::operator-friend TH2S operator-(TH2S const &h1, TH2S const &h2)Operator -.Definition TH2.cxx:3346; TH2S::operator=TH2S & operator=(const TH2S &h1)Operator =.Definition TH2.cxx:3311; TH2S::Copyvoid Copy(TObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8h_source.html:32585,update,update,32585,doc/master/TH2_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2_8h_source.html,1,['update'],['update']
Deployability,"ator+(TH3C const &h1, TH3C const &h2)Operator +.Definition TH3.cxx:3743; TH3C::operator/friend TH3C operator/(TH3C const &h1, TH3C const &h2)Operator /.Definition TH3.cxx:3779; TH3C::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny, Int_t binz, Double_t w) overrideIncrement 3D bin content by a weight w.Definition TH3.h:175; TH3C::RetrieveBinContentDouble_t RetrieveBinContent(Int_t bin) const overrideRaw retrieval of bin content on internal data structure see convention for numbering bins in TH1::Get...Definition TH3.h:189; TH3C::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH3.cxx:3603; TH3C::operator=TH3C & operator=(const TH3C &h1)Operator =.Definition TH3.cxx:3720; TH3C::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny, Int_t binz) overrideIncrement 3D bin content by 1.Definition TH3.h:174; TH3C::TH3CTH3C()Constructor.Definition TH3.cxx:3530; TH3C::UpdateBinContentvoid UpdateBinContent(Int_t bin, Double_t content) overrideRaw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH3.h:190; TH3C::Copyvoid Copy(TObject &hnew) const overrideCopy this 3-D histogram structure to newth3.Definition TH3.cxx:3626; TH3D3-D histogram with a double per channel (see TH1 documentation)Definition TH3.h:363; TH3D::operator*friend TH3D operator*(TH3D const &h1, Float_t c1)Definition TH3.h:393; TH3D::UpdateBinContentvoid UpdateBinContent(Int_t bin, Double_t content) overrideRaw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH3.h:401; TH3D::TH3DTH3D()Constructor.Definition TH3.cxx:4669; TH3D::operator+friend TH3D operator+(TH3D const &h1, TH3D const &h2)Operator +.Definition TH3.cxx:4831; TH3D::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow Reallocate bin contents array.Definition TH3.cxx:4763; TH3D::~TH3D~TH3D() overrideDestructor.Definition TH3.cxx:467",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8h_source.html:25709,update,update,25709,doc/master/TH3_8h_source.html,https://root.cern,https://root.cern/doc/master/TH3_8h_source.html,1,['update'],['update']
Deployability,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function ; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:37764,integrat,integration,37764,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,4,['integrat'],['integration']
Deployability,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:35880,integrat,integration,35880,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['integrat'],['integration']
Deployability,"ator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Constructor. coverity[UNINIT_CTOR]. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. Bool_t initialize(); One-time integrator initialization. ~RooSegmentedIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooSegmentedIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); { _useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 2 15:33:40 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSegmentedIntegrator1D.html:8651,integrat,integration,8651,root/html604/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html604/RooSegmentedIntegrator1D.html,1,['integrat'],['integration']
Deployability,"atorBinding: public RooAbsFunc. Function binding representing the output of a RooAbsIntegrator; . Function Members (Methods); public:. RooIntegratorBinding(RooAbsIntegrator& integrator); RooIntegratorBinding(const RooIntegratorBinding&); virtual~RooIntegratorBinding(); static TClass*Class(); UInt_tRooAbsFunc::getDimension() const; virtual Double_tgetMaxLimit(UInt_t index) const; virtual Double_tgetMinLimit(UInt_t index) const; virtual const char*RooAbsFunc::getName() const; virtual TClass*IsA() const; Bool_tRooAbsFunc::isValid() const; Int_tRooAbsFunc::numCall() const; virtual Double_toperator()(const Double_t* xvector) const; RooIntegratorBinding&operator=(const RooIntegratorBinding&); virtual list<Double_t>*RooAbsFunc::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; voidRooAbsFunc::resetNumCall() const; virtual voidRooAbsFunc::restoreXVec() const; virtual voidRooAbsFunc::saveXVec() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. UInt_tRooAbsFunc::_dimensionNumber of observables; RooAbsIntegrator*_integratorNumeric integrator; Int_tRooAbsFunc::_ncallFunction call counter; Bool_tRooAbsFunc::_validIs binding in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooIntegratorBinding(RooAbsIntegrator& integrator); {}. virtual ~RooIntegratorBinding(); {}. Double_t operator()(const Double_t* xvector) const; { _ncall++ ; return _integrator->integral(xvector) ; }. Double_t getMinLimit(UInt_t index) const; { return _integrator->integrand()->getMinLimit(index+1); }. Double_t getMaxLimit(UInt_t index) const; { return _integrator->integrand()->getMaxLimit(index+1); }. » Last changed: Mon Dec 7 13:48:04 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegratorBinding.html:1463,integrat,integrator,1463,root/html526/RooIntegratorBinding.html,https://root.cern,https://root.cern/root/html526/RooIntegratorBinding.html,2,['integrat'],['integrator']
Deployability,"atorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooSetProxydepsdependents of this p.d.f; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooSetProxyintobsobservables that p.d.f is integrated over; RooRealProxyintpdfp.d.f that is integrated. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProjectedPdf(); Default constructor. RooProjectedPdf(const char* name, const char* title, RooAbsReal& _intpdf, const RooArgSet& intObs); Construct projection of input pdf '_intpdf' over observables 'intObs'. RooProjectedPdf(const RooProjectedPdf& other, const char* name = 0); Copy constructor. Double_t getValV(const RooArgSet* set = 0) const; Special version of getVal() overrides RooAbsReal::getValF() to save value of current normalization set. Double_t evaluate() const; Evaluate projected p.d.f. const RooAbsReal* getProjection(const RooArgSet* iset, const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProjectedPdf.html:43923,integrat,integrated,43923,root/html534/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html534/RooProjectedPdf.html,1,['integrat'],['integrated']
Deployability,"atorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. IntegratorMultiDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDimOptions.html:3661,integrat,integrator,3661,root/html602/ROOT__Math__IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDimOptions.html,2,['integrat'],['integrator']
Deployability,"atrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary Interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnum Enum type class; TEnumConstant ; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:57167,configurat,configuration,57167,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['configurat'],['configuration']
Deployability,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveArrow.html:16943,update,update,16943,doc/master/classTEveArrow.html,https://root.cern,https://root.cern/doc/master/classTEveArrow.html,28,['update'],['update']
Deployability,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:17582,update,update,17582,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,1,['update'],['update']
Deployability,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:18422,update,update,18422,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,3,['update'],['update']
Deployability,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBox.html:18689,update,update,18689,doc/master/classTEveBox.html,https://root.cern,https://root.cern/doc/master/classTEveBox.html,10,['update'],['update']
Deployability,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TPointSet3D;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:20143,update,update,20143,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,6,['update'],['update']
Deployability,"atrixD &Dir);  ; void SetDirWeights (std::vector< Double_t > &Origin, TMatrixD &Dir, Double_t alpha);  ; void SetGammaDelta (TMatrixD &Gamma, TMatrixD &Delta, std::vector< Double_t > &Buffer);  ; void Shuffle (Int_t *index, Int_t n);  Input: ;  ; void SimulateEvent (const Event *ev);  ; void SteepestDir (TMatrixD &Dir);  ; void Train (Int_t nEpochs);  ; void TrainOneEpoch ();  train network over a single epoch/cycle of events ;  ; void TrainOneEvent (Int_t ievt);  train network over a single event this uses the new event model ;  ; void TrainOneEventFast (Int_t ievt, Float_t *&branchVar, Int_t &type);  fast per-event training ;  ; void UpdateNetwork (const std::vector< Float_t > &desired, Double_t eventWeight=1.0);  update the network based on how closely the output matched the desired output ;  ; void UpdateNetwork (Double_t desired, Double_t eventWeight=1.0);  update the network based on how closely the output matched the desired output ;  ; void UpdatePriors ();  zjh ;  ; void UpdateRegulators ();  zjh ;  ; void UpdateSynapses ();  update synapse error fields and adjust the weights (if in sequential mode) ;  . Private Attributes; Int_t fBatchSize;  batch size, only matters if in batch learning mode ;  ; EBPTrainingMode fBPMode;  backprop learning mode (sequential or batch) ;  ; TString fBpModeS;  backprop learning mode option string (sequential or batch) ;  ; bool fCalculateErrors;  compute inverse hessian matrix at the end of the training ;  ; Double_t fDecayRate;  decay rate for above learning rate ;  ; std::vector< std::pair< Float_t, Float_t > > * fDeviationsFromTargets;  deviation from the targets, event weight ;  ; Bool_t fEpochMon;  create and fill epoch-wise monitoring histograms (makes outputfile big!) ;  ; Int_t fGA_nsteps;  GA settings: number of steps. ;  ; Int_t fGA_preCalc;  GA settings: number of pre-calc steps. ;  ; Double_t fGA_SC_factor;  GA settings: SC_factor. ;  ; Int_t fGA_SC_rate;  GA settings: SC_rate. ;  ; Int_t fGA_SC_steps;  GA settings",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:33547,update,update,33547,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,2,['update'],['update']
Deployability,ats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::HistoToWorkspaceFactoryFast ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class ; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:46114,configurat,configuration,46114,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['configurat'],['configuration']
Deployability,"attachToTree(TTree& t, Int_t bufSize = 32000); Attach the category index and label to as branches to the given; TTree. The index field will be attached as integer with name; <name>_idx, the label field will be attached as char[] with label; <name>_lbl. void fillTreeBranch(TTree& t); Fill tree branches associated with current object with current value. void setTreeBranchStatus(TTree& t, Bool_t active); (De)activate associate tree branch. void syncCache(const RooArgSet* set = 0); Explicitly synchronize RooAbsCategory internal cache. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE); Copy the cached value from given source and raise dirty flag.; It is the callers responsability to ensure that the sources; cache is clean(valid) before this function is called, e.g. by; calling syncCache() on the source. const RooCatType* getOrdinal(UInt_t n, const char* rangeName = 0) const; Return state definition of ordinal nth defined state,; needed by the generator mechanism. RooAbsArg * createFundamental(const char* newname = 0) const; Create a RooCategory fundamental object with our properties. Bool_t isSignType(Bool_t mustHaveZero = kFALSE) const; Determine if category has 2 or 3 states with index values -1,0,1. Bool_t operator!=(Int_t index); { return !operator==(index);}. Bool_t operator!=(const char* label); { return !operator==(label);}. Bool_t operator!=(const RooAbsArg& other); { return !operator==(other);}. Int_t numTypes(const char* = 0) const; Return number of types defined (in range named rangeName if rangeName!=0). Bool_t isIntegrationSafeLValue(const RooArgSet* ) const; Is this l-value object safe for use as integration observable. Bool_t traceEvalHook(RooCatType ) const; coverity[PASS_BY_VALUE]. RooCatType evaluate() const. » Last changed: Mon Jul 4 15:21:20 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCategory.html:24785,integrat,integration,24785,root/html530/RooAbsCategory.html,https://root.cern,https://root.cern/root/html530/RooAbsCategory.html,1,['integrat'],['integration']
Deployability,"attachToTree(TTree& t, Int_t bufSize = 32000); Attach the category index and label to as branches to the given; TTree. The index field will be attached as integer with name; <name>_idx, the label field will be attached as char[] with label; <name>_lbl. void fillTreeBranch(TTree& t); Fill tree branches associated with current object with current value. void setTreeBranchStatus(TTree& t, Bool_t active); (De)activate associate tree branch. void syncCache(const RooArgSet* set = 0); Explicitly synchronize RooAbsCategory internal cache. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE); Copy the cached value from given source and raise dirty flag.; It is the callers responsability to ensure that the sources; cache is clean(valid) before this function is called, e.g. by; calling syncCache() on the source. const RooCatType* getOrdinal(UInt_t n, const char* rangeName = 0) const; Return state definition of ordinal nth defined state,; needed by the generator mechanism. RooAbsArg * createFundamental(const char* newname = 0) const; Create a RooCategory fundamental object with our properties. Bool_t isSignType(Bool_t mustHaveZero = kFALSE) const; Determine if category has 2 or 3 states with index values -1,0,1. Bool_t operator!=(Int_t index); { return !operator==(index);}. Bool_t operator!=(const char* label); { return !operator==(label);}. Bool_t operator!=(const RooAbsArg& other); { return !operator==(other);}. Int_t numTypes(const char* = 0) const; Return number of types defined (in range named rangeName if rangeName!=0). Bool_t isIntegrationSafeLValue(const RooArgSet* ) const; Is this l-value object safe for use as integration observable. Bool_t traceEvalHook(RooCatType ) const; coverity[PASS_BY_VALUE]. RooCatType evaluate() const. » Last changed: Sat Oct 9 22:38:28 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCategory.html:24663,integrat,integration,24663,root/html528/RooAbsCategory.html,https://root.cern,https://root.cern/root/html528/RooAbsCategory.html,1,['integrat'],['integration']
Deployability,"atternWeight);  soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ;  ; double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:13688,update,update,13688,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['update'],['update']
Deployability,"atternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34370,update,update,34370,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['update'],['update']
Deployability,"attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:42450,integrat,integration,42450,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,1,['integrat'],['integration']
Deployability,"atural lower and upper limits. Double_t BetaIncomplete(Double_t x, Double_t a, Double_t b); Calculates the incomplete Beta-function. Double_t Binomial(Int_t n, Int_t k); Calculate the binomial coefficient n over k. Double_t BinomialI(Double_t p, Int_t n, Int_t k); Suppose an event occurs with probability _p_ per trial; Then the probability P of its occuring _k_ or more times; in _n_ trials is termed a cumulative binomial probability; the formula is P = sum_from_j=k_to_n(TMath::Binomial(n, j)*; *TMath::Power(p, j)*TMath::Power(1-p, n-j); For _n_ larger than 12 BetaIncomplete is a much better way; to evaluate the sum than would be the straightforward sum calculation; for _n_ smaller than 12 either method is acceptable; (""Numerical Recipes""); --implementation by Anna Kreshuk. Double_t CauchyDist(Double_t x, Double_t t = 0, Double_t s = 1); Computes the density of Cauchy distribution at point x; by default, standard Cauchy distribution is used (t=0, s=1); t is the location parameter; s is the scale parameter; The Cauchy distribution, also called Lorentzian distribution,; is a continuous distribution describing resonance behavior; The mean and standard deviation of the Cauchy distribution are undefined.; The practical meaning of this is that collecting 1,000 data points gives; no more accurate an estimate of the mean and standard deviation than; does a single point.; The formula was taken from ""Engineering Statistics Handbook"" on site; http://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm; Implementation by Anna Kreshuk.; Example:; TF1* fc = new TF1(""fc"", ""TMath::CauchyDist(x, [0], [1])"", -5, 5);; fc->SetParameters(0, 1);; fc->Draw();. Double_t ChisquareQuantile(Double_t p, Double_t ndf); Evaluate the quantiles of the chi-squared probability distribution function.; Algorithm AS 91 Appl. Statist. (1975) Vol.24, P.35; implemented by Anna Kreshuk.; Incorporates the suggested changes in AS R85 (vol.40(1), pp.233-5, 1991); Parameters:; p - the probability value, at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:29116,continuous,continuous,29116,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['continuous'],['continuous']
Deployability,"atus of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooSetProxy_varSetNot used anymore?; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConvCoefVar.html:31754,integrat,integrator,31754,root/html526/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html526/RooConvCoefVar.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"atus of the last Integral calculation ;  . #include <Math/VirtualIntegrator.h>. Inheritance diagram for ROOT::Math::VirtualIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~VirtualIntegratorMultiDim(). ROOT::Math::VirtualIntegratorMultiDim::~VirtualIntegratorMultiDim ; (; ). inlineoverride . destructor: no operation ; Definition at line 165 of file VirtualIntegrator.h. Member Function Documentation. ◆ Integral(). virtual double ROOT::Math::VirtualIntegratorMultiDim::Integral ; (; const double * ; , . const double * ;  . ). pure virtual . evaluate multi-dim integral ; Implemented in ROOT::Math::GSLMCIntegrator, and ROOT::Math::AdaptiveIntegratorMultiDim. ◆ Options(). virtual ROOT::Math::IntegratorMultiDimOptions ROOT::Math::VirtualIntegratorMultiDim::Options ; (; ); const. pure virtual . get the option used for the integration implement by derived class otherwise return default ones ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator. ◆ SetFunction(). virtual void ROOT::Math::VirtualIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; ). pure virtual . setting a multi-dim function ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator. ◆ SetOptions(). virtual void ROOT::Math::VirtualIntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inlinevirtual . set the options (if needed must be re-implemented by derived classes) ; Reimplemented in ROOT::Math::AdaptiveIntegratorMultiDim, and ROOT::Math::GSLMCIntegrator.; Definition at line 183 of file VirtualIntegrator.h. ◆ Type(). virtual ROOT::Math::IntegrationMultiDim::Type ROOT::Math::VirtualIntegratorMultiDim::Type ; (; ); const. inlinevirtual . return type of integrator ; Definition at line 178 of file VirtualIntegrator.h. Libraries for ROOT::Math::VirtualIntegratorMultiDim:. [legend]; The documen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html:3100,integrat,integration,3100,doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"atusBar * GetStatusBar () const;  ; Bool_t HandleTimer (TTimer *) override;  Handle animation timer. ;  ; TClass * IsA () const override;  ; Bool_t IsAutoSave () const;  ; Bool_t IsBusy () const;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame. ;  ; void MyHandleMenu (Int_t);  Handle session viewer custom popup menus. ;  ; void OnCascadeMenu ();  Handle feedback histograms configuration menu. ;  ; void OnListTreeClicked (TGListTreeItem *entry, Int_t btn, Int_t x, Int_t y);  Handle mouse clicks in list tree. ;  ; void OnListTreeDoubleClicked (TGListTreeItem *entry, Int_t btn);  Handle mouse double clicks in list tree (connect to server). ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t) override;  Handle messages send to the TSessionViewer object. ;  ; void QueryResultReady (char *query);  Handle signal ""query result ready"" coming from Proof session. ;  ; void ReadConfiguration (const char *filename=nullptr);  Read configuration file and populate list of sessions list of queries and list of packages. ;  ; void ResetSession ();  Reset Proof session. ;  ; void SetBusy (Bool_t busy=kTRUE);  ; void SetChangePic (Bool_t change);  ; void SetLogWindow (TSessionLogView *log);  ; void ShowEnabledPackages ();  Query list of enabled packages from proof and display it into a new text window. ;  ; void ShowInfo (const char *txt);  Display text in status bar. ;  ; void ShowLog (const char *queryref);  Display the content of the temporary log file for queryref into a new text window. ;  ; void ShowPackages ();  Query the list of uploaded packages from proof and display it into a new text window. ;  ; void ShowStatus ();  Retrieve and display Proof status. ;  ; void StartupMessage (char *msg, Bool_t stat, Int_t curr, Int_t total);  Handle startup message (connection progress) coming from Proof session. ;  ; void StartViewer ();  Start TreeViewer from selected TChain. ;  ; void Streamer (TBuffer &) override;  Stream an obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:3276,configurat,configuration,3276,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['configurat'],['configuration']
Deployability,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TFoamCell**fCells[fNCells] Array of ALL cells; TRefArray*fCellsActArray of pointers to active cells, constructed at the end of foam build-up; Int_tfChatChat=0,1,2 chat level in output, Chat=1 normal level; TStringfDateRelease date of FOAM; Int_tfDimDimension of the integration/simulation space; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; TObjArray*fHistDbgHistograms of wt, for debug; TObjArray*fHistEdgHistograms of wt, one for each cell edge; TH1D*fHistWtHistogram of the MC wt; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TFoamMaxwt*fMCMonitMonitor of the MC weight for measuring MC efficiency; Double_tfMCerrorand its error; Double_tfMCresultTrue Integral R from MC series; Double_t*fMCvect[fDim] Generated MC vector for the outside user; Double_tfMCwtMC weight; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; Double_tfMaxWtRejMaximum weight in rejection for getting wt=1 events; TMethodCall*fMethodCall! ROOT's pointer to user-defined global distribution function; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Long_tfNCallsTotal number of the function calls; Int_tfNCellsMaximum number of cells; Long_tfNEffevTotal number of effective events (wt=1) in the foam buildup; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; Double_tfNevGenTotal number of the generated MC events; Int_tfNoActNumber of active cells; Int_tfOptD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoam.html:12343,integrat,integration,12343,root/html602/TFoam.html,https://root.cern,https://root.cern/root/html602/TFoam.html,2,['integrat'],['integration']
Deployability,atusBitsTObject::kMustCleanup; static RooPrintable::ContentsOptionRooPrintable::kName; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:8360,integrat,integration,8360,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,2,['integrat'],['integration']
Deployability,"aussKronrodIntegrator1D(); Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Mon Dec 7 13:45:52 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:9800,integrat,integrate,9800,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,4,['integrat'],['integrate']
Deployability,"aussKronrodIntegrator1D(); Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_t& xx); Return contents of xx in internal array pointer. » Last changed: Sat Oct 9 06:58:01 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAdaptiveGaussKronrodIntegrator1D.html:9786,integrat,integrate,9786,root/html528/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooAdaptiveGaussKronrodIntegrator1D.html,4,['integrat'],['integrate']
Deployability,"ave As…: popup a dialog for saving the current canvas drawing in a new filename.; Print: popup a dialog to print the current canvas drawing; Quit ROOT: exit the ROOT session. 2.3.1.2 Edit Menu; There is only one active menu entry in the Edit menu. The others menu entries will be implemented and will become active in the near future. Clear: delete all objects in the canvas or in the selected pad according to the selected entry in the submenu. 2.3.1.3 View Menu. Editor: toggles the view of the editor. If it is selected activates and shows up the editor on the left side of the canvas window. According to the selected object, the editor loads the corresponding user interface for easy change of the object’s attributes.; Toolbar: toggles the view of the toolbar. If it is selected activates and shows up the toolbar. It contains buttons for easy and fast access to most frequently used commands and for graphics primitive drawing. Tool tips are provided for helping users.; Status Bar: toggles the view of the status bar. If it is selected, the status bar below the canvas window shows up. There the identification of the objects is displayed when moving the mouse (such as the object’s name, the object’s type, its coordinates, etc.).; Colors: creates a new canvas showing the color palette.; Markers: creates a new canvas showing the various marker styles.; Iconify: create the canvas window icon, does not close the canvas; View With…: If the last selected pad contains a 3-d structure, a new canvas is created with a 3-D picture according to the selection made from the cascaded menu: X3D or OpenGL. The 3-D image can be interactively rotated, zoomed in wire-frame, solid, hidden line or stereo mode. 2.3.1.4 Options Menu. Auto Resize Canvas: turns auto-resize of the canvas on/off:. on - the canvas fits to the window when changing the window size;; off - the canvas stays fixed when changing the window size. Resize Canvas: resizes and fits the canvas to the window size.; Move Opaque: if se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:38611,toggle,toggles,38611,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['toggle'],['toggles']
Deployability,ave the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error fou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13555,configurat,configuration,13555,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error fou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13667,configurat,configuration,13667,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.2,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15952,configurat,configuration,15952,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15228,configurat,configuration,15228,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15340,configurat,configuration,15340,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15784,configurat,configuration,15784,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17231,configurat,configuration,17231,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.29682 0.292587 0.0806285 0.00686869 43384.1 1; : ; : Elapsed time for training with 4000 events: 1.62 sec ; : Dataset[dataset] : Create results for training; : Dataset[dataset] : Multiclass evaluation of DL_CPU on training sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.106 sec ; : Creating multiclass resp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:16292,configurat,configuration,16292,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21124,configurat,configuration,21124,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21236,configurat,configuration,21236,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21348,configurat,configuration,21348,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22237,configurat,configuration,22237,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,ave the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.65912 0.0202218 0.00185299 43552 0; : 976 | 3.7346 5.23443 0.0200603 0.00176255 43721.2 1; : 977 | 3.73856 4.9727 0.0200443 0.00176151 43757 2; : 978 | 3.60727 4.99113 0.0200479 0.00175633 43736 3; : 979 | 3.40672 4.84357 0.0200357 0.00175685 43766.5 4; : 980 | 3.44899 4.83288 0.0200548 0.0017499 43704.2 5; : 981 | 3.46445 4.72048 0.0203135 0.00176046 43119.7 6; : 982 Minimum Test error found - save the configuration ; : 982 | 3.46604 4.64127 0.0202116 0.00183381 43530.8 0; : 983 Minimum Test error found - save the configuration ; : 983 | 3.37896 4.59559 0.0201715 0.00182642 43608.5 0; : 984 Minimum Test error found - save the configuration ; : 984 | 3.36213 4.34126 0.0202597 0.00185498 43467.1 0; : 985 | 3.39032 4.51659 0.0201503 0.00185184 43719.5 1; : 986 | 3.5234 4.95577 0.0201762 0.0017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:112047,configurat,configuration,112047,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"awData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////////////////////////////////////////////////////////////////; 2141/// Save geometry configuration as C++ macro; 2142 ; 2143void RGeomDescription::SavePrimitive(std::ostream &fs, const std::string &name); 2144{; 2145 std::string prefix = "" "";; 2146 ; 2147 if (fCfg.vislevel != 0); 2148 fs << prefix << name << ""SetVisLevel("" << fCfg.vislevel << "");"" << std::endl;; 2149 if (fCfg.maxnumnodes != 0); 2150 fs << prefix << name << ""SetMaxVisNodes("" << fCfg.maxnumnodes << "");"" << std::endl;; 2151 if (fCfg.maxnumfaces != 0); 2152 fs << prefix << name << ""SetMaxVisFaces("" << fCfg.maxnumfaces << "");"" << std::endl;; 2153 if (fCfg.showtop); 2154 fs << prefix << name << ""SetTopVisible(true);"" << std::endl;; 2155 if (fCfg.build_shapes != 1); 2156 fs << prefix << name <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:64547,configurat,configuration,64547,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['configurat'],['configuration']
Deployability,"awing options include the possibility to change the slider starting and ending positions or only one of them.; The current slider position can be retrieved via the functions TSlider::GetMinimum and TSlider::GetMaximum These two functions return numbers in the range [0,1].; If a method has been set (via TSlider::SetMethod), the expression is executed via the interpreter when the button 1 is released.; if no method has been set, and an object is referenced (TSlider::SetObject has been called), while the slider is being moved/resized, the object ExecuteEvent function is called. Example 1 using TSlider::SetMethod; macro xyslider.C; void xyslider(); {; // Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""Color plot pad"",0.1,0.1,0.98,0.98);; pad->Draw();; pad->cd();; hpxpy->Draw(""COLZ"");; c1->cd();; ; // Create two sliders in main canvas. When button1 will be released; // the macro action.C will be called.; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::TPadTPad()Pad default constructor.Definition TPad.cxx:132; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlider.html:1434,release,released,1434,doc/master/classTSlider.html,https://root.cern,https://root.cern/doc/master/classTSlider.html,1,['release'],['released']
Deployability,"aximum size of array xp and size of array p ; [out]xparray filled with n quantiles evaluated at p. Memory has to be preallocated by caller. ; [in]parray of cumulative probabilities where quantiles should be evaluated. It is assumed to contain at least n values. . Returnsn, the number of quantiles computed (same as input argument n); Getting quantiles from two histograms and storing results in a TGraph, a so-called QQ-plot TGraph *gr = new TGraph(nprob);; f1->GetQuantiles(nprob,gr->GetX(),p);; f2->GetQuantiles(nprob,gr->GetY(),p);; gr->Draw(""alp"");; AuthorEddy Offermann ; WarningFunction leads to undefined behavior if xp or p are null or their size does not match with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape in [xmin,xmax]. ; The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The parabolic approximation is very good as soon as the number of bins is greater than 50.; Parameters. xminminimum value for generated random numbers ; xmaxmaximum value for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:84006,integrat,integrated,84006,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['integrat'],['integrated']
Deployability,"axis); the number of bins (shown in the field below the; Slider) can be changed to any number which divides; the number of bins of the original histogram.; Pushing 'Apply' will delete the origin histogram and; replace it by the rebinned one on the screen.; Pushing 'Ignore' the origin histogram will be restored; Histogram drawn from an ntuple:; 'Rebin' with the sliders the number of bins can be enlarged by; a factor of 2,3,4,5 (moving to the right) or reduced; by a factor of 1/2, 1/3, 1/4, 1/5; 'BinOffset': with the BinOffset slider the origin of the; histogram can be changed within one binwidth; Using this slider the effect of binning the data into; bins can be made visible => statistical fluctuations; 'Axis Range': with the DoubleSlider it is possible to zoom into; the specified axis range. It is also possible to set; the upper and lower limit in fields below the slider; 'Delayed drawing': all the Binning sliders can be set to delay; draw mode. Then the changes on the histogram are only; updated, when the Slider is released. This should be; activated if the redrawing of the histogram is too; time consuming. Function Members (Methods); public:. TH2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TH2Editor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAcceptModel(TObject* model); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2Editor.html:3824,update,updated,3824,root/html528/TH2Editor.html,https://root.cern,https://root.cern/root/html528/TH2Editor.html,8,"['release', 'update']","['released', 'updated']"
Deployability,"axis); the number of bins (shown in the field below the; Slider) can be changed to any number which divides; the number of bins of the original histogram.; Pushing 'Apply' will delete the origin histogram and; replace it by the rebinned one on the screen.; Pushing 'Ignore' the origin histogram will be restored; Histogram drawn from an ntuple:; 'Rebin' with the sliders the number of bins can be enlarged by; a factor of 2,3,4,5 (moving to the right) or reduced; by a factor of 1/2, 1/3, 1/4, 1/5; 'BinOffset': with the BinOffset slider the origin of the; histogram can be changed within one binwidth; Using this slider the effect of binning the data into; bins can be made visible => statistical fluctuations; 'Axis Range': with the DoubleSlider it is possible to zoom into; the specified axis range. It is also possible to set; the upper and lower limit in fields below the slider; 'Delayed drawing': all the Binning sliders can be set to delay; draw mode. Then the changes on the histogram are only; updated, when the Slider is released. This should be; activated if the redrawing of the histogram is too; time consuming. Function Members (Methods); public:. virtual~TH2Editor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAcceptModel(TObject* model); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2Editor.html:3825,update,updated,3825,root/html602/TH2Editor.html,https://root.cern,https://root.cern/root/html602/TH2Editor.html,4,"['release', 'update']","['released', 'updated']"
Deployability,"ayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ; (; TString & ; output, . Int_t ; prev . ). private . Builds the output layer Neurons are linear combinations of input, by default. ; If the structure ends with ""!"", neurons are set up for classification, ie. with a sigmoid (1 neuron) or softmax (more neurons) activation function. ; Definition at line 1483 of file TMultiLayerPerceptron.cxx. ◆ BuildNetwork(). void TMultiLayerPerceptron::BuildNetwork ; (; ). protected . Instantiates the network from the description. ; Definition at line 1370 of file TMultiLayerPerceptron.cxx. ◆ BuildOneHiddenLayer(). void TMultiLayerPerceptron::BuildOneHiddenLayer ; (; const TString & ; sNumNodes, . Int_t & ; layer, . Int_t & ; prevStart, . Int_t & ; prevStop, . Bool_t ; lastLayer . ). private . Builds a hidden layer, updates the number of layers. ; Definition at line 1438 of file TMultiLayerPerceptron.cxx. ◆ Class(). static TClass * TMultiLayerPerceptron::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiLayerPerceptron::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiLayerPerceptron::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ ComputeDEDw(). void TMultiLayerPerceptron::ComputeDEDw ; (; ); const. Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ; Definition at line 1163 of file TMultiLayerPerceptron.cxx. ◆ ConjugateGradientsDir(). void TMultiLayerPerceptron::ConjugateGradientsDir ; (; Double_t * ; dir, . Double_t ; beta . ). protected . Sets the search direction to conjugate gradient direction beta should be: ; \(||g_{(t+1)}||^2 / ||g_{(t)}||^2\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:35793,update,updates,35793,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['update'],['updates']
Deployability,"ays of length na, nb, respectively.; 718/// The elements of a and b must be given in ascending order.; 719/// option is a character string to specify options; 720/// ""D"" Put out a line of ""Debug"" printout; 721/// ""M"" Return the Maximum Kolmogorov distance instead of prob; 722///; 723/// ### Output:; 724/// The returned value prob is a calculated confidence level which gives a; 725/// statistical test for compatibility of a and b.; 726/// Values of prob close to zero are taken as indicating a small probability; 727/// of compatibility. For two point sets drawn randomly from the same parent; 728/// distribution, the value of prob should be uniformly distributed between; 729/// zero and one.; 730/// in case of error the function return -1; 731/// If the 2 sets have a different number of points, the minimum of; 732/// the two sets is used.; 733///; 734/// ### Method:; 735/// The Kolmogorov test is used. The test statistic is the maximum deviation; 736/// between the two integrated distribution functions, multiplied by the; 737/// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; 738///; 739/// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); 740/// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; 741/// Statistical Methods in Experimental Physics, (North-Holland,; 742/// Amsterdam 1971) 269-271); 743///; 744/// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); 745///; 746/// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; 747/// over the two sorted arrays a and b representing empirical distribution; 748/// functions. The for-loop handles 3 cases: when the next points to be; 749/// evaluated satisfy a>b, a<b, or a=b:; 750///; 751/// ~~~ {.cpp}; 752/// for (Int_t i=0;i<na+nb;i++) {; 753/// if (a[ia-1] < b[ib-1]) {; 754/// rdiff -= sa;; 755/// ia++;; 756/// if (ia > na) {ok = kTRUE; break;}; 757/// } else if (a[ia-1] > b[ib-1]) {; 758/// rdiff += sb;; 759/// ib++;; 760/// if (ib > nb) {ok = kTRUE; bre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:24136,integrat,integrated,24136,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['integrat'],['integrated']
Deployability,"b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html:8924,integrat,integration,8924,root/html534/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html,3,['integrat'],['integration']
Deployability,"b should have opened in your browser."");; 658}; 659 ; 660namespace {; 661enum EUrl { kURLforClass, kURLforNameSpace, kURLforStruct };; 662////////////////////////////////////////////////////////////////////////////////; 663/// The function generates a URL address for class or namespace (scopeName).; 664/// This is the URL to the online reference guide, generated by Doxygen.; 665/// With the enumeration ""EUrl"" we pick which case we need - the one for; 666/// class (kURLforClass) or the one for namespace (kURLforNameSpace).; 667///; 668/// \param[in] scopeName the name of the class or the namespace; 669/// \param[in] scopeType the enumerator for class or namespace; 670 ; 671static TString UrlGenerator(TString scopeName, EUrl scopeType); 672{; 673 // We start the URL with a static part, the same for all scopes and members.; 674 TString url = ""https://root.cern/doc/"";; 675 // Then we check the ROOT version used.; 676 TPRegexp re4(R""(.*/(v\d)-(\d\d)-00-patches)"");; 677 const char *branchName = gROOT->GetGitBranch();; 678 TObjArray *objarr = re4.MatchS(branchName);; 679 TString version;; 680 // We extract the correct version name for the URL.; 681 if (objarr && objarr->GetEntries() == 3) {; 682 // We have a valid version of ROOT and we will extract the correct name for the URL.; 683 version = ((TObjString *)objarr->At(1))->GetString() + ((TObjString *)objarr->At(2))->GetString();; 684 } else {; 685 // If it's not a supported version, we will go to ""master"" branch.; 686 version = ""master"";; 687 }; 688 delete objarr;; 689 url.Append(version);; 690 url.Append(""/"");; 691 // We will replace all ""::"" with ""_1_1"" and all ""_"" with ""__"" in the; 692 // classes definitions, due to Doxygen syntax requirements.; 693 scopeName.ReplaceAll(""_"", ""__"");; 694 scopeName.ReplaceAll(""::"", ""_1_1"");; 695 // We build the URL for the correct scope type and name.; 696 if (scopeType == kURLforClass) {; 697 url.Append(""class"");; 698 } else if (scopeType == kURLforStruct) {; 699 url.Append(""struct"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:23689,patch,patches,23689,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['patch'],['patches']
Deployability,"b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:8612,integrat,integration,8612,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['integrat'],['integration']
Deployability,"b);  ; void Terminate (Int_t status) override;  Terminate the proof server. ;  ; void TruncateLogFile ();  Truncate the log file to the 80% of the required max size if this is set. ;  ; Int_t UpdateSessionStatus (Int_t xst=-1);  Update the session status in the relevant file. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefill",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:6605,install,installation,6605,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['install'],['installation']
Deployability,"b::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12472,integrat,integration,12472,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,2,['integrat'],['integration']
Deployability,"bName); 2177{; 2178 // If the rootmap file name does not exist, create one following the libname; 2179 // I.E. put into the directory of the lib the rootmap and within the rootmap the normalised path to the lib; 2180 if (rootmapFileName.empty()) {; 2181 size_t libExtensionPos = rootmapLibName.find_last_of(gLibraryExtension) - gLibraryExtension.size() + 1;; 2182 rootmapFileName = rootmapLibName.substr(0, libExtensionPos) + "".rootmap"";; 2183 size_t libCleanNamePos = rootmapLibName.find_last_of(gPathSeparator) + 1;; 2184 rootmapLibName = rootmapLibName.substr(libCleanNamePos, std::string::npos);; 2185 ROOT::TMetaUtils::Info(nullptr, ""Rootmap file name %s built from rootmap lib name %s"",; 2186 rootmapLibName.c_str(),; 2187 rootmapFileName.c_str());; 2188 }; 2189}; 2190 ; 2191////////////////////////////////////////////////////////////////////////////////; 2192/// Extract the proper autoload key for nested classes; 2193/// The routine does not erase the name, just updates it; 2194 ; 2195void GetMostExternalEnclosingClassName(const clang::DeclContext &theContext,; 2196 std::string &ctxtName,; 2197 const cling::Interpreter &interpreter,; 2198 bool treatParent = true); 2199{; 2200 const clang::DeclContext *outerCtxt = treatParent ? theContext.getParent() : &theContext;; 2201 // If the context has no outer context, we are finished; 2202 if (!outerCtxt) return;; 2203 // If the context is a class, we update the name; 2204 if (const clang::RecordDecl *thisRcdDecl = llvm::dyn_cast<clang::RecordDecl>(outerCtxt)) {; 2205 ROOT::TMetaUtils::GetNormalizedName(ctxtName, thisRcdDecl, interpreter);; 2206 }; 2207 // We recurse; 2208 GetMostExternalEnclosingClassName(*outerCtxt, ctxtName, interpreter);; 2209}; 2210 ; 2211////////////////////////////////////////////////////////////////////////////////; 2212 ; 2213void GetMostExternalEnclosingClassNameFromDecl(const clang::Decl &theDecl,; 2214 std::string &ctxtName,; 2215 const cling::Interpreter &interpreter); 2216{; 2217 const clang::Decl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:86944,update,updates,86944,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['update'],['updates']
Deployability,"back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:18084,update,update,18084,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['update'],['update']
Deployability,"balBinglobal bin number ; [out]localbin numbers of the distribution's axes. returns the distribution in which the globalBin is located or 0 if the globalBin is outside this node and its children ; Definition at line 2044 of file TUnfoldBinning.cxx. ◆ ToGlobalBin(). Int_t TUnfoldBinning::ToGlobalBin ; (; Int_t const * ; axisBins, . Int_t * ; isBelow = nullptr, . Int_t * ; isAbove = nullptr . ); const. protected . get global bin number, given axis bin numbers ; Parameters. [in]axisBins[]bin numbers on each axis ; [out]isBelowindicates bins are in underflow but there is no undeflow bin ; [out]isAboveindicates bins are in overflow but there is no overflow bin. return: global bin nuber or -1 if not matched. ; Definition at line 1997 of file TUnfoldBinning.cxx. ◆ UpdateFirstLastBin(). Int_t TUnfoldBinning::UpdateFirstLastBin ; (; Bool_t ; startWithRootNode = kTRUE). protected . update fFirstBin and fLastBin members of this node and its children ; Parameters. [in]startWithRootNodeif true, start the update with the root node . Definition at line 169 of file TUnfoldBinning.cxx. Member Data Documentation. ◆ childNode. TUnfoldBinning* TUnfoldBinning::childNode. protected . first daughter node ; Definition at line 63 of file TUnfoldBinning.h. ◆ fAxisLabelList. TObjArray* TUnfoldBinning::fAxisLabelList. protected . for each axis its name (TObjString), or names of unconnected bins ; Definition at line 71 of file TUnfoldBinning.h. ◆ fAxisList. TObjArray* TUnfoldBinning::fAxisList. protected . for each axis the bin borders (TVectorD) ; Definition at line 69 of file TUnfoldBinning.h. ◆ fBinFactorConstant. Double_t TUnfoldBinning::fBinFactorConstant. protected . common scale factor for all bins of this node ; Definition at line 85 of file TUnfoldBinning.h. ◆ fBinFactorFunction. TObject* TUnfoldBinning::fBinFactorFunction. protected . function to calculate a scale factor from bin centres (may be a TF1 or a TVectorD ; Definition at line 83 of file TUnfoldBinning.h. ◆ fDistributionSize.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinning.html:58004,update,update,58004,doc/master/classTUnfoldBinning.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html,1,['update'],['update']
Deployability,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 755 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:115537,integrat,integrated,115537,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 753 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:116796,integrat,integrated,116796,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"bars is reversed; 230 if (f->Eval(x,y-eyl) < f->Eval(x,y+eyh)) {; 231 eyl_new = TMath::Abs(fxy - f->Eval(x,y-eyl));; 232 eyh_new = TMath::Abs(f->Eval(x,y+eyh) - fxy);; 233 } else {; 234 eyh_new = TMath::Abs(fxy - f->Eval(x,y-eyl));; 235 eyl_new = TMath::Abs(f->Eval(x,y+eyh) - fxy);; 236 }; 237 ; 238 //error on x doesn't change; 239 SetPointError(i,exl,exh,eyl_new,eyh_new);; 240 }; 241 if (gPad) gPad->Modified();; 242}; 243 ; 244 ; 245////////////////////////////////////////////////////////////////////////////////; 246/// Compute range.; 247 ; 248void TGraphBentErrors::ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const; 249{; 250 TGraph::ComputeRange(xmin,ymin,xmax,ymax);; 251 ; 252 for (Int_t i=0;i<fNpoints;i++) {; 253 if (fX[i] -fEXlow[i] < xmin) {; 254 if (gPad && gPad->GetLogx()) {; 255 if (fEXlow[i] < fX[i]) xmin = fX[i]-fEXlow[i];; 256 else xmin = TMath::Min(xmin,fX[i]/3);; 257 } else {; 258 xmin = fX[i]-fEXlow[i];; 259 }; 260 }; 261 if (fX[i] +fEXhigh[i] > xmax) xmax = fX[i]+fEXhigh[i];; 262 if (fY[i] -fEYlow[i] < ymin) {; 263 if (gPad && gPad->GetLogy()) {; 264 if (fEYlow[i] < fY[i]) ymin = fY[i]-fEYlow[i];; 265 else ymin = TMath::Min(ymin,fY[i]/3);; 266 } else {; 267 ymin = fY[i]-fEYlow[i];; 268 }; 269 }; 270 if (fY[i] +fEYhigh[i] > ymax) ymax = fY[i]+fEYhigh[i];; 271 }; 272}; 273 ; 274 ; 275////////////////////////////////////////////////////////////////////////////////; 276/// Copy and release.; 277 ; 278void TGraphBentErrors::CopyAndRelease(Double_t **newarrays,; 279 Int_t ibegin, Int_t iend, Int_t obegin); 280{; 281 CopyPoints(newarrays, ibegin, iend, obegin);; 282 if (newarrays) {; 283 delete[] fEXlow;; 284 fEXlow = newarrays[0];; 285 delete[] fEXhigh;; 286 fEXhigh = newarrays[1];; 287 delete[] fEYlow;; 288 fEYlow = newarrays[2];; 289 delete[] fEYhigh;; 290 fEYhigh = newarrays[3];; 291 delete[] fEXlowd;; 292 fEXlowd = newarrays[4];; 293 delete[] fEXhighd;; 294 fEXhighd = newarrays[5];; 295 delete[] fEYlowd;; 296 fEYlowd =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:9129,release,release,9129,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['release'],['release']
Deployability,"based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 38026 2011-02-10 11:46:12Z rdm $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Chebyshev.html:3439,integrat,integration,3439,root/html530/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Chebyshev.html,1,['integrat'],['integration']
Deployability,"based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 38026 2011-02-10 11:46:12Z rdm $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Chebyshev.html:3439,integrat,integration,3439,root/html532/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Chebyshev.html,1,['integrat'],['integration']
Deployability,"basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset = 0, const char* rangeName = 0) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:46752,integrat,integration,46752,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,3,['integrat'],['integration']
Deployability,"basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:50140,integrat,integration,50140,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,3,['integrat'],['integration']
Deployability,"basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const char* rangeName); Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:46276,integrat,integration,46276,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,1,['integrat'],['integration']
Deployability,"be a C++ callable object implementing operator()(double x); 228 @param a lower value of the integration interval; 229 @param b upper value of the integration interval; 230 */; 231 template<class Function>; 232 double Integral(Function & f, double a, double b);; 233 ; 234 ; 235 /**; 236 evaluate the Integral of a function f over the defined interval (a,b); 237 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 238 @param a lower value of the integration interval; 239 @param b upper value of the integration interval; 240 */; 241 double Integral(const IGenFunction & f, double a, double b) {; 242 SetFunction(f,false);; 243 return Integral(a,b);; 244 }; 245 ; 246 ; 247// /**; 248// evaluate the Integral of a function f over the infinite interval (-inf,+inf); 249// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 250// */; 251// template<class Function>; 252// double Integral(const Function & f);; 253 ; 254 /**; 255 evaluate the Integral of a function f over the infinite interval (-inf,+inf); 256 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 257 */; 258 double Integral(const IGenFunction & f) {; 259 SetFunction(f,false);; 260 return Integral();; 261 }; 262 ; 263 ; 264// /**; 265// evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 266// @param f integration function. The function type must be a C++ callable object implementing operator()(double x); 267// @param a lower value of the integration interval; 268// */; 269// template<class Function>; 270// double IntegralUp(Function & f, double a);; 271 ; 272 /**; 273 evaluate the Integral of a function f over the semi-infinite interval (a,+inf); 274 @param f integration function. The function type must implement the mathlib::IGenFunction interface; 275 @param a lower value of the integration interval; 276 ; 277 */; 278 double Integr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:10050,integrat,integration,10050,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; Bool_tTGPictureButton::fOwnDisabledPickTRUE if disabled picture was autogenerated; const TGWindow*TGWindow::fParentParent window; const TGPicture*TGPictureButton::fPicpicture to be put in button; const TGPicture*TGPictureButton::fPicDpicture shown when button disabled; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; TList*fTrashcollect all objects that need to be cleaned up; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGImageMap.html:20859,release,released,20859,root/html530/TGImageMap.html,https://root.cern,https://root.cern/root/html530/TGImageMap.html,3,['release'],['released']
Deployability,"be specified:. option: specifies the interpolation method to be used.; Choices are ""linear"" (iKind = 1) or ""constant"" (iKind = 2).; nout: If xout is not specified, interpolation takes place at n equally; spaced points spanning the interval [min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values specifying where interpolation is to; take place.; yleft: the value to be returned when input x values less than min(x).; The default is defined by the value of rule given below.; yright: the value to be returned when input x values greater than max(x).; The default is defined by the value of rule given below.; rule: an integer describing how interpolation is to take place outside; the interval [min(x), max(x)]. If rule is 0 then the given yleft; and yright values are returned, if it is 1 then 0 is returned; for such points and if it is 2, the value at the closest data; extreme is used.; f: For method=""constant"" a number between 0 and 1 inclusive,; indicating a compromise between left- and right-continuous step; functions. If y0 and y1 are the values to the left and right of; the point then the value is y0*f+y1*(1-f) so that f=0 is; right-continuous and f=1 is left-continuous; ties: Handling of tied x values. An integer describing a function with; a single vector argument returning a single number result:; ties = ""ordered"" (iTies = 0): input x are ""ordered""; ties = ""mean"" (iTies = 1): function ""mean""; ties = ""min"" (iTies = 2): function ""min""; ties = ""max"" (iTies = 3): function ""max"". Details:; At least two complete (x, y) pairs are required.; If there are duplicated (tied) x values and ties is a function it is; applied to the y values for each distinct x value. Useful functions in; this context include mean, min, and max.; If ties=""ordered"" the x values are assumed to be already ordered. The; first y value will be used for interpolation to the left and the last; one for interpolation to the right. Value:; approx returns a graph with co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphSmooth.html:15479,continuous,continuous,15479,root/html528/TGraphSmooth.html,https://root.cern,https://root.cern/root/html528/TGraphSmooth.html,6,['continuous'],['continuous']
Deployability,"be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. Double_t getVal(const RooArgSet* set=0); Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()) const; Create integral over observables in iset in range named rangeName. return createIntegral(iset,0,0,rangeName). RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet& nset, const char* rangeName=0); Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. return cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:76613,integrat,integration,76613,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['integrat'],['integration']
Deployability,"bel to as branches to the given; TTree. The index field will be attached as integer with name; <name>_idx, the label field will be attached as char[] with label; <name>_lbl. void fillTreeBranch(TTree& t); Fill tree branches associated with current object with current value. void setTreeBranchStatus(TTree& t, Bool_t active); (De)activate associate tree branch. void syncCache(const RooArgSet* set = 0); Explicitly synchronize RooAbsCategory internal cache. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValueDirty = kTRUE); Copy the cached value from given source and raise dirty flag.; It is the callers responsability to ensure that the sources; cache is clean(valid) before this function is called, e.g. by; calling syncCache() on the source. const RooCatType* getOrdinal(UInt_t n, const char* rangeName = 0) const; Return state definition of ordinal nth defined state,; needed by the generator mechanism. RooAbsArg * createFundamental(const char* newname = 0) const; Create a RooCategory fundamental object with our properties. Bool_t isSignType(Bool_t mustHaveZero = kFALSE) const; Determine if category has 2 or 3 states with index values -1,0,1. RooAbsCategory(); Constructors, assignment etc. Bool_t operator!=(Int_t index); { return !operator==(index);}. Bool_t operator!=(const char* label); { return !operator==(label);}. Bool_t operator!=(const RooAbsArg& other); { return !operator==(other);}. Int_t numTypes(const char* = 0) const; Return number of types defined (in range named rangeName if rangeName!=0). Bool_t isIntegrationSafeLValue(const RooArgSet* ) const; Is this l-value object safe for use as integration observable. Bool_t traceEvalHook(RooCatType ) const; coverity[PASS_BY_VALUE]. RooCatType evaluate() const. » Last changed: Tue Jun 30 14:29:59 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategory.html:28387,integrat,integration,28387,root/html602/RooAbsCategory.html,https://root.cern,https://root.cern/root/html602/RooAbsCategory.html,1,['integrat'],['integration']
Deployability,"belPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_t_valueConstant value of self; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConstVar(const char* name, const char* title, Double_t value); Constructor with value; _fast = kTRUE ;. RooConstVar(const RooConstVar& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooConstVar.html:36241,integrat,integrator,36241,root/html602/RooConstVar.html,https://root.cern,https://root.cern/root/html602/RooConstVar.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ber Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooBinSamplingPdf Class Reference. ; The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned distribution. ; When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is correct only if the second derivative of the function vanishes, though. This is shown in the plots below.; For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside using integrator(). This can be used to change the integration rules, so less/more function evaluations are performed. The target precision of the integrator can be set in the constructor. How to use it; There are two ways to use this class:; Manually wrap a PDF: RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; binSampler.fitTo(data);; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooBinSamplingPdfThe RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned dist...Definition RooBinSamplingPdf.h:28; RooBinSamplingPdf::integratorstd::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator() constDirect access to the unique_ptr holding the integrator that's used to sample the bins.Definition RooBinSamplingPdf.cxx:278; RooBinSamplingPdf::observableconst RooAbsReal & observable() constDefini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:1140,integrat,integration,1140,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['integrat'],['integration']
Deployability,"ber function:; double operator()(double *x, double *p); The advantage of the function object is that it can have a state and reference therefore what-ever other object the user needs, without using globals. This is an example to define first the function object; class MyFunctionObject {; public:; // use constructor to customize your function object; MyFunctionObject(......) { ......}. double operator() (double *x, double *p) {; // function implementation using class data members; }; };; and then use it to create the TF1:; MyFunctionObject fobj(....); // create the function object; TF1 * f = new TF1(""f"",fobj,xmin,xmax,npar); // create TF1 class with n-parameters and range [xmin,xmax]; If using C++11, one can create a TF1 also from a C++ lambda function:; // create TF1 class with 2 parameters and range [xmin,xmax] using a lambda; TF1 * f = new TF1(""f"",[](double*x,double*p){return p[0] + p[1]*x[0];},xmin,xmax,2);; 5.3 Configuring the Fit; We will show here some configuration actions that can or must be done when fitting histogram or graph using the Fit method.; 5.3.1 Fixing and Setting Parameters’ Bounds; Parameters must be initialized before invoking the Fit method. The setting of the parameter initial values is automatic for the predefined functions: poln, exp, gaus, and landau. You can fix one or more parameters by specifying the “B” option when calling the Fit method. When a function is not predefined, the fit parameters must be initialized to some value as close as possible to the expected values before calling the fit function.; To set bounds for one parameter, use TF1::SetParLimits:; func->SetParLimits(0,-1,1);; When the lower and upper limits are equal, the parameter is fixed. Next two statements fix parameter 4 at 10.; func->SetParameter(4,10);; func->SetParLimits(4,10,10);; However, to fix a parameter to 0, one must call the FixParameter function:; func->SetParameter(4,0);; func->FixParameter(4,0);; Note that you are not forced to set the limits for all param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:172776,configurat,configuration,172776,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['configurat'],['configuration']
Deployability,"ber; theta1 polar angle for axis X; phi1 azimuthal angle for axis X; theta2 polar angle for axis Y; phi2 azimuthal angle for axis Y; theta3 polar angle for axis Z; phi3 azimuthal angle for axis Z . Definition at line 497 of file TGeoBuilder.cxx. ◆ Medium(). TGeoMedium * TGeoBuilder::Medium ; (; const char * ; name, . Int_t ; numed, . Int_t ; nmat, . Int_t ; isvol, . Int_t ; ifield, . Double_t ; fieldm, . Double_t ; tmaxfd, . Double_t ; stemax, . Double_t ; deemax, . Double_t ; epsil, . Double_t ; stmin . ). Create tracking medium. . numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking performed with g3helix; ifield = 3 if tracking performed with g3helx3. . Definition at line 568 of file TGeoBuilder.cxx. ◆ Mixture() [1/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Double_t * ; a, . Double_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Double_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 537 of file TGeoBuilder.cxx. ◆ Mixture() [2/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Float_t * ; a, . Float_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Float_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 521 of file TGeoBuilder.cxx. ◆ Node() [1/2]. void TGeoBuilder::Node ; (; const char * ; name, . Int_t ; nr, . const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBuilder.html:29188,continuous,continuous,29188,doc/master/classTGeoBuilder.html,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html,1,['continuous'],['continuous']
Deployability,"berEntry*fPointSizeScale; TGCheckButton*fPointSmooth; TGGroupFrame*fRefContainer; TGCheckButton*fReferenceOn; TGNumberEntry*fReferencePosX; TGNumberEntry*fReferencePosY; TGNumberEntry*fReferencePosZ; TGCheckButton*fResetCamerasOnUpdate; TGNumberEntry*fStereoEyeOffsetFac; TGCompositeFrame*fStereoFrame; TGNumberEntry*fStereoFrustumAsymFac; TGNumberEntry*fStereoZeroParallax; TGTextButton*fUpdateScene; TGLViewer*fViewer; TGNumberEntry*fWFLineWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewerEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGLViewerEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void ViewerRedraw(); Initiate redraw of the viewer. void SetModel(TObject* obj); Sets model or disables/hides viewer. void DoClearColor(Pixel_t color); Clear-color was changed. void DoIgnoreSizesOnUpdate(); ResetCamerasOnUpdate was toggled. void DoResetCamerasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerEditor.html:22386,toggle,toggled,22386,root/html528/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html528/TGLViewerEditor.html,3,['toggle'],['toggled']
Deployability,bers; 3037 done = kFALSE;; 3038 next.Reset();; 3039 infonext.Reset();; 3040 ; 3041 TMemberInfo local(GetClass());; 3042 TMemberInfo other(cl ? cl : info->GetClass());; 3043 while(!done) {; 3044 local.Clear();; 3045 other.Clear();; 3046 el = (TStreamerElement*)next();; 3047 while (el && (el->IsBase() || el->IsA() == TStreamerArtificial::Class())) {; 3048 el = (TStreamerElement*)next();; 3049 }; 3050 if (el) {; 3051 local.SetName( el->GetName() );; 3052 local.SetClassName( el->GetTypeName() );; 3053 local.SetComment( el->GetTitle() );; 3054 local.SetDataType( el->GetType() );; 3055 }; 3056 if (cl) {; 3057 TDataMember *tdm = (TDataMember*)membernext();; 3058 while(tdm && ( (!tdm->IsPersistent()) || (tdm->Property()&kIsStatic) || (el && local.fName != tdm->GetName()) )) {; 3059 tdm = (TDataMember*)membernext();; 3060 }; 3061 if (tdm) {; 3062 other.SetName( tdm->GetName() );; 3063 other.SetClassName( tdm->GetTrueTypeName() );; 3064 other.SetComment( tdm->GetTitle() );; 3065 if (tdm->GetDataType()) {; 3066 // Need to update the type for arrays.; 3067 if (tdm->IsaPointer()) {; 3068 if (tdm->GetDataType()->GetType() == TVirtualStreamerInfo::kChar && !tdm->GetArrayDim() && tdm->GetArrayIndex()[0]==0) {; 3069 other.SetDataType( TVirtualStreamerInfo::kCharStar );; 3070 } else {; 3071 other.SetDataType( tdm->GetDataType()->GetType() + TVirtualStreamerInfo::kOffsetP);; 3072 }; 3073 } else {; 3074 if (tdm->GetArrayDim()) {; 3075 other.SetDataType( tdm->GetDataType()->GetType() + TVirtualStreamerInfo::kOffsetL);; 3076 } else {; 3077 other.SetDataType( tdm->GetDataType()->GetType() );; 3078 }; 3079 }; 3080 }; 3081 } else if (el==0) {; 3082 done = kTRUE;; 3083 break;; 3084 }; 3085 } else {; 3086 infoel = (TStreamerElement*)infonext();; 3087 while (infoel && (infoel->IsBase() || infoel->IsA() == TStreamerArtificial::Class())) {; 3088 infoel = (TStreamerElement*)infonext();; 3089 }; 3090 if (infoel) {; 3091 other.SetName( infoel->GetName() );; 3092 other.SetClassName( infoel->GetTypeNa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:123457,update,update,123457,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['update'],['update']
Deployability,"bers; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html:4071,integrat,integration,4071,root/html528/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMCIntegrator.html,6,['integrat'],['integration']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on sp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:14915,integrat,integrating,14915,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,6,['integrat'],['integrating']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:10672,integrat,integrating,10672,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,3,['integrat'],['integrating']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:14608,integrat,integrating,14608,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['integrat'],['integrating']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:10685,integrat,integrating,10685,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,5,['integrat'],['integrating']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:15236,integrat,integrating,15236,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,2,['integrat'],['integrating']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:14930,integrat,integrating,14930,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['integrat'],['integrating']
Deployability,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:9949,integrat,integrating,9949,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,47,['integrat'],['integrating']
Deployability,"binding; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; TString_intNameIntegrand name; ROOT::Math::AdaptiveIntegratorMultiDim*_integrator; Int_t_nErrorNumber of error occurrences; Int_t_nWarnMax number of warnings to be issued ;; Int_t_nmaxMax number of divisions; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveIntegratorND.html:7898,configurat,configuration,7898,root/html602/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveIntegratorND.html,2,['configurat'],['configuration']
Deployability,"bing current object ; Reimplemented from RooAbsPdf.; Definition at line 198 of file RooNDKeysPdf.h. ◆ loadDataSet(). void RooNDKeysPdf::loadDataSet ; (; bool ; firstCall, . RooDataSet const & ; data . ). protected . copy the dataset and calculate some useful variables ; Definition at line 476 of file RooNDKeysPdf.cxx. ◆ loadWeightSet(). void RooNDKeysPdf::loadWeightSet ; (; RooDataSet const & ; data). protected . Definition at line 696 of file RooNDKeysPdf.cxx. ◆ loopRange(). void RooNDKeysPdf::loopRange ; (; std::vector< double > & ; x, . std::vector< Int_t > & ; indices . ); const. protected . determine closest points to x, to loop over in evaluate() ; Definition at line 974 of file RooNDKeysPdf.cxx. ◆ mirrorDataSet(). void RooNDKeysPdf::mirrorDataSet ; (; ). protected . determine mirror dataset. ; mirror points are added around the physical boundaries of the dataset Two steps:; For each entry, determine if it should be mirrored (the mirror configuration).; For each mirror configuration, make the mirror points. . Definition at line 607 of file RooNDKeysPdf.cxx. ◆ setOptions(). void RooNDKeysPdf::setOptions ; (; ). protected . set the configuration ; Definition at line 369 of file RooNDKeysPdf.cxx. ◆ sortDataIndices(). void RooNDKeysPdf::sortDataIndices ; (; BoxInfo * ; bi = nullptr). protected . sort entries, as needed for loopRange() ; Definition at line 806 of file RooNDKeysPdf.cxx. ◆ Streamer(). void RooNDKeysPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooNDKeysPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 198 of file RooNDKeysPdf.h. ◆ updateRho(). void RooNDKeysPdf::updateRho ; (; ); const. protected . Definition at line 1313 of file RooNDKeysPdf.cxx. Member Data Documentation. ◆ _bIdcs. std::vector<Int_t> RooNDKeysPdf::_bIdcs. protected . Definition at line 173 of file RooNDKeysPdf.h. ◆ _bmsIdcs. std::vec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:88890,configurat,configuration,88890,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['configurat'],['configuration']
Deployability,"bins); 962 Warning(""Divide"",""Number of graph points is different than histogram bins - %d points have been skipped"",nbins-npoint);; 963 ; 964 ; 965 if (bVerbose) {; 966 Info(""Divide"",""made a graph with %d points from %d bins"",npoint,nbins);; 967 Info(""Divide"",""used confidence level: %.2lf\n"",conf);; 968 if(bIsBayesian); 969 Info(""Divide"",""used prior probability ~ beta(%.2lf,%.2lf)"",alpha,beta);; 970 Print();; 971 }; 972}; 973 ; 974////////////////////////////////////////////////////////////////////////////////; 975/// Compute Range.; 976 ; 977void TGraphAsymmErrors::ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const; 978{; 979 TGraph::ComputeRange(xmin,ymin,xmax,ymax);; 980 ; 981 for (Int_t i=0;i<fNpoints;i++) {; 982 if (fX[i] -fEXlow[i] < xmin) {; 983 if (gPad && gPad->GetLogx()) {; 984 if (fEXlow[i] < fX[i]) xmin = fX[i]-fEXlow[i];; 985 else xmin = TMath::Min(xmin,fX[i]/3);; 986 } else {; 987 xmin = fX[i]-fEXlow[i];; 988 }; 989 }; 990 if (fX[i] +fEXhigh[i] > xmax) xmax = fX[i]+fEXhigh[i];; 991 if (fY[i] -fEYlow[i] < ymin) {; 992 if (gPad && gPad->GetLogy()) {; 993 if (fEYlow[i] < fY[i]) ymin = fY[i]-fEYlow[i];; 994 else ymin = TMath::Min(ymin,fY[i]/3);; 995 } else {; 996 ymin = fY[i]-fEYlow[i];; 997 }; 998 }; 999 if (fY[i] +fEYhigh[i] > ymax) ymax = fY[i]+fEYhigh[i];; 1000 }; 1001}; 1002 ; 1003 ; 1004////////////////////////////////////////////////////////////////////////////////; 1005/// Copy and release.; 1006 ; 1007void TGraphAsymmErrors::CopyAndRelease(Double_t **newarrays,; 1008 Int_t ibegin, Int_t iend, Int_t obegin); 1009{; 1010 CopyPoints(newarrays, ibegin, iend, obegin);; 1011 if (newarrays) {; 1012 delete[] fEXlow;; 1013 fEXlow = newarrays[0];; 1014 delete[] fEXhigh;; 1015 fEXhigh = newarrays[1];; 1016 delete[] fEYlow;; 1017 fEYlow = newarrays[2];; 1018 delete[] fEYhigh;; 1019 fEYhigh = newarrays[3];; 1020 delete[] fX;; 1021 fX = newarrays[4];; 1022 delete[] fY;; 1023 fY = newarrays[5];; 1024 delete[] newarrays;; 1025 }; 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:34967,release,release,34967,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['release'],['release']
Deployability,bjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealVar*RooAbsAnaConvPdf::_convVar! Convolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooRealProxy_effRatio; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operMod,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPEffDecay.html:38785,integrat,integration,38785,root/html526/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPEffDecay.html,1,['integrat'],['integration']
Deployability,bjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealVar*RooAbsAnaConvPdf::_convVar! Convolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooRealProxy_effRatio; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPd,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:39359,integrat,integration,39359,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,3,['integrat'],['integration']
Deployability,"bjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionMultiDim*funcFunctor; RooListProxyvarsArgument reference; Double_t*xArgument value array.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFunctorPdfBinding.html:38881,integrat,integrator,38881,root/html526/RooFunctorPdfBinding.html,https://root.cern,https://root.cern/root/html526/RooFunctorPdfBinding.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdfProxy to p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCachedPdf.html:40510,configurat,configuration,40510,root/html528/RooCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooCachedPdf.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bject in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TClonesArrayOwnershipRAII;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  TObjProxy;  ; class  TOperatorNewHelper;  ; class  TParBranchProcessingRAII;  ; class  TQObjectInitBehavior;  ; class  TROOTAllocator;  ; struct  TSchemaHelper;  ; class  TSchemaRuleProcessor;  ; struct  TSchemaType;  ; class  TSpinLockGuard;  A spin mutex-as-code-guard class. More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:4871,release,release,4871,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,1,['release'],['release']
Deployability,"bject prescribes how these numeric integrations are configured. void autoSelectDirtyMode(); Set appropriate cache operation mode for integral depending on cache operation; mode of server objects. Bool_t servesExclusively(const RooAbsArg* server, const RooArgSet& exclLVBranches, const RooArgSet& allBranches) const; Utility function that returns true if 'object server' is a server; to exactly one of the RooAbsArgs in 'exclLVBranches'. Bool_t initNumIntegrator() const; (Re)Initialize numerical integration engine if necessary. Return kTRUE if; successful, or otherwise kFALSE. RooRealIntegral(const RooRealIntegral& other, const char* name = 0); Copy constructor. ~RooRealIntegral(); Destructor. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; Special handling of integral of integral, return RooRealIntegral that represents integral over all dimensions in one pass. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:35495,integrat,integration,35495,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,3,['integrat'],['integration']
Deployability,"bject title; RooRealProxyfuncProxy to functions whose running integral is calculated; RooRealProxyxIntergrated observable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); Construct running integral of function '_func' over x_print from; the lower bound on _x to the present value of _x using a numeric; sampling technique. The sampling frequency is controlled by the; binning named 'bname' and a default second order interpolation; is applied to smooth the histogram-based c.d.f. RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); Copy constructor. ~RooNumRunningInt(); Destructor. const char* inputBaseName() const; Return unique name for RooAbsCachedPdf cache components; constructed from input function name. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Fill the cache object by calling its calculate() method. RooArgSet* actualObservables(const RooArgSet& nset) const; Return observable in nset to be cached by RooAbsCachedPdf; this is always the x observable that is integrated. RooArgSet* actualParameters(const RooArgSet& nset) const; Return the parameters of the cache created by RooAbsCachedPdf.; These are always the input functions parameter, but never the; integrated variable x. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Create custom cache element for running integral calculations. Double_t evaluate() const; Dummy function that is never called. TObject* clone(const char* newname) const; { return new RooNumRunningInt(*this,newname); }. const char* binningName() const; { return _binningName.c_str() ; }. » Last changed: Mon Dec 7 13:48:34 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumRunningInt.html:35043,integrat,integrated,35043,root/html526/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html526/RooNumRunningInt.html,2,['integrat'],['integrated']
Deployability,"bject value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:26401,integrat,integrator,26401,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,10,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooGenFitStudy&operator=(const RooGenFitStudy&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* options = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRooAbsStudy::releaseDetailData(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetFitConfig(const char* pdfName, const char* obsName, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg()); voidsetGenConfig(const char* pdfName, const char* obsName, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg()); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenFitStudy.html:3878,release,releaseDetailData,3878,root/html526/RooGenFitStudy.html,https://root.cern,https://root.cern/root/html526/RooGenFitStudy.html,2,['release'],['releaseDetailData']
Deployability,"bject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooXYChi2Var(); RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidRooAbsOptTestStatistic::seal(const char* notice = """"); const char*RooAbsOptTestStatistic::sealNotice() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsTestStatistic::setData(RooAbsData& data, Bool_t cloneData = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:24345,integrat,integrate,24345,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,2,['integrat'],['integrate']
Deployability,"bject. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printName (std::ostream &os) const;  Print name of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTitle (std::ostream &os) const;  Print title of object. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; virtual void printValue (std::ostream &os) const;  Interface to print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig & defaultConfig ();  Return reference to instance of default numeric integrator configuration object. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:11171,integrat,integrator,11171,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bject. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printName (std::ostream &os) const;  Print name of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTitle (std::ostream &os) const;  Print title of object. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; virtual void printValue (std::ostream &os) const;  Interface to print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumIntConfig & defaultConfig ();  Return reference to instance of default numeric integrator configuration object. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:11755,integrat,integrator,11755,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bject. Use IsZombie(); to see if the file is accessible. ~TWebFile(); Cleanup. void Init(Bool_t readHeadOnly); Initialize a TWebFile object. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Set GET command for use by ReadBuffer(s)10(), handle redirection if; needed. Give full URL so Apache's virtual hosts solution works. void CheckProxy(); Check if shell var ""http_proxy"" has been set and should be used. Bool_t IsOpen() const; A TWebFile that has been correctly constructed is always considered open. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. A TWebFile cannot be reopened in update mode. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via HTTP daemon. This; routine connects to the remote host, sends the request and returns; the buffer. Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via HTTP daemon. This; routine connects to the remote host, sends the request and returns; the buffer. Returns kTRUE in case of error. Bool_t ReadBuffer10(char* buf, Int_t len); Read specified byte range from remote file via HTTP 1.0 daemon (without; mod-root installed). This routine connects to the remote host, sends the; request and returns the buffer. Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read specified byte ranges from remote file via HTTP daemon.; Reads the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:25495,update,update,25495,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,6,['update'],['update']
Deployability,"bject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooLinkedList*_detailData!; Bool_t_ownDetailData; Bool_t_storeDetails; RooDataSet*_summaryData!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsStudy(const char* name, const char* title); Constructor. RooAbsStudy(const RooAbsStudy& other); Copy constructor. ~RooAbsStudy(); Destructor. void registerSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()). void storeSummaryOutput(const RooArgSet& vars). void storeDetailedOutput(TNamed& object). void aggregateSummaryOutput(TList* chunkList). RooAbsStudy(); {}. RooAbsStudy* clone(const char* newname = """") const. TObject* Clone(const char* newname = """") const; { return clone(newname) ; }. Bool_t attach(RooWorkspace& ); { return kFALSE ; }. Bool_t initialize(); { return kFALSE ; }. Bool_t execute(); { return kFALSE ; }. Bool_t finalize(); { return 0 ; }. void storeDetailedOutput(Bool_t flag); { _storeDetails = flag ; }. RooDataSet* summaryData(); { return _summaryData ; }. RooLinkedList* detailedData(); { return _detailData ; }. void releaseDetailData(); { _ownDetailData = kFALSE ; }. void dump(); {}. » Last changed: Mon Jun 22 17:33:23 2015 » Last generated: 2015-06-22 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsStudy.html:7874,release,releaseDetailData,7874,root/html604/RooAbsStudy.html,https://root.cern,https://root.cern/root/html604/RooAbsStudy.html,1,['release'],['releaseDetailData']
Deployability,"bject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooLinkedList*_detailData!; Bool_t_ownDetailData; Bool_t_storeDetails; RooDataSet*_summaryData!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsStudy(const char* name, const char* title); Constructor. RooAbsStudy(const RooAbsStudy& other); Copy constructor. ~RooAbsStudy(); Destructor. void registerSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()). void storeSummaryOutput(const RooArgSet& vars). void storeDetailedOutput(TNamed& object). void aggregateSummaryOutput(TList* chunkList). RooAbsStudy(); {}. RooAbsStudy* clone(const char* newname = """") const. TObject* Clone(const char* newname = """") const; { return clone(newname) ; }. Bool_t attach(RooWorkspace& ); { return kFALSE ; }. Bool_t initialize(); { return kFALSE ; }. Bool_t execute(); { return kFALSE ; }. Bool_t finalize(); { return 0 ; }. void storeDetailedOutput(Bool_t flag); { _storeDetails = flag ; }. RooDataSet* summaryData(); { return _summaryData ; }. RooLinkedList* detailedData(); { return _detailData ; }. void releaseDetailData(); { _ownDetailData = kFALSE ; }. void dump(); {}. » Last changed: Tue Jun 30 14:30:35 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsStudy.html:7874,release,releaseDetailData,7874,root/html602/RooAbsStudy.html,https://root.cern,https://root.cern/root/html602/RooAbsStudy.html,1,['release'],['releaseDetailData']
Deployability,"bject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. RooNumIntFactory(); RooNumIntFactory(const RooNumIntFactory& other); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. static RooNumIntFactory*_instance; map<std::string,std::pair<RooAbsIntegrator*,std::string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntFactory.html:6164,integrat,integrators,6164,root/html526/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html526/RooNumIntFactory.html,5,['integrat'],['integrators']
Deployability,"bject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooNumIntFactory*_instance; map<string,pair<RooAbsIntegrator*,string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntFactory.html:7028,install,installed,7028,root/html602/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html602/RooNumIntFactory.html,2,['install'],['installed']
Deployability,"bject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; UInt_tTRandom::fSeedRandom number generator seed; TStringTNamed::fTitleobject title. private:. Int_tfCount624; UInt_tfMt[624]. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRandom. ←; TRandom3. Function documentation; TRandom3(UInt_t seed = 4357); default constructor*-*-*-*-; If seed is 0, the seed is automatically computed via a TUUID object.; In this case the seed is guaranteed to be unique in space and time. ~TRandom3(); default destructor*-*-*-*-; *-* ==================. Double_t Rndm(Int_t i = 0); Machine independent random number generator.; Produces uniformly-distributed floating points in (0,1); Method: Mersenne Twister. void RndmArray(Int_t n, Float_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void RndmArray(Int_t n, Double_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void SetSeed(UInt_t seed = 0); Set the random generator sequence; if seed is 0 (default value) a TUUID is generated and used to fill; the first 8 integers of the seed array.; In this case the seed is guaranteed to be unique in space and time.; Use upgraded seeding procedure to fix a known problem when seeding with values; with many zero in the bit pattern (like 2**28).; see http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. void Streamer(TBuffer& ); Stream an object of class TRandom3. TRandom3(UInt_t seed = 4357). UInt_t GetSeed() const; get the current seed (only first element of the seed table). { return fMt[0];}. » Author: Peter Malzacher 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRandom3.html:9673,upgrade,upgraded,9673,root/html604/TRandom3.html,https://root.cern,https://root.cern/root/html604/TRandom3.html,1,['upgrade'],['upgraded']
Deployability,"bject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; UInt_tTRandom::fSeedRandom number generator seed; TStringTNamed::fTitleobject title. private:. Int_tfCount624; UInt_tfMt[624]. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRandom. ←; TRandom3. Function documentation; TRandom3(UInt_t seed = 4357); default constructor*-*-*-*-; If seed is 0, the seed is automatically computed via a TUUID object.; In this case the seed is guaranteed to be unique in space and time. ~TRandom3(); default destructor*-*-*-*-; *-* ==================. Double_t Rndm(Int_t i = 0); Machine independent random number generator.; Produces uniformly-distributed floating points in (0,1); Method: Mersenne Twister. void RndmArray(Int_t n, Float_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void RndmArray(Int_t n, Double_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void SetSeed(UInt_t seed = 0); Set the random generator sequence; if seed is 0 (default value) a TUUID is generated and used to fill; the first 8 integers of the seed array.; In this case the seed is guaranteed to be unique in space and time.; Use upgraded seeding procedure to fix a known problem when seeding with values; with many zero in the bit pattern (like 2**28).; see http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. void Streamer(TBuffer& ); Stream an object of class TRandom3. TRandom3(UInt_t seed = 4357). UInt_t GetSeed() const; get the current seed (only first element of the seed table). { return fMt[0];}. » Author: Peter Malzacher 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRandom3.html:9673,upgrade,upgraded,9673,root/html602/TRandom3.html,https://root.cern,https://root.cern/root/html602/TRandom3.html,1,['upgrade'],['upgraded']
Deployability,"bject::kZombie. protected:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsRealLValue.html:39010,integrat,integration,39010,root/html602/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html602/RooAbsRealLValue.html,54,['integrat'],['integration']
Deployability,"bject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCall(TObject* obj, const char* method, const char* args = """", Int_t selfobjposition = 0); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelf(Bool_t self); virtual voidSetTitle(const char* title); virtual voidSetToggle(Bool_t toggle = kTRUE); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TClassMenuItem(); TClassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassMenuItem.html:5037,toggle,toggle,5037,root/html602/TClassMenuItem.html,https://root.cern,https://root.cern/root/html602/TClassMenuItem.html,2,['toggle'],['toggle']
Deployability,"bject; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default constructor, then read from disk by the streamer. If autodel is kFALSE, the existing object is not deleted. Root assumes; that the user is taking care of deleting any internal object or array; (this can be done in the streamer). void SetBasketSize(Int_t buffsize); Set the basket size; The function makes sure that the basket size is greater than fEntryOffsetlen. void SetBufferAddress(TBuffer* entryBuffer); -- Set address of this branch directly from a TBuffer to avoid streaming. Note: We do not take ownership of the buffer. void SetCompressionLevel(Int_t level = 1); *-*-*-*-*-*-*-*Set the branch/subbranches compression level; *-* ============================================. void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file = 0); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; branch file relative to the tree file. In this case one can; move the tree + all branch files to a different location in; the file system and still access the branch files.; The ROOT file will be connected only when necessary.; If called by TBranch::Fill (via TBasket::WriteFile), the file; will be created with the option ""recreate"".; If called by TBranch::GetEntry (via TBranch::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:23862,update,updateSubBranches,23862,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,3,['update'],"['update', 'updateExisting', 'updateSubBranches']"
Deployability,"bject; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default constructor, then read from disk by the streamer. If autodel is kFALSE, the existing object is not deleted. Root assumes; that the user is taking care of deleting any internal object or array; (this can be done in the streamer). void SetBasketSize(Int_t buffsize); Set the basket size; The function makes sure that the basket size is greater than fEntryOffsetlen. void SetBufferAddress(TBuffer* entryBuffer); -- Set address of this branch directly from a TBuffer to avoid streaming. Note: We do not take ownership of the buffer. void SetCompressionLevel(Int_t level = 1); *-*-*-*-*-*-*-*Set the branch/subbranches compression level; *-* ============================================. void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; branch file relative to the tree file. In this case one can; move the tree + all branch files to a different location in; the file system and still access the branch files.; The ROOT file will be connected only when necessary.; If called by TBranch::Fill (via TBasket::WriteFile), the file; will be created with the option ""recreate"".; If called by TBranch::GetEntry (via TBranch::GetBas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:22861,update,updateSubBranches,22861,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,3,['update'],"['update', 'updateExisting', 'updateSubBranches']"
Deployability,bject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static RooPrintable::ContentsOptionRooPrintable::kName; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; st,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:8178,configurat,configuration,8178,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,6,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"bject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_t_debugCode; RooWorkspace*_debugWorkspace; ostream*_devnull; Int_t_errorCount; map<string,ostream*>_files; RooFit::MsgLevel_globMinLevel; static RooMsgService*_instance; RooFit::MsgLevel_lastMsgLevel; Bool_t_showPid; Bool_t_silentMode; vector<RooMsgService::StreamConfig>_streams; stack<vector<RooMsgService::StreamConfig> >_streamsSaved. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function called by atexit() handler installed by RooSentinel; to delete all global object upon program termination. RooMsgService(); Constructor. Defines names of message levels; and mapping of topic codes to topic names; Install default message streams. ~RooMsgService(); Destructor. Bool_t anyDebug(); Returns true if any debug level stream is active. RooWorkspace* debugWorkspace(). Int_t addStream(RooFit::MsgLevel level, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg()); Add a message logging stream for message with given RooFit::MsgLevel or higher (i.e. more severe); This method accepts the following arguments to configure the stream. Output Style options. Prefix(Bool_t flag=kTRUE) -- Prefix all messages in this stream with Topic/Originator information. Filtering options. Topic(const char*) -- Restrict stream to messages on given topic; ObjectName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMsgService.html:8735,install,installed,8735,root/html602/RooMsgService.html,https://root.cern,https://root.cern/root/html602/RooMsgService.html,2,['install'],['installed']
Deployability,"bject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; RooSetProxy deps;  dependents of this p.d.f ;  ; RooSetProxy intobs;  observables that p.d.f is integrated over ;  ; RooRealProxy intpdf;  p.d.f that is integrated ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:69015,configurat,configuration,69015,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['configurat'],['configuration']
Deployability,"bjectHandling -- binWidth: binWidth_pTV; [#1] INFO:DataHandling -- RooDataHist::adjustBinning(morph_dh_cHq3=0.01): fit range of variable pTV expanded to nearest bin boundaries: [10,600] --> [0,600]; [#1] INFO:InputArguments -- RooAbsData::plotOn(SM_NPsq0) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:InputArguments -- RooAbsData::plotOn(cHq3_NPsq1) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 24931.9 will supersede previous event count of 10852.3 for normalization of PDF projections; [#1] INFO:InputArguments -- RooAbsData::plotOn(cHq3_NPsq2) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 29789.2 will supersede previous event count of 24931.9 for normalization of PDF projections; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 18947.1 will supersede previous event count of 11104.6 for normalization of PDF projections; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 30765.5 will supersede previous event count of 18947.1 for normalization of PDF projections; [#0] PROGRESS:Caching -- creating cache from getCache function for 0x557821400550; [#0] PROGRESS:Caching -- current storage has size 3; [#0] PROGRESS:ObjectHandling -- observable: pTV; [#0] PROGRESS:ObjectHandling -- binWidth: binWidth_pTV; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_SM_NPsq0_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_NPsq1_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_NPsq2_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8C.html:14592,update,updateFitRangeNorm,14592,doc/master/rf711__lagrangianmorph_8C.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8C.html,1,['update'],['updateFitRangeNorm']
Deployability,"ble E(); TMVA::DNN::Net::computeErrorstd::tuple< double, double > computeError(const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t sizeOutput)set the output size of the DNNDefinition NeuralNet.h:1093; TMVA::DNN::Net::forwardPatternvoid forwardPattern(const LayerContainer &_layers, std::vector< LayerData > &layerData) constDefinition NeuralNet.icc:1221; TMVA::DNN::Net::backPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::m_batchSizesize_t m_batchSizemini-batch sizeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:71392,configurat,configuration,71392,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['configurat'],['configuration']
Deployability,"ble absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. ROOT::Math::IGenFunction*fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:4658,integrat,integration,4658,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html:8223,integrat,integration,8223,root/html602/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:8223,integrat,integration,8223,root/html604/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"ble cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; ; # Create a SparkConf object with all the desired Spark configuration parameters; sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[2]"",; ""spark.driver.memory"": ""4g""}.items()); # Create a SparkContext with the configuration stored in `sparkconf`; sparkcontext = pyspark.SparkContext(conf=sparkconf); ; # Create an RDataFrame that will use Spark as a backend for computations; df = RDataFrame(1000, sparkcontext=sparkcontext); ; # Set the random seed and define two columns of the dataset with random numbers.; ROOT.gRandom.SetSeed(1); df_1 = df.Define(""gaus"", ""gRandom->Gaus(10, 1)"").Define(""exponential"", ""gRandom->Exp(10)""); ; # Book an histogram for each column; h_gaus = df_1.Histo1D((""gaus"", ""Normal distribution"", 50, 0, 30), ""gaus""); h_exp = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""); ; # Plot the histograms side by side on a canvas; c = ROOT.TCanvas(""distrdf001"", ""distrdf001"", 800, 400); c.Divide(2, 1); c.cd(1); h_gaus.DrawCopy(); c.cd(2); h_exp.DrawCopy(); ; # Save the canvas; c.SaveAs(""distrdf001_spark_connection.png""); print(""Saved figure to distrdf001_spark_connection.png""); . DateMarch 2021 ; AuthorVincenzo Eduardo Padulano ; Definition in file distrdf001_s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/distrdf001__spark__connection_8py.html:2502,configurat,configuration,2502,doc/master/distrdf001__spark__connection_8py.html,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html,1,['configurat'],['configuration']
Deployability,"ble fast_fma(double x, double y, double z) noexcept; 501{; 502#if defined(FP_FAST_FMA) // check if std::fma has fast hardware implementation; 503 return std::fma(x, y, z);; 504#else // defined(FP_FAST_FMA); 505 // std::fma might be slow, so use a more pedestrian implementation; 506#if defined(__clang__); 507#pragma STDC FP_CONTRACT ON // hint clang that using an FMA is okay here; 508#endif // defined(__clang__); 509 return (x * y) + z;; 510#endif // defined(FP_FAST_FMA); 511}; 512 ; 513inline double chebychevIntegral(double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull,; 514 double xMaxFull); 515{; 516 const double halfrange = .5 * (xMax - xMin);; 517 const double mid = .5 * (xMax + xMin);; 518 ; 519 // the full range of the function is mapped to the normalised [-1, 1] range; 520 const double b = (xMaxFull - mid) / halfrange;; 521 const double a = (xMinFull - mid) / halfrange;; 522 ; 523 // coefficient for integral(T_0(x)) is 1 (implicit), integrate by hand; 524 // T_0(x) and T_1(x), and use for n > 1: integral(T_n(x) dx) =; 525 // (T_n+1(x) / (n + 1) - T_n-1(x) / (n - 1)) / 2; 526 double sum = b - a; // integrate T_0(x) by hand; 527 ; 528 const unsigned int iend = nCoeffs;; 529 if (iend > 0) {; 530 {; 531 // integrate T_1(x) by hand...; 532 const double c = coeffs[0];; 533 sum = fast_fma(0.5 * (b + a) * (b - a), c, sum);; 534 }; 535 if (1 < iend) {; 536 double bcurr = b;; 537 double btwox = 2 * b;; 538 double blast = 1;; 539 ; 540 double acurr = a;; 541 double atwox = 2 * a;; 542 double alast = 1;; 543 ; 544 double newval = atwox * acurr - alast;; 545 alast = acurr;; 546 acurr = newval;; 547 ; 548 newval = btwox * bcurr - blast;; 549 blast = bcurr;; 550 bcurr = newval;; 551 double nminus1 = 1.;; 552 for (unsigned int i = 1; iend != i; ++i) {; 553 // integrate using recursion relation; 554 const double c = coeffs[i];; 555 const double term2 = (blast - alast) / nminus1;; 556 ; 557 newval = atwox * acurr - alast;; 558 alast = acurr;; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:17375,integrat,integrate,17375,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,3,['integrat'],['integrate']
Deployability,"ble for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; ; # Create a SparkConf object with all the desired Spark configuration parameters; sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[2]"",; ""spark.driver.memory"": ""4g""}.items()); # Create a SparkContext with the configuration stored in `sparkconf`; sparkcontext = pyspark.SparkContext(conf=sparkconf); ; # Create an RDataFrame that will use Spark as a backend for computations; df = RDataFrame(1000, sparkcontext=sparkcontext); ; # Set the random seed and define two columns of the dataset with random numbers.; ROOT.gRandom.SetSeed(1); df_1 = df.Define(""gaus"", ""gRandom->Gaus(10, 1)"").Define(""exponential"", ""gRandom->Exp(10)""); ; # Book an histogram for each column; h_gaus = df_1.Histo1D((""gaus"", ""Normal distribution"", 50, 0, 30), ""gaus""); h_exp = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""); ; # Plot the histograms side by side on a canvas; c = ROOT.TCanvas(""distrdf00",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/distrdf001__spark__connection_8py.html:2204,configurat,configuration,2204,doc/master/distrdf001__spark__connection_8py.html,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html,1,['configurat'],['configuration']
Deployability,"ble) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:44671,integrat,integration,44671,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['integrat'],['integration']
Deployability,"ble* grad) const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. enum Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension ; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:3444,update,update,3444,root/html534/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,1,['update'],['update']
Deployability,"ble::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")ME",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataHist.html:10001,release,releaseVars,10001,root/html530/RooDataHist.html,https://root.cern,https://root.cern/root/html530/RooDataHist.html,1,['release'],['releaseVars']
Deployability,"ble::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsData::setDefaultStorageType(RooAbsData::StorageType s); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataHist.html:10097,release,releaseVars,10097,root/html532/RooDataHist.html,https://root.cern,https://root.cern/root/html532/RooDataHist.html,2,['release'],['releaseVars']
Deployability,"ble> > >& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector&); virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<vector<double,allocator<double> >*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(nset,0,sterileIndex,isetRangeName). Int_t setObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0). T* getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_vector_double___.html:3815,integrat,integration,3815,root/html534/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_vector_double___.html,1,['integrat'],['integration']
Deployability,"bleObjects in the scene are selectable.; Bool_tfSmartRefresh! cache logicals during scene rebuilds; map<TObject*,TGLLogicalShape*>TGLScene::fSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneBase::fTimeStampCounter increased on every update.; TStringTGLSceneBase::fTitleObject title.; list<TGLViewerBase*>TGLSceneBase::fViewers; Float_tTGLSceneBase::fWFLineWScene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLScenePad(TVirtualPad* pad); Constructor. void AddHistoPhysical(TGLLogicalShape* log, const Float_t* histColor = 0); Scale and rotate a histo object to mimic placement in canvas. void SubPadPaint(TVirtualPad* pad); Iterate over pad-primitves and import them. void ObjectPaint(TObject* obj, Option_t* opt = """"); Override of virtual TVirtualViewer3D::ObjectPaint().; Special handling of 2D/3D histograms to activate Timur's; histo-painters. void PadPaintFromViewer(TGLViewer* viewer); Entry point for requesting update of scene's contents from; gl-viewer. void PadPaint(TVirtualPad* pad); Entry point for updating scene contents via VirtualViewer3D; interface.; For now this is handled by TGLViewer as it remains; the 'Viewer3D' of given pad. void BeginScene(); Start building of the scene.; Old contents is dropped, unless smart-refresh is in active. Then; the object supporting it are kept in a cache and possibly reused. TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; for description of viewer architecture. void EndScene(); End building of the scene.; TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; for description of viewer architecture. Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Add an object to the viewer, using internal physical IDs; TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx; for description of viewer architecture. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScenePad.html:13589,update,update,13589,root/html530/TGLScenePad.html,https://root.cern,https://root.cern/root/html530/TGLScenePad.html,3,['update'],['update']
Deployability,"bleTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:72386,continuous,continuous,72386,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['continuous'],['continuous']
Deployability,"bleTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:46474,integrat,integration,46474,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['integrat'],['integration']
Deployability,"ble\(>\) in the FCNBase::operator(). That means the first parameter the user adds gets index 0, the second index 1, and so on. When calculating the function value inside FCN, M will call FCNBase::operator() with the elements at their positions.; 5.14.2 setValue(…); [api:setvalue] setValue(unsigned int parno, double value) or setValue(const char* name, double value) set the value of parameter \(\mbox{parno}\) or with name \(\mbox{name}\) to \(\mbox{ value}\). The parameter in question may be variable, fixed, or constant, but must be defined.; 5.14.3 setError(…); [api:seterror] setError(unsigned int parno, double error) or setError(const char* name, double error) set the error (sigma) of parameter \(\mbox{parno}\) or with name \(\mbox{name}\) to \(\mbox{value}\).; 5.14.4 fix(…); [api:fix] fix(unsigned int parno) or fix(const char* name) fixes parameter \(\mbox{parno}\) or with name \(\mbox{name}\).; 5.14.5 release(…); [api:release] release(unsigned int parno) or release(const char* name) releases a previously fixed parameter \(\mbox{parno}\) or with name \(\mbox{name}\).; 5.14.6 setLimits(…); [api:setlimits] setLimits(unsigned int n, double low, double up) or setLimits(const char* name, double low, double up) sets the lower and upper bound of parameter \(\mbox{n}\) or with name \(\mbox{name}\).; However, if \(\mbox{low}\) is equal to \(\mbox{up}\), an error condition results.; 5.14.7 setUpperLimit(…); [api:setupperlimits] setUpperLimit(unsigned int n, double up) or setUpperLimit(const char* name, double up) sets the upper bound of parameter \(\mbox{n}\) or with name \(\mbox{name}\). The parameters does not have a lower limit.; 5.14.8 setLowerLimit(…); [api:setlowerlimits] setLowerLimit(unsigned int n, double low) or setLowerLimit(const char* name, double low) sets the lower bound of parameter \(\mbox{n}\) or with name \(\mbox{name}\). The parameters does not have an upper limit.; 5.14.9 removeLimits(…); [api:removelimits] removeLimits(unsigned int n) or removeLimits(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:59952,release,release,59952,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,10,['release'],"['release', 'releases']"
Deployability,"ble_t ApplyKernelFunction(Double_t normalized_distance); from the normalized euclidean distance calculate the distance; for a certain kernel. Double_t KernelNormalization(Double_t pdf); Calculating the normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodPDERS.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodPDERS.html:24879,update,update,24879,root/html532/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodPDERS.html,1,['update'],['update']
Deployability,"ble_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; c1return c1Definition legend1.C:41; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA_CNN_ClassificationDefinition TMVA_CNN_Classification.py:1; TMVA::Python_ExecutableTString Python_Executable()Function to find current Python executable used by ROOT If ""Python3"" is installed,...Definition PyMethodBase.cxx:43; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; AuthorLorenzo Moneta ; Definition in file TMVA_CNN_Classification.C. tutorialstmvaTMVA_CNN_Classification.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:66267,install,installed,66267,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['install'],['installed']
Deployability,"ble_t xx, yy;; 152 ; 153 for(i = 0; i < fNsteps; i++){; 154 xx = xv[i] * cosang - yv[i] * sinang;; 155 yy = xv[i] * sinang + yv[i] * cosang;; 156 if (gPad) {; 157 xx *= pixeltoX;; 158 yy *= pixeltoY;; 159 }; 160 xv[i] = xx + fX1;; 161 yv[i] = yy + fY1;; 162 }; 163 if (gPad) gPad->Modified();; 164}; 165 ; 166////////////////////////////////////////////////////////////////////////////////; 167/// Compute distance from point px,py to a line.; 168 ; 169Int_t TCurlyLine::DistancetoPrimitive(Int_t px, Int_t py); 170{; 171 return DistancetoLine(px,py,fX1,fY1,fX2,fY2);; 172}; 173 ; 174////////////////////////////////////////////////////////////////////////////////; 175/// Execute action corresponding to one event.; 176///; 177/// This member function is called when a TCurlyLine is clicked with the locator; 178///; 179/// If Left button clicked on one of the line end points, this point; 180/// follows the cursor until button is released.; 181///; 182/// if Middle button clicked, the line is moved parallel to itself; 183/// until the button is released.; 184 ; 185void TCurlyLine::ExecuteEvent(Int_t event, Int_t px, Int_t py); 186{; 187 if (!gPad) return;; 188 ; 189 Int_t kMaxDiff = 20;; 190 static Int_t d1,d2,px1,px2,py1,py2;; 191 static Int_t pxold, pyold, px1old, py1old, px2old, py2old;; 192 static Bool_t p1, p2, pL;; 193 Int_t dx, dy;; 194 ; 195 Bool_t opaque = gPad->OpaqueMoving();; 196 ; 197 switch (event) {; 198 ; 199 case kArrowKeyPress:; 200 case kButton1Down:; 201 if (!opaque) {; 202 gVirtualX->SetLineColor(-1);; 203 TAttLine::Modify(); //Change line attributes only if necessary; 204 }; 205 ; 206 // No break !!!; 207 ; 208 case kMouseMotion:; 209 ; 210 px1 = gPad->XtoAbsPixel(fX1);; 211 py1 = gPad->YtoAbsPixel(fY1);; 212 px2 = gPad->XtoAbsPixel(fX2);; 213 py2 = gPad->YtoAbsPixel(fY2);; 214 ; 215 p1 = p2 = pL = kFALSE;; 216 ; 217 d1 = TMath::Abs(px1 - px) + TMath::Abs(py1-py); //simply take sum of pixels differences; 218 if (d1 < kMaxDiff) { //*-*================>OK ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCurlyLine_8cxx_source.html:6273,release,released,6273,doc/master/TCurlyLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCurlyLine_8cxx_source.html,1,['release'],['released']
Deployability,"ble_t yclipt);  Returns kTRUE if the input bin is intersecting with the input rectangle (xclipl, xclipr, yclipb, yclipt) ;  ; Bool_t IsIntersectingPolygon (Int_t bn, Double_t *x, Double_t *y, Double_t xclipl, Double_t xclipr, Double_t yclipb, Double_t yclipt);  Returns kTRUE if the input polygon (bn, x, y) is intersecting with the input rectangle (xclipl, xclipr, yclipb, yclipt) ;  ; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void SetBinContent (Int_t, Int_t, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; void SetBinContent (Int_t, Int_t, Int_t, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; void SetBinError (Int_t, Int_t, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; void SetBinError (Int_t, Int_t, Int_t, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:54326,update,update,54326,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,['update'],['update']
Deployability,"ble_t* xbins); Axis constructor for variable bin size. ~TAxis(); Destructor. TAxis(const TAxis& axis); Copy constructor. TAxis& operator=(const TAxis& ); Assignment operator. const char * ChooseTimeFormat(Double_t axislength = 0); Choose a reasonable time format from the coordinates in the active pad; and the number of divisions in this axis; If orientation = ""X"", the horizontal axis of the pad will be used for ref.; If orientation = ""Y"", the vertical axis of the pad will be used for ref. void Copy(TObject& axis) const; Copy axis structure to another axis. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an axis. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when an axis is clicked with the locator. The axis range is set between the position where the mouse is pressed; and the position where it is released.; If the mouse position is outside the current axis range when it is released; the axis is unzoomed with the corresponding proportions.; Note that the mouse does not need to be in the pad or even canvas; when it is released. Int_t FindBin(Double_t x); Find bin number corresponding to abscissa x. NOTE: this method does not work with alphanumeric bins !!!. If x is underflow or overflow, attempt to extend the axis if TAxis::kCanExtend is true.; Otherwise, return 0 or fNbins+1. Int_t FindBin(const char* label); Find bin number with label.; If the List of labels does not exist create it and make the axis alphanumeric; If one wants just to add a single label- just call TAxis::SetBinLabel; If label is not in the list of labels do the following depending on the; bit TAxis::kCanExtend; of the axis.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set and the histogram has labels in each bin; set the bit automatically and consider the histogram as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TAxis.html:13433,release,released,13433,root/html604/TAxis.html,https://root.cern,https://root.cern/root/html604/TAxis.html,1,['release'],['released']
Deployability,"ble_t* xbins); Axis constructor for variable bin size. ~TAxis(); Destructor. TAxis(const TAxis& axis); Copy constructor. TAxis& operator=(const TAxis& ); Assignment operator. const char * ChooseTimeFormat(Double_t axislength = 0); Choose a reasonable time format from the coordinates in the active pad; and the number of divisions in this axis; If orientation = ""X"", the horizontal axis of the pad will be used for ref.; If orientation = ""Y"", the vertical axis of the pad will be used for ref. void Copy(TObject& axis) const; Copy axis structure to another axis. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an axis. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when an axis is clicked with the locator. The axis range is set between the position where the mouse is pressed; and the position where it is released.; If the mouse position is outside the current axis range when it is released; the axis is unzoomed with the corresponding proportions.; Note that the mouse does not need to be in the pad or even canvas; when it is released. Int_t FindBin(Double_t x); Find bin number corresponding to abscissa x. NOTE: this method does not work with alphanumeric bins !!!. If x is underflow or overflow, attempt to extend the axis if TAxis::kCanExtend is true.; Otherwise, return 0 or fNbins+1. Int_t FindBin(const char* label); Find bin number with label.; If the List of labels does not exist create it; If label is not in the list of labels do the following depending on the; bit TAxis::kCanExtend; of the axis.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set and the histogram has labels in each bin; set the bit automatically and consider the histogram as alphanumeric; if histogram has only some bins with labels then the histogram is not; consider alphanu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxis.html:13433,release,released,13433,root/html602/TAxis.html,https://root.cern,https://root.cern/root/html602/TAxis.html,1,['release'],['released']
Deployability,"ble_tRooSegmentedIntegrator1D::_range; Bool_tRooSegmentedIntegrator1D::_useIntegrandLimits; Bool_tRooSegmentedIntegrator1D::_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; RooSegmentedIntegrator1D*_xIntegrator; RooAbsFunc*_xint; Double_tRooSegmentedIntegrator1D::_xmax; Double_tRooSegmentedIntegrator1D::_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator2D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator2D(); Default constructor. RooSegmentedIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooSegmentedIntegrator2D(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. RooSegmentedIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 2 15:33:42 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSegmentedIntegrator2D.html:8443,configurat,configuration,8443,root/html604/RooSegmentedIntegrator2D.html,https://root.cern,https://root.cern/root/html604/RooSegmentedIntegrator2D.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ble_tRooSegmentedIntegrator1D::_range; Bool_tRooSegmentedIntegrator1D::_useIntegrandLimits; Bool_tRooSegmentedIntegrator1D::_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; RooSegmentedIntegrator1D*_xIntegrator; RooAbsFunc*_xint; Double_tRooSegmentedIntegrator1D::_xmax; Double_tRooSegmentedIntegrator1D::_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator2D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator2D(); Default constructor. RooSegmentedIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooSegmentedIntegrator2D(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. RooSegmentedIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 30 14:35:36 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSegmentedIntegrator2D.html:8443,configurat,configuration,8443,root/html602/RooSegmentedIntegrator2D.html,https://root.cern,https://root.cern/root/html602/RooSegmentedIntegrator2D.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ble_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:8637,integrat,integration,8637,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,1,['integrat'],['integration']
Deployability,"ble_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLine(); Default constructor. TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = 0.02, Double_t amp = 0.01); Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2).; The wavelength and amplitude are given in percent of the pad height. void Build(); Create a curly (Gluon) or wavy (Gamma) line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyLine is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurly(); Set curly. void SetWavy(); Set wavy. void SetWaveLength(Double_t WaveLength); Set wave length. void SetAmplitude(Double_t x); Set amplitude. void SetStartPoint(Double_t x1, Double_t y1); Set start point. void SetEndPoint(Double_t x2, Double_t y2); Set edn point. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set defaul ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". Rectangle_t GetBBox(); Return the bounding Box of the CurlyLine. TPoint GetBBoxCenter(); Return the center of the BoundingBox as TPoint in pixels. void SetBBoxCenter(const TPoint& p); Set center ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCurlyLine.html:11297,release,released,11297,root/html602/TCurlyLine.html,https://root.cern,https://root.cern/root/html602/TCurlyLine.html,2,['release'],['released']
Deployability,"ble_t GradBoostRegression (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Implementation of M_TreeBoost using any loss function as described by Friedman 1999. ;  ; void Init (void);  Common initialisation with defaults for the BDT-Method. ;  ; void InitGradBoost (std::vector< const TMVA::Event * > &);  Initialize targets for first tree. ;  ; void PreProcessNegativeEventWeights ();  O.k. ;  ; Double_t PrivateGetMvaValue (const TMVA::Event *ev, Double_t *err=nullptr, Double_t *errUpper=nullptr, UInt_t useNTrees=0);  Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ;  ; Double_t RegBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  A special boosting only for Regression (not implemented). ;  ; void UpdateTargets (std::vector< const TMVA::Event * > &, UInt_t cls=0);  Calculate residual for all events. ;  ; void UpdateTargetsRegression (std::vector< const TMVA::Event * > &, Bool_t first=kFALSE);  Calculate residuals for all events and update targets for next iter. ;  . Private Attributes; Double_t fAdaBoostBeta;  beta parameter for AdaBoost algorithm ;  ; TString fAdaBoostR2Loss;  loss type used in AdaBoostR2 (Linear,Quadratic or Exponential) ;  ; Bool_t fAutomatic;  use user given prune strength or automatically determined one using a validation sample ;  ; Bool_t fBaggedBoost;  turn bagging in combination with boost on/off ;  ; Bool_t fBaggedGradBoost;  turn bagging in combination with grad boost on/off ;  ; Double_t fBaggedSampleFraction;  relative size of bagged event sample to original sample size ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  ntuple var: boost weight ;  ; std::vector< double > fBoostWeights;  the weights applied in the individual boosts ;  ; Double_t fCbb;  Cost factor. ;  ; Double_t fCss;  Cost factor. ;  ; Double_t fCtb_ss;  Cost factor. ;  ; Double_t fCts_sb;  Cost factor. ;  ; Bool_t fDoBoostMonit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:33866,update,update,33866,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['update'],['update']
Deployability,"bles of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:1679,install,installed,1679,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,1,['install'],['installed']
Deployability,"bles; RooRefArrayRooAbsArg::_proxyListlist of proxies; string_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_t_setNumPartition number of this instance in parallel calculation mode; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_t_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_t_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:38265,integrat,integrator,38265,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ble ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6198,integrat,integration,6198,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"blic Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsAnaConvPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:60449,configurat,configuration,60449,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,6,['configurat'],['configuration']
Deployability,"blic Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:57398,configurat,configuration,57398,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,3,['configurat'],['configuration']
Deployability,"blities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooKeysPdf.html:39260,configurat,configuration,39260,root/html526/RooKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooKeysPdf.html,9,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bool SetObsToExpected(RooAbsPdf& pdf, const RooArgSet& obs); set observed value to the expected one; works for Gaussian, Poisson or LogNormal; assumes mean parameter value is the argument not constant and not depoending on observables; (if more than two arguments are not constant will use first one but printr a warning !); need to iterate on the components of the POisson to get n and nu (nu can be a RooAbsReal); (code from G. Petrucciani and extended by L.M.). RooAbsData * GenerateCountingAsimovData(RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); generate counting Asimov data for the case when the pdf cannot be extended; assume pdf is a RooPoisson or can be decomposed in a product of RooPoisson,; otherwise we cannot know how to make the Asimov data sets in the other cases. RooAbsData * GenerateAsimovDataSinglePdf(const RooAbsPdf& pdf, const RooArgSet& obs, const RooRealVar& weightVar, RooCategory* channelCat = 0); compute the asimov data set for an observable of a pdf; use the number of bins sets in the observables; to do : (possibility to change number of bins); implement integration over bin content. RooAbsData * GenerateAsimovData(const RooAbsPdf& pdf, const RooArgSet& observables); generate the asimov data for the observables (not the global ones); need to deal with the case of a sim pdf. RooAbsData * MakeAsimovData(RooAbsData& data, const RooStats::ModelConfig& model, const RooArgSet& poiValues, RooArgSet& globObs, const RooArgSet* genPoiValues = 0); static function to the an Asimov data set; given an observed dat set, a model and a snapshot of poi.; Return the asimov data set + global observables set to values satisfying the constraints. RooAbsData * MakeAsimovData(const RooStats::ModelConfig& model, const RooArgSet& allParamValues, RooArgSet& globObs); static function to the an Asimov data set; given the model and the values of all parameters including the nuisance; Return the asimov data set + global observabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html:8538,integrat,integration,8538,root/html534/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html,3,['integrat'],['integration']
Deployability,"boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_t_errorCountNumber of errors remaining to print; static Bool_t_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:45029,integrat,integration,45029,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,2,['integrat'],['integration']
Deployability,"boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet! Current normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMomentMorph.html:40789,integrat,integration,40789,root/html534/RooMomentMorph.html,https://root.cern,https://root.cern/root/html534/RooMomentMorph.html,1,['integrat'],['integration']
Deployability,"boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; vector<double>_high; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Double_t_interpBoundary; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Bool_t_logInit! flag used for chaching polynomial coefficients; vector<double>_low; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__FlexibleInterpVar.html:34357,integrat,integration,34357,root/html534/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__FlexibleInterpVar.html,1,['integrat'],['integration']
Deployability,"boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:44305,integrat,integration,44305,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,2,['integrat'],['integration']
Deployability,"bool changeModel (const RooResolutionModel &newModel);  Change the current resolution model to newModel. ;  ; virtual double coefAnalyticalIntegral (Int_t coef, Int_t code, const char *rangeName=nullptr) const;  Default implementation of function implementing advertised integrals. ;  ; virtual RooFit::OwningPtr< RooArgSet > coefVars (Int_t coefIdx) const;  Return set of parameters with are used exclusively by the coefficient functions. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsRealLValue * convVar ();  Retrieve the convolution variable. ;  ; const RooAbsRealLValue * convVar () const;  Retrieve the convolution variable. ;  ; Int_t declareBasis (const char *expression, const RooArgList &params);  Declare a basis function for use in this physics model. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  This function forces RooRealIntegral to offer all integration dependents to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for internal integration, if RooRealIntegral considers this to be unsafe (e.g. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Create a generator context for this p.d.f. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise capability to perform (analytical) integrals internally. ;  ; virtual Int_t getCoefAnalyticalIntegral (Int_t coef, RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Default implementation of function advertising integration capabilities. ;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet &nset, const char *rangeName) const;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet *nset=nullptr, const char *rangeName=nullptr) const;  ; bool isDirec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:5698,integrat,integration,5698,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,2,['integrat'],['integration']
Deployability,"braries. Function documentation; TMethod(MethodInfo_t* info = 0, TClass* cl = 0); Default TMethod ctor. TMethods are constructed in TClass.; Comment strings are pre-parsed to find out whether the method is; a context-menu item. TMethod(const TMethod& org); Copy ctor. TMethod& operator=(const TMethod& rhs); Assignment operator. ~TMethod(); Cleanup. TObject * Clone(const char* newname = """") const; Clone method. const char * GetCommentString(); Returns a comment string from the class declaration. void CreateSignature(); Using the CINT method arg information create a complete signature string. TDataMember * FindDataMember(); Tries to guess DataMember from comment string; and Method's name <==(only if 1 Argument!).; If more then one argument=> returns pointer to the last argument.; It also sets MethodArgs' pointers to point to specified data members. The form of comment string defining arguments is:; void XXX(Int_t x1, Float_t y2) //*ARGS={x1=>fX1,y2=>fY2}; where fX1, fY2 are data fields in the same class.; (""pointers"" to data members). TMethodCall * GetterMethod(); Return call environment for the getter method in case this is a; *TOGGLE method (for the context menu). TMethodCall * SetterMethod(); Return call environment for this method in case this is a; *TOGGLE method which takes a single boolean or integer argument. TList * GetListOfMethodArgs(); Returns methodarg list and additionally updates fDataMember in TMethod by; calling FindDataMember();. TClass * GetClass() const; { return fClass; }. EMenuItemKind IsMenuItem() const; { return fMenuItem; }. const char * Getter() const; { return fGetter; }. void SetMenuItem(EMenuItemKind menuItem); {fMenuItem=menuItem;}. » Author: Rene Brun 09/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMethod.html:8856,update,updates,8856,root/html534/TMethod.html,https://root.cern,https://root.cern/root/html534/TMethod.html,1,['update'],['updates']
Deployability,"braries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator1D.html:8872,integrat,integrator,8872,root/html530/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator1D.html,10,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"braries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jonas Hahnfeld, CERN/Goethe University Frankfurt,; Fernando Hueso Gonzalez, University of Valencia; Atti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:1373,release,release,1373,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['release'],['release']
Deployability,"break;; 842 }; 843 ; 844 Settings * settings = new Settings(TString(), s.convergenceSteps, s.batchSize,; 845 s.testInterval, s.weightDecay, r,; 846 MinimizerType::fSteepest, s.learningRate,; 847 s.momentum, 1, s.multithreading);; 848 std::shared_ptr<Settings> ptrSettings(settings);; 849 ptrSettings->setMonitoring (0);; 850 Log() << kINFO; 851 << ""Training with learning rate = "" << ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest minimizer(ptrSettings->learningRate(),; 874 ptrSettings->momentum(),; 875 ptrSettings->repetitions());; 876 net.train(weights, trainPattern, testPattern, minimizer, *ptrSettings.get());; 877 ptrSettings.reset();; 878 Log () << kINFO << Endl;; 879 idxSetting++;; 880 }; 881 size_t weightIndex = 0;; 882 for (size_t l = 0; l < fNet.GetDepth(); l++) {; 883 auto & layerWeights = fNet.GetLayer(l).GetWeights();; 884 for (Int_t j = 0; j < layerWeights.GetNcols(); j++) {; 885 for (Int_t i = 0; i < layerWeights.GetNrows(); i++) {; 886 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:30926,configurat,configuration,30926,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['configurat'],['configuration']
Deployability,"bs - tabs for each object drawing; gridNxM - fixed-size grid with NxM frames; vertN - N frames sorted in vertical direction (like gridi1xN); horizN - N frames sorted in horizontal direction (like gridiNx1); vert121 - 3 frames sorted in vertical direction, second frame divided on two sub-frames; horiz32_12 - 2 horizontal frames with 3 and 2 subframes, and 1/3 and 2/3 as relative size. When specifying files, items or opts parameters, array of strings could be provided like files=['file1.root','file2.root']. One could skip quotes when specifying elements names items=[file1.root/hpx,file2.root/hpy] or opts=['',colz].; As item name, URL to existing image can be provided like item=img:http://server/image.png. Such image will be just inserted in the existing layout. One could specify option ""scale"" to automatically scale image to available space.; Many examples of URL string usage can be found on JSROOT API examples page.; One can very easy integrate JSROOT graphic into arbitrary HTML pages using a iframe tag:; <iframe width=""700"" height=""400""; src=""https://root.cern/js/latest/?nobrowser&file=https://root.cern/js/files/hsimple.root&item=hpxpy&opt=colz"">; </iframe>; 1.3 Supported ROOT classes by JSROOT; List of supported classes and draw options:. TH1 : hist, p, p0, *, l, lf2, a, e, e0, e1, e1x0, e3, e4, lego, text, X+Y+; TH2 : scat, col, colz, box, box1, text, lego, arr, cont, cont1, cont2, cont3, cont4, surf, surf1, surf2, surf3, surf4, surf6, surf7, lego, lego0, lego1, lego2, lego3, lego4; TH2Poly : col, lego, europe, usa; TH3 : scat, box, box1; TProfile : dflt, e, e1, pe2, hist, text, texte; TProfile2D : example; THStack : example; TF1 : example; TF2 : example; TSpline : example; TGraph : dflt, L, P, *, B, RX, RY; TGraphErrors : dflt, l, lx, z, >, |>, ||, [], 0, 2, 3, 4, 5; TGraphAsymmErrors : dflt,; TGraphMultiErrors : docu, z and other from TGraphErrors; TGraphPolar : example; TMultiGraph : example, exclusion; TGraph2D : example; TEfficiency : docu; TLatex : example; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:5447,integrat,integrate,5447,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['integrat'],['integrate']
Deployability,"bsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStreams ; (; ); const. inline . Definition at line 163 of file RooMsgService.h. ◆ Print(). void RooMsgService::Print ; (; Option_t * ; options = nullptr); const. overridevirtual . Print configuration of message service. ; If ""v"" option is given also inactive streams are listed ; Reimplemented from TObject.; Definition at line 486 of file RooMsgService.cxx. ◆ reset(). void RooMsgService::reset ; (; ). Definition at line 113 of file RooMsgService.cxx. ◆ restoreState(). void RooMsgService::restoreState ; (; ). Restore last saved state of message service. ; Definition at line 366 of file RooMsgService.cxx. ◆ saveState(). void RooMsgService::saveState ; (; ). Save current state of message service. ; Definition at line 356 of file RooMsgService.cxx. ◆ setGlobalKillBelow(). void RooMsgService::setGlobalKillBelow ; (; RooFit::MsgLevel ; level). inline . Definition at line 169 of file RooMsgService.h. ◆ setSilentMode(). void RooMsgService::setSilentMode ; (; bool ; flag). inline . Definition at line 197 of file RooMsgService.h. ◆ setStreamStatus(). void RooMsgService::setStreamStatus ; (; Int_t ; id, . bool ; active . ). (De)Activate stream with given unique ID ; Definition at line 311 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:21085,configurat,configuration,21085,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['configurat'],['configuration']
Deployability,"bsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Int_t_coefIdxIndex code of the coefficient; RooRealProxy_convPdfRooAbsAnaConv object implementing our coefficient; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConvCoefVar.html:33579,integrat,integration,33579,root/html534/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html534/RooConvCoefVar.html,1,['integrat'],['integration']
Deployability,bsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_flatSFInt; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooRes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGaussModel.html:38940,integrat,integration,38940,root/html526/RooGaussModel.html,https://root.cern,https://root.cern/root/html526/RooGaussModel.html,1,['integrat'],['integration']
Deployability,bsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_flatSFInt; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for abo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGaussModel.html:39322,integrat,integration,39322,root/html528/RooGaussModel.html,https://root.cern,https://root.cern/root/html528/RooGaussModel.html,3,['integrat'],['integration']
Deployability,bsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; TIterator*_highIter! Iterator over highSet; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TIterator*_lowIter! Iterator over lowSet; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; RooRealProxy_nominalThe nominal value; RooObjCacheManager_normIntMgrThe integration cache manager; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; TIterator*_paramIter! Iterator over paramSet; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/PiecewiseInterpolation.html:31947,integrat,integration,31947,root/html530/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html530/PiecewiseInterpolation.html,1,['integrat'],['integration']
Deployability,bsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; Int_t_nBins; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefC,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooParametricStepFunction.html:38277,integrat,integrated,38277,root/html526/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html526/RooParametricStepFunction.html,1,['integrat'],['integrated']
Deployability,bsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; Int_t_nBins; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotComp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooParametricStepFunction.html:38659,integrat,integrated,38659,root/html528/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html528/RooParametricStepFunction.html,1,['integrat'],['integrated']
Deployability,bsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; Int_t_nBins; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooParametricStepFunction.html:39128,integrat,integrated,39128,root/html530/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html530/RooParametricStepFunction.html,1,['integrat'],['integrated']
Deployability,bsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TArrayD_limits; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; Int_t_nBins; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values fr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooParametricStepFunction.html:39531,integrat,integrated,39531,root/html532/RooParametricStepFunction.html,https://root.cern,https://root.cern/root/html532/RooParametricStepFunction.html,1,['integrat'],['integrated']
Deployability,"bsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; TIterator*_lowIter! Iterator over lowSet; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; RooRealProxy_nominalThe nominal value; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; TIterator*_paramIter! Iterator over paramSet; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/PiecewiseInterpolation.html:32721,integrat,integrator,32721,root/html528/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html528/PiecewiseInterpolation.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. void wireCache(). » Last changed: Fri Jun 19 21:36:03 2015 » Last generated: 2015-06-19 21:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_RooAbsCacheElement_.html:4901,integrat,integration,4901,root/html602/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Deployability,"bsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). Int_t setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Setter function without integration set. Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. void insertObjectHook(RooAbsCacheElement& ); Interface function to perform post-insert operations on cached object. void wireCache(). » Last changed: Sat Jun 20 17:30:05 2015 » Last generated: 2015-06-20 17:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCacheManager_RooAbsCacheElement_.html:4901,integrat,integration,4901,root/html604/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html604/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Deployability,"bsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(genPdf_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_genPdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_genPdfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:11958,integrat,integrator,11958,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,2,['integrat'],['integrator']
Deployability,"bsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tagFlav; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBMixDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBMixDecay.html:41309,integrat,integrator,41309,root/html528/RooBMixDecay.html,https://root.cern,https://root.cern/root/html528/RooBMixDecay.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTruthModel.html:44021,configurat,configuration,44021,root/html534/RooTruthModel.html,https://root.cern,https://root.cern/root/html534/RooTruthModel.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalphaInterpolation parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdf1First input shape; RooRealProxypdf2Second input shape; RooRealProxyxObservable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:47764,configurat,configuration,47764,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfItr!; RooListProxy_pdfList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooMomentMorph::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMomentMorph.html:39517,configurat,configuration,39517,root/html528/RooMomentMorph.html,https://root.cern,https://root.cern/root/html528/RooMomentMorph.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,double>funcFunction pointer reference; RooRealProxyxArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction1PdfBinding_double_double_.html:39588,integrat,integrator,39588,root/html530/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction1PdfBinding_double_double_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of futur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:143955,integrat,integrating,143955,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integrating']
Deployability,"bsReal.; Definition at line 77 of file RooLognormal.cxx. ◆ generateEvent(). void RooLognormal::generateEvent ; (; Int_t ; code). overridevirtual . Interface for generation of an event using the algorithm corresponding to the specified code. ; The meaning of each code is defined by the getGenerator() implementation. The default implementation does nothing. ; Reimplemented from RooAbsPdf.; Definition at line 135 of file RooLognormal.cxx. ◆ getAnalyticalIntegral(). Int_t RooLognormal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 102 of file RooLognormal.cxx. ◆ getGenerator(). Int_t RooLognormal::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 128 of file RooLognormal.cxx. ◆ getMedian(). RooAbsReal const & RooLognormal::getMedian ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:78387,integrat,integration,78387,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['integrat'],['integration']
Deployability,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:93692,integrat,integration,93692,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['integrat'],['integration']
Deployability,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:94960,integrat,integration,94960,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['integrat'],['integration']
Deployability,"bsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Bool_t_flatSFInt; Bool_t_flip; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGExpModel.html:45827,integrat,integration,45827,root/html602/RooGExpModel.html,https://root.cern,https://root.cern/root/html602/RooGExpModel.html,2,['integrat'],['integration']
Deployability,"bsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionOneDim*funcFunctor; RooRealProxyvarArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFunctor1DBinding.html:32011,integrat,integrator,32011,root/html526/RooFunctor1DBinding.html,https://root.cern,https://root.cern/root/html526/RooFunctor1DBinding.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdf. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendedBinding(const char* name, const char* title, RooAbsPdf& _pdf). RooExtendedBinding(const RooExtendedBinding& other, const char* name = 0). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendedBinding.html:36292,integrat,integrator,36292,root/html602/RooExtendedBinding.html,https://root.cern,https://root.cern/root/html602/RooExtendedBinding.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ParamHistFunc.html:32887,integrat,integration,32887,root/html532/ParamHistFunc.html,https://root.cern,https://root.cern/root/html532/ParamHistFunc.html,3,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"bsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionMultiDim*funcFunctor; RooListProxyvarsArgument reference; Double_t*xArgument value array. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFunctorBinding(const char* name, const char* title, const ROOT::Math::IBaseFunctionMulti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFunctorBinding.html:35314,integrat,integrator,35314,root/html534/RooFunctorBinding.html,https://root.cern,https://root.cern/root/html534/RooFunctorBinding.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_int_.html:37047,integrat,integrator,37047,root/html602/RooCFunction2Binding_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_int_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction2Ref<VO,VI1,VI2> Streamer(TBuffer& ); Custom streamer for function pointer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_int_double_.html:37047,integrat,integrator,37047,root/html602/RooCFunction2Binding_double_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_int_double_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bsReal::numEvalErrorItemsstatic Int_t numEvalErrorItems()Definition RooAbsReal.cxx:176; RooAbsReal::RooAbsRealRooAbsReal()coverity[UNINIT_CTOR] Default constructorDefinition RooAbsReal.cxx:199; RooAbsReal::fixAddCoefNormalizationvirtual void fixAddCoefNormalization(const RooArgSet &addNormSet=RooArgSet(), bool force=true)Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by...Definition RooAbsReal.cxx:3650; RooAbsReal::hasGradientvirtual bool hasGradient() constDefinition RooAbsReal.h:387; RooAbsReal::getAnalyticalIntegralWNvirtual Int_t getAnalyticalIntegralWN(RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) constVariant of getAnalyticalIntegral that is also passed the normalization set that should be applied to ...Definition RooAbsReal.cxx:351; RooAbsReal::isValidbool isValid() const overrideCheck if current value is valid.Definition RooAbsReal.h:445; RooAbsReal::_forceNumIntbool _forceNumIntForce numerical integration if flag set.Definition RooAbsReal.h:539; RooAbsReal::~RooAbsReal~RooAbsReal() overrideDestructor.Definition RooAbsReal.cxx:238; RooAbsReal::setParameterizeIntegralvoid setParameterizeIntegral(const RooArgSet &paramVars)Definition RooAbsReal.cxx:4324; RooAbsReal::matchArgsByNamebool matchArgsByName(const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) constCheck if allArgs contains matching elements for each name in nameList.Definition RooAbsReal.cxx:3241; RooAbsReal::hideOffsetstatic bool hideOffset()Definition RooAbsReal.cxx:192; RooAbsReal::setTreeBranchStatusvoid setTreeBranchStatus(TTree &t, bool active) override(De)Activate associated tree branchDefinition RooAbsReal.cxx:3116; RooAbsReal::fillHistogramTH1 * fillHistogram(TH1 *hist, const RooArgList &plotVars, double scaleFactor=1, const RooArgSet *projectedVars=nullptr, bool scaling=true, const RooArgSet *condObs=nullptr, bool setError=true) constFill the ROOT histogram 'hist' wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:35605,integrat,integration,35605,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['integrat'],['integration']
Deployability,"bsReal::setEvalErrorLoggingModestatic void setEvalErrorLoggingMode(ErrorLoggingMode m)Set evaluation error logging mode.Definition RooAbsReal.cxx:4316; RooAbsReal::preferredObservableScanOrdervirtual void preferredObservableScanOrder(const RooArgSet &obs, RooArgSet &orderedObs) constInterface method for function objects to indicate their preferred order of observables for scanning t...Definition RooAbsReal.cxx:3694; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::findInnerMostIntegrationvoid findInnerMostIntegration(const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) constUtility function for createIntObj() that aids in the construct of recursive integrals over functions ...Definition RooAbsReal.cxx:701; RooAbsReal::integralNameSuffixTString integralNameSuffix(const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) constConstruct string with unique suffix name to give to integral object that encodes integrated observabl...Definition RooAbsReal.cxx:755; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::getTitleTString getTitle(bool appendUnit=false) constReturn this variable's title string.Definition RooAbsReal.cxx:285; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::analyticalIntegralWNvirtual double analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:380; RooAbsReal::getUnitconst Text_t * getUnit() constDefinition RooAbsReal.h:143; RooAbsReal::getIntegratorConfigconst RooNumIntConfig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:230607,integrat,integrated,230607,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['integrat'],['integrated']
Deployability,"bsRealLValue &var, const RooCmdArg &arg={})Definition RooGlobalFunc.cxx:850; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf309_ndimplotDefinition rf309_ndimplot.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf309_ndimplot.C. tutorialsroofitrf309_ndimplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf309__ndimplot_8C.html:5964,integrat,integrator,5964,doc/master/rf309__ndimplot_8C.html,https://root.cern,https://root.cern/doc/master/rf309__ndimplot_8C.html,8,['integrat'],['integrator']
Deployability,"bsTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:5045,integrat,integration,5045,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,6,['integrat'],['integration']
Deployability,"bsTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char * type, int rule, double absTol, double relTol, size_t size ); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const IGenFunction &f, bool copyFunc = false); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction( GSLFuncPointer f, void * p = 0). Set function from a GSL pointer function type. double Integral(const IGenFunction & f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). 	evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:6514,integrat,integration,6514,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"bsTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:7672,integrat,integration,7672,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,['integrat'],['integration']
Deployability,"bservables, so that its maximum value is precisely 1. It is also; possible to choose a different normalization for; multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; construct a partial cdf c(x,y) that only when integrated itself; over z results in a maximum value of 1. To construct such a cdf pass; z as argument to the optional nset argument. RooAbsReal* createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create an object that represents the integral of the function over one or more observables listed in iset; The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. The following named arguments are accepted. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanNumCdf() -- Apply scanning technique if cdf integral involves numeric integration [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalEr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:76406,integrat,integrates,76406,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,12,['integrat'],['integrates']
Deployability,"bservables; TListRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Bool_t_showProgressShow progress indication during evaluation if true; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Double_t_sumWeightGlobal sum of weights needed for normalization; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDataWeightedAverage(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t showProgress = kFALSE, Bool_t verbose = kTRUE); Constructor of data weighted average of given p.d.f over given data. If nCPU>1 the calculation is parallelized; over multuple processes. If showProgress is true a progress indicator printing a single dot for e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataWeightedAverage.html:34808,integrat,integrator,34808,root/html526/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html526/RooDataWeightedAverage.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:59385,configurat,configuration,59385,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['configurat'],['configuration']
Deployability,"bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:58155,configurat,configuration,58155,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,1,['configurat'],['configuration']
Deployability,"bug level and the debug range.; 8924///; 8925/// For entries in the debug range, the functions TBranchElement::Fill; 8926/// and TBranchElement::GetEntry will print the number of bytes filled; 8927/// or read for each branch.; 8928 ; 8929void TTree::SetDebug(Int_t level, Long64_t min, Long64_t max); 8930{; 8931 fDebug = level;; 8932 fDebugMin = min;; 8933 fDebugMax = max;; 8934}; 8935 ; 8936////////////////////////////////////////////////////////////////////////////////; 8937/// Update the default value for the branch's fEntryOffsetLen.; 8938/// If updateExisting is true, also update all the existing branches.; 8939/// If newdefault is less than 10, the new default value will be 10.; 8940 ; 8941void TTree::SetDefaultEntryOffsetLen(Int_t newdefault, bool updateExisting); 8942{; 8943 if (newdefault < 10) {; 8944 newdefault = 10;; 8945 }; 8946 fDefaultEntryOffsetLen = newdefault;; 8947 if (updateExisting) {; 8948 TIter next( GetListOfBranches() );; 8949 TBranch *b;; 8950 while ( ( b = (TBranch*)next() ) ) {; 8951 b->SetEntryOffsetLen( newdefault, true );; 8952 }; 8953 if (fBranchRef) {; 8954 fBranchRef->SetEntryOffsetLen( newdefault, true );; 8955 }; 8956 }; 8957}; 8958 ; 8959////////////////////////////////////////////////////////////////////////////////; 8960/// Change the tree's directory.; 8961///; 8962/// Remove reference to this tree from current directory and; 8963/// add reference to new directory dir. The dir parameter can; 8964/// be 0 in which case the tree does not belong to any directory.; 8965///; 8966 ; 8967void TTree::SetDirectory(TDirectory* dir); 8968{; 8969 if (fDirectory == dir) {; 8970 return;; 8971 }; 8972 if (fDirectory) {; 8973 fDirectory->Remove(this);; 8974 ; 8975 // Delete or move the file cache if it points to this Tree; 8976 TFile *file = fDirectory->GetFile();; 8977 MoveReadCache(file,dir);; 8978 }; 8979 fDirectory = dir;; 8980 if (fDirectory) {; 8981 fDirectory->Append(this);; 8982 }; 8983 TFile* file = nullptr;; 8984 if (fDirectory) {; 89",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:346924,update,updateExisting,346924,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['update'],['updateExisting']
Deployability,"bug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. TFileCollection * GetDataSet(const char* uri, const char* srv = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. void UpdateUsedSpace(); updates the used space maps. Long_t GetModTime(const char* uri); Gets last dataset modification time. Returns -1 on error, or number of; seconds since epoch on success. const char * GetDataSetPath(const char* group, const char* user, const char* dsName). TDataSetManagerFile(); { }. virtual ~TDataSetManagerFile(); { }. const char * GetMSSUrl() const; { return fMSSUrl; }. const char * GetStageOpts() const; { return fStageOpts; }. » Author: J",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManagerFile.html:20200,update,update,20200,root/html534/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html534/TDataSetManagerFile.html,1,['update'],['update']
Deployability,"bug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. TFileCollection * GetDataSet(const char* uri, const char* srv = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. void UpdateUsedSpace(); updates the used space maps. const char * GetDataSetPath(const char* group, const char* user, const char* dsName). TDataSetManagerFile(); { }. virtual ~TDataSetManagerFile(); { }. const char * GetMSSUrl() const; { return fMSSUrl; }. const char * GetStageOpts() const; { return fStageOpts; }. » Author: Jan Fiete Grosse-Oetringhaus, 08.08.07 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TDataSetM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:19578,update,update,19578,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,3,['update'],['update']
Deployability,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:9692,install,installation,9692,d/license.html,https://root.cern,https://root.cern/d/license.html,1,['install'],['installation']
Deployability,"butes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions;  RooChi2Var (const char *name, const char *title, RooAbsReal &func, RooDataHist &data, const RooArgSet &projDeps, FuncMode funcMode, RooAbsTestStatistic::Configuration const &cfg, RooDataHist::ErrorType etype);  . Additional Inherited Members;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:66323,integrat,integration,66323,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"butes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h lengthDefinition TGWin32VirtualXProxy.cxx:245; namechar name[80]Definition TGX11.cxx:110; TInterpreter.h; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; TLeaf.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TROOT.h; TTree.h; Utils.hxx; ROOT::Detail::RDF::RDefineBaseDefinition RDefineBase.hxx:39; ROOT::Detail::RDF::RDefineBase::GetTypeNamestd::string GetTypeName() constDefinition RDefineBase.cxx:47; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::Internal::RDF::RStringCache::Insertauto Insert(const std::string &string) -> decltype(fStrings)::const_iteratorInserts the input string in the cache and returns an iterator to the cached string.Definition RDFUtils.cxx:444; ROOT::RDF::RDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats.Definition RDataSource.hxx:109; ROOT::RDF::RDataSource::HasColumnvirtual bool HasColumn(std::string_view colName) const =0Checks if the dataset has a certain column.; ROOT::RDF::RDataSource::GetTypeNamevirtual std::string GetTypeName(std::string_view colName) const =0Type of a column as a string, e.g.; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranchElement::GetClassvirtual TClass * GetClass() constDefinition TBranchElement.h:187; TBranch::Classstatic TClass * Class(); TClassRefTClassRef is used to implement a permanent reference to a TClass object.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFUtils_8cxx_source.html:20205,configurat,configuration,20205,doc/master/RDFUtils_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFUtils_8cxx_source.html,1,['configurat'],['configuration']
Deployability,button press event; EButtonStateTGCheckButton::fPrevStateprevious check button state; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorSelect.html:22746,release,released,22746,root/html528/TGColorSelect.html,https://root.cern,https://root.cern/root/html528/TGColorSelect.html,1,['release'],['released']
Deployability,"by the user. ; Definition at line 678 of file RooAbsCategory.cxx. ◆ writeToStream(). void RooAbsCategory::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to ostream. ; Implements RooAbsArg.; Reimplemented in RooCategory, RooMappedCategory, RooMultiCategory, and RooThresholdCategory.; Definition at line 391 of file RooAbsCategory.cxx. Friends And Related Symbol Documentation. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 203 of file RooAbsCategory.h. Member Data Documentation. ◆ _currentIndex. value_type RooAbsCategory::_currentIndex {std::numeric_limits<int>::min()}. mutableprotected . Current category state. ; Definition at line 216 of file RooAbsCategory.h. ◆ _insertionOrder. std::vector<std::string> RooAbsCategory::_insertionOrder. protected . Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape(). ; Definition at line 218 of file RooAbsCategory.h. ◆ _legacyStates. std::map<value_type, std::unique_ptr<RooCatType, std::function<void(RooCatType*)> > > RooAbsCategory::_legacyStates. mutableprotected . ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ; Definition at line 219 of file RooAbsCategory.h. ◆ _stateNames. std::map<std::string, value_type> RooAbsCategory::_stateNames. protected . Map state names to index numbers. Make sure state names are updated in recomputeShape(). ; Definition at line 217 of file RooAbsCategory.h. ◆ _treeReadBuffer. TreeReadBuffer* RooAbsCategory::_treeReadBuffer = nullptr. private . Definition at line 224 of file RooAbsCategory.h. Libraries for RooAbsCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCategory.h; roofit/roofitcore/src/RooAbsCategory.cxx. RooAbsCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:65218,update,updated,65218,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['update'],['updated']
Deployability,"byte values from tree branches ; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooXYChi2Var.html:36670,integrat,integrator,36670,root/html530/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html530/RooXYChi2Var.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager; RooSetProxy_cacheObsNon-convolution observables that are also cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFFTConvPdf.html:48780,integrat,integration,48780,root/html602/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html602/RooFFTConvPdf.html,2,['integrat'],['integration']
Deployability,"c . ReturnsName of the file containing the class declaration ; Definition at line 57 of file RooLegacyExpPoly.h. ◆ doEval(). void RooLegacyExpPoly::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of ExpPoly distribution. ; Reimplemented from RooAbsReal.; Definition at line 130 of file RooLegacyExpPoly.cxx. ◆ evaluate(). double RooLegacyExpPoly::evaluate ; (; ); const. overrideprotectedvirtual . Evaluation. ; Implements RooAbsReal.; Definition at line 176 of file RooLegacyExpPoly.cxx. ◆ evaluateLog(). double RooLegacyExpPoly::evaluateLog ; (; ); const. protected . Definition at line 95 of file RooLegacyExpPoly.cxx. ◆ getAnalyticalIntegral(). int RooLegacyExpPoly::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 199 of file RooLegacyExpPoly.cxx. ◆ getFormulaExpression(). std::string RooLegacyExpPoly::getFormulaExpression ; (; bool ; expand); const. Definition at line 299 of file RooLegacyExpPoly.cxx. ◆ getLogVal(). double RooLegacyExpPoly::getLogVal ; (; const RooArgSet * ; set); const. overridevirtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented from RooAbsPdf.; Definition at line 191 of file RooLegacyExpPoly.cxx. ◆ IsA(). TClass * RooLegacyExpPoly::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:78363,integrat,integration,78363,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['integrat'],['integration']
Deployability,"c . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumGenConfig::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 75 of file RooNumGenConfig.h. ◆ DeclFileName(). static const char * RooNumGenConfig::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file RooNumGenConfig.h. ◆ defaultConfig(). RooNumGenConfig & RooNumGenConfig::defaultConfig ; (; ). static . Return reference to instance of default numeric integrator configuration object. ; Definition at line 44 of file RooNumGenConfig.cxx. ◆ defaultPrintStyle(). RooPrintable::StyleOption RooNumGenConfig::defaultPrintStyle ; (; Option_t * ; opt); const. overridevirtual . Reimplemented from RooPrintable.; Definition at line 302 of file RooNumGenConfig.cxx. ◆ getConfigSection() [1/2]. RooArgSet & RooNumGenConfig::getConfigSection ; (; const char * ; name). Return section with configuration parameters for integrator with given (class) name. ; Definition at line 279 of file RooNumGenConfig.cxx. ◆ getConfigSection() [2/2]. const RooArgSet & RooNumGenConfig::getConfigSection ; (; const char * ; name); const. Retrieve configuration information specific to integrator with given name. ; Definition at line 288 of file RooNumGenConfig.cxx. ◆ IsA(). TClass * RooNumGenConfig::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file RooNumGenConfig.h. ◆ method1D() [1/2]. RooCategory & RooNumGenConfig::method1D ; (; bool ; cond, . bool ; cat . ). Definition at line 172 of file RooNumGenConfig.cxx. ◆ method1D() [2/2]. const RooCategory & RooNumGenConfig::method1D ; (; bool ; cond, . bool ; cat . ); const. Definition at line 208 of file RooNumGenConfig.cxx. ◆ method2D() [1/2]. RooCategory & RooNumGenConfig::method2D ; (; bool ; cond, . bool ; cat . ). Definition at line 184 of file RooNumGenConfig.cxx. ◆ met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:17100,configurat,configuration,17100,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"c . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProjectedPdf::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file RooProjectedPdf.h. ◆ clone(). TObject * RooProjectedPdf::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Reimplemented in xRooProjectedPdf.; Definition at line 27 of file RooProjectedPdf.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooProjectedPdf::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); const. overridevirtual . Reimplemented from RooAbsPdf.; Definition at line 283 of file RooProjectedPdf.cxx. ◆ createProjection(). RooAbsPdf * RooProjectedPdf::createProjection ; (; const RooArgSet & ; iset). overridevirtual . Special version of RooAbsReal::createProjection that deals with projections of projections. ; Instead of integrating twice, a new RooProjectedPdf is returned that is configured to perform the complete integration in one step ; Reimplemented from RooAbsPdf.; Definition at line 145 of file RooProjectedPdf.cxx. ◆ DeclFileName(). static const char * RooProjectedPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file RooProjectedPdf.h. ◆ evaluate(). double RooProjectedPdf::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate projected p.d.f. ; Implements RooAbsReal.; Reimplemented in xRooProjectedPdf.; Definition at line 94 of file RooProjectedPdf.cxx. ◆ expectedEvents(). double RooProjectedPdf::expectedEvents ; (; const RooArgSet * ; nset); const. inlineoverridevirtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented from RooAbsPdf.; Reimplemented in xRooProjectedPdf.; Definition at line 46 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:76751,integrat,integrating,76751,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,2,['integrat'],"['integrating', 'integration']"
Deployability,"c Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TASPaletteEditor(TAttImage* attImage, UInt_t w, UInt_t h); Palette editor constructor.; The palette editor aloows the editing of the color palette of the image. ~TASPaletteEditor(); Palette editor destructor. Deletes all frames and their layout hints. void CloseWindow(); Close editor. Bool_t ProcessMessage(Long_t msg, Long_t param1, Long_t param2); Process all editor mouse events. void InsertNewPalette(TImagePalette* newPalette); The newPalette is inserted in the list of palettes (fPaletteList) and; fPalette is set to the newPalette. Protected method,. void Save(); Saves the current palette either into a ROOT file or in an ASCII file.; It is called by the Save - button. Protected method. void Open(); Opens either a ROOT file or an ASCII file and reads a palette.; It is called by the Open - button. Protected method. void UpdateScreen(Bool_t histoUpdate); All widgeds of the screen are updated with the current palette.; Protected method. void LogPalette(); The anchor points are rescaled by a log operation.; It is called by the log - button. Protected method. void ExpPalette(); The anchor points are rescaled by a exp operation.; It is called by the exp - button. Protected method. void LinPalette(); The anchor points are rescaled to be linar.; It is called by the lin - button. Protected method. void InvertPalette(); The palette is inverted.; It is called by the invert - button. Protected method. void NewPalette(Long_t id); A new palette is created, depending on the id.; It is called by the combo box. Protected method. void SetStep(); Create a step palette. This is called by the step - check button.; Protected method. void SetRamp(Long_t ramp); The palette is repeated up to 4 times.; This is called by one of the ramp radio buttons. Protected method. void UpdateRange(); Updates the range of the palette.; This is called after the blue limit lines were mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASPaletteEditor.html:23209,update,updated,23209,root/html526/TASPaletteEditor.html,https://root.cern,https://root.cern/root/html526/TASPaletteEditor.html,5,['update'],['updated']
Deployability,"c Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //_____________________________________________________________________________; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for Foam, normalized to one (within 1e-5); Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:1219,integrat,integrator,1219,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['integrat'],['integrator']
Deployability,"c RooPrintable::ContentsOptionRooPrintable::kArgs; static RooPrintable::ContentsOptionRooPrintable::kClassName; static RooPrintable::ContentsOptionRooPrintable::kCollectionHeader; static RooPrintable::ContentsOptionRooPrintable::kExtras; static RooPrintable::StyleOptionRooPrintable::kInline; static RooPrintable::ContentsOptionRooPrintable::kName; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose. protected:. static Int_tRooPrintable::_nameLength; Double_t_normValue; TString_yAxisLabel; Double_t_ymax; Double_t_ymin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print detailed information. TObject * crossCast(); Return cast of RooPlotable as TObject. Note that is this a cross; cast that will change the pointer value in most cases. inline RooPlotable(); { }. virtual ~RooPlotable(); { }. const char* getYAxisLabel() const; { return _yAxisLabel.Data(); }. void setYAxisLabel(const char* label); { _yAxisLabel= label; }. void updateYAxisLimits(Double_t y). void setYAxisLimits(Double_t ymin, Double_t ymax). Double_t getYAxisMin() const; { return _ymin; }. Double_t getYAxisMax() const; { return _ymax; }. Double_t getFitRangeNEvt() const; the normalization value refers to the full ""fit range"" instead of; the ""plot range"". Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const. Double_t getFitRangeBinW() const. » Last changed: Tue Jun 30 14:34:50 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPlotable.html:3873,update,updateYAxisLimits,3873,root/html602/RooPlotable.html,https://root.cern,https://root.cern/root/html602/RooPlotable.html,1,['update'],['updateYAxisLimits']
Deployability,"c TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooResolutionModel::_ownBasisFlag indicating ownership of _basis; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTruthModel.html:46632,configurat,configuration,46632,root/html602/RooTruthModel.html,https://root.cern,https://root.cern/root/html602/RooTruthModel.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"c TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction2PdfBinding_double_double_int_.html:39084,integrat,integrator,39084,root/html528/RooCFunction2PdfBinding_double_double_int_.html,https://root.cern,https://root.cern/root/html528/RooCFunction2PdfBinding_double_double_int_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"c TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction2PdfBinding_double_int_double_.html:39084,integrat,integrator,39084,root/html528/RooCFunction2PdfBinding_double_int_double_.html,https://root.cern,https://root.cern/root/html528/RooCFunction2PdfBinding_double_int_double_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"c const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGView(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t xMargin = 0, UInt_t yMargin = 0, UInt_t options = kSunkenFrame|kDoubleBorder, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create an editor view, containing an TGEditorFrame and (optionally); a horizontal and vertical scrollbar. ~TGView(); Delete view. void Clear(Option_t* = """"); Clear view. void SetVisibleStart(Int_t newTop, Int_t direction); Scroll view in specified direction to make newTop the visible location. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Draw region. void UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); update a part of view. void UpdateBackgroundStart(); set some gc values. Bool_t HandleButton(Event_t* event); handle button. void DoRedraw(); redraw. Bool_t HandleExpose(Event_t* event); Handle expose events. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process scrollbar messages. void Layout(); layout view. void DrawBorder(); Draw the border of the text edit widget. void ScrollToPosition(TGLongPosition newPos); Scroll the canvas to pos. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void ChangeBackground(Pixel_t ); Change background color of the canvas frame. void SetBackgroundColor(Pixel_t ); Set background color of the canvas frame. void SetBackgroundPixmap(Pixmap_t p); Set backgound pixmap. Bool_t ItemLayout(); { return kFALSE; }. TGView(const TGView& ). TGView& operator=(const TGView& ). TGViewFrame * GetCanvas() const; { return fCanvas; }. void SetLayoutManager(TGLayoutM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGView.html:21720,update,update,21720,root/html528/TGView.html,https://root.cern,https://root.cern/root/html528/TGView.html,4,['update'],['update']
Deployability,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:60128,integrat,integration,60128,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:61062,integrat,integration,61062,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,126,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,c const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooRealProxy _n;  Number of expected events. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedTerm.html:59708,configurat,configuration,59708,doc/master/classRooExtendedTerm.html,https://root.cern,https://root.cern/doc/master/classRooExtendedTerm.html,1,['configurat'],['configuration']
Deployability,"c constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double calculate (const RooArgList &partIntList) const;  The cache manager. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Evaluate product of input functions. ;  ; Int_t getPartIntList (const RooArgSet *iset, const char *rangeName=nullptr) const;  Return list of (partial) integrals whose product defines the integral of this RooProduct over the observables in iset in range isetRange. ;  ; ProdMap * groupProductTerms (const RooArgSet &) const;  Group observables into subsets in which the product factorizes and that can thus be integrated separately. ;  ; void ioStreamerPass2 () override;  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; const char * makeFPName (const char *pfx, const RooArgSet &terms) const;  Construct automatic name for internal product terms. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:48669,integrat,integrated,48669,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['integrat'],['integrated']
Deployability,"c for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values datase",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:36741,integrat,integrate,36741,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,4,['integrat'],['integrate']
Deployability,"c integrator registered with the factory that has the ability to perform the numeric integration. The choice of method may depend on the number of dimensions integrated, the nature of the integration limits (closed or open ended) and the preference of the caller as encoded in the configuration object. ; Definition at line 30 of file RooNumGenFactory.h. Public Member Functions;  ~RooNumGenFactory () override;  Destructor. ;  ; RooAbsNumGenerator * createSampler (RooAbsReal &func, const RooArgSet &genVars, const RooArgSet &condVars, const RooNumGenConfig &config, bool verbose=false, RooAbsReal *maxFuncVal=nullptr);  Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ;  ; const RooAbsNumGenerator * getProtoSampler (const char *name);  Return prototype integrator with given (class) name. ;  ; bool storeProtoSampler (RooAbsNumGenerator *proto, const RooArgSet &defConfig);  Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:1474,integrat,integrator,1474,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,4,"['configurat', 'integrat']","['configuration', 'integrator', 'integrators']"
Deployability,"c method returning the list of available applications.Definition TApplication.cxx:2103; TApplication::fIsRunningstd::atomic< bool > fIsRunningWindow system specific application implementation.Definition TApplication.h:61; TApplication::NeedGraphicsLibsstatic void NeedGraphicsLibs()Static method.Definition TApplication.cxx:235; TApplication::ParseRemoteLinestatic Int_t ParseRemoteLine(const char *ln, TString &hostdir, TString &user, Int_t &dbg, TString &script)Parse the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1419; TApplication::fIdleTimerTTimer * fIdleTimerDefinition TApplication.h:69; TApplication::lsvoid ls(Option_t *option="""") const overrideShow available sessions.Definition TApplication.cxx:2087; TApplication::fArgcInt_t fArgcDefinition TApplication.h:58; TApplication::fNoLogBool_t fNoLogDefinition TApplication.h:63; TApplication::fNoLogoBool_t fNoLogoDefinition TApplication.h:64; TApplication::GetSetupTString GetSetup()It gets the ROOT installation setup as TString.Definition TApplication.cxx:967; TApplication::HandleIdleTimervirtual void HandleIdleTimer()Handle idle timeout.Definition TApplication.cxx:577; TApplication::ProcessRemotevirtual Longptr_t ProcessRemote(const char *line, Int_t *error=nullptr)Process the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1485; TApplication::fAppRemoteTApplication * fAppRemoteDefinition TApplication.h:80; TApplication::fArgvchar ** fArgvDefinition TApplication.h:59; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBrowser::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove obj from browser.Definition TBrowser.cxx:408; TBrowser::Addvoid Add(TObject *obj, const char *name=nullptr, Int_t check=-1)Add object with name to browser.Definition TBrowser.cxx:303; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:94049,install,installation,94049,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['install'],['installation']
Deployability,"c std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDispl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:2450,release,release,2450,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,1,['release'],['release']
Deployability,"c std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDispl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:2450,release,release,2450,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,1,['release'],['release']
Deployability,"c void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; double _epsAbs;  Absolute precision. ;  ; double _epsRel;  Relative precision. ;  ; RooCategory _method1D;  Selects integration method for 1D integrals. ;  ; RooCategory _method1DOpen;  Selects integration method for open ended 1D integrals. ;  ; RooCategory _method2D;  Selects integration method for 2D integrals. ;  ; RooCategory _method2DOpen;  Selects integration method for open ended 2D integrals. ;  ; RooCategory _methodND;  Selects integration method for ND integrals. ;  ; RooCategory _methodNDOpen;  Selects integration method for open ended ND integrals. ;  ; bool _printEvalCounter;  Flag to control printing of function evaluation counter. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:13145,integrat,integration,13145,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"c<bool> initialized(kFALSE);; 4601 static std::atomic<bool> seenCling(kFALSE);; 4602 ; 4603 // If we have not seen Cling but the result has been initialized and gCling; 4604 // is still nullptr, the result won't change.; 4605 if (newpath == nullptr && !reset && (seenCling || (initialized && gCling == nullptr))); 4606 return dynpath_full;; 4607 ; 4608 R__LOCKGUARD2(gSystemMutex);; 4609 ; 4610 if (newpath) {; 4611 dynpath_full = newpath;; 4612 // Don't erase the user given path at the next call.; 4613 initialized = kTRUE;; 4614 // We do not (otherwise) record whether the path was set automatically or; 4615 // whether it was set explicitly by the user. If the user set the path; 4616 // explicitly, we should never automatically over-ride the value; if; 4617 // seenCling stayed false, it would tell this routine that at the next; 4618 // call it should update the value (to insert the Cling provided parts); 4619 // back to the default.; 4620 seenCling = kTRUE;; 4621 return dynpath_full;; 4622 }; 4623 ; 4624 // Another thread might have updated this. Even-though this is executed at the; 4625 // start of the process, we might get there if the user is explicitly; 4626 // 'resetting' the value.; 4627 if (!reset && (seenCling || (initialized && gCling == nullptr))); 4628 return dynpath_full;; 4629 ; 4630 if (!initialized) {; 4631 // force one time initialization of gROOT before we start; 4632 // (otherwise it might be done as a side effect of gEnv->GetValue and; 4633 // TROOT's initialization will call this routine).; 4634 gROOT;; 4635 }; 4636 ; 4637 static TString dynpath_envpart;; 4638 static TString dynpath_syspart;; 4639 ; 4640 if (reset || !initialized) {; 4641 ; 4642 dynpath_envpart = gSystem->Getenv(""ROOT_LIBRARY_PATH"");; 4643 TString rdynpath = gEnv->GetValue(""Root.DynamicPath"", (char*)0);; 4644 rdynpath.ReplaceAll("": "", "":""); // in case DynamicPath was extended; 4645 if (rdynpath.IsNull()) {; 4646 rdynpath = "".:""; rdynpath += TROOT::GetLibDir();; 4647 }; 4648 TString l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:148245,update,updated,148245,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['update'],['updated']
Deployability,"cOutput.cxx. ◆ CreateProductIndex(). void TDocOutput::CreateProductIndex ; (; ). virtual . Fetch documentation from THtml::GetProductDocDir() and put it into the product index page. ; Definition at line 1126 of file TDocOutput.cxx. ◆ CreateTypeIndex(). void TDocOutput::CreateTypeIndex ; (; ). virtual . Create index of all data types. ; Definition at line 1275 of file TDocOutput.cxx. ◆ DeclFileName(). static const char * TDocOutput::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 110 of file TDocOutput.h. ◆ DecorateEntityBegin(). void TDocOutput::DecorateEntityBegin ; (; TString & ; str, . Ssiz_t & ; pos, . TDocParser::EParseContext ; type . ). virtual . Add some colors etc to a source entity, contained in str. ; The type of what's contained in str is given by type. It's called e.g. by TDocParser::BeautifyLine(). This function should assume that only str.Begin() is valid. When inserting into str.String(), str.Begin() must be updated. ; Definition at line 1367 of file TDocOutput.cxx. ◆ DecorateEntityEnd(). void TDocOutput::DecorateEntityEnd ; (; TString & ; str, . Ssiz_t & ; pos, . TDocParser::EParseContext ; type . ). virtual . Add some colors etc to a source entity, contained in str. ; The type of what's contained in str is given by type. It's called e.g. by TDocParser::BeautifyLine(). This function should assume that only str.""End()"" (i.e. str.Begin()+str.Length()) is valid. When inserting into str.String(), str.Length() must be updated. ; Definition at line 1407 of file TDocOutput.cxx. ◆ FixupAuthorSourceInfo(). void TDocOutput::FixupAuthorSourceInfo ; (; TString & ; authors). virtual . Special author treatment; called when TDocParser::fSourceInfo[kInfoAuthor] is set. ; Modifies the author(s) description, which is a comma separated list of tokens either in the format (i) ""FirstName LastName "" or (ii) ""FirstName LastName <link> more stuff"" The first one generates an XWho link (CERN compatible), the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:20448,update,updated,20448,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['update'],['updated']
Deployability,"cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; vector<int>_interpCode; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooRealProxy_nominalThe nominal value; RooObjCacheManager_normIntMgrThe integration cache manager; RooListProxy_normSetinterpolation parameters; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/PiecewiseInterpolation.html:32716,integrat,integration,32716,root/html532/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html532/PiecewiseInterpolation.html,1,['integrat'],['integration']
Deployability,"cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; RooRealProxy_valueHolder of the blind value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooUnblindPrecision.html:32554,integrat,integrator,32554,root/html526/RooUnblindPrecision.html,https://root.cern,https://root.cern/root/html526/RooUnblindPrecision.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"cache manager; RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealSumPdf.html:43276,configurat,configuration,43276,root/html534/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html534/RooRealSumPdf.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxybeta; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxygamma; RooRealProxymu; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGamma.html:43684,configurat,configuration,43684,root/html602/RooGamma.html,https://root.cern,https://root.cern/root/html602/RooGamma.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"cached pdf preference. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedPdf;  RooAbsCachedPdf ();  ;  RooAbsCachedPdf (const char *name, const char *title, int ipOrder=0);  Constructor. ;  ;  RooAbsCachedPdf (const RooAbsCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements internal (analytical) integration capabilities. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to offer all our actual observable for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertises internal (analytical) integration capabilities. ;  ; RooDataHist * getCacheHist (const RooArgSet &nset) const;  ; RooDataHist * getCacheHist (const RooArgSet *nset=nullptr) const;  Return pointer to RooDataHist cache histogram for given choice of observables. ;  ; RooAbsPdf * getCachePdf (const RooArgSet &nset) const;  ; RooAbsPdf * getCachePdf (const RooArgSet *nset=nullptr) const;  Return pointer to RooHistPdf cache pdf for given choice of observables. ;  ; Int_t getInterpolationOrder () const;  ; double getValV (const RooArgSet *set=nullptr) const override;  Implementation of getVal() overriding default implementation of RooAbsPdf. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setInterpolationOrder (int order);  Change the interpolation order that is used in RooHistPdf cache representation smoothing the RooDataHist sha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:2266,integrat,integration,2266,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['integrat'],['integration']
Deployability,"cal integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveDDo we have a denominator term?; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooListProxy_intListMaster integrals representing numerator and denominator; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGenProdProj.html:33228,integrat,integrator,33228,root/html530/RooGenProdProj.html,https://root.cern,https://root.cern/root/html530/RooGenProdProj.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"cal integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionMultiDim*funcFunctor; RooListProxyvarsArgument reference; Double_t*xArgument value array.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFunctorBinding.html:32762,integrat,integrator,32762,root/html530/RooFunctorBinding.html,https://root.cern,https://root.cern/root/html530/RooFunctorBinding.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"cal integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; RooRealProxy_valueHolder of the blind value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooUnblindPrecision.html:33691,integrat,integrator,33691,root/html532/RooUnblindPrecision.html,https://root.cern,https://root.cern/root/html532/RooUnblindPrecision.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"cal/numerical; normalization for its implementations, error tracing and a MC; generator interface. A minimal implementation of a PDF class derived from RooAbsPdf; should overload the evaluate() function. This functions should; return PDFs value. [Normalization/Integration]. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e. no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; commen etc). To implement analytical integrals, two functions must be implemented. First,. Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet). advertises the analytical integrals that are supported. 'in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:1457,integrat,integrated,1457,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,12,['integrat'],['integrated']
Deployability,"calNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_int_.html:37233,integrat,integrator,37233,root/html602/RooCFunction4Binding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_int_.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"calculate in parallel process; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_calcInProgress; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; vector<Bool_t>_constChanged! Flags if variable needs update on server-side; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_t_evalCarry!; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_t_forceCalc; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_inlineMode; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:36278,update,update,36278,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,2,['update'],['update']
Deployability,"calculate the error bars for each bin of a RooHist object. More...;  ; class  RooHistFunc;  A real-valued function sampled from a multidimensional histogram. More...;  ; class  RooHistPdf;  A propability density function sampled from a multidimensional histogram. More...;  ; class  RooImproperIntegrator1D;  Special numeric integrator that can handle integrals over open domains. More...;  ; class  RooInvTransform;  Lightweight function binding that returns the inverse of an input function binding. More...;  ; class  RooLinkedList;  Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. More...;  ; class  RooLinkedListElem;  Link element for the RooLinkedList class. More...;  ; class  RooLinTransBinning;  Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. More...;  ; class  RooMCIntegrator;  Implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G. More...;  ; class  RooMCStudy;  Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. More...;  ; class  RooMinimizer;  Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. More...;  ; class  RooMoment;  ; class  RooMsgService;  Singleton class that organizes messages generated in RooFit. More...;  ; class  RooMultiCategory;  Connects several RooAbsCategory objects into a single category. More...;  ; class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:12612,integrat,integration,12612,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['integrat'],['integration']
Deployability,"call = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html:2336,integrat,integrator,2336,root/html602/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html,2,['integrat'],['integrator']
Deployability,"callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can be performed with RDataFrame.; 93 ; 94### Transformations; 95Transformations are a way to manipulate the data.; 96 ; 97| **Transformation** | **Description** |; 98|------------------|--------------------|; 99| Alias() | Introduce an alias for a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4419,toggle,toggleInherit,4419,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['toggle'],['toggleInherit']
Deployability,"cally.; The axisSteering is defines as follows: ""axis[mode];axis[mode];..."" where: . axis = name of an axis or * . mode = any combination of the letters CUO0123456789 . C collapse axis into one bin (add up results). If any of the numbers 0-9 are given in addition, only these bins are added up. Here bins are counted from zero, whereas in root, bins are counted from 1. Obviously, this only works for up to 10 bins. . U discarde underflow bin . O discarde overflow bin . examples: imagine the binning has two axis, named x and y. . ""*[UO]"" exclude underflow and overflow bins for all axis. So here a TH2 is returned but all undeflow and overflow bins are empty . ""x[UOC123]"" integrate over the variable x but only using the bins 1,2,3 and not the underflow and overflow in x. Here a TH1 is returned, the axis is labelled ""y"" and the underflow and overflow (in y) are filled. However only the x-bins 1,2,3 are used to determine the content. . ""x[C];y[UO]"" integrate over the variable x, including underflow and overflow but exclude underflow and overflow in y. Here a TH1 is returned, the axis is labelled ""y"". The underflow and overflow in y are empty. . Definition at line 654 of file TUnfoldDensity.cxx. ◆ GetOutputBinName(). TString TUnfoldDensity::GetOutputBinName ; (; Int_t ; iBinX); const. overrideprotectedvirtual . Get bin name of an outpt bin. ; Parameters. [in]iBinXbin number. Return value: name of the bin. The name is constructed from the entries in the binning scheme and includes information about the bin borders etc. ; Reimplemented from TUnfold.; Definition at line 311 of file TUnfoldDensity.cxx. ◆ GetOutputBinning(). const TUnfoldBinning * TUnfoldDensity::GetOutputBinning ; (; const char * ; distributionName = nullptr); const. locate a binning node for the unfolded (truth level) quantities ; Parameters. [in]distributionName(default=nullptr) distribution to look for. if zero, return the root node. returns: pointer to a TUnfoldBinning object or zero if not found ; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:59436,integrat,integrate,59436,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['integrat'],['integrate']
Deployability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPerspectiveCamera.html:12753,update,updates,12753,root/html534/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html534/TGLPerspectiveCamera.html,1,['update'],['updates']
Deployability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLPerspectiveCamera.h 31821 2009-12-10 18:22:44Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPerspectiveCamera.html:8229,update,updates,8229,root/html528/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html528/TGLPerspectiveCamera.html,1,['update'],['updates']
Deployability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLPerspectiveCamera.h 31821 2009-12-10 18:22:44Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLPerspectiveCamera.html:8229,update,updates,8229,root/html530/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html530/TGLPerspectiveCamera.html,1,['update'],['updates']
Deployability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLPerspectiveCamera.h 31821 2009-12-10 18:22:44Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLPerspectiveCamera.html:8229,update,updates,8229,root/html532/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html532/TGLPerspectiveCamera.html,1,['update'],['updates']
Deployability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. TGLPerspectiveCamera(). Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLPerspectiveCamera.html:13538,update,updates,13538,root/html604/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html604/TGLPerspectiveCamera.html,1,['update'],['updates']
Deployability,"camera to defaults - reframe the world volume established in Setup(); in default state. Note: limits defined in Setup() are not adjusted. Bool_t Zoom(Int_t delta, Bool_t mod1, Bool_t mod2); Zoom the camera - 'adjust lens focal length, retaining camera position'.; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. Bool_t Truck(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Truck the camera - 'move camera parallel to film plane'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& box, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - used to adjust near/far clipping; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); Configure the camera state.; fov - set directly field-of-view in degrees (default = 30);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. TGLPerspectiveCamera(). Bool_t IsPerspective() const; { return kTRUE; }. Double_t GetFOV() const; { return fFOV; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPerspectiveCamera.html:13538,update,updates,13538,root/html602/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html602/TGLPerspectiveCamera.html,1,['update'],['updates']
Deployability,"can(unsigned int par, unsigned int npoint, double low, double high); 5.10.2 ScanMinimizer. 5.11 MnSimplex and SimplexMinimizer; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,; const std::vector\(<\)double\(>\)&, unsigned int); 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,; unsigned int); 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,; const MnStrategy&); 5.11.4 operator(); 5.11.5 Parameter interaction; 5.11.6 SimplexMinimizer(); 5.11.7 minimize(const FCNBase&, …). 5.12 MnStrategy; 5.12.1 MnStrategy(); 5.12.2 MnStrategy(unsigned int level); 5.12.3 setLowStrategy(), setMediumStrategy(), setHighStrategy(); 5.12.4 Other methods. 5.13 MnUserCovariance; 5.13.1 MnUserCovariance(const std::vector\(<\)double\(>\)&, unsigned int nrow); 5.13.2 MnUserCovariance(unsigned int nrow); 5.13.3 MnUserCovariance::operator()(unsigned int, unsigned int). 5.14 MnUserParameters; 5.14.1 add(…); 5.14.2 setValue(…); 5.14.3 setError(…); 5.14.4 fix(…); 5.14.5 release(…); 5.14.6 setLimits(…); 5.14.7 setUpperLimit(…); 5.14.8 setLowerLimit(…); 5.14.9 removeLimits(…); 5.14.10 value(…); 5.14.11 error(…); 5.14.12 index(…); 5.14.13 name(…). 5.15 MnUserParameterState; 5.15.1 MnUserParameterState(const std::vector\(<\)double\(>\)&,; const std::vector\(<\)double\(>\)&); 5.15.2 MnUserParameterState(const MnUserParameters&); 5.15.3 MnUserParameterState(const MnUserParameters&,; const MnUserCovariance&); 5.15.4 parameters(); 5.15.5 covariance(); 5.15.6 globalCC(); 5.15.7 MnUserParameterState::isValid() and; MnUserParameterState::hasCovariance(); 5.15.8 MnUserParameterState::fval(), MnUserParameterState::edm(),; MnUserParameterState::nfcn(). 5.16 MnPrint.h; 5.16.1 operator\(<<\)(std::ostream&, const FunctionMinimum&); 5.16.2 operator\(<<\)(std::ostream&, const MnUserParameters&); 5.16.3 operator\(<<\)(std::ostream&, const MnUserCovariance&); 5.16.4 operator\(<<\)(std::ostream&, const MnGlobalCorrelationCoeff&); 5.16.5 operator\(<<\)(std::ostream&, const MnUser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:3650,release,release,3650,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['release'],['release']
Deployability,"case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:25983,update,update,25983,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['update'],['update']
Deployability,"category.; 1890/// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; 1891/// in multiple observables, e.g.; 1892/// ```{.cpp}; 1893/// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; 1894/// ```; 1895/// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; 1896/// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; 1897/// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; 1898/// present in given dataset projection of PDF is achieved by constructing an average over all observable; 1899/// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; 1900/// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; 1901/// observables in dataset 'd' for projection through data averaging; 1902/// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; 1903/// over the full range of the invisible variables. The ProjectionRange overrides this.; 1904/// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; 1905/// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; 1906///; 1907/// <tr><th> Type of argument <th> Plotting control; 1908/// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; 1909/// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; 1910/// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; 1911/// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; 1912/// also use VLines() to add ver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:92849,integrat,integrated,92849,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integrated']
Deployability,"cates no preference; and copies the original order of 'obs' into 'orderedObs'. RooAbsReal* createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); Create a running integral over this function, i.e. given a f(x), create an object; representing 'int[x_lo,x] f(x_prime) dx_prime'. RooAbsReal* createRunningIntegral(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::none()); Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. int[x_lo,x] f(x_prime) dx_prime. The actual integration calculation is only performed when the return object is evaluated. The name; of the integral object is automatically constructed from the name of the input function, the variables; it integrates and the range integrates over. The default strategy to calculate the running integrals is. - If the integrand (this object) supports analytical integration, construct an integral object; that calculate the running integrals value by calculating the analytical integral each; time the running integral object is evaluated. - If the integrand (this object) requires numeric integration to construct the running integral; create an object of class RooNumRunningInt which first samples the entire function and integrates; the sampled function numerically. This method has superior performance as there is no need to; perform a full (numeric) integration for each evaluation of the running integral object, but; only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); argument",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:65741,integrat,integrates,65741,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,2,['integrat'],['integrates']
Deployability,"cation is binned later.; 52 ; 53If there are two overlapping bins, the first one in the list will be incremented; 54by `Fill()`.; 55 ; 56The histogram may automatically extends its limits if a bin outside the; 57histogram limits is added. This is done when the default constructor (with no; 58arguments) is used. It generates a histogram with no limits along the X and Y; 59axis. Adding bins to it will extend it up to a proper size.; 60 ; 61`TH2Poly` implements a partitioning algorithm to speed up bins' filling; 62(see the ""Partitioning Algorithm"" section for details).; 63The partitioning algorithm divides the histogram into regions called cells.; 64The bins that each cell intersects are recorded in an array of `TList`s.; 65When a coordinate in the histogram is to be filled; the method (quickly) finds; 66which cell the coordinate belongs. It then only loops over the bins; 67intersecting that cell to find the bin the input coordinate corresponds to.; 68The partitioning of the histogram is updated continuously as each bin is added.; 69The default number of cells on each axis is 25. This number could be set to; 70another value in the constructor or adjusted later by calling the; 71`ChangePartition(Int_t, Int_t)` method. The partitioning algorithm is; 72considerably faster than the brute force algorithm (i.e. checking if each bin; 73contains the input coordinates), especially if the histogram is to be filled; 74many times.; 75 ; 76The following very simple macro shows how to build and fill a `TH2Poly`:; 77~~~ {.cpp}; 78{; 79 auto h2p = new TH2Poly();; 80 ; 81 Double_t x1[] = {0, 5, 6};; 82 Double_t y1[] = {0, 0, 5};; 83 Double_t x2[] = {0, -1, -1, 0};; 84 Double_t y2[] = {0, 0, -1, 3};; 85 Double_t x3[] = {4, 3, 0, 1, 2.4};; 86 Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};; 87 ; 88 h2p->AddBin(3, x1, y1);; 89 h2p->AddBin(4, x2, y2);; 90 h2p->AddBin(5, x3, y3);; 91 ; 92 h2p->Fill(0.1, 0.01, 3);; 93 h2p->Fill(-0.5, -0.5, 7);; 94 h2p->Fill(-0.7, -0.5, 1);; 95 h2p->Fill(1, 3, 1.5);; 9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:3046,update,updated,3046,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,2,"['continuous', 'update']","['continuously', 'updated']"
Deployability,"cations . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . . Getting Started. . Reference Guide. . Forum. . Gallery.  ; ROOT is ...; A modular scientific software toolkit. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R.Start from examples or try it in your browser!;  . Download ROOT; or Read More ... . . . Previous. Pause. Next. Under the Spotlight. 2019-02-02 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH University of Science and Technology - Poland) wanted to evaluate a set of Big Data tools for the analysis of the data from the TOTEM experiment which will enable interactive or semi-interactive work with large amounts of data. . 2018-01-17 ; ROOT Users' Workshop 2018 ; The ROOT team would like to invite you to the 11th ROOT Users' Workshop. . 2017-08-03 ; The ROOT Docker container (alpha version) ; Do you like Docker? Would you like to use ROOT? We provide an alpha version of the ROOT Docker container!; . 2016-09-05 ; Get the most out of the ROOT tutorials! ; All ROOT tutorials are now available as ROOTBooks which can be statically visualized via NBViewer or inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/index.html:2119,integrat,integrated,2119,d/index.html,https://root.cern,https://root.cern/d/index.html,1,['integrat'],['integrated']
Deployability,"ccuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html:5473,integrat,integration,5473,root/html528/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html,6,['integrat'],['integration']
Deployability,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3625,integrat,integration,3625,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,6,['integrat'],"['integration', 'integrator']"
Deployability,"ce itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);; 266 ; 267 ; 268 ; 269 ; 270 ; 271 template <typename ItValue, typename ItFunction>; 272 void applyFunctions (ItValue itValue, ItValue itValueEnd, ItFunction itFunction);; 273 ; 274 ; 275 template <typename ItValue, typename ItFunction, typename ItInverseFunction, typename ItGradient>; 276 void applyFunctions (ItValue itValue, ItValue itValueEnd, ItFunction itFunction, ItInverseFunction itInverseFunction, ItGradient itGradient);; 277 ; 278 ; 279 ; 280 template <typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient>; 281 void update (ItSource itSource, ItSource itSourceEnd,; 282 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 283 ItTargetGradient itTargetGradientBegin,; 284 ItGradient itGradient);; 285 ; 286 ; 287 ; 288 template <EnumRegularization Regularization, typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient, typename ItWeight>; 289 void update (ItSource itSource, ItSource itSourceEnd,; 290 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 291 ItTargetGradient itTargetGradientBegin,; 292 ItGradient itGradient,; 293 ItWeight itWeight, double weightDecay);; 294 ; 295 ; 296 ; 297 // ----- signature of a minimizer -------------; 298 // class Minimizer; 299 // {; 300 // public:; 301 ; 302 // template <typename Function, typename Variables, typename PassThrough>; 303 // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); 304 // {; 305 // // auto itVars = begin (vars);; 306 // // auto itVarsEnd = end (vars);; 307 ; 308 // std::vector<double> myweights;; 309 // std::vector<double> gradients;; 310 ; 311 // double value = fnc (passThrough, myweights);; 312 // value = fnc (passThrough, myweights, gradients);; 313 // return value;; 314 // }; 315 // };; 316 ; 317 ; 318 ; 319 ///< list all the minimizer types; 320 enum MinimizerType; 321 {; 322 fSteepest ///< SGD; 323 };; 324 ; 325 ; 326 ; 327 ; 328 ; 329 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:7529,update,update,7529,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['update'],['update']
Deployability,"ce their address cannot be taken. For that purpose, there is the AddressOf() function. As an example:; from ROOT import TFile, TTree; from ROOT import gROOT, AddressOf. gROOT.ProcessLine(; ""struct MyStruct { Int_t fMyInt1; Int_t fMyInt2; Int_t fMyInt3; Char_t fMyCode[4]; };"" );. from ROOT import MyStruct; mystruct = MyStruct(); f = TFile('mytree.root','RECREATE'); tree = TTree('T','Just A Tree'); tree.Branch('myints',mystruct,'MyInt1/I:MyInt2:MyInt3'); tree.Branch('mycode',AddressOf(mystruct,'fMyCode'),'MyCode/C'); for i in range(0,10):; mystruct.fMyInt1 = i; mystruct.fMyInt2 = i*i; mystruct.fMyInt3 = i*i*i; mystruct.fMyCode = ""%03d"" % i # note string assignment. tree.Fill(). f.Write(); f.Close(); The C++ class is defined through the gROOT.ProcessLine() call, and note how the AddressOf() function is used for data members of built-in type. Most of the above is for ROOT version 5.02 and later only. For older releases, and without further support, here is an example as to how you can get hold of a pointer-to-pointer to a ROOT object:; h = TH1F(); addressofobject = array('i',[h.IsA().DynamicCast(h.IsA(),h)]); 19.1.10 Using Your Own Classes; A user’s own classes can be accessed after loading, either directly or indirectly, the library that contains the dictionary. One easy way of obtaining such a library, is by using ACLiC:; $ cat MyClass.C; class MyClass {; public:. MyClass(int value = 0) {; m_value = value;; }. void SetValue(int value) {; m_value = value;; }. int GetValue() {; return m_value;; }. private:; int m_value;; };. $ echo .L MyClass.C+ | root.exe -b; [...]; Info in <TUnixSystem::ACLiC>: creating shared library [..]/./MyClass_C.so; $; Then you can use it, for example, like so:; from ROOT import gSystem. # load library with MyClass dictionary; gSystem.Load('MyClass_C'). # get MyClass from ROOT; from ROOT import MyClass; # use MyClass; m = MyClass(42); print(m.GetValue()); You can also load a macro directly, but if you do not use ACLiC, you will be restricted to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1072356,release,releases,1072356,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['release'],['releases']
Deployability,"ce);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::map< std::string, std::vector< BarlowCache > > _barlowCache;  ; RooAbsData * _data = nullptr;  ; RooRealProxy _nll;  Input -log(L) function. ;  ; std::map< std::string, bool > _paramFixed;  Parameter constant status at last time of use. ;  ; RooAbsPdf * _pdf = nullptr;  ; std::set< std::string > _statUncertParams;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:55598,integrat,integration,55598,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['integrat'],['integration']
Deployability,"ce.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  py",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__pyroot.html:1395,update,updated,1395,doc/master/group__tutorial__pyroot.html,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html,1,['update'],['updated']
Deployability,"ce::CodeRepo::ClassRelInfo>_c2fmapList of contained classes; Bool_t_compiledOK! Flag indicating that classes compiled OK; map<TString,RooWorkspace::CodeRepo::ExtraHeader>_ehmapList of extra header files; map<TString,RooWorkspace::CodeRepo::ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& ); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. CodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); {}. virtual ~CodeRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace__CodeRepo.html:7837,update,update,7837,root/html602/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html602/RooWorkspace__CodeRepo.html,2,['update'],['update']
Deployability,"ce; Inherited Members; Includes; Libraries. Function documentation; RooAbsCachedPdf(const char* name, const char* title, Int_t ipOrder = 0); Constructor. RooAbsCachedPdf(const RooAbsCachedPdf& other, const char* name = 0); Copy constructor. ~RooAbsCachedPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset = 0) const; Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset = 0) const; Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. RooAbsCachedPdf(); Default constructor. Bool_t selfNormalized() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:47917,configurat,configuration,47917,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,2,['configurat'],['configuration']
Deployability,"ce; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, SummationRule rule,				 Int_t maxSteps, Double_t eps); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax,				const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:8122,integrat,integrator,8122,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,1,['integrat'],['integrator']
Deployability,"ce; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Mon Dec 7 13:48:32 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:7174,integrat,integrator,7174,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,4,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"ce; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Mon Jul 4 15:23:34 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumGenFactory.html:7229,integrat,integrator,7229,root/html530/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html530/RooNumGenFactory.html,4,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"ce; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Thu Nov 3 20:08:51 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumGenFactory.html:7229,integrat,integrator,7229,root/html532/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html532/RooNumGenFactory.html,4,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"ceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TVirtualGeoPainterAbstract class for geometry painters.Definition TVirtualGeoPainter.h:32; TVirtualGeoPainter::SamplePointsvirtual TGeoNode * SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil, const char *g3path)=0; TVirtualGeoPainter::SetTopVisiblevirtual void SetTopVisible(Bool_t vis=kTRUE)=0; TVirtualGeoPainter::GetVisLevelvirtual Int_t GetVisLevel() const =0; TVirtualGeoPainter::Weightvirtual Double_t Weight(Double_t precision, Option_t *option=""v"")=0; TVirtualGeoPainter::CheckGeometryFullvirtual void CheckGeometryFull(Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr)=0; TVirtualGeoPainter::DrawPathvirtual void DrawPath(const char *path, Option_t *option="""")=0; TVirtualGeoPainter::ModifiedPadvirtual void ModifiedPad(Bool_t update=kFALSE) const =0; TVirtualGeoPainter::SetCheckedNodevirtual void SetCheckedNode(TGeoNode *node)=0; TVirtualGeoPainter::GetViewAnglesvirtual void GetViewAngles(Double_t &, Double_t &, Double_t &)Definition TVirtualGeoPainter.h:94; TVirtualGeoPainter::AddTrackvirtual TVirtualGeoTrack * AddTrack(Int_t id, Int_t pdgcode, TObject *particle)=0; TVirtualGeoPainter::SetExplodedViewvirtual void SetExplodedView(Int_t iopt=0)=0; TVirtualGeoPainter::IsRaytracingvirtual Bool_t IsRaytracing() const =0; TVirtualGeoPainter::DrawCurrentPointvirtual void DrawCurrentPoint(Int_t color)=0; TVirtualGeoPainter::SetClippingShapevirtual void SetClippingShape(TGeoShape *shape)=0; TVirtualGeoPainter::TestOverlapsvirtual void TestOverlaps(const char *path)=0; TVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:245518,update,update,245518,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['update'],['update']
Deployability,"ceSteps); 241 , m_batchSize (_batchSize); 242 , m_testRepetitions (_testRepetitions); 243 , m_factorWeightDecay (_factorWeightDecay); 244 , count_E (0); 245 , count_dE (0); 246 , count_mb_E (0); 247 , count_mb_dE (0); 248 , m_regularization (eRegularization); 249 , fLearningRate (_learningRate); 250 , fMomentum (_momentum); 251 , fRepetitions (_repetitions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:10931,update,update,10931,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['update'],['update']
Deployability,"ceed as indicated above for the first input file and omit the second argument for subsequent calls T.ReadFile(""file1.dat"",""branch descriptor"");; T.ReadFile(""file2.dat"");. Definition at line 7564 of file TTree.cxx. ◆ ReadStream(). Long64_t TTree::ReadStream ; (; std::istream & ; inputStream, . const char * ; branchDescriptor = """", . char ; delimiter = ' ' . ). virtual . Create or simply read branches from an input stream. ; See alsoreference information for TTree::ReadFile ; Reimplemented in TNtuple, and TNtupleD.; Definition at line 7615 of file TTree.cxx. ◆ RecursiveRemove(). void TTree::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ; Reimplemented from TObject.; Definition at line 7881 of file TTree.cxx. ◆ Refresh(). void TTree::Refresh ; (; ). virtual . Refresh contents of this tree and its branches from the current status on disk. ; One can call this function in case the tree file is being updated by another process. ; Reimplemented in TTreeSQL.; Definition at line 7916 of file TTree.cxx. ◆ RegisterExternalFriend(). void TTree::RegisterExternalFriend ; (; TFriendElement * ; fe). virtual . Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ; Definition at line 7957 of file TTree.cxx. ◆ RemoveExternalFriend(). void TTree::RemoveExternalFriend ; (; TFriendElement * ; fe). virtual . Removes external friend. ; Definition at line 7968 of file TTree.cxx. ◆ RemoveFriend(). void TTree::RemoveFriend ; (; TTree * ; oldFriend). virtual . Remove a friend from the list of friends. ; Reimplemented in TChain.; Definition at line 7977 of file TTree.cxx. ◆ Reset(). void TTree::Reset ; (; Option_t * ; option = """"). virtual . Reset baskets, buffers and entries count in all branches and leaves. ; Reimplemented in TChain.; Definition at line 8003 of file TTree.cxx. ◆ ResetAfte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:195792,update,updated,195792,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['update'],['updated']
Deployability,"cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:16244,integrat,integration,16244,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['integrat'],['integration']
Deployability,"cess; static TObjArray*fgBtidlistlist of back trace ids; static TCanvas*fgC1pointer to canvas showing allocs/deallocs vs time; static TCanvas*fgC2pointer to canvas with leaks in decreasing order; static TCanvas*fgC3pointer to canvas showing the main leaks; static Long64_tfgEntryFirstfirst entry to process; static Long64_tfgEntryNnumber of entries to process; static TH1D*fgHhistogram with allocations - frees; static TH1D*fgHallochistogram with allocations; static TH1I*fgHdiffhistogram with diff of entry number between alloc/free; static TH1I*fgHentryhistogram with entry numbers in the TObjArray; static TH1D*fgHfreehistogram with frees; static TH1I*fgHleakshistogram with leaks; static TTree*fgTTMemStat Tree; static TGToolTip*fgTip1pointer to tool tip for canvas 1; static TGToolTip*fgTip2pointer to tool tip for canvas 2; static Double_t*fgV1pointer to V1 array of TTree::Draw (pos); static Double_t*fgV2pointer to V2 array of TTree::Draw (nbytes); static Double_t*fgV3pointer to V3 array of TTree::Draw (time); static Double_t*fgV4pointer to V4 array of TTree::Draw (btid). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatShow(); {;}. virtual ~TMemStatShow(); {;}. void EventInfo1(Int_t event, Int_t px, Int_t py, TObject* selected). void EventInfo2(Int_t event, Int_t px, Int_t py, TObject* selected). void FillBTString(Int_t bin, Int_t mode, TString& btstring). void SetAddressRange(Long64_t nbytes = 0, Long64_t first = 0). void SetEntryRange(Long64_t nentries = 0, Long64_t first = 0). void Show(Double_t update = 0.1, Int_t nbigleaks = 20, const char* fname = ""*""). » Author: Rene Brun 21/09/2010 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/treeviewer:$Id: TMemStatShow.h 37300 2010-12-05 17:25:20Z brun $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMemStatShow.html:7249,update,update,7249,root/html530/TMemStatShow.html,https://root.cern,https://root.cern/root/html530/TMemStatShow.html,1,['update'],['update']
Deployability,"cess; static TObjArray*fgBtidlistlist of back trace ids; static TCanvas*fgC1pointer to canvas showing allocs/deallocs vs time; static TCanvas*fgC2pointer to canvas with leaks in decreasing order; static TCanvas*fgC3pointer to canvas showing the main leaks; static Long64_tfgEntryFirstfirst entry to process; static Long64_tfgEntryNnumber of entries to process; static TH1D*fgHhistogram with allocations - frees; static TH1D*fgHallochistogram with allocations; static TH1I*fgHdiffhistogram with diff of entry number between alloc/free; static TH1I*fgHentryhistogram with entry numbers in the TObjArray; static TH1D*fgHfreehistogram with frees; static TH1I*fgHleakshistogram with leaks; static TTree*fgTTMemStat Tree; static TGToolTip*fgTip1pointer to tool tip for canvas 1; static TGToolTip*fgTip2pointer to tool tip for canvas 2; static Double_t*fgV1pointer to V1 array of TTree::Draw (pos); static Double_t*fgV2pointer to V2 array of TTree::Draw (nbytes); static Double_t*fgV3pointer to V3 array of TTree::Draw (time); static Double_t*fgV4pointer to V4 array of TTree::Draw (btid). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatShow(); {;}. virtual ~TMemStatShow(); {;}. void EventInfo1(Int_t event, Int_t px, Int_t py, TObject* selected). void EventInfo2(Int_t event, Int_t px, Int_t py, TObject* selected). void FillBTString(Int_t bin, Int_t mode, TString& btstring). void SetAddressRange(Long64_t nbytes = 0, Long64_t first = 0). void SetEntryRange(Long64_t nentries = 0, Long64_t first = 0). void Show(Double_t update = 0.1, Int_t nbigleaks = 20, const char* fname = ""*""). » Author: Rene Brun 21/09/2010 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/treeviewer:$Id: TMemStatShow.h 37300 2010-12-05 17:25:20Z brun $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMemStatShow.html:7249,update,update,7249,root/html532/TMemStatShow.html,https://root.cern,https://root.cern/root/html532/TMemStatShow.html,1,['update'],['update']
Deployability,"ch a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:1836,update,updates,1836,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['update'],['updates']
Deployability,"ch can be selection with 'stype' (see RooAbsPdf::plotOn() for details). The default projection behaviour can be overriden by supplying an optional set of dependents; to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface; to modify the default projection behavour. RooPlot* plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0) const; OBSOLETE -- RETAINED FOR BACKWARD COMPATIBILITY. Use the plotOn(frame,Slice(...)) instead. RooPlot* plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))). Plot asymmetry of ourselves, defined as. asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ). on frame. If frame contains a histogram, all dimensions of the plotted; asymmetry function that occur in the previously plotted dataset are projected via partial integration.; Otherwise no projections are performed,. The asymmetry function can be multiplied with an optional scale factor. The default projection; behaviour can be overriden by supplying an optional set of dependents to project. Double_t getPropagatedError(const RooFitResult& fr); Calculate error on self by propagated errors on parameters with correlations as given by fit result; The linearly propagated error is calculated as follows; T; error(x) = F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) this function and 'da' taken from the fit result; Corr(a,a') = the correlation matrix from the fit result. RooPlot* plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Plot function or p.d.f. on frame with support for visualization of the uncertainty encoded in the given fit result fr.; If",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:51790,integrat,integration,51790,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,5,['integrat'],['integration']
Deployability,"ch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4Binding_double_double_double_double_bool_.html:33214,integrat,integrator,33214,root/html530/RooCFunction4Binding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4Binding_double_double_double_double_bool_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ch writes/reads its buffers.Definition TBranch.cxx:2863; TBranch::GetEntryExportvirtual Int_t GetEntryExport(Long64_t entry, Int_t getall, TClonesArray *list, Int_t n)Read all leaves of an entry and export buffers to real objects in a TClonesArray list.Definition TBranch.cxx:1762; TBranch::SetAutoDeletevirtual void SetAutoDelete(bool autodel=true)Set the automatic delete bit.Definition TBranch.cxx:2716; TBranch::fZipBytesLong64_t fZipBytesTotal number of bytes in all leaves after compression.Definition TBranch.h:137; TBranch::fIOFeaturesTIOFeatures fIOFeaturesIO features for newly-created baskets.Definition TBranch.h:123; TBranch::Browsevoid Browse(TBrowser *b) overrideBrowser interface.Definition TBranch.cxx:699; TBranch::SetCompressionAlgorithmvoid SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)Set compression algorithm.Definition TBranch.cxx:2763; TBranch::SetEntryOffsetLenvirtual void SetEntryOffsetLen(Int_t len, bool updateSubBranches=false)Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and...Definition TBranch.cxx:2821; TBranch::FindLeafvirtual TLeaf * FindLeaf(const char *name)Find the leaf corresponding to the name 'searchname'.Definition TBranch.cxx:1081; TBranch::fCacheInfoCacheInfo_t fCacheInfo! Hold info about which basket are in the cache and if they have been retrieved from the cache.Definition TBranch.h:158; TBranch::GetListOfBasketsTObjArray * GetListOfBaskets()Definition TBranch.h:245; TBranch::SetBufferAddressvirtual void SetBufferAddress(TBuffer *entryBuffer)Set address of this branch directly from a TBuffer to avoid streaming.Definition TBranch.cxx:2745; TBranch::GetEntriesLong64_t GetEntries() constDefinition TBranch.h:251; TBranch::fNleavesInt_t fNleaves! Number of leavesDefinition TBranch.h:128; TBranch::fSplitLevelInt_t fSplitLevelBranch split level.Definition TBranch.h:127; TBranch::WriteBasketImplInt_t WriteBasketImpl(TBasket *basket, Int_t where, R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:134569,update,updateSubBranches,134569,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['update'],['updateSubBranches']
Deployability,ch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDecay.html:38831,integrat,integrated,38831,root/html526/RooDecay.html,https://root.cern,https://root.cern/root/html526/RooDecay.html,1,['integrat'],['integrated']
Deployability,ch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:39213,integrat,integrated,39213,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,1,['integrat'],['integrated']
Deployability,ch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDecay.html:39682,integrat,integrated,39682,root/html530/RooDecay.html,https://root.cern,https://root.cern/root/html530/RooDecay.html,1,['integrat'],['integrated']
Deployability,ch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsR,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:40085,integrat,integrated,40085,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['integrat'],['integrated']
Deployability,"char **argv);  Insert text into text token, or break token into two text tokens. ;  ; TGHtmlElement * TokenByIndex (int N, int flag);  Return a pointer to the Nth TGHtmlElement in the list. ;  ; int Tokenize ();  Process as much of the input HTML as possible. ;  ; void TokenizerAppend (const char *text);  Append text to the tokenizer engine. ;  ; int TokenNumber (TGHtmlElement *p);  Return the token number for the given TGHtmlElement. ;  ; const char * TypeToName (int type);  Convert a type into a symbolic name. ;  ; void UnlinkAndFreeBlock (TGHtmlBlock *pBlock);  Destroy the given Block after first unlinking it from the element list. ;  ; void UnmapControls ();  Unmap any input control that is currently mapped. ;  ; void UpdateBackgroundStart () override;  Start background update. ;  ; void UpdateInsert ();  Recompute the position of the insertion cursor based on the position in fIns. ;  ; void UpdateSelection (int forceUpdate);  Given the selection end-points in fSelBegin and fSelEnd, recompute pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay() to update the display. ;  ; void UpdateSelectionDisplay ();  The fPSelStartBlock and fPSelEndBlock values have been changed. ;  ;  Protected Member Functions inherited from TGView; void DoRedraw () override;  redraw ;  ; virtual void UpdateRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  update a part of view ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:37718,update,update,37718,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['update'],['update']
Deployability,"char *Background2RectangularRidges(float **spectrum,; int sizex,; int sizey,; int number_of_iterations_x,; int number_of_iterations_y,; int direction,; int filter_order,; int filter_type);; This function calculates background spectrum from source spectrum. The result is placed to the array pointed by spectrum pointer.; Function parameters:. spectrum: pointer to the array of the source spectrum; sizex: x length of spectrum; sizey: y length of spectrum; number_of_iterations_x_maximal: x width of clipping window; number_of_iterations_y_maximal: y width of clipping window; direction: direction of change of clipping window. Possible values:. BACK2_INCREASING_WINDOW; BACK2_DECREASING_WINDOW. filter_order: order of clipping filter. Possible values:. BACK2_ORDER2 BACK2_ORDER4; BACK2_ORDER6 BACK2_ORDER8. filter_type: determines the algorithm of the filtering. Possible values:. BACK2_SUCCESSIVE_FILTERING; BACK2_ONE_STEP_FILTERING. In what follows we describe a function to estimate a continuous 2-dimensional background together with rectangular and skew ridges. In Figure 1.13 we present a spectrum of this type. Function to estimate continuous 2-dimensional background together with rectangular and skew ridges. The goal is to remove rectangular as well as skew ridges from the spectrum and to leave only 2-dimensional coincidence peaks. After applying background elimination function and subtraction we get the two-dimensional peaks presented in Figure 1.14. Two dimensional peaks obtained after applying background elimination function and subtraction. In Figures 1.15 and 1.16 we present an experimental spectrum with skew ridges and estimated background, respectively. Experimental spectrum with skew ridges. Experimental spectrum with estimated background. The function for the estimation of background together with skew ridges has the form of; char *Background2SkewRidges(float **spectrum,; int sizex,; int sizey,; int number_of_iterations_x,; int number_of_iterations_y,; int direction,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:8646,continuous,continuous,8646,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['continuous'],['continuous']
Deployability,"char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::unique_ptr< RooNumConvolution > _conv;  ! Actual convolution calculation ;  ; bool _init = false;  ! do not persist ;  ; RooRealProxy _origModel;  Original resolution model. ;  ; RooRealProxy _origPdf;  Original input PDF. ;  ; RooRealProxy _origVar;  Original convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:70940,configurat,configuration,70940,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['configurat'],['configuration']
Deployability,"char *ifil, Int_t dl, Int_t il,; 1372 ClassInfo_t *givenInfo,; 1373 Bool_t silent); 1374{; 1375 if (!gROOT); 1376 ::Fatal(""TClass::TClass"", ""ROOT system not initialized"");; 1377 if (!name || !name[0]) {; 1378 ::Error(""TClass::Init"", ""The name parameter is invalid (null or empty)"");; 1379 MakeZombie();; 1380 return;; 1381 }; 1382 // Always strip the default STL template arguments (from any template argument or the class name); 1383 if (TClassEdit::IsArtificial(name)); 1384 fName = name; // We can assume that the artificial class name is already normalized.; 1385 else; 1386 fName = TClassEdit::ShortType(name, TClassEdit::kDropStlDefault).c_str();; 1387 ; 1388 fClassVersion = cversion;; 1389 fDeclFileName = dfil ? dfil : """";; 1390 fImplFileName = ifil ? ifil : """";; 1391 fDeclFileLine = dl;; 1392 fImplFileLine = il;; 1393 fTypeInfo = typeinfo;; 1394 fIsA = isa;; 1395 if ( fIsA ) fIsA->SetClass(this);; 1396 // See also TCling::GenerateTClass() which will update fClassVersion after creation!; 1397 fStreamerInfo = new TObjArray(fClassVersion+2+10,-1); // +10 to read new data by old; 1398 fProperty = -1;; 1399 fClassProperty = 0;; 1400 const bool ispair = TClassEdit::IsStdPair(fName);; 1401 if (ispair); 1402 SetBit(kIsForeign);; 1403 ; 1404 ResetInstanceCount();; 1405 ; 1406 TClass *oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(fName.Data());; 1407 ; 1408 InsertTClassInRegistryRAII insertRAII(fState,fName,fNoInfoOrEmuOrFwdDeclNameRegistry);; 1409 ; 1410 if (oldcl && oldcl->TestBit(kLoading)) {; 1411 // Do not recreate a class while it is already being created!; 1412 ; 1413 // We can no longer reproduce this case, to check whether we are, we use; 1414 // this code:; 1415 // Fatal(""Init"",""A bad replacement for %s was requested\n"",name);; 1416 return;; 1417 }; 1418 ; 1419 TClass **persistentRef = nullptr;; 1420 if (oldcl) {; 1421 ; 1422 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1423 ; 1424 // The code from here is also in ForceReload.; 1425 TClass::Remo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:54163,update,update,54163,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['update'],['update']
Deployability,"char *ifil, Int_t dl, Int_t il,; 1439 ClassInfo_t *givenInfo,; 1440 Bool_t silent); 1441{; 1442 if (!gROOT); 1443 ::Fatal(""TClass::TClass"", ""ROOT system not initialized"");; 1444 if (!name || !name[0]) {; 1445 ::Error(""TClass::Init"", ""The name parameter is invalid (null or empty)"");; 1446 MakeZombie();; 1447 return;; 1448 }; 1449 // Always strip the default STL template arguments (from any template argument or the class name); 1450 if (TClassEdit::IsArtificial(name)); 1451 fName = name; // We can assume that the artificial class name is already normalized.; 1452 else; 1453 fName = TClassEdit::ShortType(name, TClassEdit::kDropStlDefault).c_str();; 1454 ; 1455 fClassVersion = cversion;; 1456 fDeclFileName = dfil ? dfil : """";; 1457 fImplFileName = ifil ? ifil : """";; 1458 fDeclFileLine = dl;; 1459 fImplFileLine = il;; 1460 fTypeInfo = typeinfo;; 1461 fIsA = isa;; 1462 if ( fIsA ) fIsA->SetClass(this);; 1463 // See also TCling::GenerateTClass() which will update fClassVersion after creation!; 1464 fStreamerInfo = new TObjArray(fClassVersion+2+10,-1); // +10 to read new data by old; 1465 fProperty = -1;; 1466 fClassProperty = 0;; 1467 const bool ispair = TClassEdit::IsStdPair(fName);; 1468 if (ispair); 1469 SetBit(kIsForeign);; 1470 ; 1471 ResetInstanceCount();; 1472 ; 1473 TClass *oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(fName.Data());; 1474 ; 1475 InsertTClassInRegistryRAII insertRAII(fState,fName,fNoInfoOrEmuOrFwdDeclNameRegistry);; 1476 ; 1477 if (oldcl && oldcl->TestBit(kLoading)) {; 1478 // Do not recreate a class while it is already being created!; 1479 ; 1480 // We can no longer reproduce this case, to check whether we are, we use; 1481 // this code:; 1482 // Fatal(""Init"",""A bad replacement for %s was requested\n"",name);; 1483 return;; 1484 }; 1485 ; 1486 TClass **persistentRef = nullptr;; 1487 if (oldcl) {; 1488 ; 1489 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1490 ; 1491 // The code from here is also in ForceReload.; 1492 TClass::Remo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:56914,update,update,56914,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['update'],['update']
Deployability,"char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return the expected number of events associated with the extendable input PDF in the product. ;  ; ExtendMode extendMode () const override;  If this product contains exactly one extendable p.d.f return the extension abilities of that p.d.f, otherwise return CanNotBeExtended. ;  ; RooArgSet * findPdfNSet (RooAbsPdf const &pdf) const;  Look up user specified normalization set for given input PDF component. ;  ; void fixRefRange (const char *rangeName);  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; void generateEvent (Int_t code) override;  Generate a single event with configuration specified by 'code' Defer internal generation to components as encoded in the _genCode registry for given generator code. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; RooArgSet * getConnectedParameters (const RooArgSet &observables) const;  Return all parameter constraint p.d.f.s on parameters listed in constrainedParams. ;  ; RooArgSet * getConstraints (const RooArgSet &observables, RooArgSet const &constrainedParams, RooArgSet &pdfParams) const override;  Return all parameter constraint p.d.f.s on parameters listed in constrainedParams. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:4689,integrat,integration,4689,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['integrat'],['integration']
Deployability,"char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 130 of file TObject.cxx. ◆ Execute() [2/3]. void TRInterface::Execute ; (; const TString & ; code). Method to eval R code. ; Parameters. codeR code . Definition at line 99 of file TRInterface.cxx. ◆ Execute() [3/3]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28. Reimplemented from TObject.; Definition at line 131 of file TObject.cxx. ◆ Install(). Bool_t TRInterface::Install ; (; TString ; pkg, . TString ; repos = ""http://cran.r-project.org"" . ). Method to install an R's package. ; Parameters. pkgR's pkg name ; reposurl for R's package repository . Returnstrue or false if the package was installed or not ; Definition at line 207 of file TRInterface.cxx. ◆ Instance(). TRInterface & TRInterface::Instance ; (; ). static . static method to get an TRInterface instance reference ; ReturnsTRInterface instance reference ; Definition at line 187 of file TRInterface.cxx. ◆ InstancePtr(). TRInterface * TRInterface::InstancePtr ; (; ). static . static method to get an TRInterface instance pointer ; ReturnsTRInterface instance pointer ; Definition at line 175 of file TRInterface.cxx. ◆ Interactive(). void TRInterface::Interactive ; (; ). Method to get a R prompt to work interactively with tab completion support. ; Definition at line 161 of file TRInterface.cxx. ◆ IsA(). virtual TClass * ROOT::R::TRInterface::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 320 of file TRInterface.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:22185,install,install,22185,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['install'],['install']
Deployability,"char * ; uri = ""*"", . const char * ; opt = """" . ). virtual . Prints formatted information about the dataset 'uri'. ; The type and format of output is driven by 'opt':. opt = ""server:srv1[,srv2[,srv3[,...]]]"" Print info about the subsets of 'uri' on servers srv1, srv2, ...; opt = ""servers[:exclude:srv1[,srv2[,srv3[,...]]]]"" Print info about the subsets of 'uri' on all servers, except the ones in the exclude list srv1, srv2, ...; opt = <any> Print info about all datasets matching 'uri'. If 'opt' contains 'full:' the list of files in the datasets are also printed. In case 3. this is enabled only if 'uri' matches a single dataset.; In case 3, if 'opt' contains 'full:' the list of files in the datasets are also printed. 'forcescan:' the dataset are open to get the information; otherwise the pre-processed information is used. 'noheader:' the labelling header is not printed; usefull when to chain several printouts 'noupdate:' do not update the cache (which may be slow on very remote servers) 'refresh:' refresh the information (requires appropriate credentials; typically it can be done only for owned datasets) ; Definition at line 1098 of file TDataSetManager.cxx. ◆ ShowQuota(). void TDataSetManager::ShowQuota ; (; const char * ; opt). virtual . Display quota information. ; Definition at line 585 of file TDataSetManager.cxx. ◆ Streamer(). void TDataSetManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TDataSetManagerFile. ◆ StreamerNVirtual(). void TDataSetManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 158 of file TDataSetManager.h. ◆ ToBytes(). Long64_t TDataSetManager::ToBytes ; (; const char * ; size = 0). staticprotected . Static utility function to gt the number of bytes from a string representation in the form ""`<digit>``<sfx>`"" with <sfx> = {"""", ""k"", ""M"", ""G"", ""T"", ""P""} (case insensitive). ; Returns -1 if the format is wrong",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:37708,update,update,37708,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['update'],['update']
Deployability,"char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; For example to set HepMC::GenVertex::m_event to not owned the object it is pointing to: HepMC::GenVertex m_event attributes=NotOwner; Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers among: Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. . Definition at line 1890 of file TClass.cxx. ◆ AdoptMemberStreamer(). void TClass::AdoptMemberStreamer ; (; const char * ; name, . TMemberStreamer * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6703 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6685 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Deta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:55850,update,updated,55850,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['update'],['updated']
Deployability,"char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; For example to set HepMC::GenVertex::m_event to not owned the object it is pointing to: HepMC::GenVertex m_event attributes=NotOwner; Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers among: Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. . Definition at line 1957 of file TClass.cxx. ◆ AdoptMemberStreamer(). void TClass::AdoptMemberStreamer ; (; const char * ; name, . TMemberStreamer * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6770 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6752 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Deta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:55851,update,updated,55851,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['update'],['updated']
Deployability,"char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. RooSimPdfBuilder(const RooSimPdfBuilder&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooArgSet_compSplitCatSetList of owned composite splitting categories; list<RooSuperCategory*>_fitCatListThe supercategories that we built; RooArgSet_protoPdfSetSet of prototype PDFS; TList_retiredCustomizerListRetired customizer from previous builds (own their PDF branch nodes); list<RooSimultaneous*>_simPdfListThe simpdfs that we built; RooArgSet_splitNodeListList of owned split nodes; RooArgSet_splitNodeListOwnedList of all split nodes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimPdfBuilder(const RooArgSet& protoPdfSet). RooArgSet* createProtoBuildConfig(); Make RooArgSet of configuration objects. void addSpecializations(const RooArgSet& specSet). RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooArgSet& dependents,					 const RooArgSet* auxSplitCats, Bool_t verbose); Initialize needed components. ~RooSimPdfBuilder(). RooSimPdfBuilder(const RooArgSet& pdfProtoList). RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooArgSet& dependents, 				 const RooArgSet* auxSplitCats=0, Bool_t verbose=kFALSE). return buildPdf(buildConfig,*dataSet->get(),&auxSplitCats,verbose). RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooArgSet& dependents,				 const RooArgSet& auxSplitCats, Bool_t verbose=kFALSE). const RooArgSet& splitLeafList(); { return _splitNodeList; }. » Last changed: Mon Dec 7 13:49:02 2009 » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimPdfBuilder.html:19740,configurat,configuration,19740,root/html526/RooSimPdfBuilder.html,https://root.cern,https://root.cern/root/html526/RooSimPdfBuilder.html,1,['configurat'],['configuration']
Deployability,"char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenConfig.html:7280,integrat,integration,7280,root/html526/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html526/RooNumGenConfig.html,5,['integrat'],['integration']
Deployability,"char* name, const char* title, const RooArgList& pdfObs, const RooArgList& histObs, const RooDataHist& dhist, Int_t intOrder = 0); Constructor from a RooDataHist. The first list of observables are the p.d.f.; observables, which may any RooAbsReal (function or variable). The second list; are the corresponding observables in the RooDataHist which must be of type; RooRealVar or RooCategory This constructor thus allows to apply a coordinate transformation; on the histogram data to be applied. RooHistPdf(const RooHistPdf& other, const char* name = 0); Copy constructor. ~RooHistPdf(); Destructor. Double_t evaluate() const; Return the current value: The value of the bin enclosing the current coordinates; of the observables, normalized by the histograms contents. Interpolation; is applied if the RooHistPdf is configured to do that. Double_t totVolume() const; Return the total volume spanned by the observables of the RooHistPdf. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Determine integration scenario. If no interpolation is used,; RooHistPdf can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used on the integral over; all histogram observables is supported. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Int_t getMaxVal(const RooArgSet& vars) const; Only handle case of maximum in all variables. Double_t maxVal(Int_t code) const. Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooHistPdf.html:42789,integrat,integration,42789,root/html528/RooHistPdf.html,https://root.cern,https://root.cern/root/html528/RooHistPdf.html,2,['integrat'],['integration']
Deployability,"char* name, const char* title, const RooArgList& pdfObs, const RooArgList& histObs, const RooDataHist& dhist, Int_t intOrder = 0); Constructor from a RooDataHist. The first list of observables are the p.d.f.; observables, which may any RooAbsReal (function or variable). The second list; are the corresponding observables in the RooDataHist which must be of type; RooRealVar or RooCategory This constructor thus allows to apply a coordinate transformation; on the histogram data to be applied. RooHistPdf(const RooHistPdf& other, const char* name = 0); Copy constructor. ~RooHistPdf(); Destructor. Double_t evaluate() const; Return the current value: The value of the bin enclosing the current coordinates; of the observables, normalized by the histograms contents. Interpolation; is applied if the RooHistPdf is configured to do that. Double_t totVolume() const; Return the total volume spanned by the observables of the RooHistPdf. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Determine integration scenario. If no interpolation is used,; RooHistPdf can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used on the integral over; all histogram observables is supported. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Int_t getMaxVal(const RooArgSet& vars) const; Only handle case of maximum in all variables. Double_t maxVal(Int_t code) const. TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistPdf.html:41954,integrat,integration,41954,root/html526/RooHistPdf.html,https://root.cern,https://root.cern/root/html526/RooHistPdf.html,1,['integrat'],['integration']
Deployability,"char* name, const char* title, const RooArgList& pdfObs, const RooArgList& histObs, const RooDataHist& dhist, Int_t intOrder = 0); Constructor from a RooDataHist. The first list of observables are the p.d.f.; observables, which may any RooAbsReal (function or variable). The second list; are the corresponding observables in the RooDataHist which must be of type; RooRealVar or RooCategory This constructor thus allows to apply a coordinate transformation; on the histogram data to be applied. RooHistPdf(const RooHistPdf& other, const char* name = 0); Copy constructor. ~RooHistPdf(); Destructor. Double_t evaluate() const; Return the current value: The value of the bin enclosing the current coordinates; of the observables, normalized by the histograms contents. Interpolation; is applied if the RooHistPdf is configured to do that. Double_t totVolume() const; Return the total volume spanned by the observables of the RooHistPdf. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Determine integration scenario. If no interpolation is used,; RooHistPdf can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used on the integral over; all histogram observables is supported. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (proje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:44236,integrat,integration,44236,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,4,['integrat'],['integration']
Deployability,"che for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsSelfCachedPdf.html:42258,integrat,integration,42258,root/html534/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsSelfCachedPdf.html,1,['integrat'],['integration']
Deployability,"che for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const RooArgSet& _normSet, const char* isetRangeName, const char* normRangeName = 0, Bool_t doFactorize = kTRUE); Constructor for a normalization projection of the product of p.d.f.s _prodSet; integrated over _intSet in range isetRangeName while normalized over _normSet. RooGenProdProj(const RooGenProdProj& other, const char* name = 0); Copy constructor. ~RooGenProdProj(); Destructor. RooAbsReal* makeIntegral(const char* name, const RooArgSet& compSet, const RooArgSet& intSet, RooArgSet& saveSet, const char* isetRangeName, Bool_t doFactorize); Utility function to create integral over observables intSet in range isetRangeName over product of p.d.fs in compSet.; The integration is factorized into components as much as possible and done analytically as far as possible.; All component object needed to represent product integral are added as owned members to saveSet.; The return value is a RooAbsReal object representing the requested integral. Double_t evaluate() const; Calculate and return value of normalization projection. void operModeHook(); Intercept cache mode operation changes and propagate them to the components. TObject* clone(const char* newname) const; { return new RooGenProdProj(*this, newname); }. » Last changed: Thu Sep 23 19:59:52 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGenProdProj.html:34263,integrat,integration,34263,root/html528/RooGenProdProj.html,https://root.cern,https://root.cern/root/html528/RooGenProdProj.html,1,['integrat'],['integration']
Deployability,"che for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const RooArgSet& _normSet, const char* isetRangeName, const char* normRangeName = 0, Bool_t doFactorize = kTRUE); Constructor for a normalization projection of the product of p.d.f.s _prodSet; integrated over _intSet in range isetRangeName while normalized over _normSet. RooGenProdProj(const RooGenProdProj& other, const char* name = 0); Copy constructor. ~RooGenProdProj(); Destructor. RooAbsReal* makeIntegral(const char* name, const RooArgSet& compSet, const RooArgSet& intSet, RooArgSet& saveSet, const char* isetRangeName, Bool_t doFactorize); Utility function to create integral over observables intSet in range isetRangeName over product of p.d.fs in compSet.; The integration is factorized into components as much as possible and done analytically as far as possible.; All component object needed to represent product integral are added as owned members to saveSet.; The return value is a RooAbsReal object representing the requested integral. Double_t evaluate() const; Calculate and return value of normalization projection. void operModeHook(); Intercept cache mode operation changes and propagate them to the components. TObject* clone(const char* newname) const; { return new RooGenProdProj(*this, newname); }. » Last changed: Tue Jun 30 14:33:19 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenProdProj.html:38835,integrat,integration,38835,root/html602/RooGenProdProj.html,https://root.cern,https://root.cern/root/html602/RooGenProdProj.html,1,['integrat'],['integration']
Deployability,"che for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const RooArgSet& _normSet, const char* isetRangeName, const char* normRangeName = 0, Bool_t doFactorize = kTRUE); Constructor for a normalization projection of the product of p.d.f.s _prodSet; integrated over _intSet in range isetRangeName while normalized over _normSet. RooGenProdProj(const RooGenProdProj& other, const char* name = 0); Copy constructor. ~RooGenProdProj(); Destructor. RooAbsReal* makeIntegral(const char* name, const RooArgSet& compSet, const RooArgSet& intSet, RooArgSet& saveSet, const char* isetRangeName, Bool_t doFactorize); Utility function to create integral over observables intSet in range isetRangeName over product of p.d.fs in compSet.; The integration is factorized into components as much as possible and done analytically as far as possible.; All component object needed to represent product integral are added as owned members to saveSet.; The return value is a RooAbsReal object representing the requested integral. Double_t evaluate() const; Calculate and return value of normalization projection. void operModeHook(); Intercept cache mode operation changes and propagate them to the components. TObject* clone(const char* newname) const; { return new RooGenProdProj(*this, newname); }. » Last changed: Tue Mar 10 17:17:10 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenProdProj.html:37332,integrat,integration,37332,root/html534/RooGenProdProj.html,https://root.cern,https://root.cern/root/html534/RooGenProdProj.html,1,['integrat'],['integration']
Deployability,"che manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNovosibirsk.html:43908,configurat,configuration,43908,root/html602/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html602/RooNovosibirsk.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"che manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject category; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEfficiency.html:39258,configurat,configuration,39258,root/html528/RooEfficiency.html,https://root.cern,https://root.cern/root/html528/RooEfficiency.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"che*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useCdfBoundariesAre c.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCachedReal.html:33634,integrat,integrator,33634,root/html530/RooCachedReal.html,https://root.cern,https://root.cern/root/html530/RooCachedReal.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,cheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:65188,integrat,integration,65188,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,7,['integrat'],['integration']
Deployability,cheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumbe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:37398,integrat,integration,37398,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,1,['integrat'],['integration']
Deployability,cheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProjectedPdf.html:37780,integrat,integration,37780,root/html528/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html528/RooProjectedPdf.html,2,['integrat'],['integration']
Deployability,"ches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooUnblindCPAsymVar.html:33173,integrat,integrator,33173,root/html530/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html530/RooUnblindCPAsymVar.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ; Definition at line 311 of file FitResult.cxx. ◆ SetMinosError(). void ROOT::Fit::FitResult::SetMinosError ; (; unsigned int ; i, . double ; elow, . double ; eup . ). set the Minos errors for parameter i (called by the Fitter class when running Minos) ; Definition at line 346 of file FitResult.cxx. ◆ SetModelFunction(). void ROOT::Fit::FitResult::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Definition at line 338 of file FitResult.h. ◆ Status(). int ROOT::Fit::FitResult::Status ; (; ); const. inline . minimizer status code ; Definition at line 128 of file FitResult.h. ◆ Update(). bool ROOT::Fit::FitResult::Update ; (; const std::shared_ptr< ROOT::Math::Minimizer > & ; min, . const ROOT::Fit::FitConfig & ; fconfig, . bool ; isValid, . unsigned int ; ncalls = 0 . ). Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ; If one wants to run also MINOS a new result must be created ; Definition at line 224 of file FitResult.cxx. ◆ UpperError(). double ROOT::Fit::FitResult::UpperError ; (; unsigned int ; i); const. upper Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 339 of file FitResult.cxx. ◆ Value(). double ROOT::Fit::FitResult::Value ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 172 of file FitResult.h. Friends And Related Symbol Documentation. ◆ Fitter. friend class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:24125,configurat,configuration,24125,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['configurat'],['configuration']
Deployability,"children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveGeoShapeProjected(); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoShapeProjected.html:17338,update,update,17338,root/html602/TEveGeoShapeProjected.html,https://root.cern,https://root.cern/root/html602/TEveGeoShapeProjected.html,4,['update'],['update']
Deployability,"ching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodPDEFoam Class ReferenceTMVA. ; The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. ; This ""foam"" of cells is filled with averaged probability-density information sampled from a training event sample.; For a given number of cells, the binning algorithm adjusts the size and position of the cells inside the multidimensional phase space based on a binary-split algorithm, minimizing the variance of the event density in the cell. The binned event density information of the final foam is stored in binary trees, allowing for a fast and memory-efficient classification of events.; The implementation of PDEFoam is based on the Monte-Carlo integration package TFoam included in the analysis package ROOT. ; Definition at line 69 of file MethodPDEFoam.h. Public Types; enum  EKernel { kNone =0; , kGaus =1; , kLinN =2; };  ; typedef enum TMVA::MethodPDEFoam::EKernel EKernel;  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:1102,integrat,integration,1102,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['integrat'],['integration']
Deployability,"cialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. GenSpec* prepareMultiGen(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none(), const RooCmdArg& arg10 = RooCmdArg::none()) const. RooArgSet* getConstraints(const RooArgSet& , const RooArgSet& , Bool_t ) const; Constraint management. Int_t minDimNormValueCaching() const; { return _minDimNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:77496,configurat,configuration,77496,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['configurat'],['configuration']
Deployability,"cialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. void setNormRange(const char* rangeName). void setNormRangeOverride(const char* rangeName). GenSpec* prepareMultiGen(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none(), const RooCmdArg& arg10 = RooCmdArg::none()) const. RooArgSet* getConstraints(const RooArgSet& , RooArgSet& , Bool_t ) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:78716,configurat,configuration,78716,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,6,['configurat'],['configuration']
Deployability,"cient ; (; Int_t ; basisIndex); const. overridevirtual . B0 : _tag = +1 B0bar : _tag = -1. ; Implements RooAbsAnaConvPdf.; Definition at line 118 of file RooBCPGenDecay.cxx. ◆ DeclFileName(). static const char * RooBCPGenDecay::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file RooBCPGenDecay.h. ◆ generateEvent(). void RooBCPGenDecay::generateEvent ; (; Int_t ; code). overridevirtual . Generate mix-state dependent. ; Reimplemented from RooAbsPdf.; Definition at line 206 of file RooBCPGenDecay.cxx. ◆ getCoefAnalyticalIntegral(). Int_t RooBCPGenDecay::getCoefAnalyticalIntegral ; (; Int_t ; coef, . RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Default implementation of function advertising integration capabilities. ; The interface is similar to that of getAnalyticalIntegral except that an integer code is added that designates the coefficient number for which the integration capabilities are requested; This default implementation advertises that no internal integrals are supported. ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 143 of file RooBCPGenDecay.cxx. ◆ getGenerator(). Int_t RooBCPGenDecay::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPGenDecay.html:81083,integrat,integration,81083,doc/master/classRooBCPGenDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPGenDecay.html,1,['integrat'],['integration']
Deployability,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:23576,configurat,configuration,23576,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,4,['configurat'],['configuration']
Deployability,"ciently with fast FCNs (0), expensive FCNs (2) and 'intermediate' FCNs (1) ; Definition at line 189 of file RooMinimizer.cxx. ◆ setVerbose(). void RooMinimizer::setVerbose ; (; bool ; flag = true). inline . Definition at line 153 of file RooMinimizer.h. ◆ simplex(). int RooMinimizer::simplex ; (; ). Execute SIMPLEX. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 453 of file RooMinimizer.cxx. ◆ Streamer(). void RooMinimizer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 247 of file RooMinimizer.h. ◆ update(). bool RooMinimizer::update ; (; bool ; isValid). private . Definition at line 1100 of file RooMinimizer.cxx. ◆ updateErrors(). void RooMinimizer::updateErrors ; (; ). private . Definition at line 1129 of file RooMinimizer.cxx. ◆ updateFitConfig(). void RooMinimizer::updateFitConfig ; (; ). private . Definition at line 1013 of file RooMinimizer.cxx. ◆ updateMinimizerOptions(). bool RooMinimizer::updateMinimizerOptions ; (; bool ; canDifferentMinim = true). private . Definition at line 984 of file RooMinimizer.cxx. ◆ zeroEvalCount(). void RooMinimizer::zeroEvalCount ; (; ). Definition at line 817 of file RooMinimizer.cxx. Friends And Related Symbol Documentation. ◆ RooAbsMinimizerFcn. friend class RooAbsMinimizerFcn. friend . Definition at line 197 of file RooMinimizer.h. ◆ RooFit::TestStatistics::LikelihoodGradientJob. friend class RooFit::TestStatistics::LikelihoodGradientJob. friend . Definition at line 199 of file RooMinimizer.h. ◆ RooMinimizerFcn. friend class RooMinimizerFcn. friend . Definition at line 198 of file RooMinimizer.h. Member Data Documentation. ◆ _cfg. RooMinimizer::Config RooMinimizer::_cfg. private . Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:30296,update,updateErrors,30296,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['update'],['updateErrors']
Deployability,"ck and this free block is deleted from the list. If not, the first free block bigger than the object is used. TFile::fListHead contains a sorted list (TSortedList) of objects in memory. The diagram below illustrates the logical view of the TFile and TKey. ROOT File/Directory/Key description. 11.2.1 Viewing the Logical File Contents; TFile is a descendent of TDirectory, which means it behaves like a TDirectory. We can list the contents, print the name, and create subdirectories. In a ROOT session, you are always in a directory and the directory you are in is called the current directory and is stored in the global variable gDirectory. Let us look at a more detailed example of a ROOT file and its role as the current directory. First, we create a ROOT file by executing a sample script.; root[] .x $ROOTSYS/tutorials/hsimple.C; Now you should have hsimple.root in your directory. The file was closed by the script so we have to open it again to work with it. We open the file with the intent to update it, and list its contents.; root[] TFile f (""hsimple.root"",""UPDATE""); root[] f.ls(); TFile** hsimple.root; TFile* hsimple.root; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple; It shows the two lines starting with TFile followed by four lines starting with the word “KEY”. The four keys tell us that there are four objects on disk in this file. The syntax of the listing is:; KEY: <class> <variable>;<cycle number> <title>; For example, the first line in the list means there is an object in the file on disk, called hpx. It is of the class TH1F (one-dimensional histogram of floating numbers). The object’s title is “This is the px distribution”. If the line starts with OBJ, the object is in memory. The <class> is the name of the ROOT class (T-something). The <variable> is the name of the object. The cycle number along with the variable name uniquely identifies the object. The <t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:445820,update,update,445820,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['update']
Deployability,"ck; ///<! selected branch of geometry by stack; 248 ; 249 std::vector<int> fHighlightedStack; ///<! highlighted element by stack; 250 std::vector<int> fClickedStack; ///<! clicked element by stack; 251 ; 252 std::vector<int> fSortMap; ///<! nodes in order large -> smaller volume; 253 std::vector<ShapeDescr> fShapes; ///<! shapes with created descriptions; 254 ; 255 std::string fSearch; ///<! search string in hierarchy; 256 std::string fSearchJson; ///<! drawing json for search; 257 std::string fDrawJson; ///<! JSON with main nodes drawn by client; 258 int fDrawIdCut{0}; ///<! sortid used for selection of most-significant nodes; 259 int fActualLevel{0}; ///<! level can be reduced when selecting nodes; 260 bool fPreferredOffline{false}; ///<! indicates that full description should be provided to client; 261 int fJsonComp{0}; ///<! default JSON compression; 262 std::string fActiveItemName; ///<! name of item which should be activated in hierarchy; 263 ; 264 RGeomConfig fCfg; ///<! configuration parameter editable from GUI; 265 ; 266 TVirtualMutex *fMutex{nullptr}; ///<! external mutex used to protect all data; 267 ; 268 std::vector<std::pair<const void *, RGeomSignalFunc_t>> fSignals; ///<! registered signals; 269 ; 270 void PackMatrix(std::vector<float> &arr, TGeoMatrix *matr);; 271 ; 272 int MarkVisible(bool on_screen = false);; 273 ; 274 void ProduceIdShifts();; 275 ; 276 int ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func);; 277 ; 278 void ResetRndrInfos();; 279 ; 280 ShapeDescr &FindShapeDescr(TGeoShape *shape);; 281 ; 282 ShapeDescr &MakeShapeDescr(TGeoShape *shape);; 283 ; 284 int GetUsedNSegments(int min = 20);; 285 ; 286 int CountShapeFaces(TGeoShape *shape);; 287 ; 288 void CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node);; 289 ; 290 void CollectNodes(RGeomDrawing &drawing, bool all_nodes = false);; 291 ; 292 std::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes = false);; 293 ; 294 void ClearDescription();; 295 ; 296 void B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:9798,configurat,configuration,9798,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,2,['configurat'],['configuration']
Deployability,"ckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooRealProxy_ctheta; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; int_l1; int_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; int_m1; int_m2; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Componen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLegendre.html:30893,integrat,integration,30893,root/html528/RooLegendre.html,https://root.cern,https://root.cern/root/html528/RooLegendre.html,2,['integrat'],['integration']
Deployability,"ckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooRealProxy_ctheta; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; int_l1; int_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; int_m1; int_m2; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooLegendre.html:31393,integrat,integration,31393,root/html532/RooLegendre.html,https://root.cern,https://root.cern/root/html532/RooLegendre.html,1,['integrat'],['integration']
Deployability,"ckable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver(). void TEveViewerList::OnReMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::ReMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 561 of file TEveViewer.cxx. ◆ OnUnClicked(). void TEveViewerList::OnUnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::UnClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 639 of file TEveViewer.cxx. ◆ OnUnMouseOver(). void TEveViewerList::OnUnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::UnMouseOver(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 583 of file TEveViewer.cxx. ◆ operator=(). TEveViewerList & TEveViewerList::operator= ; (; const TEveViewerList & ; ). private . ◆ RemoveElementLocal(). void TEveViewerList::RemoveElementLocal ; (; TEveElement * ; el). overridevirtual . Decompoundofy el, call base-class version. ; Reimplemented from TEveElement.; Definition at line 367 of file TEveViewer.cxx. ◆ RemoveElementsLocal(). void TEveViewerList::RemoveElementsLocal ; (; ). overridevirtual . Decompoundofy children, call base-class version. ; Reimplemented from TEveElement.; Definition at line 376 of file TEveViewer.cxx. ◆ RepaintAllViewers(). void TEveViewerList::RepaintAllViewers ; (; Bool_t ; resetCameras, . Bool_t ; dropLogicals . ). Repaint all viewers. ; Definition at line 457 of file TEveViewer.cxx. ◆ RepaintChangedViewers(). void TEveViewerList::RepaintChangedViewers ; (; Bool_t ; re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:39437,update,updated,39437,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['update'],['updated']
Deployability,"ckable(Bool_t p); virtual Bool_tTEveElement::SetRnrChildren(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); voidUpdateNode(TGeoNode* node); voidUpdateVolume(TGeoVolume* volume); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteExtract(const char* name, Bool_t leafs_only); virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoNode.html:14508,update,update,14508,root/html528/TEveGeoNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoNode.html,6,['update'],['update']
Deployability,"clFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file RooParametricStepFunction.h. ◆ evaluate(). double RooParametricStepFunction::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 189 of file RooParametricStepFunction.cxx. ◆ getAnalyticalIntegral(). Int_t RooParametricStepFunction::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 127 of file RooParametricStepFunction.cxx. ◆ getLimits(). double * RooParametricStepFunction::getLimits ; (; ). inline . Definition at line 40 of file RooParametricStepFunction.h. ◆ getnBins(). Int_t RooParametricStepFunction::getnBins ; (; ); const. inline . Definition at line 39 of file RooParametricStepFunction.h. ◆ IsA(). TClass * RooParametricStepFunction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooParametricStepFunction.h. ◆ lastBinValue(). double RooParametricStepFunction::lastBinValue ; (; ); const. protected . Definition at line 174 of file RooParametricStepFunction.cxx. ◆ plotSamplingHint(). std::list< double > * RooParametricStepFunction::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Interface for returning an optional hint fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:80482,integrat,integration,80482,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['integrat'],['integration']
Deployability,"clare tb...Definition EExecutionPolicy.hxx:4; ROOT::GetDelayedAddClassAlternatestd::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate()Definition TClassTable.cxx:254; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::GetDelayedAddClassstd::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass()Definition TClassTable.cxx:248; ROOT::RemoveClassvoid RemoveClass(const char *cname, TClass *cl)Global function called by the dtor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:985; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::ClassTableHashstatic UInt_t ClassTableHash(const char *name, UInt_t size)Definition TClassTable.cxx:237; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; TClassEdit::IsStdClassbool IsStdClass(const char *type)return true if the class belongs to the std namespaceDefinition TClassEdit.cxx:1418; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854. corecontsrcTClassTable.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:50124,update,update,50124,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,1,['update'],['update']
Deployability,"class name; TGClient*TGObject::fClientConnection to display server; TGCompositeFrame*fContFixcontainer of fix settings; TGCompositeFrame*fContMaxcontainer of max range values; TGCompositeFrame*fContMincontainer of min range values; TGCompositeFrame*fContNamcontainer of parameter names; TGCompositeFrame*fContSldcontainer of sliders; TGCompositeFrame*fContValcontainer of parameter values; Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TVirtualPad*fFpadpad where the function is drawn; TF1*fFuncfunction passed to this dialog; Bool_tfHasChangeskTRUE if function was redrawn;; UInt_tTGFrame::fHeightframe height; TStringTGMainFrame::fIconNameicon name; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tfImmediateDrawkTRUE if function is updated on run-time; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGMainFrame::fMWMFuncsMWM functions; UInt_tTGMainFrame::fMWMInputMWM input modes; UInt_tTGMainFrame::fMWMValueMWM decoration hints; const TGWindow*TGTransientFrame::fMainwindow over which to popup dialog; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); Int_tfNPnumber of function parameters; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawk",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFunctionParametersDialog.html:19860,update,updated,19860,root/html528/TFunctionParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFunctionParametersDialog.html,6,['update'],['updated']
Deployability,"class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:7840,release,release,7840,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,1,['release'],['release']
Deployability,class  RooMultiVarGaussian;  Multivariate Gaussian p.d.f. More...;  ; class  RooNameReg;  Registry for const char* names. More...;  ; class  RooNLLVar;  Implements a -log(likelihood) calculation from a dataset and a PDF. More...;  ; class  RooNormSetCache;  Class RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition. More...;  ; class  RooNumber;  Provides numeric constants used in RooFit. More...;  ; class  RooNumCdf;  Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. More...;  ; class  RooNumConvolution;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumConvPdf;  Numeric 1-dimensional convolution operator PDF. More...;  ; class  RooNumGenConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumGenFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumIntConfig;  Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. More...;  ; class  RooNumIntFactory;  Factory to instantiate numeric integrators from a given function binding and a given configuration. More...;  ; class  RooNumRunningInt;  Implementation of RooAbsCachedReal that represents a running integral. More...;  ; class  RooObjCacheManager;  Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. More...;  ; class  RooParamBinning;  Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. More...;  ; class  RooPlot;  Plot frame and a container for graphics objects within that frame. More...;  ; class  RooPlotable;  Class RooPotable is a base class for objects that can be inserted into RooPlots and ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:14266,integrat,integrators,14266,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,2,"['configurat', 'integrat']","['configuration', 'integrators']"
Deployability,clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPolyVar.html:30622,integrat,integration,30622,root/html526/RooPolyVar.html,https://root.cern,https://root.cern/root/html526/RooPolyVar.html,2,['integrat'],['integration']
Deployability,clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooPolyVar.html:31289,integrat,integration,31289,root/html530/RooPolyVar.html,https://root.cern,https://root.cern/root/html530/RooPolyVar.html,1,['integrat'],['integration']
Deployability,clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selecti,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooPolyVar.html:31664,integrat,integration,31664,root/html532/RooPolyVar.html,https://root.cern,https://root.cern/root/html532/RooPolyVar.html,1,['integrat'],['integration']
Deployability,clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; Bool_tRooAbsTestStatistic::_doOffsetApply interval value offset to control numeric precision?; static RooArgSet_emptySetSupports named argument constructor; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_tRooAbsTestStatistic::_evalCarry! carry of Kahan sum in evaluatePartition; Int_tRooAbsTestStatistic::_extSet! Number of designated set to calculated extended term; Bool_t_extended; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Bool_t_first!; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; pRooAbsTestStatistic*RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTest,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNLLVar.html:39484,integrat,integration,39484,root/html602/RooNLLVar.html,https://root.cern,https://root.cern/root/html602/RooNLLVar.html,2,['integrat'],['integration']
Deployability,"close logging file ; Definition at line 456 of file TSQLFile.cxx. ◆ StoreObjectInTables(). Long64_t TSQLFile::StoreObjectInTables ; (; Long64_t ; keyid, . const void * ; obj, . const TClass * ; cl . ). protected . Store object in database. Return stored object id or -1 if error. ; Definition at line 2511 of file TSQLFile.cxx. ◆ Streamer(). void TSQLFile::Streamer ; (; TBuffer & ; b). overridevirtual . Streamer for TSQLFile class. ; Stores only data for TDirectory. ; Reimplemented from TFile.; Definition at line 2668 of file TSQLFile.cxx. ◆ StreamerNVirtual(). void TSQLFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 254 of file TSQLFile.h. ◆ StreamKeysForDirectory(). Int_t TSQLFile::StreamKeysForDirectory ; (; TDirectory * ; dir, . Bool_t ; doupdate, . Long64_t ; specialkeyid = -1, . TKeySQL ** ; specialkey = nullptr . ). protected . read keys for specified directory (when update == kFALSE) or update value for modified keys when update == kTRUE Returns number of successfully read keys or -1 if error ; Definition at line 920 of file TSQLFile.cxx. ◆ SysClose(). Int_t TSQLFile::SysClose ; (; Int_t ; fd). inlinefinalprotectedvirtual . Interface to system close. All arguments like in POSIX close(). ; Reimplemented from TFile.; Definition at line 45 of file TSQLFile.h. ◆ SysOpen(). Int_t TSQLFile::SysOpen ; (; const char * ; pathname, . Int_t ; flags, . UInt_t ; mode . ). inlinefinalprotectedvirtual . Interface to system open. All arguments like in POSIX open(). ; Reimplemented from TFile.; Definition at line 44 of file TSQLFile.h. ◆ SysRead(). Int_t TSQLFile::SysRead ; (; Int_t ; fd, . void * ; buf, . Int_t ; len . ). inlinefinalprotectedvirtual . Interface to system read. All arguments like in POSIX read(). ; Reimplemented from TFile.; Definition at line 46 of file TSQLFile.h. ◆ SysSeek(). Long64_t TSQLFile::SysSeek ; (; Int_t ; fd, . Long64_t ; offset, . Int_t ; whence . ). inlinefinalprotectedvirtual . Interface to syst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:97827,update,update,97827,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,3,['update'],['update']
Deployability,"cluding under/overflow Reallocate bin contents array.Definition TH2.cxx:3983; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TH2I::operator*friend TH2I operator*(TH2I const &h1, Float_t c1)Definition TH2.h:252; TH2I::TH2ITH2I()Constructor.Definition TH2.cxx:3390; TH2I::RetrieveBinContentDouble_t RetrieveBinContent(Int_t bin) const overrideRaw retrieval of bin content on internal data structure see convention for numbering bins in TH1::Get...Definition TH2.h:259; TH2I::operator*friend TH2I operator*(Float_t c1, TH2I const &h1)Operator *.Definition TH2.cxx:3551; TH2I::operator-friend TH2I operator-(TH2I const &h1, TH2I const &h2)Operator -.Definition TH2.cxx:3575; TH2I::Copyvoid Copy(TObject &hnew) const overrideCopy.Definition TH2.cxx:3509; TH2I::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny) overrideIncrement 2D bin content by 1.Definition TH2.h:244; TH2I::UpdateBinContentvoid UpdateBinContent(Int_t bin, Double_t content) overrideRaw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH2.h:260; TH2I::operator+friend TH2I operator+(TH2I const &h1, TH2I const &h2)Operator +.Definition TH2.cxx:3563; TH2I::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH2.cxx:3486; TH2I::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny, Double_t w) overrideIncrement 2D bin content by a weight w.Definition TH2.h:245; TH2I::~TH2I~TH2I() overrideDestructor.Definition TH2.cxx:3400; TH2I::operator=TH2I & operator=(const TH2I &h1)Operator =.Definition TH2.cxx:3540; TH2I::operator/friend TH2I operator/(TH2I const &h1, TH2I const &h2)Operator /.Definition TH2.cxx:3599; TH2I::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow Reallocate bin contents array.Definition TH2.cxx:3529; TH2L2-D histogram with a long64 per channel (see TH1 documentation)Definition TH2.h:267; TH2L::AddBinContentvoid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8h_source.html:30266,update,update,30266,doc/master/TH2_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2_8h_source.html,1,['update'],['update']
Deployability,coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealVar*RooAbsAnaConvPdf::_convVar! Convolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; Double_t_genRhoPlusFrac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::Op,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNonCPEigenDecay.html:39635,integrat,integration,39635,root/html526/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html526/RooNonCPEigenDecay.html,1,['integrat'],['integration']
Deployability,coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealVar*RooAbsAnaConvPdf::_convVar! Convolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; Double_t_genRhoPlusFrac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOve,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNonCPEigenDecay.html:40209,integrat,integration,40209,root/html528/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html528/RooNonCPEigenDecay.html,3,['integrat'],['integration']
Deployability,"combined efficiency. The weights to be used in the; combination should be the probability that an; electron comes from the corresponding process. VI. Further operations; VI.1 Information about the internal histograms; The methods GetPassedHistogram and GetTotalHistogram; return a constant pointer to the internal histograms. They can be used to; obtain information about the internal histograms (e.g. the binning, number of passed / total events in a bin, mean values...).; One can obtain a clone of the internal histograms by calling GetCopyPassedHisto or GetCopyTotalHisto.; The returned histograms are completely independent from the current; TEfficiency object. By default, they are not attached to a directory to; avoid the duplication of data and the user is responsible for deleting them. Example:; //open a root file which contains a TEfficiency object; TFile* pFile = new TFile(""myfile.root"",""update"");; //get TEfficiency object with name ""my_eff""; TEfficiency* pEff = (TEfficiency*)pFile->Get(""my_eff"");; //get clone of total histogram; TH1* clone = pEff->GetCopyTotalHisto();; //change clone...; //save changes of clone directly; clone->Write();; //or append it to the current directoy and write the file; //clone->SetDirectory(gDirectory);; //pFile->Wrtie();; //delete histogram object; delete clone;; clone = 0;. It is also possible to set the internal total or passed histogram by using the; methods SetPassedHistogram or; SetTotalHistogram.; In order to ensure the validity of the TEfficiency object, the consistency of the; new histogram and the stored histogram is checked. It sometimes might be; impossible to change the histograms in a consistent way. Therefore one can force; the replacement by passing the option ""f"". Then the user has to ensure that the; other internal histogram is replaced as well and that the TEfficiency object is; in a valid state.; VI.2 Fitting; The efficiency can be fitted using the Fit function which uses internally the TBinomialEfficiencyFitter::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEfficiency.html:17619,update,update,17619,root/html602/TEfficiency.html,https://root.cern,https://root.cern/root/html602/TEfficiency.html,2,['update'],['update']
Deployability,"commended to use the other interface where one can specify also epsabs and the maximum number of; 2796/// points; 2797 ; 2798Double_t TF1::IntegralMultiple(Int_t n, const Double_t *a, const Double_t *b, Double_t epsrel, Double_t &relerr); 2799{; 2800 Int_t nfnevl, ifail;; 2801 UInt_t maxpts = TMath::Max(UInt_t(20 * TMath::Power(fNpx, GetNdim())), ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls());; 2802 Double_t result = IntegralMultiple(n, a, b, maxpts, epsrel, epsrel, relerr, nfnevl, ifail);; 2803 if (ifail > 0) {; 2804 Warning(""IntegralMultiple"", ""failed code=%d, "", ifail);; 2805 }; 2806 return result;; 2807}; 2808 ; 2809 ; 2810////////////////////////////////////////////////////////////////////////////////; 2811/// This function computes, to an attempted specified accuracy, the value of; 2812/// the integral; 2813///; 2814/// \param[in] n Number of dimensions [2,15]; 2815/// \param[in] a,b One-dimensional arrays of length >= N . On entry A[i], and B[i],; 2816/// contain the lower and upper limits of integration, respectively.; 2817/// \param[in] maxpts Maximum number of function evaluations to be allowed.; 2818/// maxpts >= 2^n +2*n*(n+1) +1; 2819/// if maxpts<minpts, maxpts is set to 10*minpts; 2820/// \param[in] epsrel Specified relative accuracy.; 2821/// \param[in] epsabs Specified absolute accuracy.; 2822/// The integration algorithm will attempt to reach either the relative or the absolute accuracy.; 2823/// In case the maximum function called is reached the algorithm will stop earlier without having reached; 2824/// the desired accuracy; 2825///; 2826/// \param[out] relerr Contains, on exit, an estimation of the relative accuracy of the result.; 2827/// \param[out] nfnevl number of function evaluations performed.; 2828/// \param[out] ifail; 2829/// \parblock; 2830/// 0 Normal exit. At least minpts and at most maxpts calls to the function were performed.; 2831///; 2832/// 1 maxpts is too small for the specified accuracy eps. The result and relerr conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:107015,integrat,integration,107015,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['integrat'],['integration']
Deployability,"compiling stress.cxx. It completes sixteen tests covering the following capabilities of the ROOT framework. Functions, Random Numbers, Histogram Fits; Size & compression factor of a ROOT file; Purge, Reuse of gaps in TFile; 2D Histograms, Functions, 2D Fits; Graphics & PostScript; Subdirectories in a ROOT file; TNtuple, Selections, TCutG, TEventList; Split and Compression modes for Trees; Analyze Event.root file of stress 8; Create 10 files starting from Event.root; Test chains of Trees using the 10 files; Compare histograms of test 9 and 11; Merging files of a chain; Check correct rebuilt of Event.root in test 13; Divert Tree branches to separate files; Cling test (3 nested loops) with LHCb trigger. The program stress takes one argument, the number of events to process. The default is 1000 events. Be aware that executing stress with 1000 eventswill create several files consuming about 100 MB of disk space; running stress with 30 events will consume about 20 MB. The disk space is released once stress is done.; There are two ways to run stress:; From the system prompt or from the ROOT prompt using the interpreter.; > cd $ROOTSYS/test; > stress // default 1000 events; > stress 30 // test with 30 events; Start ROOT with the batch mode option (-b) to suppress the graphic output.; > root -b; root[] .L stress.cxx; root[] stress(1000)// test with 1000 events; root[] stress(30)// test with 30 events; The output of stress includes a pass/fail conclusion for each test, the total number of bytes read and written, and the elapsed real and CPU time. It also calculates a performance index for your machine relative to a reference machine a DELL Inspiron 7500 (Pentium III 600 MHz) with 256 MB of memory and 18GB IDE disk in ROOTMARKS. Higher ROOTMARKS means better performance. The reference machine has 200 ROOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine.; Here is a sample run:; % root -b; root[] .x stress.cxx(30). Test 1 :",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1083519,release,released,1083519,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['release'],['released']
Deployability,"component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; map<std::pair<std::string,int>,BoxInfo*>_rangeBoxInfo; Double_tRooAbsPdf::_rawValue; vector<Double_t>_rho; TMatrixD*_rotMat; Bool_t_rotate; vector<Int_t>_sIdcs; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; vector<Double_t>_sigma; Double_t_sigmaAvgR; TVectorD*_sigmaR; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Double_t_sqrt2pi; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooListProxy_varList; vector<std::string>_varName; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; map<Int_t,Double_t>_wMap; vector<std::vector<Double_t> >*_weights!; vector<std::vector<Double_t> >_weights0; vector<std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNDKeysPdf.html:45208,configurat,configuration,45208,root/html534/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooNDKeysPdf.html,1,['configurat'],['configuration']
Deployability,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:26347,configurat,configuration,26347,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,2,['configurat'],['configuration']
Deployability,configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29586,configurat,configuration,29586,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Minimum Test error found - save the configuration ; : 231 | 4606.79 3681.43 0.020129 0.00181323 43678.1 0; : 232 Minimum Test error found - save the configuration ; : 232 | 4567.71 3646.94 0.0201545 0.0018103 43610.4 0; : 233 Minimum Test error found - save the configuration ; : 233 | 4531.87 3609.69 0.0200999 0.00180936 43738.5 0; : 234 Minimum Test error found - save the configuration ; : 234 | 4493.9 3574.45 0.0204352 0.00182946 42997.5 0; : 235 Minimum Test error found - save the configuration ; : 235 | 4458.22 3537.88 0.0202146 0.00181434 43477.6 0; : 23,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:36604,configurat,configuration,36604,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91262,configurat,configuration,91262,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Test error found - save the configuration ; : 753 | 17.2492 20.0483 0.0200805 0.00181433 43796.8 0; : 754 Minimum Test error found - save the configuration ; : 754 | 16.8738 20.0271 0.0201173 0.00182078 43724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum Test error found - save the configuration ; : 756 | 16.5214 19.4549 0.0200975 0.00181399 43755.3 0; : 757 | 16.5493 20.0416 0.0200274 0.00175373 43778.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:94200,configurat,configuration,94200,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756 0.0202606 0.00194113 43669.3 2; : 963 | 3.72111 5.2317 0.020058 0.00176556 43733.9 3; : 964 | 3.60317 5.20936 0.020113 0.00175786 43584.5 4; : 965 | 3.63413 5.37485 0.0201057 0.00175921 43605 5; : 966 | 3.74764 5.16986 0.0200985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:110434,configurat,configuration,110434,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxy_x; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPolyVar(); Default constructor. RooPolyVar(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList, Int_t lowestOrder = 0); Construct polynomial in x with coefficients in coefList. If; lowestOrder is not zero, then the first element in coefList is; interpreted as as the 'lowestOrder' coefficients and all; subsequent coeffient elements are shifted by a similar amount. RooPolyVar(const char* name, const char* title, RooAbsReal& x); Constructor of flat polynomial function. RooPolyVar(const RooPolyVar& other, const char* name = 0); Copy constructor. ~RooPolyVar(); Destructor. Double_t evaluate() const; Calculate and return value of polynomial. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Advertise that we can internally integrate over x. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate and return analytical integral over x. TObject* clone(const char* newname) const; { return new RooPolyVar(*this, newname); }. » Last changed: Tue Jun 2 15:32:58 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooPolyVar.html:38154,integrat,integrate,38154,root/html604/RooPolyVar.html,https://root.cern,https://root.cern/root/html604/RooPolyVar.html,1,['integrat'],['integrate']
Deployability,"const Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; fit1Definition fit1.py:1; rf614_binned_fit_problemsDefinition rf614_binned_fit_problems.py:1; RooMsgService::StreamConfig::removeTopicvoid removeTopic(RooFit::MsgTopic oldTopic)Definition RooMsgService.h:122; ; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'bin' created with bounds [0.1,0.6]; ; RooFitResult: minimized FCN value: 4754.37, estimated distance to minimum: 3.09852e-09; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; c -1.6862e+00 +/- 1.70e-02; ; [#0] WARNING:Integration -- RooBinIntegrator::RooBinIntegrator WARNING: integrand provide no binning definition observable #0 substituting default binning of 10 bins; [#1] INFO:NumericIntegration -- RooRealIntegral::init(expo_Int[x]) using numeric integrator RooBinIntegrator to calculate Int(x); ; RooFitResult: minimized FCN value: 4440.6, estimated distance to minimum: 5.599e-07; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; c -1.8000e+00 +/- 1.87e-02; ; ; RooFitResult: minimized FCN value: 15816.4, estimated distance to minimum: 4.97037e-07; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a -2.6106e-01 +/- 1.06e-02; ; [#0] WARNING:Integration -- RooBinIntegrator::RooBinIntegrator WARNING: integrand provide no binning definition observable #0 substituting default binning of 10 bins; [#1] INFO:NumericIntegration -- RooRealIntegral::init(powerlaw_Int[x]) using numeric integrator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:13490,integrat,integrator,13490,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['integrat'],['integrator']
Deployability,"const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax,				const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:9333,integrat,integrator,9333,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,1,['integrat'],['integrator']
Deployability,"const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); static TClass*Class(); virtual TClass*IsA() const; RooSimWSTool::BuildConfig&operator=(const RooSimWSTool::BuildConfig&); voidrestrictBuild(const char* catName, const char* stateList); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. RooSimWSTool::BuildConfigBuildConfig(); voidinternalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr). Data Members; protected:. RooCmdArg_conflProtocol; string_masterCatName; map<string,RooSimWSTool::SplitRule>_pdfmap; map<string,string>_restr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BuildConfig(const char* pdfName, RooSimWSTool::SplitRule& sr); Add prototype p.d.f pdfName to build configuration with associated split rules 'sr'. BuildConfig(const char* pdfName, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Construct build configuration from single prototype 'pdfName' and list of arguments; that can be passed to RooSimWSTool::build() method. This routine parses SplitParam(); SplitParamConstrained() and Restrict() arguments. BuildConfig(const RooArgSet& legacyBuildConfig); Constructor to make BuildConfig from legacy RooSimPdfBuilder configuration; Empty for now. void internalAddPdf(const char* pdfName, const char* miStateList, RooSimWSTool::SplitRule& sr); Internal routine to add prototype pdf 'pdfName' with list of associated master states 'miStateNameList; and split rules 'sr' to configuration. void restrictBuild(const char* catName, const char* stateList); Restrict b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimWSTool__BuildConfig.html:5027,configurat,configuration,5027,root/html602/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html602/RooSimWSTool__BuildConfig.html,2,['configurat'],['configuration']
Deployability,"const TString& TROOT::GetIconPath() {; 3169#ifdef ROOTICONPATH; 3170 if (IgnorePrefix()) {; 3171#endif; 3172 static TString rooticonpath;; 3173 if (rooticonpath.IsNull()) {; 3174 rooticonpath = ""icons"";; 3175 gSystem->PrependPathName(GetRootSys(), rooticonpath);; 3176 }; 3177 return rooticonpath;; 3178#ifdef ROOTICONPATH; 3179 } else {; 3180 const static TString rooticonpath = ROOTICONPATH;; 3181 return rooticonpath;; 3182 }; 3183#endif; 3184}; 3185 ; 3186////////////////////////////////////////////////////////////////////////////////; 3187/// Get the fonts directory in the installation. Static utility function.; 3188 ; 3189const TString& TROOT::GetTTFFontDir() {; 3190#ifdef TTFFONTDIR; 3191 if (IgnorePrefix()) {; 3192#endif; 3193 static TString ttffontdir;; 3194 if (ttffontdir.IsNull()) {; 3195 ttffontdir = ""fonts"";; 3196 gSystem->PrependPathName(GetRootSys(), ttffontdir);; 3197 }; 3198 return ttffontdir;; 3199#ifdef TTFFONTDIR; 3200 } else {; 3201 const static TString ttffontdir = TTFFONTDIR;; 3202 return ttffontdir;; 3203 }; 3204#endif; 3205}; 3206 ; 3207////////////////////////////////////////////////////////////////////////////////; 3208/// Get the tutorials directory in the installation. Static utility function.; 3209/// Backward compatibility function - do not use for new code; 3210 ; 3211const char *TROOT::GetTutorialsDir() {; 3212 return GetTutorialDir();; 3213}; kMarker@ kMarkerDefinition Buttons.h:34; kCurlyArc@ kCurlyArcDefinition Buttons.h:38; kPad@ kPadDefinition Buttons.h:30; kPolyLine@ kPolyLineDefinition Buttons.h:28; kDiamond@ kDiamondDefinition Buttons.h:37; kPave@ kPaveDefinition Buttons.h:31; kArrow@ kArrowDefinition Buttons.h:33; kPaveText@ kPaveTextDefinition Buttons.h:32; kCutG@ kCutGDefinition Buttons.h:38; kLine@ kLineDefinition Buttons.h:33; kPavesText@ kPavesTextDefinition Buttons.h:32; kCurlyLine@ kCurlyLineDefinition Buttons.h:38; kPaveLabel@ kPaveLabelDefinition Buttons.h:31; kButton@ kButtonDefinition Buttons.h:37; kEllipse@ kEllipseDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:120564,install,installation,120564,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"const TString& TROOT::GetIconPath() {; 3173#ifdef ROOTICONPATH; 3174 if (IgnorePrefix()) {; 3175#endif; 3176 static TString rooticonpath;; 3177 if (rooticonpath.IsNull()) {; 3178 rooticonpath = ""icons"";; 3179 gSystem->PrependPathName(GetRootSys(), rooticonpath);; 3180 }; 3181 return rooticonpath;; 3182#ifdef ROOTICONPATH; 3183 } else {; 3184 const static TString rooticonpath = ROOTICONPATH;; 3185 return rooticonpath;; 3186 }; 3187#endif; 3188}; 3189 ; 3190////////////////////////////////////////////////////////////////////////////////; 3191/// Get the fonts directory in the installation. Static utility function.; 3192 ; 3193const TString& TROOT::GetTTFFontDir() {; 3194#ifdef TTFFONTDIR; 3195 if (IgnorePrefix()) {; 3196#endif; 3197 static TString ttffontdir;; 3198 if (ttffontdir.IsNull()) {; 3199 ttffontdir = ""fonts"";; 3200 gSystem->PrependPathName(GetRootSys(), ttffontdir);; 3201 }; 3202 return ttffontdir;; 3203#ifdef TTFFONTDIR; 3204 } else {; 3205 const static TString ttffontdir = TTFFONTDIR;; 3206 return ttffontdir;; 3207 }; 3208#endif; 3209}; 3210 ; 3211////////////////////////////////////////////////////////////////////////////////; 3212/// Get the tutorials directory in the installation. Static utility function.; 3213/// Backward compatibility function - do not use for new code; 3214 ; 3215const char *TROOT::GetTutorialsDir() {; 3216 return GetTutorialDir();; 3217}; kMarker@ kMarkerDefinition Buttons.h:34; kCurlyArc@ kCurlyArcDefinition Buttons.h:38; kPad@ kPadDefinition Buttons.h:30; kPolyLine@ kPolyLineDefinition Buttons.h:28; kDiamond@ kDiamondDefinition Buttons.h:37; kPave@ kPaveDefinition Buttons.h:31; kArrow@ kArrowDefinition Buttons.h:33; kPaveText@ kPaveTextDefinition Buttons.h:32; kCutG@ kCutGDefinition Buttons.h:38; kLine@ kLineDefinition Buttons.h:33; kPavesText@ kPavesTextDefinition Buttons.h:32; kCurlyLine@ kCurlyLineDefinition Buttons.h:38; kPaveLabel@ kPaveLabelDefinition Buttons.h:31; kButton@ kButtonDefinition Buttons.h:37; kEllipse@ kEllipseDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:120811,install,installation,120811,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"const char *to, Bool_t overwrite=kFALSE) override;  Copy a file. ;  ; const char * DirName (const char *pathname) override;  Return the directory name in pathname. ;  ; void DispatchOneEvent (Bool_t pendingOnly=kFALSE) override;  Dispatch a single event in TApplication::Run() loop. ;  ; void DispatchSignals (ESignals sig);  Handle and dispatch signals. ;  ; const char DriveName (const char *pathname=""/"");  Return the drive letter in pathname. ;  ; int Exec (const char *shellcmd) override;  Execute a command. ;  ; void Exit (int code, Bool_t mode=kTRUE) override;  Exit the application. ;  ; void ExitLoop () override;  Exit from event loop. ;  ; char * ExpandPathName (const char *path) override;  Expand a pathname getting rid of special shell characaters like ~. ;  ; Bool_t ExpandPathName (TString &patbuf) override;  Expand a pathname getting rid of special shell characaters like ~.$, etc. ;  ; const char * FindDynamicLibrary (TString &lib, Bool_t quiet=kFALSE) override;  Returns and updates sLib to the path of a dynamic library (searches for library in the dynamic library search path). ;  ; const char * FindFile (const char *search, TString &file, EAccessMode mode=kFileExists) override;  Find location of file in a search path. ;  ; void FreeDirectory (void *dirp) override;  Close a WinNT file system directory. ;  ; Int_t GetCpuInfo (CpuInfo_t *info, Int_t sampleTime=1000) const override;  Returns cpu load average and load info into the CpuInfo_t structure. ;  ; Double_t GetCPUTime ();  ; Int_t GetCryptoRandom (void *buf, Int_t len) override;  Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ;  ; const char * GetDirEntry (void *dirp) override;  Returns the next directory entry. ;  ; TString GetDirName (const char *pathname) override;  Return the directory name in pathname. ;  ; const char * GetDynamicPath () override;  Return the dynamic path (used to find shared libraries). ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:4134,update,updates,4134,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['update'],['updates']
Deployability,"const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; VirtualIntegrator.h; WrappedFunction.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IBaseFunctionOneDim::Clonevirtual IBaseFunctionOneDim * Clone() const =0Clone a function.; ROOT::Math::IntegratorOneDimOptionsNumerical one dimensional integration options.Definition IntegratorOptions.h:113; ROOT::Math::IntegratorOneDimOptions::Integratorstd::string Integrator() const overridename of 1D integratorDefinition IntegratorOptions.cxx:203; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::SetAbsTolerancevoid SetAbsTolerance(double absTolerance)set the desired absolute ErrorDefinition Integrator.h:441; ROOT::Math::IntegratorOneDim::GetNamestatic std::string GetName(IntegrationOneDim::Type)static function to get a string from the enumerationDefinition Integrator.cxx:66; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(const IGenFunction &f, bool copy=false)set one dimensional function for 1D integrationDefinition Integrator.h:202; ROOT::Math::IntegratorOneDim::Integraldouble Integral(const IGenFunction &f)evaluate the Integral of a function f over the infinite interval (-inf,+inf)Definition Integrator.h:258; ROOT::Math::IntegratorOneDim::IntegratorOneDimIntegratorOneDim(IntegrationOneDim::Type type=IntegrationOneDim::kDEFA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:22994,integrat,integratorDefinition,22994,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integratorDefinition']
Deployability,"const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Double_tCalcNLL(Double_t xL); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual Bool_tShouldTakeStep(Double_t d). Data Members; public:. enum FunctionSign { kNegative; kPositive; kSignUnset; };; enum FunctionType { kRegular; kLog; kTypeUnset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooArgSetfChainParamsRooRealVars that are stored in the chain; RooAbsReal*fFunctionfunction that will generate likelihood values; Int_tfNumBurnInStepsnumber of iterations to discard as burn-in, starting from the first; Int_tfNumItersnumber of iterations to run metropolis algorithm; RooArgSetfParametersRooRealVars that define all parameter space; RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; RooStats::MetropolisHastings::FunctionSignfSignwhether the likelihood is negative (like NLL) or positive; RooStats::MetropolisHastings::FunctionTypefTypewhether the likelihood is on a regular, log, (or other) scale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MetropolisHastings(); default constructor. MetropolisHastings(RooAbsReal& function, const RooArgSet& paramsOfInterest, RooStats::ProposalFunction& proposalFunction, Int_t numIters). MarkovChain* ConstructChain(). Bool_t ShouldTakeStep(Double_t d). Double_t CalcNLL(Double_t xL). MetropolisHastings(); default constructor. virtual ~MetropolisHastings(); {}. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the chain; if not specified all of them will be stored. { fChainParams.removeAll(); fChainParams.add(set); RemoveConstantParameters(&fChainParams); }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MetropolisHastings.html:8021,integrat,integration,8021,root/html532/RooStats__MetropolisHastings.html,https://root.cern,https://root.cern/root/html532/RooStats__MetropolisHastings.html,2,['integrat'],['integration']
Deployability,"const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. void printValue(ostream& os) const; Print value of variable. void printExtras(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:40756,install,installed,40756,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,1,['install'],['installed']
Deployability,"const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); TGCompositeFrame*StartEmbedding(); TEveWindowFrame*StopEmbedding(const char* name = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowSlot.html:17257,update,update,17257,root/html528/TEveWindowSlot.html,https://root.cern,https://root.cern/root/html528/TEveWindowSlot.html,6,['update'],['update']
Deployability,"const char* title, RooAbsReal& _intpdf, const RooArgSet& intObs); Construct projection of input pdf '_intpdf' over observables 'intObs'. RooProjectedPdf(const RooProjectedPdf& other, const char* name = 0); Copy constructor. Double_t getVal(const RooArgSet* set = 0) const; Special version of getVal() overrides RooAbsReal::getVal() to save value of current normalization set. Double_t evaluate() const; Evaluate projected p.d.f. const RooAbsReal* getProjection(const RooArgSet* iset, const RooArgSet* nset, const char* rangeName, int& code) const; Retrieve object representing projection integral of input p.d.f; over observables iset, while normalizing over observables; nset. The code argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:41251,integrat,integrating,41251,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,6,['integrat'],"['integrating', 'integration']"
Deployability,"const static TString rootmacrodir = ROOTMACRODIR;; 3107 return rootmacrodir;; 3108 }; 3109#endif; 3110}; 3111 ; 3112////////////////////////////////////////////////////////////////////////////////; 3113/// Get the tutorials directory in the installation. Static utility function.; 3114 ; 3115const TString& TROOT::GetTutorialDir() {; 3116#ifdef ROOTTUTDIR; 3117 if (IgnorePrefix()) {; 3118#endif; 3119 static TString roottutdir;; 3120 if (roottutdir.IsNull()) {; 3121 roottutdir = ""tutorials"";; 3122 gSystem->PrependPathName(GetRootSys(), roottutdir);; 3123 }; 3124 return roottutdir;; 3125#ifdef ROOTTUTDIR; 3126 } else {; 3127 const static TString roottutdir = ROOTTUTDIR;; 3128 return roottutdir;; 3129 }; 3130#endif; 3131}; 3132 ; 3133////////////////////////////////////////////////////////////////////////////////; 3134/// Shut down ROOT.; 3135 ; 3136void TROOT::ShutDown(); 3137{; 3138 if (gROOT); 3139 gROOT->EndOfProcessCleanups();; 3140 else if (gInterpreter); 3141 gInterpreter->ShutDown();; 3142}; 3143 ; 3144////////////////////////////////////////////////////////////////////////////////; 3145/// Get the source directory in the installation. Static utility function.; 3146 ; 3147const TString& TROOT::GetSourceDir() {; 3148#ifdef ROOTSRCDIR; 3149 if (IgnorePrefix()) {; 3150#endif; 3151 static TString rootsrcdir;; 3152 if (rootsrcdir.IsNull()) {; 3153 rootsrcdir = ""src"";; 3154 gSystem->PrependPathName(GetRootSys(), rootsrcdir);; 3155 }; 3156 return rootsrcdir;; 3157#ifdef ROOTSRCDIR; 3158 } else {; 3159 const static TString rootsrcdir = ROOTSRCDIR;; 3160 return rootsrcdir;; 3161 }; 3162#endif; 3163}; 3164 ; 3165////////////////////////////////////////////////////////////////////////////////; 3166/// Get the icon path in the installation. Static utility function.; 3167 ; 3168const TString& TROOT::GetIconPath() {; 3169#ifdef ROOTICONPATH; 3170 if (IgnorePrefix()) {; 3171#endif; 3172 static TString rooticonpath;; 3173 if (rooticonpath.IsNull()) {; 3174 rooticonpath = ""icons""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:118709,install,installation,118709,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"const static TString rootmacrodir = ROOTMACRODIR;; 3111 return rootmacrodir;; 3112 }; 3113#endif; 3114}; 3115 ; 3116////////////////////////////////////////////////////////////////////////////////; 3117/// Get the tutorials directory in the installation. Static utility function.; 3118 ; 3119const TString& TROOT::GetTutorialDir() {; 3120#ifdef ROOTTUTDIR; 3121 if (IgnorePrefix()) {; 3122#endif; 3123 static TString roottutdir;; 3124 if (roottutdir.IsNull()) {; 3125 roottutdir = ""tutorials"";; 3126 gSystem->PrependPathName(GetRootSys(), roottutdir);; 3127 }; 3128 return roottutdir;; 3129#ifdef ROOTTUTDIR; 3130 } else {; 3131 const static TString roottutdir = ROOTTUTDIR;; 3132 return roottutdir;; 3133 }; 3134#endif; 3135}; 3136 ; 3137////////////////////////////////////////////////////////////////////////////////; 3138/// Shut down ROOT.; 3139 ; 3140void TROOT::ShutDown(); 3141{; 3142 if (gROOT); 3143 gROOT->EndOfProcessCleanups();; 3144 else if (gInterpreter); 3145 gInterpreter->ShutDown();; 3146}; 3147 ; 3148////////////////////////////////////////////////////////////////////////////////; 3149/// Get the source directory in the installation. Static utility function.; 3150 ; 3151const TString& TROOT::GetSourceDir() {; 3152#ifdef ROOTSRCDIR; 3153 if (IgnorePrefix()) {; 3154#endif; 3155 static TString rootsrcdir;; 3156 if (rootsrcdir.IsNull()) {; 3157 rootsrcdir = ""src"";; 3158 gSystem->PrependPathName(GetRootSys(), rootsrcdir);; 3159 }; 3160 return rootsrcdir;; 3161#ifdef ROOTSRCDIR; 3162 } else {; 3163 const static TString rootsrcdir = ROOTSRCDIR;; 3164 return rootsrcdir;; 3165 }; 3166#endif; 3167}; 3168 ; 3169////////////////////////////////////////////////////////////////////////////////; 3170/// Get the icon path in the installation. Static utility function.; 3171 ; 3172const TString& TROOT::GetIconPath() {; 3173#ifdef ROOTICONPATH; 3174 if (IgnorePrefix()) {; 3175#endif; 3176 static TString rooticonpath;; 3177 if (rooticonpath.IsNull()) {; 3178 rooticonpath = ""icons""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:118956,install,installation,118956,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"const; 1333{; 1334 if (IsFolder()); 1335 return ""TBranchElement-folder"";; 1336 else; 1337 return ""TBranchElement-leaf"";; 1338}; 1339 ; 1340////////////////////////////////////////////////////////////////////////////////; 1341/// A helper function to locate the correct basket - and its first entry.; 1342/// Extracted to a common private function because it is needed by both GetEntry; 1343/// and GetBulkEntries. It should not be called directly.; 1344///; 1345/// If a new basket must be constructed and the user_buffer is provided, then; 1346/// the user_buffer will back the memory of the newly-constructed basket.; 1347///; 1348/// Assumes that this branch is enabled.; 1349///; 1350/// Returns -1 if the entry does not exist; 1351/// Returns -2 in case of error; 1352/// Returns the index of the basket in case of success.; 1353Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; 1354 TBuffer *user_buffer); 1355{; 1356 Long64_t updatedNext = fNextBasketEntry;; 1357 Long64_t entry = fReadEntry;; 1358 if (R__likely(fCurrentBasket && fFirstBasketEntry <= entry && entry < fNextBasketEntry)) {; 1359 // We have found the basket containing this entry.; 1360 // make sure basket buffers are in memory.; 1361 basket = fCurrentBasket;; 1362 first = fFirstBasketEntry;; 1363 return fReadBasket;; 1364 } else {; 1365 if ((entry < fFirstEntry) || (entry >= fEntryNumber)) {; 1366 return -1;; 1367 }; 1368 first = fFirstBasketEntry;; 1369 Long64_t last = fNextBasketEntry - 1;; 1370 // Are we still in the same ReadBasket?; 1371 if ((entry < first) || (entry > last)) {; 1372 fReadBasket = TMath::BinarySearch(fWriteBasket + 1, fBasketEntry, entry);; 1373 if (fReadBasket < 0) {; 1374 fNextBasketEntry = -1;; 1375 Error(""GetBasketAndFirst"", ""In the branch %s, no basket contains the entry %lld\n"", GetName(), entry);; 1376 return -2;; 1377 }; 1378 if (fReadBasket == fWriteBasket) {; 1379 fNextBasketEntry = fEntryNumber;; 1380 } else {; 1381 fNextBasketEntry = fBasketEntry[fReadBasket",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:48033,update,updatedNext,48033,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['update'],['updatedNext']
Deployability,"const; TGeoManager*GetGeometry(const TString& filename); TGeoManager*GetGeometryByAlias(const TString& alias); TEveScene*GetGlobalScene() const; TEveSelection*GetHighlight() const; Bool_tGetKeepEmptyCont() const; TGListTree*GetListTree() const; TEveGListTreeEditorFrame*GetLTEFrame() const; TMacro*GetMacro(const char* name) const; TFolder*GetMacroFolder() const; TGWindow*GetMainWindow() const; TEveElementList*GetOrphanage() const; TEveSceneList*GetScenes() const; TEveSelection*GetSelection() const; TGStatusBar*GetStatusBar() const; Bool_tGetUseOrphanage() const; TEveViewerList*GetViewers() const; Bool_tGetVizDBReplace() const; Bool_tGetVizDBUpdate() const; TEveWindowManager*GetWindowManager() const; Bool_tInsertVizDBEntry(const TString& tag, TEveElement* model); Bool_tInsertVizDBEntry(const TString& tag, TEveElement* model, Bool_t replace, Bool_t update); virtual TClass*IsA() const; voidLoadVizDB(const TString& filename); voidLoadVizDB(const TString& filename, Bool_t replace, Bool_t update); voidPreDeleteElement(TEveElement* element); voidRedraw3D(Bool_t resetCameras = kFALSE, Bool_t dropLogicals = kFALSE); voidRegisterGeometryAlias(const TString& alias, const TString& filename); voidRegisterRedraw3D(); voidRemoveElement(TEveElement* element, TEveElement* parent); voidRemoveFromListTree(TEveElement* element, TGListTree* lt, TGListTreeItem* lti); voidSaveVizDB(const TString& filename); voidScenesChanged(TEveElement::List_t& scenes); voidSetCurrentEvent(TEveEventManager* mgr); voidSetKeepEmptyCont(Bool_t k); voidSetStatusLine(const char* text); voidSetUseOrphanage(Bool_t o); voidSetVizDBReplace(Bool_t r); voidSetVizDBUpdate(Bool_t u); virtual voidShowMembers(TMemberInspector& insp) const; TEveScene*SpawnNewScene(const char* name, const char* title = """"); TEveViewer*SpawnNewViewer(const char* name, const char* title = """", Bool_t embed = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static voidTerminate(); TEveManager(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveManager.html:2649,update,update,2649,root/html602/TEveManager.html,https://root.cern,https://root.cern/root/html602/TEveManager.html,2,['update'],['update']
Deployability,"const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; The data can be set later on with the SetData method. In case the data size is not known, better using the default of zero or the next constructor later on. The default interpolation type is Cubic spline ; Definition at line 40 of file Interpolator.cxx. ◆ Interpolator() [2/4]. ROOT::Math::Interpolator::Interpolator ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ; The method will compute a continuous interpolating function \( y(x) \) such that \( y_i = y ( x_i )\). The default interpolation type is Cubic spline ; Definition at line 45 of file Interpolator.cxx. ◆ ~Interpolator(). ROOT::Math::Interpolator::~Interpolator ; (; ). virtual . Definition at line 58 of file Interpolator.cxx. ◆ Interpolator() [3/4]. ROOT::Math::Interpolator::Interpolator ; (; const Interpolator & ; ). delete . ◆ Interpolator() [4/4]. ROOT::Math::Interpolator::Interpolator ; (; Interpolator && ; ). delete . Member Function Documentation. ◆ Deriv(). double ROOT::Math::Interpolator::Deriv ; (; double ; x); const. Return the derivative of the interpolated function at point x. ; Definition at line 81 of file Interpolator.cxx. ◆ Deriv2(). double ROOT::Math::Interpolator::Deriv2 ; (; double ; x); const. Return the second derivative of the interpolated function at point x. ; Definition at line 87 of file Interpolator.cxx. ◆ Eval(). double ROOT::Math::Interpolator::Eval ; (; double ; x); const. Return the interpolated value at po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:3708,continuous,continuous,3708,doc/master/classROOT_1_1Math_1_1Interpolator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html,1,['continuous'],['continuous']
Deployability,"const;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoName, std::string options, int pad, EColor color);  for monitoring ;  ; EnumRegularization regularization () const;  some regularization of the DNN is turned on? ;  ; int repetitions () const;  how many steps have to be gone until the batch is changed ;  ; template<typename Iterator > ; void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions);  set the drop-out configuration (layer-wise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTraining ();  ; size_t testRepetitions () const;  how often is the test data tested ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; std::vector< double > m_ams;  ; double m_cutValue;  ; std::string m_fileNameNetConfig;  ; std::string m_fileNameResult;  ; std::vector< double > m_input;  ; std::vector< double > m_output;  ; std::vector< Pattern > * m_pResultPatternContainer;  ; size_t m_scaleToNumEvents;  ; std::vector< double > m_significances;  ; double m_sumOfBkgWeights;  ; double m_sumOfSigWeights;  ; std::vector< double > m_targets;  ; std::vector< double > m_weights;  ;  Public Attributes inherited from TMVA::DNN::Settings; size_t count_dE;  ; size_t count_E;  ; size_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:4466,configurat,configuration,4466,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['configurat'],['configuration']
Deployability,"const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:45566,integrat,integration,45566,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,84,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:8080,configurat,configuration,8080,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['configurat'],['configuration']
Deployability,"constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Thu Sep 23 19:59:59 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator2D.html:9839,configurat,configuration,9839,root/html528/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator2D.html,5,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 30 14:33:36 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegrator2D.html:10471,configurat,configuration,10471,root/html602/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html602/RooIntegrator2D.html,5,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"constructor. RooIntegrator2D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = RooIntegrator1D::Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps and conversion tolerance. The integration; limits are taken from the definition in the function binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Constructor with a given function binding, summation rule,; maximum number of steps, conversion tolerance and an explicit; choice of integration limits on both dimensions. RooIntegrator2D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor with a function binding and a configuration object.; The integration limits are taken from the definition in the function; binding. RooIntegrator2D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, const RooNumIntConfig& config); Constructor with a function binding, a configuration object and; an explicit definition of the integration limits. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function and configuration. Needed to support RooNumIntFactory. ~RooIntegrator2D(); Destructor. Bool_t checkLimits() const; Verify that the limits are OK for this integrator (i.e. no open-ended ranges). RooIntegrator2D(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Mar 10 17:17:26 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegrator2D.html:9927,configurat,configuration,9927,root/html534/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html534/RooIntegrator2D.html,5,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"contained in \( w \). ; Reimplemented from RooAbsReal.; Definition at line 470 of file RooAbsAnaConvPdf.cxx. ◆ changeModel(). bool RooAbsAnaConvPdf::changeModel ; (; const RooResolutionModel & ; newModel). virtual . Change the current resolution model to newModel. ; Definition at line 209 of file RooAbsAnaConvPdf.cxx. ◆ Class(). static TClass * RooAbsAnaConvPdf::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsAnaConvPdf::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsAnaConvPdf::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file RooAbsAnaConvPdf.h. ◆ coefAnalyticalIntegral(). double RooAbsAnaConvPdf::coefAnalyticalIntegral ; (; Int_t ; coef, . Int_t ; code, . const char * ; rangeName = nullptr . ); const. virtual . Default implementation of function implementing advertised integrals. ; Only the pass-through scenario (no integration) is implemented. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, and RooNonCPEigenDecay.; Definition at line 546 of file RooAbsAnaConvPdf.cxx. ◆ coefficient(). virtual double RooAbsAnaConvPdf::coefficient ; (; Int_t ; basisIndex); const. pure virtual . Implemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, and RooNonCPEigenDecay. ◆ coefVars(). RooFit::OwningPtr< RooArgSet > RooAbsAnaConvPdf::coefVars ; (; Int_t ; coefIdx); const. virtual . Return set of parameters with are used exclusively by the coefficient functions. ; Reimplemented in RooBDecay.; Definition at line 619 of file RooAbsAnaConvPdf.cxx. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooAbsAnaConvPdf::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); const. overridevirtual . Reimplemented from RooAbsArg.; Definition at line 669 of file RooAbsAnaConvPdf.cxx. ◆ convVar() [1/2]. RooAbsRealLValue * RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:82153,integrat,integration,82153,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['integrat'],['integration']
Deployability,"continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double rangeNevt(0) ;; 2135 for (const auto& riter : rangeLim) {; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:103956,integrat,integration,103956,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integration']
Deployability,"contour, suitable for plotting with a graphics routine or by hand (using MnPlot, see [api:plot]). The points are given in counter-clockwise order around the contour. Only one contour is calculated per command, and the level is \(\displaystyle F_{\mathrm{min}} + \mbox{up}\). where \(\mbox{up}\) is the return value of FCNBase::up() specified by the user (usually 1.0 by default). The number of points to be calculated is chosen by the user (default is 20). As a by-product, \(\mbox{CONTOURS}\) provides the \(\mbox{MINOS}\) errors of the two parameters in question, since these are just the extreme points of the contour (use the MnContours::contour(…) method in order to get the points of the contour and the ones of the \(\mbox{MINOS}\) errors). MnContours::operator() returns a std::vector\(<\)std::pair\(<\)double,double\(> >\) of (x,y) points. Using MnPlot::operator() will generate a text graphics plot in the terminal.; 3 M installation; 3.1 M releases; To follow the current release process the user is referred to the M homepage @bib-C++MINUIT.; M was re–implemented in from 2002–2004, but the functionality is largely compatible with the one of the version. The usage is different in the sense that the re–write from to was done by its signification and not literally (with minor exceptions). Applications such as \(\mbox{MIGRAD}\) have a corresponding class MnMigrad, M “commands” became classes or methods of classes according to their purpose. Users familiar with the version of M , who have not yet used releases from the version, should however read this manual, in order to adapt to the changes as well as to discover the new features and easier ways of using old features.; 3.2 Install M using autoconf/make; For each release of M a tar.gz file is provided for downloading from the M homepage @bib-C++MINUIT. For non-UNIX platforms please refer to the M homepage.; The necessary steps to follow are:. download the tar.gz by clicking on it from the release page; unzip it:; $ unzip Mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:26786,release,releases,26786,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['release'],"['release', 'releases']"
Deployability,"copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooNumConvolution*_conv! Actual convolution calculation; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvPdf.html:44552,integrat,integration,44552,root/html602/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html602/RooNumConvPdf.html,2,['integrat'],['integration']
Deployability,"copy style; 3055 rhs.TAttLine::Copy(*this);; 3056 rhs.TAttFill::Copy(*this);; 3057 rhs.TAttMarker::Copy(*this);; 3058 }; 3059 ; 3060 return *this;; 3061}; 3062 ; 3063////////////////////////////////////////////////////////////////////////////////; 3064/// Paints this TEfficiency object; 3065///; 3066/// For details on the possible option see Draw(Option_t*); 3067///; 3068/// Note for 1D classes; 3069/// In 1D the TEfficiency uses a TGraphAsymmErrors for drawing; 3070/// The TGraph is created only the first time Paint is used. The user can manipulate the; 3071/// TGraph via the method TEfficiency::GetPaintedGraph(); 3072/// The TGraph creates behing an histogram for the axis. The histogram is created also only the first time.; 3073/// If the axis needs to be updated because in the meantime the class changed use this trick; 3074/// which will trigger a re-calculation of the axis of the graph; 3075/// TEfficiency::GetPaintedGraph()->Set(0); 3076///; 3077/// Note that in order to access the painted graph via GetPaintedGraph() you need either to call Paint or better; 3078/// gPad->Update();; 3079///; 3080 ; 3081void TEfficiency::Paint(const Option_t* opt); 3082{; 3083 ; 3084 ; 3085 if(!gPad); 3086 return;; 3087 ; 3088 TString option(opt);; 3089 option.ToUpper();; 3090 ; 3091 ; 3092 //use TGraphAsymmErrors for painting; 3093 if(GetDimension() == 1) {; 3094 if(!fPaintGraph) {; 3095 fPaintGraph = CreateGraph(opt);; 3096 }; 3097 else; 3098 // update existing graph already created; 3099 FillGraph(fPaintGraph, opt);; 3100 ; 3101 //paint graph; 3102 fPaintGraph->Paint(opt);; 3103 // paint all associated functions; 3104 if (fFunctions) {; 3105 // paint box with fit parameters; 3106 // the fit statistics will be painted if gStyle->SetOptFit(1) has been; 3107 // called by the user; 3108 TIter next(fFunctions);; 3109 TObject *obj = nullptr;; 3110 while ((obj = next())) {; 3111 if (obj->InheritsFrom(TF1::Class())) {; 3112 fPaintGraph->PaintStats((TF1 *)obj);; 3113 ((TF1 *)obj)->Paint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:122383,update,updated,122383,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['update'],['updated']
Deployability,"created basis functions; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDecay.html:41050,integrat,integration,41050,root/html534/RooDecay.html,https://root.cern,https://root.cern/root/html534/RooDecay.html,1,['integrat'],['integration']
Deployability,"created basis functions; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBMixDecay.html:41282,integrat,integration,41282,root/html534/RooBMixDecay.html,https://root.cern,https://root.cern/root/html534/RooBMixDecay.html,1,['integrat'],['integration']
Deployability,"created; 629 const std::string title = std::string(""Integral of "") + integrand->GetTitle();; 630 const std::string name = std::string(integrand->GetName()) + integrand->integralNameSuffix(innerSet,nset,rangeName).Data();; 631 ; 632 std::unique_ptr<RooAbsReal> innerIntegral = std::move(integral);; 633 ; 634 // Construct innermost integral; 635 integral = std::make_unique<RooRealIntegral>(name.c_str(),title.c_str(),*integrand,innerSet,nset,cfg,rangeName);; 636 ; 637 // Integral of integral takes ownership of innermost integral; 638 if (innerIntegral) {; 639 integral->addOwnedComponents(std::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.emp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:24641,integrat,integration,24641,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,4,['integrat'],"['integrate', 'integrated', 'integration']"
Deployability,croTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TListOfFunctions*fGlobalFunctionsList of global functions; TListOfDataMembers*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:19979,release,release,19979,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['release'],['release']
Deployability,"cs); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEvePointSet::SetTitle(const char* t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEvePointSetProjected(); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEvePointSet::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePointSetProjected.html:21419,update,update,21419,root/html602/TEvePointSetProjected.html,https://root.cern,https://root.cern/root/html602/TEvePointSetProjected.html,4,['update'],['update']
Deployability,"ct ; Reimplemented from TConditionImp.; Definition at line 70 of file TWin32Condition.h. ◆ Signal(). Int_t TWin32Condition::Signal ; (; ). overridevirtual . If one or more threads have called Wait(), Signal() wakes up at least one of them, possibly more. ; See POSIX threads documentation for details. ; Implements TConditionImp.; Definition at line 173 of file TWin32Condition.cxx. ◆ Streamer(). void TWin32Condition::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TConditionImp. ◆ StreamerNVirtual(). void TWin32Condition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file TWin32Condition.h. ◆ TimedWait(). Int_t TWin32Condition::TimedWait ; (; ULong_t ; secs, . ULong_t ; nanoSecs = 0 . ). overridevirtual . TimedWait() is given an absolute time to wait until. ; To wait for a relative time from now, use TThread::GetTime(). See POSIX threads documentation for why absolute times are better than relative. Returns 0 if successfully signalled, 1 if time expired. ; Implements TConditionImp.; Definition at line 115 of file TWin32Condition.cxx. ◆ Wait(). Int_t TWin32Condition::Wait ; (; ). overridevirtual . Wait for the condition variable to be signalled. ; The mutex is implicitely released before waiting and locked again after waking up. If Wait() is called by multiple threads, a signal may wake up more than one thread. See POSIX threads documentation for details. ; Implements TConditionImp.; Definition at line 66 of file TWin32Condition.cxx. Member Data Documentation. ◆ fCond. pthread_cond_t TWin32Condition::fCond. private . Definition at line 58 of file TWin32Condition.h. ◆ fMutex. TWin32Mutex* TWin32Condition::fMutex. private . Definition at line 59 of file TWin32Condition.h. core/thread/inc/TWin32Condition.h; core/thread/src/TWin32Condition.cxx. TWin32Condition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Condition.html:13739,release,released,13739,doc/master/classTWin32Condition.html,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html,1,['release'],['released']
Deployability,"ct ; Reimplemented from TObject.; Definition at line 77 of file TStatistic.h. ◆ ls(). void TStatistic::ls ; (; Option_t * ; option = """"); const. inlineoverridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 75 of file TStatistic.h. ◆ Merge(). Int_t TStatistic::Merge ; (; TCollection * ; in). Merge implementation of TStatistic. ; Parameters. [in]inOther TStatistic objects to be added to the current one. The function merges the statistics of all objects together to form a new one. Merging quantities is done via simple addition for the following class data members:; number of entries fN; the sum of weights fW; the sum of squared weights fW2; the sum of (value*weight) fM. The sum of squared (value*weight) pairs fM2 is updated using the same formula as in TStatistic::Fill() function.; The minimum(maximum) is updated by checking that the minimum(maximum) of the next TStatistic object in the queue is either less(greater) than the current minimum(maximum). ; Definition at line 137 of file TStatistic.cxx. ◆ Print(). void TStatistic::Print ; (; Option_t * ; = """"); const. overridevirtual . Print the content of the object. ; Prints the statistics held by the object in one line. These include the mean, mean error, RMS, the total number of values, the minimum and the maximum. ; Reimplemented from TObject.; Definition at line 115 of file TStatistic.cxx. ◆ Streamer(). void TStatistic::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStatistic::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file TStatistic.h. Member Data Documentation. ◆ fM. Double_t TStatistic::fM. private . Sum of elements (i.e. sum of (val * weight) pairs. ; Definition at line 40 of file TStatistic.h. ◆ fM2. Double_t TStatistic::fM2. private . Seco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatistic.html:17398,update,updated,17398,doc/master/classTStatistic.html,https://root.cern,https://root.cern/doc/master/classTStatistic.html,1,['update'],['updated']
Deployability,"ct into terms that can be calculated independently. RooAbsReal* processProductTerm(const RooArgSet* nset, const RooArgSet* iset, const char* isetRangeName, const RooArgSet* term, const RooArgSet& termNSet, const RooArgSet& termISet, Bool_t& isOwned, Bool_t forceWrap = kFALSE) const; Calculate integrals of factorized product terms over observables iset while normalized; to observables in nset. const char* makeRGPPName(const char* pfx, const RooArgSet& term, const RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; Make an appropriate automatic name for a RooGenProdProj object in getPartIntList(). Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all observables for internal integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooProdPdf implements two strategies in implementing analytical integrals. First, PDF components whose entire set of dependents are requested to be integrated; can be dropped from the product, as they will integrate out to 1 by construction. Second, RooProdPdf queries each remaining component PDF for its analytical integration; capability of the requested set ('allVars'). It finds the largest common set of variables; that can be integrated by all remaining components. If such a set exists, it reconfirms that; each component is capable of analytically integrating the common set, and combines the components; individual integration codes into a single integration code valid for RooProdPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Bool_t checkObservables(const RooArgSet* nset) const; Obsolete. RooAbsPdf::ExtendMode extendMode() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:49789,integrat,integration,49789,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,2,['integrat'],['integration']
Deployability,"ct is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 746 of file RooRealIntegral.cxx. ◆ DeclFileName(). static const char * RooRealIntegral::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 150 of file RooRealIntegral.h. ◆ evaluate(). double RooRealIntegral::evaluate ; (; ); const. overrideprotectedvirtual . Perform the integration and return the result. ; Implements RooAbsReal.; Definition at line 802 of file RooRealIntegral.cxx. ◆ funcNormSet(). RooArgSet const * RooRealIntegral::funcNormSet ; (; ); const. inline . Definition at line 83 of file RooRealIntegral.h. ◆ getAllowComponentSelection(). bool RooRealIntegral::getAllowComponentSelection ; (; ); const. Check if component selection is allowed. ; Definition at line 1024 of file RooRealIntegral.cxx. ◆ getCacheAllNumeric(). Int_t RooRealIntegral::getCacheAllNumeric ; (; ). static . Return minimum dimensions of numeric integration for which values are cached. ; Definition at line 1173 of file RooRealIntegral.cxx. ◆ getCacheNumeric(). bool RooRealIntegral::getCacheNumeric ; (; ). inline . Definition at line 60 of file RooRealIntegral.h. ◆ getValV(). double RooRealIntegral::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:68681,integrat,integration,68681,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Deployability,"ct right; = j --- move object forward; = k --- move object backward; = l --- move object left; = x a --- rotate about x; = y b --- rotate about y; = z c --- rotate about z; = 1 2 3 --- autorotate about x; = 4 5 6 --- autorotate about y; = 7 8 9 --- autorotate about z; = [ ] { } --- adjust focus; Example:. {; gSystem->Load(""libX3d"");; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = new TFile(""hsimple.root"");; TTree *ntuple = (TTree*)f->Get(""ntuple"");; ntuple->SetMarkerColor(kYellow);; ntuple->Draw(""px:py:pz"");; TViewerX3D *x3d = new TViewerX3D(c1,"""");; for (Int_t i=0;i<500;i++) {; Int_t px = i%500;; Int_t py = (2*i)%200;; x3d->ExecCommand(px,py,0); //rotate; if (i%20 >10) x3d->ExecCommand(px,py,'j'); //zoom; if (i%20 <10) x3d->ExecCommand(px,py,'k'); //unzoom; }; }. void GetPosition(Float_t& longitude, Float_t& latitude, Float_t& psi); Get position. void DeleteX3DWindow(); Close X3D window. void Update(); Update X3D viewer. Bool_t ProcessFrameMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. Bool_t HandleContainerButton(Event_t* ev); After button release get current position and update associated pad. TViewerX3D(TVirtualPad* pad). void Iconify(); { }. void Show(); { fMainFrame->MapRaised(); }. Bool_t PreferLocalFrame() const; TVirtualViewer3D interface. { return kFALSE; }. Bool_t BuildingScene() const; { return fBuildingScene; }. Bool_t OpenComposite(const TBuffer3D& , Bool_t* = 0); Composite shapes not supported on this viewer currently - ignore.; Will result in a set of component shapes. { return kTRUE; }. void CloseComposite(); {}. void AddCompositeOp(UInt_t ); {}. » Author: Rene Brun 05/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x3d:$Id: TViewerX3D.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-10-01 15:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TViewerX3D.html:10178,release,release,10178,root/html528/TViewerX3D.html,https://root.cern,https://root.cern/root/html528/TViewerX3D.html,2,"['release', 'update']","['release', 'update']"
Deployability,"ct right; = j --- move object forward; = k --- move object backward; = l --- move object left; = x a --- rotate about x; = y b --- rotate about y; = z c --- rotate about z; = 1 2 3 --- autorotate about x; = 4 5 6 --- autorotate about y; = 7 8 9 --- autorotate about z; = [ ] { } --- adjust focus; Example:. {; gSystem->Load(""libX3d"");; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = new TFile(""hsimple.root"");; TTree *ntuple = (TTree*)f->Get(""ntuple"");; ntuple->SetMarkerColor(kYellow);; ntuple->Draw(""px:py:pz"");; TViewerX3D *x3d = new TViewerX3D(c1,"""");; for (Int_t i=0;i<500;i++) {; Int_t px = i%500;; Int_t py = (2*i)%200;; x3d->ExecCommand(px,py,0); //rotate; if (i%20 >10) x3d->ExecCommand(px,py,'j'); //zoom; if (i%20 <10) x3d->ExecCommand(px,py,'k'); //unzoom; }; }. void GetPosition(Float_t& longitude, Float_t& latitude, Float_t& psi); Get position. void DeleteX3DWindow(); Close X3D window. void Update(); Update X3D viewer. Bool_t ProcessFrameMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. Bool_t HandleContainerButton(Event_t* ev); After button release get current position and update associated pad. TViewerX3D(TVirtualPad* pad). void Iconify(); { }. void Show(); { fMainFrame->MapRaised(); }. Bool_t PreferLocalFrame() const; TVirtualViewer3D interface. { return kFALSE; }. Bool_t BuildingScene() const; { return fBuildingScene; }. Bool_t OpenComposite(const TBuffer3D& , Bool_t* = 0); Composite shapes not supported on this viewer currently - ignore.; Will result in a set of component shapes. { return kTRUE; }. void CloseComposite(); {}. void AddCompositeOp(UInt_t ); {}. » Author: Rene Brun 05/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x3d:$Id: TViewerX3D.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TViewerX3D.html:10247,release,release,10247,root/html530/TViewerX3D.html,https://root.cern,https://root.cern/root/html530/TViewerX3D.html,2,"['release', 'update']","['release', 'update']"
Deployability,"ct right; = j --- move object forward; = k --- move object backward; = l --- move object left; = x a --- rotate about x; = y b --- rotate about y; = z c --- rotate about z; = 1 2 3 --- autorotate about x; = 4 5 6 --- autorotate about y; = 7 8 9 --- autorotate about z; = [ ] { } --- adjust focus; Example:. {; gSystem->Load(""libX3d"");; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = new TFile(""hsimple.root"");; TTree *ntuple = (TTree*)f->Get(""ntuple"");; ntuple->SetMarkerColor(kYellow);; ntuple->Draw(""px:py:pz"");; TViewerX3D *x3d = new TViewerX3D(c1,"""");; for (Int_t i=0;i<500;i++) {; Int_t px = i%500;; Int_t py = (2*i)%200;; x3d->ExecCommand(px,py,0); //rotate; if (i%20 >10) x3d->ExecCommand(px,py,'j'); //zoom; if (i%20 <10) x3d->ExecCommand(px,py,'k'); //unzoom; }; }. void GetPosition(Float_t& longitude, Float_t& latitude, Float_t& psi); Get position. void DeleteX3DWindow(); Close X3D window. void Update(); Update X3D viewer. Bool_t ProcessFrameMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. Bool_t HandleContainerButton(Event_t* ev); After button release get current position and update associated pad. TViewerX3D(TVirtualPad* pad). void Iconify(); { }. void Show(); { fMainFrame->MapRaised(); }. Bool_t PreferLocalFrame() const; TVirtualViewer3D interface. { return kFALSE; }. Bool_t BuildingScene() const; { return fBuildingScene; }. Bool_t OpenComposite(const TBuffer3D& , Bool_t* = 0); Composite shapes not supported on this viewer currently - ignore.; Will result in a set of component shapes. { return kTRUE; }. void CloseComposite(); {}. void AddCompositeOp(UInt_t ); {}. » Author: Rene Brun 05/09/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/x3d:$Id: TViewerX3D.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TViewerX3D.html:10247,release,release,10247,root/html532/TViewerX3D.html,https://root.cern,https://root.cern/root/html532/TViewerX3D.html,2,"['release', 'update']","['release', 'update']"
Deployability,"ct) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:17061,integrat,integration,17061,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ct.; Definition at line 2387 of file TEfficiency.cxx. ◆ Draw(). void TEfficiency::Draw ; (; Option_t * ; opt = """"). overridevirtual . Draws the current TEfficiency object. ; Parameters. [in]opt; 1-dimensional case: same options as TGraphAsymmErrors::Draw() but as default ""AP"" is used; 2-dimensional case: by default use an histogram and in this case same options as TH2::Draw() if using instad option ""GRAPH"" a TGraph2DAsymmErrors is used and the same options as for TGraph2D applies; 3-dimensional case: not yet supported. Specific TEfficiency drawing options:; E0 - plot bins where the total number of passed events is zero (the error interval will be [0,1] ) . Reimplemented from TObject.; Definition at line 2410 of file TEfficiency.cxx. ◆ ExecuteEvent(). void TEfficiency::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when the drawn class is clicked with the locator If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released. Forward the call to the underlying graph ; Reimplemented from TObject.; Definition at line 2444 of file TEfficiency.cxx. ◆ FeldmanCousins(). Double_t TEfficiency::FeldmanCousins ; (; Double_t ; total, . Double_t ; passed, . Double_t ; level, . Bool_t ; bUpper . ). static . Calculates the boundaries for the frequentist Feldman-Cousins interval. ; Parameters. totalnumber of total events ; passed0 <= number of passed events <= total ; levelconfidence level ; bUppertrue - upper boundary is returned false - lower boundary is returned . Definition at line 1172 of file TEfficiency.cxx. ◆ FeldmanCousinsInterval(). Bool_t TEfficiency::FeldmanCousinsInterval ; (; Double_t ; total, . Double_t ; passed, . Double_t ; level, . Double_t & ; lower, . Double_t & ; upper . ). static . Calculates the interval boundar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:88229,release,released,88229,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['release'],['released']
Deployability,"ct::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidregisterSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()); voidstoreDetailedOutput(TNamed& object); voidstoreSummaryOutput(const RooArgSet& vars). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooLinkedList*_detailData!; Bool_t_ownDetailData; Bool_t_storeDetails; RooDataSet*_summaryData!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsStudy(); Destructor. void registerSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()). void storeSummaryOutput(const RooArgSet& vars). void storeDetailedOutput(TNamed& object). void aggregateSummaryOutput(TList* chunkList). RooAbsStudy* clone(const char* newname = """") const. TObject* Clone(const char* newname = """") const; { return clone(newname) ; }. Bool_t attach(RooWorkspace& ); { return kFALSE ; }. Bool_t initialize(); { return kFALSE ; }. Bool_t execute(); { return kFALSE ; }. Bool_t finalize(); { return 0 ; }. void storeDetailedOutput(Bool_t flag); { _storeDetails = flag ; }. RooDataSet* summaryData(); { return _summaryData ; }. RooLinkedList* detailedData(); { return _detailData ; }. void releaseDetailData(); { _ownDetailData = kFALSE ; }. void dump(); {}. » Last changed: Mon Jul 4 15:21:32 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsStudy.html:7151,release,releaseDetailData,7151,root/html530/RooAbsStudy.html,https://root.cern,https://root.cern/root/html530/RooAbsStudy.html,1,['release'],['releaseDetailData']
Deployability,"ct::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidregisterSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()); voidstoreDetailedOutput(TNamed& object); voidstoreSummaryOutput(const RooArgSet& vars). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooLinkedList*_detailData!; Bool_t_ownDetailData; Bool_t_storeDetails; RooDataSet*_summaryData!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsStudy(); Destructor. void registerSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()). void storeSummaryOutput(const RooArgSet& vars). void storeDetailedOutput(TNamed& object). void aggregateSummaryOutput(TList* chunkList). RooAbsStudy* clone(const char* newname = """") const. TObject* Clone(const char* newname = """") const; { return clone(newname) ; }. Bool_t attach(RooWorkspace& ); { return kFALSE ; }. Bool_t initialize(); { return kFALSE ; }. Bool_t execute(); { return kFALSE ; }. Bool_t finalize(); { return 0 ; }. void storeDetailedOutput(Bool_t flag); { _storeDetails = flag ; }. RooDataSet* summaryData(); { return _summaryData ; }. RooLinkedList* detailedData(); { return _detailData ; }. void releaseDetailData(); { _ownDetailData = kFALSE ; }. void dump(); {}. » Last changed: Thu Nov 3 20:06:51 2011 » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsStudy.html:7151,release,releaseDetailData,7151,root/html532/RooAbsStudy.html,https://root.cern,https://root.cern/root/html532/RooAbsStudy.html,1,['release'],['releaseDetailData']
Deployability,"ct::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooArgSet_compSplitCatSetList of owned composite splitting categories; list<RooSuperCategory*>_fitCatListThe supercategories that we built; RooArgSet_protoPdfSetSet of prototype PDFS; TList_retiredCustomizerListRetired customizer from previous builds (own their PDF branch nodes); list<RooSimultaneous*>_simPdfListThe simpdfs that we built; RooArgSet_splitNodeListList of owned split nodes; RooArgSet_splitNodeListOwnedList of all split nodes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimPdfBuilder(const RooArgSet& pdfProtoList). RooArgSet* createProtoBuildConfig(); Make RooArgSet of configuration objects. void addSpecializations(const RooArgSet& specSet). RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooArgSet& dependents, const RooArgSet* auxSplitCats = 0, Bool_t verbose = kFALSE); Initialize needed components. ~RooSimPdfBuilder(). RooSimPdfBuilder(const RooArgSet& pdfProtoList). RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooArgSet& dependents, const RooArgSet* auxSplitCats = 0, Bool_t verbose = kFALSE). return buildPdf(buildConfig,*dataSet->get(),&auxSplitCats,verbose). RooSimultaneous* buildPdf(const RooArgSet& buildConfig, const RooArgSet& dependents, const RooArgSet& auxSplitCats, Bool_t verbose = kFALSE). const RooArgSet& splitLeafList(); { return _splitNodeList; }. » Last changed: Tue Jun 2 15:33:49 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSimPdfBuilder.html:20244,configurat,configuration,20244,root/html604/RooSimPdfBuilder.html,https://root.cern,https://root.cern/root/html604/RooSimPdfBuilder.html,1,['configurat'],['configuration']
Deployability,"ct::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::Initializedstatic Bool_t Initialized()Return kTRUE if the TROOT object has been initialized.Definition TROOT.cxx:2910; TROOT::AddExtraInterpreterArgsstatic const std::vector< std::string > & AddExtraInterpreterArgs(const std::vector< std::string > &args)Provide command line arguments to the interpreter construction.Definition TROOT.cxx:2956; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TRintDefinition TRint.h:31; TRint::SetEchoModevoid SetEchoMode(Bool_t mode) overrideSet console mode:Definition TRint.cxx:752; TRint::HandleTermInputBool_t HandleTermInput() overrideHandle input coming from terminal.Definition TRint.cxx:611; TRint::fInterruptBool_t fInterruptDefinition TRint.h:38; TRint::Runvoid Run(Bool_t retrn=kFALSE) overrideMain application eventloop.Definition TRint.cxx:384; TRint::ProcessLineNrLongptr_t ProcessLineNr(const char *filestem, const char *line, Int_t *error=nullptr)Calls TRint::ProcessLine() possibly prepending a #line directive for better diagnostics.Definition TRint.cxx:791; TRint::SetPromptvirtual const char * SetPrompt(const char *newPrompt)Set a new default prompt.Definition TRint.cxx:595; TRint::Terminatevirtual void Terminate(int status) overrideTerminate the application.Definition TRint.cxx:722; TRint::fPromptchar fPrompt[64]Definition TRi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:37615,install,installation,37615,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['install'],['installation']
Deployability,"ct::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooMultiGenFunction*_func! ROOT::Math multi-parameter function binding; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; TString_intNameIntegrand name; ROOT::Math::AdaptiveIntegratorMultiDim*_integrator; Int_t_nErrorNumber of error occurrences; Int_t_nWarnMax number of warnings to be issued ;; Int_t_nmaxMax number of divisions; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveIntegratorND.html:7232,integrat,integration,7232,root/html602/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveIntegratorND.html,4,['integrat'],"['integration', 'integrator']"
Deployability,"ct::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; vector<RooAbsArg*>_floatParamVec; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<pair<string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinuit.html:8981,install,installed,8981,root/html602/RooMinuit.html,https://root.cern,https://root.cern/root/html602/RooMinuit.html,2,['install'],['installed']
Deployability,ctCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAb,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsSelfCachedPdf.html:39203,integrat,integrated,39203,root/html526/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsSelfCachedPdf.html,3,['integrat'],['integrated']
Deployability,ctCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRoo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsSelfCachedPdf.html:39650,integrat,integrated,39650,root/html528/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsSelfCachedPdf.html,3,['integrat'],['integrated']
Deployability,ctCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsSelfCachedPdf.html:40119,integrat,integrated,40119,root/html530/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsSelfCachedPdf.html,3,['integrat'],['integrated']
Deployability,ctCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branc,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:40522,integrat,integrated,40522,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,3,['integrat'],['integrated']
Deployability,"ctCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3Binding_double_unsigned_int_double_double_.html:33577,integrat,integrator,33577,root/html532/RooCFunction3Binding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3Binding_double_unsigned_int_double_double_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ctTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCacheManager_RooAbsCacheElement_.html:3369,integrat,integration,3369,root/html528/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html528/RooCacheManager_RooAbsCacheElement_.html,1,['integrat'],['integration']
Deployability,"cted Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveCalo.h>. Inheritance diagram for TEveCaloViz:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveCaloViz() [1/2]. TEveCaloViz::TEveCaloViz ; (; const TEveCaloViz & ; ). privatedelete . ◆ TEveCaloViz() [2/2]. TEveCaloViz::TEveCaloViz ; (; TEveCaloData * ; data = nullptr, . const char * ; n = ""TEveCaloViz"", . const char * ; t = """" . ). Definition at line 39 of file TEveCalo.cxx. ◆ ~TEveCaloViz(). TEveCaloViz::~TEveCaloViz ; (; ). override . Destructor. ; Definition at line 78 of file TEveCalo.cxx. Member Function Documentation. ◆ AssertCellIdCache(). Bool_t TEveCaloViz::AssertCellIdCache ; (; ); const. Assert cell id cache is ok. ; Returns true if the cache has been updated. ; Definition at line 293 of file TEveCalo.cxx. ◆ AssertPalette(). TEveRGBAPalette * TEveCaloViz::AssertPalette ; (; ). Make sure the TEveRGBAPalette pointer is not null. ; If it is not set, a new one is instantiated and the range is set to current min/max signal values. ; Definition at line 378 of file TEveCalo.cxx. ◆ AssignCaloVizParameters(). void TEveCaloViz::AssignCaloVizParameters ; (; TEveCaloViz * ; cv). protected . Assign parameters from given model. ; Definition at line 321 of file TEveCalo.cxx. ◆ BuildCellIdCache(). virtual void TEveCaloViz::BuildCellIdCache ; (; ). protectedpure virtual . Implemented in TEveCalo3D, TEveCalo2D, and TEveCaloLego. ◆ CellInEtaPhiRng(). Bool_t TEveCaloViz::CellInEtaPhiRng ; (; TEveCaloData::CellData_t & ; cellData); const. Returns true if given cell is in the ceta phi range. ; Definition at line 307 of file TEveCalo.cxx. ◆ CellSelectionChanged(). virtual void TEveCaloViz::CellSelectionChanged ; (; ). inlinevirtual . Reimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloViz.html:38646,update,updated,38646,doc/master/classTEveCaloViz.html,https://root.cern,https://root.cern/doc/master/classTEveCaloViz.html,1,['update'],['updated']
Deployability,"cted files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen | kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManager.html:15706,update,updates,15706,root/html602/TDataSetManager.html,https://root.cern,https://root.cern/root/html602/TDataSetManager.html,2,['update'],['updates']
Deployability,"cted:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; vector<double>_high; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; vector<double>_low; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__LinInterpVar.html:35172,integrat,integration,35172,root/html602/RooStats__HistFactory__LinInterpVar.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__LinInterpVar.html,2,['integrat'],['integration']
Deployability,"ctedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 57 of file RooGaussian.cxx. ◆ generateEvent(). void RooGaussian::generateEvent ; (; Int_t ; code). overridevirtual . Interface for generation of an event using the algorithm corresponding to the specified code. ; The meaning of each code is defined by the getGenerator() implementation. The default implementation does nothing. ; Reimplemented from RooAbsPdf.; Definition at line 103 of file RooGaussian.cxx. ◆ getAnalyticalIntegral(). Int_t RooGaussian::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 73 of file RooGaussian.cxx. ◆ getGenerator(). Int_t RooGaussian::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussian.html:77668,integrat,integrate,77668,doc/master/classRooGaussian.html,https://root.cern,https://root.cern/doc/master/classRooGaussian.html,3,"['configurat', 'integrat']","['configuration', 'integrate', 'integration']"
Deployability,"cters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting flag. void SetKerning(Bool_t state); Set kerning flag. void SetRotationMatrix(Float_t angle); Set the rotation matrix used to rotate the font outlines. void SetSmoothing(Bool_t state); Set smoothing (anti-aliasing) flag. Int_t SetTextFont(const char* fontname, Int_t italic = 0); Set text font to specified name.; font : font name; italic : the fonts should be slanted. Used for symbol font. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); Set specified font.; List of the currently supported fonts (screen and PostScript). Font ID X11 TTF; 1 : times-medium-i-normal timesi.ttf; 2 : times-bold-r-normal timesbd.ttf; 3 : times-bold-i-normal timesi.ttf; 4 : helvetica-medium-r-normal arial.ttf; 5 : helvetica-medium-o-normal ariali.ttf; 6 : helvetica-bold-r-normal arialbd.ttf; 7 : helvetica-bold-o-normal arialbi.ttf; 8 : courier-medium-r-normal cour.ttf; 9 : courier-medium-o-normal couri.ttf; 10 : courier-bold-r-normal courbd.ttf; 11 : courier-bold-o-normal courbi.ttf; 12 : symbol-medium-r-normal symbol.ttf; 13 : times-medium-r-normal times.ttf; 14 : wingding.ttf; 15 : symbol oblique is emulated from symbol.ttf. void SetTextSize(Float_t textsize); Set current text size. void Version(Int_t& major, Int_t& minor, Int_t& patch). Bool_t GetHinting(). Bool_t GetKerning(). Bool_t GetSmoothing(). Bool_t IsInitialized(). Int_t GetWidth(). Int_t GetAscent(). Int_t GetNumGlyphs(). FT_Matrix * GetRotMatrix(). const FT_BBox & GetBox(). TTGlyph * GetGlyphs(). TTF(); { }. » Author: Olivier Couet 01/10/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/graf:$Id: TTF.h 32449 2010-03-04 10:30:03Z couet $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTF.html:4702,patch,patch,4702,root/html528/TTF.html,https://root.cern,https://root.cern/root/html528/TTF.html,1,['patch'],['patch']
Deployability,"cters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting flag. void SetKerning(Bool_t state); Set kerning flag. void SetRotationMatrix(Float_t angle); Set the rotation matrix used to rotate the font outlines. void SetSmoothing(Bool_t state); Set smoothing (anti-aliasing) flag. Int_t SetTextFont(const char* fontname, Int_t italic = 0); Set text font to specified name.; font : font name; italic : the fonts should be slanted. Used for symbol font. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); Set specified font.; List of the currently supported fonts (screen and PostScript). Font ID X11 TTF; 1 : times-medium-i-normal timesi.ttf; 2 : times-bold-r-normal timesbd.ttf; 3 : times-bold-i-normal timesi.ttf; 4 : helvetica-medium-r-normal arial.ttf; 5 : helvetica-medium-o-normal ariali.ttf; 6 : helvetica-bold-r-normal arialbd.ttf; 7 : helvetica-bold-o-normal arialbi.ttf; 8 : courier-medium-r-normal cour.ttf; 9 : courier-medium-o-normal couri.ttf; 10 : courier-bold-r-normal courbd.ttf; 11 : courier-bold-o-normal courbi.ttf; 12 : symbol-medium-r-normal symbol.ttf; 13 : times-medium-r-normal times.ttf; 14 : wingding.ttf; 15 : symbol oblique is emulated from symbol.ttf. void SetTextSize(Float_t textsize); Set current text size. void Version(Int_t& major, Int_t& minor, Int_t& patch). Bool_t GetHinting(). Bool_t GetKerning(). Bool_t GetSmoothing(). Bool_t IsInitialized(). Int_t GetWidth(). Int_t GetAscent(). Int_t GetNumGlyphs(). FT_Matrix * GetRotMatrix(). const FT_BBox & GetBox(). TTGlyph * GetGlyphs(). TTF(); { }. » Author: Olivier Couet 01/10/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/graf:$Id: TTF.h 32449 2010-03-04 10:30:03Z couet $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTF.html:4702,patch,patch,4702,root/html530/TTF.html,https://root.cern,https://root.cern/root/html530/TTF.html,1,['patch'],['patch']
Deployability,"cters in ""string"" in the ""glyphs"" array. void SetHinting(Bool_t state); Set hinting flag. void SetKerning(Bool_t state); Set kerning flag. void SetRotationMatrix(Float_t angle); Set the rotation matrix used to rotate the font outlines. void SetSmoothing(Bool_t state); Set smoothing (anti-aliasing) flag. Int_t SetTextFont(const char* fontname, Int_t italic = 0); Set text font to specified name.; font : font name; italic : the fonts should be slanted. Used for symbol font. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); Set specified font.; List of the currently supported fonts (screen and PostScript). Font ID X11 TTF; 1 : times-medium-i-normal timesi.ttf; 2 : times-bold-r-normal timesbd.ttf; 3 : times-bold-i-normal timesi.ttf; 4 : helvetica-medium-r-normal arial.ttf; 5 : helvetica-medium-o-normal ariali.ttf; 6 : helvetica-bold-r-normal arialbd.ttf; 7 : helvetica-bold-o-normal arialbi.ttf; 8 : courier-medium-r-normal cour.ttf; 9 : courier-medium-o-normal couri.ttf; 10 : courier-bold-r-normal courbd.ttf; 11 : courier-bold-o-normal courbi.ttf; 12 : symbol-medium-r-normal symbol.ttf; 13 : times-medium-r-normal times.ttf; 14 : wingding.ttf; 15 : symbol oblique is emulated from symbol.ttf. void SetTextSize(Float_t textsize); Set current text size. void Version(Int_t& major, Int_t& minor, Int_t& patch). Bool_t GetHinting(). Bool_t GetKerning(). Bool_t GetSmoothing(). Bool_t IsInitialized(). Int_t GetWidth(). Int_t GetAscent(). Int_t GetNumGlyphs(). FT_Matrix * GetRotMatrix(). const FT_BBox & GetBox(). TTGlyph * GetGlyphs(). TTF(); { }. » Author: Olivier Couet 01/10/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/graf:$Id: TTF.h 32449 2010-03-04 10:30:03Z couet $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTF.html:4702,patch,patch,4702,root/html532/TTF.html,https://root.cern,https://root.cern/root/html532/TTF.html,1,['patch'],['patch']
Deployability,"cting as a view on a memory buffer it does not own. ; Definition at line 171 of file RVec.hxx. ◆ report_at_maximum_capacity(). void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inline . Set the array size to N, which the current array must have enough capacity for. ; This does not construct or destroy any elements in the vector.; Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. ; Definition at line 188 of file RVec.hxx. ◆ size(). size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ SizeTypeMax(). static constexpr size_t ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMax ; (; ). inlinestaticconstexprprotected . The maximum value of the Size_T used. ; Definition at line 153 of file RVec.hxx. Member Data Documentation. ◆ fBeginX. void* ROOT::Internal::VecOps::SmallVectorBase::fBeginX. protected . Definition at line 145 of file RVec.hxx. ◆ fCapacity. Size_T ROOT::Internal::VecOps::SmallVectorBase::fCapacity. protected . Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ; Definition at line 150 of file RVec.hxx. ◆ fSize. Size_T ROOT::Internal::VecOps::SmallVectorBase::fSize = 0. protected . Always >= ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:4321,update,update,4321,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,1,['update'],['update']
Deployability,"ction (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:7552,integrat,integration,7552,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"ction = C; Layer 0 DENSE Layer: ( Input = 4 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 2 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 3 DENSE Layer: ( Input = 128 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity Dropout prob. = 0.5; : Using 1600 events for training and 400 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.548477 0.466013 0.191275 0.014698 9061.23 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.431501 0.379356 0.191981 0.0145985 9020.06 0; : 3 | 0.40241 0.379482 0.19151 0.014162 9021.8 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.408996 0.379041 0.192713 0.0146534 8985.76 0; : 5 | 0.41143 0.414316 0.191728 0.014237 9014.55 1; : 6 | 0.385066 0.478603 0.19226 0.0142608 8988.82 2; : 7 | 0.404168 0.388159 0.192259 0.0142353 8987.58 3; : 8 Minimum Test error found - save the configuration ; : 8 | 0.394387 0.377539 0.19273 0.0147168 8988.1 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.386834 0.375541 0.192946 0.014741 8978.44 0; : 10 | 0.381359 0.385778 0.195351 0.0142527 8835 1; : 11 | 0.391916 0.415129 0.193961 0.0143386 8907.56 2; : 12 | 0.390755 0.379468 0.194376 0.0145555 8897.75 3; : 13 | 0.409355 0.396515 0.195082 0.0144231 8856.49 4; : 14 | 0.400917 0.375809 0.194321 0.0142902 8887.36 5; : 15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:47419,configurat,configuration,47419,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['configurat'],['configuration']
Deployability,ction for a particular integrator. ; Integrator name and capabilities are automatically determined from instance passed as 'proto'. The defaultConfig object is associated as the default configuration for the integrator. ; Definition at line 166 of file RooNumIntConfig.cxx. ◆ Class(). static TClass * RooNumIntConfig::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumIntConfig::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumIntConfig::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 87 of file RooNumIntConfig.h. ◆ DeclFileName(). static const char * RooNumIntConfig::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 87 of file RooNumIntConfig.h. ◆ defaultConfig(). RooNumIntConfig & RooNumIntConfig::defaultConfig ; (; ). static . Return reference to instance of default numeric integrator configuration object. ; Definition at line 44 of file RooNumIntConfig.cxx. ◆ defaultPrintStyle(). RooPrintable::StyleOption RooNumIntConfig::defaultPrintStyle ; (; Option_t * ; opt); const. overridevirtual . Reimplemented from RooPrintable.; Definition at line 240 of file RooNumIntConfig.cxx. ◆ epsAbs(). double RooNumIntConfig::epsAbs ; (; ); const. inline . Definition at line 50 of file RooNumIntConfig.h. ◆ epsRel(). double RooNumIntConfig::epsRel ; (; ); const. inline . Definition at line 51 of file RooNumIntConfig.h. ◆ getConfigSection() [1/2]. RooArgSet & RooNumIntConfig::getConfigSection ; (; const char * ; name). Return section with configuration parameters for integrator with given (class) name. ; Definition at line 205 of file RooNumIntConfig.cxx. ◆ getConfigSection() [2/2]. const RooArgSet & RooNumIntConfig::getConfigSection ; (; const char * ; name); const. Retrieve configuration information specific to integrator with given name. ; Definition at line 214 o,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:16943,integrat,integrator,16943,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,ction for a particular integrator. ; Integrator name and capabilities are automatically determined from instance passed as 'proto'. The defaultConfig object is associated as the default configuration for the integrator. ; Definition at line 238 of file RooNumGenConfig.cxx. ◆ Class(). static TClass * RooNumGenConfig::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumGenConfig::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumGenConfig::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 75 of file RooNumGenConfig.h. ◆ DeclFileName(). static const char * RooNumGenConfig::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file RooNumGenConfig.h. ◆ defaultConfig(). RooNumGenConfig & RooNumGenConfig::defaultConfig ; (; ). static . Return reference to instance of default numeric integrator configuration object. ; Definition at line 44 of file RooNumGenConfig.cxx. ◆ defaultPrintStyle(). RooPrintable::StyleOption RooNumGenConfig::defaultPrintStyle ; (; Option_t * ; opt); const. overridevirtual . Reimplemented from RooPrintable.; Definition at line 302 of file RooNumGenConfig.cxx. ◆ getConfigSection() [1/2]. RooArgSet & RooNumGenConfig::getConfigSection ; (; const char * ; name). Return section with configuration parameters for integrator with given (class) name. ; Definition at line 279 of file RooNumGenConfig.cxx. ◆ getConfigSection() [2/2]. const RooArgSet & RooNumGenConfig::getConfigSection ; (; const char * ; name); const. Retrieve configuration information specific to integrator with given name. ; Definition at line 288 of file RooNumGenConfig.cxx. ◆ IsA(). TClass * RooNumGenConfig::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file RooNumGenConfig.h. ◆ meth,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:16674,integrat,integrator,16674,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ction for plotOn() that creates a projection of a function or p.d.f; to be plotted on a RooPlot. Create a new object G that represents the normalized projection:. Integral [ F[x,y,p] , { y } ]; G[x,p] = ---------------------------------; Integral [ F[x,y,p] , { x,y } ]. where F[x,y,p] is the function we represent, ""x"" are the; specified dependentVars, ""y"" are the specified projectedVars, and; ""p"" are our remaining variables (""parameters""). Return a; pointer to the newly created object, or else zero in case of an; error. The caller is responsible for deleting the contents of; cloneSet (which includes the returned projection object). TH1 * fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Fill the ROOT histogram 'hist' with values sampled from this; function at the bin centers. Our value is calculated by first; integrating out any variables in projectedVars and then scaling; the result by scaleFactor. Returns a pointer to the input; histogram, or zero in case of an error. The input histogram can; be any TH1 subclass, and therefore of arbitrary; dimension. Variables are matched with the (x,y,...) dimensions of; the input histogram according to the order in which they appear; in the input plotVars list. If scaleForDensity is true the; histogram is filled with a the functions density rather than; the functions value (i.e. the value at the bin center is multiplied; with bin volume). RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; Fill a RooDataHist with values sampled from this function at the; bin centers. If extendedMode is true, the p.d.f. values is multiplied; by the number of expected events in each bin. An optional scaling by a given scaleFactor can be performed.; Returns a pointer to the input RooDataHi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:39288,integrat,integrating,39288,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['integrat'],['integrating']
Deployability,"ction to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name . ). Save geometry configuration as C++ macro. ; Definition at line 2143 of file RGeomData.cxx. ◆ ScanNodes(). int RGeomDescription::ScanNodes ; (; bool ; only_visible, . int ; maxlvl, . RGeomScanFunc_t ; func . ). private . Iterate over all nodes and call function for visible. ; Definition at line 653 of file RGeomData.cxx. ◆ SearchVisibles(). int RGeomDescription::SearchVisibles ; (; const std::string & ; find, . std::string & ; hjson, . std::string & ; json . ). Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ; Definition at line 1411 of file RGeomData.cxx. ◆ SelectTop(). bool RGeomDescription::SelectTop ; (; const std::vector< std::string > & ; path). Select top node by path Used by the client to change active node Returns true if selected node was changed. ; Definition at line 1946 of file RGeomData.cxx. ◆ SetActiveItem(). bool ROOT::RGeomDescription::SetActiveItem ; (; const std::string & ; itemname",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:24082,configurat,configuration,24082,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['configurat'],['configuration']
Deployability,"ction. RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); Constructor taking name, title and function to be cached and; fixed choice of variable to cache. To control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedReal(const RooCachedReal& other, const char* name = 0); Copy constructor. ~RooCachedReal(); Destructor. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Interface function to create an internal cache object that represent; each cached function configuration. This interface allows to create and; return a class derived from RooAbsCachedReal::FuncCacheElem so that; a derived class fillCacheObject implementation can utilize extra functionality; defined in such a derived cache class. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the external input p.d.f that are not one of; the cache observables. If thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCachedReal.html:40077,configurat,configuration,40077,root/html604/RooCachedReal.html,https://root.cern,https://root.cern/root/html604/RooCachedReal.html,1,['configurat'],['configuration']
Deployability,"ction. RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); Constructor taking name, title and function to be cached and; fixed choice of variable to cache. To control granularity of the; binning of the cache histogram set the desired properties in the; binning named ""cache"" in the observables of the function.; If the fixed set of cache observables does not match the observables; defined in the use context of the p.d.f the cache is still filled; completely. Ee.g. when it is specified to cache x and p and only x; is a observable in the given use context the cache histogram will; store sampled values for all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedReal(const RooCachedReal& other, const char* name = 0); Copy constructor. ~RooCachedReal(); Destructor. RooAbsCachedReal::FuncCacheElem* createCache(const RooArgSet* nset) const; Interface function to create an internal cache object that represent; each cached function configuration. This interface allows to create and; return a class derived from RooAbsCachedReal::FuncCacheElem so that; a derived class fillCacheObject implementation can utilize extra functionality; defined in such a derived cache class. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Update contents of cache histogram by resampling the input function. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedReal.html:38579,configurat,configuration,38579,root/html534/RooCachedReal.html,https://root.cern,https://root.cern/root/html534/RooCachedReal.html,2,['configurat'],['configuration']
Deployability,"ction; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function ; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:36848,integrat,integration,36848,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,9,['integrat'],"['integration', 'integrator']"
Deployability,"ctionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base class for all test statistics. More...;  ; class  RooAcceptReject;  Generic Monte Carlo toy generator implement the accept/reject sampling technique on any positively valued function. More...;  ; class  RooAdaptiveGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooAdaptiveIntegratorND;  Adaptive one-dimensional numerical integration algorithm. More...;  ; class  RooAddGenContext;  Efficient implementation of the generator context specific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ; class  RooAICRegistry;  Utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interface for RooAbsArg proxy classes. More...;  ; class  RooBinIntegrator;  Computes the integral over a binned distribution by summing the bin contents of all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:4243,integrat,integration,4243,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['integrat'],['integration']
Deployability,"ctions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:7821,integrat,integration,7821,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"ctions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; RooCategory _method1D;  Selects integration method for 1D p.d.f.s. ;  ; RooCategory _method1DCat;  Selects integration method for 1D p.d.f.s with categories. ;  ; RooCategory _method1DCond;  Selects integration method for 1D conditional p.d.f.s. ;  ; RooCategory _method1DCondCat;  Selects integration method for 1D conditional p.d.f.s with categories. ;  ; RooCategory _method2D;  Selects integration method for 2D p.d.f.s. ;  ; RooCategory _method2DCat;  Selects integration method for 2D p.d.f.s with categories. ;  ; RooCategory _method2DCond;  Selects integration method for 2D conditional p.d.f.s. ;  ; RooCategory _method2DCondCat;  Selects integration method for 2D conditional p.d.f.s with categories. ;  ; RooCategory _methodND;  Selects integration method for ND p.d.f.s. ;  ; RooCategory _methodNDCat;  Selects integration method for ND p.d.f.s with categories. ;  ; RooCategory _methodNDCond;  Selects integration method for ND conditional p.d.f.s. ;  ; RooCategory _methodNDCondCat;  Selects integration method for ND conditional p.d.f.s with categories. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:12757,integrat,integration,12757,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability,"ctions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGComboBox * fComboCmd;  commands combobox ;  ; TGTextEntry * fCommand;  command text entry widget ;  ; TGTextBuffer * fCommandBuf;  command text buffer ;  ; Bool_t fExiting;  true if editor is closing ;  ; TString fFilename;  name of the opened file ;  ; TGLabel * fLabel;  ""command"" label ;  ; TMacro * fMacro;  pointer on the opened macro ;  ; TGMenuBar * fMenuBar;  editor's menu bar ;  ; TGLayoutHints * fMenuBarItemLayout;  used for for menubar items ;  ; TGLayoutHints * fMenuBarLayout;  used for the menubar ;  ; TGPopupMenu * fMenuEdit;  ""Edit"" menu entry ;  ; TGPopupMenu * fMenuFile;  ""File"" menu entry ;  ; TGPopupMenu * fMenuHelp;  ""Help"" menu entry ;  ; TGPopupMenu * fMenuSearch;  ""Search"" menu entry ;  ; TGPopupMenu * fMenuTools;  ""Tools"" menu entry ;  ; TGStatusBar * fStatusBar;  for file name, line and col number ;  ; Bool_t fTextChanged;  true if text has changed ;  ; TGTextEdit * fTextEdit;  text edit widget ;  ; TTimer * fTimer;  for statusbar and toolbar update ;  ; TGToolBar * fToolBar;  toolbar with common tool buttons ;  ;  Protected Attributes inherited from TGMainFrame; TList * fBindList;  list with key bindings ;  ; TString fClassName;  WM class name. ;  ; Atom_t * fDNDTypeList;  handles DND types ;  ; TString fIconName;  icon name ;  ; TString fIconPixmap;  icon pixmap name ;  ; UInt_t fMWMFuncs;  MWM functions. ;  ; UInt_t fMWMInput;  MWM input modes. ;  ; UInt_t fMWMValue;  MWM decoration hints. ;  ; TString fResourceName;  WM resource name. ;  ; TString fWindowName;  window name ;  ; UInt_t fWMHeight;  WM height. ;  ; UInt_t fWMHeight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:36094,update,update,36094,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['update'],['update']
Deployability,"ctions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooStats::HLFactory Class ReferenceRooFit » RooStats. ; HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. ; Moreover it provides tools for the combination of models and datasets. ; Definition at line 29 of file HLFactory.h. Public Member Functions;  HLFactory ();  Default Constructor. ;  ;  HLFactory (const char *name, const char *fileName=nullptr, bool isVerbose=false);  Constructor. ;  ;  HLFactory (const char *name, RooWorkspace *externalWs, bool isVerbose=false);  Constructor with external RooWorkspace. ;  ;  ~HLFactory () override;  Default Destructor. ;  ; int AddChannel (const char *label, const char *SigBkgPdfName, const char *BkgPdfName=nullptr, const char *datasetName=nullptr);  Add channel for the combination. ;  ; void DumpCfg (const char *);  Dump the Workspace content as configuration file. ;  ; RooAbsPdf * GetTotBkgPdf ();  Get the combined background pdf. ;  ; RooCategory * GetTotCategory ();  Get the combined dataset. ;  ; RooDataSet * GetTotDataSet ();  Get the combined dataset. ;  ; RooAbsPdf * GetTotSigBkgPdf ();  Get the combined signal plus background pdf. ;  ; RooWorkspace * GetWs ();  Get the RooWorkspace containing the models and variables. ;  ; TClass * IsA () const override;  ; int ProcessCard (const char *filename);  Process a configuration file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HLFactory.html:1190,configurat,configuration,1190,doc/master/classRooStats_1_1HLFactory.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HLFactory.html,1,['configurat'],['configuration']
Deployability,"ctive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the FastCGI interface can run in parallel to http server. One can just call:; serv = new THttpServer(""http:8080"");; serv->CreateEngine(""fastcgi:9000"");; One could specify a debug parameter to be able to adjust the FastCGI configuration on the web server:; serv->CreateEngine(""fastcgi:9000?debug=1"");; By default 10 threads are used to process FastCGI requests. This number can be changed with “thrds” url parameter:; serv->CreateEngine(""fastcgi:9000?thrds=20"");; If thrds=0 parameter specified, the only thread will be use to received and process all requests.; All user access will be ruled by the main web server. Authorized account names could be used to configure access restriction in THttpServer.; 1.7.1 Configure fastcgi with Apache2; Since Apache version 2.4 FastCGI is directly supported - there is no need to compile and install external modules any more. One only need to enable mod_proxy and mod_proxy_fcgi modules and add following line to Apache2 configuration file:; ProxyPass ""/root.app/"" ""fcgi://localhost:9000/"" enablereuse=on; More information can be found in FastCGI proxy docu. After restarting apache server one should be able to open address: http://apache_host_name/root.app/. There are many ways to configure user authentication in Apache. Example of digest auth for FastCGI server:; <Location ""/root.app/"">; AuthType Digest; AuthName ""root""; AuthDigestDomain ""/root.app/"" ""root""; AuthDigestProvider file; AuthUserFile ""/srv/auth/auth.txt""; Require valid-user; </Location>; 1.7.2 Configure fastcgi with lighttpd; An example of configuration file for lighttpd server is:; server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/root.app"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ); Be aware, that with lighttpd one should speci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:10359,install,install,10359,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['install'],['install']
Deployability,"ctor from data set, model pdf, parameter of interests and prior pdf If nuisance parameters are given they will be integrated according either to the prior or their constraint term included in the model. ; Definition at line 654 of file BayesianCalculator.cxx. ◆ BayesianCalculator() [3/3]. RooStats::BayesianCalculator::BayesianCalculator ; (; RooAbsData & ; data, . ModelConfig & ; model . ). Constructor from a data set and a ModelConfig model pdf, poi and nuisances will be taken from the ModelConfig. ; Definition at line 685 of file BayesianCalculator.cxx. ◆ ~BayesianCalculator(). RooStats::BayesianCalculator::~BayesianCalculator ; (; ). override . destructor ; Definition at line 705 of file BayesianCalculator.cxx. Member Function Documentation. ◆ ApproximatePosterior(). void RooStats::BayesianCalculator::ApproximatePosterior ; (; ); const. protected . approximate posterior in nbins using a TF1 scan the poi values and evaluate the posterior at each point and save the result in a cloned TF1 For each point the posterior is evaluated by integrating the nuisance parameters ; Definition at line 1319 of file BayesianCalculator.cxx. ◆ Class(). static TClass * RooStats::BayesianCalculator::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::BayesianCalculator::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::BayesianCalculator::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file BayesianCalculator.h. ◆ ClearAll(). void RooStats::BayesianCalculator::ClearAll ; (; ); const. protected . clear all cached pdf objects ; Definition at line 714 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromApproxPosterior(). void RooStats::BayesianCalculator::ComputeIntervalFromApproxPosterior ; (; double ; c1, . double ; c2 . ); const. protected . compute the interval using the approximate posterior function ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:22209,integrat,integrating,22209,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integrating']
Deployability,ctor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; RooCategory _method1D;  Selects integration method for 1D p.d.f.s. ;  ; RooCategory _method1DCat;  Selects integration method for 1D p.d.f.s with categories. ;  ; RooCategory _method1DCond;  Selects integration method for 1D conditional p.d.f.s. ;  ; RooCategory _method1DCondCat;  Selects integration method for 1D conditional p.d.f.s with categories. ;  ; RooCategory _method2D;  Selects integration method for 2D p.d.f.s. ;  ; RooCategory _method2DCat;  Selects integration method for 2D p.d.f.s with categories. ;  ; RooCategory _method2DCond;  Selects integration method for 2D conditional p.d.f.s. ;  ; RooCategory _method2DCondCat;  Selects integration method for 2D conditional p.d.f.s with categories. ;  ; RooCategory _methodND;  Selects integration method for ND p.d.f.s. ;  ; RooCategory _methodNDCat;  Selects integration method for ND p.d.f.s with categories. ;  ; RooCategory _methodNDCond;  Selects integration method for ND conditional p.d.f.s. ;  ; RooCategory _methodNDCondCat;  Selects integration method for ND conditional p.d.f.s with categories. ;  . Additional Inherited Member,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:12474,integrat,integration,12474,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability,"ctor without a card but with an exrernal workspace. HLFactory(). ~HLFactory(); destructor. int AddChannel(const char* label, const char* SigBkgPdfName, const char* BkgPdfName = 0, const char* datasetName = 0); Add a channel to the combination. The channel can be specified as:; - A signal plus background pdf; - A background only pdf; - A dataset; Once the combination of the pdfs is done, no more channels should be; added. RooAbsPdf* GetTotSigBkgPdf(); Return the combination of the signal plus background channels.; The facory owns the object. RooAbsPdf* GetTotBkgPdf(); Return the combination of the background only channels.; If no background channel is specified a NULL pointer is returned.; The facory owns the object. RooDataSet* GetTotDataSet(); Return the combination of the datasets.; If no dataset is specified a NULL pointer is returned.; The facory owns the object. RooCategory* GetTotCategory(); Return the category.; The facory owns the object. int ProcessCard(const char* filename); Process an additional configuration file. int fReadFile(const char* fileName, bool is_included = false); Parses the configuration file. The objects can be specified following; the rules of the RooFactoryWSTool, plus some more flexibility. The official format for the datacards is "".rs"". All the instructions end with a "";"" (like in C++). Carriage returns and white lines are irrelevant but adviced since they; improve readability (like in C++). The (Roo)ClassName::objname(description) can be replaced with the more; ""pythonic"" objname = (Roo)ClassName(description). The comments can be specified with a ""//"" if on a single line or with; /* */ if on multiple lines (like in C++). The ""#include path/to/file.rs"" statement triggers the inclusion of a; configuration fragment. The ""import myobject:myworkspace:myrootfile"" will add to the Workspace; the object myobject located in myworkspace recorded in myrootfile.; Alternatively, one could choose the ""import myobject:myrootfile"" in case; no Workspace ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HLFactory.html:7960,configurat,configuration,7960,root/html526/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__HLFactory.html,7,['configurat'],['configuration']
Deployability,"ctor""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:23202,integrat,integration,23202,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['integrat'],['integration']
Deployability,"ctor. ;  ; void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  If clearOnRedirect is false, forward constant term optimization calls to cache elements. ;  ; void insertObjectHook (RooAbsCacheElement &) override;  Set owner link on all object inserted into cache. ;  ; TClass * IsA () const override;  ; void operModeHook () override;  Intercept changes to cache operation mode and forward to cache elements. ;  ; void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  Intercept calls to perform automatic optimization of cache mode operation. ;  ; void printCompactTreeHook (std::ostream &, const char *) override;  Add details on cache contents when printing in tree mode. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Intercept server redirect calls. ;  ; void setClearOnRedirect (bool flag);  ; void sterilize () override;  Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >;  RooCacheManager (const RooCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooCacheManager (Int_t maxSize=2);  Constructor for simple caches without RooAbsArg payload. ;  ;  RooCacheManager (RooAbsArg *owner, Int_t maxSize=2);  Constructor for simple caches with RooAbsArg derived payload. ;  ;  ~RooCacheManager () override;  Destructor. ;  ; Int_t cacheSize () const;  Return size of cache. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIdx, const char *isetRangeName);  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Retrieve payload object indexed on nset,uset amd isetRangeName If sterileIdx is not null, it is set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:2266,integrat,integration,2266,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['integrat'],['integration']
Deployability,"ctor. RooIntegrator1D(const RooAbsFunc& function, SummationRule rule,				 Int_t maxSteps, Double_t eps); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax,				const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:9018,integrat,integrator,9018,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,3,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"ctor3& min_point, const TGLVector3& max_point); voidTGLPhysicalShape::SetupGLColors(TGLRnrCtx& rnrCtx, const Float_t* color = 0) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); UInt_tTGLClip::TimeStamp() const; voidTGLPhysicalShape::Translate(const TGLVector3& vect). Data Members; public:. enum TGLClip::EMode { kOutside; kInside; };; enum TGLPhysicalShape::EManip { kTranslateX; kTranslateY; kTranslateZ; kTranslateAll; kScaleX; kScaleY; kScaleZ; kScaleAll; kRotateX; kRotateY; kRotateZ; kRotateAll; kManipAll; };. protected:. TGLClip::EModeTGLClip::fMode; UInt_tTGLClip::fTimeStamp; Bool_tTGLClip::fValid. private:. static const floatfgColor[4]! Fixed color of clip box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipBox(); Construct an (initially) axis aligned clip pbox object, extents; 'halfLengths', centered on 'center' vertex.; Box can be translated, rotated and scaled in all (xyz) local axes. ~TGLClipBox(); Destroy clip box object. void Setup(const TGLBoundingBox& bbox); Setup the clip object for scene encompassed by bbox. void Setup(const TGLVector3& min_point, const TGLVector3& max_point); Setup the clip box with min/max points directly. This only makes sense if you disable auto-update of the; clip-object:; gl_viewer->SetClipAutoUpdate(kFALSE).; After calling this also call gl_viewer->RefreshPadEditor(gl_viewer); and gl_viewer->RequestDraw(). void PlaneSet(TGLPlaneSet_t& set) const; Return set of 6 planes describing faces of the box but invert them; so that they point inside of box. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLClip.h 32465 2010-03-04 20:29:52Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLClipBox.html:4093,update,update,4093,root/html528/TGLClipBox.html,https://root.cern,https://root.cern/root/html528/TGLClipBox.html,1,['update'],['update']
Deployability,"ctor3& min_point, const TGLVector3& max_point); voidTGLPhysicalShape::SetupGLColors(TGLRnrCtx& rnrCtx, const Float_t* color = 0) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); UInt_tTGLClip::TimeStamp() const; voidTGLPhysicalShape::Translate(const TGLVector3& vect). Data Members; public:. enum TGLClip::EMode { kOutside; kInside; };; enum TGLPhysicalShape::EManip { kTranslateX; kTranslateY; kTranslateZ; kTranslateAll; kScaleX; kScaleY; kScaleZ; kScaleAll; kRotateX; kRotateY; kRotateZ; kRotateAll; kManipAll; };. protected:. TGLClip::EModeTGLClip::fMode; UInt_tTGLClip::fTimeStamp; Bool_tTGLClip::fValid. private:. static const floatfgColor[4]! Fixed color of clip box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipBox(); Construct an (initially) axis aligned clip pbox object, extents; 'halfLengths', centered on 'center' vertex.; Box can be translated, rotated and scaled in all (xyz) local axes. ~TGLClipBox(); Destroy clip box object. void Setup(const TGLBoundingBox& bbox); Setup the clip object for scene encompassed by bbox. void Setup(const TGLVector3& min_point, const TGLVector3& max_point); Setup the clip box with min/max points directly. This only makes sense if you disable auto-update of the; clip-object:; gl_viewer->SetClipAutoUpdate(kFALSE).; After calling this also call gl_viewer->RefreshPadEditor(gl_viewer); and gl_viewer->RequestDraw(). void PlaneSet(TGLPlaneSet_t& set) const; Return set of 6 planes describing faces of the box but invert them; so that they point inside of box. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLClip.h 32465 2010-03-04 20:29:52Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLClipBox.html:4093,update,update,4093,root/html530/TGLClipBox.html,https://root.cern,https://root.cern/root/html530/TGLClipBox.html,1,['update'],['update']
Deployability,"ctor3& min_point, const TGLVector3& max_point); voidTGLPhysicalShape::SetupGLColors(TGLRnrCtx& rnrCtx, const Float_t* color = 0) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); UInt_tTGLClip::TimeStamp() const; voidTGLPhysicalShape::Translate(const TGLVector3& vect). Data Members; public:. enum TGLClip::EMode { kOutside; kInside; };; enum TGLPhysicalShape::EManip { kTranslateX; kTranslateY; kTranslateZ; kTranslateAll; kScaleX; kScaleY; kScaleZ; kScaleAll; kRotateX; kRotateY; kRotateZ; kRotateAll; kManipAll; };. protected:. TGLClip::EModeTGLClip::fMode; UInt_tTGLClip::fTimeStamp; Bool_tTGLClip::fValid. private:. static const floatfgColor[4]! Fixed color of clip box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipBox(); Construct an (initially) axis aligned clip pbox object, extents; 'halfLengths', centered on 'center' vertex.; Box can be translated, rotated and scaled in all (xyz) local axes. ~TGLClipBox(); Destroy clip box object. void Setup(const TGLBoundingBox& bbox); Setup the clip object for scene encompassed by bbox. void Setup(const TGLVector3& min_point, const TGLVector3& max_point); Setup the clip box with min/max points directly. This only makes sense if you disable auto-update of the; clip-object:; gl_viewer->SetClipAutoUpdate(kFALSE).; After calling this also call gl_viewer->RefreshPadEditor(gl_viewer); and gl_viewer->RequestDraw(). void PlaneSet(TGLPlaneSet_t& set) const; Return set of 6 planes describing faces of the box but invert them; so that they point inside of box. » Author: Richard Maunder 16/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLClip.h 32465 2010-03-04 20:29:52Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLClipBox.html:4093,update,update,4093,root/html532/TGLClipBox.html,https://root.cern,https://root.cern/root/html532/TGLClipBox.html,1,['update'],['update']
Deployability,"culator.cxx. ◆ GetPosteriorHistogram(). TH1 * RooStats::BayesianCalculator::GetPosteriorHistogram ; (; ); const. return the approximate posterior as histogram (TH1 object). Note the object is managed by the BayesianCalculator class ; When am approximate posterior is computed binninig the parameter of interest (poi) range (see SetScanOfPosteriors) an histogram is created and can be returned to the user A nullptr is instead returned when the posterior is computed without binning the poi.; NOTE: the returned object is managed by the BayesianCalculator class, if the user wants to take ownership of the returned histogram, he needs to clone or copy the return object. ; Definition at line 991 of file BayesianCalculator.cxx. ◆ GetPosteriorPdf(). RooAbsPdf * RooStats::BayesianCalculator::GetPosteriorPdf ; (; ); const. return posterior pdf (object is managed by the user) ; Build and return the posterior pdf (i.e posterior function normalized to all range of poi) Note that an extra integration in the POI is required for the normalization NOTE: user must delete the returned object. ; Definition at line 967 of file BayesianCalculator.cxx. ◆ GetPosteriorPlot(). RooPlot * RooStats::BayesianCalculator::GetPosteriorPlot ; (; bool ; norm = false, . double ; precision = 0.01 . ); const. get the plot with option to get it normalized ; return a RooPlot with the posterior and the credibility region NOTE: User takes ownership of the returned object ; Definition at line 1001 of file BayesianCalculator.cxx. ◆ IsA(). TClass * RooStats::BayesianCalculator::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::IntervalCalculator.; Definition at line 194 of file BayesianCalculator.h. ◆ SetBrfPrecision(). void RooStats::BayesianCalculator::SetBrfPrecision ; (; double ; precision). inline . set the precision of the Root Finder ; Definition at line 121 of file BayesianCalculator.h. ◆ SetConditionalObservables(). virtual void RooStats::Bay",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:28006,integrat,integration,28006,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['integrat'],['integration']
Deployability,cumentation. ◆ _configSets. RooLinkedList RooNumGenConfig::_configSets. protected . List of configuration sets for individual integration methods. ; Definition at line 73 of file RooNumGenConfig.h. ◆ _method1D. RooCategory RooNumGenConfig::_method1D. protected . Selects integration method for 1D p.d.f.s. ; Definition at line 58 of file RooNumGenConfig.h. ◆ _method1DCat. RooCategory RooNumGenConfig::_method1DCat. protected . Selects integration method for 1D p.d.f.s with categories. ; Definition at line 59 of file RooNumGenConfig.h. ◆ _method1DCond. RooCategory RooNumGenConfig::_method1DCond. protected . Selects integration method for 1D conditional p.d.f.s. ; Definition at line 60 of file RooNumGenConfig.h. ◆ _method1DCondCat. RooCategory RooNumGenConfig::_method1DCondCat. protected . Selects integration method for 1D conditional p.d.f.s with categories. ; Definition at line 61 of file RooNumGenConfig.h. ◆ _method2D. RooCategory RooNumGenConfig::_method2D. protected . Selects integration method for 2D p.d.f.s. ; Definition at line 63 of file RooNumGenConfig.h. ◆ _method2DCat. RooCategory RooNumGenConfig::_method2DCat. protected . Selects integration method for 2D p.d.f.s with categories. ; Definition at line 64 of file RooNumGenConfig.h. ◆ _method2DCond. RooCategory RooNumGenConfig::_method2DCond. protected . Selects integration method for 2D conditional p.d.f.s. ; Definition at line 65 of file RooNumGenConfig.h. ◆ _method2DCondCat. RooCategory RooNumGenConfig::_method2DCondCat. protected . Selects integration method for 2D conditional p.d.f.s with categories. ; Definition at line 66 of file RooNumGenConfig.h. ◆ _methodND. RooCategory RooNumGenConfig::_methodND. protected . Selects integration method for ND p.d.f.s. ; Definition at line 68 of file RooNumGenConfig.h. ◆ _methodNDCat. RooCategory RooNumGenConfig::_methodNDCat. protected . Selects integration method for ND p.d.f.s with categories. ; Definition at line 69 of file RooNumGenConfig.h. ◆ _methodNDCond. RooCat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:20656,integrat,integration,20656,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['integrat'],['integration']
Deployability,"cumentation; ~TVirtualMC(). Destructor. TVirtualMC * GetMC(); static: return virtual MC object. void SetStack(TVirtualMCStack* stack). Set particles stack. void SetExternalDecayer(TVirtualMCDecayer* decayer). Set external decayer. void SetRandom(TRandom* random). Set random number generator. void SetMagField(TVirtualMagField* field). Set magnetic field. Bool_t CurrentBoundaryNormal(Double_t& x, Double_t& y, Double_t& z) const; If track is on a geometry boundary, fill the normal vector of the crossing volume; surface and return true, return false otherwise. void SetCollectTracks(Bool_t collectTracks); Activate collecting tracks; Currently working only with TGeant3TGeo. Bool_t IsCollectTracks() const; Return the info if collecting tracks is activated. Bool_t IsRootGeometrySupported() const. methods for building/management of geometry. Info about supporting geometry defined via Root. { return kFALSE; }. void Gfmate(Int_t imat, char* name, Float_t& a, Float_t& z, Float_t& dens, Float_t& radl, Float_t& absl, Float_t* ubuf, Int_t& nbuf); make this function =0 with next release. functions from GCONS. Return parameters for material specified by material number imat. void Gckmat(Int_t imed, char* name); Return parameters for material specified by material number imat; (in double precision); Check the parameters of a tracking medium. void Material(Int_t& kmat, const char* name, Double_t a, Double_t z, Double_t dens, Double_t radl, Double_t absl, Float_t* buf, Int_t nwbuf); Define a material; kmat number assigned to the material; name material name; a atomic mass in au; z atomic number; dens density in g/cm3; absl absorption length in cm;; if >=0 it is ignored and the program; calculates it, if <0. -absl is taken; radl radiation length in cm; if >=0 it is ignored and the program; calculates it, if <0. -radl is taken; buf pointer to an array of user words; nwbuf number of user words. void Mixture(Int_t& kmat, const char* name, Float_t* a, Float_t* z, Double_t dens, Int_t nlmat, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:16934,release,release,16934,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,1,['release'],['release']
Deployability,"current style when reading objects.Definition TROOT.h:133; TROOT::MakeDefCanvasTCanvas * MakeDefCanvas() constReturn a default canvas.Definition TROOT.cxx:1554; TROOT::fTypesTCollection * fTypesList of data types definition.Definition TROOT.h:141; TROOT::GetColorTColor * GetColor(Int_t color) constReturn address of color with index color.Definition TROOT.cxx:1536; TROOT::GetGlobalTGlobal * GetGlobal(const char *name, Bool_t load=kFALSE) constReturn pointer to global variable by name.Definition TROOT.cxx:1631; TROOT::FindSTLClassTClass * FindSTLClass(const char *name, Bool_t load, Bool_t silent=kFALSE) constreturn a TClass object corresponding to 'name' assuming it is an STL container.Definition TROOT.cxx:1484; TROOT::fStreamerInfoTSeqCollection * fStreamerInfoList of active StreamerInfo classes.Definition TROOT.h:159; TROOT::Appendvoid Append(TObject *obj, Bool_t replace=kFALSE) overrideAppend object to this directory.Definition TROOT.cxx:1047; TROOT::GetIconPathstatic const TString & GetIconPath()Get the icon path in the installation. Static utility function.Definition TROOT.cxx:3168; TROOT::GetListOfGlobalFunctionsTCollection * GetListOfGlobalFunctions(Bool_t load=kFALSE)Return list containing the TFunctions currently defined.Definition TROOT.cxx:1826; TROOT::fGitDateTString fGitDateDate and time when make was run.Definition TROOT.h:122; TROOT::fSpecialsTSeqCollection * fSpecialsList of special objects.Definition TROOT.h:156; TROOT::GetListOfFunctionTemplatesTCollection * GetListOfFunctionTemplates()Definition TROOT.cxx:1771; TROOT::RegisterModulestatic void RegisterModule(const char *modulename, const char **headers, const char **includePaths, const char *payLoadCode, const char *fwdDeclCode, void(*triggerFunc)(), const FwdDeclArgsToKeepCollection_t &fwdDeclsArgToSkip, const char **classesHeaders, bool hasCxxModule=false)Called by static dictionary initialization to register clang modules for headers.Definition TROOT.cxx:2535; TROOT::FindObjectTObject * FindObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:150743,install,installation,150743,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"current style when reading objects.Definition TROOT.h:133; TROOT::MakeDefCanvasTCanvas * MakeDefCanvas() constReturn a default canvas.Definition TROOT.cxx:1554; TROOT::fTypesTCollection * fTypesList of data types definition.Definition TROOT.h:141; TROOT::GetColorTColor * GetColor(Int_t color) constReturn address of color with index color.Definition TROOT.cxx:1536; TROOT::GetGlobalTGlobal * GetGlobal(const char *name, Bool_t load=kFALSE) constReturn pointer to global variable by name.Definition TROOT.cxx:1631; TROOT::FindSTLClassTClass * FindSTLClass(const char *name, Bool_t load, Bool_t silent=kFALSE) constreturn a TClass object corresponding to 'name' assuming it is an STL container.Definition TROOT.cxx:1484; TROOT::fStreamerInfoTSeqCollection * fStreamerInfoList of active StreamerInfo classes.Definition TROOT.h:159; TROOT::Appendvoid Append(TObject *obj, Bool_t replace=kFALSE) overrideAppend object to this directory.Definition TROOT.cxx:1047; TROOT::GetIconPathstatic const TString & GetIconPath()Get the icon path in the installation. Static utility function.Definition TROOT.cxx:3172; TROOT::GetListOfGlobalFunctionsTCollection * GetListOfGlobalFunctions(Bool_t load=kFALSE)Return list containing the TFunctions currently defined.Definition TROOT.cxx:1826; TROOT::fGitDateTString fGitDateDate and time when make was run.Definition TROOT.h:122; TROOT::fSpecialsTSeqCollection * fSpecialsList of special objects.Definition TROOT.h:156; TROOT::GetListOfFunctionTemplatesTCollection * GetListOfFunctionTemplates()Definition TROOT.cxx:1771; TROOT::RegisterModulestatic void RegisterModule(const char *modulename, const char **headers, const char **includePaths, const char *payLoadCode, const char *fwdDeclCode, void(*triggerFunc)(), const FwdDeclArgsToKeepCollection_t &fwdDeclsArgToSkip, const char **classesHeaders, bool hasCxxModule=false)Called by static dictionary initialization to register clang modules for headers.Definition TROOT.cxx:2535; TROOT::FindObjectTObject * FindObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:150919,install,installation,150919,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['install'],['installation']
Deployability,"current text font number.; 3194 ; 3195void TGX11::SetTextFont(Font_t fontnumber); 3196{; 3197 fTextFont = fontnumber;; 3198}; 3199 ; 3200////////////////////////////////////////////////////////////////////////////////; 3201/// Set current text size.; 3202 ; 3203void TGX11::SetTextSize(Float_t textsize); 3204{; 3205 fTextSize = textsize;; 3206}; 3207 ; 3208////////////////////////////////////////////////////////////////////////////////; 3209/// Set synchronisation on or off.; 3210///; 3211/// \param [in] mode : synchronisation on/off; 3212/// - mode=1 on; 3213/// - mode<>0 off; 3214 ; 3215void TGX11::Sync(int mode); 3216{; 3217 switch (mode) {; 3218 ; 3219 case 1 :; 3220 XSynchronize((Display*)fDisplay,1);; 3221 break;; 3222 ; 3223 default:; 3224 XSynchronize((Display*)fDisplay,0);; 3225 break;; 3226 }; 3227}; 3228 ; 3229////////////////////////////////////////////////////////////////////////////////; 3230/// Update display.; 3231///; 3232/// \param [in] mode : (1) update (0) sync; 3233///; 3234/// Synchronise client and server once (not permanent).; 3235/// Copy the pixmap gCws->fDrawing on the window gCws->fWindow; 3236/// if the double buffer is on.; 3237 ; 3238void TGX11::UpdateWindow(int mode); 3239{; 3240 if (gCws->fDoubleBuffer) {; 3241 XCopyArea((Display*)fDisplay, gCws->fDrawing, gCws->fWindow,; 3242 *gGCpxmp, 0, 0, gCws->fWidth, gCws->fHeight, 0, 0);; 3243 }; 3244 if (mode == 1) {; 3245 XFlush((Display*)fDisplay);; 3246 } else {; 3247 XSync((Display*)fDisplay, False);; 3248 }; 3249}; 3250 ; 3251////////////////////////////////////////////////////////////////////////////////; 3252/// Set pointer position.; 3253///; 3254/// \param [in] ix New X coordinate of pointer; 3255/// \param [in] iy New Y coordinate of pointer; 3256/// \param [in] id Window identifier; 3257///; 3258/// Coordinates are relative to the origin of the window id; 3259/// or to the origin of the current window if id == 0.; 3260 ; 3261void TGX11::Warp(Int_t ix, Int_t iy, Window_t id); 3262{; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:106776,update,update,106776,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['update'],['update']
Deployability,"currently set state index. If this is invalid, returns the first-set index. ; Implements RooAbsCategory.; Definition at line 110 of file RooCategory.h. ◆ getCurrentIndex(). value_type RooCategory::getCurrentIndex ; (; ); const. inlinefinalvirtual . Return current index. ; Reimplemented from RooAbsCategory.; Definition at line 40 of file RooCategory.h. ◆ hasRange(). bool RooCategory::hasRange ; (; const char * ; rangeName); const. inlineoverridevirtual . Returns true if category has a range with given name defined. ; Reimplemented from RooAbsArg.; Definition at line 100 of file RooCategory.h. ◆ inRange(). bool RooCategory::inRange ; (; const char * ; rangeName); const. inlineoverridevirtual . Check if the currently defined category state is in the range with the given name. ; If no ranges are defined, the state counts as being in range. ; Reimplemented from RooAbsArg.; Definition at line 96 of file RooCategory.h. ◆ installLegacySharedProp(). void RooCategory::installLegacySharedProp ; (; const RooCategorySharedProperties * ; props). private . When reading old versions of the class, we get instances of shared properties. ; Since these only contain ranges with numbers, just convert to vectors of numbers. ; Definition at line 481 of file RooCategory.cxx. ◆ installSharedRange(). void RooCategory::installSharedRange ; (; std::unique_ptr< RangeMap_t > && ; rangeMap). private . In current versions of the class, a map with ranges can be shared between instances. ; If an instance with the same name already uses the same map, the instances will start sharing. Otherwise, this instance will be registered, and future copies being read will share with this one. ; Definition at line 514 of file RooCategory.cxx. ◆ IsA(). TClass * RooCategory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsCategoryLValue.; Definition at line 141 of file RooCategory.h. ◆ isDerived(). bool RooCategory::isDerived ; (; ); const. inlineoverride",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:58133,install,installLegacySharedProp,58133,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['install'],['installLegacySharedProp']
Deployability,"curve in the frame variable, taken at the present value; 1497/// of other observables defined for this PDF.; 1498///; 1499/// \param[in] frame pointer to RooPlot; 1500/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; 1501///; 1502/// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1503/// show a projected curve integrated over all variables that were present in the shown; 1504/// dataset except for the one on the x-axis. The normalization of the curve will also; 1505/// be adjusted to the event count of the plotted dataset. An informational message; 1506/// will be printed for each projection step that is performed.; 1507///; 1508/// This function takes the following named arguments; 1509/// <table>; 1510/// <tr><th><th> Projection control; 1511/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1512/// in set from the projection, i.e. by not integrating over these.; 1513/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1514/// of the PDF at the current value of the category observable.; 1515///; 1516/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1517/// observable from the projection, i.e., by not integrating over all states of this category.; 1518/// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; 1519/// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; 1520///; 1521/// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; 1522/// Can be used with initializer lists for convenience, e.g.; 1523/// ```{.cpp}; 1524/// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; 1525/// ```; 1526///; 1527/// <tr><td> `Project(const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:62186,integrat,integrating,62186,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['integrat'],['integrating']
Deployability,"cxx:731; TGraph::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideImplementation to get information on point of graph at cursor position Adapted from class TH1.Definition TGraph.cxx:1585; TGraph::AllocateArraysDouble_t ** AllocateArrays(Int_t Narrays, Int_t arraySize)Allocate arrays.Definition TGraph.cxx:598; TGraph::Scalevirtual void Scale(Double_t c1=1., Option_t *option=""y"")Multiply the values of a TGraph by a constant c1.Definition TGraph.cxx:2259; TGraph::fFunctionsTList * fFunctionsPointer to list of functions (fits and user)Definition TGraph.h:49; TGraph::GetCovariancevirtual Double_t GetCovariance() constReturn covariance of vectors x,y.Definition TGraph.cxx:1308; TGraph::SwapValuesstatic void SwapValues(Double_t *arr, Int_t pos1, Int_t pos2)Swap values.Definition TGraph.cxx:2611; TGraph::Streamervoid Streamer(TBuffer &) overrideStream an object of class TGraph.Definition TGraph.cxx:2516; TGraph::Zerovoid Zero(Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations)Find zero of a continuous function.Definition TGraph.cxx:2717; TGraph::Allocatevirtual Double_t ** Allocate(Int_t newsize)Allocate internal data structures for newsize points.Definition TGraph.cxx:590; TGraph::FitPanelvirtual void FitPanel()Display a GUI panel with all graph fit options.Definition TGraph.cxx:1274; TGraph::Browsevoid Browse(TBrowser *b) overrideBrowse.Definition TGraph.cxx:651; TGraph::DoMergevirtual Bool_t DoMerge(const TGraph *g)protected function to perform the merge operation of a graphDefinition TGraph.cxx:2676; TGraph::InsertPointBeforevirtual void InsertPointBefore(Int_t ipoint, Double_t x, Double_t y)Insert a new point with coordinates (x,y) before the point number ipoint.Definition TGraph.cxx:1749; TGraph::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TGraph.h:126; TGraph::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TGra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:120083,continuous,continuous,120083,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['continuous'],['continuous']
Deployability,"cxx:9538; TH1C::Resetvoid Reset(Option_t *option="""") overrideReset.Definition TH1.cxx:9567; TH1C::UpdateBinContentvoid UpdateBinContent(Int_t bin, Double_t content) overrideRaw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH1.h:486; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1D::RetrieveBinContentDouble_t RetrieveBinContent(Int_t bin) const overrideRaw retrieval of bin content on internal data structure see convention for numbering bins in TH1::Get...Definition TH1.h:703; TH1D::~TH1D~TH1D() overrideDestructor.Definition TH1.cxx:10467; TH1D::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow Reallocate bin contents array.Definition TH1.cxx:10501; TH1D::Copyvoid Copy(TObject &hnew) const overrideCopy this to newth1.Definition TH1.cxx:10483; TH1D::UpdateBinContentvoid UpdateBinContent(Int_t bin, Double_t content) overrideRaw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH1.h:704; TH1D::TH1DTH1D()Constructor.Definition TH1.cxx:10402; TH1D::operator=TH1D & operator=(const TH1D &h1)Operator =.Definition TH1.cxx:10511; TH1D::AddBinContentvoid AddBinContent(Int_t bin, Double_t w) overrideIncrement bin content by a weight w Passing an out-of-range bin leads to undefined behavior.Definition TH1.h:687; TH1D::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH1.h:684; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1F::AddBinContentvoid AddBinContent(Int_t bin, Double_t w) overrideIncrement bin content by a weight w.Definition TH1.h:640; TH1F::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH1.h:636; TH1F::RetrieveBinContentDouble_t RetrieveBinContent(Int_t bin) const overrideRaw retrieval of bin content on internal data structur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:45800,update,update,45800,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['update'],['update']
Deployability,d *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:48514,integrat,integration,48514,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['integrat'],['integration']
Deployability,d *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:49621,integrat,integration,49621,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['integrat'],['integration']
Deployability,"d . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project configuration; Create the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the rele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:1928,release,release,1928,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['release'],['release']
Deployability,"d . Definition at line 215 of file RooGaussModel.cxx. ◆ generateEvent(). void RooGaussModel::generateEvent ; (; Int_t ; code). overridevirtual . Interface for generation of an event using the algorithm corresponding to the specified code. ; The meaning of each code is defined by the getGenerator() implementation. The default implementation does nothing. ; Reimplemented from RooAbsPdf.; Definition at line 541 of file RooGaussModel.cxx. ◆ getAnalyticalIntegral(). Int_t RooGaussModel::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 310 of file RooGaussModel.cxx. ◆ getGenerator(). Int_t RooGaussModel::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 534 of file RooGaussModel.cxx. ◆ IsA(). TClass * RooGaussModel::IsA ; (; ); const. inli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:81096,integrat,integration,81096,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,1,['integrat'],['integration']
Deployability,"d /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:5815,update,updated,5815,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,2,"['release', 'update']","['release', 'updated']"
Deployability,"d ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. ; Reimplemented in TH2, and TH3.; Definition at line 3519 of file TH1.cxx. ◆ FillRandom() [2/2]. void TH1::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source. in this case we simply use a poisson distribution where the mean value per bin = bincontent/integral. ; Reimplemented in TH2, and TH3.; Definition at line 3590 of file TH1.cxx. ◆ FindBin(). Int_t TH1::FindBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ). virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions. This function tries to extend the axis if the given point belongs to an under-/overflow b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:119912,integrat,integrated,119912,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['integrat'],['integrated']
Deployability,"d FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. bool GetCovMatrix(double* cov) const; get covariance matrix. bool GetHessianMatrix(double* h) const; get Hessian - inverse of covariance matrix; just invert it; but need to get the compact form to avoid the zero for the fixed parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= appro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMinuitMinimizer.html:8448,update,update,8448,root/html530/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html530/TMinuitMinimizer.html,2,['update'],['update']
Deployability,"d FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix. double GlobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuitMinimizer.html:8356,update,update,8356,root/html528/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html528/TMinuitMinimizer.html,1,['update'],['update']
Deployability,"d Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:8780,integrat,integrator,8780,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"d Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate and return integral at at given parameter values. RooAdaptiveGaussKronrodIntegrator1D(); Constructors, assignment etc. Bool_t setUseIntegrandLimits(Bool_t flag); If flag is true, intergration limits are taken from definition in input function binding. Bool_t canIntegrate1D() const; We can integrate 1-dimensional functions. Bool_t canIntegrate2D() const; We can not integrate 2-dimensional functions. Bool_t canIntegrateND() const; We can not integrate >2-dimensional functions. Bool_t canIntegrateOpenEnded() const; We can integrate over open-ended domains. Double_t* xvec(Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html:9191,integrat,integration,9191,root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,5,['integrat'],['integration']
Deployability,"d SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and start from the previous values.; - ""current"" (draw in the current canvas); - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; - ""minErrorTest"" (stop when NN error on the test sample gets below minE; All combinations are available. Double_t Result(Int_t event, Int_t index = 0) const; Computes the output for a given event.; Look at the output neuron designed by index. Double_t GetError(Int_t event) const; Error on the output for a given event. Double_t GetError(TMultiLayerPerceptron::EDataSet set) const; Error on the whole dataset. Double_t GetSumSquareError() const; Error on the output for a given event. Double_t GetCrossEntropyBinary() const; Cross entropy error for sigmoid output neurons, for a given event. Double_t GetCrossEntropy() const; Cross entropy error for a softmax output neuron, for a given event. void ComputeDEDw() const; Compute the DEDw = sum on all training events",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:24973,update,update,24973,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,12,['update'],['update']
Deployability,"d and saved in the text file. Such file can be used in; 1585/// JavaScript ROOT (https://root.cern/js/) to display object in web browser; 1586/// When creating JSON file, option string may contain compression level from 0 to 3 (default 0); 1587 ; 1588Int_t TDirectoryFile::SaveObjectAs(const TObject *obj, const char *filename, Option_t *option) const; 1589{; 1590 // option can contain single letter args: ""a"" for append, ""q"" for quiet in any combinations; 1591 ; 1592 if (!obj) return 0;; 1593 TString fname, opt = option;; 1594 if (filename && *filename); 1595 fname = filename;; 1596 else; 1597 fname.Form(""%s.root"", obj->GetName());; 1598 opt.ToLower();; 1599 ; 1600 Int_t nbytes = 0;; 1601 if (fname.Index("".json"") > 0) {; 1602 nbytes = TBufferJSON::ExportToFile(fname, obj, option);; 1603 } else {; 1604 TContext ctxt; // The TFile::Open will change the current directory.; 1605 auto *local = TFile::Open(fname.Data(), opt.Contains(""a"") ? ""update"" : ""recreate"");; 1606 if (!local) return 0;; 1607 nbytes = obj->Write();; 1608 delete local;; 1609 }; 1610 if (!opt.Contains(""q"") && !gSystem->AccessPathName(fname.Data())); 1611 obj->Info(""SaveAs"", ""ROOT file %s has been created"", fname.Data());; 1612 return nbytes;; 1613}; 1614 ; 1615////////////////////////////////////////////////////////////////////////////////; 1616/// Save Directory keys and header; 1617///; 1618/// If the directory has been modified (fModified set), write the keys; 1619/// and the directory header. This function assumes the cd is correctly set.; 1620///; 1621/// It is recommended to use this function in the following situation:; 1622/// Assume a process1 using a directory in Update mode; 1623/// - New objects or modified objects have been written to the directory.; 1624/// - You do not want to close the file.; 1625/// - You want your changes be visible from another process2 already connected; 1626/// to this directory in read mode.; 1627/// - Call this function.; 1628/// - In process2, use TDirectoryFile::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:54888,update,update,54888,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['update'],['update']
Deployability,"d as staged). If 'dbg' is true, some information about the ongoing operations is reguraly; printed; this can be useful when processing very large datasets, an operation; which can take a very long time. The int 'sopt' controls what is done on the selected files (this is effective only; if ropt is 0 or 2 - see below):; -1 no action (fopt = 2 and sopt = -1 touches all staged files); 0 do the full process: open the files and fill the meta-information; in the TFileInfo object, including the end-point URL; 1 only locate the files, by updating the end-point URL (uses TFileStager::Locate; which is must faster of an TFile::Open); 2 issue a stage request on the files. The int 'ropt' controls which actions are performed:; 0 do the full process: get list of files to process and process them; 1 get the list of files to be scanned and return it in flist; 2 process the files in flist (according to sopt); When defined flist is under the responsability the caller. If avgsz > 0 it is used for the final update of the dataset global counters. If 'mss' is defined use it to initialize the stager (instead of the Url in the; TFileInfo objects). If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2; all files marked as 'staged' are still open or touched). Return code; 1 dataset was not changed; 2 dataset was changed. The number of touched, opened and disappeared files are returned in the respective; variables, if these are defined. Bool_t CheckStagedStatus(TFileInfo* fileInfo, Int_t fopt, Int_t maxfiles, Int_t newstagedfiles, TFileStager* stager, Bool_t createStager, Bool_t dbg, Bool_t& changed, Bool_t& touched, Bool_t& disappeared); Check stage status of the file described by ""fileInfo"".; fopt is same as ""fopt"" in TDataSetManager::ScanDataSet, which is repeated below:; The int fopt controls which files have to be processed (or added to the list; if ropt is 1 - see below); 'fopt' is defined in term of csopt and fsopt:; fopt = sign(fsopt) * csopt * 100 +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManager.html:20138,update,update,20138,root/html534/TDataSetManager.html,https://root.cern,https://root.cern/root/html534/TDataSetManager.html,3,['update'],['update']
Deployability,"d as staged). If 'dbg' is true, some information about the ongoing operations is reguraly; printed; this can be useful when processing very large datasets, an operation; which can take a very long time. The int 'sopt' controls what is done on the selected files (this is effective only; if ropt is 0 or 2 - see below):; -1 no action (fopt = 2 and sopt = -1 touches all staged files); 0 do the full process: open the files and fill the meta-information; in the TFileInfo object, including the end-point URL; 1 only locate the files, by updating the end-point URL (uses TFileStager::Locate; which is must faster of an TFile::Open); 2 issue a stage request on the files. The int 'ropt' controls which actions are performed:; 0 do the full process: get list of files to process and process them; 1 get the list of files to be scanned and return it in flist; 2 process the files in flist (according to sopt); When defined flist is under the responsability the caller. If avgsz > 0 it is used for the final update of the dataset global counters. If 'mss' is defined use it to initialize the stager (instead of the Url in the; TFileInfo objects). If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2; all files marked as 'staged' are still open or touched). Return code; 1 dataset was not changed; 2 dataset was changed. The number of touched, opened and disappeared files are returned in the respective; variables, if these are defined. Int_t ScanFile(TFileInfo* fileinfo, Bool_t notify); Open the file described by 'fileinfo' to extract the relevant meta-information.; Return 0 if OK, -2 if the file cannot be open, -1 if it is corrupted. Int_t FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); Navigate the directory 'd' (and its subdirectories) looking for TTree objects.; Fill in the relevant metadata information in 'fi'. The name of the TFileInfoMeta; metadata entry will be ""/dir1/dir2/.../tree_name"".; Return 0 on success, -1 if any problem h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManager.html:19641,update,update,19641,root/html528/TDataSetManager.html,https://root.cern,https://root.cern/root/html528/TDataSetManager.html,3,['update'],['update']
Deployability,"d by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooCategoryProxy_rhoQ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooNonCPEigenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_wQ; TStringTNamed::fNameobject identifier; TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNonCPEigenDecay.html:41475,configurat,configuration,41475,root/html526/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html526/RooNonCPEigenDecay.html,1,['configurat'],['configuration']
Deployability,"d by x,y,namez by a weight w. If the storage of the sum of squares of weights has been triggered,; via the function Sumw2, then the sum of the squares of weights is incremented; by w^2 in the cell corresponding to x,y,z. void FillRandom(const char* fname, Int_t ntimes = 5000); -*-*-*Fill histogram following distribution in function fname; *-* =======================================================; -; *-* The distribution contained in the function fname (TF1) is integrated; *-* over the channel contents.; *-* It is normalized to 1.; *-* Getting one random number implies:; *-* - Generating a random number between 0 and 1 (say r1); *-* - Look in which bin in the normalized integral r1 corresponds to; *-* - Fill histogram channel; *-* ntimes random numbers are generated; -; *-* One can also call TF1::GetRandom to get a random variate from a function.; -; *. void FillRandom(TH1* h, Int_t ntimes = 5000); -*-*-*Fill histogram following distribution in histogram h; *-* ====================================================; -; *-* The distribution contained in the histogram h (TH3) is integrated; *-* over the channel contents.; *-* It is normalized to 1.; *-* Getting one random number implies:; *-* - Generating a random number between 0 and 1 (say r1); *-* - Look in which bin in the normalized integral r1 corresponds to; *-* - Fill histogram channel; *-* ntimes random numbers are generated; -; *. Int_t FindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; find first bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. Int_t FindLastBinAbove(Double_t threshold = 0, Int_t axis = 1) const; find last bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. void FitSlicesZ(TF1* f1 = 0, Int_t binminx = 1, Int_t binmaxx = 0, Int_t binminy = 1, Int_t binmaxy = 0, Int_t cut = 0, Option_t* option = ""QNR""); Project slices along Z in case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3.html:30046,integrat,integrated,30046,root/html528/TH3.html,https://root.cern,https://root.cern/root/html528/TH3.html,4,['integrat'],['integrated']
Deployability,"d calculating in parallel the weighted average; // one each subset. The N results of those calculations are then weighted into the; // final result; ; // Use four processes; model.plotOn(frame, ProjWData(*dataSel), NumCPU(4));; ; new TCanvas(""rf603_multicpu"", ""rf603_multicpu"", 600, 600);; gPad->SetLeftMargin(0.15);; frame->GetYaxis()->SetTitleOffset(1.6);; frame->Draw();; }; RooAddPdf.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooPolynomial.h; RooProdPdf.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::createProjectionvirtual RooAbsPdf * createProjection(const RooArgSet &iset)Return a p.d.f that represent a projection of this p.d.f integrated over given observables.Definition RooAbsPdf.cxx:2446; RooAddPdfEfficient implementation of a sum of PDFs of the form.Definition RooAddPdf.h:33; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooFormulaVarA RooFormulaVar is a generic implementation of a real-valued object, which takes a RooArgList of serv...Definition RooFormulaVar.h:30; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf603__multicpu_8C.html:3845,integrat,integrated,3845,doc/master/rf603__multicpu_8C.html,https://root.cern,https://root.cern/doc/master/rf603__multicpu_8C.html,1,['integrat'],['integrated']
Deployability,"d canvas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject *object, TMethod *method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem *menuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject *object, TToggle *toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject *object, TFunction *method, const char *params); Execute method with specified arguments for specified object. void Execute(TObject *object, TFunction *method, TObjArray *params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TConte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TContextMenu.html:8531,toggle,toggle,8531,root/html526/TContextMenu.html,https://root.cern,https://root.cern/root/html526/TContextMenu.html,2,['toggle'],['toggle']
Deployability,"d channel for the combination. ; Add a channel to the combination.; The channel can be specified as:; A signal plus background pdf; A background only pdf; A dataset Once the combination of the pdfs is done, no more channels should be added. . Definition at line 108 of file HLFactory.cxx. ◆ Class(). static TClass * RooStats::HLFactory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::HLFactory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::HLFactory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 105 of file HLFactory.h. ◆ DeclFileName(). static const char * RooStats::HLFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 105 of file HLFactory.h. ◆ DumpCfg(). void RooStats::HLFactory::DumpCfg ; (; const char * ; ). inline . Dump the Workspace content as configuration file. ; Definition at line 57 of file HLFactory.h. ◆ fCreateCategory(). void HLFactory::fCreateCategory ; (; ). private . Create the category for the combinations. ; Builds the category necessary for the mutidimensional models.; Its name will be <HLFactory name>_category and the types are specified by the model labels. ; Definition at line 483 of file HLFactory.cxx. ◆ fNamesListsConsistent(). bool HLFactory::fNamesListsConsistent ; (; ). private . Check the length of the lists. ; Check the number of entries in each list.; If not the same and the list is not empty prompt an error. ; Definition at line 504 of file HLFactory.cxx. ◆ fParseLine(). int HLFactory::fParseLine ; (; TString & ; line). private . Parse a single line an puts the content in the RooWorkSpace. ; Parse a single line and puts the content in the RooWorkSpace. ; Definition at line 519 of file HLFactory.cxx. ◆ fReadFile(). int HLFactory::fReadFile ; (; const char * ; fileName, . bool ; is_included = fal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HLFactory.html:15996,configurat,configuration,15996,doc/master/classRooStats_1_1HLFactory.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HLFactory.html,1,['configurat'],['configuration']
Deployability,"d compatibility constructor for (1-dim) RooKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1., Double_t nSigma = 3, Bool_t rotate = kTRUE); Backward compatibility constructor for Roo2DKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); Constructor. ~RooNDKeysPdf(). createPdf(Bool_t firstCall = kTRUE) const; evaluation order of constructor. setOptions() const; set the configuration. initialize() const; initialization. loadDataSet(Bool_t firstCall) const; copy the dataset and calculate some useful variables. mirrorDataSet() const; determine mirror dataset.; mirror points are added around the physical boundaries of the dataset; Two steps:; 1. For each entry, determine if it should be mirrored (the mirror configuration).; 2. For each mirror configuration, make the mirror points. loadWeightSet() const. calculateShell(RooNDKeysPdf::BoxInfo* bi) const; determine points in +/- nSigma shell around the box determined by the variable; ranges. These points are needed in the normalization, to determine probability; leakage in and out of the box. calculatePreNorm(RooNDKeysPdf::BoxInfo* bi) const; bi->nEventsBMSW=0.;; bi->nEventsBW=0.;. sortDataIndices(RooNDKeysPdf::BoxInfo* bi = 0) const; sort entries, as needed for loopRange(). calculateBandWidth() const. gauss(vector<Double_t>& x, vector<vector<Double_t> >& weights) const; loop over all closest point to x, as determined by loopRange(). loopRange(vector<Double_t>& x, map<Int_t,Bool_t>& ibMap) const; determine closest points to x, to loop over in evaluate(). boxInfoInit(RooNDKeysPdf::BoxInfo* bi, const char* rangeName, Int_t code) const. evaluate() const. getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. analyticalIntegral(Int_t code, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:51179,configurat,configuration,51179,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,2,['configurat'],['configuration']
Deployability,"d description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoShape as is to client, which can build model itself. ;  ; bool SetClickedItem (const std::vector< int > &stack);  ; void SetDrawOptions (const std::string &opt="""");  Set draw options as string for JSROOT TGeoPainter. ;  ; bool SetHighlightedItem (const std::vector< int > &stack);  ; void SetJsonComp (int comp=0);  Set JSON compression level for data transfe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:5187,configurat,configuration,5187,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['configurat'],['configuration']
Deployability,"d distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:1352,update,updates,1352,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['update'],['updates']
Deployability,"d documentation in front of method even for methods in the source file (default: """"); Root.Html.DescriptionStyle:; Search path for the source and header files with their default settings:; Unix.*.Root.Html.SourceDir: .:src:include; WinNT.*.Root.Html.SourceDir: .;src;include; URL stem for ROOT documentation pages (default is """").; Root.Html.Root: http://root.cern.ch/root/html; Filesystem output directory for generated web pages (default: htmldoc).; Root.Html.OutputDir: htmldoc/; Address of the package’s home page (default: http://root.cern.ch):; Root.Html.HomePage:; Location of user defined header and footer files, see http://root.cern.ch/root/html/THtml#conf:header (defaults are """", example: ../header.txt, ../footer.txt):; Root.Html.Header:; Root.Html.Footer:; Tag for detecting class description comments (default value is set below).; Root.Html.Description: //____________________; Tag for detecting “Author” comment (default value is set below).; Root.Html.Author: // Author:; Tag for detecting “last updated” comment. THtml uses the current date if this tag is not found in a class source file (default value is set below).; Root.Html.LastUpdate: // @(#); Tag for detecting “Copyright” comment (default value is set below).; Root.Html.Copyright: * Copyright; 28.6.3 GUI Specific Settings; Set the “native” ROOT GUI interface to be used in a ROOT session.; Gui.Backend: native; Gui.Factory: native; GUI default fonts in use:; Gui.DefaultFont: -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1; Gui.MenuFont: -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1; Gui.MenuHiFont: -adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-iso8859-1; Gui.DocFixedFont: -adobe-courier-medium-r-*-*-12-*-*-*-*-*-iso8859-1; Gui.DocPropFont: -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1; Gui.IconFont: -adobe-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1; Gui.StatusFont: -adobe-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1; Regular background and foreground colors in use:; Gui.BackgroundColor: #c0c0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1260200,update,updated,1260200,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['updated']
Deployability,"d documentation; Data member documentation. Documentation directives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THtml.html:2014,configurat,configuration,2014,root/html534/THtml.html,https://root.cern,https://root.cern/root/html534/THtml.html,1,['configurat'],['configuration']
Deployability,"d every time when new snapshot created ;  ; Bool_t fFixedSize {kFALSE};  ! is canvas size fixed ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; Int_t fJsonComp {0};  ! compression factor for messages send to the client ;  ; Bool_t fLongerPolling {kFALSE};  ! when true, make longer polling in blocking operations ;  ; ObjectSelectSignal_t fObjSelectSignal;  ! signal emitted when new object selected in the pad ;  ; PadClickedSignal_t fPadClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; PadClickedSignal_t fPadDblClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; std::map< TPad *, PadStatus > fPadsStatus;  ! map of pads in canvas and their status flags ;  ; Int_t fPaletteDelivery {1};  ! colors palette delivery 0:never, 1:once, 2:always, 3:per subpad ;  ; Int_t fPrimitivesMerge {100};  ! number of PS primitives, which will be merged together ;  ; Bool_t fProcessingData {kFALSE};  ! flag used to prevent blocking methods when process data is invoked ;  ; Bool_t fReadOnly {kFALSE};  !< configured display ;  ; Int_t fStyleDelivery {0};  ! gStyle delivery to clients: 0:never, 1:once, 2:always ;  ; UInt_t fStyleHash {0};  ! last hash of gStyle ;  ; Long64_t fStyleVersion {0};  ! current gStyle object version, checked every time when new snapshot created ;  ; Int_t fTF1UseSave {1};  ! use save buffer for TF1/TF2, 0:off, 1:prefer, 2:force ;  ; TWebCanvasTimer * fTimer {nullptr};  ! timer to submit control messages ;  ; UpdatedSignal_t fUpdatedSignal;  ! signal emitted when canvas updated or state is changed ;  ; std::map< TObject *, bool > fUsedObjs;  ! map of used objects during streaming ;  ; std::vector< WebConn > fWebConn;  ! connections ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  ; std::vector< int > fWindowGeometry;  ! last received window geometry ;  ;  Protected Attributes inherited from TCanvasImp; TCanvas * fCanvas {nullptr};  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:15935,update,updated,15935,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['update'],['updated']
Deployability,"d examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.14999999999999999); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassTree.html:13596,configurat,configuration,13596,root/html602/TClassTree.html,https://root.cern,https://root.cern/root/html602/TClassTree.html,2,['configurat'],['configuration']
Deployability,"d examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassTree.html:13046,configurat,configuration,13046,root/html526/TClassTree.html,https://root.cern,https://root.cern/root/html526/TClassTree.html,5,['configurat'],['configuration']
Deployability,"d from RooAbsCategory; static const decltype(_stateNames) ::value_type & invalidCategory ();  A category state to signify an invalid category. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsCategory; value_type _currentIndex {std::numeric_limits<int>::min()};  Current category state. ;  ; std::vector< std::string > _insertionOrder;  Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape(). ;  ; std::map< value_type, std::unique_ptr< RooCatType, std::function< void(RooCatType *)> > > _legacyStates;  ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ;  ; std::map< std::string, value_type > _stateNames;  Map state names to index numbers. Make sure state names are updated in recomputeShape(). ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:50567,update,updated,50567,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,3,['update'],['updated']
Deployability,"d from RooAbsGenContext.; Definition at line 64 of file RooProdGenContext.h. ◆ printMultiline(). void RooProdGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Detailed printing interface. ; Reimplemented from RooAbsGenContext.; Definition at line 375 of file RooProdGenContext.cxx. ◆ setProtoDataOrder(). void RooProdGenContext::setProtoDataOrder ; (; Int_t * ; lut). overridevirtual . Set the traversal order of the prototype dataset by the given lookup table. ; Reimplemented from RooAbsGenContext.; Definition at line 360 of file RooProdGenContext.cxx. ◆ Streamer(). void RooProdGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooProdGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file RooProdGenContext.h. ◆ updateCCDTable(). void RooProdGenContext::updateCCDTable ; (; ). protected . Member Data Documentation. ◆ _ccdCloneSet. RooArgSet* RooProdGenContext::_ccdCloneSet. protected . Definition at line 52 of file RooProdGenContext.h. ◆ _ccdRefresh. bool RooProdGenContext::_ccdRefresh. protected . Definition at line 58 of file RooProdGenContext.h. ◆ _ccdSuper. RooSuperCategory* RooProdGenContext::_ccdSuper. protected . SuperCategory of Common category dependents. ; Definition at line 53 of file RooProdGenContext.h. ◆ _ccdTable. double* RooProdGenContext::_ccdTable. protected . Definition at line 59 of file RooProdGenContext.h. ◆ _commonCats. RooArgSet RooProdGenContext::_commonCats. protected . Common category dependents. ; Definition at line 51 of file RooProdGenContext.h. ◆ _gcList. std::list<std::unique_ptr<RooAbsGenContext> > RooProdGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooProdGenContext.h. ◆ _ownedMultiProds. RooArgSet RooProdGenCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:20993,update,updateCCDTable,20993,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['update'],['updateCCDTable']
Deployability,"d from TVirtualViewer3D.; Definition at line 189 of file TGLScenePad.cxx. ◆ OpenComposite(). Bool_t TGLScenePad::OpenComposite ; (; const TBuffer3D & ; buffer, . Bool_t * ; addChildren = nullptr . ). overridevirtual . Open new composite container. ; TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ; Implements TVirtualViewer3D.; Definition at line 482 of file TGLScenePad.cxx. ◆ operator=(). TGLScenePad & TGLScenePad::operator= ; (; const TGLScenePad & ; ). privatedelete . ◆ PadPaint(). void TGLScenePad::PadPaint ; (; TVirtualPad * ; pad). overridevirtual . Entry point for updating scene contents via VirtualViewer3D interface. ; For now this is handled by TGLViewer as it remains the 'Viewer3D' of given pad. ; Reimplemented from TVirtualViewer3D.; Definition at line 233 of file TGLScenePad.cxx. ◆ PadPaintFromViewer(). void TGLScenePad::PadPaintFromViewer ; (; TGLViewer * ; viewer). virtual . Entry point for requesting update of scene's contents from gl-viewer. ; Definition at line 217 of file TGLScenePad.cxx. ◆ PreferLocalFrame(). Bool_t TGLScenePad::PreferLocalFrame ; (; ); const. inlineoverridevirtual . Implements TVirtualViewer3D.; Definition at line 86 of file TGLScenePad.h. ◆ SetPad(). void TGLScenePad::SetPad ; (; TVirtualPad * ; p). inline . Definition at line 63 of file TGLScenePad.h. ◆ SetSmartRefresh(). void TGLScenePad::SetSmartRefresh ; (; Bool_t ; smart_ref). inline . Definition at line 73 of file TGLScenePad.h. ◆ Streamer(). void TGLScenePad::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGLScenePad::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TGLScenePad.h. ◆ SubPadPaint(). void TGLScenePad::SubPadPaint ; (; TVirtualPad * ; pad). Iterate over pad-primitives and import them. ; Definition at line 162 of file TGLScenePad.cxx. ◆ ValidateObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:32467,update,update,32467,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['update'],['update']
Deployability,"d from TVirtualX.; Definition at line 4323 of file TGCocoa.mm. ◆ UnmapWindow(). void TGCocoa::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmaps the specified window ""id"". ; If the specified window is already unmapped, this function has no effect. Any child window will no longer be visible (but they are still mapped) until another map call is made on the parent. ; Reimplemented from TVirtualX.; Definition at line 1184 of file TGCocoa.mm. ◆ Update(). void TGCocoa::Update ; (; Int_t ; mode). overridevirtual . Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 578 of file TGCocoa.mm. ◆ UpdateWindow(). void TGCocoa::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0 sync . Reimplemented from TVirtualX.; Definition at line 794 of file TGCocoa.mm. ◆ Warp(). void TGCocoa::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 4134 of file TGCocoa.mm. ◆ WMDeleteNotify(). void TGCocoa::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is closed via WM. ; Reimplemented from TVirtualX.; Definition at line 4270 of file TGCocoa.mm. ◆ WriteGIF(). Int_t TGCocoa::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX.; Definition at line 4163 of file TGCocoa.mm. ◆ WritePixmap(). void TGCoc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:126883,update,update,126883,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['update'],['update']
Deployability,"d in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooRealProxyRooAbsMoment::_funcInput function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooRealProxy_ifInt(F(x))dx ;; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; RooRealProxy_ixfInt((X-offset)*F(X))dx ;; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsMoment::_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSecondMoment.html:35201,integrat,integration,35201,root/html602/RooSecondMoment.html,https://root.cern,https://root.cern/root/html602/RooSecondMoment.html,2,['integrat'],['integration']
Deployability,"d in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write method name with return type ret and parameters param to out.; Build a link using file and anchor. Cooment it with comment, and; show the code codeOneLiner (set if the func consists of only one line; of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's; count of method names. TClassDocOutput(THtml& html, TClass* cl, TList* typedefs). » Author: Axel Naumann 2007-01-09 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClassDocOutput.html:14628,update,updates,14628,root/html534/TClassDocOutput.html,https://root.cern,https://root.cern/root/html534/TClassDocOutput.html,1,['update'],['updates']
Deployability,"d in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write method name with return type ret and parameters param to out.; Build a link using file and anchor. Cooment it with comment, and; show the code codeOneLiner (set if the func consists of only one line; of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's; count of method names. TClassDocOutput(THtml& html, TClass* cl, TList* typedefs). » Author: Axel Naumann 2007-01-09 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-06-02 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClassDocOutput.html:15433,update,updates,15433,root/html604/TClassDocOutput.html,https://root.cern,https://root.cern/root/html604/TClassDocOutput.html,1,['update'],['updates']
Deployability,"d in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write method name with return type ret and parameters param to out.; Build a link using file and anchor. Cooment it with comment, and; show the code codeOneLiner (set if the func consists of only one line; of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's; count of method names. TClassDocOutput(THtml& html, TClass* cl, TList* typedefs). » Author: Axel Naumann 2007-01-09 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id$ » Last generated: 2015-06-30 14:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassDocOutput.html:15433,update,updates,15433,root/html602/TClassDocOutput.html,https://root.cern,https://root.cern/root/html602/TClassDocOutput.html,1,['update'],['updates']
Deployability,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:89576,integrat,integration,89576,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['integrat'],['integration']
Deployability,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:88308,integrat,integration,88308,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['integrat'],['integration']
Deployability,"d multiple byte range request from web server. ;  ; virtual Int_t GetHead ();  Get the HTTP header. ;  ; virtual Int_t GetHunk (TSocket *s, char *hunk, Int_t maxsize);  Read a hunk of data from the socket, up until a terminator. ;  ; virtual Int_t GetLine (TSocket *s, char *line, Int_t maxsize);  Read a line from the socket. ;  ; virtual const char * HttpTerminator (const char *start, const char *peeked, Int_t peeklen);  Determine whether [START, PEEKED + PEEKLEN) contains an HTTP new line [\r]\n. ;  ; void Init (Bool_t readHeadOnly) override;  Initialize a TWebFile object. ;  ; virtual void ProcessHttpHeader (const TString &headerLine);  Process the HTTP header in the argument. ;  ; virtual Bool_t ReadBuffer10 (char *buf, Int_t len);  Read specified byte range from remote file via HTTP 1.0 daemon (without mod-root installed). ;  ; virtual Bool_t ReadBuffers10 (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read specified byte ranges from remote file via HTTP 1.0 daemon (without mod-root installed). ;  ; virtual void SetMsgReadBuffer10 (const char *redirectLocation=nullptr, Bool_t tempRedirect=kFALSE);  Set GET command for use by ReadBuffer(s)10(), handle redirection if needed. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCach",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:30965,install,installed,30965,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['install'],['installed']
Deployability,"d obsolete cache opt-out directives. */; 4054 mg_response_header_add(conn,; 4055 ""Cache-Control"",; 4056 ""no-cache, no-store, ""; 4057 ""must-revalidate, private, max-age=0"",; 4058 -1);; 4059 mg_response_header_add(conn, ""Expires"", ""0"", -1);; 4060 ; 4061 if (conn->protocol_type == PROTOCOL_TYPE_HTTP1) {; 4062 /* Obsolete, but still send it for HTTP/1.0 */; 4063 mg_response_header_add(conn, ""Pragma"", ""no-cache"", -1);; 4064 }; 4065}; 4066 ; 4067 ; 4068static void; 4069send_static_cache_header(struct mg_connection *conn); 4070{; 4071#if !defined(NO_CACHING); 4072 int max_age;; 4073 char val[64];; 4074 ; 4075 const char *cache_control =; 4076 conn->dom_ctx->config[STATIC_FILE_CACHE_CONTROL];; 4077 ; 4078 /* If there is a full cache-control option configured,0 use it */; 4079 if (cache_control != NULL) {; 4080 mg_response_header_add(conn, ""Cache-Control"", cache_control, -1);; 4081 return;; 4082 }; 4083 ; 4084 /* Read the server config to check how long a file may be cached.; 4085 * The configuration is in seconds. */; 4086 max_age = atoi(conn->dom_ctx->config[STATIC_FILE_MAX_AGE]);; 4087 if (max_age <= 0) {; 4088 /* 0 means ""do not cache"". All values <0 are reserved; 4089 * and may be used differently in the future. */; 4090 /* If a file should not be cached, do not only send; 4091 * max-age=0, but also pragmas and Expires headers. */; 4092 send_no_cache_header(conn);; 4093 return;; 4094 }; 4095 ; 4096 /* Use ""Cache-Control: max-age"" instead of ""Expires"" header.; 4097 * Reason: see https://www.mnot.net/blog/2007/05/15/expires_max-age */; 4098 /* See also https://www.mnot.net/cache_docs/ */; 4099 /* According to RFC 2616, Section 14.21, caching times should not exceed; 4100 * one year. A year with 365 days corresponds to 31536000 seconds, a; 4101 * leap; 4102 * year to 31622400 seconds. For the moment, we just send whatever has; 4103 * been configured, still the behavior for >1 year should be considered; 4104 * as undefined. */; 4105 mg_snprintf(; 4106 conn, NULL, val, sizeof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:120758,configurat,configuration,120758,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['configurat'],['configuration']
Deployability,"d obsolete cache opt-out directives. */; 4055 mg_response_header_add(conn,; 4056 ""Cache-Control"",; 4057 ""no-cache, no-store, ""; 4058 ""must-revalidate, private, max-age=0"",; 4059 -1);; 4060 mg_response_header_add(conn, ""Expires"", ""0"", -1);; 4061 ; 4062 if (conn->protocol_type == PROTOCOL_TYPE_HTTP1) {; 4063 /* Obsolete, but still send it for HTTP/1.0 */; 4064 mg_response_header_add(conn, ""Pragma"", ""no-cache"", -1);; 4065 }; 4066}; 4067 ; 4068 ; 4069static void; 4070send_static_cache_header(struct mg_connection *conn); 4071{; 4072#if !defined(NO_CACHING); 4073 int max_age;; 4074 char val[64];; 4075 ; 4076 const char *cache_control =; 4077 conn->dom_ctx->config[STATIC_FILE_CACHE_CONTROL];; 4078 ; 4079 /* If there is a full cache-control option configured,0 use it */; 4080 if (cache_control != NULL) {; 4081 mg_response_header_add(conn, ""Cache-Control"", cache_control, -1);; 4082 return;; 4083 }; 4084 ; 4085 /* Read the server config to check how long a file may be cached.; 4086 * The configuration is in seconds. */; 4087 max_age = atoi(conn->dom_ctx->config[STATIC_FILE_MAX_AGE]);; 4088 if (max_age <= 0) {; 4089 /* 0 means ""do not cache"". All values <0 are reserved; 4090 * and may be used differently in the future. */; 4091 /* If a file should not be cached, do not only send; 4092 * max-age=0, but also pragmas and Expires headers. */; 4093 send_no_cache_header(conn);; 4094 return;; 4095 }; 4096 ; 4097 /* Use ""Cache-Control: max-age"" instead of ""Expires"" header.; 4098 * Reason: see https://www.mnot.net/blog/2007/05/15/expires_max-age */; 4099 /* See also https://www.mnot.net/cache_docs/ */; 4100 /* According to RFC 2616, Section 14.21, caching times should not exceed; 4101 * one year. A year with 365 days corresponds to 31536000 seconds, a; 4102 * leap; 4103 * year to 31622400 seconds. For the moment, we just send whatever has; 4104 * been configured, still the behavior for >1 year should be considered; 4105 * as undefined. */; 4106 mg_snprintf(; 4107 conn, NULL, val, sizeof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:120790,configurat,configuration,120790,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['configurat'],['configuration']
Deployability,"d of the estimation of Compton edge is described in details in [3]. Synthetic spectrum with Compton edges. The generalized form of the algorithm is implemented in the following function.; char *Background1General(float *spectrum,; int size,; int number_of_iterations,; int direction,; int filter_order,; bool compton);; The meaning of the parameters is as follows:. spectrum: pointer to the vector of the source spectrum; size: length of spectrum vector; number_of_iterations: maximal width of clipping window; direction: direction of change of clipping window. Possible values:. BACK1_INCREASING_WINDOW; BACK1_DECREASING_WINDOW. filter_order: order of clipping filter. Possible values:. BACK1_ORDER2; BACK1_ORDER4; BACK1_ORDER6; BACK1_ORDER8. compton: logical variable whether the estimation of Compton edge will be included. Possible values:. BACK1_EXCLUDE_COMPTON; BACK1_INCLUDE_COMPTON. 1.2 2-DIMENSIONAL SPECTRA; This basic background estimation function allows to separate useless spectrum information (2D-continuous background and coincidences of peaks with background in both dimensions) from peaks. It calculates background spectrum from the source spectrum. The result is placed in the array pointed by spectrum pointer. On successful completion it returns 0. On error it returns a pointer to the string describing error.; char *Background2(float **spectrum,; int sizex,; int sizey,; int number_of_iterations);; Function parameters:. spectrum: pointer to the array of the source spectrum; sizex: x length of spectrum; sizey: y length of spectrum; number_of_iterations: width of the clipping window. In Figure 1.6 we present an example of a 2-dimensional spectrum before background elimination. 2-dimensional spectrum before background elimination. Estimated background is shown in Figure 1.7. After subtraction we get pure 2-dimensional peaks. Estimated background. Similarly to 1-dimensional case, we have generalized also the function for 2-dimensional background estimation. Sometimes th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:4948,continuous,continuous,4948,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['continuous'],['continuous']
Deployability,"d or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:2399,integrat,integration,2399,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,"d point. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLine(); Line default constructor. TLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Line normal constructor. ~TLine(); Line default destructor. TLine(const TLine& line); Line copy constructor. void Copy(TObject& line) const; Copy this line to line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw this line with new coordinates. TLine * DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw this line with new coordinates in NDC. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event.; This member function is called when a line is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void ls(Option_t* option = """") const; List this line with its attributes. void Paint(Option_t* option = """"); Paint this line with its current attributes. void PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw this line with new coordinates. void PaintLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Draw this line with new coordinates in NDC. void Print(Option_t* option = """") const; Dump this line with its attributes. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Bool_t IsHorizontal(); Check whether this line is to be drawn horizontally. Bool_t IsVertical(); Check whether this line is to be drawn vertically. void SetHorizontal(Bool_t set = kTRUE); Force the line to be drawn horizontally.; Makes fY2 equal to fY1. The line length is kept.; TArrow and TGaxis also get this function by inheritance. void SetVertical(Bool_t set = kTRUE); Force the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLine.html:7600,release,released,7600,root/html528/TLine.html,https://root.cern,https://root.cern/root/html528/TLine.html,3,['release'],['released']
Deployability,"d point. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLine(); Line default constructor. TLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Line normal constructor. ~TLine(); Line default destructor. TLine(const TLine& line); Line copy constructor. void Copy(TObject& line) const; Copy this line to line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw this line with new coordinates. TLine * DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw this line with new coordinates in NDC. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event.; This member function is called when a line is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void ls(Option_t* option = """") const; List this line with its attributes. void Paint(Option_t* option = """"); Paint this line with its current attributes. void PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw this line with new coordinates. void PaintLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Draw this line with new coordinates in NDC. void Print(Option_t* option = """") const; Dump this line with its attributes. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. Bool_t IsHorizontal(); Check whether this line is to be drawn horizontally. Bool_t IsVertical(); Check whether this line is to be drawn vertically. void SetNDC(Bool_t isNDC = kTRUE); Set NDC mode on if isNDC = kTRUE, off otherwise. void SetHorizontal(Bool_t set = kTRUE); Force the line to be drawn horizontally.; Makes fY2 equal to fY1. The line length is kept.; TArrow and TGaxis als",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLine.html:8196,release,released,8196,root/html534/TLine.html,https://root.cern,https://root.cern/root/html534/TLine.html,3,['release'],['released']
Deployability,"d prototype F is used for states ""II"" and ""III"" of; master split category mc. Furthermore parameters m,s of prototype G are split; in category c while parameter a of prototype F is split in; the product of categories c and d. The actual build is then; performed by passing the build configuration to RooSimWSTool, e.g. wst.build(""MASTER"",mbc) ;. By default, a specialization is built for each permutation of; states of the spitting categories that are used. It is possible; to restrict the building of specialized p.d.f to a subset of states; by adding a restriction on the number of states to build as follows. mbc.restrictBuild(""c"",""A,B"") ;. The restrictBuild method can be called multiple times, but at most; once for each used splitting category. For simple builds with a single; prototype, restriction can be specified with a Restrict() argument; on the build command line. Function Members (Methods); public:. virtual~ObjBuildConfig(); static TClass*Class(); virtual TClass*IsA() const; RooSimWSTool::ObjBuildConfigObjBuildConfig(); RooSimWSTool::ObjBuildConfigObjBuildConfig(const RooSimWSTool::ObjBuildConfig&); RooSimWSTool::ObjBuildConfig&operator=(const RooSimWSTool::ObjBuildConfig&); voidprint(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. RooCmdArg_conflProtocol; RooCategory*_masterCat; map<RooAbsPdf*,RooSimWSTool::ObjSplitRule>_pdfmap; map<RooAbsCategory*,list<const RooCatType*> >_restr; RooArgSet_usedSplitCats. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void print(); Print details of a validated build configuration. ObjBuildConfig(); {}. virtual ~ObjBuildConfig(); {}. » Last changed: Tue Jun 2 15:33:56 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSimWSTool__ObjBuildConfig.html:4434,configurat,configuration,4434,root/html604/RooSimWSTool__ObjBuildConfig.html,https://root.cern,https://root.cern/root/html604/RooSimWSTool__ObjBuildConfig.html,1,['configurat'],['configuration']
Deployability,"d simultaneous fits: tuning and customizing the RooFit message logging facility ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooAddPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""RooPlot.h""; #include ""RooMsgService.h""; ; using namespace RooFit;; ; void rf506_msgservice(); {; // C r e a t e p d f; // --------------------; ; // Construct gauss(x,m,s); RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar m(""m"", ""m"", 0, -10, 10);; RooRealVar s(""s"", ""s"", 1, -10, 10);; RooGaussian gauss(""g"", ""g"", x, m, s);; ; // Construct poly(x,p0); RooRealVar p0(""p0"", ""p0"", 0.01, 0., 1.);; RooPolynomial poly(""p"", ""p"", x, p0);; ; // Construct model = f*gauss(x) + (1-f)*poly(x); RooRealVar f(""f"", ""f"", 0.5, 0., 1.);; RooAddPdf model(""model"", ""model"", RooArgSet(gauss, poly), f);; ; std::unique_ptr<RooDataSet> data{model.generate(x, 10)};; ; // P r i n t c o n f i g u r a t i o n o f m e s s a g e s e r v i c e; // ---------------------------------------------------------------------------; ; // Print streams configuration; RooMsgService::instance().Print();; cout << endl;; ; // A d d i n g I n t e g r a t i o n t o p i c t o e x i s t i n g I N F O s t r e a m; // -----------------------------------------------------------------------------------------------; ; // Print streams configuration; RooMsgService::instance().Print();; cout << endl;; ; // Add Integration topic to existing INFO stream; RooMsgService::instance().getStream(1).addTopic(Integration);; ; // Construct integral over gauss to demonstrate new message stream; std::unique_ptr<RooAbsReal> igauss{gauss.createIntegral(x)};; igauss->Print();; ; // Print streams configuration in verbose, which also shows inactive streams; cout << endl;; RooMsgService::instance().Print();; cout << endl;; ; // Remove stream; RooMsgService::instance().getStream(1).removeTopic(Integration);; ; // E x a m p l e s o f p d f v a l u e t r a c i n g s t r e a m; // ----------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:1317,configurat,configuration,1317,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,1,['configurat'],['configuration']
Deployability,"d the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of the future 6.04/20. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:40105,patch,patches,40105,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['patch'],['patches']
Deployability,"d the references recalculated. Streaming object pointers. In this way, the network of pointers and their objects is rebuilt and ready to use the same way it was used before it was persistent. If the pointer hold the address of an object which in embedded in another object (as opposed to being pointed to by a pointer), the object will be duplicate at read time. To avoid this, make the pointer a transient data member.; 11.4.2 Motivation for the TRef Class; If the object is split into several files or into several branches of one or more TTrees, standard C++ pointers cannot be used because each I/O operation will write the referenced objects, and multiple copies will exist. In addition, if the pointer is read before the referenced object, it is null and may cause a run time system error. To address these limitations, ROOT offers the TRef class.; TRef allows referencing an object in a different branch and/or in a different file. TRef also supports the complex situation where a TFile is updated multiple times on the same machine or a different machine. When a TRef is read before its referenced object, it is null. As soon as the referenced object is read, the TRef points to it. In addition, one can specify an action to be taken by TRef in the case it is read before its reference object (see“Action on Demand” below).; 11.4.3 Using TRef; A TRef is a lightweight object pointing to any TObject. This object can be used instead of normal C++ pointers in case:. The referenced object R and the pointer P are not written to the same file; P is read before R; R and P are written to different Tree branches. Below is a line from the example in $ROOTSYS/test/Event.cxx.; TRef fLastTrack; //pointer to last track; ...; Track *track = (Track*)fTracks->ConstructedAt(fNtrack++);; track->Set(random);; // Save reference to last Track in the collection of Tracks; fLastTrack = track;; The track and its reference fLastTrack can be written with two separate I/O calls in the same or in different fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:480262,update,updated,480262,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['updated']
Deployability,"d time for training with 2000 events: 0.00103 sec ; LD : [dataset] : Evaluation of LD on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.000394 sec ; : <CreateMVAPdfs> Separation from histogram (PDF): 0.540 (0.000); : Dataset[dataset] : Evaluation of LD on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_LD.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_LD.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: FDA_GA for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ FDA_GA ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The function discriminant analysis (FDA) is a classifier suitable ; : to solve linear or simple nonlinear discrimination problems.; : ; : The user provides the desired function with adjustable parameters; : via the configuration option string, and FDA fits the parameters to; : it, requiring the signal (background) function value to be as close; : as possible to 1 (0). Its advantage over the more involved and; : automatic nonlinear discriminators is the simplicity and transparency ; : of the discrimination expression. A shortcoming is that FDA will; : underperform for involved problems with complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:38574,configurat,configuration,38574,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['configurat'],['configuration']
Deployability,"d to Draw() this object later. ""SAME"" will be added to; the options if they are not already present. The caller transfers; ownership of the object with this call, and the object will be; deleted when its containing plot object is destroyed. void addPlotable(RooPlotable* plotable, Option_t* drawOptions = """", Bool_t invisible = kFALSE, Bool_t refreshNorm = kFALSE); Add the specified plotable object to our plot. Increase our y-axis; limits to fit this object if necessary. The default lower-limit; is zero unless we are plotting an object that takes on negative values.; This call transfers ownership of the plotable object to this class.; The plotable object will be deleted when this plot object is deleted. void updateFitRangeNorm(const TH1* hist); Update our plot normalization over our plot variable's fit range,; which will be determined by the first suitable object added to our plot. void updateFitRangeNorm(const RooPlotable* rp, Bool_t refeshNorm = kFALSE); Update our plot normalization over our plot variable's fit range,; which will be determined by the first suitable object added to our plot. void updateYAxis(Double_t ymin, Double_t ymax, const char* label = """"); Update our y-axis limits to accomodate an object whose spread; in y is (ymin,ymax). Use the specified y-axis label if we don't; have one assigned already. void Draw(Option_t* options = 0); Draw this plot and all of the elements it contains. The specified options; only apply to the drawing of our frame. The options specified in our add...(); methods will be used to draw each object we contain. void printName(ostream& os) const; Print frame name. void printTitle(ostream& os) const; Print frame title. void printClassName(ostream& os) const; Print frame class name. void printArgs(ostream& os) const. void printValue(ostream& os) const; Print frame arguments. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Frame detailed printing. const char* nameOf(Int_t idx) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:16411,update,updateFitRangeNorm,16411,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,7,['update'],['updateFitRangeNorm']
Deployability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMultiRootFinder.html:7215,configurat,configurations,7215,root/html602/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMultiRootFinder.html,1,['configurat'],['configurations']
Deployability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html:6967,configurat,configurations,6967,root/html534/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html,1,['configurat'],['configurations']
Deployability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7215,configurat,configurations,7215,root/html604/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html,1,['configurat'],['configurations']
Deployability,"d to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for current database. Int_t GetLocking(); Return current locking mode for that file. Bool_t IsReadAccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:40694,configurat,configuration,40694,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,5,['configurat'],['configuration']
Deployability,"d using cached function; 348 ; 349 /**; 350 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method; 351 @param a lower value of the integration interval; 352 @param b upper value of the integration interval; 353 */; 354 ; 355 double Integral(double a, double b) {; 356 return !fIntegrator ? 0 : fIntegrator->Integral(a,b);; 357 }; 358 ; 359 ; 360 /**; 361 evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method.; 362 */; 363 ; 364 double Integral( ) {; 365 return !fIntegrator ? 0 : fIntegrator->Integral();; 366 }; 367 ; 368 /**; 369 evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method.; 370 @param a lower value of the integration interval; 371 */; 372 double IntegralUp(double a ) {; 373 return !fIntegrator ? 0 : fIntegrator->IntegralUp(a);; 374 }; 375 ; 376 /**; 377 evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method.; 378 @param b upper value of the integration interval; 379 */; 380 double IntegralLow( double b ) {; 381 return !fIntegrator ? 0 : fIntegrator->IntegralLow(b);; 382 }; 383 /**; 384 define operator() for IntegralLow; 385 */; 386 double operator() (double x) {; 387 return IntegralLow(x);; 388 }; 389 ; 390 ; 391 /**; 392 evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. The function has known singular points.; 393 @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value.; 394 ; 395 */; 396 double Integral( const std::vector<double> & pts) {; 397 return !fIntegrator ? 0 : fIntegr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:14989,integrat,integration,14989,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,"d* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; vector<double,allocator<double> >**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0). Int_t setObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. T* getObjByIndex(Int_t index) const. const RooNameSet* nameSet1ByIndex(Int_t index) const. const RooNameSet* nameSet2ByIndex(Int_t index) const. void insertObjectHook(vector<double,allocator<double> >& ); Interface function to perform post-insert operations on cached object. » Last changed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_vector_double___.html:3806,integrat,integration,3806,root/html530/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_vector_double___.html,2,['integrat'],['integration']
Deployability,"d->GetPrimitive(""hnew"");; 12.20.4 Using Draw Options in TTree::Draw; The next parameter is the draw option for the histogram:; root[] MyTree->Draw(""Cost:Age"",""Nation == \""FR\"""",""surf2"");. Using draw options in trees. The draw options are the same as for TH1::Draw. See “Draw Options” where they are listed. In addition to the draw options defined in TH1, there are three more. The 'prof' and 'profs' draw a profile histogram (TProfile) rather than a regular 2D histogram (TH2D) from an expression with two variables. If the expression has three variables, a TProfile2D is generated.; The ‘profs’ generates a TProfile with error on the spread. The ‘prof’ option generates a TProfile with error on the mean. The “goff” option suppresses generating the graphics. You can combine the draw options in a list separated by commas. After typing the lines above, you should now have a canvas that looks this.; 12.20.5 Superimposing Two Histograms; When superimposing two 2-D histograms inside a script with TTree::Draw and using the “same” option, you will need to update the pad between Draw commands.; {; // superimpose two 2D scatter plots; // Create a 2D histogram and fill it with random numbers; TH2 *h2 = new TH2D (""h2"",""2D histo"",100,0,70,100,0,20000);; for (Int_t i = 0; i < 10000; i++); h2->Fill(gRandom->Gaus(40,10),gRandom->Gaus(10000,3000));; // set the color to differentiate it visually; h2->SetMarkerColor(kGreen);; h2->Draw();; // Open the example file and get the tree; TFile f(""cernstaff.root"");; TTree *myTree = (TTree*)f.Get(""T"");; // the update is needed for the next draw command to work properly; gPad->Update();; myTree->Draw(""Cost:Age"", """",""same"");; }; In this example, h2->Draw is only adding the object h2 to the pad’s list of primitives. It does not paint the object on the screen. However, TTree::Draw when called with option “same” gets the current pad coordinates to build an intermediate histogram with the right limits. Since nothing has been painted in the pad yet, the pad ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:591094,update,update,591094,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['update']
Deployability,"d.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some analysis or suitable transformations of the integral prior to numerical work may contribute to numerical efficiency. References:. A.C. Genz and A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; A. van Doren and L. de Ridder, An adaptive algorithm for numerical integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. . Definition at line 84 of file AdaptiveIntegratorMultiDim.h. Public Member Functions;  AdaptiveIntegratorMultiDim (const IMultiGenFunction &f, double absTol=0.0, double relTol=1E-9, unsigned int maxcall=100000, unsigned int size=0);  Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  AdaptiveIntegratorMultiDim (double absTol=0.0, double relTol=1E-9, unsigned int maxpts=100000, unsigned int size=0);  Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:2576,integrat,integration,2576,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Fri Dec 2 14:26:46 2011 » Last generated: 2011-12-02 14:26; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:43490,integrat,integration,43490,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Mon Dec 7 13:47:28 2009 » Last generated: 2009-12-07 13:47; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:41198,integrat,integration,41198,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Mon Jul 4 15:22:42 2011 » Last generated: 2011-07-04 15:22; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooEffProd.html:42234,integrat,integration,42234,root/html530/RooEffProd.html,https://root.cern,https://root.cern/root/html530/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Thu Sep 23 19:59:31 2010 » Last generated: 2010-09-23 19:59; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffProd.html:41674,integrat,integration,41674,root/html528/RooEffProd.html,https://root.cern,https://root.cern/root/html528/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Tue Jun 2 15:30:31 2015 » Last generated: 2015-06-02 15:30; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooEffProd.html:46649,integrat,integration,46649,root/html604/RooEffProd.html,https://root.cern,https://root.cern/root/html604/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Tue Jun 30 14:32:41 2015 » Last generated: 2015-06-30 14:32; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEffProd.html:46649,integrat,integration,46649,root/html602/RooEffProd.html,https://root.cern,https://root.cern/root/html602/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d.f. value normalized over given set of observables. Double_t evaluate() const; Calculate and return 'raw' unnormalized value of p.d.f. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; Return specialized generator context for RooEffProds that implements generation; in a more efficient way than can be done for generic correlated products. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return internal integration capabilities of the p.d.f. Given a set 'allVars' for which; integration is requested, returned the largest subset for which internal (analytical); integration is implemented (in argument analVars). The return value is a unique integer; code that identifies the integration configuration (integrated observables and range name). This implementation in RooEffProd catches all integrals without normalization and reroutes them; through a custom integration routine that properly accounts for the use of normalized p.d.f.; in the evaluate() expression, which breaks the default RooAbsPdf normalization handling. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return value of integral identified by code, which should be a return value of getAnalyticalIntegralWN,; Code zero is always handled and signifies no integration (return value is normalized p.d.f. value). inline RooEffProd(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooEffProd(*this,newname); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Return kTRUE to force RooRealIntegral to offer all observables for internal integration. const RooAbsPdf* pdf() const; Return pointer to pdf in product. const RooAbsReal* eff() const; Return pointer to efficiency function in product. » Last changed: Tue Mar 10 17:16:28 2015 » Last generated: 2015-03-10 17:16; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEffProd.html:44993,integrat,integration,44993,root/html534/RooEffProd.html,https://root.cern,https://root.cern/root/html534/RooEffProd.html,1,['integrat'],['integration']
Deployability,"d::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; RooDataSet*merge(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::ToyMCStudy&operator=(const RooStats::ToyMCStudy&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRooAbsStudy::releaseDetailData(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetParamPoint(const RooArgSet& paramPoint); voidSetRandomSeed(unsigned int seed); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetToyMCSampler(RooStats::ToyMCSampler& t); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidRooAbsStudy::storeDetailedOutput(Bool_t flag); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCStudy.html:3924,release,releaseDetailData,3924,root/html602/RooStats__ToyMCStudy.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCStudy.html,2,['release'],['releaseDetailData']
Deployability,"d::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.empty()) {; 673 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 674 << ""-dim value cache for integral over "" << iset2 << "" as a function of "" << cacheParams << "" in range "" << (rangeName?rangeName:""<none>"") << std::endl ;; 675 std::string name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::mov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:25012,integrat,integration,25012,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,3,['integrat'],['integration']
Deployability,"d::unique_ptr<RooDataSet> data{argus.generate(m, 1000)};; ; // P l o t m o d e l a n d d a t a; // --------------------------------------; ; RooPlot *frame1 = m.frame(Bins(40), Title(""Argus model and data""));; data->plotOn(frame1);; argus.plotOn(frame1);; ; // F i t m o d e l t o d a t a; // ---------------------------------; ; // The ARGUS background shape has a sharp kinematic cutoff at m=m0; // and is prone to evaluation errors if the cutoff parameter m0; // is floated: when the pdf cutoff value is lower than that in data; // events with m>m0 will have zero probability; ; // Perform unbinned ML fit. Print detailed error messages for up to; // 10 events per likelihood evaluation. The default error handling strategy; // is to return a very high value of the likelihood to MINUIT if errors occur,; // which will force MINUIT to retreat from the problematic area; ; argus.fitTo(*data, PrintEvalErrors(10));; ; // Perform another fit. In this configuration only the number of errors per; // likelihood evaluation is shown, if it is greater than zero. The; // EvalErrorWall(false) arguments disables the default error handling strategy; // and will cause the actual (problematic) value of the likelihood to be passed; // to MINUIT.; //; // NB: Use of this option is NOT recommended as default strategy as broken -log(L) values; // can often be lower than 'good' ones because offending events are removed.; // This may effectively create a false minimum in problem areas. This is clearly; // illustrated in the second plot; ; m0.setError(0.1);; argus.fitTo(*data, PrintEvalErrors(0), EvalErrorWall(false));; ; // P l o t l i k e l i h o o d a s f u n c t i o n o f m 0; // ------------------------------------------------------------------; ; // Construct likelihood function of model and data; std::unique_ptr<RooAbsReal> nll{argus.createNLL(*data)};; ; // Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:1848,configurat,configuration,1848,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['configurat'],['configuration']
Deployability,"dArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()) const; virtual voidRooAbsCollection::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsCollection::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsCollection::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsCollection::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); virtual voidTObject::RecursiveRemove(TObject* obj); voidRooAbsCollection::releaseOwnership(); virtual Bool_tRooAbsCollection::remove(const RooAbsArg& var, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); Bool_tRooAbsCollection::remove(const RooAbsCollection& list, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); virtual voidRooAbsCollection::removeAll(); Bool_tRooAbsCollection::replace(const RooAbsCollection& other); virtual Bool_tRooAbsCollection::replace(const RooAbsArg& var1, const RooAbsArg& var2); voidTObject::ResetBit(UInt_t f); RooArgList(); RooArgList(const RooArgSet& set); RooArgList(const char* name); RooArgList(const TCollection& tcoll, const char* name = """"); RooArgList(const RooAbsArg& var1, const char* name = """"); RooArgList(const RooArgList& other, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const char* name = """"); RooArgList(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgList.html:7927,release,releaseOwnership,7927,root/html602/RooArgList.html,https://root.cern,https://root.cern/root/html602/RooArgList.html,2,['release'],['releaseOwnership']
Deployability,"dArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()) const; virtual voidRooAbsCollection::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsCollection::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsCollection::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsCollection::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); virtual voidTObject::RecursiveRemove(TObject* obj); voidRooAbsCollection::releaseOwnership(); virtual Bool_tRooAbsCollection::remove(const RooAbsArg& var, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); Bool_tRooAbsCollection::remove(const RooAbsCollection& list, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); virtual voidRooAbsCollection::removeAll(); Bool_tRooAbsCollection::replace(const RooAbsCollection& other); virtual Bool_tRooAbsCollection::replace(const RooAbsArg& var1, const RooAbsArg& var2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); RooAbsCollection*RooAbsCollection::selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgList.html:9181,release,releaseOwnership,9181,root/html526/RooArgList.html,https://root.cern,https://root.cern/root/html526/RooArgList.html,2,['release'],['releaseOwnership']
Deployability,"dArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()) const; virtual voidRooAbsCollection::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsCollection::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsCollection::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsCollection::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); virtual voidTObject::RecursiveRemove(TObject* obj); voidRooAbsCollection::releaseOwnership(); virtual Bool_tRooAbsCollection::remove(const RooAbsArg& var, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); Bool_tRooAbsCollection::remove(const RooAbsCollection& list, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); virtual voidRooAbsCollection::removeAll(); Bool_tRooAbsCollection::replace(const RooAbsCollection& other); virtual Bool_tRooAbsCollection::replace(const RooAbsArg& var1, const RooAbsArg& var2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); RooAbsCollection*RooAbsCollection::selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* name, Bool_t value = kTRUE); void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooArgList.html:9384,release,releaseOwnership,9384,root/html530/RooArgList.html,https://root.cern,https://root.cern/root/html530/RooArgList.html,3,['release'],['releaseOwnership']
Deployability,"dArgs, const TList& nameList) const; Check if allArgs contains matching elements for each name in nameList. If it does,; add the corresponding args from allArgs to matchedArgs and return kTRUE. Otherwise; return kFALSE and do not change matchedArgs. RooNumIntConfig* defaultIntegratorConfig(); Returns the default numeric integration configuration for all RooAbsReals. RooNumIntConfig* specialIntegratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumIntConfig* specialIntegratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. RooNumIntConfig* getIntegratorConfig(); Return the numeric integration configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setIntegratorConfig(const RooNumIntConfig& config); Set the given integrator configuration as default numeric integration; configuration for this object. void setIntegratorConfig(); Remove the specialized numeric integration configuration associated; with this object. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function to force use of a given set of observables; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:59363,integrat,integration,59363,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"dCppVarName(name, ""DefinePerSample"");; 738 RDFInternal::CheckForRedefinition(""DefinePerSample"", name, fColRegister, fLoopManager->GetBranchNames(),; 739 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 740 ; 741 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType_t));; 742 if (retTypeName.empty()) {; 743 // The type is not known to the interpreter.; 744 // We must not error out here, but if/when this column is used in jitted code; 745 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType_t));; 746 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 747 }; 748 ; 749 auto newColumn =; 750 std::make_shared<RDFDetail::RDefinePerSample<F>>(name, retTypeName, std::move(expression), *fLoopManager);; 751 ; 752 RDFInternal::RColumnRegister newCols(fColRegister);; 753 newCols.AddDefine(std::move(newColumn));; 754 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 755 return newInterface;; 756 }; 757 ; 758 // clang-format off; 759 ////////////////////////////////////////////////////////////////////////////; 760 /// \brief Define a new column that is updated when the input sample changes.; 761 /// \param[in] name The name of the defined column.; 762 /// \param[in] expression A valid C++ expression as a string, which will be used to compute the defined value.; 763 /// \return the first node of the computation graph for which the new quantity is defined.; 764 ///; 765 /// The expression is just-in-time compiled and used to produce the column entries.; 766 /// It must be valid C++ syntax and the usage of the special variable names `rdfslot_` and `rdfsampleinfo_` is; 767 /// permitted, where these variables will take the same values as the `slot` and `id` parameters described at the; 768 /// DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information.; 769 ///; 770 /// ### Example usage:; 771 /// ~~~{.py}; 772 /// df = ROOT.RDataFrame('mytr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:40157,update,updated,40157,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['update'],['updated']
Deployability,"dDirectoryStatus(); 189{; 190 return fgAddDirectory;; 191}; 192 ; 193////////////////////////////////////////////////////////////////////////////////; 194/// Append object to this directory.; 195///; 196/// If `replace` is true:; 197/// remove any existing objects with the same name (if the name is not """"); 198 ; 199void TDirectory::Append(TObject *obj, Bool_t replace /* = kFALSE */); 200{; 201 if (!obj || !fList) return;; 202 ; 203 if (replace && obj->GetName() && obj->GetName()[0]) {; 204 TObject *old;; 205 while (nullptr != (old = GetList()->FindObject(obj->GetName()))) {; 206 Warning(""Append"",""Replacing existing %s: %s (Potential memory leak)."",; 207 obj->IsA()->GetName(),obj->GetName());; 208 ROOT::DirAutoAdd_t func = old->IsA()->GetDirectoryAutoAdd();; 209 if (func) {; 210 func(old,nullptr);; 211 } else {; 212 Remove(old);; 213 }; 214 }; 215 }; 216 ; 217 fList->Add(obj);; 218 // A priori, a `TDirectory` object is assumed to not have shared ownership.; 219 // If it is, let's rely on the user to update the bit.; 220 if (!dynamic_cast<TDirectory*>(obj)); 221 obj->SetBit(kMustCleanup);; 222}; 223 ; 224////////////////////////////////////////////////////////////////////////////////; 225/// Browse the content of the directory.; 226 ; 227void TDirectory::Browse(TBrowser *b); 228{; 229 if (b) {; 230 TObject *obj = nullptr;; 231 TIter nextin(fList);; 232 ; 233 cd();; 234 ; 235 //Add objects that are only in memory; 236 while ((obj = nextin())) {; 237 b->Add(obj, obj->GetName());; 238 }; 239 }; 240}; 241 ; 242////////////////////////////////////////////////////////////////////////////////; 243/// Initialise directory to defaults.; 244///; 245/// If directory is created via default ctor (when dir is read from file); 246/// don't add it here to the directory since its name is not yet known.; 247/// It will be added to the directory in TKey::ReadObj().; 248 ; 249void TDirectory::BuildDirectory(TFile* /*motherFile*/, TDirectory* motherDir); 250{; 251 fList = new THashList(1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:7235,update,update,7235,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['update'],['update']
Deployability,"dIs test statistic sealed -- i.e. no access to data; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_tRooAbsTestStatistic::_setNumPartition number of this instance in parallel calculation mode; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Bool_t_showProgressShow progress indication during evaluation if true; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<string,string>RooAbsArg::_stringAttribString attributes; Double_t_sumWeightGlobal sum of weights needed for normalization; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDataWeightedAverage(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t showProgress = kFALSE, Bool_t verbose = kTRUE); Constructor of data weighted average of given p.d.f over given data. If nCPU>1 the calculation is parallelized; over multuple processes. If showProgress is true a progress indicator printing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataWeightedAverage.html:42831,integrat,integrator,42831,root/html602/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html602/RooDataWeightedAverage.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"dObject(""geom_help"");; if (c) {; c->Clear();; c->Update();; c->cd();; } else {; c = new TCanvas(""geom_help"",""Help to run demos"",200,10,700,600);; }; ; TPaveText *welcome = new TPaveText(.1,.8,.9,.97);; welcome->AddText(""Welcome to the new geometry package"");; welcome->SetTextFont(32);; welcome->SetTextColor(4);; welcome->SetFillColor(24);; welcome->Draw();; ; TPaveText *hdemo = new TPaveText(.05,.05,.95,.7);; hdemo->SetTextAlign(12);; hdemo->SetTextFont(52);; hdemo->AddText(""- Demo for building TGeo basic shapes and simple geometry. Shape parameters are"");; hdemo->AddText("" displayed in the right pad"");; hdemo->AddText(""- Click left mouse button to execute one demo"");; hdemo->AddText(""- While pointing the mouse to the pad containing the geometry, do:"");; hdemo->AddText(""- .... click-and-move to rotate"");; hdemo->AddText(""- .... press j/k to zoom/unzoom"");; hdemo->AddText(""- .... press l/h/u/i to move the view center around"");; hdemo->AddText(""- Click Ray-trace ON/OFF to toggle ray-tracing"");; hdemo->AddText(""- Use <View with x3d> from the <View> menu to get an x3d view"");; hdemo->AddText(""- .... same methods to rotate/zoom/move the view"");; hdemo->AddText(""- Execute box(1,8) to divide a box in 8 equal slices along X"");; hdemo->AddText(""- Most shapes can be divided on X,Y,Z,Rxy or Phi :"");; hdemo->AddText(""- .... root[0] <shape>(IAXIS, NDIV, START, STEP);"");; hdemo->AddText("" .... IAXIS = 1,2,3 meaning (X,Y,Z) or (Rxy, Phi, Z)"");; hdemo->AddText("" .... NDIV = number of slices"");; hdemo->AddText("" .... START = start slicing position"");; hdemo->AddText("" .... STEP = division step"");; hdemo->AddText(""- Click Comments ON/OFF to toggle comments"");; hdemo->AddText(""- Click Ideal/Align geometry to see how alignment works"");; hdemo->AddText("" "");; hdemo->SetAllWith(""...."",""color"",2);; hdemo->SetAllWith(""...."",""font"",72);; hdemo->SetAllWith(""...."",""size"",0.03);; ; hdemo->Draw();; ; c->Update();; }; ; //__________________________________________________________________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:6362,toggle,toggle,6362,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,1,['toggle'],['toggle']
Deployability,"dObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Classstatic TClass * Class(); TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TProtoClassPersistent version of a TClass.Definition TProtoClass.h:38; TROOT::GetIncludeDirstatic const TString & GetIncludeDir()Get the include directory in the installation. Static utility function.Definition TROOT.cxx:3046; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::AddExtraInterpreterArgsstatic const std::vector< std::string > & AddExtraInterpreterArgs(const std::vector< std::string > &args)Provide command line arguments to the interpreter construction.Definition TROOT.cxx:2956; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2966; TROOT::GetSharedLibDirstatic const TString & GetSharedLibDir()Get the shared libraries directory in the installation. Static utility function.Definition TROOT.cxx:3035; TSeqCollectionSequenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:477324,install,installation,477324,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['install'],['installation']
Deployability,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:19141,integrat,integrator,19141,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,72,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:31967,integrat,integrator,31967,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,432,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:16853,integrat,integrator,16853,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,4,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"dPrint() const; virtual voidPrintDebug(TBuffer& buffer, void* object) const; TStreamerInfoActions::TConfigurationTConfiguration(const TStreamerInfoActions::TConfiguration&); TStreamerInfoActions::TConfigurationTConfiguration(TVirtualStreamerInfo* info, UInt_t id, TStreamerInfoActions::TConfiguration::TCompInfo_t* compinfo, Int_t offset); TStreamerInfoActions::TConfigurationTConfiguration(TVirtualStreamerInfo* info, UInt_t id, TStreamerInfoActions::TConfiguration::TCompInfo_t* compinfo, Int_t offset, UInt_t length). Data Members; public:. TStreamerInfoActions::TConfiguration::TCompInfo_t*fCompInfoAccess to compiled information (for legacy code); UInt_tfElemIdIdentifier of the TStreamerElement; TVirtualStreamerInfo*fInfoTStreamerInfo form which the action is derived; UInt_tfLengthNumber of element in a fixed length array.; Int_tfOffsetOffset within the object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddToOffset(Int_t delta); Add the (potentially negative) delta to all the configuration's offset. This is used by; TBranchElement in the case of split sub-object. void Print() const; Inform the user what we are about to stream. void PrintDebug(TBuffer& buffer, void* object) const; Inform the user what we are about to stream. TConfiguration(TVirtualStreamerInfo* info, UInt_t id, TStreamerInfoActions::TConfiguration::TCompInfo_t* compinfo, Int_t offset); {}. TConfiguration(TVirtualStreamerInfo* info, UInt_t id, TStreamerInfoActions::TConfiguration::TCompInfo_t* compinfo, Int_t offset, UInt_t length); {}. virtual ~TConfiguration(); {}. TConfiguration * Copy(); { return new TConfiguration(*this); }. TConfiguredAction & operator=(const TStreamerInfoActions::TConfiguration& ); WARNING: Technically this is a move assignment!. » Author: Philippe Canal 05/2010 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStreamerInfoActions__TConfiguration.html:1648,configurat,configuration,1648,root/html604/TStreamerInfoActions__TConfiguration.html,https://root.cern,https://root.cern/root/html604/TStreamerInfoActions__TConfiguration.html,1,['configurat'],['configuration']
Deployability,"dQWidget::grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags()); voidQWidget::grabKeyboard(); voidQWidget::grabMouse(); voidQWidget::grabMouse(const QCursor&); intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQRootCanvas.html:4103,install,installEventFilter,4103,root/html602/TQRootCanvas.html,https://root.cern,https://root.cern/root/html602/TQRootCanvas.html,2,['install'],['installEventFilter']
Deployability,"dSetBasketSize(const char* bname, Int_t buffsize = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr = 0); virtual Int_tSetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidSetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidSetBranchStyle(Int_t style = 1); virtual Int_tSetCacheEntryRange(Long64_t first, Long64_t last); virtual voidSetCacheLearnEntries(Int_t n = 10); virtual Int_tSetCacheSize(Long64_t cachesize = -1); virtual voidSetChainOffset(Long64_t offset = 0); virtual voidSetCircular(Long64_t maxEntries); virtual voidSetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidSetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidSetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tSetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* list, Option_t* opt = """"); virtual voidSetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* list); virtual voidSetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetMakeClass(Int_t make); virtual voidTAttMarker::SetMarkerAttrib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:26355,update,updateExisting,26355,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['update'],['updateExisting']
Deployability,"dSetRelTolerance(double relTolerance); voidSetType(ROOT::Math::IntegrationMultiDim::Type type); doubleSigma(); virtual intStatus() const. protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; ROOT::Math::MCIntegration::ModefMode; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::IntegrationMultiDim::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 1.E-6, double relTol = 1E-4, unsigned int calls = 500000); constructors; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. GSLMCIntegrator(const char * type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must impleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:3038,integrat,integration,3038,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"dSetRnrLine(Bool_t rnr, TEveElement* el); voidSetRnrPoints(Bool_t r); voidSetRnrPoints(Bool_t r, TEveElement* el); virtual Bool_tTEveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackList.html:17828,update,update,17828,root/html528/TEveTrackList.html,https://root.cern,https://root.cern/root/html528/TEveTrackList.html,6,['update'],['update']
Deployability,dSetSelectable(Bool_t a); voidSetStyle(Short_t st); virtual voidSetTitle(const char* title); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Short_tStyle() const; voidTagViewersChanged(); Bool_tTGLLockable::TakeLock(TGLLockable::ELock lock) const; virtual voidUpdateSceneInfo(TGLRnrCtx& ctx). private:. TGLSceneBase&operator=(const TGLSceneBase&). Data Members; public:. enum TGLLockable::ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. Bool_tfAutoDestruct; TGLBoundingBoxfBoundingBoxbounding box for scene (axis aligned) - lazy update - use BoundingBox() to access; Bool_tfBoundingBoxValidbounding box valid?; TGLClip*fClipScene clipping-plane.; Bool_tfDoClipCheckPerform global clip-plane-check in UpdateSceneInfo(); Bool_tfDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); Short_tfLODScene-lod.; TGLLockable::ELockTGLLockable::fLockLock state.; UInt_tfMinorStampCounter increased on minimal update.; TStringfNameObject identifier.; Float_tfOLLineWScene outline line-width.; UInt_tfSceneIDUnique scene id.; Bool_tfSelectableObjects in the scene are selectable.; Short_tfStyleScene-style.; UInt_tfTimeStampCounter increased on every update.; TStringfTitleObject title.; list<TGLViewerBase*>fViewers; Float_tfWFLineWScene wire-frame line-width. private:. static UInt_tfgSceneIDSrc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLSceneBase(); Destructor. void AddViewer(TGLViewerBase* viewer); Add viewer to the list. void RemoveViewer(TGLViewerBase* viewer); Remove viewer from the list.; If auto-destruct is on and the last viewer is removed the scene; destructs itself. void TagViewersChanged(); Tag all viewers as changed. const char* LockIdStr() const; Name printed on locking info messages. TGLSceneInfo* CreateSceneInfo(TGLViewerBase* view); Create a scene-info instance appropriate for this scene class.; Here we instan,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLSceneBase.html:3967,update,update,3967,root/html534/TGLSceneBase.html,https://root.cern,https://root.cern/root/html534/TGLSceneBase.html,1,['update'],['update']
Deployability,"dTAttAxis::SetTitleFont(Style_t font = 62)MENU ; virtual voidTAttAxis::SetTitleOffset(Float_t offset = 1)MENU ; virtual voidTAttAxis::SetTitleSize(Float_t size = 0.04)MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var). protected:. virtual voidTEveElement::AnnihilateRecursively(); voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.005); voidTAttBBox::BBoxCheckPoint(const Float_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveProjectionAxes.html:17017,update,update,17017,root/html534/TEveProjectionAxes.html,https://root.cern,https://root.cern/root/html534/TEveProjectionAxes.html,2,['update'],['update']
Deployability,"dTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidregisterSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()); voidstoreDetailedOutput(TNamed& object); voidstoreSummaryOutput(const RooArgSet& vars). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooLinkedList*_detailData!; Bool_t_ownDetailData; Bool_t_storeDetails; RooDataSet*_summaryData!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsStudy(const char* name, const char* title); Constructor. RooAbsStudy(const RooAbsStudy& other); Copy constructor. ~RooAbsStudy(); Destructor. void registerSummaryOutput(const RooArgSet& allVars, const RooArgSet& varsWithError = RooArgSet(), const RooArgSet& varsWithAsymError = RooArgSet()). void storeSummaryOutput(const RooArgSet& vars). void storeDetailedOutput(TNamed& object). void aggregateSummaryOutput(TList* chunkList). RooAbsStudy(); {}. Bool_t attach(RooWorkspace& ); { return kFALSE ; }. Bool_t initialize(); { return kFALSE ; }. Bool_t execute(); { return kFALSE ; }. Bool_t finalize(); { return 0 ; }. void storeDetailedOutput(Bool_t flag); { _storeDetails = flag ; }. RooDataSet* summaryData(); { return _summaryData ; }. RooLinkedList* detailedData(); { return _detailData ; }. void releaseDetailData(); { _ownDetailData = kFALSE ; }. » Last changed: Thu Sep 23 19:58:20 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsStudy.html:6994,release,releaseDetailData,6994,root/html528/RooAbsStudy.html,https://root.cern,https://root.cern/root/html528/RooAbsStudy.html,1,['release'],['releaseDetailData']
Deployability,"dTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact); Double_t*xvec(Double_t& xx). Data Members; public:. enum SummationRule { Trapezoid; Midpoint; };; enum { _nPoints; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*_c! Integrator workspace; Double_t*_d! Integrator workspace; Bool_t_doExtrapApply conversion step?; Double_t_epsAbsAbsolute convergence tolerance; Double_t_epsRelRelative convergence tolerance; Double_t_extrapError! Error on extrapolated value; Double_t_extrapValue! Extrapolated value; Int_t_fixStepsFixed number of steps ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Double_t*_h! Integrator workspace; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:7328,integrat,integration,7328,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,5,['integrat'],"['integration', 'integrator']"
Deployability,"dTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact); Double_t*xvec(Double_t& xx). Data Members; public:. enum SummationRule { Trapezoid; Midpoint; };; enum { _nPoints; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*_c! Integrator workspace; Double_t*_d! Integrator workspace; Bool_t_doExtrapApply conversion step?; Double_t_epsAbsAbsolute convergence tolerance; Double_t_epsRelRelative convergence tolerance; Double_t_extrapError! Error on extrapolated value; Double_t_extrapValue! Extrapolated value; Int_t_fixStepsFixed number of steps ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Double_t*_h! Integrator workspace; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, SummationRule rule,				 Int_t maxSteps, Double_t eps); Construct integrator on given function binding, using specified summation; rule, maximum number of ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:7342,integrat,integration,7342,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,5,['integrat'],"['integration', 'integrator']"
Deployability,"dTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact); Double_t*xvec(Double_t& xx). Data Members; public:. enum SummationRule { Trapezoid; Midpoint; };; enum { _nPoints; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*_c! Integrator workspace; Double_t*_d! Integrator workspace; Bool_t_doExtrapApply conversion step?; Double_t_epsAbsAbsolute convergence tolerance; Double_t_epsRelRelative convergence tolerance; Double_t_extrapError! Error on extrapolated value; Double_t_extrapValue! Extrapolated value; Int_t_fixStepsFixed number of steps ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Double_t*_h! Integrator workspace; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator1D.html:7397,integrat,integration,7397,root/html530/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator1D.html,15,['integrat'],"['integration', 'integrator']"
Deployability,"dTObject::ResetBit(UInt_t f); static voidTBranch::ResetCount(); virtual voidTBranch::ResetReadEntry(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetAddress(void* addobj); virtual voidTBranch::SetAutoDelete(Bool_t autodel = kTRUE); virtual voidTBranch::SetBasketSize(Int_t buffsize); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBlockName(const char* name); virtual voidTBranch::SetBufferAddress(TBuffer* entryBuffer); virtual voidTBranch::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEntries(Long64_t n); virtual voidTBranch::SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); virtual voidTBranch::SetFile(TFile* file = 0); virtual voidTBranch::SetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTBranch::SetFirstEntry(Long64_t entry); virtual Bool_tTBranch::SetMakeClass(Bool_t decomposeObj = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTBranch::SetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBranch::SetOffset(Int_t offset = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTBranch::SetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookBranch.html:7603,update,updateSubBranches,7603,root/html528/THbookBranch.html,https://root.cern,https://root.cern/root/html528/THbookBranch.html,1,['update'],['updateSubBranches']
Deployability,"daptive bandwidths and for the 1st non-adaptive pass for; the calculation of adaptive keys p.d.f.s. The optional weight arguments allows to specify an observable or function; expression in observables that specifies the weight of each event. RooNDKeysPdf(const char *name, const char *title, RooAbsReal& x, RooDataSet& data, Mirror mirror, Double_t rho, Double_t nSigma, Bool_t rotate); Backward compatibility constructor for (1-dim) RooKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1.0, Double_t nSigma = 3, Bool_t rotate = kTRUE); Backward compatibility constructor for Roo2DKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); Constructor. ~RooNDKeysPdf(). createPdf(Bool_t firstCall = kTRUE) const; evaluation order of constructor. setOptions() const; set the configuration. initialize() const; initialization. loadDataSet(Bool_t firstCall) const; copy the dataset and calculate some useful variables. mirrorDataSet() const; determine mirror dataset.; mirror points are added around the physical boundaries of the dataset; Two steps:; 1. For each entry, determine if it should be mirrored (the mirror configuration).; 2. For each mirror configuration, make the mirror points. loadWeightSet() const. calculateShell(RooNDKeysPdf::BoxInfo* bi) const; determine points in +/- nSigma shell around the box determined by the variable; ranges. These points are needed in the normalization, to determine probability; leakage in and out of the box. calculatePreNorm(RooNDKeysPdf::BoxInfo* bi) const; bi->nEventsBMSW=0.;; bi->nEventsBW=0.;. sortDataIndices(RooNDKeysPdf::BoxInfo* bi = 0) const; sort entries, as needed for loopRange(). calculateBandWidth() const. gauss(vector<Double_t>& x, vector<vector<Double_t> >& weights) const; loop over all closest point to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNDKeysPdf.html:44621,configurat,configuration,44621,root/html526/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html526/RooNDKeysPdf.html,1,['configurat'],['configuration']
Deployability,"daptiveGaussKronrodIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAdaptiveGaussKronrodIntegrator1D. class RooAdaptiveGaussKronrodIntegrator1D: public RooAbsIntegrator. RooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm.; An adaptive Gaussian quadrature method for numerical integration in; which error is estimation based on evaluation at special points; known as ""Kronrod points."" By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration.; This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation; This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached.; For integrands with integrable singulaties the Wynn epsilon rule; can be selected to speed up the converges of these integrals; . Function Members (Methods); public:. RooAdaptiveGaussKronrodIntegrator1D(); RooAdaptiveGaussKronrodIntegrator1D(const RooAdaptiveGaussKronrodIntegrator1D&); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); virtual~RooAdaptiveGaussKronrodIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:924,integrat,integration,924,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,10,['integrat'],"['integration', 'integrator']"
Deployability,"daptiveGaussKronrodIntegrator1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAdaptiveGaussKronrodIntegrator1D. class RooAdaptiveGaussKronrodIntegrator1D: public RooAbsIntegrator. RooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm.; An adaptive Gaussian quadrature method for numerical integration in; which error is estimation based on evaluation at special points; known as ""Kronrod points."" By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration.; This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation; This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached.; For integrands with integrable singulaties the Wynn epsilon rule; can be selected to speed up the converges of these integrals; . Function Members (Methods); public:. virtual~RooAdaptiveGaussKronrodIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html:924,integrat,integration,924,root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,4,['integrat'],"['integration', 'integrator']"
Deployability,"daptiveGaussKronrodIntegrator1D. class RooAdaptiveGaussKronrodIntegrator1D: public RooAbsIntegrator. RooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm.; An adaptive Gaussian quadrature method for numerical integration in; which error is estimation based on evaluation at special points; known as ""Kronrod points."" By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration.; This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation; This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached.; For integrands with integrable singulaties the Wynn epsilon rule; can be selected to speed up the converges of these integrals; . Function Members (Methods); public:. RooAdaptiveGaussKronrodIntegrator1D(); RooAdaptiveGaussKronrodIntegrator1D(const RooAdaptiveGaussKronrodIntegrator1D&); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); virtual~RooAdaptiveGaussKronrodIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:1234,integrat,integration,1234,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,10,['integrat'],"['integrated', 'integration']"
Deployability,"daptiveGaussKronrodIntegrator1D. class RooAdaptiveGaussKronrodIntegrator1D: public RooAbsIntegrator. RooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm.; An adaptive Gaussian quadrature method for numerical integration in; which error is estimation based on evaluation at special points; known as ""Kronrod points."" By suitably picking these points,; abscissas from previous iterations can be reused as part of the new; set of points, whereas usual Gaussian quadrature would require; recomputation of all abscissas at each iteration.; This class automatically handles (-inf,+inf) integrals by dividing; the integration in three regions (-inf,-1), (-1,1), (1,inf) and; calculating the 1st and 3rd term using a x -> 1/x coordinate; transformation; This class embeds the adaptive Gauss-Kronrod integrator from the; GNU Scientific Library version 1.5 and applies a chosen rule ( 10-,; 21-, 31-, 41, 51- or 61-point). The integration domain is; subdivided and recursively integrated until the required precision; is reached.; For integrands with integrable singulaties the Wynn epsilon rule; can be selected to speed up the converges of these integrals; . Function Members (Methods); public:. virtual~RooAdaptiveGaussKronrodIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html:1234,integrat,integration,1234,root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveGaussKronrodIntegrator1D.html,4,['integrat'],"['integrated', 'integration']"
Deployability,"daptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); unsigned intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); virtual voidSetRelTolerance(double relTol); virtual intStatus() const. Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error ; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function ; unsigned intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result ; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int size = 100000). construct given optionally tolerance (absolute and relative) and maximum size of working array; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000). construct with a reference to the integrand function and given optionally; tolerance (absolute and relative) and maximum size of working array. virtual ~AdaptiveInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html:2212,integrat,integration,2212,root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"data is cloned or not. . Offset(std::string const& mode) Likelihood offsetting mode. Can be either: . Mode Description . none - default No offsetting. . initial Offset likelihood by initial value (so that starting value of FCN in minuit is zero). This can improve numeric stability in simultaneous fits with components with large likelihood values. . bin Offset likelihood bin-by-bin with a template histogram model based on the obersved data. This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum, which can drastically improve numeric stability. Furthermore, \(2\cdot \text{NLL}\) defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests. . IntegrateBins(double precision) In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre. This can reduce the bias observed when fitting functions with high curvature to binned data.; precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning. Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator has to be manipulated directly.; precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; precision < 0: Deactivate. See alsoRooBinSamplingPdf . ModularL(bool flag) Enable or disable modular likelihoods, which will become the default in a future release. This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this should be set to true for parallel minimization of likelihoods! Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since some features such as offsetting might not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:95174,integrat,integration,95174,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['integrat'],['integration']
Deployability,"date RConfig data. ; Definition at line 372 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 276 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 268 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:8506,configurat,configuration,8506,doc/v632/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html,1,['configurat'],['configuration']
Deployability,"date RConfig data. ; Definition at line 379 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 283 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 275 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:8549,configurat,configuration,8549,doc/master/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html,1,['configurat'],['configuration']
Deployability,date contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:40562,integrat,integration,40562,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"dd"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionServerFrame.html:20190,configurat,configuration,20190,root/html528/TSessionServerFrame.html,https://root.cern,https://root.cern/root/html528/TSessionServerFrame.html,4,['configurat'],['configuration']
Deployability,"dd(h1);. TH1F *h2 = new TH1F(""h2"",""h2"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""h3"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);. hs->Draw(""nostackb"");; return cst0;; }. NOSTACKB plot example. GUI Libraries; TGTextViewostream. A new TGTextViewostream class has been added. It is a text viewer widget and is a specialization of TGTextView and std::ostream. It uses a TGTextViewStreamBuf, which inherits from std::streambuf, allowing to stream text directly to the text view in a cout - like fashion. A new tutorial showing how to use the TGTextViewostream widget has also been added. FitPanel. Add the functionality for composing function using convolution and for normalized sums using the new TF1NormSum and TF1Convolution classes. 2D Graphics Libraries; TText. The character position was not correct with the Cocoa backend. (see https://sft.its.cern.ch/jira/browse/ROOT-6561); Interactive update of TText position did not work in NDC mode. (se https://sft.its.cern.ch/jira/browse/ROOT-7284). TLegend. Use the new TStyle global attribute gStyle->GetLegendTextSize() to set the legend item text size. If this value is 0 and if the text size directly set on the TLegend object is also 0, then the text size is automatically computed to fit the legend box. If gStyle->GetLegendTextSize() is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the text size directly set on the TLegend object is not null, then it is used to draw the legend text. TTexDump. The hollow fill style was not rendered correctly. (see https://sft.its.cern.ch/jira/browse/ROOT-6841); Better line width matching with screen and pdf output.; Text color was ignored. It was always black.; Text color was ignored. It was always black.; The underscore _ produced an error outside the TeX math context.; Fix an issue with transparent pads.; Implement ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:20812,update,update,20812,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['update'],['update']
Deployability,"dd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:114; ROOT::ResetAfterMergeFunc_tvoid(* ResetAfterMergeFunc_t)(void *, TFileMergeInfo *)Definition Rtypes.h:116; ROOT::DesFunc_tvoid(* DesFunc_t)(void *)Definition Rtypes.h:113; ROOT::GetClassTClass * GetClass(T *)Definition TClass.h:663; ROOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5869; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:111; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:110; ROOT::EFunctionMatchModeEFunctionMatchModeDefinition TDictionary.h:161; ROOT::kConversionMatch@ kConversionMatchDefinition TDictionary.h:163; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:112; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:109; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:115; whatstatic const char * whatDefinition stlLoader.cc:5; ROOT::Internal::TClassGetClassHelperDefinition TClass.h:630; ROOT::Internal::TClassGetClassHelper::GetClassstatic TClass * GetClass(Bool_t load, Bool_t silent)Definition TClass.h:631; TClass::ObjectPtrDefinition TClass.h:140; TClass::ObjectPtr::fPtrvoid * fPtrDefinition TClass.h:141; TClass::ObjectPtr::GetAllocatorTVirtualStreamerInfo * GetAllocator() constDefinition TClass.h:149; TClass::ObjectPtr::GetPtrvoid * GetPtr() constDefinition TClass.h:147; TClass::ObjectPtr::fAllocatorTVirtualStreamerInfo * fAllocatorDefinition TClass.h:143; TClass::ObjectPtr::ObjectPtrObjectPtr(void *ptr=nullptr, TVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:85390,update,update,85390,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['update'],['update']
Deployability,"dd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:119; ROOT::ResetAfterMergeFunc_tvoid(* ResetAfterMergeFunc_t)(void *, TFileMergeInfo *)Definition Rtypes.h:121; ROOT::DesFunc_tvoid(* DesFunc_t)(void *)Definition Rtypes.h:118; ROOT::GetClassTClass * GetClass(T *)Definition TClass.h:663; ROOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5936; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:116; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:115; ROOT::EFunctionMatchModeEFunctionMatchModeDefinition TDictionary.h:161; ROOT::kConversionMatch@ kConversionMatchDefinition TDictionary.h:163; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:117; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:114; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:120; whatstatic const char * whatDefinition stlLoader.cc:5; ROOT::Internal::TClassGetClassHelperDefinition TClass.h:630; ROOT::Internal::TClassGetClassHelper::GetClassstatic TClass * GetClass(Bool_t load, Bool_t silent)Definition TClass.h:631; TClass::ObjectPtrDefinition TClass.h:140; TClass::ObjectPtr::fPtrvoid * fPtrDefinition TClass.h:141; TClass::ObjectPtr::GetAllocatorTVirtualStreamerInfo * GetAllocator() constDefinition TClass.h:149; TClass::ObjectPtr::GetPtrvoid * GetPtr() constDefinition TClass.h:147; TClass::ObjectPtr::fAllocatorTVirtualStreamerInfo * fAllocatorDefinition TClass.h:143; TClass::ObjectPtr::ObjectPtrObjectPtr(void *ptr=nullptr, TVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:85218,update,update,85218,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['update'],['update']
Deployability,"ddition the member functions actualObservables() and actualParameters() must be define which report what the actual observables to be cached are for a given set of observables passed by the user to getVal() and on which parameters need to be tracked for changes to trigger a refilling of the cache histogram. ; Definition at line 24 of file RooAbsCachedReal.h. Classes; class  FuncCacheElem;  . Public Member Functions;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward call to implementation in relevant RooHistFunc instance. ;  ; void disableCache (bool flag);  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. ;  ; Int_t getInterpolationOrder () const;  ; double getValV (const RooArgSet *set=nullptr) const override;  Implementation of getVal() overriding default implementation of RooAbsReal. ;  ; TClass * IsA () const override;  ; virtual bool selfNormalized () const;  ; void setInterpolationOrder (Int_t order);  Set interpolation order of RooHistFunct representing cache histogram. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:1942,integrat,integration,1942,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,1,['integrat'],['integration']
Deployability,"de directory should point to the directory that contains Python.h and the library directory should point to the directory containing libpythonx.y.so, where ‘x’ and ‘y’ are the major and minor version number, respectively. If you do not specify include and library directories explicitly, the configuration process will try the PYTHONDIR environment variable or, alternatively, the standard locations.; A recent distribution of Python is required: version 2.4.3 is preferred, but the older 2.2.x and 2.3.x versions suffice and are supported as well. Versions older than 2.2 are not supported and will not work. Note that one problem with 2.2 is that the shared library of the Python interpreter core is not build by default and the ‘–enable-shared’ flag should thus be used when building Python from source. If the Python interpreter that is installed on your system is too old, please obtain a new version from http://www.python.org.; Once configured, you continue the build process the normal way:; $ make; $ make install; After some time, a library called libPyROOT.so (or libPyROOT.dll, on Windows) will be created in the $ROOTSYS/lib($ROOTSYS/bin on Windows) directory and a top Python module, ROOT.py, will be copied into the same place. The final step is to setup the shell environment, which is similar to what is described in the chapter ‘Environment Settings’. Note that the $ROOTSYS entries are probably already there if you followed the standard instructions, and that the PYTHONDIR entries should be replaced as appropriate by your choice at configuration time, or be left out if you had the configuration script pick up them up from a default location.; 19.1.5 Using PyROOT; Since it is an extension module, the usage of PyROOT probably comes naturally if you’re used to Python. In general, PyROOT attempts to allow working in both Python and ROOT style, and although it is succeeding, it isn’t perfect: there are edges. The following sections explain in some detail what you can expect, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1049242,install,install,1049242,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['install'],['install']
Deployability,"de like in TTree::Draw(); var1 = majorname; var2 = minorname; sel = \(2^{31} \times majorname + minorname\); for each entry in the tree the sel expression is evaluated and the results array is sorted into fIndexValues. Once the index is computed, using the TTree::GetEntryWithIndex(majornumber, minornumber) one entry can be retrieved. Example:; // to create an index using leaves Run and Event; tree.BuildIndex(""Run"",""Event"");; // to read entry corresponding to Run=1234 and Event=56789; tree.GetEntryWithIndex(1234,56789);; Note that majorname and minorname may be expressions using original tree variables e.g.: “run-90000”, “event +3*xx”. In case an expression is specified, the equivalent expression must be computed when calling GetEntryWithIndex(). To build an index with only majorname, specify minorname=""0"" (default).; Note that once the index is built, it can be saved with the TTree object with:; tree.Write(); //if the file has been open in ""update"" mode; The most convenient place to create the index is at the end of the filling process just before saving the tree header. If a previous index was computed, it is redefined by this new call.; Note that this function can also be applied to a TChain. The return value is the number of entries in the Index (< 0 indicates failure).; 12.8 Branches; The organization of branches allows the designer to optimize the data for the anticipated use. The class for a branch is called TBranch. If two variables are independent, and the designer knows the variables will not be used together, they should be placed on separate branches. If, however, the variables are related, such as the coordinates of a point, it is most efficient to create one branch with both coordinates on it. A variable on a TBranch is called a leaf (yes - TLeaf). Another point to keep in mind when designing trees is that branches of the same TTree can be written to separate files. To add a TBranch to a TTree we call the method TTree::Branch(). Note that we DO NOT use t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:536025,update,update,536025,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['update']
Deployability,"de'. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooDataHist * cloneAndOwnDataHist (const char *newname="""");  Replaces underlying RooDataHist with a clone, which is now owned, and returns the clone. ;  ; RooDataHist & dataHist ();  Return RooDataHist that is represented. ;  ; const RooDataHist & dataHist () const;  Return RooDataHist that is represented. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Determine integration scenario. ;  ; Int_t getBin () const;  Compute bin number corresponding to current coordinates. ;  ; std::vector< Int_t > getBins (RooFit::EvalContext &ctx) const;  Compute bin numbers corresponding to all coordinates in evalData. ;  ; bool getCdfBoundaries () const;  If true, special boundary conditions for c.d.f.s are used. ;  ; RooArgSet const & getHistObsList () const;  ; Int_t getInterpolationOrder () const;  Return histogram interpolation order. ;  ; Int_t getMaxVal (const RooArgSet &vars) const override;  Only handle case of maximum in all variables. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:2602,integrat,integration,2602,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['integrat'],['integration']
Deployability,"de). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsCachedReal(const char* name, const char* title, Int_t ipOrder = 0); Constructor. RooAbsCachedReal(const RooAbsCachedReal& other, const char* name = 0); Copy constructor. ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. RooAbsCachedReal(); {}. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. void disableCache(Bool_t flag); Switch to disable caching mechanism. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(const RooArgSet* nset) const. const char* inputBaseName() const. RooArgSet* actualObserva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedReal.html:39822,integrat,integration,39822,root/html602/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedReal.html,2,['integrat'],['integration']
Deployability,"de, calls virtual; WriteVizParams() and, at the end, writes out the code for; registration of the model into the VizDB. void WriteVizParams(ostream& out, const TString& var); Write-out visual parameters for this object.; This is a virtual function and all sub-classes are required to; first call the base-element version.; The name of the element pointer is 'x%03d', due to cint limitations.; Three spaces should be used for indentation, same as in; SavePrimitive() methods. void VizDB_Apply(const char* tag); Set visual parameters for this object for given tag. void VizDB_Reapply(); Reset visual parameters for this object from VizDB.; The model object must be already set. void VizDB_UpdateModel(Bool_t update = kTRUE); Copy visual parameters from this element to viz-db model.; If update is set, all clients of the model will be updated to; the new value.; A warning is printed if the model-element fVizModel is not set. void VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE); Create a replica of element and insert it into VizDB with given tag.; If replace is true an existing element with the same tag will be replaced.; If update is true, existing client of tag will be updated. TEveElement* GetMaster(); Returns the master element - that is:; - master of projectable, if this is a projected;; - master of compound, if fCompound is set;; - master of first compound parent, if kSCBTakeAnyParentAsMaster bit is set;; If non of the above is true, *this* is returned. void AddParent(TEveElement* re); Add re into the list parents.; Adding parent is subordinate to adding an element.; This is an internal function. void RemoveParent(TEveElement* re); Remove re from the list of parents.; Removing parent is subordinate to removing an element.; This is an internal function. void CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); Check external references to this and eventually auto-destruct; the render-element. void CollectSceneParents",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:16596,update,update,16596,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,6,['update'],['update']
Deployability,de; Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; Bool_tTGPictureButton::fOwnDisabledPickTRUE if disabled picture was autogenerated; const TGWindow*TGWindow::fParentParent window; const TGPicture*TGPictureButton::fPicpicture to be put in button; const TGPicture*TGPictureButton::fPicDpicture shown when button disabled; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; TList*fTrashcollect all objects that need to be cleaned up; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGImageMap.html:20465,release,released,20465,root/html528/TGImageMap.html,https://root.cern,https://root.cern/root/html528/TGImageMap.html,1,['release'],['released']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; Double_tfErrorTol; Bool_tfForceSum; Bool_tfHasIssuedConvWarning; Bool_tfHasIssuedSumWarning; Int_tfMaxIters; TStringTNamed::fNameobject identifier; TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNonCentralChiSquare.html:40449,configurat,configuration,40449,root/html528/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html528/RooNonCentralChiSquare.html,2,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalpha; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym; RooRealProxym0; RooRealProxyn; RooRealProx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCBShape.html:39295,configurat,configuration,39295,root/html530/RooCBShape.html,https://root.cern,https://root.cern/root/html530/RooCBShape.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalphaInterpolation parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdf1First input shape;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegralMorph.html:44917,configurat,configuration,44917,root/html530/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html530/RooIntegralMorph.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,double>funcFunction pointer reference; RooRealProxyx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction1PdfBinding_double_double_.html:39491,configurat,configuration,39491,root/html530/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction1PdfBinding_double_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,int>funcFunction pointer reference; RooRealProxyxArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction1PdfBinding_double_int_.html:39461,configurat,configuration,39461,root/html530/RooCFunction1PdfBinding_double_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction1PdfBinding_double_int_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,double>funcFunction pointer reference; RooRea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2PdfBinding_double_double_double_.html:39579,configurat,configuration,39579,root/html530/RooCFunction2PdfBinding_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2PdfBinding_double_double_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,double,int>funcFunction pointer reference; RooRealPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2PdfBinding_double_double_int_.html:39549,configurat,configuration,39549,root/html530/RooCFunction2PdfBinding_double_double_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2PdfBinding_double_double_int_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,double>funcFunction pointer reference; RooRealPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2PdfBinding_double_int_double_.html:39549,configurat,configuration,39549,root/html530/RooCFunction2PdfBinding_double_int_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2PdfBinding_double_int_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,int,int>funcFunction pointer reference; RooRealProxy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2PdfBinding_double_int_int_.html:39519,configurat,configuration,39519,root/html530/RooCFunction2PdfBinding_double_int_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2PdfBinding_double_int_int_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,unsigned int,double>funcFunction pointer reference; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2PdfBinding_double_unsigned_int_double_.html:39631,configurat,configuration,39631,root/html530/RooCFunction2PdfBinding_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2PdfBinding_double_unsigned_int_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,bool>funcFunction pointer reference; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html:39647,configurat,configuration,39647,root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_double_.html:39667,configurat,configuration,39667,root/html530/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_int_int_.html:39607,configurat,configuration,39607,root/html530/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_int_int_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:39719,configurat,configuration,39719,root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,unsigned int>funcFunction pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html:39771,configurat,configuration,39771,root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,unsigned int,double>funcFunction pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html:39771,configurat,configuration,39771,root/html530/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer refer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_bool_.html:39735,configurat,configuration,39735,root/html530/RooCFunction4PdfBinding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_bool_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html:39755,configurat,configuration,39755,root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer refere",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_int_.html:39725,configurat,configuration,39725,root/html530/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_int_.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyrho1; RooRealProxyrho2; RooRealProxysigp; RooRealProxyx; RooReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBukinPdf.html:39371,configurat,configuration,39371,root/html530/RooBukinPdf.html,https://root.cern,https://root.cern/root/html530/RooBukinPdf.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionMultiDim*funcFunctor; RooListProxyvarsArgumen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFunctorPdfBinding.html:39820,configurat,configuration,39820,root/html530/RooFunctorPdfBinding.html,https://root.cern,https://root.cern/root/html530/RooFunctorPdfBinding.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionOneDim*funcFunctor; RooRealProxyvarArgument r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFunctor1DPdfBinding.html:39828,configurat,configuration,39828,root/html530/RooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/root/html530/RooFunctor1DPdfBinding.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPEffDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBCPEffDecay.html:41613,configurat,configuration,41613,root/html530/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html530/RooBCPEffDecay.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tag; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBCPGenDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBCPGenDecay.html:41472,configurat,configuration,41472,root/html530/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html530/RooBCPGenDecay.html,1,['configurat'],['configuration']
Deployability,"de; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooCategoryProxy_tagFlav; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooBMixDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBMixDecay.html:41580,configurat,configuration,41580,root/html530/RooBMixDecay.html,https://root.cern,https://root.cern/root/html530/RooBMixDecay.html,1,['configurat'],['configuration']
Deployability,"de;  ; void GetViewAngles (Double_t &longitude, Double_t &latitude, Double_t &psi) override;  Get the current view angles. ;  ; Double_t * GetViewBox () override;  ; Int_t GetVisLevel () const override;  ; Int_t GetVisOption () const override;  ; const char * GetVolumeInfo (const TGeoVolume *volume, Int_t px, Int_t py) const override;  Get some info about the current selected volume. ;  ; void GrabFocus (Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0) override;  Move focus to current volume. ;  ; Bool_t IsExplodedView () const override;  ; Bool_t IsPaintingShape () const override;  ; Bool_t IsRaytracing () const override;  ; TH2F * LegoPlot (Int_t ntheta=60, Double_t themin=0., Double_t themax=180., Int_t nphi=90, Double_t phimin=0., Double_t phimax=360., Double_t rmin=0., Double_t rmax=9999999, Option_t *option="""") override;  Generate a lego plot fot the top volume, according to option. ;  ; void Lock (Bool_t flag=kTRUE);  ; void ModifiedPad (Bool_t update=kFALSE) const override;  Check if a pad and view are present and send signal ""Modified"" to pad. ;  ; void OpProgress (const char *opname, Long64_t current, Long64_t size, TStopwatch *watch=nullptr, Bool_t last=kFALSE, Bool_t refresh=kFALSE, const char *msg="""") override;  Text progress bar. ;  ; void Paint (Option_t *option="""") override;  Paint current geometry according to option. ;  ; void PaintNode (TGeoNode *node, Option_t *option="""", TGeoMatrix *global=nullptr) override;  Paint recursively a node and its content according to visualization options. ;  ; void PaintOverlap (void *ovlp, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintPhysicalNode (TGeoPhysicalNode *node, Option_t *option="""");  Paints a physical node associated with a path. ;  ; Bool_t PaintShape (const TGeoShape &shape, Option_t *option) const;  Paint the supplied shape into the current 3D viewer. ;  ; void PaintShape (TGeoShape *shape, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintVolume (TGeoV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:5992,update,update,5992,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['update'],['update']
Deployability,"de;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6762,integrat,integrator,6762,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integrator']
Deployability,"deIdentifier code for selected basis function; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:43640,integrat,integration,43640,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,2,['integrat'],['integration']
Deployability,"deRepo() [1/2]. RooWorkspace::CodeRepo::CodeRepo ; (; RooWorkspace * ; wspace = nullptr). inline . Definition at line 170 of file RooWorkspace.h. ◆ CodeRepo() [2/2]. RooWorkspace::CodeRepo::CodeRepo ; (; const CodeRepo & ; other, . RooWorkspace * ; wspace = nullptr . ). inline . Definition at line 172 of file RooWorkspace.h. Member Function Documentation. ◆ autoImportClass(). bool RooWorkspace::CodeRepo::autoImportClass ; (; TClass * ; tc, . bool ; doReplace = false . ). Import code of class 'tc' into the repository. ; If code is already in repository it is only imported again if doReplace is false. The names and location of the source files is determined from the information in TClass. If no location is found in the TClass information, the files are searched in the workspace search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation files respectively. If files cannot be found, abort with error status, otherwise update the internal class-to-file map and import the contents of the files, if they are not imported yet. ; Definition at line 1497 of file RooWorkspace.cxx. ◆ Class(). static TClass * RooWorkspace::CodeRepo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooWorkspace::CodeRepo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooWorkspace::CodeRepo::Class_Version ; (; ). inlinestaticconstexpr . Flag indicating that classes compiled OK. ; ReturnsVersion of this class ; Definition at line 217 of file RooWorkspace.h. ◆ compileClasses(). bool RooWorkspace::CodeRepo::compileClasses ; (; ). For all classes in the workspace for which no class definition is found in the ROOT class table extract source code stored in code repository into temporary directory set by setClassFileExportDir(), compile classes and link them with current ROOT session. ; If a compilation error occurs print instructions for user how to fix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html:11965,update,update,11965,doc/master/classRooWorkspace_1_1CodeRepo.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html,1,['update'],['update']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,bool>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html:39744,integrat,integrator,39744,root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument referen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_double_.html:39764,integrat,integrator,39764,root/html530/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_double_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:39816,integrat,integrator,39816,root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,unsigned int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html:39868,integrat,integrator,39868,root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_double_unsigned_int_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html:39868,integrat,integrator,39868,root/html530/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_unsigned_int_unsigned_int_double_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_bool_.html:39832,integrat,integrator,39832,root/html530/RooCFunction4PdfBinding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_bool_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,double>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html:39852,integrat,integrator,39852,root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_double_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_int_.html:39822,integrat,integrator,39822,root/html530/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction4PdfBinding_double_double_double_double_int_.html,1,['integrat'],['integrator']
Deployability,"deRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/PiecewiseInterpolation.html:33747,integrat,integrator,33747,root/html532/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html532/PiecewiseInterpolation.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"declaration ; Definition at line 49 of file RooBifurGauss.h. ◆ doEval(). void RooBifurGauss::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of BifurGauss distribution. ; Reimplemented from RooAbsReal.; Definition at line 72 of file RooBifurGauss.cxx. ◆ evaluate(). double RooBifurGauss::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 58 of file RooBifurGauss.cxx. ◆ getAnalyticalIntegral(). Int_t RooBifurGauss::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 80 of file RooBifurGauss.cxx. ◆ IsA(). TClass * RooBifurGauss::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 49 of file RooBifurGauss.h. ◆ Streamer(). void RooBifurGauss::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBifurGauss::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooBifurGauss.h. ◆ translate(). void RooBifurGauss::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:76959,integrat,integrate,76959,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,3,"['configurat', 'integrat']","['configuration', 'integrate', 'integration']"
Deployability,"declares the required basis functions using the declareBasis() method. The declareBasis() function assigns a unique identifier code to each declare basis; An implementation of coefficient(Int_t code) returning the coefficient value for each declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The interface for this is quite similar to that for integrals of regular PDFs. Two functions, Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; double coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const; RooAbsAnaConvPdf::coefAnalyticalIntegralvirtual double coefAnalyticalIntegral(Int_t coef, Int_t code, const char *rangeName=nullptr) constDefault implementation of function implementing advertised integrals.Definition RooAbsAnaConvPdf.cxx:546; RooAbsAnaConvPdf::getCoefAnalyticalIntegralvirtual Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constDefault implementation of function advertising integration capabilities.Definition RooAbsAnaConvPdf.cxx:535; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; advertise the coefficient integration capabilities and implement them respectively. Please see RooAbsPdf for additional details. Advertised analytical integrals must be valid for all coefficients. ; Definition at line 32 of file RooAbsAnaConvPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooAbsAnaConvPdf ();  Default constructor, required for persistence. ;  ;  RooAbsAnaConvPdf (const char *name, const char *title, const RooResolutionModel &model, RooRealVar &convVar);  Constructor. ;  ;  RooAbsAnaConvPdf (const RooAbsAnaConvPdf &other, const char *name=nullptr);  ;  ~RooAbsAnaConvPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *range",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:2469,integrat,integration,2469,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['integrat'],['integration']
Deployability,"ded likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; void generateEvent (Int_t code) override;  Forwards to the PDF's implementation. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Forwards to the PDF's implementation. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forwards to the PDF's implementation. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Forwards to the PDF's implementation. ;  ; Int_t getMaxVal (const RooArgSet &vars) const override;  Advertise capability to determine maximum value of function for given set of observables. ;  ; void initGenerator (Int_t code) override;  Forwards to the PDF's implementation. ;  ; std::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator () const;  Direct access to the unique_ptr holding the integrator that's used to sample the bins. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &) const override;  Returns true, since this PDF is meant to be binned. ;  ; bool isDirectGenSafe (const RooAbsArg &arg) const override;  Forwards to the PDF's implementation. ;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; Int_t minTrialSamples (const RooArgSet &arGenObs) const override;  ; const RooAbsReal & observable () const;  ; const RooAbsPdf & pdf () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return a list of all bin edges, so the PDF is plotted as a step function. ;  ; bool selfNormalized () const override;  Forwards to the PDF's implementation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:7129,integrat,integrator,7129,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,2,['integrat'],['integrator']
Deployability,"default configuration for all RooAbsReals is returned; 3308 ; 3309const RooNumIntConfig* RooAbsReal::getIntegratorConfig() const; 3310{; 3311 const RooNumIntConfig* config = specialIntegratorConfig() ;; 3312 if (config) return config ;; 3313 return defaultIntegratorConfig() ;; 3314}; 3315 ; 3316 ; 3317////////////////////////////////////////////////////////////////////////////////; 3318/// Return the numeric integration configuration used for this object. If; 3319/// a specialized configuration was associated with this object, that configuration; 3320/// is returned, otherwise the default configuration for all RooAbsReals is returned; 3321 ; 3322RooNumIntConfig* RooAbsReal::getIntegratorConfig(); 3323{; 3324 RooNumIntConfig* config = specialIntegratorConfig() ;; 3325 if (config) return config ;; 3326 return defaultIntegratorConfig() ;; 3327}; 3328 ; 3329 ; 3330 ; 3331////////////////////////////////////////////////////////////////////////////////; 3332/// Set the given integrator configuration as default numeric integration; 3333/// configuration for this object; 3334 ; 3335void RooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); 3336{; 3337 _specIntegratorConfig = std::make_unique<RooNumIntConfig>(config);; 3338}; 3339 ; 3340 ; 3341 ; 3342////////////////////////////////////////////////////////////////////////////////; 3343/// Remove the specialized numeric integration configuration associated; 3344/// with this object; 3345 ; 3346void RooAbsReal::setIntegratorConfig(); 3347{; 3348 _specIntegratorConfig.reset();; 3349}; 3350 ; 3351 ; 3352 ; 3353 ; 3354////////////////////////////////////////////////////////////////////////////////; 3355/// Interface function to force use of a given set of observables; 3356/// to interpret function value. Needed for functions or p.d.f.s; 3357/// whose shape depends on the choice of normalization such as; 3358/// RooAddPdf; 3359 ; 3360void RooAbsReal::selectNormalization(const RooArgSet*, bool); 3361{; 3362}; 3363 ; 3364 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:143301,configurat,configuration,143301,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,9,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. RooAbsCachedReal(); {}. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. void disableCache(Bool_t flag); Switch to disable caching mechanism. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(const RooArgSet* nset) const. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const. » Last changed: Tue Jun 30 14:29:58 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedReal.html:40389,integrat,integration,40389,root/html602/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedReal.html,1,['integrat'],['integration']
Deployability,"default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMCIntegrator::DoInitialize ; (; ). protected . Definition at line 401 of file GSLMCIntegrator.cxx. ◆ Error(). double R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6240,integrat,integration,6240,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"default wavelength . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); create a new TCurlyarc with center (x1, y1) and radius rad.; The wavelength and amplitude are given in percent of the line length; phimin and phimax are given in degrees. void Build(); Create a curly (Gluon) or wavy (Gamma) arc. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an arc. Compute the closest distance of approach from point px,py to this arc.; The distance is computed in pixels units. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyArc is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCenter(Double_t x1, Double_t y1); Set Curly Arc center. void SetRadius(Double_t radius); Set Curly Arc radius. void SetPhimin(Double_t phimin); Set Curly Arc minimum Phi. void SetPhimax(Double_t phimax); Set Curly Arc maximum Phi. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default wave amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set default ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default wave amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". TCurlyArc(); {;}. TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); {;}. Double_t GetRadius() const; {return fR1;}. Double_t GetPhimin() const; {return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyArc.html:11253,release,released,11253,root/html526/TCurlyArc.html,https://root.cern,https://root.cern/root/html526/TCurlyArc.html,4,['release'],['released']
Deployability,"delete() after calling new()). TGeoExtension * GrabFWExtension() const; Get a copy of the framework extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). Bool_t MayOverlap(Int_t iother) const; Check the overlab between the bounding box of the node overlaps with the one; the brother with index IOTHER. void MasterToLocal(const Double_t* master, Double_t* local) const; Convert the point coordinates from mother reference to local reference system. void MasterToLocalVect(const Double_t* master, Double_t* local) const; Convert a vector from mother reference to local reference system. void LocalToMaster(const Double_t* local, Double_t* master) const; Convert the point coordinates from local reference system to mother reference. void LocalToMasterVect(const Double_t* local, Double_t* master) const; Convert a vector from local reference system to mother reference. void ls(Option_t* option = """") const; Print the path (A/B/C/...) to this node on stdout. void Paint(Option_t* option = """"); Paint this node and its content according to visualization settings. void PrintCandidates() const; print daughters candidates for containing current point; cd();. void PrintOverlaps() const; print possible overlapping nodes; if (!IsOverlapping()) {printf(""node %s is ONLY\n"", GetName()); return;}. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape. void SetOverlaps(Int_t* ovlp, Int_t novlp); set the list of overlaps for this node (ovlp must be created with operator new). void SetVisibility(Bool_t vis = kTRUE); Set visibility of the node (obsolete). void VisibleDaughters(Bool_t vis = kTRUE); Set visibility of the daughters (obsolete). void cd() const; {;}. Int_t GetByteCount() const; {return 44;}. TGeoNode * GetDaughter(Int_t ind) const; {return fVolume->GetNode(ind);}. TGeoMatrix * GetMatrix() const. Int_t GetColour() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNode.html:16039,A/B,A/B,16039,root/html534/TGeoNode.html,https://root.cern,https://root.cern/root/html534/TGeoNode.html,3,['A/B'],['A/B']
Deployability,"depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 1006 ; 1007### Memory usage; 1008 ; 1009There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 1010 ; 1011Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 1012 ; 1013~~~{.cpp}; 1014// assuming df1 and df2 are separate computation graphs, do:; 1015auto h1 = df1.Histo1D(""x"");; 1016auto h2 = df2.Histo1D(""y"");; 1017h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; 1018h2->Draw(""SAME"");; 1019 ; 1020// do not:; 1021auto h1 = df1.Histo1D(""x"");; 1022h1->Draw(); // we just-in-time compile here; 1023auto h2 = df2.Histo1D(""y"");; 1024h2->Draw(""SAME""); // we just-in-time compile again here, as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:58641,release,released,58641,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['release'],['released']
Deployability,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:9580,configurat,configuration,9580,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['configurat'],['configuration']
Deployability,"der) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, const RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is returned. void setGeneratorConfig(const RooNumGenConfig& config); Set the given configuration as default numeric MC generator; configuration for this object. void setGeneratorConfig(); Remove the specialized numeric MC generator configuration associated; with this object. GenSpec* prepareMultiGen(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:76704,integrat,integrator,76704,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TFunctionTemplate.h>. Inheritance diagram for TFunctionTemplate:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFunctionTemplate() [1/2]. TFunctionTemplate::TFunctionTemplate ; (; FuncTempInfo_t * ; info, . TClass * ; cl . ). Default TFunctionTemplate ctor. ; Definition at line 26 of file TFunctionTemplate.cxx. ◆ TFunctionTemplate() [2/2]. TFunctionTemplate::TFunctionTemplate ; (; const TFunctionTemplate & ; orig). Copy operator. ; Definition at line 38 of file TFunctionTemplate.cxx. ◆ ~TFunctionTemplate(). TFunctionTemplate::~TFunctionTemplate ; (; ). virtual . TFunctionTemplate dtor deletes adopted CINT FuncTempInfo. ; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunctionTemplate.html:13827,update,updated,13827,doc/master/classTFunctionTemplate.html,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html,1,['update'],['updated']
Deployability,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethod.html:16426,update,updated,16426,doc/master/classTMethod.html,https://root.cern,https://root.cern/doc/master/classTMethod.html,1,['update'],['updated']
Deployability,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBaseClass.h>. Inheritance diagram for TBaseClass:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ AtomicInt_t. using TBaseClass::AtomicInt_t = std::atomic<Int_t>. private . Definition at line 35 of file TBaseClass.h. Constructor & Destructor Documentation. ◆ TBaseClass() [1/2]. TBaseClass::TBaseClass ; (; const TBaseClass & ; ). privatedelete . ◆ TBaseClass() [2/2]. TBaseClass::TBaseClass ; (; BaseClassInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TBaseClass ctor. ; TBaseClasses are constructed in TClass via a call to TCling::CreateListOfBaseClasses()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBaseClass.html:13963,update,updated,13963,doc/master/classTBaseClass.html,https://root.cern,https://root.cern/doc/master/classTBaseClass.html,1,['update'],['updated']
Deployability,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnumConstant.h>. Inheritance diagram for TEnumConstant:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEnumConstant() [1/2]. TEnumConstant::TEnumConstant ; (; ). inline . Definition at line 35 of file TEnumConstant.h. ◆ TEnumConstant() [2/2]. TEnumConstant::TEnumConstant ; (; DataMemberInfo_t * ; info, . const char * ; name, . Long64_t ; value, . TEnum * ; type . ). Constructor of the TEnumConstant. ; Takes as parameters DataMemberInfo, value, and enum type. ; Definition at line 26 of file TEnumConstant.cxx. ◆ ~TEnumConstant(). TEnumConstant::~TEnumConstant ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnumConstant.html:14458,update,updated,14458,doc/master/classTEnumConstant.html,https://root.cern,https://root.cern/doc/master/classTEnumConstant.html,1,['update'],['updated']
Deployability,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGlobal.h>. Inheritance diagram for TGlobal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGlobal() [1/2]. TGlobal::TGlobal ; (; DataMemberInfo_t * ; info = nullptr). pointer to CINT data member info ; Default TGlobal ctor. ; Definition at line 30 of file TGlobal.cxx. ◆ TGlobal() [2/2]. TGlobal::TGlobal ; (; const TGlobal & ; rhs). Copy constructor. ; Definition at line 41 of file TGlobal.cxx. ◆ ~TGlobal(). TGlobal::~TGlobal ; (; ). virtual . TGlobal dtor deletes adopted CINT DataMemberInfo object. ; Definition at line 73 of file TGlobal.cxx. Member Function ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGlobal.html:13901,update,updated,13901,doc/master/classTGlobal.html,https://root.cern,https://root.cern/doc/master/classTGlobal.html,1,['update'],['updated']
Deployability,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodArg.html:14221,update,updated,14221,doc/master/classTMethodArg.html,https://root.cern,https://root.cern/doc/master/classTMethodArg.html,1,['update'],['updated']
Deployability,"description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:45777,integrat,integration,45777,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,6,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransie,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:48320,integrat,integration,48320,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['integrat'],['integration']
Deployability,destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttrib,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:49427,integrat,integration,49427,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['integrat'],['integration']
Deployability,"devirtual . Set transparency, propagate to volume's transparency. ; Reimplemented from TEveElement.; Definition at line 210 of file TEveGeoNode.cxx. ◆ Streamer(). void TEveGeoNode::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEveGeoTopNode. ◆ StreamerNVirtual(). void TEveGeoNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TEveGeoNode.h. ◆ UpdateNode(). void TEveGeoNode::UpdateNode ; (; TGeoNode * ; node). Updates all reve-browsers having the node in their contents. ; All 3D-pads updated if any change found.; Should (could?) be optimized with some assumptions about volume/node structure (search for parent, know the same node can not reoccur on lower level once found). ; Definition at line 224 of file TEveGeoNode.cxx. ◆ UpdateVolume(). void TEveGeoNode::UpdateVolume ; (; TGeoVolume * ; volume). Updates all reve-browsers having the volume in their contents. ; All 3D-pads updated if any change found.; Should (could?) be optimized with some assumptions about volume/node structure (search for parent, know the same node can not reoccur on lower level once found). ; Definition at line 246 of file TEveGeoNode.cxx. ◆ WriteExtract(). void TEveGeoNode::WriteExtract ; (; const char * ; name, . Bool_t ; leafs_only . ). Write the shape tree as TEveGeoShapeExtract to current directory. ; Definition at line 302 of file TEveGeoNode.cxx. Friends And Related Symbol Documentation. ◆ TEveGeoNodeEditor. friend class TEveGeoNodeEditor. friend . Definition at line 31 of file TEveGeoNode.h. Member Data Documentation. ◆ fgCSGExportNSeg. Int_t TEveGeoNode::fgCSGExportNSeg = 64. staticprotected . Definition at line 40 of file TEveGeoNode.h. ◆ fgTemporaryStore. std::list< TGeoShape * > TEveGeoNode::fgTemporaryStore. staticprotected . Definition at line 41 of file TEveGeoNode.h. ◆ fNode. TGeoNode* TEveGeoNode::fNode. protected . Definition at line 37 of file TEveGeoNode.h. Libraries for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:38205,update,updated,38205,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,1,['update'],['updated']
Deployability,"df.h:329; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::createScanCdfRooFit::OwningPtr< RooAbsReal > createScanCdf(const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder)Definition RooAbsPdf.cxx:2545; RooAbsPdf::setGeneratorConfigvoid setGeneratorConfig()Remove the specialized numeric MC generator configuration associated with this object.Definition RooAbsPdf.cxx:2675; RooAbsPdf::resetErrorCountersvirtual void resetErrorCounters(Int_t resetValue=10)Reset error counter to given value, limiting the number of future error messages for this pdf to 'res...Definition RooAbsPdf.cxx:586; RooAbsPdf::verboseEvalstatic int verboseEval()Return global level of verbosity for p.d.f. evaluations.Definition RooAbsPdf.cxx:2418; RooAbsPdf::createCdfRooFit::OwningPtr< RooAbsReal > createCdf(const RooArgSet &iset, const RooArgSet &nset=RooArgSet())Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset.Definition RooAbsPdf.cxx:2468; RooAbsPdf::isActiveNormSetbool isActiveNormSet(RooArgSet const *normSet) constChecks if normSet is the currently active normalization set of this PDF, meaning is exactly the same ...Definition RooAbsPdf.h:299; RooAbsPdf::expectedEventsvirtual double expectedEvents(const RooArgSet *nset) constRetu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:144698,configurat,configuration,144698,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['configurat'],['configuration']
Deployability,"df.h:85; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::syncNormalizationvirtual bool syncNormalization(const RooArgSet *dset, bool adjustProxies=true) constVerify that the normalization integral cached with this PDF is valid for given set of normalization o...Definition RooAbsPdf.cxx:481; RooAbsPdf::getNormdouble getNorm(const RooArgSet &nset) constGet normalisation term needed to normalise the raw values returned by getVal().Definition RooAbsPdf.h:195; RooAbsPdf::compileForNormSetstd::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideDefinition RooAbsPdf.cxx:2788; RooAbsPdf::_normMgrRooObjCacheManager _normMgrDefinition RooAbsPdf.h:329; RooAbsPdf::_normSetIdRooFit::UniqueId< RooArgSet >::Value_t _normSetId! Unique ID of the currently-active normalization setDefinition RooAbsPdf.h:346; RooAbsPdf::_specGeneratorConfigstd::unique_ptr< RooNumGenConfig > _specGeneratorConfig! MC generator configuration specific for this objectDefinition RooAbsPdf.h:340; RooAbsPdf::createNLLRooFit::OwningPtr< RooAbsReal > createNLL(RooAbsData &data, CmdArgs_t const &... cmdArgs)Construct representation of -log(L) of PDF with given dataset.Definition RooAbsPdf.h:163; RooAbsPdf::getValVdouble getValV(const RooArgSet *set=nullptr) const overrideReturn current value, normalized by integrating over the observables in nset.Definition RooAbsPdf.cxx:319; RooAbsPdf::fitToImplvirtual std::unique_ptr< RooFitResult > fitToImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the likelihood fitting routine.Definition RooAbsPdf.cxx:1072; RooAbsPdf::_selectCompbool _selectCompComponent selection flag for RooAbsPdf::plotCompOn.Definition RooAbsPdf.h:338; RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; RooAbsPdf::create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8h_source.html:21036,configurat,configuration,21036,doc/master/RooAbsPdf_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html,1,['configurat'],['configuration']
Deployability,"df::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction2Ref<double,unsigned int,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2PdfBinding_double_unsigned_int_double_.html:38690,integrat,integrator,38690,root/html526/RooCFunction2PdfBinding_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2PdfBinding_double_unsigned_int_double_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"df::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGaussian.html:43706,configurat,configuration,43706,root/html602/RooGaussian.html,https://root.cern,https://root.cern/root/html602/RooGaussian.html,12,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"df::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBreitWigner.html:43855,configurat,configuration,43855,root/html602/RooBreitWigner.html,https://root.cern,https://root.cern/root/html602/RooBreitWigner.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"df::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownBasisFlag indicating ownership of _basis; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyxDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:46446,configurat,configuration,46446,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"df::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyrho1; RooRealProxyrho2; RooRealProxysigp; RooRealProxyx; RooRealProxyxi.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBukinPdf.html:42209,configurat,configuration,42209,root/html534/RooBukinPdf.html,https://root.cern,https://root.cern/root/html534/RooBukinPdf.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"df::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction1Ref<double,int>funcFunction pointer reference; RooRealProxyxArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction1PdfBinding_double_int_.html:38996,integrat,integrator,38996,root/html528/RooCFunction1PdfBinding_double_int_.html,https://root.cern,https://root.cern/root/html528/RooCFunction1PdfBinding_double_int_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"df::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,unsigned int,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:42663,integrat,integrator,42663,root/html534/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,dfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf316_llratioplot.py;   Multidimensional models: using the likelihood ratio technique to construct a signal enhanced one-dimensional projection of a multi-dimensional pdf ;  ; file  rf401_importttreethx.C;   Data and categories: advanced options for importing data from ROOT TTree and THx histograms ;  ; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:9386,integrat,integration,9386,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['integrat'],['integration']
Deployability,"dicating if all PDF components are extendable; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:43007,integrat,integration,43007,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,2,['integrat'],['integration']
Deployability,"dified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooSetProxy_varSetNot used anymore?; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConvCoefVar(const char* name, const char* title, const RooAbsAnaConvPdf& input, Int_t coefIdx, const RooArgSet* varList = 0); Constuctor given a RooAbsAnaConvPdf a coefficient index and a set with the; convoluted observable(s). RooConvCoefVar(const RooConvCoefVar& other, const char* name = 0); Copy constructor. Double_t getValV(const RooArgSet* nset = 0) const; Return value of chosen coefficient. Double_t evaluate() const; Return value of chosen coefficient. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Return analytical integration capabilities of chosen coefficient. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return analytical integral of chosen coefficient. inline RooConvCoefVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooConvCoefVar(*this,newname); }. virtual ~RooConvCoefVar(); Destructor. » Last changed: Tue Jun 2 15:30:08 2015 » Last generated: 2015-06-02 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooConvCoefVar.html:37985,integrat,integration,37985,root/html604/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html604/RooConvCoefVar.html,1,['integrat'],['integration']
Deployability,"dimensional case. The width of filter can be chosen independently for each dimension. The form of the 2-D smoothing function is as follows; char *Smooth2(float **spectrum,; int sizex,; int sizey,; int pointsx,; int pointsy);; This function calculates smoothed spectrum from source spectrum. The result is placed in the array pointed by spectrum pointer.; Function parameters:. spectrum pointer to the array of source spectrum; sizex x length of spectrum; sizey y length of spectrum; pointsx,pointsy width of smoothing window. Allowed values:. SMOOTH2_3POINTS; SMOOTH2_5POINTS; SMOOTH2_7POINTS; SMOOTH2_9POINTS; SMOOTH2_11POINTS; SMOOTH2_13POINTS; SMOOTH2_15POINTS. An example of 2-D original data and data after smoothing is given in Figures 2.2, 2.3. 2-D original data. Data after smoothing. 3 PEAK SEARCHING; 3.1 1-DIMENSIONAL SPECTRA; The basic function of the 1-dimensional peak searching is in detail described in [4], [5]. It allows to identify automatically the peaks in a spectrum with the presence of the continuous background and statistical fluctuations - noise. The algorithm is based on smoothed second differences that are compared to its standard deviations. Therefore it is necessary to pass a parameter of sigma to the peak searching function. The algorithm is selective to the peaks with the given sigma. The form of the basic peak searching function is; Int-t Search1(const float *spectrum,; int size,; double sigma);; This function searches for peaks in source spectrum. The number of found peaks and their positions are written into structure pointed by one_dim_peak structure pointer.; Function parameters:. source pointer to the vector of source spectrum; p pointer to the one_dim_peak structure pointer; size length of source spectrum; sigma sigma of searched peaks. The structure one_dim_peak has the form:; struct one_dim_peak{; int number_of_peaks;; double position[MAX_NUMBER_OF_PEAKS1];; };; An example of simple one-dimensional spectrum with identified peaks is given in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:15550,continuous,continuous,15550,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['continuous'],['continuous']
Deployability,"ding on cache operation; mode of server objects. Bool_t servesExclusively(const RooAbsArg* server, const RooArgSet& exclLVBranches, const RooArgSet& allBranches) const; Utility function that returns true if 'object server' is a server; to exactly one of the RooAbsArgs in 'exclLVBranches'. Bool_t initNumIntegrator() const; (Re)Initialize numerical integration engine if necessary. Return kTRUE if; successful, or otherwise kFALSE. RooRealIntegral(const RooRealIntegral& other, const char* name = 0); Copy constructor. ~RooRealIntegral(); Destructor. RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const. Double_t getValV(const RooArgSet* set = 0) const; Return value of object. If the cache is clean, return the; cached value, otherwise recalculate on the fly and refill; the cache. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global swit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:39056,integrat,integration,39056,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,3,['integrat'],['integration']
Deployability,dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsAnaConvPdf::_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDecay.html:43687,integrat,integration,43687,root/html602/RooDecay.html,https://root.cern,https://root.cern/root/html602/RooDecay.html,2,['integrat'],['integration']
Deployability,"disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:30563,release,release,30563,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['release'],['release']
Deployability,"ditor usage is the following :; - you can write C expressions made of leaf names by hand or you can insert; any item from the right panel by clicking on it (recommandable);; - you can click on other expressions/leaves to paste them in the editor;; - you should write the item alias by hand since it not only make the expression; meaningfull, but it also highly improve the layout for big expressions; - you may redefine an old alias - the other expressions depending on it will; be modified accordingly. An alias must not be the leading string of other aliases.; When Draw commands are issued, the name of the corresponding histogram axes; will become the aliases of the expressions. User commands can be issued directly from the textbox labeled ""Command""; from the upper-left toolbar by typing and pressing Enter at the end.; An other way is from the right panel context menu : ExecuteCommand.; All commands can be interrupted at any time by pressing the STOP button; from the bottom-left; You can toggle recording of the current command in the history file by; checking the Rec button from the top-right. Context menus. You can activate context menus by right-clicking on items or inside the; right panel.; Context menus for mapped items from the left tree-type list :; The items from the left that are provided with context menus are tree and; branch items. You can directly activate the *MENU* marked methods of TTree; from this menu.; Context menu for the right panel :; A general context menu is acivated if the user right-clicks the right panel.; Commands are :; - EmptyAll : clears the content of all expressions;; - ExecuteCommand : execute a ROOT command;; - MakeSelector : equivalent of TTree::MakeSelector();; - NewExpression : add an expression item in the right panel;; - Process : equivalent of TTree::Process();; - SaveSource : save the current session as a C++ macro;; - SetScanFileName : define a name for the file where TTree::Scan command; is redirected when the <Scan> button is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeViewer.html:5504,toggle,toggle,5504,root/html530/TTreeViewer.html,https://root.cern,https://root.cern/root/html530/TTreeViewer.html,2,['toggle'],['toggle']
Deployability,dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; RooRealProxy_mu; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsRe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPGenDecay.html:39141,integrat,integrated,39141,root/html526/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPGenDecay.html,1,['integrat'],['integrated']
Deployability,dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; RooRealProxy_mu; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPGenDecay.html:39715,integrat,integrated,39715,root/html528/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPGenDecay.html,2,['integrat'],['integrated']
Deployability,dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; RooRealProxy_mu; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawVal,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPGenDecay.html:40395,integrat,integrated,40395,root/html532/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPGenDecay.html,1,['integrat'],['integrated']
Deployability,"do that. ; Implements RooAbsReal.; Definition at line 204 of file RooHistPdf.cxx. ◆ forceAnalyticalInt() [1/2]. bool RooHistPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . Reimplemented from RooAbsReal.; Definition at line 458 of file RooHistPdf.cxx. ◆ forceAnalyticalInt() [2/2]. bool RooHistPdf::forceAnalyticalInt ; (; RooArgSet const & ; pdfObsList, . RooAbsArg const & ; dep . ). staticprivate . Definition at line 440 of file RooHistPdf.cxx. ◆ getAnalyticalIntegral() [1/2]. Int_t RooHistPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName, . RooArgSet const & ; histObsList, . RooArgSet const & ; pdfObsList, . Int_t ; intOrder . ). staticprivate . Definition at line 317 of file RooHistPdf.cxx. ◆ getAnalyticalIntegral() [2/2]. Int_t RooHistPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine integration scenario. ; If no interpolation is used, RooHistPdf can perform all integrals over its dependents analytically via partial or complete summation of the input histogram. If interpolation is used on the integral over all histogram observables is supported ; Reimplemented from RooAbsReal.; Definition at line 423 of file RooHistPdf.cxx. ◆ getCdfBoundaries(). bool RooHistPdf::getCdfBoundaries ; (; ); const. inline . Definition at line 73 of file RooHistPdf.h. ◆ getInterpolationOrder(). Int_t RooHistPdf::getInterpolationOrder ; (; ); const. inline . Definition at line 59 of file RooHistPdf.h. ◆ getMaxVal(). Int_t RooHistPdf::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Only handle case of maximum in all variables. ; Reimplemented from RooAbsReal.; Definition at line 559 of file RooHistPdf.cxx. ◆ haveUnitNorm(). bool RooHistPdf::haveUnitNorm ; (; ); const. inline . Definition at line 82 of file RooHistPdf.h. ◆ importWorkspaceHook(). bool RooHistPdf::importWorkspac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:83655,integrat,integration,83655,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['integrat'],['integration']
Deployability,"does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]widwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 583 of file TVirtualX.cxx. ◆ MoveWindow() [2/2]. void TVirtualX::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). virtual . Moves the specified window to the specified x and y coordinates. ; It does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]idwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1073 of file TVirtualX.cxx. ◆ NeedRedraw(). Bool_t TVirtualX::NeedRedraw ; (; ULongptr_t ; tgwindow, . Bool_t ; force . ). virtual . Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ; Returns kTRUE if the notification was desirable and it was sent; At the moment only Qt4 layer needs that; One needs explicitly cast the first parameter to TGWindow to make it working in the implementation.; One needs to process the notification to confine all paint operations within ""expose"" / ""paint"" like low level event or equivalent ; Reimplemented in TGCocoa.; Definition at line 1126 of file TVirtualX.cxx. ◆ NextEvent(). void TVirtualX::NextEvent ; (; Event_t & ; event). virtual . The ""event"" is set to default event. ; This method however, should never be called. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 137 of file TVirtualX.cxx. ◆ OpenDisplay(). Int_t TVirtualX::OpenDisplay ; (; const char * ; dpyName). virtual . Opens connection to display server (if such a thing exist on the current platform). ; The encoding and interpretation of the display name.; On X11 this method returns on success the X d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:104764,update,updated,104764,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['update'],['updated']
Deployability,"double * ; xmin, . const double * ; xmax . ). inlineoverridevirtual . evaluate the integral with the previously given function between xmin[] and xmax[] ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 119 of file AdaptiveIntegratorMultiDim.h. ◆ Integral() [2/2]. double ROOT::Math::AdaptiveIntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). evaluate the integral passing a new function ; Definition at line 382 of file AdaptiveIntegratorMultiDim.cxx. ◆ NEval(). int ROOT::Math::AdaptiveIntegratorMultiDim::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 152 of file AdaptiveIntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::AdaptiveIntegratorMultiDim::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 390 of file AdaptiveIntegratorMultiDim.cxx. ◆ RelError(). double ROOT::Math::AdaptiveIntegratorMultiDim::RelError ; (; ); const. inline . return relative error ; Definition at line 137 of file AdaptiveIntegratorMultiDim.h. ◆ Result(). double ROOT::Math::AdaptiveIntegratorMultiDim::Result ; (; ); const. inlineoverridevirtual . return result of integration ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 131 of file AdaptiveIntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). overridevirtual . set absolute tolerance ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 73 of file AdaptiveIntegratorMultiDim.cxx. ◆ SetFunction(). void ROOT::Math::AdaptiveIntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . set the integration function (must implement multi-dim function interface: IBaseFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:9584,integrat,integration,9584,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"double RooMultiVarGaussian::evaluate ; (; ); const. overrideprotectedvirtual . Do not persist. ; Represent observables as vector. ; Implements RooAbsReal.; Definition at line 175 of file RooMultiVarGaussian.cxx. ◆ genData(). RooMultiVarGaussian::GenData & RooMultiVarGaussian::genData ; (; Int_t ; code); const. protected . WVE – CHECK THAT GENDATA IS VALID GIVEN CURRENT VALUES OF _MU. ; Definition at line 501 of file RooMultiVarGaussian.cxx. ◆ generateEvent(). void RooMultiVarGaussian::generateEvent ; (; Int_t ; code). overridevirtual . Retrieve generator config from cache. ; Reimplemented from RooAbsPdf.; Definition at line 434 of file RooMultiVarGaussian.cxx. ◆ getAnalyticalIntegral(). Int_t RooMultiVarGaussian::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 194 of file RooMultiVarGaussian.cxx. ◆ getGenerator(). Int_t RooMultiVarGaussian::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Special case: generate all observables. ; Reimplemented from RooAbsPdf.; Definition at line 374 of file RooMultiVarGaussian.cxx. ◆ initGenerator(). void RooMultiVarGaussian::initGenerator ; (; Int_t ; code). overridevirtual . Clear the GenData cache as its content is not invariant under changes in the mu vector. ; Reimplemented from RooAbsPdf.; Definition at line 422 of file RooMultiVarGaussian.cxx. ◆ IsA(). TClass * RooMultiVarGaussian::IsA ; (; ); cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:79412,integrat,integration,79412,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['integrat'],['integration']
Deployability,"double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6216,integrat,integration,6216,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"double inc_beta(double x, double a, double b)Calculates the normalized (regularized) incomplete beta function.Definition SpecFuncMathCore.cxx:115; ROOT::Math::erfcdouble erfc(double x)Complementary error function.Definition SpecFuncMathCore.cxx:44; ROOT::Math::sinintdouble sinint(double x)Calculates the sine integral.Definition SpecFuncMathCore.cxx:122; ROOT::Math::tgammadouble tgamma(double x)The gamma function is defined to be the extension of the factorial to real numbers.Definition SpecFuncMathCore.cxx:89; ROOT::Math::lgammadouble lgamma(double x)Calculates the logarithm of the gamma function.Definition SpecFuncMathCore.cxx:74; ROOT::Math::cosintdouble cosint(double x)Calculates the real part of the cosine integral Re(Ci).Definition SpecFuncMathCore.cxx:212; ROOT::Math::inc_gammadouble inc_gamma(double a, double x)Calculates the normalized (regularized) lower incomplete gamma function (lower integral)Definition SpecFuncMathCore.cxx:99; ROOT::Math::erfdouble erf(double x)Error function encountered in integrating the normal distribution.Definition SpecFuncMathCore.cxx:59; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::Cephes::erfcdouble erfc(double a)Definition SpecFuncCephes.cxx:874; ROOT::Math::Cephes::erfdouble erf(double x)Definition SpecFuncCephes.cxx:926; ROOT::Math::Cephes::incbetdouble incbet(double aa, double bb, double xx)DESCRIPTION:Definition SpecFuncCephes.cxx:484; ROOT::Math::Cephes::igamdouble igam(double a, double x)Definition SpecFuncCephes.cxx:127; ROOT::Math::Cephes::lgamdouble lgam(double x)Definition SpecFuncCephes.cxx:197; ROOT::Math::Cephes::igamcdouble igamc(double a, double x)incomplete complementary gamma function igamc(a, x) = 1 - igam(a, x)Definition SpecFuncCephes.cxx:51; ROOT::Math::Cephes::gammadouble gamma(double x)Definition SpecFuncCephes.cxx:339; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forwar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncMathCore_8cxx_source.html:10244,integrat,integrating,10244,doc/master/SpecFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncMathCore_8cxx_source.html,1,['integrat'],['integrating']
Deployability,"double. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:28814,integrat,integrator,28814,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,8,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20237,integrat,integration,20237,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:13817,update,update,13817,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,10,['update'],['update']
Deployability,dow used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; TGTextButton*fOKCancel button; UInt_tTGFrame::fOptionsframe options; TGCheckButton**fParFixfix setting check buttons; TGNumberEntryField**fParMaxmax range values; TGNumberEntryField**fParMinmin range values; TGTextEntry**fParNamparameter names; TGTripleHSlider**fParSldtriple sliders; TGNumberEntry**fParValparameter values; const TGWindow*TGWindow::fParentParent window; Double_t*fPerroriginal patameters' errors; Double_t*fPmaxmax limits of patameters range; Double_t*fPminmin limits of patameters range; Double_t*fPvaloriginal patameters' values; Double_tfRXmaxoriginal max range; Double_tfRXminoriginal min range; Double_tfRangexmaxmax limits of patameters range; Double_tfRangexminmin limits of patameters range; TGTextButton*fResetReset button; TStringTGMainFrame::fResourceNameWM resource name; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGCheckButton*fUpdateImmediate update check button; UInt_tTGMainFrame::fWMHeightWM height; UInt_tTGMainFrame::fWMHeightIncWM height increments; EInitialStateTGMainFrame::fWMInitStateWM initial state; UInt_tTGMainFrame::fWMMaxHeightWM max height; UInt_tTGMainFrame::fWMMaxWidthWM max width; UInt_tTGMainFrame::fWMMinHeightWM min height; UInt_tTGMainFrame::fWMMinWidthWM min width; UInt_tTGMainFrame::fWMWidthWM width; UInt_tTGMainFrame::fWMWidthIncWM width increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTG,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFunctionParametersDialog.html:21804,update,update,21804,root/html528/TFunctionParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFunctionParametersDialog.html,6,['update'],['update']
Deployability,"dren(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidSetShowTooltip(Bool_t x); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidSwitchColorSet(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); Bool_tUseLightColorSet() const; voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveViewerList.html:16316,update,update,16316,root/html528/TEveViewerList.html,https://root.cern,https://root.cern/root/html528/TEveViewerList.html,6,['update'],['update']
Deployability,"dren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveElementListProjected(); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveElementListProjected.html:16249,update,update,16249,root/html602/TEveElementListProjected.html,https://root.cern,https://root.cern/root/html602/TEveElementListProjected.html,4,['update'],['update']
Deployability,"dren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveTrackListProjected(); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveTrackList::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrackListProjected.html:19287,update,update,19287,root/html602/TEveTrackListProjected.html,https://root.cern,https://root.cern/root/html602/TEveTrackListProjected.html,4,['update'],['update']
Deployability,"dth of the filter can be chosen independently for each dimension. The form of the 2-D smoothing function is as follows:; char *Smooth2(float **spectrum,; int sizex,; int sizey,; int pointsx,; int pointsy);; This function calculates smoothed spectrum from the source spectrum. The result is placed in the array pointed by the spectrum pointer.; Function parameters:. spectrum: pointer to the array of the source spectrum; sizex: x length of spectrum; sizey: y length of spectrum; pointsx, pointsy: width of smoothing window. Possible values:. SMOOTH2_3POINTS; SMOOTH2_5POINTS; SMOOTH2_7POINTS; SMOOTH2_9POINTS; SMOOTH2_11POINTS; SMOOTH2_13POINTS; SMOOTH2_15POINTS. An example of 2-D original data and data after smoothing is given in Figures 2.2, 2.3. 2-D original data. Data after smoothing. 3 PEAK SEARCHING; 3.1 1-DIMENSIONAL SPECTRA; The basic function of the 1-dimensional peak searching is described in details in [4], [5]. It allows to automatically identify the peaks in a spectrum with the presence of the continuous background and statistical fluctuations – noise. The algorithm is based on smoothed second differences that are compared to its standard deviations. Therefore it is necessary to pass a parameter of sigma to the peak searching function. The algorithm is selective to the peaks with a given sigma. The form of the basic peak searching function is; Int_t Search1(const float *spectrum,; int size,; double sigma);; This function searches for peaks in the source spectrum. The number of found peaks and their positions are written into structure pointed by one_dim_peak structure pointer.; Function parameters:. source: pointer to the vector of the source spectrum; p: pointer to the one_dim_peak structure pointer; size: length of the source spectrum; sigma: sigma of searched peaks. The one_dim_peak structure has the form of; struct one_dim_peak{; int number_of_peaks;; double position[MAX_NUMBER_OF_PEAKS1];; };; An example of simple one-dimensional spectrum with identified pe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:15880,continuous,continuous,15880,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['continuous'],['continuous']
Deployability,"dure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Double_tfAdaptiveSpeedhow fast temperature change in adaptive (in adaptive two variables describe; Double_tfEpsrelative required FCN accuracy at minimum; Double_tfInitialTemperatureinitial temperature (depends on FCN); TStringfKernelTemperatureSstring just to set fKernelTemperature; Int_tfMaxCallsmax number of FCN calls; Double_tfMinTemperatureminimum temperature before SA quit; Double_tfTemperatureAdaptiveStepused to calculate InitialTemperature if fUseDefaultTemperature; Double_tfTemperatureScalehow fast temperature change; Bool_tfUseDefaultScaleif TRUE, SA calculates its own TemperatureScale; Bool_tfUseDefaultTemperatureif TRUE, SA calculates its own InitialTemperature (MinTemperautre). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimulatedAnnealingFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. void DeclareOptions(); declare SA options. void SetParameters(Int_t fMaxCalls, Double_t fInitialTemperature, Double_t fMinTemperature, Double_t fEps, TString fKernelTemperatureS, Double_t fTemperatureScale, Double_t fTemperatureAdaptiveStep, Bool_t fUseDefaultScale, Bool_t fUseDefaultTemperature); set SA configuration parameters. Double_t Run(vector<Double_t>& pars); Execute fitting. SimulatedAnnealingFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); {}. » Author: Andreas Hoecker, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk » Copyright (c) 2008: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__SimulatedAnnealingFitter.html:9589,configurat,configuration,9589,root/html604/TMVA__SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/root/html604/TMVA__SimulatedAnnealingFitter.html,1,['configurat'],['configuration']
Deployability,"dure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Double_tfAdaptiveSpeedhow fast temperature change in adaptive (in adaptive two variables describe; Double_tfEpsrelative required FCN accuracy at minimum; Double_tfInitialTemperatureinitial temperature (depends on FCN); TStringfKernelTemperatureSstring just to set fKernelTemperature; Int_tfMaxCallsmax number of FCN calls; Double_tfMinTemperatureminimum temperature before SA quit; Double_tfTemperatureAdaptiveStepused to calculate InitialTemperature if fUseDefaultTemperature; Double_tfTemperatureScalehow fast temperature change; Bool_tfUseDefaultScaleif TRUE, SA calculates its own TemperatureScale; Bool_tfUseDefaultTemperatureif TRUE, SA calculates its own InitialTemperature (MinTemperautre). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimulatedAnnealingFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. void DeclareOptions(); declare SA options. void SetParameters(Int_t fMaxCalls, Double_t fInitialTemperature, Double_t fMinTemperature, Double_t fEps, TString fKernelTemperatureS, Double_t fTemperatureScale, Double_t fTemperatureAdaptiveStep, Bool_t fUseDefaultScale, Bool_t fUseDefaultTemperature); set SA configuration parameters. Double_t Run(vector<Double_t>& pars); Execute fitting. SimulatedAnnealingFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); {}. » Author: Andreas Hoecker, Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk » Copyright (c) 2008: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__SimulatedAnnealingFitter.html:9581,configurat,configuration,9581,root/html602/TMVA__SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/root/html602/TMVA__SimulatedAnnealingFitter.html,1,['configurat'],['configuration']
Deployability,"dvirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 77 of file RooArgusBG.cxx. ◆ evaluate(). double RooArgusBG::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 67 of file RooArgusBG.cxx. ◆ getAnalyticalIntegral(). Int_t RooArgusBG::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 85 of file RooArgusBG.cxx. ◆ IsA(). TClass * RooArgusBG::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooArgusBG.h. ◆ Streamer(). void RooArgusBG::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooArgusBG::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooArgusBG.h. Member Data Documentation. ◆ c. RooRealProxy RooArgusBG::c. protected . Definition at line 44 of file RooArgusBG.h. ◆ m. RooRealProxy RooArgusBG::m. protected . Definition at line 42 of file RooArgusBG.h. ◆ m0. RooRealProxy RooArgusBG::m0. protected . Definition at line 43 of file RooArgusBG.h. ◆ p. RooRealProxy RooArgusBG::p. protected . Definition at line 45 of file RooArgusBG.h. Libraries",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:77317,integrat,integration,77317,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['integrat'],['integration']
Deployability,"dvirtual . variables don't need caches ; Reimplemented from RooAbsArg.; Definition at line 162 of file RooRealVar.h. ◆ setMax() [1/2]. void RooRealVar::setMax ; (; const char * ; name, . double ; value . ). Set maximum of name range to given value. ; If name is null maximum of default range is set ; Definition at line 479 of file RooRealVar.cxx. ◆ setMax() [2/2]. void RooRealVar::setMax ; (; double ; value). inline . Definition at line 78 of file RooRealVar.h. ◆ setMin() [1/2]. void RooRealVar::setMin ; (; const char * ; name, . double ; value . ). Set minimum of name range to given value. ; If name is null minimum of default range is set ; Definition at line 449 of file RooRealVar.cxx. ◆ setMin() [2/2]. void RooRealVar::setMin ; (; double ; value). inline . Definition at line 77 of file RooRealVar.h. ◆ setRange() [1/4]. void RooRealVar::setRange ; (; const char * ; name, . double ; min, . double ; max . ). Set a fit or plotting range. ; Ranges can be selected for e.g. fitting, plotting or integration. Note that multiple variables can have ranges with the same name, so multi-dimensional PDFs can be sliced. See also the tutorial rf203_ranges.C Parameters. [in]nameName this range (so it can be selected later for fitting or plotting). If the name is nullptr, the function sets the limits of the default range. ; [in]minMiniminum of the range. ; [in]maxMaximum of the range. . Definition at line 514 of file RooRealVar.cxx. ◆ setRange() [2/4]. void RooRealVar::setRange ; (; const char * ; name, . RooAbsReal & ; min, . RooAbsReal & ; max . ). Set or modify a parameterised range, i.e., a range the varies in dependence of parameters. ; See setRange() for more details. ; Definition at line 545 of file RooRealVar.cxx. ◆ setRange() [3/4]. void RooRealVar::setRange ; (; double ; min, . double ; max . ). inline . Set the limits of the default range. ; Definition at line 80 of file RooRealVar.h. ◆ setRange() [4/4]. void RooRealVar::setRange ; (; RooAbsReal & ; min, . RooAbsReal & ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:88468,integrat,integration,88468,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['integrat'],['integration']
Deployability,dvoid ClearUpdated()clear IsUpdated() flagDefinition RCanvas.hxx:169; ROOT::Experimental::RCanvas::~RCanvas~RCanvas() override=default; ROOT::Experimental::RCanvas::Hidevoid Hide()Hide all canvas displays.Definition RCanvas.cxx:171; ROOT::Experimental::RChangeAttrRequestDefinition RCanvas.hxx:24; ROOT::Experimental::RChangeAttrRequest::valuesstd::vector< std::unique_ptr< RAttrMap::Value_t > > valuesarray of valuesDefinition RCanvas.hxx:27; ROOT::Experimental::RChangeAttrRequest::namesstd::vector< std::string > namesarray of attribute namesDefinition RCanvas.hxx:26; ROOT::Experimental::RChangeAttrRequest::idsstd::vector< std::string > idsarray of idsDefinition RCanvas.hxx:25; ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest~RChangeAttrRequest() override=default; ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdatebool NeedCanvasUpdate() const overrideDefinition RCanvas.hxx:36; ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequestRChangeAttrRequest()=default; ROOT::Experimental::RChangeAttrRequest::fNeedUpdatebool fNeedUpdate! is canvas update requiredDefinition RCanvas.hxx:29; ROOT::Experimental::RChangeAttrRequest::operator=RChangeAttrRequest & operator=(const RChangeAttrRequest &)=delete; ROOT::Experimental::RChangeAttrRequest::updatebool updateupdate canvas at the endDefinition RCanvas.hxx:28; ROOT::Experimental::RChangeAttrRequest::Processstd::unique_ptr< RDrawableReply > Process() overrideApply attributes changes to the drawable Return mask with actions which were really applied.Definition RCanvas.cxx:327; ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequestRChangeAttrRequest(const RChangeAttrRequest &)=delete; ROOT::Experimental::RDrawableRequestBase class for requests which can be submitted from the clients.Definition RDrawableRequest.hxx:50; ROOT::Experimental::RDrawable::Version_tuint64_t Version_tDefinition RDrawable.hxx:123; ROOT::Experimental::RPadBaseBase class for graphic containers for RDrawable-s.Definition RPadBase.hxx:37; RO,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8hxx_source.html:14573,update,update,14573,doc/master/RCanvas_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8hxx_source.html,1,['update'],['update']
Deployability,"dwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls that MINUIT needs to fit your function as function of the; convolution precision. ; . Function Members (Methods); public:. RooNumConvPdf(); RooNumConvPdf(const RooNumConvPdf& other, const char* name = 0); RooNumConvPdf(const char* name, const char* title, RooRealVar& convVar, RooAbsPdf& pdf, RooAbsPdf& resmodel); virtual~RooNumConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:2387,integrat,integration,2387,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,4,['integrat'],['integration']
Deployability,"dwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls that MINUIT needs to fit your function as function of the; convolution precision. ; . Function Members (Methods); public:. RooNumConvPdf(); RooNumConvPdf(const RooNumConvPdf& other, const char* name = 0); RooNumConvPdf(const char* name, const char* title, RooRealVar& convVar, RooAbsPdf& pdf, RooAbsPdf& resmodel); virtual~RooNumConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:2387,integrat,integration,2387,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['integrat'],['integration']
Deployability,"dwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls that MINUIT needs to fit your function as function of the; convolution precision. ; . Function Members (Methods); public:. RooNumConvolution(); RooNumConvolution(const RooNumConvolution& other, const char* name = 0); RooNumConvolution(const char* name, const char* title, RooRealVar& convVar, RooAbsReal& pdf, RooAbsReal& resmodel, const RooNumConvolution* proto = 0); virtual~RooNumConvolution(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvolution.html:2233,integrat,integration,2233,root/html528/RooNumConvolution.html,https://root.cern,https://root.cern/root/html528/RooNumConvolution.html,4,['integrat'],['integration']
Deployability,"dwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls that MINUIT needs to fit your function as function of the; convolution precision. ; . Function Members (Methods); public:. RooNumConvolution(); RooNumConvolution(const RooNumConvolution& other, const char* name = 0); RooNumConvolution(const char* name, const char* title, RooRealVar& convVar, RooAbsReal& pdf, RooAbsReal& resmodel, const RooNumConvolution* proto = 0); virtual~RooNumConvolution(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:2233,integrat,integration,2233,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,1,['integrat'],['integration']
Deployability,"dwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls that MINUIT needs to fit your function as function of the; convolution precision. ; . Function Members (Methods); public:. virtual~RooNumConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvPdf.html:2387,integrat,integration,2387,root/html602/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html602/RooNumConvPdf.html,2,['integrat'],['integration']
Deployability,"dwidth it may be; advantageous (for both CPU consumption and stability) if the; integration domain is limited to a finite range. The function; setConvolutionWindow(mean,width,scale) allows to set a sliding; window around the x value to be calculated taking a RooAbsReal; expression for an offset and a width to be taken around the x; value. These input expression can be RooFormulaVars or other; function objects although the 3d 'scale' argument 'scale'; multiplies the width RooAbsReal expression given in the 2nd; argument, allowing for an appropriate window definition for most; cases without need for a RooFormulaVar object: e.g. a Gaussian; resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5); Note that for a 'wide' Gaussian the -inf to +inf integration; may converge more quickly than that over a finite range!; ; The default numeric precision is 1e-7, i.e. the global default for; numeric integration but you should experiment with this value to; see if it is sufficient for example by studying the number of function; calls that MINUIT needs to fit your function as function of the; convolution precision. ; . Function Members (Methods); public:. virtual~RooNumConvolution(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvolution.html:2233,integrat,integration,2233,root/html602/RooNumConvolution.html,https://root.cern,https://root.cern/root/html602/RooNumConvolution.html,2,['integrat'],['integration']
Deployability,"d unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCFunction3Ref< VO, VI1, VI2, VI3 > func;  ; RooRealProxy x;  ; RooRealProxy y;  ; RooRealProxy z;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3PdfBinding.html:68006,configurat,configuration,68006,doc/master/classRooCFunction3PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3PdfBinding.html,1,['configurat'],['configuration']
Deployability,"d unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy alpha;  ; RooRealProxy m;  ; RooRealProxy m0;  ; RooRealProxy n;  ; RooRealProxy sigma;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:67853,configurat,configuration,67853,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['configurat'],['configuration']
Deployability,"e * TMapFile::WhichMapFile ; (; void * ; addr). static . Definition at line 1257 of file TMapFile.cxx. Friends And Related Symbol Documentation. ◆ TMapRec. friend class TMapRec. friend . Definition at line 28 of file TMapFile.h. Member Data Documentation. ◆ fBaseAddr. ULongptr_t TMapFile::fBaseAddr. private . Base address of mapped memory region. ; Definition at line 37 of file TMapFile.h. ◆ fBrowseList. TList* TMapFile::fBrowseList. private . List of KeyMapFile objects. ; Definition at line 43 of file TMapFile.h. ◆ fDirectory. TDirectory* TMapFile::fDirectory. private . Pointer to directory associated to this mapfile. ; Definition at line 42 of file TMapFile.h. ◆ fFd. Longptr_t TMapFile::fFd. private . Descriptor of mapped file. ; Definition at line 31 of file TMapFile.h. ◆ fFirst. TMapRec* TMapFile::fFirst. private . List of streamed objects is shared memory. ; Definition at line 39 of file TMapFile.h. ◆ fGetting. TObject* TMapFile::fGetting. private . Don't deadlock in update mode, when from Get() Add() is called. ; Definition at line 47 of file TMapFile.h. ◆ fgMapAddress. Longptr_t TMapFile::fgMapAddress = 0. staticprivate . Map to this address, set address via SetMapAddress() ; Definition at line 52 of file TMapFile.h. ◆ fgMmallocDesc. void * TMapFile::fgMmallocDesc = 0. staticprivate . Used in Close() and operator delete() ; Definition at line 53 of file TMapFile.h. ◆ fhSemaphore. ULongptr_t TMapFile::fhSemaphore. private . HANDLE of WIN32 Mutex object to implement semaphore. ; Definition at line 46 of file TMapFile.h. ◆ fLast. TMapRec* TMapFile::fLast. private . Last object in list of shared objects. ; Definition at line 40 of file TMapFile.h. ◆ fMmallocDesc. void* TMapFile::fMmallocDesc. private . Pointer to mmalloc descriptor. ; Definition at line 36 of file TMapFile.h. ◆ fName. char* TMapFile::fName. private . Name of mapped file. ; Definition at line 33 of file TMapFile.h. ◆ fOffset. Longptr_t TMapFile::fOffset. private . Offset in bytes for region mapped",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:31409,update,update,31409,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['update'],['update']
Deployability,"e . Definition at line 123 of file TGLCamera.h. ◆ IsOrthographic(). virtual Bool_t TGLCamera::IsOrthographic ; (; ); const. inlinevirtual . Reimplemented in TGLOrthoCamera.; Definition at line 118 of file TGLCamera.h. ◆ IsPerspective(). virtual Bool_t TGLCamera::IsPerspective ; (; ); const. inlinevirtual . Reimplemented in TGLPerspectiveCamera.; Definition at line 119 of file TGLCamera.h. ◆ OfInterest(). Bool_t TGLCamera::OfInterest ; (; const TGLBoundingBox & ; box, . Bool_t ; ignoreSize . ); const. Calculate if the an object defined by world frame bounding box is 'of interest' to the camera. ; This is defined as box:. intersecting completely or partially (kInside/kPartial) with cameras interest box (fInterestBox); having significant length OR volume ratio compared to this interest box. If a box is 'of interest' returns kTRUE, kFALSE otherwise. See TGLCamera::UpdateInterest() for more details of camera interest box.; Note: Length/volume ratios NOT dependent on the projected size of box at current camera configuration as we do not want continual changes. This is used when (re) populating the scene with objects from external client.; TODO: Might be more logical to move this test out to client - and have accessor for fInterestBox instead? ; Definition at line 578 of file TGLCamera.cxx. ◆ operator=(). TGLCamera & TGLCamera::operator= ; (; const TGLCamera & ; ). privatedelete . ◆ RefCamBase(). TGLMatrix & TGLCamera::RefCamBase ; (; ). inline . Definition at line 169 of file TGLCamera.h. ◆ RefCamTrans(). TGLMatrix & TGLCamera::RefCamTrans ; (; ). inline . Definition at line 170 of file TGLCamera.h. ◆ RefLastNoPickProjM(). TGLMatrix & TGLCamera::RefLastNoPickProjM ; (; ); const. inline . Definition at line 174 of file TGLCamera.h. ◆ RefModelViewMatrix(). const TGLMatrix & TGLCamera::RefModelViewMatrix ; (; ); const. inline . Definition at line 121 of file TGLCamera.h. ◆ RefViewport() [1/2]. TGLRect & TGLCamera::RefViewport ; (; ). inline . Definition at line 128 of file T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:28055,configurat,configuration,28055,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['configurat'],['configuration']
Deployability,"e 24 of file RCanvas.hxx. Public Member Functions;  RChangeAttrRequest ()=default;  ;  ~RChangeAttrRequest () override=default;  ; bool NeedCanvasUpdate () const override;  ; std::unique_ptr< RDrawableReply > Process () override;  Apply attributes changes to the drawable Return mask with actions which were really applied. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableRequest; virtual ~RDrawableRequest ();  destructor, pin vtable ;  ; RDrawable::RDisplayContext & GetContext ();  ; const RDrawable::RDisplayContext & GetContext () const;  ; const std::string & GetId () const;  ; uint64_t GetRequestId () const;  ; bool ShouldBeReplyed () const;  . Private Member Functions;  RChangeAttrRequest (const RChangeAttrRequest &)=delete;  ; RChangeAttrRequest & operator= (const RChangeAttrRequest &)=delete;  . Private Attributes; bool fNeedUpdate {false};  ! is canvas update required ;  ; std::vector< std::string > ids;  array of ids ;  ; std::vector< std::string > names;  array of attribute names ;  ; bool update {true};  update canvas at the end ;  ; std::vector< std::unique_ptr< RAttrMap::Value_t > > values;  array of values ;  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RChangeAttrRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:1238,update,update,1238,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,3,['update'],['update']
Deployability,e 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typeName). set integration method using a name instead of an enumeration ; Definition at line 306 of file GSLMCIntegrator.cxx. ◆ Sigma(). double ROOT::Math::GSLMCIntegrator::Sigma ; (; ). set parameters for PLAIN method ; returns the error sigma from the last iteration of the Vegas algorithm ; Definition at line 419 of file GSLMCIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLMCIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::Math::GSLMCIntegrator::fDim. private . Definition at line 313 of file GSLMCIntegrator.h. ◆ fError. double ROOT::Math::GSLMCIntegrator::fError. private . Definition at line 321 of file GSLMCI,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:13041,integrat,integration,13041,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,1,['integrat'],['integration']
Deployability,"e 39 of file RooLinTransBinning.h. ◆ setMin(). void RooLinTransBinning::setMin ; (; double ; xlo). inlineoverridevirtual . Change lower bound to xlo. ; Reimplemented from RooAbsBinning.; Definition at line 38 of file RooLinTransBinning.h. ◆ setRange(). void RooLinTransBinning::setRange ; (; double ; xlo, . double ; xhi . ). overridevirtual . Implements RooAbsBinning.; Definition at line 56 of file RooLinTransBinning.cxx. ◆ Streamer(). void RooLinTransBinning::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ; Reimplemented from RooAbsBinning. ◆ StreamerNVirtual(). void RooLinTransBinning::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file RooLinTransBinning.h. ◆ trans(). double RooLinTransBinning::trans ; (; double ; x); const. inlineprotected . Definition at line 52 of file RooLinTransBinning.h. ◆ updateInput(). void RooLinTransBinning::updateInput ; (; const RooAbsBinning & ; input, . double ; slope = 1.0, . double ; offset = 0.0 . ). Update the slope and offset parameters and the pointer to the input binning. ; Definition at line 91 of file RooLinTransBinning.cxx. Member Data Documentation. ◆ _array. std::vector<double> RooLinTransBinning::_array. mutableprotected . ! Array of transformed bin boundaries ; Definition at line 58 of file RooLinTransBinning.h. ◆ _input. RooAbsBinning* RooLinTransBinning::_input {nullptr}. protected . Input binning. ; Definition at line 57 of file RooLinTransBinning.h. ◆ _offset. double RooLinTransBinning::_offset {0.}. protected . Offset of transformation. ; Definition at line 56 of file RooLinTransBinning.h. ◆ _slope. double RooLinTransBinning::_slope {0.}. protected . Slope of transformation. ; Definition at line 55 of file RooLinTransBinning.h. Libraries for RooLinTransBinning:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooLinTransB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinTransBinning.html:23066,update,updateInput,23066,doc/master/classRooLinTransBinning.html,https://root.cern,https://root.cern/doc/master/classRooLinTransBinning.html,1,['update'],['updateInput']
Deployability,"e 699 of file TMultiGraph.cxx. ◆ FitPanel(). void TMultiGraph::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 716 of file TMultiGraph.cxx. ◆ GetFunction(). TF1 * TMultiGraph::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Functions such as TGraph::Fit store the fitted function in the list of functions of this graph. ; Definition at line 1086 of file TMultiGraph.cxx. ◆ GetGraphDrawOption(). Option_t * TMultiGraph::GetGraphDrawOption ; (; const TGraph * ; gr); const. virtual . Return the draw option for the TGraph gr in this TMultiGraph. ; The return option is the one specified when calling TMultiGraph::Add(gr,option). ; Definition at line 740 of file TMultiGraph.cxx. ◆ GetHistogram(). TH1F * TMultiGraph::GetHistogram ; (; ). Returns a pointer to the histogram used to draw the axis. ; Takes into account following cases. if fHistogram exists it is returned; if fHistogram doesn't exists and gPad exists gPad is updated. That may trigger the creation of fHistogram. If fHistogram still does not exit but hframe does (if user called TPad::DrawFrame) the pointer to hframe histogram is returned; after the two previous steps, if fHistogram still doesn't exist, then it is created. . Definition at line 1015 of file TMultiGraph.cxx. ◆ GetListOfFunctions() [1/2]. TList * TMultiGraph::GetListOfFunctions ; (; ). Return pointer to list of functions. ; If pointer is null create the list ; Definition at line 1096 of file TMultiGraph.cxx. ◆ GetListOfFunctions() [2/2]. const TList * TMultiGraph::GetListOfFunctions ; (; ); const. inline . Definition at line 72 of file TMultiGraph.h. ◆ GetListOfGraphs(). TList * TMultiGraph::GetListOfGraphs ; (; ); const. inline . Definition at line 68 of file TMultiGraph.h. ◆ GetXaxis(). TAxis * TMultiGraph::GetXaxis ; (; ). Get x axis of the graph. ; This method returns a valid axis only after the TMultigraph has been drawn. ; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:38269,update,updated,38269,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['update'],['updated']
Deployability,"e ;  ; void SetUseTransactions (Int_t mode=kTransactionsAuto);  Defines usage of transactions statements for writing objects data to database. ;  ; Int_t Sizeof () const final;  Return the size in bytes of the file header. ;  ; void SkipArrayLimit ();  ; void StartLogFile (const char *fname);  start logging of all SQL statements in specified file ;  ; Bool_t StartTransaction ();  Start user transaction. ;  ; void StopLogFile ();  close logging file ;  ; void Streamer (TBuffer &) override;  Streamer for TSQLFile class. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *=nullptr, Int_t=0, Int_t=0) const final;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *=nullptr, Int_t=0, Int_t=0) final;  Write memory objects to this file. ;  ; Bool_t WriteBuffer (const char *, Int_t) final;  Write a buffer to the file. ;  ; void WriteFree () final;  Write FREE linked list on the file. ;  ; void WriteHeader () final;  Write file info like configurations, title, UUID and other. ;  ; void WriteStreamerInfo () final;  Store all TVirtualStreamerInfo, used in file, in sql database. ;  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:15299,configurat,configurations,15299,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['configurat'],['configurations']
Deployability,"e = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr = 0); virtual Int_tSetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidSetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidTTree::SetBranchStyle(Int_t style = 1); virtual voidTTree::SetCacheEntryRange(Long64_t first, Long64_t last); virtual voidTTree::SetCacheLearnEntries(Int_t n = 10); virtual voidSetCacheSize(Long64_t cacheSize = -1); virtual voidTTree::SetChainOffset(Long64_t offset = 0); virtual voidTTree::SetCircular(Long64_t maxEntries); virtual voidTTree::SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidTTree::SetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidSetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tTTree::SetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* elist, Option_t* opt = """"); virtual voidSetEntryListFile(const char* filename = """", Option_t* opt = """"); virtual voidTTree::SetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* evlist); virtual voidTTree::SetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TChain.html:16811,update,updateExisting,16811,root/html602/TChain.html,https://root.cern,https://root.cern/root/html602/TChain.html,1,['update'],['updateExisting']
Deployability,"e == AUTH_HANDLER) {; 13642 DEBUG_ASSERT(handler == NULL);; 13643 DEBUG_ASSERT(connect_handler == NULL && ready_handler == NULL; 13644 && data_handler == NULL && close_handler == NULL);; 13645 DEBUG_ASSERT(is_delete_request || (auth_handler != NULL));; 13646 if (handler != NULL) {; 13647 return;; 13648 }; 13649 if ((connect_handler != NULL) || (ready_handler != NULL); 13650 || (data_handler != NULL) || (close_handler != NULL)) {; 13651 return;; 13652 }; 13653 if (!is_delete_request && (auth_handler == NULL)) {; 13654 return;; 13655 }; 13656 } else {; 13657 /* Unknown handler type. */; 13658 return;; 13659 }; 13660 ; 13661 if (!phys_ctx || !dom_ctx) {; 13662 /* no context available */; 13663 return;; 13664 }; 13665 ; 13666 mg_lock_context(phys_ctx);; 13667 ; 13668 /* first try to find an existing handler */; 13669 do {; 13670 lastref = &(dom_ctx->handlers);; 13671 for (tmp_rh = dom_ctx->handlers; tmp_rh != NULL;; 13672 tmp_rh = tmp_rh->next) {; 13673 if (tmp_rh->handler_type == handler_type; 13674 && (urilen == tmp_rh->uri_len) && !strcmp(tmp_rh->uri, uri)) {; 13675 if (!is_delete_request) {; 13676 /* update existing handler */; 13677 if (handler_type == REQUEST_HANDLER) {; 13678 /* Wait for end of use before updating */; 13679 if (tmp_rh->refcount) {; 13680 mg_unlock_context(phys_ctx);; 13681 mg_sleep(1);; 13682 mg_lock_context(phys_ctx);; 13683 /* tmp_rh might have been freed, search again. */; 13684 break;; 13685 }; 13686 /* Ok, the handler is no more use -> Update it */; 13687 tmp_rh->handler = handler;; 13688 } else if (handler_type == WEBSOCKET_HANDLER) {; 13689 tmp_rh->subprotocols = subprotocols;; 13690 tmp_rh->connect_handler = connect_handler;; 13691 tmp_rh->ready_handler = ready_handler;; 13692 tmp_rh->data_handler = data_handler;; 13693 tmp_rh->close_handler = close_handler;; 13694 } else { /* AUTH_HANDLER */; 13695 tmp_rh->auth_handler = auth_handler;; 13696 }; 13697 tmp_rh->cbdata = cbdata;; 13698 } else {; 13699 /* remove existing handler */; 13700 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:400177,update,update,400177,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['update'],['update']
Deployability,"e == AUTH_HANDLER) {; 13643 DEBUG_ASSERT(handler == NULL);; 13644 DEBUG_ASSERT(connect_handler == NULL && ready_handler == NULL; 13645 && data_handler == NULL && close_handler == NULL);; 13646 DEBUG_ASSERT(is_delete_request || (auth_handler != NULL));; 13647 if (handler != NULL) {; 13648 return;; 13649 }; 13650 if ((connect_handler != NULL) || (ready_handler != NULL); 13651 || (data_handler != NULL) || (close_handler != NULL)) {; 13652 return;; 13653 }; 13654 if (!is_delete_request && (auth_handler == NULL)) {; 13655 return;; 13656 }; 13657 } else {; 13658 /* Unknown handler type. */; 13659 return;; 13660 }; 13661 ; 13662 if (!phys_ctx || !dom_ctx) {; 13663 /* no context available */; 13664 return;; 13665 }; 13666 ; 13667 mg_lock_context(phys_ctx);; 13668 ; 13669 /* first try to find an existing handler */; 13670 do {; 13671 lastref = &(dom_ctx->handlers);; 13672 for (tmp_rh = dom_ctx->handlers; tmp_rh != NULL;; 13673 tmp_rh = tmp_rh->next) {; 13674 if (tmp_rh->handler_type == handler_type; 13675 && (urilen == tmp_rh->uri_len) && !strcmp(tmp_rh->uri, uri)) {; 13676 if (!is_delete_request) {; 13677 /* update existing handler */; 13678 if (handler_type == REQUEST_HANDLER) {; 13679 /* Wait for end of use before updating */; 13680 if (tmp_rh->refcount) {; 13681 mg_unlock_context(phys_ctx);; 13682 mg_sleep(1);; 13683 mg_lock_context(phys_ctx);; 13684 /* tmp_rh might have been freed, search again. */; 13685 break;; 13686 }; 13687 /* Ok, the handler is no more use -> Update it */; 13688 tmp_rh->handler = handler;; 13689 } else if (handler_type == WEBSOCKET_HANDLER) {; 13690 tmp_rh->subprotocols = subprotocols;; 13691 tmp_rh->connect_handler = connect_handler;; 13692 tmp_rh->ready_handler = ready_handler;; 13693 tmp_rh->data_handler = data_handler;; 13694 tmp_rh->close_handler = close_handler;; 13695 } else { /* AUTH_HANDLER */; 13696 tmp_rh->auth_handler = auth_handler;; 13697 }; 13698 tmp_rh->cbdata = cbdata;; 13699 } else {; 13700 /* remove existing handler */; 13701 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:400210,update,update,400210,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['update'],['update']
Deployability,"e Carlo. In the main algorithm, new points in the; parameter space are proposed and then visited based on their relative; likelihoods. This class can use any implementation of the ProposalFunction,; including non-symmetric proposal functions, to propose parameter points and; still maintain detailed balance when constructing the chain. The ""Likelihood"" function that is sampled when deciding what steps to take in; the chain has been given a very generic implementation. The user can create; any RooAbsReal based on the parameters and pass it to a MetropolisHastings; object with the method SetFunction(RooAbsReal&). Be sure to tell; MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale,; so that it knows what logic to use when sampling your RooAbsReal. For example,; a common use is to sample from a -log(Likelihood) distribution (NLL), for which; the appropriate configuration calls are SetType(MetropolisHastings::kLog);; SetSign(MetropolisHastings::kNegative);; If you're using a traditional likelihood function:; SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive);; You must set these type and sign flags or MetropolisHastings will not construct; a MarkovChain. Also note that in ConstructChain(), the values of the variables are randomized; uniformly over their intervals before construction of the MarkovChain begins. Function Members (Methods); public:. virtual~MetropolisHastings(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual RooStats::MarkovChain*ConstructChain(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MetropolisHastings.html:1337,configurat,configuration,1337,root/html528/RooStats__MetropolisHastings.html,https://root.cern,https://root.cern/root/html528/RooStats__MetropolisHastings.html,6,['configurat'],['configuration']
Deployability,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). 	evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). 	evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:7355,integrat,integration,7355,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,6,['integrat'],['integration']
Deployability,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html:7357,integrat,integration,7357,root/html534/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLIntegrator.html,6,['integrat'],['integration']
Deployability,"e Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetGenerator(ROOT::Math::GSLRngWrapper* r). 	 to be added later as options for basic MC methods; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetIntegrationRule(Integration::GKRule );. 	 set random number generator. void SetType(ROOT::Math::IntegrationMultiDim::Type type). 	 set integration method. void SetMode(ROOT::Math::MCIntegration::Mode mode). 	 set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). 	 set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). 	 set default parameters for MISER method. double Sigma(). 	 set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. 	 returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). 	 returns chi-squared per degree of freedom for the estimate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html:5615,integrat,integration,5615,root/html526/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMCIntegrator.html,2,['integrat'],"['integration', 'integrations']"
Deployability,"e Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:1105,release,release,1105,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['release'],['release']
Deployability,"e QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, or when using it via the ROOT::Math::IntegratorMultiDim interface, can be defined using the ROOT::Math::IntegratorMultiDimOptions.; 13.9 Function Derivation; There are in ROOT only two classes to perform numerical derivation. One of them is in the MathCore library while the other is in the MathMore wrapping an integration function from the GSL library. * RichardsonDerivator: Implements the Richardson method for numerical integration. It can calculate up to the third derivative of a function. * GSLDerivator of MathMore based on GSL.; 13.10 Numerical Minimization; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. The left branch of classes are used for one dimensional minimization, while the right one is used for multidimensional minimization. In the case of multidimensional minimization we have also the classes TMinuitMinimizer implemented using TMinuit, TFumiliMinimizer implemented using TFumili for least square or likelihood minimizations. We encourage the use of the GSL algorithms for one dimensional minimization and Minuit2 (or the old versionMinuit) for multi dimensional minimization. Numerical Minimization classes. 13.10.1 One-Dimensional Minimization; These algorithms are for finding the minimum of a one-dimensional minimization function. The function to minimize must be given to the class implementing the algorithm as a ROOT::Math::IBaseFunctionOneDim object. The algorithms supported are only bracketing algorithm which do not use derivatives information.; Two classes exist. One in the MathCore library implementi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:713767,integrat,integration,713767,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Deployability,"e RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246 of file RGeomData.hxx. ◆ fHighlightedStack. std::vector<int> ROOT::RGeomDescription::fHighlightedStack. private . ! highlighted element by stack ; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:29012,configurat,configuration,29012,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['configurat'],['configuration']
Deployability,"e Range_t > ; RRangeCast< T, true, Range_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, false, Range_t > RangeStaticCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, false, std::span< U > > RangeStaticCast (U(&arr)[N]);  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:12281,update,update,12281,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['update'],['update']
Deployability,"e RooAbsArg.cxx. ◆ replaceServer(). void RooAbsArg::replaceServer ; (; RooAbsArg & ; oldServer, . RooAbsArg & ; newServer, . bool ; propValue, . bool ; propShape . ). Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ; WarningThis function should not be used! This method is quite unsafe for many reasons. For once, the new server will be put at the end of the server list, no matter the position of the original server. This might mess up code that expects the servers to be in a certain order. Furthermore, the proxy objects corresponding to the server are not updated, leaving the object in an invalid state where the servers are out of sync with the proxies. This can have very bad consequences. Finally, by having to manually specify the value and shape server properties, it is very easy to get them wrong.; If you want to safely replace a server, you should use RooAbsArg::redirectServers(), which replaces the server in-place at the same position of the server list, keeps the same value and shape server properties, and also updates the corresponding proxies. ; Definition at line 421 of file RooAbsArg.cxx. ◆ resetDataToken(). void RooAbsArg::resetDataToken ; (; ). inline . Definition at line 681 of file RooAbsArg.h. ◆ serverNameChangeHook(). virtual void RooAbsArg::serverNameChangeHook ; (; const RooAbsArg * ; , . const RooAbsArg * ;  . ). inlinevirtual . Definition at line 248 of file RooAbsArg.h. ◆ servers(). const RefCountList_t & RooAbsArg::servers ; (; ); const. inline . List of all servers of this object. ; Definition at line 180 of file RooAbsArg.h. ◆ setAttribute(). void RooAbsArg::setAttribute ; (; const Text_t * ; name, . bool ; value = true . ). Set (default) or clear a named boolean attribute of this object. ; Definition at line 222 of file RooAbsArg.cxx. ◆ setCacheAndTrackHints(). virtual void RooAbsArg::setCacheAndTrackHints ; (; RooArgSet & ; ). inlinevirtual . Reimplemented in RooLagrangianMorphFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:95157,update,updates,95157,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['update'],['updates']
Deployability,"e TGuiBldDragManager.cxx. ◆ HandleSelectionRequest(). Bool_t TGuiBldDragManager::HandleSelectionRequest ; (; Event_t * ; ). overrideprivatevirtual . not used yet. ; Reimplemented from TGFrame.; Definition at line 4206 of file TGuiBldDragManager.cxx. ◆ HandleTimer(). Bool_t TGuiBldDragManager::HandleTimer ; (; TTimer * ; t). overrideprivatevirtual . The main event loop is originated here It repeatedly queries pointer state and position on the screen. ; From this info an Event_t structure is built. ; Reimplemented from TObject.; Definition at line 1626 of file TGuiBldDragManager.cxx. ◆ HandleTimerEvent(). Bool_t TGuiBldDragManager::HandleTimerEvent ; (; Event_t * ; ev, . TTimer * ; t . ). overridevirtual . Handle timer events or events coming from the recorder. ; Reimplemented from TVirtualDragManager.; Definition at line 1634 of file TGuiBldDragManager.cxx. ◆ HandleUpdateSelected(). void TGuiBldDragManager::HandleUpdateSelected ; (; TGFrame * ; f). When selected frame was changed by guibuilder editor -> update its appearance. ; Definition at line 5024 of file TGuiBldDragManager.cxx. ◆ HideGrabRectangles(). void TGuiBldDragManager::HideGrabRectangles ; (; ). private . Hide/Unmap grab rectangles. ; Definition at line 5063 of file TGuiBldDragManager.cxx. ◆ HighlightCompositeFrame(). void TGuiBldDragManager::HighlightCompositeFrame ; (; Window_t ; win). private . Raise composite frame when mouse is moving over it. ; That allows to highlight position of ""plain"" composite frames. ; Definition at line 1582 of file TGuiBldDragManager.cxx. ◆ IgnoreEvent(). Bool_t TGuiBldDragManager::IgnoreEvent ; (; Event_t * ; e). overrideprivatevirtual . Return kTRUE if event is rejected for processing by drag manager. ; Reimplemented from TVirtualDragManager.; Definition at line 1033 of file TGuiBldDragManager.cxx. ◆ InEditable(). TGFrame * TGuiBldDragManager::InEditable ; (; Window_t ; id). private . Return a pointer to the parent window (which is being edited) ; Definition at line 1055 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManager.html:61202,update,update,61202,doc/master/classTGuiBldDragManager.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManager.html,1,['update'],['update']
Deployability,"e a given pad.; root[] pad1->Divide(3,2). Dividing a pad into 6 sub-pads. Dividing a pad into 6 sub-pads. If pad1 is a pad then, it will divide the pad into 3 columns of 2 sub-pads. The generated sub-pads get names pad1_i where the index i=1 to nxm (in our case pad1_1, pad1_2…pad1_6). The names pad1_1etc… correspond to new variables in Cling, so you may use them as soon as the executed method was pad->Divide(). However, in a compiled program, one has to access these objects. Remember that a pad contains other objects and that these objects may themselves be pads. So we can use the GetPrimitive() method:; TPad* pad1_1 = (TPad*)(pad1->GetPrimitive(""pad1_1"")); One question remains. In case one does an automatic divide, how one can set the default margins between pads? This is done by adding two parameters to Divide(), which are the margins in x and y:; root[] pad1->Divide(3,2,0.1,0.1); The margins are here set to 10% of the parent pad width.; 9.3.5 Updating the Pad; For performance reasons, a pad is not updated with every change. For example, changing the coordinates of the pad does not automatically redraw it. Instead, the pad has a “bit-modified” that triggers a redraw. This bit is automatically set by:. Touching the pad with the mouse - for example resizing it with the mouse.; Finishing the execution of a script.; Adding a new primitive or modifying some primitives for example the name and title of an object.; You can also set the “bit-modified” explicitly with the Modified method:; // the pad has changed; root[] pad1->Modified(); // recursively update all modified pads:; root[] c1->Update(); A subsequent call to TCanvas::Update() scans the list of sub-pads and repaints the pads declared modified. In compiled code or in a long macro, you may want to access an object created during the paint process. To do so, you can force the painting with a TCanvas::Update(). For example, a TGraph creates a histogram (TH1) to paint itself. In this case the internal histogram obtai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:313898,update,updated,313898,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['updated']
Deployability,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:2916,integrat,integrations,2916,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,6,['integrat'],"['integration', 'integrations', 'integrators']"
Deployability,"e according to the highlighted bin.; ; TText *info = nullptr;; ; void HighlightTitle(TVirtualPad *pad, TObject *obj, Int_t xhb, Int_t yhb); {; auto h2 = dynamic_cast<TH2F*>(obj);; if (!h2) return;; if (!h2->IsHighlight()) { // after highlight disabled; h2->SetTitle(""Disable highlight"");; return;; }; if (info) info->SetTitle("""");; TString t;; t.Form(""bin[%02d, %02d] (%5.2f, %5.2f) content %g"", xhb, yhb,; h2->GetXaxis()->GetBinCenter(xhb), h2->GetYaxis()->GetBinCenter(yhb),; h2->GetBinContent(xhb, yhb));; h2->SetTitle(t.Data());; pad->Update();; }; ; void hlHisto1(); {; auto c1 = new TCanvas();; c1->HighlightConnect(""HighlightTitle(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto h2 = new TH2F(""h2"", """", 50, -5.0, 5.0, 50, -5.0, 5.0);; for (Int_t i = 0; i < 10000; i++) h2->Fill(gRandom->Gaus(), gRandom->Gaus());; h2->Draw();; ; info = new TText(0.0, -4.0, ""please move the mouse over the frame"");; info->SetTextAlign(22);; info->SetTextColor(kRed+1);; info->SetBit(kCannotPick);; info->Draw();; c1->Update();; ; // call after update to apply changes in the histogram painter; h2->SetHighlight();; }; Int_tint Int_tDefinition RtypesCore.h:45; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Drawvirtual void Draw(Option_t *option=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlHisto1_8C.html:1535,update,update,1535,doc/master/hlHisto1_8C.html,https://root.cern,https://root.cern/doc/master/hlHisto1_8C.html,1,['update'],['update']
Deployability,"e and title. ;  ; virtual void SetOption (Option_t *option="" "");  ; virtual void SetPoint (Int_t i, Double_t x, Double_t y);  Set x and y values for point number i. ;  ; virtual void SetPointX (Int_t i, Double_t x);  Set x value for point i. ;  ; virtual void SetPointY (Int_t i, Double_t y);  Set y value for point i. ;  ; virtual void SetStats (Bool_t stats=kTRUE);  Set statistics option on/off. ;  ; void SetTitle (const char *title="""") override;  Change (i.e. ;  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:20318,continuous,continuous,20318,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,7,['continuous'],['continuous']
Deployability,"e are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project configuration; Create the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/empty.md if this is not a patch release; git commit README/ReleaseNotes/vXXX/index.md. Update to the next development version. edit build/version_number (odd patch number); make version, check in. Push to github. $ git push origin vX-YY-00-patches; $ git push origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:2916,release,release,2916,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['release'],['release']
Deployability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Fri Dec 2 14:26:59 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProjectedPdf.html:44525,update,update,44525,root/html532/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html532/RooProjectedPdf.html,3,"['integrat', 'update']","['integration', 'update']"
Deployability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Mon Dec 7 13:48:46 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:42232,update,update,42232,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,3,"['integrat', 'update']","['integration', 'update']"
Deployability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Mon Jul 4 15:23:45 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProjectedPdf.html:43268,update,update,43268,root/html530/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html530/RooProjectedPdf.html,3,"['integrat', 'update']","['integration', 'update']"
Deployability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Sat Oct 9 20:48:34 2010 » Last generated: 2010-10-09 20:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProjectedPdf.html:42708,update,update,42708,root/html528/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html528/RooProjectedPdf.html,3,"['integrat', 'update']","['integration', 'update']"
Deployability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Tue Jun 2 15:33:10 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProjectedPdf.html:47694,update,update,47694,root/html604/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html604/RooProjectedPdf.html,3,"['integrat', 'update']","['integration', 'update']"
Deployability,"e bin; TH1*fDenominatorDenominator histogram; Double_tfEpsilonPrecision required for function integration (option ""I""); Bool_tfFitDoneSet to kTRUE when the fit has been done; TF1*fFunctionFunction to fit; TH1*fNumeratorNumerator histogram; Bool_tfRangeTrue if the fit range must be taken from the function range; static TVirtualFitter*fgFitterpointer to the real fitter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBinomialEfficiencyFitter(); default constructor. TBinomialEfficiencyFitter(const TH1* numerator, const TH1* denominator); Constructor. Note that no objects are copied, so it is up to the user to ensure that the; histogram pointers remain valid. Both histograms need to be ""consistent"". This is not checked here, but in; TBinomialEfficiencyFitter::Fit(). ~TBinomialEfficiencyFitter(); destructor. void Set(const TH1* numerator, const TH1* denominator); Initialize with a new set of inputs. void SetPrecision(Double_t epsilon); Set the required integration precision, see TF1::Integral(). TVirtualFitter* GetFitter(); static: Provide access to the underlying fitter object.; This may be useful e.g. for the retrieval of additional information (such; as the output covariance matrix of the fit). Int_t Fit(TF1* f1, Option_t* option = """"); Carry out the fit of the given function to the given histograms. If option ""I"" is used, the fit function will be averaged over the; bin (the default is to evaluate it simply at the bin center). If option ""R"" is used, the fit range will be taken from the fit; function (the default is to use the entire histogram). Note that all parameter values, limits, and step sizes are copied; from the input fit function f1 (so they should be set before calling; this method. This is particularly relevant for the step sizes, taken; to be the ""error"" set on input, as a null step size usually fixes the; corresponding parameter. That is protected against, but in such cases; an arbitrary starting step size will b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBinomialEfficiencyFitter.html:9164,integrat,integration,9164,root/html526/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html526/TBinomialEfficiencyFitter.html,5,['integrat'],['integration']
Deployability,"e branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useCdfBoundariesAre c.d.f boundary conditions used by the RooHistFuncs?; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedReal.html:36362,integrat,integrator,36362,root/html534/RooCachedReal.html,https://root.cern,https://root.cern/root/html534/RooCachedReal.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooSetProxy_depListList of dependents defining dimensions of histogram; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intOrderInterpolation order; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistFunc.html:31715,integrat,integration,31715,root/html532/RooHistFunc.html,https://root.cern,https://root.cern/root/html532/RooHistFunc.html,2,['integrat'],['integration']
Deployability,"e builtin_fftw3 at https://root.cern/building-root; Install FFTW and let ROOT discover it. fftw3 is on by default (see https://root.cern/building-root). 1) Go to www.fftw.org and download the latest stable version (a .tar.gz file); If you have root access to your machine and want to make a system installation of FFTW; 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory and type './configure' followed by 'make install'. This will install fftw in /usr/local/bin,lib etc...; 3) Start from a source installation of ROOT. ROOT should discover it. See https://root.cern/building-root; If you do not have root access and want to make a private installation of FFTW; 2) Make a private install area for FFTW, e.g. /home/myself/fftw; 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory and type './configure –prefix=/home/myself/fftw' followed by 'make install'. Substitute /home/myself/fftw with a directory of your choice. This procedure will install FFTW in the location designated by you; 4) Start from a source installation of ROOT. Look up and set the proper paths for ROOT to discover FFTW. See https://root.cern/building-root ; Definition at line 25 of file RooFFTConvPdf.h. Classes; class  FFTCacheElem;  . Public Types; enum  BufStrat { Extend =0; , Mirror =1; , Flat =2; };  ;  Public Types inherited from RooAbsCachedPdf; using CacheElem = PdfCacheElem;  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using Ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:4871,install,install,4871,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,2,['install'],"['install', 'installation']"
Deployability,"e cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject category; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEfficiency.html:44338,configurat,configuration,44338,root/html602/RooEfficiency.html,https://root.cern,https://root.cern/root/html602/RooEfficiency.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e can be used in; 1247/// JavaScript ROOT (https://root.cern/js/) to display object in web browser; 1248/// When creating JSON file, option string may contain compression level from 0 to 3 (default 0); 1249 ; 1250Int_t TDirectory::SaveObjectAs(const TObject *obj, const char *filename, Option_t *option) const; 1251{; 1252 // option can contain single letter args: ""a"" for append, ""q"" for quiet in any combinations; 1253 ; 1254 if (!obj) return 0;; 1255 Int_t nbytes = 0;; 1256 TString fname, opt = option, cmd;; 1257 if (filename && *filename); 1258 fname = filename;; 1259 else; 1260 fname.Form(""%s.root"", obj->GetName());; 1261 opt.ToLower();; 1262 ; 1263 if (fname.Index("".json"") > 0) {; 1264 cmd.Form(""TBufferJSON::ExportToFile(\""%s\"", (TObject *) 0x%zx, \""%s\"");"", fname.Data(), (size_t) obj, (option ? option : """"));; 1265 nbytes = gROOT->ProcessLine(cmd);; 1266 } else {; 1267 cmd.Form(""TFile::Open(\""%s\"",\""%s\"");"", fname.Data(), opt.Contains(""a"") ? ""update"" : ""recreate"");; 1268 TContext ctxt; // The TFile::Open will change the current directory.; 1269 TDirectory *local = (TDirectory*)gROOT->ProcessLine(cmd);; 1270 if (!local) return 0;; 1271 nbytes = obj->Write();; 1272 delete local;; 1273 }; 1274 if (!opt.Contains(""q"") && !gSystem->AccessPathName(fname.Data())); 1275 obj->Info(""SaveAs"", ""ROOT file %s has been created"", fname.Data());; 1276 return nbytes;; 1277}; 1278 ; 1279////////////////////////////////////////////////////////////////////////////////; 1280/// Set the name for directory; 1281/// If the directory name is changed after the directory was written once,; 1282/// ROOT currently would NOT change the name of correspondent key in the; 1283/// mother directory.; 1284/// DO NOT use this method to 'rename a directory'.; 1285/// Renaming a directory is currently NOT supported.; 1286 ; 1287void TDirectory::SetName(const char* newname); 1288{; 1289 TNamed::SetName(newname);; 1290}; 1291 ; 1292//////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:43977,update,update,43977,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['update'],['update']
Deployability,"e canvas. 2.3.1 Main Menus and Toolbar; At the top of the canvas window are File, Edit, View, Options, Inspect, Classes and Help menus.; 2.3.1.1 File Menu. New Canvas: creates a new canvas window in the current ROOT session.; Open…: popup a dialog to open a file.; Close Canvas: close the canvas window.; Save: save the drawing of the current canvas in a format selectable from the submenu. The current canvas name is used as a file name for various formats such as PostScript, GIF, JPEG, C macro file, root file.; Save As…: popup a dialog for saving the current canvas drawing in a new filename.; Print: popup a dialog to print the current canvas drawing; Quit ROOT: exit the ROOT session. 2.3.1.2 Edit Menu; There is only one active menu entry in the Edit menu. The others menu entries will be implemented and will become active in the near future. Clear: delete all objects in the canvas or in the selected pad according to the selected entry in the submenu. 2.3.1.3 View Menu. Editor: toggles the view of the editor. If it is selected activates and shows up the editor on the left side of the canvas window. According to the selected object, the editor loads the corresponding user interface for easy change of the object’s attributes.; Toolbar: toggles the view of the toolbar. If it is selected activates and shows up the toolbar. It contains buttons for easy and fast access to most frequently used commands and for graphics primitive drawing. Tool tips are provided for helping users.; Status Bar: toggles the view of the status bar. If it is selected, the status bar below the canvas window shows up. There the identification of the objects is displayed when moving the mouse (such as the object’s name, the object’s type, its coordinates, etc.).; Colors: creates a new canvas showing the color palette.; Markers: creates a new canvas showing the various marker styles.; Iconify: create the canvas window icon, does not close the canvas; View With…: If the last selected pad contains a 3-d s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:38094,toggle,toggles,38094,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['toggle'],['toggles']
Deployability,"e class declaration ; Definition at line 80 of file RooKeysPdf.h. ◆ evaluate(). double RooKeysPdf::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 278 of file RooKeysPdf.cxx. ◆ g(). double RooKeysPdf::g ; (; double ; x, . double ; sigma . ); const. private . Definition at line 365 of file RooKeysPdf.cxx. ◆ getAnalyticalIntegral(). Int_t RooKeysPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 301 of file RooKeysPdf.cxx. ◆ getMaxVal(). Int_t RooKeysPdf::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Definition at line 348 of file RooKeysPdf.cxx. ◆ IsA(). TClass * RooKeysPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 80 of file RooKeysPdf.h. ◆ LoadDataSet(). void RooKeysPdf::LoadDataSet ; (; RooDataSet & ; data). Definition at line 148 of file RooKeysPdf.cxx. ◆ maxVal(). double RooKeysPdf::maxVal ; (; Int_t ; code); const. overridevirtual . Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooKeysPdf.html:78447,integrat,integration,78447,doc/master/classRooKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooKeysPdf.html,1,['integrat'],['integration']
Deployability,"e class factory for functions and p.d.f.s ;  rf105_funcbinding.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #105 ;  rf106_plotdecoration.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #106 ;  rf106_plotdecoration.py 'BASIC FUNCTIONALITY' RooFit tutorial macro #106 Adding boxes with parameters, to RooPlots ;  rf107_plotstyles.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #107 ;  rf107_plotstyles.py 'BASIC FUNCTIONALITY' RooFit tutorial macro #107 Demonstration of various plotting styles of data, functions in a RooPlot ;  rf108_plotbinning.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #108 ;  rf108_plotbinning.py 'BASIC FUNCTIONALITY' RooFit tutorial macro #108 Plotting unbinned data with alternate and variable binnings ;  rf109_chi2residpull.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #109 ;  rf110_normintegration.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #110 ;  rf110_normintegration.py 'BASIC FUNCTIONALITY' RooFit tutorial macro #110 Examples on normalization of p.d.f.s, integration of p.d.fs, construction of cumulative distribution functions from p.d.f.s in one dimension ;  rf111_derivatives.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #111 ;  rf111_derivatives.py 'BASIC FUNCTIONALITY' RooFit tutorial macro #111 Numerical 1st, and 3rd order derivatives w.r.t ;  rf201_composite.C 'ADDITION AND CONVOLUTION' RooFit tutorial macro #201 ;  rf201_composite.py 'ADDITION AND CONVOLUTION' RooFit tutorial macro #201 Composite p.d.f with signal and background component pdf = f_bkg * bkg(x,a0,a1) + (1-fbkg) * (f_sig1 * sig1(x,m,s1 + (1-f_sig1) * sig2(x,m,s2))) ;  rf202_extendedmlfit.C 'ADDITION AND CONVOLUTION' RooFit tutorial macro #202 ;  rf202_extendedmlfit.py 'ADDITION AND CONVOLUTION' RooFit tutorial macro #202 Setting up an extended maximum likelihood fit ;  rf203_ranges.C 'ADDITION AND CONVOLUTION' RooFit tutorial macro #203 ;  rf203_ranges.py 'ADDITION AND CONVOLUTION' RooFit tutorial macro #203 Fitting and plotting in sub ranges ;  rf204_extrangefit.C 'ADDITIO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:149797,integrat,integration,149797,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['integrat'],['integration']
Deployability,"e class index and the index for the current module (a group of classes, often a library). The second line links to the ROOT homepage and the class overviews. The third line links the source information - a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages. Example of function documentation, with automatically generated LaTeX-like graphics. Inheritance tree, showing what the current class derives from, and which classes inherit from it. HTML version of the source file linking all types and most functions. 2 Getting Started; We begin by showing you how to use ROOT interactively. There are two examples to click through and learn how to use the GUI. We continue by using the command line, and explaining the coding conventions, global variables and the environment setup. If you have not installed ROOT, you can do so by following the instructions in the appendix, or on the ROOT web site: http://root.cern.ch/root/Availability.html; 2.1 Setting the Environment Variables; Before you can run ROOT you need to set the environment variable ROOTSYS and change your path to include root/bin and library path variables to include root/lib. Please note: the syntax is for bash, if you are running tcsh you will have to use setenv instead of export. Define the variable $ROOTSYS to the directory where you unpacked the ROOT:. $ export ROOTSYS=$HOME/root. Add ROOTSYS/bin to your PATH:. $ export PATH=$PATH:$ROOTSYS/bin. Setting the Library Path. On HP-UX, before executing the interactive module, you must set the library path:; $ export SHLIB_PATH=$SHLIB_PATH:$ROOTSYS/lib; On AIX, before executing the interactive module, you must set the library path:; $ [ -z ""$LIBPATH"" ] && export LIBPATH=/lib:/usr/lib; $ export LIBPATH=$LIBPATH:$ROOTSYS/lib; On Linux, Solaris, Alpha OSF and SGI, before executing the interactive module, you must set the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:30360,install,installed,30360,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['install'],['installed']
Deployability,"e class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DoRedraw () override;  redraw ;  ; virtual Bool_t ItemLayout ();  ; virtual void UpdateRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  update a part of view ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGView.html:28368,update,update,28368,doc/master/classTGView.html,https://root.cern,https://root.cern/doc/master/classTGView.html,1,['update'],['update']
Deployability,"e class used for serializing objects.Definition TBuffer.h:43; TBuildRealDataDefinition TClass.cxx:751; TBuildRealData::Inspectvoid Inspect(TClass *cl, const char *parent, const char *name, const void *addr, Bool_t isTransient) overrideThis method is called from ShowMembers() via BuildRealdata().Definition TClass.cxx:771; TBuildRealData::fRealDataClassTClass * fRealDataClassDefinition TClass.cxx:755; TBuildRealData::fRealDataObjectvoid * fRealDataObjectDefinition TClass.cxx:754; TBuildRealData::TBuildRealDataTBuildRealData(void *obj, TClass *cl)Definition TClass.cxx:758; TClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized w...Definition TClassGenerator.h:28; TClassGenerator::GetClassvirtual TClass * GetClass(const char *classname, Bool_t load)=0; TClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe.Definition TClassMenuItem.h:31; TClassMenuItem::SetTogglevirtual void SetToggle(Bool_t toggle=kTRUE)Definition TClassMenuItem.h:75; TClassMenuItem::kIsSelf@ kIsSelfDefinition TClassMenuItem.h:37; TClassMenuItem::kPopupStandardList@ kPopupStandardListDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupSeparator@ kPopupSeparatorDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupUserFunction@ kPopupUserFunctionDefinition TClassMenuItem.h:35; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassStreamerDefinition TClassStreamer.h:26; TClassStreamer::Streamvirtual void Stream(TBuffer &b, void *objp, const TClass *onfileClass)Definition TClassStreamer.h:51; TClassStreamer::Generatevirtual TClassStreamer * Generate() constDefinition TClassStreamer.h:38; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTable::GetProtoNormstatic TProtoClass * GetProtoNorm(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:305301,toggle,toggle,305301,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['toggle'],['toggle']
Deployability,"e class used for serializing objects.Definition TBuffer.h:43; TBuildRealDataDefinition TClass.cxx:818; TBuildRealData::Inspectvoid Inspect(TClass *cl, const char *parent, const char *name, const void *addr, Bool_t isTransient) overrideThis method is called from ShowMembers() via BuildRealdata().Definition TClass.cxx:838; TBuildRealData::fRealDataClassTClass * fRealDataClassDefinition TClass.cxx:822; TBuildRealData::fRealDataObjectvoid * fRealDataObjectDefinition TClass.cxx:821; TBuildRealData::TBuildRealDataTBuildRealData(void *obj, TClass *cl)Definition TClass.cxx:825; TClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized w...Definition TClassGenerator.h:28; TClassGenerator::GetClassvirtual TClass * GetClass(const char *classname, Bool_t load)=0; TClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe.Definition TClassMenuItem.h:31; TClassMenuItem::SetTogglevirtual void SetToggle(Bool_t toggle=kTRUE)Definition TClassMenuItem.h:75; TClassMenuItem::kIsSelf@ kIsSelfDefinition TClassMenuItem.h:37; TClassMenuItem::kPopupStandardList@ kPopupStandardListDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupSeparator@ kPopupSeparatorDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupUserFunction@ kPopupUserFunctionDefinition TClassMenuItem.h:35; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassStreamerDefinition TClassStreamer.h:26; TClassStreamer::Streamvirtual void Stream(TBuffer &b, void *objp, const TClass *onfileClass)Definition TClassStreamer.h:51; TClassStreamer::Generatevirtual TClassStreamer * Generate() constDefinition TClassStreamer.h:38; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTable::GetProtoNormstatic TProtoClass * GetProtoNorm(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:307939,toggle,toggle,307939,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['toggle'],['toggle']
Deployability,"e commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exits. Log view; Tig invoked without any argument spawns a full log view with one line per commit including author, date and log message. Heads of the different branches are clearly indicated. To see a graph view indicating branching graphically (just like git log --oneline --graph), do:; tig --all. A log can be selected with Enter to see the revision changes.; An example of useful application of the log view is interactive cherry-picking: just press 'C' to cherry-pick c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:16576,install,installed,16576,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,2,['install'],"['install', 'installed']"
Deployability,e configuration ; : 441 | 695.167 373.877 0.0206789 0.00187467 42543.7 0; : 442 Minimum Test error found - save the configuration ; : 442 | 687.861 370.419 0.0206937 0.00187678 42514.9 0; : 443 Minimum Test error found - save the configuration ; : 443 | 681.656 366.359 0.0201552 0.00181904 43629.7 0; : 444 Minimum Test error found - save the configuration ; : 444 | 674.01 362.924 0.0201329 0.0018218 43689.4 0; : 445 Minimum Test error found - save the configuration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; :,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:61873,configurat,configuration,61873,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18677,configurat,configuration,18677,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90530,configurat,configuration,90530,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Test error found - save the configuration ; : 753 | 17.2492 20.0483 0.0200805 0.00181433 43796.8 0; : 754 Minimum Test error found - save the configuration ; : 754 | 16.8738 20.0271 0.0201173 0.00182078 43724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum Test error found - save the configuration ; : 756 | 16.5214 19.4549 0.0200975 0.00181399 43755.3 0; : 757 | 16.5493 20.0416 0.0200274 0.00175373 43778.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:94312,configurat,configuration,94312,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21460,configurat,configuration,21460,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"e constructor, will wrap it into a ROOT::Math::IParametricGradFunctionMultiDim. Example:; #include ""TF1.h""; #include ""Math/WrappedMultiTF1.h"". int main(); {. TF2 f(""Sin Function"", ""sin(x) + y"",0,3,0,2);. ROOT::Math::WrappedMultiTF1 wf1(f);. double x[] = {1,2};. cout << f(x) << endl;; cout << wf1(x) << endl;. return 0;; }; 13.8 Numerical Integration; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. ROOT::Math::VirtualIntegrator defines the most basic functionality while the specific behaviours for one or multiple dimensions are implemented in ROOT::Math::VirtualIntegratorOneDim and ROOT::Math::VirtualIntegratorMultiDim. These interfaces define the integrator functionality with abstract methods to set the function, to compute the integral or to set the integration tolerance. These methods must be implemented in the concrete classes existing for the different integration algorithms. The user cannot create directly these virtual integrator interfaces. He needs to create the ROOT::Math::IntegratorOneDim class for integrating one-dimensional functions and ROOT::Math::IntegratorMultiDim for multi-dimensional functions. Through the ROOT Plug-In Manager, the user can initialize ROOT::Math::IntegratorOneDim or ROOT::Math::IntegratorMultiDim with any of the concrete integration classes without dealing with them directly. These two classes provide the same interface as in VirtualIntegratorOneDim and VirtualIntegratorMultiDim, but with the possibility to choose in the constructor, which method will be used to perform the integration.; The method to set the function to be integrated, must be of the function interface type described before. ROOT::Math::IBaseFunctionOneDimFunction is used for ROOT::Math::IBaseFunctionMultiDim and The only difference between the ROOT::Math::IntegratorOneDim and ROOT::Math::IntegratorMultiDim resides in the dimensionality of that function and some specific that will be seen afte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:700350,integrat,integrator,700350,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integrator']
Deployability,e contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsAr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:31785,integrat,integration,31785,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,2,['integrat'],['integration']
Deployability,e contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsRea,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedReal.html:32500,integrat,integration,32500,root/html530/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedReal.html,1,['integrat'],['integration']
Deployability,e contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_server,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddition.html:31239,integrat,integration,31239,root/html528/RooAddition.html,https://root.cern,https://root.cern/root/html528/RooAddition.html,1,['integrat'],['integration']
Deployability,e contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_select,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddition.html:31428,integrat,integration,31428,root/html530/RooAddition.html,https://root.cern,https://root.cern/root/html530/RooAddition.html,1,['integrat'],['integration']
Deployability,"e could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the FastCGI interface can run in parallel to http server. One can just call:; serv = new THttpServer(""http:8080"");; serv->CreateEngine(""fastcgi:9000"");; One could specify a debug parameter to be able to adjust the FastCGI configuration on the web server:; serv->CreateEngine(""fastcgi:9000?debug=1"");; By default 10 threads are used to process FastCGI requests. This number can be changed with “thrds” url parameter:; serv->CreateEngine(""fastcgi:9000?thrds=20"");; If thrds=0 parameter specified, the only thread will be use to received and process all requests.; All user access will be ruled by the main web server. Authorized account names could be used to configure access restriction in THttpServer.; 1.7.1 Configure fastcgi with Apache2; Since Apache version 2.4 FastCGI is directly supported - there is no need to compile and install external modules any more. One only need to enable mod_proxy and mod_proxy_fcgi modules and add following line to Apache2 configuration file:; ProxyPass ""/root.app/"" ""fcgi://localhost:9000/"" enablereuse=on; More information can be found in FastCGI proxy docu. After restarting apache server one should be able to open address: http://apache_host_name/root.app/. There are many ways to configure user authentication in Apache. Example of digest auth for FastCGI server:; <Location ""/root.app/"">; AuthType Digest; AuthName ""root""; AuthDigestDomain ""/root.app/"" ""root""; AuthDigestProvider file; AuthUserFile ""/srv/auth/auth.txt""; Require valid-user; </Location>; 1.7.2 Configure fastcgi with lighttpd; An example of configuration file for lighttpd server is:; server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/root.app"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ); Be aware, that with lighttpd one should specify IP address of the host, where ROOT application is running. Address of the ROOT application will be following: http",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:10489,configurat,configuration,10489,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['configurat'],['configuration']
Deployability,"e current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Private Member Functions; double calculate (const RooProdPdf::CacheElem &cache, bool verbose=false) const;  Calculate running product of pdfs terms, using the supplied normalization set in 'normSetList' for each component. ;  ; CacheMode canNodeBeCached () const override;  ; std::unique_ptr< CacheElem > createCacheElem (const RooArgSet *nset, const RooArgSet *iset, const char *isetRangeName=nullptr) const;  ; void doEvalImpl (RooAbsArg const *caller, const RooProdPdf::CacheElem &cache, RooFit::EvalContext &) const;  Evaluate product of PDFs in batch mode. ;  ; double evaluate () const override;  Calculate current value of object. ;  ; void factorizeProduct (const RooArgSet &normSet, const RooArgSet &intSet, RooLinkedList &termList, RooLinkedList &normList, RooLinkedList &impDepList, RooLinkedList &crossDepList, RooLinkedList &intList) const;  Factorize product in irreducible terms for given choice of integration/normalization. ;  ; std::unique_ptr< RooArgSet > fillNormSetForServer (RooArgSet const &normSet, RooAbsArg const &server) const;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return generator context optimized for generating events from product p.d.f.s. ;  ; CacheElem * getCacheElem (RooArgSet const *nset) const;  The cache manager. ;  ; void getParametersHook (const RooArgSet *, RooArgSet *, bool stripDisconnected) const override;  ; Int_t getPartIntList (const RooArgSet *nset, const RooArgSet *iset, const char *isetRangeName=nullptr) const;  Return list of (partial) integrals of product terms for integration of p.d.f over observables iset while normalization over observables nset. ;  ; void groupProductTerms (std::list< std::vector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:63210,integrat,integration,63210,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['integrat'],['integration']
Deployability,"e data and the ModelConfig containing all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..); After configuring the calculator, one only needs to ask GetInterval(), which will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by scanning the posterior function in the given number of points. The first method is in general faster but it requires an integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be less robust.; The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using the GetPosteriorPlot method.; The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of this method).; Calculator estimating a credible interval using the Bayesian procedure. The calculator computes given the model the posterior distribution and estimates the credible interval from the given function. ; Definition at line 37 of file BayesianCalculator.h. Public Member Functions;  BayesianCalculator ();  constructor ;  ;  BayesianCalculator (RooAbsData &data, ModelConfig &model);  Constructor from a data set and a ModelConfig model pdf, poi and nuisances will be taken from the ModelConfig. ;  ;  BayesianCalculator (RooAbsData &data, RooAbsPdf &pdf, const RooArgSet &POI, RooAbsPdf &priorPdf, const RooArgSet *nuisanceParameters=nullptr);  Constructor from data set, model pdf, parameter of interests and prior pdf If nuisance parameters are given they will be integrated according either to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:2555,integrat,integration,2555,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,2,['integrat'],"['integrating', 'integration']"
Deployability,"e defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. Int_t DestroyPhysicals(); Destroy physical shapes. TGLPhysicalShape* FindPhysical(UInt_t phid) const; Find and return physical shape identified by unqiue 'ID'.; Returns 0 if not found. UInt_t GetMaxPhysicalID(); Returns the maximum used physical id.; Returns 0 if empty. Bool_t BeginUpdate(); Put scene in update mode, return true if lock acquired. void EndUpdate(Bool_t minorChange = kTRUE, Bool_t sceneChanged = kTRUE, Bool_t updateViewers = kTRUE); Exit scene update mode. If sceneChanged is true (default), the scene timestamp is; increased and basic draw-lists etc will be rebuild on next draw; request. If you only changed colors or some other visual; parameters that do not affect object bounding-box or; transformation matrix, you can set it to false. If updateViewers is true (default), the viewers using this scene; will be tagged as changed. If sceneChanged is true the; updateViewers should be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:12637,update,updateViewers,12637,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,6,['update'],['updateViewers']
Deployability,e dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:38509,integrat,integration,38509,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['integrat'],['integration']
Deployability,e dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:39162,integrat,integration,39162,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,2,['integrat'],['integration']
Deployability,e dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooObjCacheManager_intCacheMgrManager of cache with integrals; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArg,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:39019,integrat,integration,39019,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['integrat'],['integration']
Deployability,e dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooObjCacheManager_intCacheMgrManager of cache with integrals; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStrin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:39593,integrat,integration,39593,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,3,['integrat'],['integration']
Deployability,"e done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal - minVal)/(double)numBinsData;; 346 ; 347 double sumWeightsSig = 0.0;; 348 double sumWeightsBkg = 0.0;; 349 ; 350 for (size_t b = 0; b < numBinsData; ++b); 351 {; 352 double binData = minVal + b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:12261,update,update,12261,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['update'],['update']
Deployability,"e files in ROOTINCDIR/include instead of ROOTINCDIR; [ROOT-7575] - ROOT 6 can’t compile with python 3.3; [ROOT-7586] - CMS missing symbol / function body of template; [ROOT-7598] - Size shown in dmg installer is wrong; [ROOT-7602] - CMake: Touching core/meta/inc/Linkdef.h, core/base/G__Base.cxx does not get regenerated; [ROOT-7605] - cmake -Dminimal=ON not working; [ROOT-7606] - cmake -Dfail-on-missing=ON -Dmathmore=ON not consistent; [ROOT-7663] - failure to compile master branch on ubuntu 15.04; [ROOT-7683] - Memory leak in ROOT::TSchemaRuleSet reported in ATLAS job; [ROOT-7706] - thisroot.sh not working properly for zsh. Improvements. [ROOT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:31993,install,installation,31993,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['install'],['installation']
Deployability,"e first worker; Int_tfNWorkersNumber of workers; TQueryResultManager*fQMgrQuery-result manager; TStringfQueryDirDirectory containing query results and status; TProofLockPath*fQueryLockQuery dir locker; TStringfSandboxPROOF sandbox root dir; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. ~TProofLite(); Destructor. Int_t GetNumberOfWorkers(const char* url = 0); Static method to determine the number of workers giving priority to users request.; Otherwise",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:25347,configurat,configurations,25347,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['configurat'],['configurations']
Deployability,"e for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,RooMultiVarGaussian::GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiVarGaussian.html:42802,integrat,integration,42802,root/html602/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html602/RooMultiVarGaussian.html,2,['integrat'],['integration']
Deployability,"e for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveDDo we have a denominator term?; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooListProxy_intListMaster integrals representing numerator and denominator; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenProdProj.html:32391,integrat,integrator,32391,root/html526/RooGenProdProj.html,https://root.cern,https://root.cern/root/html526/RooGenProdProj.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionMultiDim*funcFunctor; RooListProxyvarsArgument reference; Double_t*xArgument value array.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFunctorBinding.html:32004,integrat,integrator,32004,root/html526/RooFunctorBinding.html,https://root.cern,https://root.cern/root/html526/RooFunctorBinding.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealProxyc; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__Heaviside.html:32253,integrat,integrator,32253,root/html530/RooStats__Heaviside.html,https://root.cern,https://root.cern/root/html530/RooStats__Heaviside.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e getting rid of special shell characters like ~. ; $, etc. For Unix/Win32 compatibility use instead of $XXX when using environment variables in a pathname. If compatibility is not an issue you can use on Unix directly $XXX. The user must delete returned string. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1285 of file TSystem.cxx. ◆ ExpandPathName() [2/2]. Bool_t TSystem::ExpandPathName ; (; TString & ; path). virtual . Expand a pathname getting rid of special shell characters like ~. ; $, etc. For Unix/Win32 compatibility use instead of $XXX when using environment variables in a pathname. If compatibility is not an issue you can use on Unix directly $XXX. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1274 of file TSystem.cxx. ◆ FindDynamicLibrary(). const char * TSystem::FindDynamicLibrary ; (; TString & ; lib, . Bool_t ; quiet = kFALSE . ). virtual . Find a dynamic library using the system search paths. ; lib will be updated to contain the absolute filename if found. Returns lib if found, or NULL if a library called lib was not found. This function does not open the library. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2034 of file TSystem.cxx. ◆ FindFile(). const char * TSystem::FindFile ; (; const char * ; search, . TString & ; file, . EAccessMode ; mode = kFileExists . ). virtual . Find location of file in a search path. ; Return value points to TString for compatibility with Which(const char *, const char *, EAccessMode). Returns 0 in case file is not found. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1538 of file TSystem.cxx. ◆ FindHelper(). TSystem * TSystem::FindHelper ; (; const char * ; path, . void * ; dirptr = nullptr . ). protected . Create helper TSystem to handle file and directory operations that might be special for remote file access. ; Definition at line 746 of file TSystem.cxx. ◆ FreeDirectory(). void TSystem::FreeDirectory ; (; void * ; dirp). vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:51961,update,updated,51961,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['update'],['updated']
Deployability,"e has a binning with 'name'. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBinning& binning, const char* name = 0); Add given binning under name 'name' with this variable. If name is null; the binning is installed as the default binning. void setMin(const char* name, Double_t value); Set minimum of name range to given value. If name is null; minimum of default range is set. void setMax(const char* name, Double_t value); Set maximum of name range to given value. If name is null; maximum of default range is set. void setRange(const char* name, Double_t min, Double_t max); Set range named 'name to [min,max]. If name is null; range of default range is adjusted. If no range with; 'name' exists it is created on the fly. void setRange(const char* name, RooAbsReal& min, RooAbsReal& max); Create or modify a parameterized range named 'name' that has external functions; min and max parameterizing its boundaries. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. void printValue(ostream& os) const; Print value of variable. void printExtras(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealVar.html:41285,install,installed,41285,root/html528/RooRealVar.html,https://root.cern,https://root.cern/root/html528/RooRealVar.html,3,['install'],['installed']
Deployability,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:33094,integrat,integration,33094,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:13803,integrat,integration,13803,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,12,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:23483,integrat,integration,23483,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,8,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:27328,integrat,integration,27328,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,10,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:28366,integrat,integration,28366,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,32,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,e height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tfNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStatefStatebutton state; Bool_tfStayDowntrue if button has to stay down; UInt_tfStylebutton style (modern or classic); UInt_tfTHeightbutton height; UInt_tfTWidthbutton width; TGToolTip*fTiptool tip associated with button; void*fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tfgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGButton.html:22329,release,released,22329,root/html602/TGButton.html,https://root.cern,https://root.cern/root/html602/TGButton.html,2,['release'],['released']
Deployability,"e histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:43314,integrat,integration,43314,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,4,['integrat'],['integration']
Deployability,"e histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset); Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset); Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. RooAbsArg& pdfObservable(RooAbsArg& histOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedPdf.html:42770,integrat,integration,42770,root/html526/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedPdf.html,1,['integrat'],['integration']
Deployability,"e histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. RooAbsCachedPdf(); Default constructor. Bool_t selfNormalized() const; Declare p.d.f self normalized. RooAbsPdf* getCachePdf(const RooArgSet& nset) const; Return RooHistPdf that represents cache histogram. RooDataHist* getCacheHist(const RooArgSet& nset) const; Return RooDataHist with cached values. Int_t getInterpolationOrder() const; Set interpolation order in RooHistPdf that represent cached histogram. PdfCacheElem* getCache(const RooArgSet* nset, Bool_t recalculate = kTRUE) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Return name of binning to be used for creation of cache histogram. PdfCacheElem* createCache(const RooArgSet* nset) const; Create cache storage element. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:48652,integrat,integration,48652,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,2,['integrat'],['integration']
Deployability,"e important while building universal objects... When user provides a ""set-method"" of name SetXXX this object tries automaticaly find a matching ""get-method"" by lookin for a method with name GetXXX, IsXXX or HasXXX for given object. ; Definition at line 47 of file TToggle.h. Public Member Functions;  TToggle ();  TToggle default constructor. ;  ; TMethodCall * GetGetter () const;  ; virtual Long_t GetOffValue ();  ; virtual Long_t GetOnValue ();  ; TMethodCall * GetSetter () const;  ; virtual Bool_t GetState ();  Returns the state of Toggle according to its current value and fOnValue, returns true if they match. ;  ; virtual Int_t GetValue ();  ; TClass * IsA () const override;  ; virtual Bool_t IsInitialized ();  ; virtual void SetOffValue (Long_t lof);  ; virtual void SetOnValue (Long_t lon);  ; virtual void SetState (Bool_t state);  Sets the value of toggle to fOnValue or fOffValue according to passed argument. ;  ; virtual void SetToggledObject (TObject *obj, TMethod *anymethod);  Initializes it to toggle an object's datamember using this object's method. ;  ; virtual void SetToggledVariable (Int_t &var);  Initializes object for use with a variable - you pass it via reference so it will be modified by Toggle. ;  ; virtual void SetValue (Long_t val);  Sets the value of toggle and modifies its state according to whether the value is equal to fOnValue. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Toggle ();  Toggles the Values and State of this object and connected data! ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggle.html:1873,toggle,toggle,1873,doc/master/classTToggle.html,https://root.cern,https://root.cern/doc/master/classTToggle.html,1,['toggle'],['toggle']
Deployability,"e in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:71913,integrat,integration,71913,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['integrat'],['integration']
Deployability,"e include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will generate an HTML link for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:5737,configurat,configuration,5737,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,2,['configurat'],['configuration']
Deployability,"e input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAddition(). RooAddition(const char* name, const char* title, const RooArgSet& sumSet, Bool_t takeOwnerShip = kFALSE). RooAddition(const char* name, const char* title, const RooArgList& sumSet1, const RooArgList& sumSet2, Bool_t takeOwnerShip = kFALSE). RooAddition(const RooAddition& other, const char* name = 0). ~RooAddition(). Double_t evaluate() const; Calculate and return current value of self. Double_t defaultErrorLevel() const; Return the default error level for MINUIT error analysis; If the addition contains one or more RooNLLVars and; no RooChi2Vars, return the defaultErrorLevel() of; RooNLLVar. If the addition contains one ore more RooChi2Vars; and no RooNLLVars, return the defaultErrorLevel() of; RooChi2Var. If the addition contains neither or both; issue a warning message and return a value of 1. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE). void printMetaArgs(ostream& os) const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& numVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate integral cache. TObject* clone(const char* newname) const; { return new RooAddition(*this, newname); }. const RooArgList& list1() const; { return _set ; }. const RooArgList& list() const; { return _set ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. » Last changed: Mon Jul 4 15:21:37 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddition.html:34986,integrat,integration,34986,root/html530/RooAddition.html,https://root.cern,https://root.cern/root/html530/RooAddition.html,1,['integrat'],['integration']
Deployability,"e integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration of all dependents. However, PDFs can advertise one or more (partial) analytical integrals of their function, and these will be used by RooRealIntegral, if it determines that this is safe (i.e., no hidden Jacobian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; should return the analytical integrals that are supported. integSet is the set of dependent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:2408,integrat,integration,2408,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['integrat'],['integration']
Deployability,"e integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:42635,configurat,configuration,42635,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and semi-infinite ranges, the type used is always; 83ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; 84 ; 85The ADAPTIVESINGULAR type is the most sophisticated type. When performances are; 86important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; 87 ADAPTIVE with a lower Gauss-Kronrod rule.; 88 ; 89For detailed description on GSL integration algorithms see the; 90<A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:3391,integrat,integration,3391,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['integrat'],['integration']
Deployability,"e integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14538,integrat,integration,14538,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"e integration region is divided into subintervals, and on each iteration the subinterval with the largest estimated error is bisected. It is possible to specify the integration rule as an extra enumeration parameter. The possible rules are * Integration::kGAUSS15 : 15 points Gauss-Konrod rule (value = 1) * Integration::kGAUSS21 : 21 points Gauss-Konrod rule (value = 2) * Integration::kGAUSS31 : 31 points Gauss-Konrod rule (value = 3) * Integration::kGAUSS41 : 41 points Gauss-Konrod rule (value = 4) * Integration::kGAUSS51 : 51 points Gauss-Konrod rule (value = 5) * Integration::kGAUSS61 : 61 points Gauss-Konrod rule (value = 6) The higher-order rules give better accuracy for smooth functions, while lower-order rules save time when the function contains local difficulties, such as discontinuities. If no integration rule is passed, the 31 points rule is used as default. ROOT::Math::Integration::kADAPTIVESINGULAR: based on gsl_integration_qags. It is an integration type which can be used in the case of the presence of singularities.It uses the Gauss-Kronrod 21-point integration rule. This is the default algorithm. Note that when using the common ROOT::Math::IntegratorOneDIm class the enumeration type defining the algorithm must be defined in the namespace ROOT::Math::IntegrationOneDim (to distinguish from the multi-dimensional case) and the rule enumeration (or its corresponding integer) can be passed in the constructor of the ROOT::Math::IntegratorOneDIm.; 13.8.3 Multi-dimensional Integration; The multi-dimensional integration algorithm should be applied to functions with dimension larger than one. Adaptive multi-dimensional integration works for low function dimension, while MC integration can be applied to higher dimensions.; 13.8.3.1 Using ROOT::Math::IntegratorMultiDim; Here is a code example on how to use the ROOT::Math::IntegratorOneDim class (note that the class is defined in the header file Math/Integrator.h). In this example we create different instance of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:708701,integrat,integration,708701,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integration']
Deployability,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:80157,integrat,integration,80157,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['integrat'],['integration']
Deployability,"e limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return lower limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: ParameterSettings.h 25486 2008-09-22 12:43:03Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__ParameterSettings.html:3968,release,release,3968,root/html526/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"e limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return lower limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: ParameterSettings.h 25486 2008-09-22 12:43:03Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__ParameterSettings.html:4111,release,release,4111,root/html528/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"e limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: ParameterSettings.h 37706 2011-01-05 08:54:28Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__ParameterSettings.html:4113,release,release,4113,root/html530/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"e limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: ParameterSettings.h 37706 2011-01-05 08:54:28Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__ParameterSettings.html:4113,release,release,4113,root/html532/ROOT__Fit__ParameterSettings.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__ParameterSettings.html,1,['release'],['release']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Mon Dec 7 13:45:53 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveIntegratorND.html:7716,integrat,integration,7716,root/html526/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Mon Jul 4 15:21:34 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveIntegratorND.html:7771,integrat,integration,7771,root/html530/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Sat Oct 9 06:58:01 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAdaptiveIntegratorND.html:7702,integrat,integration,7702,root/html528/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html528/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Thu Nov 3 20:06:53 2011 » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAdaptiveIntegratorND.html:7771,integrat,integration,7771,root/html532/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html532/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Tue Jun 2 15:27:39 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAdaptiveIntegratorND.html:8270,integrat,integration,8270,root/html604/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html604/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Tue Jun 30 14:30:41 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveIntegratorND.html:8270,integrat,integration,8270,root/html602/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor with given function and configuration. Needed by RooNumIntFactory. ~RooAdaptiveIntegratorND(); Destructor. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Double_t integral(const Double_t* yvec = 0); Evaluate integral at given function binding parameter values. RooAdaptiveIntegratorND(); Constructors, assignment etc. Bool_t canIntegrate1D() const; { return kFALSE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. » Last changed: Tue Mar 10 17:14:18 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAdaptiveIntegratorND.html:7790,integrat,integration,7790,root/html534/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html534/RooAdaptiveIntegratorND.html,1,['integrat'],['integration']
Deployability,"e list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TFile.; Definition at line 248 of file TSQLFile.h. ◆ WriteBuffer(). Bool_t TSQLFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). inlinefinalvirtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 247 of file TSQLFile.h. ◆ WriteFree(). void TSQLFile::WriteFree ; (; ). inlinefinalvirtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented from TFile.; Definition at line 250 of file TSQLFile.h. ◆ WriteHeader(). void TSQLFile::WriteHeader ; (; ). finalvirtual . Write file info like configurations, title, UUID and other. ; Reimplemented from TFile.; Definition at line 782 of file TSQLFile.cxx. ◆ WriteKeyData(). Bool_t TSQLFile::WriteKeyData ; (; TKeySQL * ; key). protected . Add entry into keys table. ; Definition at line 1691 of file TSQLFile.cxx. ◆ WriteSpecialObject(). Bool_t TSQLFile::WriteSpecialObject ; (; Long64_t ; keyid, . TObject * ; obj, . const char * ; name, . const char * ; title . ). protected . write special kind of object like streamer infos or file itself keys for that objects should exist in tables but not indicated in list of keys, therefore users can not get them with TDirectoryFile::Get() method ; Definition at line 829 of file TSQLFile.cxx. ◆ WriteStreamerInfo(). void TSQLFile::WriteStreamerInfo ; (; ). finalvirtual . Store all TVirtualStreamerInfo, used in file, in sql database. ; Reimplemented from TFile.; Definition at line 790 of file TSQLFile.cxx. Friends And Related Symbol Documentation. ◆ TBufferSQL2. friend class TBufferSQL2. friend . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:102194,configurat,configurations,102194,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['configurat'],['configurations']
Deployability,"e making this operation.; This is particularly important if you fit the histogram after TH1::Divide. Please note also that in the binomial case errors are calculated using standard; binomial statistics, which means when b1 = b2, the error is zero.; If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; error for the case b1=b2. void Draw(Option_t* option = """"); -*-*-*-*-*-*-*-*-*Draw this histogram with options*-*-*-*-*-*-*-*-*-*-*-*. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in different pads.; When an histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If an histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of an histogram in a pad, one can use; h->DrawCopy();; This makes a clone of the histogram. Once the clone is drawn, the original; histogram may be modified or deleted without affecting the aspect of the; clone.; By default, TH1::Draw clears the current pad. One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; value for the maximum or the minimum scale on the plot. TH1::UseCurrentStyle can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle();. See THistPainter::Paint for a description of all the drawing options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:60074,update,updated,60074,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['update'],['updated']
Deployability,e manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfIter! Iterator of PDF list; RooListProxy_pdfListList of PDF components; RooLinkedList_pdfNSetListList of PDF component normalization sets; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompCo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:40215,integrat,integrated,40215,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['integrat'],['integrated']
Deployability,e manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfIter! Iterator of PDF list; RooListProxy_pdfListList of PDF components; RooLinkedList_pdfNSetListList of PDF component normalization sets; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooA,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:41415,integrat,integrated,41415,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['integrat'],['integrated']
Deployability,"e manager. void RandomPoints(Int_t npoints = 1000000, Option_t* option = """"); Draw random points in the bounding box of this volume. void RandomRays(Int_t nrays = 10000, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0, const char* target_vol = 0, Bool_t check_norm = kFALSE); Random raytracing method. void Raytrace(Bool_t flag = kTRUE); Draw this volume with current settings and perform raytracing in the pad. void SaveAs(const char* filename, Option_t* option = """") const; Save geometry having this as top volume as a C++ macro. void SetUserExtension(TGeoExtension* ext); Connect user-defined extension to the volume. The volume ""grabs"" a copy, so; the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for user extensions and is guaranteed not; to be used by TGeo. void SetFWExtension(TGeoExtension* ext); Connect framework defined extension to the volume. The volume ""grabs"" a copy,; so the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for the use by TGeo and the users should; NOT connect extensions using this method. TGeoExtension * GrabUserExtension() const; Get a copy of the user extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). TGeoExtension * GrabFWExtension() const; Get a copy of the framework extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void UnmarkSaved(); Reset SavePrimitive bits. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this volume. TGeoNode * FindNode(const char* name) const; search a daughter inside the list of nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:38961,release,released,38961,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['release'],['released']
Deployability,"e manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; RooRealProxy_t; RooRealProxy_tau; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; RooDecay::DecayType_type; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDecay.html:44079,configurat,configuration,44079,root/html534/RooDecay.html,https://root.cern,https://root.cern/root/html534/RooDecay.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxybeta; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxygamma; RooRealProxymu; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGamma.html:38614,configurat,configuration,38614,root/html528/RooGamma.html,https://root.cern,https://root.cern/root/html528/RooGamma.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e module's classes.; A filename starting with ""index."" will be included in the index page; all other files will be linked. Only files ending on .html or .txt will be taken into account; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Sear",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:15904,install,install,15904,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,2,['install'],['install']
Deployability,"e names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 275 of file rootqt5.cpp. ◆ Resize(). bool ROOT::RQt5WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 267 of file rootqt5.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt5WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 95 of file rootqt5.cpp. gui/qt5webdisplay/rootqt5.cpp. ROOTRQt5WebDisplayHandle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:4888,release,release,4888,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html,1,['release'],['release']
Deployability,"e names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 234 of file rootqt6.cpp. ◆ Resize(). bool ROOT::RQt6WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 226 of file rootqt6.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt6WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 71 of file rootqt6.cpp. gui/qt6webdisplay/rootqt6.cpp. ROOTRQt6WebDisplayHandle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:4888,release,release,4888,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html,1,['release'],['release']
Deployability,"e object this Toggle belongs to; TMethodCall*fSetterMethod to Set a value of fObject;; Int_t*fTglVariableAlternatively: pointer to an integer value to be Toggled instead of TObjectl; TStringTNamed::fTitleobject title. private:. Long_tfOffValueValue recognized as switched OFF(Def=0); Long_tfOnValueValue recognized as switched ON (Def=1); Bool_tfStateObject's state - ""a local copy""; Long_tfValueLocal copy of a value returned by called function. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggle(); TToggle default constructor. You have to initialize it before using; by making a call to SetToggledVariable() or SetToggledObject(). void SetToggledVariable(Int_t& var); Initializes object for use with a variable - you pass it via reference; so it will be modified by Toggle. Bool_t GetState(); Returns the state of Toggle according to its current value and; fOnValue, returns true if they match. void SetState(Bool_t state); Sets the value of toggle to fOnValue or fOffValue according to passed; argument. void SetValue(Long_t val); Sets the value of toggle and modifies its state according to whether; the value is equal to fOnValue. void Toggle(); Toggles the Values and State of this object and connected data!. void SetToggledObject(TObject* obj, TMethod* anymethod); Initializes it to toggle an object's datamember using this object's; method. TToggle(). Bool_t IsInitialized(); {return fInitialized;}. void SetOnValue(Long_t lon); {fOnValue=lon;}. Long_t GetOnValue(); {return fOnValue;}. void SetOffValue(Long_t lof); {fOffValue=lof;}. Long_t GetOffValue(); {return fOffValue;}. Int_t GetValue(); {return fValue;}. TMethodCall * GetGetter() const; { return fGetter; }. TMethodCall * GetSetter() const; { return fSetter; }. » Author: Piotr Golonka 30/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TToggle.html:7810,toggle,toggle,7810,root/html534/TToggle.html,https://root.cern,https://root.cern/root/html534/TToggle.html,1,['toggle'],['toggle']
Deployability,"e object this Toggle belongs to; TMethodCall*fSetterMethod to Set a value of fObject;; Int_t*fTglVariableAlternatively: pointer to an integer value to be Toggled instead of TObjectl; TStringTNamed::fTitleobject title. private:. Long_tfOffValueValue recognized as switched OFF(Def=0); Long_tfOnValueValue recognized as switched ON (Def=1); Bool_tfStateObject's state - ""a local copy""; Long_tfValueLocal copy of a value returned by called function. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggle(); TToggle default constructor. You have to initialize it before using; by making a call to SetToggledVariable() or SetToggledObject(). void SetToggledVariable(Int_t& var); Initializes object for use with a variable - you pass it via reference; so it will be modified by Toggle. Bool_t GetState(); Returns the state of Toggle according to its current value and; fOnValue, returns true if they match. void SetState(Bool_t state); Sets the value of toggle to fOnValue or fOffValue according to passed; argument. void SetValue(Long_t val); Sets the value of toggle and modifies its state according to whether; the value is equal to fOnValue. void Toggle(); Toggles the Values and State of this object and connected data!. void SetToggledObject(TObject* obj, TMethod* anymethod); Initializes it to toggle an object's datamember using this object's; method. TToggle(). Bool_t IsInitialized(); {return fInitialized;}. void SetOnValue(Long_t lon); {fOnValue=lon;}. Long_t GetOnValue(); {return fOnValue;}. void SetOffValue(Long_t lof); {fOffValue=lof;}. Long_t GetOffValue(); {return fOffValue;}. Int_t GetValue(); {return fValue;}. TMethodCall * GetGetter() const; { return fGetter; }. TMethodCall * GetSetter() const; { return fSetter; }. » Author: Piotr Golonka 30/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggle.h 28005 2009-03-31 13:12:24Z brun $ » Last generated: 2010-09-23 20:21; This page has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TToggle.html:7722,toggle,toggle,7722,root/html528/TToggle.html,https://root.cern,https://root.cern/root/html528/TToggle.html,1,['toggle'],['toggle']
Deployability,"e object this Toggle belongs to; TMethodCall*fSetterMethod to Set a value of fObject;; Int_t*fTglVariableAlternatively: pointer to an integer value to be Toggled instead of TObjectl; TStringTNamed::fTitleobject title. private:. Long_tfOffValueValue recognized as switched OFF(Def=0); Long_tfOnValueValue recognized as switched ON (Def=1); Bool_tfStateObject's state - ""a local copy""; Long_tfValueLocal copy of a value returned by called function. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggle(); TToggle default constructor. You have to initialize it before using; by making a call to SetToggledVariable() or SetToggledObject(). void SetToggledVariable(Int_t& var); Initializes object for use with a variable - you pass it via reference; so it will be modified by Toggle. Bool_t GetState(); Returns the state of Toggle according to its current value and; fOnValue, returns true if they match. void SetState(Bool_t state); Sets the value of toggle to fOnValue or fOffValue according to passed; argument. void SetValue(Long_t val); Sets the value of toggle and modifies its state according to whether; the value is equal to fOnValue. void Toggle(); Toggles the Values and State of this object and connected data!. void SetToggledObject(TObject* obj, TMethod* anymethod); Initializes it to toggle an object's datamember using this object's; method. TToggle(). Bool_t IsInitialized(); {return fInitialized;}. void SetOnValue(Long_t lon); {fOnValue=lon;}. Long_t GetOnValue(); {return fOnValue;}. void SetOffValue(Long_t lof); {fOffValue=lof;}. Long_t GetOffValue(); {return fOffValue;}. Int_t GetValue(); {return fValue;}. TMethodCall * GetGetter() const; { return fGetter; }. TMethodCall * GetSetter() const; { return fSetter; }. » Author: Piotr Golonka 30/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggle.h 28005 2009-03-31 13:12:24Z brun $ » Last generated: 2011-07-04 15:38; This page has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TToggle.html:7791,toggle,toggle,7791,root/html530/TToggle.html,https://root.cern,https://root.cern/root/html530/TToggle.html,1,['toggle'],['toggle']
Deployability,"e object this Toggle belongs to; TMethodCall*fSetterMethod to Set a value of fObject;; Int_t*fTglVariableAlternatively: pointer to an integer value to be Toggled instead of TObjectl; TStringTNamed::fTitleobject title. private:. Long_tfOffValueValue recognized as switched OFF(Def=0); Long_tfOnValueValue recognized as switched ON (Def=1); Bool_tfStateObject's state - ""a local copy""; Long_tfValueLocal copy of a value returned by called function. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggle(); TToggle default constructor. You have to initialize it before using; by making a call to SetToggledVariable() or SetToggledObject(). void SetToggledVariable(Int_t& var); Initializes object for use with a variable - you pass it via reference; so it will be modified by Toggle. Bool_t GetState(); Returns the state of Toggle according to its current value and; fOnValue, returns true if they match. void SetState(Bool_t state); Sets the value of toggle to fOnValue or fOffValue according to passed; argument. void SetValue(Long_t val); Sets the value of toggle and modifies its state according to whether; the value is equal to fOnValue. void Toggle(); Toggles the Values and State of this object and connected data!. void SetToggledObject(TObject* obj, TMethod* anymethod); Initializes it to toggle an object's datamember using this object's; method. TToggle(). Bool_t IsInitialized(); {return fInitialized;}. void SetOnValue(Long_t lon); {fOnValue=lon;}. Long_t GetOnValue(); {return fOnValue;}. void SetOffValue(Long_t lof); {fOffValue=lof;}. Long_t GetOffValue(); {return fOffValue;}. Int_t GetValue(); {return fValue;}. TMethodCall * GetGetter() const; { return fGetter; }. TMethodCall * GetSetter() const; { return fSetter; }. » Author: Piotr Golonka 30/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggle.h 28005 2009-03-31 13:12:24Z brun $ » Last generated: 2011-11-03 20:23; This page has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TToggle.html:7791,toggle,toggle,7791,root/html532/TToggle.html,https://root.cern,https://root.cern/root/html532/TToggle.html,1,['toggle'],['toggle']
Deployability,"e of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char * type, int rule, double absTol, double relTol, size_t size ); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const IGenFunction &f, bool copyFunc = false); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction( GSLFuncPointer f, void * p = 0). Set function from a GSL pointer function type. double Integral(const IGenFunction & f, double a, double b); methods using IGenFunction. evalu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:5775,integrat,integration,5775,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['integrat'],['integration']
Deployability,"e of configuration file for lighttpd server is:; server.modules += ( ""mod_fastcgi"" ); fastcgi.server = (; ""/root.app"" =>; (( ""host"" => ""192.168.1.11"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ); Be aware, that with lighttpd one should specify IP address of the host, where ROOT application is running. Address of the ROOT application will be following: http://lighttpd_host_name/root.app/. Example of authorization configuration for FastCGI connection:; auth.require = ( ""/root.app"" => (; ""method"" => ""digest"",; ""realm"" => ""root"",; ""require"" => ""valid-user""; ) ); 1.8 Integration with existing applications; In many practical cases no change of existing code is required. Opened files (and all objects inside), existing canvas and histograms are automatically scanned by the server and will be available to the users. If necessary, any object can be registered directly to the server with a THttpServer::Register() call.; Central point of integration - when and how THttpServer get access to data from a running application. By default it is done during the gSystem->ProcessEvents() call - THttpServer uses a synchronous timer which is activated every 100 ms. Such approach works perfectly when running macros in an interactive ROOT session.; If an application runs in compiled code and does not contain gSystem->ProcessEvents() calls, two method are available.; 1.8.1 Asynchronous timer; The first method is to configure an asynchronous timer for the server, like for example:; serv->SetTimer(100, kFALSE);; Then, the timer will be activated even without any gSystem->ProcessEvents() method call. The main advantage of such method is that the application code can be used without any modifications. But there is no control when access to the application data is performed. It could happen just in-between of TH1::Fill() calls and an histogram object may be incomplete. Therefore such method is not recommended.; 1.8.2 Regular calls of THttpServer::ProcessRequests() metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:12042,integrat,integration,12042,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['integrat'],['integration']
Deployability,e of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_t_errorCountNumber of errors remaining to print; static Bool_t_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_t_negCountNumber of negative probablities remaining to print; RooAbsReal*_norm! Normalization integral (owned by _normMgr); RooObjCacheManager_normMgrThe cache manager; RooArgSet*_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:39688,integrat,integration,39688,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['integrat'],['integration']
Deployability,e of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_t_errorCountNumber of errors remaining to print; static Bool_t_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_t_negCountNumber of negative probablities remaining to print; RooAbsReal*_norm! Normalization integral (owned by _normMgr); RooObjCacheManager_normMgrThe cache manager; TString_normRangeNormalization range; static TString_normRangeOverride; RooArgSet*_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsRea,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:40229,integrat,integration,40229,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['integrat'],['integration']
Deployability,"e or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TGLScene;  TGLScene ();  ;  ~TGLScene () override;  Destroy scene objects. ;  ; virtual void AdoptLogical (TGLLogicalShape &shape);  Adopt dynamically created logical 'shape' - add to internal map and take responsibility for deleting. ;  ; virtual void AdoptPhysical (TGLPhysicalShape &shape);  Adopt dynamically created physical 'shape' - add to internal map and take responsibility for deleting. ;  ; UInt_t BeginSmartRefresh ();  Moves logicals that support smart-refresh to intermediate cache. ;  ; virtual Bool_t BeginUpdate ();  Put scene in update mode, return true if lock acquired. ;  ; void CalcBoundingBox () const override;  Encapsulates all physical shapes bounding box with axes aligned box. ;  ; TSceneInfo * CreateSceneInfo (TGLViewerBase *view) override;  Create a scene-info instance appropriate for this scene class. ;  ; virtual Bool_t DestroyLogical (TObject *logid, Bool_t mustFind=kTRUE);  Destroy logical shape defined by unique 'ID'. ;  ; virtual Int_t DestroyLogicals ();  Destroy all logical shapes in scene. ;  ; virtual Bool_t DestroyPhysical (UInt_t phid);  Destroy physical shape defined by unique 'ID'. ;  ; virtual Int_t DestroyPhysicals ();  Destroy physical shapes. ;  ; void DumpMapSizes () const;  Print sizes of logical and physical-shape maps. ;  ; void EndSmartRefresh ();  Wipes logicals in refresh-cache. ;  ; virtual void EndUpdate (Bool_t minorChange=kTRUE, Bool_t sceneChanged=kTRUE, Bool_t updateViewers=kTRUE);  Exit scene update mode. ;  ; TGLLogicalShape * FindLogical (TObject *logid) const ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:11524,update,update,11524,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['update'],['update']
Deployability,"e parameter settingsDefinition FitConfig.h:265; ROOT::Fit::FitConfig::MinimizerNamestd::string MinimizerName() constreturn Minimizer full name (type / algorithm)Definition FitConfig.cxx:239; ROOT::Fit::FitConfig::UseWeightCorrectionbool UseWeightCorrection() constApply Weight correction for error matrix computation.Definition FitConfig.h:214; ROOT::Fit::FitConfig::ParamsSettingsconst std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings() constget the vector of parameter settings (const method)Definition FitConfig.h:86; ROOT::Fit::FitConfig::fParabErrorsbool fParabErrorsget correct parabolic errors estimate (call Hesse after minimizing)Definition FitConfig.h:260; ROOT::Fit::FitConfig::fMinimizerOptsROOT::Math::MinimizerOptions fMinimizerOptsminimizer control parameters including name and algo typeDefinition FitConfig.h:268; ROOT::Fit::FitConfig::~FitConfig~FitConfig()Destructor.Definition FitConfig.cxx:52; ROOT::Fit::FitConfig::CreateMinimizerROOT::Math::Minimizer * CreateMinimizer()create a new minimizer according to chosen configurationDefinition FitConfig.cxx:173; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::fMinosErrorsbool fMinosErrorsdo full error analysis using MinosDefinition FitConfig.h:261; ROOT::Fit::FitConfig::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)static function to control default minimizer type and algorithmDefinition FitConfig.cxx:252; ROOT::Fit::FitConfig::SetFromFitResultvoid SetFromFitResult(const FitResult &rhs)Definition FitConfig.cxx:80; ROOT::Fit::FitConfig::CreateParamsSettingsvoid CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl< T > &func)set the parameter settings from a model function.Definition FitConfig.h:109; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::fWei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8h_source.html:14149,configurat,configurationDefinition,14149,doc/master/FitConfig_8h_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html,1,['configurat'],['configurationDefinition']
Deployability,"e per specified number of events during the event-loop, on ""partial"" versions of the result objects; // contained in the `TResultProxy`. In this case, the partial result is going to be a histogram filled with an; // increasing number of events.; // Instead of requesting the callback to be executed every N entries, this time we use the special value `kOnce` to; // request that it is executed once right before starting the event-loop.; // The callback is a C++11 lambda that registers the partial result object in `dfDirectory`.; h.OnPartialResult(h.kOnce, [dfDirectory](TH1D &h_) { dfDirectory->Add(&h_); });; // Note that we called `OnPartialResult` with a dot, `.`, since this is a method of `TResultProxy` itself.; // We do not want to call `OnPartialResult` on the pointee histogram!); ; // Multiple callbacks can be registered on the same `TResultProxy` (they are executed one after the other in the; // same order as they were registered). We now request that the partial result is drawn and the TBrowser's TPad is; // updated every 50 events.; h.OnPartialResult(50, [&browserPad](TH1D &hist) {; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; hist.Draw();; browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callbac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:3745,update,updated,3745,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['update'],['updated']
Deployability,"e physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:44114,integrat,integration,44114,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,14,['integrat'],['integration']
Deployability,"e point is outside. ; Reimplemented from TObject.; Definition at line 133 of file TEllipse.cxx. ◆ Draw(). void TEllipse::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this ellipse with its current attributes. ; Reimplemented from TObject.; Definition at line 169 of file TEllipse.cxx. ◆ DrawEllipse(). TEllipse * TEllipse::DrawEllipse ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; r1, . Double_t ; r2, . Double_t ; phimin, . Double_t ; phimax, . Double_t ; theta, . Option_t * ; option = """" . ). virtual . Draw this ellipse with new coordinates. ; Definition at line 177 of file TEllipse.cxx. ◆ ExecuteEvent(). void TEllipse::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a line is clicked with the locator; If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released.; NOTE that support for log scale is not implemented ; Reimplemented from TObject.; Definition at line 201 of file TEllipse.cxx. ◆ GetBBox(). Rectangle_t TEllipse::GetBBox ; (; ). overridevirtual . Return the bounding Box of the Ellipse, currently not taking into account the rotating angle. ; Implements TAttBBox2D.; Definition at line 698 of file TEllipse.cxx. ◆ GetBBoxCenter(). TPoint TEllipse::GetBBoxCenter ; (; ). overridevirtual . Return the center of the Ellipse as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 713 of file TEllipse.cxx. ◆ GetNoEdges(). Bool_t TEllipse::GetNoEdges ; (; ); const. Return kTRUE if kNoEdges bit is set, kFALSE otherwise. ; Definition at line 646 of file TEllipse.cxx. ◆ GetPhimax(). Double_t TEllipse::GetPhimax ; (; ); const. inline . Definition at line 54 of file TEllipse.h. ◆ GetPhimin(). Double_t TEllipse::GetPhimin ; (; ); const. inline . Definition at line 53 of file TEllipse.h. ◆ GetR1(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEllipse.html:21382,release,released,21382,doc/master/classTEllipse.html,https://root.cern,https://root.cern/doc/master/classTEllipse.html,1,['release'],['released']
Deployability,"e precision; Double_t_epsRelRelative precision; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_maxSegMaximum number of segments; Int_t_methodKeyGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html:8646,configurat,configuration,8646,root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,3,['configurat'],['configuration']
Deployability,"e response function is generated according to given sigma and deconvolution is carried out.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - background in both dimensions) and their crossings; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. References:; [1] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2] M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2.html:35658,continuous,continuous,35658,doc/master/classTSpectrum2.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html,1,['continuous'],['continuous']
Deployability,"e step)=0set a new free variable; ROOT::Math::Minimizer::FixVariablevirtual bool FixVariable(unsigned int ivar)fix an existing variableDefinition Minimizer.cxx:87; ROOT::Math::Minimizer::SetFixedVariablevirtual bool SetFixedVariable(unsigned int ivar, const std::string &name, double val)set a new fixed variable (override if minimizer supports them )Definition Minimizer.cxx:44; ROOT::Math::Minimizer::GetMinosErrorvirtual bool GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option=0)minos error for variable i, return false if Minos failed or not supported and the lower and upper err...Definition Minimizer.cxx:172; ROOT::Math::Minimizer::SetVariableLowerLimitvirtual bool SetVariableLowerLimit(unsigned int ivar, double lower)set the lower-limit of an already existing variableDefinition Minimizer.cxx:70; ROOT::Math::Minimizer::IsFixedVariablevirtual bool IsFixedVariable(unsigned int ivar) constquery if an existing variable is fixed (i.e.Definition Minimizer.cxx:102; ROOT::Math::Minimizer::ReleaseVariablevirtual bool ReleaseVariable(unsigned int ivar)release an existing variableDefinition Minimizer.cxx:94; ROOT::Math::Minimizer::Hessevirtual bool Hesse()perform a full calculation of the Hessian matrix for error calculationDefinition Minimizer.cxx:185; ROOT::Math::Minimizer::Contourvirtual bool Contour(unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj)find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The c...Definition Minimizer.cxx:211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:13492,release,release,13492,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['release'],['release']
Deployability,"e string API:; 108 ```; 109 Tunuran unr;; 110 unr.Init(""normal(3.,0.75); domain = (0,inf)"", ""method = tdr; c = 0"");; 111 ```; 112 */; 113 bool Init(const std::string & distr, const std::string & method);; 114 ; 115 ; 116 /**; 117 Initialize method for continuous one-dimensional distribution.; 118 User must provide a distribution object (which is copied inside) and a string for a method.; 119 For the list of available method for 1D cont. distribution see the; 120 <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fCONT"">UnuRan doc</A>.; 121 A re-initialization is needed whenever distribution parameters have been changed.; 122 Note that the method string can contain in addition to the method name all the specific method; 123 parameters specified using the UNURAN method string API.; 124 For example a valid string can be `""method=arou; max_segments=1000; max_sqhratio = 0.9""`; 125 */; 126 bool Init(const TUnuranContDist & distr, const std::string & method = ""auto"");; 127 ; 128 /**; 129 Initialize method for continuous multi-dimensional distribution.; 130 User must provide a distribution object (which is copied inside) and a string for a method.; 131 For the list of available method for multivariate cont. distribution see the; 132 <A href=""http://statmath.wu-wien.ac.at/unuran/doc/unuran.html#Methods_005ffor_005fCVEC"">UnuRan doc</A>; 133 A re-initialization is needed whenever distribution parameters have been changed.; 134 ; 135 The default method used for multi-dimensional distributions is ""vnrou""; 136 Note that some of the multi-dimensional continuous distribution methods like ""hitro"" are based on Markov-CHain sampler and; 137 they are much faster for sampling but require more time to converge. Furthermore, since they are Markov-Chain methods their; 138 generated sample values are correlated and cannot be used as i.i.d., one can instead use the obtained sample distribution.; 139 (see also the ROOT issue: #10222 ).; 140 ; 141 */; 142 bool Ini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8h_source.html:4591,continuous,continuous,4591,doc/master/TUnuran_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8h_source.html,1,['continuous'],['continuous']
Deployability,"e taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:28623,update,update,28623,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['update'],['update']
Deployability,e the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13891,configurat,configuration,13891,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14003,configurat,configuration,14003,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14115,configurat,configuration,14115,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14227,configurat,configuration,14227,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14339,configurat,configuration,14339,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14894,configurat,configuration,14894,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15006,configurat,configuration,15006,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15118,configurat,configuration,15118,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.29682 0.292587 0.0806285 0.00686869 43384.1 1; : ; : Elapsed time for training with 4000 events: 1.62 sec ; : Datas,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:16066,configurat,configuration,16066,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15452,configurat,configuration,15452,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56092,configurat,configuration,56092,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17009,configurat,configuration,17009,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17121,configurat,configuration,17121,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20680,configurat,configuration,20680,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20792,configurat,configuration,20792,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20904,configurat,configuration,20904,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22351,configurat,configuration,22351,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,e the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22463,configurat,configuration,22463,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['configurat'],['configuration']
Deployability,"e the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Member Functions;  TProofLite (const TProofLite &);  ; Int_t CleanupSandbox ();  Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ;  ; Int_t CreateSandbox ();  Create the sandbox for this session. ;  ; void FindUniqueSlaves () override;  Add to the fUniqueSlave list the active slaves that have a unique (user) file system image. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:38971,update,update,38971,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['update'],['update']
Deployability,"e the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/empty.md if this is not a patch release; git commit README/ReleaseNotes/vXXX/index.md. Update to the next development version. edit build/version_number (odd patch number); make version, check in. Push to github. $ git push origin vX-YY-00-patches; $ git push origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded: this works for authenticated users only!).; Eventually edit the 'highlights' section, which is currently commented, in the generated release page.; If this applies, mark the release as Pro or Old and remove the attribute to the one previously holding it. There are radio buttons ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:3214,patch,patch,3214,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['patch'],['patch']
Deployability,"e timeout = -1.0;; 12451 int enable_ping_pong = 0;; 12452 int ping_count = 0;; 12453 ; 12454 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12455 enable_ping_pong =; 12456 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12457 ""yes"");; 12458 }; 12459 ; 12460 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12461 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12462 }; 12463 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12464 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12465 }; 12466 if (timeout <= 0.0) {; 12467 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12468 }; 12469 ; 12470 /* Enter data processing loop */; 12471 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12472 conn->request_info.remote_addr,; 12473 conn->request_info.remote_port);; 12474 conn->in_websocket_handling = 1;; 12475 mg_set_thread_name(""wsock"");; 12476 ; 12477 /* Loop continuously, reading messages from the socket, invoking the; 12478 * callback, and waiting repeatedly until an error occurs. */; 12479 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12480 && (!conn->must_close)) {; 12481 header_len = 0;; 12482 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12483 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12484 len = buf[1] & 127;; 12485 mask_len = (buf[1] & 128) ? 4 : 0;; 12486 if ((len < 126) && (body_len >= mask_len)) {; 12487 /* inline 7-bit length field */; 12488 data_len = len;; 12489 header_len = 2 + mask_len;; 12490 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12491 /* 16-bit length field */; 12492 header_len = 4 + mask_len;; 12493 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12494 } else if (body_len >= (10 + mask_len)) {; 12495 /* 64-bit length field */; 12496 uint32_t l1, l2;; 12497 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12498 memcpy(&l2, &buf[6], 4);; 12499 header_len = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:361958,continuous,continuously,361958,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['continuous'],['continuously']
Deployability,"e timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12469 }; 12470 ; 12471 /* Enter data processing loop */; 12472 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12473 conn->request_info.remote_addr,; 12474 conn->request_info.remote_port);; 12475 conn->in_websocket_handling = 1;; 12476 mg_set_thread_name(""wsock"");; 12477 ; 12478 /* Loop continuously, reading messages from the socket, invoking the; 12479 * callback, and waiting repeatedly until an error occurs. */; 12480 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12481 && (!conn->must_close)) {; 12482 header_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:361991,continuous,continuously,361991,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['continuous'],['continuously']
Deployability,"e to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fArrayLimit;  ! limit for array size. when array bigger, its content converted to raw format ;  ; const char ** fBasicTypes;  ! pointer on list of basic types specific for currently connected SQL server ;  ; Bool_t fCanChangeConfig;  ! variable indicates can be basic configuration changed or not ;  ; Bool_t fIdsTableExists;  ! indicate if IdsTable exists ;  ; std::ofstream * fLogFile;  ! log file with SQL statements ;  ; Int_t fModifyCounter;  ! indicates how many changes was done with database tables ;  ; const char ** fOtherTypes;  ! pointer on list of other SQL types like TEXT or blob ;  ; Int_t fQuerisCounter;  ! how many query was applied ;  ; TSQLServer * fSQL;  ! interface to SQL database ;  ; TList * fSQLClassInfos;  ! list of SQL class infos ;  ; Int_t fSQLIOversion;  ! version of SQL I/O which is stored in configurations ;  ; Int_t fStmtCounter;  ! count numbers of active statements ;  ; TString fTablesType;  ! type, used in CREATE TABLE statements ;  ; Int_t fUseIndexes;  ! use indexes for tables: 0 - off, 1 - only for basic tables, 2 + normal class tables, 3 - all tables ;  ; TString fUserName;  ! user name, used to access objects from database ;  ; Bool_t fUseSuffixes;  ! use suffixes in column names like fValue:Int_t or fObject:pointer ;  ; Int_t fUseTransactions;  ! use transaction statements for writing data into the tables ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra byt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:51935,configurat,configuration,51935,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,2,['configurat'],"['configuration', 'configurations']"
Deployability,"e to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf101_basics.py This tutorial illustrates the basic features of RooFit ;  rf102_dataimport.C 'BASIC FUNCTIONALIT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:147416,install,install,147416,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['install'],['install']
Deployability,"e to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:140059,install,install,140059,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,4,['install'],['install']
Deployability,"e to an integer, i.e. 331527 -> 51507. ;  ; static Int_t ConvertVersionInt2Code (Int_t v);  Convert version as an integer to version code as used in RVersion.h. ;  ; static const char * DeclFileName ();  ; static Int_t DecreaseDirLevel ();  Decrease the indentation level for ls(). ;  ; static const TString & GetBinDir ();  Get the binary directory in the installation. Static utility function. ;  ; static const TString & GetDataDir ();  Get the data directory in the installation. Static utility function. ;  ; static Int_t GetDirLevel ();  return directory level ;  ; static const TString & GetDocDir ();  Get the documentation directory in the installation. Static utility function. ;  ; static const TString & GetEtcDir ();  Get the sysconfig directory in the installation. Static utility function. ;  ; static const char **& GetExtraInterpreterArgs ();  INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer. ;  ; static const TString & GetIconPath ();  Get the icon path in the installation. Static utility function. ;  ; static const TString & GetIncludeDir ();  Get the include directory in the installation. Static utility function. ;  ; static const TString & GetLibDir ();  Get the library directory in the installation. Static utility function. ;  ; static const TString & GetMacroDir ();  Get the macro directory in the installation. Static utility function. ;  ; static const char * GetMacroPath ();  Get macro search path. Static utility function. ;  ; static const TString & GetRootSys ();  Get the rootsys directory in the installation. Static utility function. ;  ; static const TString & GetSharedLibDir ();  Get the shared libraries directory in the installation. Static utility function. ;  ; static const TString & GetSourceDir ();  Get the source directory in the installation. Static utility function. ;  ; static const TString & GetTTFFontDir ();  Get the fonts directory in the installation. Static utility function. ;  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:28093,install,installation,28093,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['install'],['installation']
Deployability,"e tracing messages; model.fitTo(*data, Verbose(true));; ; // Reset message service to default stream configuration; RooMsgService::instance().reset();; ; // Show DEBUG level message on function tracing on all objects, redirect output to file; RooMsgService::instance().addStream(DEBUG, Topic(Tracing), OutputFile(""rf506_debug.log""));; ; // Perform a fit to generate some tracing messages; model.fitTo(*data, Verbose(true));; ; // Reset message service to default stream configuration; RooMsgService::instance().reset();; ; // E x a m p l e o f a n o t h e r d e b u g g i n g s t r e a m; // ---------------------------------------------------------------------; ; // Show DEBUG level messages on client/server link state management; RooMsgService::instance().addStream(DEBUG, Topic(LinkStateMgmt));; RooMsgService::instance().Print(""v"");; ; // Clone composite pdf g to trigger some link state management activity; RooAbsArg *gprime = gauss.cloneTree();; gprime->Print();; ; // Reset message service to default stream configuration; RooMsgService::instance().reset();; }; DEBUG#define DEBUGDefinition Polynomial.cxx:40; f#define f(i)Definition RSha256.hxx:104; RooAddPdf.h; RooDataSet.h; RooGaussian.h; RooMsgService.h; RooPlot.h; RooPolynomial.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::Printvoid Print(Option_t *options=nullptr) const overridePrint the object to the defaultPrintStream().Definition RooAbsArg.h:294; RooAbsArg::cloneTreevirtual RooAbsArg * cloneTree(const char *newname=nullptr) constClone tree expression of objects.Definition RooAbsArg.cxx:2293; RooAddPdfEfficient implementation of a sum of PDFs of the form.Definition RooAddPdf.h:33; RooArgSetRo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8C.html:3513,configurat,configuration,3513,doc/master/rf506__msgservice_8C.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8C.html,1,['configurat'],['configuration']
Deployability,"e tracing messages; model.fitTo(data, Verbose=True); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); ; # Show DEBUG level message on function tracing on all objects, output to; # file; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Tracing, OutputFile=""rf506_debug.log""); ; # Perform a fit to generate some tracing messages; model.fitTo(data, Verbose=True); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); ; # Example of another debugging stream; # ---------------------------------------------------------------------; ; # Show DEBUG level messages on client/server link state management; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.LinkStateMgmt); ROOT.RooMsgService.instance().Print(""v""); ; # Clone composite pdf g to trigger some link state management activity; gprime = gauss.cloneTree(); gprime.Print(); ; # Reset message service to default stream configuration; ROOT.RooMsgService.instance().reset(); Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; [#0] WARNING:InputArguments -- The parameter 's' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; Active Message streams; [0] MinLevel = PROGRESS Topic = Generation Minimization Plotting Fitting Integration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel = INFO Topic = Minimization Plotting Fitting Eval Caching ObjectHandling InputArguments DataHandling NumericIntegration ; [2] MinLevel = INFO Topic = HistFactory ; Active Message streams; [0] MinLevel = PROGRESS Topic = Generation Minimization Plotting Fitting Integration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:3047,configurat,configuration,3047,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['configurat'],['configuration']
Deployability,"e used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 717 ; 718 fFriends->Add(fe);; 719 ; 720 if (fProofChain); 721 // This updates the proxy chain when we will really use PROOF; 722 ResetBit(kProofUptodate);; 723 ; 724 // We need to invalidate the loading of the current tree because its list; 725 // of real friend is now obsolete. It is repairable only from LoadTree; 726 InvalidateCurrentTree();; 727 ; 728 TTree *t = fe->GetTree();; 729 if (!t) {; 730 Warning(""AddFriend"",""Unknown TChain %s"",chain);; 731 }; 732 return fe;; 733}; 734 ; 735////////////////////////////////////////////////////////////////////////////////; 736/// Add the whole chain or tree as a friend of this chain.; 737 ; 738TFriendElement* TChain::AddFriend(TTree* chain, const char* alias, bool /* warn = false */); 739{; 740 if (!chain) return nullptr;; 741 if (!fFriends) fFriends = new TList();; 742 TFriendElement *fe = new TFriendElement(this,chain,alias);; 743 R__ASSERT(fe);; 744 ; 745 fFriends->Add(fe);; 746 ; 747 if (fProofChain); 748 // This updates the proxy chain when we will really use PROOF; 749 ResetBit(kProofUptodate);; 750 ; 751 // We need to invalidate the loading of the current tree because its list; 752 // of real friend is now obsolete. It is repairable only from LoadTree; 753 InvalidateCurrentTree();; 754 ; 755 TTree *t = fe->GetTree();; 756 if (!t) {; 757 Warning(""AddFriend"",""Unknown TChain %s"",chain->GetName());; 758 }; 759 return fe;; 760}; 761 ; 762////////////////////////////////////////////////////////////////////////////////; 763/// Browse the contents of the chain.; 764 ; 765void TChain::Browse(TBrowser* b); 766{; 767 TTree::Browse(b);; 768}; 769 ; 770////////////////////////////////////////////////////////////////////////////////; 771/// When closing a file during the chain processing, the file; 772/// may be closed with option ""R"" if flag is set to true.; 773/// by default flag is true.; 774/// When closing a file with option ""R"", all T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:28866,update,updates,28866,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['update'],['updates']
Deployability,"e variation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; TIterator*_paramIter! Iterator over paramSet; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooJeffreysPrior.html:40019,configurat,configuration,40019,root/html532/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html532/RooJeffreysPrior.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection fla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:37979,integrat,integrated,37979,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,1,['integrat'],['integrated']
Deployability,"e watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:38361,integrat,integrated,38361,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['integrat'],['integrated']
Deployability,"e watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:38830,integrat,integrated,38830,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['integrat'],['integrated']
Deployability,"e will be; a limitation on the maximum number of nodes to be visualized. /*. */. opt=2 - only the clicked volume is visualized. This is automatically set by; TGeoVolume::DrawOnly() method; opt=3 - only a given path is visualized. This is automatically set by; TGeoVolume::DrawPath(const char *path) method. The current view can be exploded in cartesian, cylindrical or spherical; coordinates :; TGeoManager::SetExplodedView(Int_t opt). Options may be :; - 0 - default (no bombing); - 1 - cartesian coordinates. The bomb factor on each axis can be set with; TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; - 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R; are considered. /*. */. - 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; - TGeoVolume::SetVisibility() : set volume visibility.; - TGeoVolume::VisibleDaughters() : set daughters visibility.; All these actions automatically updates the current view if any. --- Checking the geometry. Several checking methods are accessible from the volume context menu. They; generally apply only to the visible parts of the drawn geometry in order to; ease geometry checking, and their implementation is in the TGeoChecker class; from the painting package. 1. Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z).; This method is drawing the daughters of the volume containing the point one; level down, printing the path to the deepest physical node holding this point.; It also computes the closest distance to any boundary. The point will be drawn; in red. /*. */. 2. Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and; it will draw this volume with current visualization settings. Random points; are generated in the bounding box of the top drawn volume. The points are; classified and drawn with the color of their deepest container. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:9713,update,updates,9713,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,6,['update'],['updates']
Deployability,"e will have the title “Look At My Code”.; 27.3 Special Documentation Elements: Directives; A common documentation problem is the inclusion of images. They are usually generated externally, which poses problems with where to keep the images, and how to keep them up to date. THtml solves this by offering a few special documentation elements: macro and latex directives.; 27.3.1 Latex Directive; Documentation surrounded by the keywords BEGIN_LATEX / END_LATEX will be passed to ROOT Latex engine TLatex. The keywords can be written with small or capital letters (case insensitive). The output will be stored to an image file, which gets automatically included in the documentation.; // This function calculates BEGIN_LATEX; // F(x_{#frac{1}{2}}) = #prod(x < x_{#frac{1}{2}}) = #frac{1}{2}; // END_LATEX; THtml will inject the following picture:. The image file name is generated from the formula and will be unique for all the documentation. It is stored along-side the documentation, and it will be automatically regenerated when the documentation is updated. The handling of the Latex directive is done by the class TDocLatexDirective.; The BEGIN_LATEX keyword can take the following parameters:. fontsize: sets the TLatex font size. The default value is 16.; separator: sets a list of characters for which a new column will be started. This allows aligned, multi-line, multi-column layout, which can be useful for e.g. mathematical derivations. It is unset by default, meaning the Latex directive will only generate one column.; rseparator: like separator, but a regular expression. Columns start with a match of this regular expression. Only one of separator or rseparator can be given.; align: defines the alignment of the columns. Note that the column delimiter counts as a column itself!. Example invocation, where the font size is set to 10, new columns are started by the characters ‘=’ and ‘,’, and the two columns are left aligned with the separator column centered:; Begin_Latex(fontsize=1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1245710,update,updated,1245710,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['updated']
Deployability,"e will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__fit.html:3914,configurat,configurations,3914,doc/master/group__tutorial__fit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html,1,['configurat'],['configurations']
Deployability,"e x0=0)Cumulative distribution function of the gamma distribution (lower tail).Definition ProbFuncMathCore.cxx:204; ROOT::Math::exponential_cdfdouble exponential_cdf(double x, double lambda, double x0=0)Cumulative distribution function of the exponential distribution (lower tail).Definition ProbFuncMathCore.cxx:161; ROOT::Math::inc_gamma_cdouble inc_gamma_c(double a, double x)Calculates the normalized (regularized) upper incomplete gamma function (upper integral)Definition SpecFuncMathCore.cxx:103; ROOT::Math::inc_betadouble inc_beta(double x, double a, double b)Calculates the normalized (regularized) incomplete beta function.Definition SpecFuncMathCore.cxx:115; ROOT::Math::erfcdouble erfc(double x)Complementary error function.Definition SpecFuncMathCore.cxx:44; ROOT::Math::inc_gammadouble inc_gamma(double a, double x)Calculates the normalized (regularized) lower incomplete gamma function (lower integral)Definition SpecFuncMathCore.cxx:99; ROOT::Math::erfdouble erf(double x)Error function encountered in integrating the normal distribution.Definition SpecFuncMathCore.cxx:59; ROOT::Math::landau_xm1double landau_xm1(double x, double xi=1, double x0=0)First moment (mean) of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:409; ROOT::Math::landau_xm2double landau_xm2(double x, double xi=1, double x0=0)Second moment of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:489; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::expm1double expm1(double x)exp(x) -1 with error cancellation when x is smallDefinition Math.h:110; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOT::Math::kSqrt2static const double kSqrt2Definition ProbFuncMathCore.cxx:18; ROOT::Math::gaussian_cdf_cdouble gaussian_cdf_c(double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:27461,integrat,integrating,27461,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['integrat'],['integrating']
Deployability,"e ‘prof’ option generates a TProfile with error on the mean. The “goff” option suppresses generating the graphics. You can combine the draw options in a list separated by commas. After typing the lines above, you should now have a canvas that looks this.; 12.20.5 Superimposing Two Histograms; When superimposing two 2-D histograms inside a script with TTree::Draw and using the “same” option, you will need to update the pad between Draw commands.; {; // superimpose two 2D scatter plots; // Create a 2D histogram and fill it with random numbers; TH2 *h2 = new TH2D (""h2"",""2D histo"",100,0,70,100,0,20000);; for (Int_t i = 0; i < 10000; i++); h2->Fill(gRandom->Gaus(40,10),gRandom->Gaus(10000,3000));; // set the color to differentiate it visually; h2->SetMarkerColor(kGreen);; h2->Draw();; // Open the example file and get the tree; TFile f(""cernstaff.root"");; TTree *myTree = (TTree*)f.Get(""T"");; // the update is needed for the next draw command to work properly; gPad->Update();; myTree->Draw(""Cost:Age"", """",""same"");; }; In this example, h2->Draw is only adding the object h2 to the pad’s list of primitives. It does not paint the object on the screen. However, TTree::Draw when called with option “same” gets the current pad coordinates to build an intermediate histogram with the right limits. Since nothing has been painted in the pad yet, the pad limits have not been computed. Calling pad->Update() forces the painting of the pad and allows TTree::Draw to compute the right limits for the intermediate histogram.; 12.20.6 Setting the Range in TTree::Draw; There are two more optional parameters to the TTree::Draw method: one is the number of entries and the second one is the entry to start with. For example, this command draws 1000 entries starting with entry 100:; myTree->Draw(""Cost:Age"", """","""",1000,100);; 12.20.7 TTree::Draw Examples; The examples below use the Event.root file generated by the $ROOTSYS/test/Event executable and the Event, Track, and EventHeader class definitions ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:591589,update,update,591589,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['update'],['update']
Deployability,"e' (>= 1).; The method returns the number of added files. Int_t Add(const char* path); Add all files matching the specified pattern to the collection.; 'dir' can include wildcards after the last slash, which causes all; matching files in that directory to be added.; If dir is the full path of a file, only one element is added.; Return value is the number of added files. Int_t RemoveDuplicates(); Remove duplicates based on the UUID, typically after a verification.; Return the number of entries removed. TFileCollection * GetStagedSubset(); Creates a subset of the files that have the kStaged & !kCorrupted bit set. Long64_t Merge(TCollection* list); merge all TFileCollection objects in li into this TFileCollection object. Int_t Update(Long64_t avgsize = -1); Update accumulated information about the elements of the collection; (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; bytes when the size info is not available.; Also updates the meta data information by summarizing; the meta data of the contained objects.; Return -1 in case of any failure, 0 if the total size is exact, 1 if; incomplete, 2 if complete but (at least partially) estimated. void Print(Option_t* option = """") const; Prints the contents of the TFileCollection.; If option contains:; 'M' print global meta information; 'F' print all the files in the collection in compact form; (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection; in long form (uuid, md5, all URLs, all meta objects; on; many lines). void SetAnchor(const char* anchor); Calls TUrl::SetAnchor() for all URLs contained in all TFileInfos. void SetBitAll(UInt_t f); Set the bit for all TFileInfos. void ResetBitAll(UInt_t f); Reset the bit for all TFileInfos. const char * GetDefaultTreeName() const; Returns the tree set with SetDefaultTreeName if set; Returns the name of the first tree in the meta data list.; Returns 0 in case no trees are found in the meta data lis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileCollection.html:9103,update,updates,9103,root/html528/TFileCollection.html,https://root.cern,https://root.cern/root/html528/TFileCollection.html,2,['update'],['updates']
Deployability,"e() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim or analytical integral. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The defult integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrator is set to be; the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; ROOT::Math::GaussIntegrator is used; See the reference documentation of these classes for more information about the; integration algorithms; To change integration algorithm just do :; ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; Valid integrator names are:; - Gauss : for ROOT::Math::GaussIntegrator; - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. Note 2:; Instead of TF1::Integral, you may want to use the combination of; TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; See an example with the following script:. void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:45881,integrat,integrator,45881,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,5,['integrat'],"['integration', 'integrator']"
Deployability,"e(). Bool_t TMVA::MethodBase::Verbose ; (; ); const. inlineprotected . Definition at line 503 of file MethodBase.h. ◆ WriteEvaluationHistosToFile(). void TMVA::MethodBase::WriteEvaluationHistosToFile ; (; Types::ETreeType ; treetype). virtual . writes all MVA evaluation histograms to file ; Reimplemented in TMVA::MethodBoost.; Definition at line 2094 of file MethodBase.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBase::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79050,configurat,configuration,79050,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['configurat'],['configuration']
Deployability,"e(). static const char * RooBifurGauss::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 49 of file RooBifurGauss.h. ◆ doEval(). void RooBifurGauss::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of BifurGauss distribution. ; Reimplemented from RooAbsReal.; Definition at line 72 of file RooBifurGauss.cxx. ◆ evaluate(). double RooBifurGauss::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 58 of file RooBifurGauss.cxx. ◆ getAnalyticalIntegral(). Int_t RooBifurGauss::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 80 of file RooBifurGauss.cxx. ◆ IsA(). TClass * RooBifurGauss::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 49 of file RooBifurGauss.h. ◆ Streamer(). void RooBifurGauss::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBifurGauss::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooBifurGauss.h. ◆ translate(). void RooBifurGauss::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:76863,integrat,integration,76863,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['integrat'],['integration']
Deployability,"e(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf703_effpdfprodDefinition rf703_effpdfprod.py:1; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Fitting -- RooAbsPdf::fitTo(modelEff_over_modelEff_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelEff_over_modelEff_Int[t]_modelEffData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf703_effpdfprod.C. tutorialsroofitrf703_effpdfprod.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf703__effpdfprod_8C.html:4609,integrat,integrator,4609,doc/master/rf703__effpdfprod_8C.html,https://root.cern,https://root.cern/doc/master/rf703__effpdfprod_8C.html,3,['integrat'],['integrator']
Deployability,"e(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenConfig.html:7363,integrat,integration,7363,root/html526/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html526/RooNumGenConfig.html,5,['integrat'],['integration']
Deployability,"e({dt, tagFlav, mixState}, 20000); ; # Plot full decay distribution; # ----------------------------------------------------------; ; # Create frame, data and pdf projection (integrated over tagFlav and; # mixState); frame = dt.frame(Title=""Inclusive decay distribution""); data.plotOn(frame); bmix_gm1.plotOn(frame); ; # Plot decay distribution for mixed and unmixed slice of mixState; # -------------------------------------------------------------------------------------------; ; # Create frame, data (mixed only); frame2 = dt.frame(Title=""Decay distribution of mixed events""); data.plotOn(frame2, Cut=""mixState==mixState::mixed""); ; # Position slice in mixState at ""mixed"" and plot slice of pdf in mixstate; # over data (integrated over tagFlav); bmix_gm1.plotOn(frame2, Slice=(mixState, ""mixed"")); ; # Create frame, data (unmixed only); frame3 = dt.frame(Title=""Decay distribution of unmixed events""); data.plotOn(frame3, Cut=""mixState==mixState::unmixed""); ; # Position slice in mixState at ""unmixed"" and plot slice of pdf in; # mixstate over data (integrated over tagFlav); bmix_gm1.plotOn(frame3, Slice=(mixState, ""unmixed"")); ; c = ROOT.TCanvas(""rf310_sliceplot"", ""rf310_sliceplot"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame3.Draw(); ; c.SaveAs(""rf310_sliceplot.png""); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (mixState,tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8py.html:2638,integrat,integrated,2638,doc/master/rf310__sliceplot_8py.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8py.html,1,['integrat'],['integrated']
Deployability,"e) {; 8752 // reset our cache status tracking in case existing cache was added; 8753 // by the user without using one of the TTree methods; 8754 fCacheSize = pf->GetBufferSize();; 8755 fCacheUserSet = !pf->IsAutoCreated();; 8756 ; 8757 if (fCacheUserSet) {; 8758 // existing cache was created by the user, don't change it; 8759 return 0;; 8760 }; 8761 } else {; 8762 // update the cache to ensure it records the user has explicitly; 8763 // requested it; 8764 pf->SetAutoCreated(false);; 8765 }; 8766 ; 8767 // if we're using an automatically calculated size and the existing; 8768 // cache is already almost large enough don't resize; 8769 if (autocache && Long64_t(0.80*cacheSize) < fCacheSize) {; 8770 // already large enough; 8771 return 0;; 8772 }; 8773 ; 8774 if (cacheSize == fCacheSize) {; 8775 return 0;; 8776 }; 8777 ; 8778 if (cacheSize == 0) {; 8779 // delete existing cache; 8780 pf->WaitFinishPrefetch();; 8781 file->SetCacheRead(nullptr,this);; 8782 delete pf;; 8783 pf = nullptr;; 8784 } else {; 8785 // resize; 8786 Int_t res = pf->SetBufferSize(cacheSize);; 8787 if (res < 0) {; 8788 return -1;; 8789 }; 8790 cacheSize = pf->GetBufferSize(); // update after potential clamp; 8791 }; 8792 } else {; 8793 // no existing cache; 8794 if (autocache) {; 8795 if (fCacheUserSet) {; 8796 // value was already set manually.; 8797 if (fCacheSize == 0) return 0;; 8798 // Expected a cache should exist; perhaps the user moved it; 8799 // Do nothing more here.; 8800 if (cacheSize) {; 8801 Error(""SetCacheSizeAux"", ""Not setting up an automatically sized TTreeCache because of missing cache previously set"");; 8802 }; 8803 return -1;; 8804 }; 8805 }; 8806 }; 8807 ; 8808 fCacheSize = cacheSize;; 8809 if (cacheSize == 0 || pf) {; 8810 return 0;; 8811 }; 8812 ; 8813#ifdef R__USE_IMT; 8814 if(TTreeCacheUnzip::IsParallelUnzip() && file->GetCompressionLevel() > 0); 8815 pf = new TTreeCacheUnzip(this, cacheSize);; 8816 else; 8817#endif; 8818 pf = new TTreeCache(this, cacheSize);; 8819 ; 8820 pf->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:341725,update,update,341725,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['update'],['update']
Deployability,"e)) == -1) {; 19729 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 19730 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19731 mg_snprintf(NULL,; 19732 NULL, /* No truncation check for error buffers */; 19733 error->text,; 19734 error->text_buffer_size,; 19735 ""Invalid configuration option: %s"",; 19736 name);; 19737 }; 19738 free_context(ctx);; 19739 pthread_setspecific(sTlsKey, NULL);; 19740 return NULL;; 19741 } else if ((value = *options++) == NULL) {; 19742 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 19743 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19744 mg_snprintf(NULL,; 19745 NULL, /* No truncation check for error buffers */; 19746 error->text,; 19747 error->text_buffer_size,; 19748 ""Invalid configuration option value: %s"",; 19749 name);; 19750 }; 19751 free_context(ctx);; 19752 pthread_setspecific(sTlsKey, NULL);; 19753 return NULL;; 19754 }; 19755 if (ctx->dd.config[idx] != NULL) {; 19756 /* A duplicate configuration option is not an error - the last; 19757 * option value will be used. */; 19758 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19759 mg_free(ctx->dd.config[idx]);; 19760 }; 19761 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19762 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19763 }; 19764 ; 19765 /* Set default value if needed */; 19766 for (i = 0; config_options[i].name != NULL; i++) {; 19767 default_value = config_options[i].default_value;; 19768 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19769 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19770 }; 19771 }; 19772 ; 19773 /* Request size option */; 19774 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19775 if (itmp < 1024) {; 19776 mg_cry_ctx_internal(ctx,; 19777 ""%s too small"",; 19778 config_options[MAX_REQUEST_SIZE].name);; 19779 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19780 mg_snprintf(NULL,; 19781 NULL, /* No truncation check for error buffers */; 19782 error->text,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:589579,configurat,configuration,589579,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['configurat'],['configuration']
Deployability,"e)) == -1) {; 19730 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 19731 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19732 mg_snprintf(NULL,; 19733 NULL, /* No truncation check for error buffers */; 19734 error->text,; 19735 error->text_buffer_size,; 19736 ""Invalid configuration option: %s"",; 19737 name);; 19738 }; 19739 free_context(ctx);; 19740 pthread_setspecific(sTlsKey, NULL);; 19741 return NULL;; 19742 } else if ((value = *options++) == NULL) {; 19743 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 19744 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19745 mg_snprintf(NULL,; 19746 NULL, /* No truncation check for error buffers */; 19747 error->text,; 19748 error->text_buffer_size,; 19749 ""Invalid configuration option value: %s"",; 19750 name);; 19751 }; 19752 free_context(ctx);; 19753 pthread_setspecific(sTlsKey, NULL);; 19754 return NULL;; 19755 }; 19756 if (ctx->dd.config[idx] != NULL) {; 19757 /* A duplicate configuration option is not an error - the last; 19758 * option value will be used. */; 19759 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19760 mg_free(ctx->dd.config[idx]);; 19761 }; 19762 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19763 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19764 }; 19765 ; 19766 /* Set default value if needed */; 19767 for (i = 0; config_options[i].name != NULL; i++) {; 19768 default_value = config_options[i].default_value;; 19769 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19770 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19771 }; 19772 }; 19773 ; 19774 /* Request size option */; 19775 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19776 if (itmp < 1024) {; 19777 mg_cry_ctx_internal(ctx,; 19778 ""%s too small"",; 19779 config_options[MAX_REQUEST_SIZE].name);; 19780 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19781 mg_snprintf(NULL,; 19782 NULL, /* No truncation check for error buffers */; 19783 error->text,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:589612,configurat,configuration,589612,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['configurat'],['configuration']
Deployability,"e). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 421 of file Integrator.h. Member Data Documentation. ◆ fFunc. IGenFunction* ROOT::Math::IntegratorOneDim::fFunc. private . pointer to owned function ; Definition at line 475 of file Integrator.h. ◆ fIntegrator. VirtualIntegratorOneDim* ROOT::Math::IntegratorOneDim::fIntegrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20971,integrat,integration,20971,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"e); 460 method->SetWeightFileDir(fileDir);; 461 method->SetModelPersistence(fModelPersistence);; 462 method->SetAnalysisType(fAnalysisType);; 463 method->SetupMethod();; 464 method->ParseOptions();; 465 method->ProcessSetup();; 466 method->SetFile(fgTargetFile);; 467 method->SetSilentFile(IsSilentFile());; 468 ; 469 // check-for-unused-options is performed; may be overridden by derived classes; 470 method->CheckSetup();; 471 ; 472 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 473 MVector *mvector = new MVector;; 474 fMethodsMap[datasetname] = mvector;; 475 }; 476 fMethodsMap[datasetname]->push_back(method);; 477 return method;; 478}; 479 ; 480////////////////////////////////////////////////////////////////////////////////; 481/// Books MVA method. The option configuration string is custom for each MVA; 482/// the TString field ""theNameAppendix"" serves to define (and distinguish); 483/// several instances of a given MVA, eg, when one wants to compare the; 484/// performance of various configurations; 485 ; 486TMVA::MethodBase *; 487TMVA::Factory::BookMethod(TMVA::DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption); 488{; 489 return BookMethod(loader, Types::Instance().GetMethodName(theMethod), methodTitle, theOption);; 490}; 491 ; 492////////////////////////////////////////////////////////////////////////////////; 493/// Adds an already constructed method to be managed by this factory.; 494///; 495/// \note Private.; 496/// \note Know what you are doing when using this method. The method that you; 497/// are loading could be trained already.; 498///; 499 ; 500TMVA::MethodBase *; 501TMVA::Factory::BookMethodWeightfile(DataLoader *loader, TMVA::Types::EMVA methodType, const TString &weightfile); 502{; 503 TString datasetname = loader->GetName();; 504 std::string methodTypeName = std::string(Types::Instance().GetMethodName(methodType).Data());; 505 DataSetInfo &dsi = loader->GetDataSetInfo();; 506 ; 507 IMethod *im = Classifie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:19758,configurat,configuration,19758,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['configurat'],"['configuration', 'configurations']"
Deployability,"e*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionServerFrame.html:21281,configurat,configuration,21281,root/html602/TSessionServerFrame.html,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html,2,['configurat'],['configuration']
Deployability,"e, Int_t& nodeid, Int_t* array) const; Fill array with node id. Recursive on node branch. Int_t FindNode(const TGeoNode* node, Int_t level); Search for a node within the branch of this one. void SaveAttributes(ostream& out); save attributes for this node. Bool_t MayOverlap(Int_t iother) const; Check the overlab between the bounding box of the node overlaps with the one; the brother with index IOTHER. void MasterToLocal(const Double_t* master, Double_t* local) const; Convert the point coordinates from mother reference to local reference system. void MasterToLocalVect(const Double_t* master, Double_t* local) const; Convert a vector from mother reference to local reference system. void LocalToMaster(const Double_t* local, Double_t* master) const; Convert the point coordinates from local reference system to mother reference. void LocalToMasterVect(const Double_t* local, Double_t* master) const; Convert a vector from local reference system to mother reference. void ls(Option_t* option = """") const; Print the path (A/B/C/...) to this node on stdout. void Paint(Option_t* option = """"); Paint this node and its content according to visualization settings. void PrintCandidates() const; print daughters candidates for containing current point; cd();. void PrintOverlaps() const; print possible overlapping nodes; if (!IsOverlapping()) {printf(""node %s is ONLY\n"", GetName()); return;}. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape. void SetOverlaps(Int_t* ovlp, Int_t novlp); set the list of overlaps for this node (ovlp must be created with operator new). void SetVisibility(Bool_t vis = kTRUE); Set visibility of the node (obsolete). void VisibleDaughters(Bool_t vis = kTRUE); Set visibility of the daughters (obsolete). void cd() const; {;}. Int_t GetByteCount() const; {return 44;}. TGeoNode * GetDaughter(Int_t ind) const; {return fVolume->GetNode(ind);}. TGeoMatrix * GetMatrix() const. Int_t GetColour() const; {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNode.html:14371,A/B,A/B,14371,root/html528/TGeoNode.html,https://root.cern,https://root.cern/root/html528/TGeoNode.html,3,['A/B'],['A/B']
Deployability,"e. . Definition at line 180 of file TSessionViewer.h. Public Member Functions;  TSessionServerFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionServerFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build server configuration frame. ;  ; const char * GetAddress () const;  ; const char * GetConfigText () const;  ; Int_t GetLogLevel () const;  ; const char * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; Int_t GetPortNumber () const;  ; const char * GetUserName () const;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose event in server frame. ;  ; TClass * IsA () const override;  ; Bool_t IsSync () const;  ; void OnBtnAddClicked ();  Add newly created session configuration in the list of sessions. ;  ; void OnBtnConnectClicked ();  Connect to selected server. ;  ; void OnBtnDeleteClicked ();  Delete selected session configuration (remove it from the list). ;  ; void OnBtnNewServerClicked ();  Reset server configuration fields. ;  ; void OnConfigFileClicked ();  Browse configuration files. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for session server frame. ;  ; void SetAddEnabled (Bool_t on=kTRUE);  ; void SetAddress (const char *str);  ; void SetConfigText (const char *str);  ; void SetConnectEnabled (Bool_t on=kTRUE);  ; void SetLogLevel (Int_t log);  ; void SetName (const char *str) override;  ; void SetPortNumber (Int_t port);  ; void SetSync (Bool_t sync);  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void SetUserName (const char *str);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (TSessionDescription *desc);  Update fields with values from session description desc. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionServerFrame.html:1303,configurat,configuration,1303,doc/master/classTSessionServerFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionServerFrame.html,1,['configurat'],['configuration']
Deployability,"e. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf901_numintconfig.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ; ; from __future__ import print_function; import ROOT; ; ; # Adjust global 1D integration precision; # ----------------------------------------------------------------------------; ; # Print current global default configuration for numeric integration; # strategies; ROOT.RooAbsReal.defaultIntegratorConfig().Print(""v""); ; # Example: Change global precision for 1D integrals from 1e-7 to 1e-6; #; # The relative epsilon (change as fraction of current best integral estimate) and; # absolute epsilon (absolute change w.r.t last best integral estimate) can be specified; # separately. For most pdf integrals the relative change criterium is the most important,; # however for certain non-pdf functions that integrate out to zero a separate absolute; # change criterium is necessary to declare convergence of the integral; #; # NB: ROOT.This change is for illustration only. In general the precision should be at least 1e-7; # for normalization integrals for MINUIT to succeed.; #; ROOT.RooAbsReal.defaultIntegratorConfig().setEpsAbs(1e-6); ROOT.RooAbsReal.defaultIntegratorConfig().setEpsRel(1e-6); ; # N u m e r i c i n t e g r a t i o n o f l a n d a u p d f; # ------------------------------------------------------------------; ; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); landau = ROOT.RooLandau(""landau"", ""landau"", x, 0.0, 0.1); ; # Disable analytic integration from demonstration purposes; landau.forceNumInt(True); ; # Activate debug-level messages for topic integration to be able to follow; # actions below; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic=ROOT.RooFit.Integration); ; # Calculate integral over landau with default choice of numeric integrator; intLandau = landau.createI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8py.html:1057,integrat,integrate,1057,doc/master/rf901__numintconfig_8py.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8py.html,1,['integrat'],['integrate']
Deployability,"e. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TIter.html:1120,release,release,1120,root/html534/TIter.html,https://root.cern,https://root.cern/root/html534/TIter.html,1,['release'],['release']
Deployability,"e. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward); virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); booloperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); voidReset(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assigning it with the original. TIter & operator=(const TIter& rhs); As",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TIter.html:1120,release,release,1120,root/html528/TIter.html,https://root.cern,https://root.cern/root/html528/TIter.html,3,['release'],['release']
Deployability,"e. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TIter. class TIter. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods); public:. virtual~TIter(); TIter&Begin(); static TClass*Class(); static TIterEnd(); const TCollection*GetCollection() const; Option_t*GetOption() const; virtual TClass*IsA() const; TObject*Next(); Bool_toperator!=(const TIter& aIter) const; TObject*operator()(); TObject*operator*() const; TIter&operator++(); TIter&operator=(const TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TIter.html:1120,release,release,1120,root/html602/TIter.html,https://root.cern,https://root.cern/root/html602/TIter.html,2,['release'],['release']
Deployability,"e. void WriteHeader(); Write file info like configurations, title, UUID and other. void WriteStreamerInfo(); Store all TVirtualStreamerInfo, used in file, in sql database. Bool_t WriteSpecialObject(Long64_t keyid, TObject* obj, const char* name, const char* title); write special kind of object like streamer infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update value for modified keys when update == kTRUE; Returns number of successfully read keys or -1 if error. void InitSqlDatabase(Bool_t create); initialize sql database and correspondent structures; identical to TFile::Init() function. Bool_t ReadConfigurations(); read table configurations as special table. void CreateBasicTables(); Creates initial tables in database; This is table with configurations and table with keys; Function called once when first object is stored to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLFile.html:39921,update,update,39921,root/html534/TSQLFile.html,https://root.cern,https://root.cern/root/html534/TSQLFile.html,9,['update'],['update']
Deployability,"e.Definition RField.hxx:235; ROOT::Experimental::REnumField::AppendImplstd::size_t AppendImpl(const void *from) finalOperations on values of complex types, e.g.Definition RField.hxx:223; ROOT::Experimental::REnumField::ReadGlobalImplvoid ReadGlobalImpl(NTupleSize_t globalIndex, void *to) finalDefinition RField.hxx:224; ROOT::Experimental::REnumField::ConstructValuevoid ConstructValue(void *where) const finalConstructs value in a given location of size at least GetValueSize(). Called by the base class' Creat...Definition RField.hxx:221; ROOT::Experimental::RExceptionBase class for all ROOT issued exceptions.Definition RError.hxx:78; ROOT::Experimental::RExtraTypeInfoDescriptorField specific extra type information from the header / extenstion header.Definition RNTupleDescriptor.hxx:478; ROOT::Experimental::RFieldBase::RColumnRepresentationsSome fields have multiple possible column representations, e.g.Definition RFieldBase.hxx:142; ROOT::Experimental::RFieldBase::RDeleterA functor to release the memory acquired by CreateValue (memory and constructor).Definition RFieldBase.hxx:81; ROOT::Experimental::RFieldBase::RValuePoints to an object with RNTuple I/O support and keeps a pointer to the corresponding field.Definition RFieldBase.hxx:629; ROOT::Experimental::RFieldBaseA field translates read and write calls from/to underlying columns to/from tree values.Definition RFieldBase.hxx:67; ROOT::Experimental::RFieldBase::GenerateColumnsvirtual void GenerateColumns()Implementations in derived classes should create the backing columns corresponsing to the field type ...Definition RFieldBase.hxx:321; ROOT::Experimental::RFieldBase::Attachvoid Attach(std::unique_ptr< RFieldBase > child)Add a new subfield to the list of nested fields.Definition RField.cxx:981; ROOT::Experimental::RFieldBase::GetTypeNameconst std::string & GetTypeName() constDefinition RFieldBase.hxx:514; ROOT::Experimental::RFieldBase::CallAppendOnstatic std::size_t CallAppendOn(RFieldBase &other, const void *from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:29084,release,release,29084,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,1,['release'],['release']
Deployability,"e.Definition RooAbsReal.cxx:1611; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooArgSet::selectByNameRooArgSet * selectByName(const char *nameList, bool verbose=false) constUse RooAbsCollection::selectByName(), but return as RooArgSet.Definition RooArgSet.h:144; RooArgSet::selectCommonRooArgSet * selectCommon(const RooAbsCollection &refColl) constUse RooAbsCollection::selecCommon(), but return as RooArgSet.Definition RooArgSet.h:149; RooBinnedGenContextEfficient implementation of the generator context specific for binned pdfs.Definition RooBinnedGenContext.h:26; RooCacheManager::setObjInt_t setObj(const RooArgSet *nset, T *obj, const TNamed *isetRangeName=nullptr)Setter function without integration set.Definition RooCacheManager.h:50; RooCacheManager::getObjT * getObj(const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr)Getter function without integration set.Definition RooCacheManager.h:45; RooCachedRealImplementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in ...Definition RooCachedReal.h:20; RooCachedReal::setCacheSourcevoid setCacheSource(bool flag)Definition RooCachedReal.h:43; RooCmdArgNamed container for two doubles, two integers two object points and three string pointers that can be...Definition RooCmdArg.h:26; RooCmdArg::setStringvoid setString(Int_t idx, const char *value)Definition RooCmdArg.h:78; RooCmdConfigConfigurable parser for RooCmdArg named arguments.Definition RooCmdConfig.h:32; RooCmdConfig::defineMutexvoid defineMutex(const char *head, Args_t &&... tail)Define arguments where any pair is mutually exclusive.Definition RooCmdConfig.h:153; RooCmdConfig::processbool process(const RooCmdArg &arg)Process given RooCmdArg.Definition RooCmdConfig.cxx:311; RooCmdConfig::hasProcessedbool hasProcessed(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:160563,integrat,integration,160563,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['integrat'],['integration']
Deployability,"e.cxx:5865; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; TTree::fFileNumberInt_t fFileNumber! current file number (if file extensions)Definition TTree.h:116; TTree::GetLeafvirtual TLeaf * GetLeaf(const char *branchname, const char *leafname)Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of fri...Definition TTree.cxx:6195; TTree::GetZipBytesvirtual Long64_t GetZipBytes() constDefinition TTree.h:585; TTree::fLeavesTObjArray fLeavesDirect pointers to individual branch leaves.Definition TTree.h:123; TTree::Resetvirtual void Reset(Option_t *option="""")Reset baskets, buffers and entries count in all branches and leaves.Definition TTree.cxx:8003; TTree::KeepCircularvirtual void KeepCircular()Keep a maximum of fMaxEntries in memory.Definition TTree.cxx:6415; TTree::SetDefaultEntryOffsetLenvirtual void SetDefaultEntryOffsetLen(Int_t newdefault, bool updateExisting=false)Update the default value for the branch's fEntryOffsetLen.Definition TTree.cxx:8940; TTree::DirectoryAutoAddvirtual void DirectoryAutoAdd(TDirectory *)Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file...Definition TTree.cxx:3819; TTree::fMaxVirtualSizeLong64_t fMaxVirtualSizeMaximum total size of buffers kept in memory.Definition TTree.h:99; TTree::GetTotBytesvirtual Long64_t GetTotBytes() constDefinition TTree.h:556; TTree::MakeSelectorvirtual Int_t MakeSelector(const char *selector=nullptr, Option_t *option="""")Generate skeleton selector class for this tree.Definition TTree.cxx:6822; TTree::SetObjectvirtual void SetObject(const char *name, const char *title)Change the name and title of this tree.Definition TTree.cxx:9260; TTree::fPerfStatsTVirtualPerfStats * fPerfStats! pointer to the current perf stats objectDefinition TTree.h:132; TTree::fWeightDouble_t fWeightTree weight (see TTree::SetWeight)Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:451122,update,updateExisting,451122,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['update'],['updateExisting']
Deployability,"e::CreateBulk ; (; ). The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ; Definition at line 1076 of file RField.cxx. ◆ CreateObject() [1/3]. template<> . std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. ◆ CreateObject() [2/3]. template<typename T > . std::unique_ptr< T, typename RFieldBase::RCreateObjectDeleter< T >::deleter > ROOT::Experimental::RFieldBase::CreateObject. Generates an object of the field type and allocates new initialized memory according to the type. ; Implemented at the end of this header because the implementation is using RField<T>::TypeName() The returned object can be released with delete, i.e. it is valid to call auto ptr = field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returned pointer. ; Definition at line 961 of file RField.cxx. ◆ CreateValue(). ROOT::Experimental::RFieldBase::RValue ROOT::Experimental::RFieldBase::CreateValue ; (; ). Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ; Definition at line 969 of file RField.cxx. ◆ end() [1/2]. ROOT::Experimental::RFieldBase::RSchemaIterator ROOT::Experimental::RFieldBase::e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:30004,release,release,30004,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['release'],['release']
Deployability,"e::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Reimplemented from TObject.; Definition at line 89 of file TLine.cxx. ◆ DrawLine(). TLine * TLine::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). virtual . Draw this line with new coordinates. ; Definition at line 103 of file TLine.cxx. ◆ DrawLineNDC(). TLine * TLine::DrawLineNDC ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). virtual . Draw this line with new coordinates in NDC. ; Definition at line 115 of file TLine.cxx. ◆ ExecuteEvent(). void TLine::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a line is clicked with the locator; If Left button clicked on one of the line end points, this point follows the cursor until button is released.; if Middle button clicked, the line is moved parallel to itself until the button is released. ; Reimplemented from TObject.; Definition at line 132 of file TLine.cxx. ◆ GetBBox(). Rectangle_t TLine::GetBBox ; (; ). overridevirtual . Return the bounding Box of the Line. ; Implements TAttBBox2D.; Definition at line 544 of file TLine.cxx. ◆ GetBBoxCenter(). TPoint TLine::GetBBoxCenter ; (; ). overridevirtual . Return the center of the BoundingBox as TPoint in pixels. ; Implements TAttBBox2D.; Definition at line 569 of file TLine.cxx. ◆ GetX1(). Double_t TLine::GetX1 ; (; ); const. inline . Definition at line 50 of file TLine.h. ◆ GetX2(). Double_t TLine::GetX2 ; (; ); const. inline . Definition at line 51 of file TLine.h. ◆ GetY1(). Double_t TLine::GetY1 ; (; ); const. inline . Definition at line 52 of file TLine.h. ◆ GetY2(). Double_t TLine::GetY2 ; (; ); const. inline . Definition at line 53 of file TLine.h. ◆ IsA(). TClass * TLine::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLine.html:17988,release,released,17988,doc/master/classTLine.html,https://root.cern,https://root.cern/doc/master/classTLine.html,1,['release'],['released']
Deployability,"e::Process(selector, option, nentries, firstentry);; 2299}; 2300 ; 2301////////////////////////////////////////////////////////////////////////////////; 2302/// Make sure that obj (which is being deleted or will soon be) is no; 2303/// longer referenced by this TTree.; 2304 ; 2305void TChain::RecursiveRemove(TObject *obj); 2306{; 2307 if (fFile == obj) {; 2308 fFile = nullptr;; 2309 fDirectory = nullptr;; 2310 fTree = nullptr;; 2311 }; 2312 if (fDirectory == obj) {; 2313 fDirectory = nullptr;; 2314 fTree = nullptr;; 2315 }; 2316 if (fTree == obj) {; 2317 fTree = nullptr;; 2318 }; 2319}; 2320 ; 2321////////////////////////////////////////////////////////////////////////////////; 2322/// Remove a friend from the list of friends.; 2323 ; 2324void TChain::RemoveFriend(TTree* oldFriend); 2325{; 2326 // We already have been visited while recursively looking; 2327 // through the friends tree, let return; 2328 ; 2329 if (!fFriends) {; 2330 return;; 2331 }; 2332 ; 2333 TTree::RemoveFriend(oldFriend);; 2334 ; 2335 if (fProofChain); 2336 // This updates the proxy chain when we will really use PROOF; 2337 ResetBit(kProofUptodate);; 2338 ; 2339 // We need to invalidate the loading of the current tree because its list; 2340 // of real friends is now obsolete. It is repairable only from LoadTree.; 2341 InvalidateCurrentTree();; 2342}; 2343 ; 2344////////////////////////////////////////////////////////////////////////////////; 2345/// Resets the state of this chain.; 2346 ; 2347void TChain::Reset(Option_t*); 2348{; 2349 delete fFile;; 2350 fFile = nullptr;; 2351 fNtrees = 0;; 2352 fTreeNumber = -1;; 2353 fTree = nullptr;; 2354 fFile = nullptr;; 2355 fFiles->Delete();; 2356 fStatus->Delete();; 2357 fTreeOffset[0] = 0;; 2358 TChainElement* element = new TChainElement(""*"", """");; 2359 fStatus->Add(element);; 2360 fDirectory = nullptr;; 2361 ; 2362 TTree::Reset();; 2363}; 2364 ; 2365////////////////////////////////////////////////////////////////////////////////; 2366/// Resets the state",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:84271,update,updates,84271,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['update'],['updates']
Deployability,"e::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RElement_8cxx_source.html:9087,configurat,configuration,9087,doc/master/RElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RElement_8cxx_source.html,1,['configurat'],['configuration']
Deployability,"e::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_altBinning! Optional alternative ranges and binnings; RooAbsBinning*_binning! Pointer to default binning definition; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooErrorVar.html:36606,integrat,integration,36606,root/html532/RooErrorVar.html,https://root.cern,https://root.cern/root/html532/RooErrorVar.html,1,['integrat'],['integration']
Deployability,"e::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumGenConfig(); Constructor. ~RooNumGenConfig(); Destructor. RooNumGenConfig(const RooNumGenConfig& other); Copy constructor. RooNumGenConfig& operator=(const RooNumGenConfig& other); Assignment operator from other RooNumGenConfig. RooCategory& method1D(Bool_t cond, Bool_t cat). RooCategory& method2D(Bool_t cond, Bool_t cat). RooCategory& methodND(Bool_t cond, Bool_t cat). const RooCategory& method1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:9004,integrat,integration,9004,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,2,['integrat'],['integration']
Deployability,"e::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet_ownedClonedModelSetOwning set of cloned model components; RooArgSet_ownedClonedPdfSetOwning set of cloned PDF components; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useWindowSwitch to activate window convolution; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Int_t_verboseThreshCall count threshold for verbose printing; RooListProxy_windowParamHolder for optional convolution integration window scaling parameter; Double_t_windowScaleScale factor for window parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:36211,integrat,integrator,36211,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,3,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"e; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 849 ; 850- Passing a list or tuple of drawables: ; 851You can pass a list or tuple containing the plots you want to visualize. For example:; 852 ; 853~~~{.py}; 854LiveVisualize([h_gaus, h_exp, h_random]); 855~~~; 856 ; 857- Passing a list or tuple of drawables with a global callback function: ; 858You can also include a global callback function that will be applied to all plots. For example:; 859 ; 860~~~{.py}; 861def set_fill_color(hist):; 862 hist.SetFillColor(ROOT.kBlue); 863 ; 864LiveVisualize([h_gaus, h_e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:48081,continuous,continuously,48081,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['continuous'],['continuously']
Deployability,"e; 859 ; 860if __name__ == ""__main__"":; 861 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 862 # The model can be passed either as a tuple with the arguments in the correct order; 863 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 864 # Or by creating the specific struct; 865 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 866 df.Histo1D(model, ""x""); 867~~~; 868 ; 869Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 870to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 871the distributed execution.; 872 ; 873### Live visualization in distributed mode with dask; 874 ; 875The live visualization feature allows real-time data representation of plots generated during the execution ; 876of a distributed RDataFrame application. ; 877It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 878by creating a canvas and continuously updating it as partial results become available. ; 879 ; 880The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 881 ; 882~~~{.py}; 883import ROOT; 884 ; 885LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 886~~~; 887 ; 888The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 889 ; 890- Passing a list or tuple of drawables: ; 891You can pass a list or tuple containing the plots you want to visualize. For example:; 892 ; 893~~~{.py}; 894LiveVisualize([h_gaus, h_exp, h_random]); 895~~~; 896 ; 897- Passing a list or tuple of drawables with a global callback function: ; 898You can also include a global callback function that will be applied to all plots. For example:; 899 ; 900~~~{.py}; 901def set_fill_color(hist):; 902 hist.SetFillColor(ROOT.kBlue); 903 ; 904LiveVisualize([h_gaus, h_e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:49721,continuous,continuously,49721,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['continuous'],['continuously']
Deployability,e; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGCheckButton.html:25624,release,released,25624,root/html602/TGCheckButton.html,https://root.cern,https://root.cern/root/html602/TGCheckButton.html,4,['release'],['released']
Deployability,"e; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GDML; » TGDMLWrite. class TGDMLWrite: public TObject. TGDMLWrite Class. This class contains implementation of converting ROOT's gGeoManager; geometry to GDML file. gGeoManager is the instance of TGeoManager class; containing tree of geometries creating resulting geometry. GDML is xml; based format of file mirroring the tree of geometries according to GDML; schema rules. For more information about GDML see http://gdml.web.cern.ch.; Each object in ROOT is represented by xml tag (=xml node/element) in GDML. This class is not needed to be instanciated. It should always be called; by gGeoManager->Export(""xyz.gdml"") method. Export is driven by extenstion; that is why "".gdml"" is important in resulting name. Whenever a new ROOT geometry object is implemented or there is a change; in GDML schema this class is needed to be updated to ensure proper mapping; between ROOT objects and GDML elements. Current status of mapping ROOT -> GDML is implemented in method called; TGDMLWrite::ChooseObject and it contains following ""map"":. Solids:; TGeoBBox -> <box ... >; TGeoParaboloid -> <paraboloid ...>; TGeoSphere -> <sphere ...>; TGeoArb8 -> <arb8 ...>; TGeoConeSeg -> <cone ...>; TGeoCone -> <cone ...>; TGeoPara -> <para ...>; TGeoTrap -> <trap ...> or; - -> <arb8 ...>; TGeoGtra -> <twistedtrap ...> or; - -> <trap ...> or; - -> <arb8 ...>; TGeoTrd1 -> <trd ...>; TGeoTrd2 -> <trd ...>; TGeoTubeSeg -> <tube ...>; TGeoCtub -> <cutTube ...>; TGeoTube -> <tube ...>; TGeoPcon -> <polycone ...>; TGeoTorus -> <torus ...>; TGeoPgon -> <polyhedra ...>; TGeoEltu -> <eltube ...>; TGeoHype -> <hype ...>; TGeoXtru -> <xtru ...>; TGeoCompositeShape -> <union ...> or; - -> <subtraction ...> or; - -> <intersection ...>. Special cases of solids:; TGeoScaledShape -> <elcone ...> if scaled TGeoCone or; - -> elemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLWrite.html:1062,update,updated,1062,root/html534/TGDMLWrite.html,https://root.cern,https://root.cern/root/html534/TGDMLWrite.html,3,['update'],['updated']
Deployability,"e; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:41527,configurat,configuration,41527,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,bool>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_bool_.html:44668,configurat,configuration,44668,root/html602/RooCFunction3PdfBinding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_bool_.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction3PdfBinding_double_double_int_int_.html:39142,integrat,integrator,39142,root/html528/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html528/RooCFunction3PdfBinding_double_double_int_int_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; const ROOT::Math::IBaseFunctionOneDim*funcFunctor; RooRealProxyvarArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFunctor1DBinding(const char* name, const char* title, const ROOT::Math::IBaseFunctionOneDim& ftor, RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFunctor1DBinding.html:35321,integrat,integrator,35321,root/html534/RooFunctor1DBinding.html,https://root.cern,https://root.cern/root/html534/RooFunctor1DBinding.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddition.html:31987,integrat,integration,31987,root/html532/RooAddition.html,https://root.cern,https://root.cern/root/html532/RooAddition.html,1,['integrat'],['integration']
Deployability,"e; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. Picture; Source. {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }. Function Members (Methods); public:. virtual~TGTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTable.html:3388,update,update,3388,root/html602/TGTable.html,https://root.cern,https://root.cern/root/html602/TGTable.html,2,['update'],['update']
Deployability,"e; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. Picture; Source. {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }. Function Members (Methods); public:. virtual~TTableRange(); static TClass*Class(); virtual TClass*IsA() const; TTableRange&operator=(const TTableRange&); Bool_toperator==(TTableRange& other); virtual voidPrint(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TTableRange(); TTableRange(const TTableRange&). Data Members; public:. UInt_tfXbrBottom right X coordinate; UInt_tfXtlTop left X coordinate; UInt_tfYbrBottom right Y coordinate; UInt_tfYtlTop left Y coordinate. Class Charts. Inheritance Chart:. TTableRange. Function documentation; TTableRange(); TTableRange constuctor. void Print(); Print the values of a range. Bool_t operator==(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableRange.html:3382,update,update,3382,root/html602/TTableRange.html,https://root.cern,https://root.cern/root/html602/TTableRange.html,2,['update'],['update']
Deployability,"e; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Thu Sep 23 20:00:24 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumGenFactory.html:7160,integrat,integrator,7160,root/html528/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html528/RooNumGenFactory.html,4,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"e; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Mar 10 17:18:15 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumGenFactory.html:7248,integrat,integrator,7248,root/html534/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html534/RooNumGenFactory.html,4,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"e; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:34557,update,update,34557,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,3,['update'],['update']
Deployability,"e; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyc; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooExponential.html:39632,configurat,configuration,39632,root/html532/RooExponential.html,https://root.cern,https://root.cern/root/html532/RooExponential.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:13594,integrat,integrator,13594,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPdfWrapper.html:12784,integrat,integrator,12784,doc/master/classPdfWrapper.html,https://root.cern,https://root.cern/doc/master/classPdfWrapper.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:15653,integrat,integrator,15653,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:15124,integrat,integrator,15124,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:14736,integrat,integrator,14736,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,26,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"e> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. RooAbsReal* makeFunctionInstance(const char* className, const char* name, const char* expression, const RooArgList& vars, const char* intExpression = 0); Write, compile and load code and instantiate object for a; RooAbsReal implementation with class name 'name', taking all; elements of 'vars' as constructor arguments. The initial value; expression is taken to be 'expression' which can be any one-line; C++ expression in terms of variables that occur in 'vars'. The returned object is an instance of the object you just defined; connected to the variables listed in 'vars'. The name of the; object is 'name', its class name Roo<name>Class. This function is an effective compiled replacement of RooFormulaVar. You can add optional expressions for analytical integrals to be; advertised by your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; where <intObsName> a name of the observable integrated over and; <CPPAnaIntExpression> is the C++ expression that calculates that; integral. RooAbsPdf* makePdfInstance(const char* name, const char* expression, const RooArgList& vars, const char* intExpression = 0); Write, compile and load code and instantiate object for a; RooAbsPdf implementation with class name 'name', taking all; elements of 'vars' as constructor arguments. The initial value; expression is taken to be 'expression' which can be any one-line; C++ expression in terms of variables that occur in 'vars'. The returned object is an instance of the object you just defined; connected to the variables listed in 'vars'. The name of the; object is 'name', its class name Roo<name>Class. This function is an effective compiled replacement of RooGenericPdf. You can add optional expressions for analytical integrals to be; advertised by your class in the syntax; ""<intObsName>:<CPPAnaIntExpression>;<intObsName,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooClassFactory.html:11450,integrat,integrated,11450,root/html526/RooClassFactory.html,https://root.cern,https://root.cern/root/html526/RooClassFactory.html,7,['integrat'],['integrated']
Deployability,"eAll(""**"",""^"");; 1774 formula.ReplaceAll(""++"",""@""); // for linear functions; 1775 formula.ReplaceAll("" "","""");; 1776 HandlePolN(formula);; 1777 HandleParametrizedFunctions(formula);; 1778 HandleParamRanges(formula);; 1779 HandleFunctionArguments(formula);; 1780 HandleExponentiation(formula);; 1781 // ""++"" wil be dealt with Handle Linear; 1782 HandleLinear(formula);; 1783 // special case for ""--"" and ""++""; 1784 // (""++"" needs to be written with whitespace that is removed before but then we re-add it again; 1785 formula.ReplaceAll(""--"",""- -"");; 1786 formula.ReplaceAll(""++"",""+ +"");; 1787}; 1788 ; 1789////////////////////////////////////////////////////////////////////////////////; 1790/// prepare the formula to be executed; 1791/// normally is called with fFormula; 1792 ; 1793Bool_t TFormula::PrepareFormula(TString &formula); 1794{; 1795 fFuncs.clear();; 1796 fReadyToExecute = false;; 1797 ExtractFunctors(formula);; 1798 ; 1799 // update the expression with the new formula; 1800 fFormula = formula;; 1801 // save formula to parse variable and parameters for Cling; 1802 fClingInput = formula;; 1803 // replace all { and }; 1804 fFormula.ReplaceAll(""{"","""");; 1805 fFormula.ReplaceAll(""}"","""");; 1806 ; 1807 // std::cout << ""functors are extracted formula is "" << std::endl;; 1808 // std::cout << fFormula << std::endl << std::endl;; 1809 ; 1810 fFuncs.sort();; 1811 fFuncs.unique();; 1812 ; 1813 // use inputFormula for Cling; 1814 ProcessFormula(fClingInput);; 1815 ; 1816 // for pre-defined functions (need after processing); 1817 if (fNumber != 0) SetPredefinedParamNames();; 1818 ; 1819 return fReadyToExecute && fClingInitialized;; 1820}; 1821 ; 1822////////////////////////////////////////////////////////////////////////////////; 1823/// Extracts functors from formula, and put them in fFuncs.; 1824/// Simple grammar:; 1825/// - `<function>` := name(arg1,arg2...); 1826/// - `<variable>` := name; 1827/// - `<parameter>` := [number]; 1828/// - `<name>` := String containing lower and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:68112,update,update,68112,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['update'],['update']
Deployability,"eByKeys ();  ; virtual void DetermineBySparseHist ();  ; virtual void DetermineInterval ();  ; virtual void DetermineShortestInterval ();  ; virtual void DetermineTailFractionInterval ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealVar ** fAxes = nullptr;  array of pointers to RooRealVars representing the axes of the histogram fAxes[0] represents x-axis, [1] y, [2] z, etc ;  ; MarkovChain * fChain = nullptr;  the markov chain ;  ; double fConfidenceLevel = 0.0;  Requested confidence level (eg. 0.95 for 95% CL) ;  ; RooRealVar * fCutoffVar = nullptr;  cutoff variable to use for integrating keys pdf ;  ; RooDataHist * fDataHist = nullptr;  the binned Markov Chain data ;  ; double fDelta = DEFAULT_DELTA;  topCutoff (a) considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); Theoretically, the Abs is not needed here, but floating-point arithmetic does not always work perfectly, and the Abs doesn't hurt ;  ; Int_t fDimension = 1;  number of variables ;  ; double fEpsilon = DEFAULT_EPSILON;  acceptable error for Keys interval determination ;  ; double fFull = 0.0;  Value of intergral of fProduct. ;  ; Heaviside * fHeaviside = nullptr;  the Heaviside function ;  ; TH1 * fHist = nullptr;  the binned Markov Chain data ;  ; double fHistConfLevel = 0.0;  the actual conf level determined by hist ;  ; double fHistCutoff = -1;  cutoff bin size to be in interval ;  ; enum IntervalType fIntervalType = kShortest;  ; bool fIsHistStrict = true;  whether the specified confidence level is a floor for the actual confidence level (strict), or a ceiling (not strict) for determination by histogram ;  ; double fKeysConfLevel = 0.0;  the actual conf level determined by keys ;  ; double fKeysCutoff = -1;  cutoff keys pdf value to be in interval ;  ; RooDataHist * fKeysD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:21462,integrat,integrating,21462,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['integrat'],['integrating']
Deployability,"eCaloData::SetSliceColor(Int_t slice, Color_t col); voidTEveCaloData::SetSliceThreshold(Int_t slice, Float_t threshold); voidTEveCaloData::SetSliceTransparency(Int_t slice, Char_t t); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); voidTEveCaloData::SetWrapTwoPi(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveCaloDataVec(Int_t nslices); virtual voidTEveCaloData::UnHighlighted(); virtual voidTEveCaloData::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCaloDataVec.html:16825,update,update,16825,root/html602/TEveCaloDataVec.html,https://root.cern,https://root.cern/root/html602/TEveCaloDataVec.html,4,['update'],['update']
Deployability,"eCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:43847,integrat,integration,43847,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,1,['integrat'],['integration']
Deployability,"eClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:33291,update,updates,33291,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,4,['update'],['updates']
Deployability,"eCommandskShowSubCache; static TProof::EProofCacheCommandskShowSubPackages; static TProof::EUrgentkShutdownInterrupt; static TProof::EUrgentkSoftInterrupt; static TProof::EProofDataSetCommandskStagingStatus; static TProof::EProofCacheCommandskUnloadPackage; static TProof::EProofCacheCommandskUnloadPackages; static TProof::EProofDataSetCommandskUploadDataSet; static TProof::EProofDataSetCommandskVerifyDataSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProof(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configurations).; The default is proof.conf. Confdir is the directory where the config; file and other PROOF related files are (like motd and noproof files).; Loglevel is the log level (default = 1). User specified custom config; files will be first looked for in $HOME/.conffile. TProof(); Protected constructor to be used by classes deriving from TProof; (they have to call Init themselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:38052,configurat,configurations,38052,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['configurat'],['configurations']
Deployability,"eCompositeFrameInMainFrame, TEveCompositeFrameInPack, and TEveCompositeFrameInTab.; Definition at line 103 of file TEveWindow.h. ◆ operator=(). TEveCompositeFrame & TEveCompositeFrame::operator= ; (; const TEveCompositeFrame & ; ). private . ◆ RelinquishEveWindow(). TEveWindow * TEveCompositeFrame::RelinquishEveWindow ; (; Bool_t ; reparent = kTRUE). virtual . Remove window and decrease its deny-destroy count. ; Window's gui-frame is unmapped, removed and, if reparent flag is true (default), reparented to default-root. ; Definition at line 238 of file TEveWindow.cxx. ◆ SetCurrent(). void TEveCompositeFrame::SetCurrent ; (; Bool_t ; curr). virtual . Set current state of this frame. ; This is called by the management functions in TEveWindow. ; Reimplemented in TEveCompositeFrameInTab.; Definition at line 271 of file TEveWindow.cxx. ◆ SetShowTitleBar(). void TEveCompositeFrame::SetShowTitleBar ; (; Bool_t ; show). virtual . Set state of title-bar. ; This toggles between the display of the full title-bar and 4-pixel-high mini-bar. ; Definition at line 285 of file TEveWindow.cxx. ◆ SetupFrameMarkup(). void TEveCompositeFrame::SetupFrameMarkup ; (; IconBarCreator_foo ; creator, . UInt_t ; top_frame_height = 14, . UInt_t ; mini_bar_height = 4, . Bool_t ; allow_top_collapse = kTRUE . ). static . Set properties of the EVE frame. ; Should be called before the windows are created. ; Definition at line 71 of file TEveWindow.cxx. ◆ ShowNormalDecorations(). void TEveCompositeFrame::ShowNormalDecorations ; (; ). virtual . Show title-bar or mini-bar, as dictated by the window. ; Definition at line 312 of file TEveWindow.cxx. ◆ Streamer(). void TEveCompositeFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TEveCompositeFrameInMainFrame, TEveCompositeFrameInPack, and TEveCompositeFrameInTab. ◆ StreamerNVirtual(). void TEveCompositeFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrame.html:38119,toggle,toggles,38119,doc/master/classTEveCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tinitialize(); voidTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooIntegrator1D**_arrayArray of segment integrators; RooNumIntConfig_config; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_nsegNumber of segments ; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range; Bool_t_useIntegrandLimits; Bool_t_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmax; Double_t_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Constructor. coverity[UNINIT_CTOR]. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSegmentedIntegrator1D.html:6253,integrat,integrators,6253,root/html528/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooSegmentedIntegrator1D.html,12,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tinitialize(); voidTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooIntegrator1D**_arrayArray of segment integrators; RooNumIntConfig_config; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_nsegNumber of segments ; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range; Bool_t_useIntegrandLimits; Bool_t_valid; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t_xmax; Double_t_xmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooSegmentedIntegrator1D, its parameters, dependencies and capabilities with RooNumIntFactory. RooSegmentedIntegrator1D(); Destructor. RooSegmentedIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding. RooSegmentedIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor integral on given function binding, with given configuration and; explicit definition of integration range. RooAbsInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSegmentedIntegrator1D.html:6267,integrat,integrators,6267,root/html526/RooSegmentedIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooSegmentedIntegrator1D.html,3,['integrat'],"['integration', 'integrator', 'integrators']"
Deployability,"eDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfInput p.d.f; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; const TNamed*_rangeNameName of subset range; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExtendPdf(); Default cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:39753,configurat,configuration,39753,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidSetShape(TGeoShape* s); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteExtract(const char* name); virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveGeoShape.html:17770,update,update,17770,root/html534/TEveGeoShape.html,https://root.cern,https://root.cern/root/html534/TEveGeoShape.html,2,['update'],['update']
Deployability,"eElement::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveElementObjectPtr(const TEveElementObjectPtr& e); TEveElementObjectPtr(TObject* obj, Bool_t own = kTRUE); TEveElementObjectPtr(TObject* obj, Color_t& mainColor, Bool_t own = kTRUE); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveElementObjectPtr.html:14633,update,update,14633,root/html602/TEveElementObjectPtr.html,https://root.cern,https://root.cern/root/html602/TEveElementObjectPtr.html,4,['update'],['update']
Deployability,"eElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidSetSliceColor(Int_t slice, Color_t col); voidSetSliceThreshold(Int_t slice, Float_t threshold); voidSetSliceTransparency(Int_t slice, Char_t t); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); voidSetWrapTwoPi(Bool_t w); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidUnHighlighted(); virtual voidUnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveCaloData.html:16238,update,update,16238,root/html534/TEveCaloData.html,https://root.cern,https://root.cern/root/html534/TEveCaloData.html,2,['update'],['update']
Deployability,"eElement::SetRnrState(Bool_t rnr); voidSetShowTitleBar(Bool_t x); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSwapWindow(TEveWindow* w); static voidSwapWindows(TEveWindow* w1, TEveWindow* w2); voidSwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTitleBarClicked(); voidUndockWindow()MENU ; voidUndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveWindow.html:17116,update,update,17116,root/html534/TEveWindow.html,https://root.cern,https://root.cern/root/html534/TEveWindow.html,2,['update'],['update']
Deployability,"eElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual Int_tSubImportChildren(TEveElement* el, TEveElement* proj_parent); virtual TEveElement*SubImportElements(TEveElement* el, TEveElement* proj_parent); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveProjectionManager(TEveProjection::EPType_e type = TEveProjection::kPT_Unknown); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidUpdateName(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjectionManager.html:16882,update,update,16882,root/html602/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html602/TEveProjectionManager.html,4,['update'],['update']
Deployability,"eElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSwapWindow(TEveWindow* w); static voidSwapWindows(TEveWindow* w1, TEveWindow* w2); voidSwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindow(const char* n = ""TEveWindow"", const char* t = """"); voidTitleBarClicked(); voidUndockWindow()MENU ; voidUndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindow.html:17161,update,update,17161,root/html602/TEveWindow.html,https://root.cern,https://root.cern/root/html602/TEveWindow.html,4,['update'],['update']
Deployability,"eFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Types; enum  IntOperMode { Hybrid; , Analytic; , PassThrough; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; RooArgSet const * actualFuncNormSet () const;  ; void autoSelectDirtyMode ();  Set appropriate cache operation mode for integral depending on cache operation mode of server objects. ;  ; double evaluate () const override;  Perform the integration and return the result. ;  ; bool initNumIntegrator () const;  (Re)Initialize numerical integration engine if necessary. ;  ; virtual double integrate () const;  Perform hybrid numerical/analytical integration over all real-valued dependents. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if current value is valid. ;  ; virtual double jacobianProduct () const;  Return product of jacobian terms originating from analytical integration. ;  ; const RooArgSet & parameters () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Intercept server redirects and reconfigure internal object accordingly. ;  ; virtual double sum () const;  Perform summation of list of category dependents to be integrated. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:50295,integrat,integration,50295,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['integrat'],['integration']
Deployability,"eFrame(); If fEveWindow != 0 we are being deleted from the ROOT GUI side.; Relinquishe EveWindow and ref-counting should do the rest. void WindowNameChanged(const TString& name); Update widgets using window's name or title. void AcquireEveWindow(TEveWindow* ew); Accept window and increase its deny-destroy count.; Window's gui-frame is embedded and mapped.; Layout is not called. Throws an exception if a window is already embedded or if 0 is; passed as an argument. TEveWindow* RelinquishEveWindow(Bool_t reparent = kTRUE); Remove window and decrease its deny-destroy count.; Window's gui-frame is unmapped, removed and, if reparent flag is; true (default), reparented to default-root. TEveWindow* GetEveParentAsWindow() const; Returns eve-parent dynamic-casted to TEveWindow. void SetCurrent(Bool_t curr); Set current state of this frame.; This is called by the management functions in TEveWindow. void SetShowTitleBar(Bool_t show); Set state of title-bar. This toggles between the display of the full; title-bar and 4-pixel-high mini-bar. void HideAllDecorations(); Hide title-bar and mini-bar. void ShowNormalDecorations(); Show title-bar or mini-bar, as dictated by the window. void ActionPressed(); The action-button of the title-bar was pressed.; This opens context menu of the eve-window. void FlipTitleBarState(); Change display-state of the title-bar / mini-bar.; This function is used as a slot and passes the call to eve-window. void TitleBarClicked(); Slot for mouse-click on the central part of the title-bar.; The call is passed to eve-window. TEveCompositeFrame& operator=(const TEveCompositeFrame& ). void Destroy(). TEveWindow* GetEveWindow() const; { return fEveWindow; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveCompositeFrame.html:21892,toggle,toggles,21892,root/html534/TEveCompositeFrame.html,https://root.cern,https://root.cern/root/html534/TEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eFrame(); If fEveWindow != 0 we are being deleted from the ROOT GUI side.; Relinquishe EveWindow and ref-counting should do the rest. void WindowNameChanged(const TString& name); Update widgets using window's name or title. void AcquireEveWindow(TEveWindow* ew); Accept window and increase its deny-destroy count.; Window's gui-frame is embedded and mapped.; Layout is not called. Throws an exception if a window is already embedded or if 0 is; passed as an argument. TEveWindow* RelinquishEveWindow(Bool_t reparent = kTRUE); Remove window and decrease its deny-destroy count.; Window's gui-frame is unmapped, removed and, if reparent flag is; true (default), reparented to default-root. TEveWindow* GetEveParentAsWindow() const; Returns eve-parent dynamic-casted to TEveWindow. void SetCurrent(Bool_t curr); Set current state of this frame.; This is called by the management functions in TEveWindow. void SetShowTitleBar(Bool_t show); Set state of title-bar. This toggles between the display of the full; title-bar and 4-pixel-high mini-bar. void HideAllDecorations(); Hide title-bar and mini-bar. void ShowNormalDecorations(); Show title-bar or mini-bar, as dictated by the window. void ActionPressed(); The action-button of the title-bar was pressed.; This opens context menu of the eve-window. void FlipTitleBarState(); Change display-state of the title-bar / mini-bar.; This function is used as a slot and passes the call to eve-window. void TitleBarClicked(); Slot for mouse-click on the central part of the title-bar.; The call is passed to eve-window. TEveCompositeFrame& operator=(const TEveCompositeFrame& ). void Destroy(). TEveWindow* GetEveWindow() const; { return fEveWindow; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveWindow.h 32138 2010-01-28 15:16:30Z matevz $ » Last generated: 2010-09-23 20:03; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCompositeFrame.html:21770,toggle,toggles,21770,root/html528/TEveCompositeFrame.html,https://root.cern,https://root.cern/root/html528/TEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eFrame(); If fEveWindow != 0 we are being deleted from the ROOT GUI side.; Relinquishe EveWindow and ref-counting should do the rest. void WindowNameChanged(const TString& name); Update widgets using window's name or title. void AcquireEveWindow(TEveWindow* ew); Accept window and increase its deny-destroy count.; Window's gui-frame is embedded and mapped.; Layout is not called. Throws an exception if a window is already embedded or if 0 is; passed as an argument. TEveWindow* RelinquishEveWindow(Bool_t reparent = kTRUE); Remove window and decrease its deny-destroy count.; Window's gui-frame is unmapped, removed and, if reparent flag is; true (default), reparented to default-root. TEveWindow* GetEveParentAsWindow() const; Returns eve-parent dynamic-casted to TEveWindow. void SetCurrent(Bool_t curr); Set current state of this frame.; This is called by the management functions in TEveWindow. void SetShowTitleBar(Bool_t show); Set state of title-bar. This toggles between the display of the full; title-bar and 4-pixel-high mini-bar. void HideAllDecorations(); Hide title-bar and mini-bar. void ShowNormalDecorations(); Show title-bar or mini-bar, as dictated by the window. void ActionPressed(); The action-button of the title-bar was pressed.; This opens context menu of the eve-window. void FlipTitleBarState(); Change display-state of the title-bar / mini-bar.; This function is used as a slot and passes the call to eve-window. void TitleBarClicked(); Slot for mouse-click on the central part of the title-bar.; The call is passed to eve-window. TEveCompositeFrame& operator=(const TEveCompositeFrame& ). void Destroy(). TEveWindow* GetEveWindow() const; { return fEveWindow; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveWindow.h 32138 2010-01-28 15:16:30Z matevz $ » Last generated: 2011-07-04 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveCompositeFrame.html:21870,toggle,toggles,21870,root/html530/TEveCompositeFrame.html,https://root.cern,https://root.cern/root/html530/TEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eFrame(); If fEveWindow != 0 we are being deleted from the ROOT GUI side.; Relinquishe EveWindow and ref-counting should do the rest. void WindowNameChanged(const TString& name); Update widgets using window's name or title. void AcquireEveWindow(TEveWindow* ew); Accept window and increase its deny-destroy count.; Window's gui-frame is embedded and mapped.; Layout is not called. Throws an exception if a window is already embedded or if 0 is; passed as an argument. TEveWindow* RelinquishEveWindow(Bool_t reparent = kTRUE); Remove window and decrease its deny-destroy count.; Window's gui-frame is unmapped, removed and, if reparent flag is; true (default), reparented to default-root. TEveWindow* GetEveParentAsWindow() const; Returns eve-parent dynamic-casted to TEveWindow. void SetCurrent(Bool_t curr); Set current state of this frame.; This is called by the management functions in TEveWindow. void SetShowTitleBar(Bool_t show); Set state of title-bar. This toggles between the display of the full; title-bar and 4-pixel-high mini-bar. void HideAllDecorations(); Hide title-bar and mini-bar. void ShowNormalDecorations(); Show title-bar or mini-bar, as dictated by the window. void ActionPressed(); The action-button of the title-bar was pressed.; This opens context menu of the eve-window. void FlipTitleBarState(); Change display-state of the title-bar / mini-bar.; This function is used as a slot and passes the call to eve-window. void TitleBarClicked(); Slot for mouse-click on the central part of the title-bar.; The call is passed to eve-window. TEveCompositeFrame& operator=(const TEveCompositeFrame& ). void Destroy(). TEveWindow* GetEveWindow() const; { return fEveWindow; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id: TEveWindow.h 32138 2010-01-28 15:16:30Z matevz $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveCompositeFrame.html:21870,toggle,toggles,21870,root/html532/TEveCompositeFrame.html,https://root.cern,https://root.cern/root/html532/TEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eFrame(); If fEveWindow != 0 we are being deleted from the ROOT GUI side.; Relinquishe EveWindow and ref-counting should do the rest. void WindowNameChanged(const TString& name); Update widgets using window's name or title. void AcquireEveWindow(TEveWindow* ew); Accept window and increase its deny-destroy count.; Window's gui-frame is embedded and mapped.; Layout is not called. Throws an exception if a window is already embedded or if 0 is; passed as an argument. TEveWindow* RelinquishEveWindow(Bool_t reparent = kTRUE); Remove window and decrease its deny-destroy count.; Window's gui-frame is unmapped, removed and, if reparent flag is; true (default), reparented to default-root. TEveWindow* GetEveParentAsWindow() const; Returns eve-parent dynamic-casted to TEveWindow. void SetCurrent(Bool_t curr); Set current state of this frame.; This is called by the management functions in TEveWindow. void SetShowTitleBar(Bool_t show); Set state of title-bar. This toggles between the display of the full; title-bar and 4-pixel-high mini-bar. void HideAllDecorations(); Hide title-bar and mini-bar. void ShowNormalDecorations(); Show title-bar or mini-bar, as dictated by the window. void ActionPressed(); The action-button of the title-bar was pressed.; This opens context menu of the eve-window. void FlipTitleBarState(); Change display-state of the title-bar / mini-bar.; This function is used as a slot and passes the call to eve-window. void TitleBarClicked(); Slot for mouse-click on the central part of the title-bar.; The call is passed to eve-window. TEveCompositeFrame(const TEveCompositeFrame& ). TEveCompositeFrame& operator=(const TEveCompositeFrame& ). void Destroy(). TEveWindow* GetEveWindow() const; { return fEveWindow; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveCompositeFrame.html:22955,toggle,toggles,22955,root/html604/TEveCompositeFrame.html,https://root.cern,https://root.cern/root/html604/TEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eFrame(); If fEveWindow != 0 we are being deleted from the ROOT GUI side.; Relinquishe EveWindow and ref-counting should do the rest. void WindowNameChanged(const TString& name); Update widgets using window's name or title. void AcquireEveWindow(TEveWindow* ew); Accept window and increase its deny-destroy count.; Window's gui-frame is embedded and mapped.; Layout is not called. Throws an exception if a window is already embedded or if 0 is; passed as an argument. TEveWindow* RelinquishEveWindow(Bool_t reparent = kTRUE); Remove window and decrease its deny-destroy count.; Window's gui-frame is unmapped, removed and, if reparent flag is; true (default), reparented to default-root. TEveWindow* GetEveParentAsWindow() const; Returns eve-parent dynamic-casted to TEveWindow. void SetCurrent(Bool_t curr); Set current state of this frame.; This is called by the management functions in TEveWindow. void SetShowTitleBar(Bool_t show); Set state of title-bar. This toggles between the display of the full; title-bar and 4-pixel-high mini-bar. void HideAllDecorations(); Hide title-bar and mini-bar. void ShowNormalDecorations(); Show title-bar or mini-bar, as dictated by the window. void ActionPressed(); The action-button of the title-bar was pressed.; This opens context menu of the eve-window. void FlipTitleBarState(); Change display-state of the title-bar / mini-bar.; This function is used as a slot and passes the call to eve-window. void TitleBarClicked(); Slot for mouse-click on the central part of the title-bar.; The call is passed to eve-window. TEveCompositeFrame(const TEveCompositeFrame& ). TEveCompositeFrame& operator=(const TEveCompositeFrame& ). void Destroy(). TEveWindow* GetEveWindow() const; { return fEveWindow; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:44; This page has been automatically generated. For comments or suggestions regarding the documentation or RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCompositeFrame.html:22955,toggle,toggles,22955,root/html602/TEveCompositeFrame.html,https://root.cern,https://root.cern/root/html602/TEveCompositeFrame.html,1,['toggle'],['toggles']
Deployability,"eGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionServerFrame.html:20118,configurat,configuration,20118,root/html528/TSessionServerFrame.html,https://root.cern,https://root.cern/root/html528/TSessionServerFrame.html,4,['configurat'],['configuration']
Deployability,"eHessErrors ();  ; bool calculateMinosErrors ();  ; void determineStatus (bool fitterReturnValue);  ; int exec (std::string const &algoName, std::string const &statusName);  ; double & fcnOffset () const;  ; void fillCorrMatrix (RooFitResult &fitRes);  ; void fillResult (bool isValid);  ; bool fitFCN (const ROOT::Math::IMultiGenFunction &fcn);  ; void initMinimizer ();  ; void initMinimizerFcnDependentPart (double defaultErrorLevel);  Initialize the part of the minimizer that is dependent on the function to be minimized. ;  ; void initMinimizerFirstPart ();  Initialize the part of the minimizer that is independent of the function to be minimized. ;  ; std::ofstream * logfile ();  ; std::unique_ptr< RooAbsReal::EvalErrorContext > makeEvalErrorContext () const;  ; double & maxFCN ();  ; void profileStart ();  Start profiling timer. ;  ; void profileStop ();  Stop profiling timer and report results of last session. ;  ; bool update (bool isValid);  ; void updateErrors ();  ; void updateFitConfig ();  ; bool updateMinimizerOptions (bool canDifferentMinim=true);  . Private Attributes; RooMinimizer::Config _cfg;  ; ROOT::Fit::FitConfig _config;  fitter configuration (options and parameter settings) ;  ; TStopwatch _cumulTimer;  ; std::unique_ptr< TMatrixDSym > _extV;  ; std::unique_ptr< RooAbsMinimizerFcn > _fcn;  ; std::unique_ptr< ROOT::Math::Minimizer > _minimizer;  ! pointer to used minimizer ;  ; bool _profileStart = false;  ; std::unique_ptr< FitResult > _result;  ! pointer to the object containing the result of the fit ;  ; int _status = -99;  ; std::vector< std::pair< std::string, int > > _statusHistory;  ; TStopwatch _timer;  . Friends; class RooAbsMinimizerFcn;  ; class RooFit::TestStatistics::LikelihoodGradientJob;  ; class RooMinimizerFcn;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:14640,update,update,14640,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,4,['update'],"['update', 'updateErrors', 'updateFitConfig', 'updateMinimizerOptions']"
Deployability,"eLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char *name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char *name); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1,		 const char *name); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2,		 const char *name); Constructor for set containing 2 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:14228,release,release,14228,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,1,['release'],['release']
Deployability,"eLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char* name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char* name = """"); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1, const char* name = """"); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const char* name = """"); Constructor for set containing 2 initial objects. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgSet.html:14254,release,release,14254,root/html528/RooArgSet.html,https://root.cern,https://root.cern/root/html528/RooArgSet.html,2,['release'],['release']
Deployability,"eManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxydm; RooRealProxydm0; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDstD0BG.html:38812,configurat,configuration,38812,root/html528/RooDstD0BG.html,https://root.cern,https://root.cern/root/html528/RooDstD0BG.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooPoisson.html:38883,configurat,configuration,38883,root/html528/RooPoisson.html,https://root.cern,https://root.cern/root/html528/RooPoisson.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eMinimizer() could eventually be used. TFitResult * GetTFitResult() const; return a new copy of the TFitResult object which needs to be deleted later by the user. bool Scan(unsigned int ipar, TGraph* gr, double xmin = 0, double xmax = 0); scan parameter ipar between value of xmin and xmax; a graph must be given which will be on return filled with the scan resul; If the graph size is zero, a default size n = 40 will be used; *. bool Contour(unsigned int ipar, unsigned int jpar, TGraph* gr, double confLevel = 0.683); create a 2D contour around the minimum for the parameter ipar and jpar; if a minimum does not exist or is invalid it will return false; on exit a TGraph is filled with the contour points; the number of contur points is determined by the size of the TGraph.; if the size is zero a default number of points = 20 is used; pass optionally the confidence level, default is 0.683; it is assumed that ErrorDef() defines the right error definition; (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level. TBackCompFitter(). void SetMethodCall(TMethodCall* m); for using interpreted function passed by the user. { fMethodCall = m; }. ROOT::Fit::FitConfig & GetFitConfig(); !!!! new method (of this interface); get reference to Fit configuration (NOTE: it will be invalid when class is deleted). { return fFitter->Config(); }. const ROOT::Fit::FitResult & GetFitResult() const; get reference to Fit Result object (NOTE: it will be invalid when class is deleted). { return fFitter->Result(); }. const ROOT::Fit::FitData & GetFitData() const; get reference to Fit Data object (NOTE: it will be invalid when class is deleted). { return *fFitData; }. » Author: L. Moneta 08/2008 » Copyright (c) 2008 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBackCompFitter.html:19187,configurat,configuration,19187,root/html534/TBackCompFitter.html,https://root.cern,https://root.cern/root/html534/TBackCompFitter.html,1,['configurat'],['configuration']
Deployability,"eMoveEvent(QMouseEvent* e); virtual voidmousePressEvent(QMouseEvent* e); virtual voidmouseReleaseEvent(QMouseEvent* e); virtual voidpaintEvent(QPaintEvent* e); virtual voidresizeEvent(QResizeEvent* e). private:. TQRootCanvas(const TQRootCanvas&); TQRootCanvas&operator=(const TQRootCanvas&). Data Members; protected:. TCanvas*fCanvasRoot Canvas; TQCanvasMenu*fContextMenuQt Context menu for this canvas; Bool_tfIsCanvasOwnedOwnership flag; Bool_tfNeedResizeResize flag; QWidget*fParent; QWidget*fTabWinparent widgets; Int_tfWidWindows Id of the Canvas. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQRootCanvas(QWidget* parent = 0, const char* name = 0, TCanvas* c = 0); set defaults. TQRootCanvas(QWidget* parent, QWidget* tabWin, const char* name = 0, TCanvas* c = 0); set defaults. void mouseMoveEvent(QMouseEvent* e); Handle mouse move event. void mousePressEvent(QMouseEvent* e); Handle mouse button press event. void mouseReleaseEvent(QMouseEvent* e); Handle mouse button release event. void mouseDoubleClickEvent(QMouseEvent* e); Handle mouse double click event. void resizeEvent(QResizeEvent* e); Call QWidget resize and inform the ROOT Canvas. void paintEvent(QPaintEvent* e); Handle paint event of Qt. void leaveEvent(QEvent* e); Handle leave event. void dragEnterEvent(QDragEnterEvent* e); Entering a drag event. void dropEvent(QDropEvent* Event); Start a drop, for now only histogram objects can be drwon by droping. void cd(Int_t subpadnumber = 0); Just a wrapper. void Browse(TBrowser* b); Just a wrapper. void Clear(Option_t* option = """"); Just a wrapper. void Close(Option_t* option = """"); Just a wrapper. void Draw(Option_t* option = """"); Just a wrapper. TObject * DrawClone(Option_t* option = """"); Just a wrapper. TObject * DrawClonePad(); Just a wrapper. void EditorBar(); Just a wrapper. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); just a wrapper. void FeedbackMode(Bool_t set); just a wrapper. void Flush(); just a wrapper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:4337,release,release,4337,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,3,['release'],['release']
Deployability,"eName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; std::unique_ptr< RooHist > createEmptyResidHist (const RooCurve &curve, bool normalize=false) const;  ; void fillResidHist (RooHist &residHist, const RooCurve &curve, bool normalize=false, bool useAverage=false) const;  ; void initialize ();  Perform common initialization for all constructors. ;  ; Int_t roundBin (double y);  Return the nearest positive integer to the input value and print a warning if an adjustment is required. ;  ;  Protected Member Functions inherited from TGraphAsymmErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAlloc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:37567,release,release,37567,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['release'],['release']
Deployability,"eName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:2528,integrat,integration,2528,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['integrat'],['integration']
Deployability,"eNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_ownBasisFlag indicating ownership of _basis ; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyxDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:44595,configurat,configuration,44595,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooListProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooUniform.html:39170,configurat,configuration,39170,root/html530/RooUniform.html,https://root.cern,https://root.cern/root/html530/RooUniform.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/empty.md if this is not a patch release; git commit README/ReleaseNotes/vXXX/index.md. Update to the next development version. edit build/version_number (odd patch number); make version, check in. Push to github. $ git push origin vX-YY-00-patches; $ git push origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded: this works for authenticated users only!).; Eventually edit the 'highlights' section, which is currently commented, in the generated release page.; If this applies, mark the release as Pro or Old and remove the attribute to the one previously holding it. There are radio buttons exposed by Drupal when editing a release's page.; If not a patch release edit referen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:3296,patch,patches,3296,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['patch'],['patches']
Deployability,"eOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooVoigtian.html:39806,configurat,configuration,39806,root/html530/RooVoigtian.html,https://root.cern,https://root.cern/root/html530/RooVoigtian.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfItr!; RooListProxy_pdfList; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooMomentMorph::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; bool_useHorizMorph; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMomentMorph.html:44716,configurat,configuration,44716,root/html602/RooMomentMorph.html,https://root.cern,https://root.cern/root/html602/RooMomentMorph.html,6,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eRCanvas () const;  ; std::string GetWindowUrl (bool remote);  Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void Hide ();  hide Browser ;  ; void SetCatchWindowShow (bool on=true);  Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ;  ; void SetUseRCanvas (bool on=true);  ; void SetWorkingPath (const std::string &path);  Set working path in the browser. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Check if any widget was modified and update if necessary. ;  ; void CloseTab (const std::string &name);  Close and delete specified widget. ;  ; std::shared_ptr< RBrowserWidget > FindWidget (const std::string &name, const std::string &kind="""") const;  Find widget by name or kind. ;  ; std::shared_ptr< RBrowserWidget > GetActiveWidget () const;  ; std::string GetCurrentWorkingDirectory ();  Return the current directory of ROOT. ;  ; std::vector< std::string > GetRootHistory ();  Get content of history file. ;  ; std::vector< std::string > GetRootLogs ();  Get content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process rece",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowser.html:2035,update,update,2035,doc/v632/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html,1,['update'],['update']
Deployability,"eRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,bool>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html:39755,configurat,configuration,39755,root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3PdfBinding_double_double_double_bool_.html,1,['configurat'],['configuration']
Deployability,"eRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_int_int_.html:40111,integrat,integrator,40111,root/html532/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html532/RooCFunction3PdfBinding_double_double_int_int_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/PiecewiseInterpolation.html:35608,integrat,integrator,35608,root/html534/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html534/PiecewiseInterpolation.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eSize=5%:MaxDepth=3:BoostType=AdaBoost:SeparationType=GiniIndex:nCuts=20:VarTransform=Decorrelate"" );; 504 ; 505 if (Use[""BDTF""]) // Allow Using Fisher discriminant in node splitting for (strong) linearly correlated variables; 506 factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDTF"",; 507 ""!H:!V:NTrees=50:MinNodeSize=2.5%:UseFisherCuts:MaxDepth=3:BoostType=AdaBoost:AdaBoostBeta=0.5:SeparationType=GiniIndex:nCuts=20"" );; 508 ; 509 // RuleFit -- TMVA implementation of Friedman's method; 510 if (Use[""RuleFit""]); 511 factory->BookMethod( dataloader, TMVA::Types::kRuleFit, ""RuleFit"",; 512 ""H:!V:RuleFitModule=RFTMVA:Model=ModRuleLinear:MinImp=0.001:RuleMinDist=0.001:NTrees=20:fEventsMin=0.01:fEventsMax=0.5:GDTau=-1.0:GDTauPrec=0.01:GDStep=0.01:GDNSteps=10000:GDErrScale=1.02"" );; 513 ; 514 // For an example of the category classifier usage, see: TMVAClassificationCategory; 515 //; 516 // --------------------------------------------------------------------------------------------------; 517 // Now you can optimize the setting (configuration) of the MVAs using the set of training events; 518 // STILL EXPERIMENTAL and only implemented for BDT's !; 519 //; 520 // factory->OptimizeAllMethods(""SigEffAtBkg0.01"",""Scan"");; 521 // factory->OptimizeAllMethods(""ROCIntegral"",""FitGA"");; 522 //; 523 // --------------------------------------------------------------------------------------------------; 524 ; 525 // Now you can tell the factory to train, test, and evaluate the MVAs; 526 //; 527 // Train MVAs using the set of training events; 528 factory->TrainAllMethods();; 529 ; 530 // Evaluate all MVAs using the set of test events; 531 factory->TestAllMethods();; 532 ; 533 // Evaluate and compare performance of all configured MVAs; 534 factory->EvaluateAllMethods();; 535 ; 536 // --------------------------------------------------------------; 537 ; 538 // Save the output; 539 outputFile->Write();; 540 ; 541 std::cout << ""==> Wrote root file: "" << outputFile->GetName() << std::endl;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:26339,configurat,configuration,26339,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['configurat'],['configuration']
Deployability,eWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selec,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:39846,integrat,integrated,39846,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['integrat'],['integrated']
Deployability,eWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxy,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:40228,integrat,integrated,40228,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,2,['integrat'],['integrated']
Deployability,eWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_p,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:41100,integrat,integrated,41100,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['integrat'],['integrated']
Deployability,"e_t getVal(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(const RooArgSet* nset) const. const char* inputBaseName() const. RooArgSet* actualObservables(const RooArgSet& nset) const. RooArgSet* actualParameters(const RooArgSet& nset) const. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const. void disableCache(Bool_t flag); Switch to disable caching mechanism. » Last changed: Mon Dec 7 13:45:34 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:35099,integrat,integration,35099,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,1,['integrat'],['integration']
Deployability,"e_t themax = 180., Int_t nphi = 60, Double_t phimin = 0., Double_t phimax = 360., Double_t rmin = 0., Double_t rmax = 9999999, Option_t* option = """"); Generate a lego plot fot the top volume, according to option. void RegisterYourself(Option_t* option = """"); Register the volume and all materials/media/matrices/shapes to the manager. void RandomPoints(Int_t npoints = 1000000, Option_t* option = """"); Draw random points in the bounding box of this volume. void RandomRays(Int_t nrays = 10000, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0, const char* target_vol = 0, Bool_t check_norm = kFALSE); Random raytracing method. void Raytrace(Bool_t flag = kTRUE); Draw this volume with current settings and perform raytracing in the pad. void SaveAs(const char* filename, Option_t* option = """") const; Save geometry having this as top volume as a C++ macro. void SetUserExtension(TGeoExtension* ext); Connect user-defined extension to the volume. The volume ""grabs"" a copy, so; the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for user extensions and is guaranteed not; to be used by TGeo. void SetFWExtension(TGeoExtension* ext); Connect framework defined extension to the volume. The volume ""grabs"" a copy,; so the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for the use by TGeo and the users should; NOT connect extensions using this method. TGeoExtension * GrabUserExtension() const; Get a copy of the user extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). TGeoExtension * GrabFWExtension() const; Get a copy of the framework extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). void SavePrimitiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:38637,release,released,38637,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['release'],['released']
Deployability,"e_t z, Double_t rho, Double_t radlen = 0, Double_t intlen = 0); constructor. TGeoMaterial(const char* name, Double_t a, Double_t z, Double_t rho, TGeoMaterial::EGeoMaterialState state, Double_t temperature = STP_temperature, Double_t pressure = STP_pressure); Constructor with state, temperature and pressure. TGeoMaterial(const char* name, TGeoElement* elem, Double_t rho); constructor. TGeoMaterial(const TGeoMaterial& ); copy constructor. TGeoMaterial& operator=(const TGeoMaterial& ); assignment operator. ~TGeoMaterial(); Destructor. void SetUserExtension(TGeoExtension* ext); Connect user-defined extension to the material. The material ""grabs"" a copy, so; the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for user extensions and is guaranteed not; to be used by TGeo. void SetFWExtension(TGeoExtension* ext); Connect framework defined extension to the material. The material ""grabs"" a copy,; so the original object can be released by the producer. Release the previously; connected extension if any. NOTE: This interface is intended for the use by TGeo and the users should; NOT connect extensions using this method. TGeoExtension * GrabUserExtension() const; Get a copy of the user extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). TGeoExtension * GrabFWExtension() const; Get a copy of the framework extension pointer. The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). char * GetPointerName() const; Provide a pointer name containing uid. void SetRadLen(Double_t radlen, Double_t intlen = 0.); Set radiation/absorbtion lengths. If the values are negative, their absolute value; is taken, otherwise radlen is recomputed using G3 formula. Double_t Coulomb(Double_t z); static function; Compute Coulomb correctio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMaterial.html:10244,release,released,10244,root/html534/TGeoMaterial.html,https://root.cern,https://root.cern/root/html534/TGeoMaterial.html,3,['release'],['released']
Deployability,"e_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:45566,configurat,configuration,45566,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumIntConfig*_default; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooCategory_method1DSelects integration method for 1D integrals; RooCategory_method1DOpenSelects integration method for open ended 1D integrals; RooCategory_method2DSelects integration method for 2D integrals; RooCategory_method2DOpenSelects integration method for open ended 2D integrals; RooCategory_methodNDSelects integration method for ND integrals; RooCategory_methodNDOpenSelects integration method for open ended ND integrals; static Int_tRooPrintable::_nameLength; Bool_t_printEvalCounterFlag to control printing of function evaluation counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumIntConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumIntConfig(); Constructor. ~RooNumIntConfig(); Destructor. RooNumIntConfig(const RooNumIntConfig& other); Copy constructor. RooNumIntConfig& operator=(const RooNumIntConfig& other); Assignment operator from other RooNumIntConfig. Bool_t addConfigSection(const RooAbsIntegrator* proto, const RooArgSet& defaultConfig); Add a configuration section for a particular integrator. Integrator name and capabilities are; automatically determined from instance passed as 'proto'. The defaultConfig object is associated; as the default configuration for the integrator. RooArgSet& getConfigSection(const char* name); Return section with configuration parameters for integrator with given (class) name. const RooArgSet& getConfigSection(const char* name) const; Retrieve configuration information specific to integrator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumIntConfig.html:8193,install,installed,8193,root/html528/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html528/RooNumIntConfig.html,4,['install'],['installed']
Deployability,"eader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumIntConfig*_default; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooCategory_method1DSelects integration method for 1D integrals; RooCategory_method1DOpenSelects integration method for open ended 1D integrals; RooCategory_method2DSelects integration method for 2D integrals; RooCategory_method2DOpenSelects integration method for open ended 2D integrals; RooCategory_methodNDSelects integration method for ND integrals; RooCategory_methodNDOpenSelects integration method for open ended ND integrals; static Int_tRooPrintable::_nameLength; Bool_t_printEvalCounterFlag to control printing of function evaluation counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumIntConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumIntConfig(); Constructor. ~RooNumIntConfig(); Destructor. RooNumIntConfig(const RooNumIntConfig& other); Copy constructor. RooNumIntConfig& operator=(const RooNumIntConfig& other); Assignment operator from other RooNumIntConfig. Bool_t addConfigSection(const RooAbsIntegrator* proto, const RooArgSet& defaultConfig); Add a configuration section for a particular integrator. Integrator name and capabilities are; automatically determined from instance passed as 'proto'. The defaultConfig object is associated; as the default configuration for the integrator. RooArgSet& getConfigSection(const char* name); Return section with configuration parameters for integrator with given (class) name. const RooArgSet& getConfigSection(const char* name); Retrieve configuration information specific to integrator with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntConfig.html:8207,install,installed,8207,root/html526/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html526/RooNumIntConfig.html,1,['install'],['installed']
Deployability,"eal with '*'. */; 18571 break;; 18572 case 2:; 18573 /* relative uri */; 18574 conn->request_info.local_uri_raw =; 18575 conn->request_info.request_uri;; 18576 break;; 18577 case 3:; 18578 case 4:; 18579 /* absolute uri (with/without port) */; 18580 hostend = get_rel_url_at_current_server(; 18581 conn->request_info.request_uri, conn);; 18582 if (hostend) {; 18583 conn->request_info.local_uri_raw = hostend;; 18584 } else {; 18585 conn->request_info.local_uri_raw = NULL;; 18586 }; 18587 break;; 18588 default:; 18589 mg_snprintf(conn,; 18590 NULL, /* No truncation check for ebuf */; 18591 ebuf,; 18592 sizeof(ebuf),; 18593 ""Invalid URI"");; 18594 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18595 conn->request_info.local_uri_raw = NULL;; 18596 break;; 18597 }; 18598 conn->request_info.local_uri =; 18599 (char *)conn->request_info.local_uri_raw;; 18600 }; 18601 ; 18602 if (ebuf[0] != '\0') {; 18603 conn->protocol_type = -1;; 18604 ; 18605 } else {; 18606 /* HTTP/1 allows protocol upgrade */; 18607 conn->protocol_type = should_switch_to_protocol(conn);; 18608 ; 18609 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18610 /* This will occur, if a HTTP/1.1 request should be upgraded; 18611 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18612 * Since most (all?) major browsers only support HTTP/2 using; 18613 * ALPN, this is hard to test and very low priority.; 18614 * Deactivate it (at least for now).; 18615 */; 18616 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18617 }; 18618 }; 18619 ; 18620 DEBUG_TRACE(""http: %s, error: %s"",; 18621 (ri->http_version ? ri->http_version : ""none""),; 18622 (ebuf[0] ? ebuf : ""none""));; 18623 ; 18624 if (ebuf[0] == '\0') {; 18625 if (conn->request_info.local_uri) {; 18626 ; 18627 /* handle request to local server */; 18628 handle_request_stat_log(conn);; 18629 ; 18630 } else {; 18631 /* TODO: handle non-local request (PROXY) */; 18632 conn->must_close = 1;; 18633 }; 18634 } else {; 18635 conn->must_close = 1;; 18636 }; 18637 ; 18638 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:552071,upgrade,upgrade,552071,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['upgrade'],['upgrade']
Deployability,"eal with '*'. */; 18572 break;; 18573 case 2:; 18574 /* relative uri */; 18575 conn->request_info.local_uri_raw =; 18576 conn->request_info.request_uri;; 18577 break;; 18578 case 3:; 18579 case 4:; 18580 /* absolute uri (with/without port) */; 18581 hostend = get_rel_url_at_current_server(; 18582 conn->request_info.request_uri, conn);; 18583 if (hostend) {; 18584 conn->request_info.local_uri_raw = hostend;; 18585 } else {; 18586 conn->request_info.local_uri_raw = NULL;; 18587 }; 18588 break;; 18589 default:; 18590 mg_snprintf(conn,; 18591 NULL, /* No truncation check for ebuf */; 18592 ebuf,; 18593 sizeof(ebuf),; 18594 ""Invalid URI"");; 18595 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18596 conn->request_info.local_uri_raw = NULL;; 18597 break;; 18598 }; 18599 conn->request_info.local_uri =; 18600 (char *)conn->request_info.local_uri_raw;; 18601 }; 18602 ; 18603 if (ebuf[0] != '\0') {; 18604 conn->protocol_type = -1;; 18605 ; 18606 } else {; 18607 /* HTTP/1 allows protocol upgrade */; 18608 conn->protocol_type = should_switch_to_protocol(conn);; 18609 ; 18610 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18611 /* This will occur, if a HTTP/1.1 request should be upgraded; 18612 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18613 * Since most (all?) major browsers only support HTTP/2 using; 18614 * ALPN, this is hard to test and very low priority.; 18615 * Deactivate it (at least for now).; 18616 */; 18617 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18618 }; 18619 }; 18620 ; 18621 DEBUG_TRACE(""http: %s, error: %s"",; 18622 (ri->http_version ? ri->http_version : ""none""),; 18623 (ebuf[0] ? ebuf : ""none""));; 18624 ; 18625 if (ebuf[0] == '\0') {; 18626 if (conn->request_info.local_uri) {; 18627 ; 18628 /* handle request to local server */; 18629 handle_request_stat_log(conn);; 18630 ; 18631 } else {; 18632 /* TODO: handle non-local request (PROXY) */; 18633 conn->must_close = 1;; 18634 }; 18635 } else {; 18636 conn->must_close = 1;; 18637 }; 18638 ; 18639 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:552104,upgrade,upgrade,552104,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['upgrade'],['upgrade']
Deployability,"eal.; Definition at line 599 of file RooAddModel.cxx. ◆ selectNormalizationRange(). void RooAddModel::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 621 of file RooAddModel.cxx. ◆ selfNormalized(). bool RooAddModel::selfNormalized ; (; ); const. inlineoverridevirtual . Model is self normalized when used as p.d.f. ; Reimplemented from RooAbsPdf.; Definition at line 52 of file RooAddModel.h. ◆ Streamer(). void RooAddModel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooAddModel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file RooAddModel.h. ◆ updateCoefficients(). void RooAddModel::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; Definition at line 333 of file RooAddModel.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 89 of file RooAddModel.h. Member Data Documentation. ◆ _allExtendable. bool RooAddModel::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 123 of file RooAddModel.h. ◆ _codeReg. RooAICRegistry RooAddModel::_codeReg = 10. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 116 of file RooAddModel.h. ◆ _coefCache. std::vector<double> RooAddModel::_coefCache. mutableprotected . ! Transient cache",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:90514,update,updateCoefficients,90514,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['update'],['updateCoefficients']
Deployability,"eal2);  ;  RooProduct (const RooProduct &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooProduct () override;  Destructor. ;  ; void addTerm (RooAbsArg *term);  Add a term to this product. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate partial integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; CacheMode canNodeBeCached () const override;  ; const RooArgList & categoricalComponents () const;  ; TObject * clone (const char *newname) const override;  ; RooArgList components ();  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force internal handling of integration of given observable if any of the product terms depend on it. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Declare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the product operator construction. ;  ; const RooArgList & realComponents () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooProduct with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void transla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:1875,integrat,integrations,1875,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['integrat'],['integrations']
Deployability,"eal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; RooRealProxy_value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooUnblindOffset.html:33158,integrat,integrator,33158,root/html530/RooUnblindOffset.html,https://root.cern,https://root.cern/root/html530/RooUnblindOffset.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3Binding_double_double_int_int_.html:33086,integrat,integrator,33086,root/html530/RooCFunction3Binding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3Binding_double_double_int_int_.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_t_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsPdf(); Default constructor. RooAbsPdf(const char* name, const char* title = 0); Constructor with name and title only. RooAbsPdf(const char* name, const char* title, Double_t minVal, Double_t maxVal); Constructor with name, title, and plot range. RooAbsPdf(const RooAbsPdf& other, const char* name = 0); Copy constructor. ~RooAbsPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Return current value, normalizated by integrating over; the observables in 'nset'. If 'nset' is 0, the unnormalized value.; is returned. All elements of 'nset' must be lvalues. Unnormalized values are not cached; Doing so would be complicated as _norm->getVal() could; spoil the cache and interfere with returning the cached; return value. Since unnormalized calls are typically; done in integration calls, there is no performance hit. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). This function applies the normalization specified by 'normSet' to the integral returned; by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; to return a normalized answer. Bool_t traceEvalPdf(Double_t value) const; Check that passed value is positive and not 'not-a-number'. If; not, print an error, until the error counter reaches its s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:48298,integrat,integrating,48298,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,2,['integrat'],['integrating']
Deployability,"ealProxy_nllInput -log(L) function; RooSetProxy_obsParameters of profile likelihood; RooArgSet_obsAbsMinObservable values at absolute minimum; TIterator*_oiter! Iterator of profile likelihood output parameter(s); RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_parMarginialized parameters of likelihood; RooArgSet_paramAbsMinParameter values at absolute minimum; map<std::string,bool>_paramFixedParameter constant status at last time of use; TIterator*_piter! Iterator over profile likelihood parameters to be minimized ; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_t_startFromMinAlways start minimization for global minimum?; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:36156,integrat,integrator,36156,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,2,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ealProxy_pdf1First input p.d.f; RooRealProxy_pdf2Second input p.d.f; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Double_t_shift1; Double_t_shift2; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxy_xConvolution observable; RooRealProxy_xprimeInput function representing value of convolution observable; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:46437,configurat,configuration,46437,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"eallocation (default) and performance-optimized stack–like allocation (optional). However, the library is not thread save using stack–allocation.; 3.5.3 M parameters; Differently to the version of M there is no limit on the number of parameters, variable or non-variable. Memory allocation is done dynamically according to the actual needs and “on demand”. There is no protection against an upper limit on the number of parameters, however the “technological” limitations of M can be seen around a maximum of 15 free parameters at a time.; 3.6 Interference with other packages; The new M has been designed to interfere as little as possible with other programs or packages which may be loaded at the same time. M is thread safe by default. Optionally the user can select a different way of dynamically allocating memory in the class StackAllacator for M , in which case (and after an entire recompilation of the whole library) the thread safety is lost.; 3.7 Floating-point precision; [install:epsmac]; M is entirely based on double precision. The actual floating point precision of double precision (32–bit or 64–bit) is platform dependent and can even vary on the same platform, depending on whether a floating point number is read from memory a CPU register.; The argument of the user’s implementation of FCNBase::operator() is therefore a std:vector\(<\)double\(>\). M expects that the calculations inside \(\mbox{FCN}\) will be performed approximately to the same accuracy.; The accuracy M expects is called machine precision (MnMachinePrecision, see [api:epsmac]) and can be printed on demand using std::cout. If the user fools M by making internal \(\mbox{FCN}\) computations in single precision, M will interpret roundoff noise as significant and will usually either fail to find a minimum, or give incorrect values for the parameter errors.; It is therefore recommended to make sure that all computations in \(\mbox{FCN}\), as well as all methods and functions called by \(\mbox{FCN}\), are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:27805,install,install,27805,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['install'],['install']
Deployability,"eam https://github.com/root-project/root; Make sure you are on the master branch locally and pull the latest changes from upstream:; git checkout master; git pull upstream master; Go back to your local branch and rebase the last changes from master:; git checkout histogram-race-condition-fix; git rebase master; Push your new updated local branch to your GitHub repository (origin):; git push --force; Summary. The entire workflow is summarized in the image above. First, we cloned root-project/root, and cloned it to our local machine. Then after making the commit, we pushed the change to origin. Optionally, we can pull down the last changes from upstream and rebase our branch onto the current master and force-push this to origin. After this, we create a pull request on GitHub from origin. It is important to note that it is not necessary to fork and clone for each contribution.; Merging a pull request locally; If the pull request does not have any conflicts with the master branch, it is possible to apply the changes locally by downloading a patch and piping it to git am with; wget -qO- https://github.com/root-project/root/pull/<PR#>.patch | git am; If you have conflicts, the preferred method is to rebase your branch onto master:; git remote update && git checkout master && git pull && git rebase master <your branch>; When a conflict exists with a commit, git will interrupt the rebase and let you resolve them by editing your files. Once the conflict is resolved, use; git add <conflicting files> && git rebase --continue; to continue the rebasing process. After all conflicts have been resolved, you can check that your changes are really what you want with git log -p master..<your branch> then push the result (without using --force).; Resources. Git How Tos; Git Tips and Tricks; GitHub and Git Foundations (YouTube). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:5012,patch,patch,5012,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['patch'],['patch']
Deployability,"eamerInfoActions; 46{; 47 bool IsDefaultVector(TVirtualCollectionProxy &proxy); 48 {; 49 const auto props = proxy.GetProperties();; 50 const bool isVector = proxy.GetCollectionType() == ROOT::kSTLvector;; 51 const bool hasDefaultAlloc = !(props & TVirtualCollectionProxy::kCustomAlloc);; 52 const bool isEmulated = props & TVirtualCollectionProxy::kIsEmulated;; 53 ; 54 return isEmulated || (isVector && hasDefaultAlloc);; 55 }; 56 ; 57 template <typename From>; 58 struct WithFactorMarker {; 59 typedef From Value_t;; 60 };; 61 ; 62 template <typename From>; 63 struct NoFactorMarker {; 64 typedef From Value_t;; 65 };; 66 ; 67 struct BitsMarker {; 68 typedef UInt_t Value_t;; 69 };; 70 ; 71 void TConfiguration::AddToOffset(Int_t delta); 72 {; 73 // Add the (potentially negative) delta to all the configuration's offset. This is used by; 74 // TBranchElement in the case of split sub-object.; 75 ; 76 if (fOffset != TVirtualStreamerInfo::kMissing); 77 fOffset += delta;; 78 }; 79 ; 80 void TConfiguration::SetMissing(); 81 {; 82 // Add the (potentially negative) delta to all the configuration's offset. This is used by; 83 // TBranchElement in the case of split sub-object.; 84 ; 85 fOffset = TVirtualStreamerInfo::kMissing;; 86 }; 87 ; 88 void TConfiguredAction::PrintDebug(TBuffer &buf, void *addr) const; 89 {; 90 // Inform the user what we are about to stream.; 91 ; 92 // Idea, we should find a way to print the name of the function; 93 if (fConfiguration) fConfiguration->PrintDebug(buf,addr);; 94 }; 95 ; 96 void TConfiguration::Print() const; 97 {; 98 // Inform the user what we are about to stream.; 99 ; 100 TStreamerInfo *info = (TStreamerInfo*)fInfo;; 101 TStreamerElement *aElement = fCompInfo->fElem;; 102 TString sequenceType;; 103 aElement->GetSequenceType(sequenceType);; 104 ; 105 printf(""StreamerInfoAction, class:%s, name=%s, fType[%d]=%d,""; 106 "" %s, offset=%d (%s), elemnId=%d \n"",; 107 info->GetClass()->GetName(), aElement->GetName(), fElemId, fCompInfo->fType,; 108 aElem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:2796,configurat,configuration,2796,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['configurat'],['configuration']
Deployability,"ean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxyRooSimultaneous::_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:42052,integrat,integration,42052,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,1,['integrat'],['integration']
Deployability,"ean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPolyVar.html:33533,integrat,integration,33533,root/html534/RooPolyVar.html,https://root.cern,https://root.cern/root/html534/RooPolyVar.html,1,['integrat'],['integration']
Deployability,"ean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:39546,integrat,integration,39546,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"ean value over all data points; TStringTNamed::fNameobject identifier; Int_tfNumberOfDataPointsNumber of data points; Int_tfNumberOfVariablesNumber of variables; TVectorDfOffDiagonalelements of the tridiagonal; TVectorDfSigmasvector of sigmas; Bool_tfStoreDataShould we store input data?; TStringTNamed::fTitleobject title; Double_tfTraceTrace of covarience matrix; TVectorDfUserDataVector of original data points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPrincipal(); Empty CTOR, Do not use. TPrincipal(Int_t nVariables, Option_t* opt = ""ND""); Ctor. Argument is number of variables in the sample of data; Options are:; N Normalize the covariance matrix (default); D Store input data (default). The created object is named ""principal"" by default. TPrincipal(const TPrincipal& ); copy constructor. TPrincipal& operator=(const TPrincipal& ); assignement operator. ~TPrincipal(); destructor. void AddRow(const Double_t* x). /*; >; Add a data point and update the covariance matrix. The input; array must be fNumberOfVariables long. The Covariance matrix and mean values of the input data is caculated; on the fly by the following equations:. since this is a really fast method, with no rounding errors (please; refer to CERN 72-21 pp. 54-106). The data is stored internally in a TVectorD, in the following; way:. With as defined in the class description.; ; */; . void Browse(TBrowser* b); Browse the TPrincipal object in the TBrowser. void Clear(Option_t* option = """"); Clear the data in Object. Notice, that's not possible to change; the dimension of the original data. const Double_t * GetRow(Int_t row); Return a row of the user supplied data.; If row is out of bounds, 0 is returned.; It's up to the user to delete the returned array.; Row 0 is the first row;. void MakeCode(const char* filename = ""pca"", Option_t* option = """"); Generates the file <filename>, with .C appended if it does; argument doesn't end in .cxx or .C. The file contains the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPrincipal.html:12627,update,update,12627,root/html528/TPrincipal.html,https://root.cern,https://root.cern/root/html528/TPrincipal.html,6,['update'],['update']
Deployability,"eap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:10358,release,release,10358,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,3,['release'],['release']
Deployability,"eap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:10446,release,release,10446,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,1,['release'],['release']
Deployability,"earFitter; TLink Link: hypertext link to an object; TList Doubly linked list; TListIter Linked list iterator; TListOfDataMembers List of TDataMembers for a class; TListOfEnums ; TListOfEnumsWithLock ; TListOfEnumsWithLockIter ; TListOfFunctionTemplates List of TFunctions for a class; TListOfFunctions List of TFunctions for a class; TListOfFunctionsIter ; TLockFile Lock an object using a file; TLockGuard ; TLorentzRotation Lorentz transformations including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:100124,configurat,configuration,100124,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['configurat'],['configuration']
Deployability,"earching...; No Matches. List of all members |; Public Attributes |; List of all members ; Configuration Struct Reference. . Definition at line 3 of file RooAbsTestStatistic.h. Public Attributes; std::string addCoefRangeName;  ; bool binnedL = false;  ; bool cloneInputData = true;  ; double integrateOverBinsPrecision = -1.;  ; RooFit::MPSplit interleave = RooFit::BulkPartition;  ; int nCPU = 1;  ; std::string rangeName;  Stores the configuration parameters for RooAbsTestStatistic. ;  ; bool splitCutRange = false;  ; bool takeGlobalObservablesFromData = false;  ; bool verbose = true;  . #include <RooAbsTestStatistic.h>; Member Data Documentation. ◆ addCoefRangeName. std::string Configuration::addCoefRangeName. Definition at line 6 of file RooAbsTestStatistic.h. ◆ binnedL. bool Configuration::binnedL = false. Definition at line 13 of file RooAbsTestStatistic.h. ◆ cloneInputData. bool Configuration::cloneInputData = true. Definition at line 11 of file RooAbsTestStatistic.h. ◆ integrateOverBinsPrecision. double Configuration::integrateOverBinsPrecision = -1. Definition at line 12 of file RooAbsTestStatistic.h. ◆ interleave. RooFit::MPSplit Configuration::interleave = RooFit::BulkPartition. Definition at line 8 of file RooAbsTestStatistic.h. ◆ nCPU. int Configuration::nCPU = 1. Definition at line 7 of file RooAbsTestStatistic.h. ◆ rangeName. std::string Configuration::rangeName. Stores the configuration parameters for RooAbsTestStatistic. ; Definition at line 5 of file RooAbsTestStatistic.h. ◆ splitCutRange. bool Configuration::splitCutRange = false. Definition at line 10 of file RooAbsTestStatistic.h. ◆ takeGlobalObservablesFromData. bool Configuration::takeGlobalObservablesFromData = false. Definition at line 14 of file RooAbsTestStatistic.h. ◆ verbose. bool Configuration::verbose = true. Definition at line 9 of file RooAbsTestStatistic.h. Collaboration diagram for Configuration:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structConfiguration.html:1083,integrat,integrateOverBinsPrecision,1083,doc/v632/structConfiguration.html,https://root.cern,https://root.cern/doc/v632/structConfiguration.html,1,['integrat'],['integrateOverBinsPrecision']
Deployability,"earching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvPdf Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF using a straightforward numeric calculation of the convolution integral This class should be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormula",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:1032,integrat,integration,1032,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['integrat'],['integration']
Deployability,ease 5.12/00d - 2006-09-02. Release 5.12/00 - 2006-07-14. Release 5.11/06 - 2006-06-07. Release 5.11/04 - 2006-05-31. Release 5.11/02 - 2006-05-08. Release 5.10/00 - 2006-03-02. Release 5.08/00 - 2005-12-15. Release 5.06/00 - 2005-10-31. Release 5.04/00 - 2005-09-20. Release 5.02/00 - 2005-07-05. Version 4 ; ; Release 4.04/02 - 2005-05-14. Release 4.03/04 - 2005-04-06. Release 4.03/02 - 2005-02-10. Release 4.02/00 - 2004-12-17. Release 4.01/04 - 2004-11-20. Release 4.01/02 - 2004-09-24. Release 4.00/08 - 2004-07-11. Release 4.00/06a - 2004-07-11. Release 4.00/06 - 2004-07-11. Release 4.00/04 - 2004-05-04. Release 4.00/03 - 2004-03-25. Release 4.00/02 - 2004-02-20. Release 4.00/01 - 2004-02-02. Version 3 ; ; Release 3.10/02 - 2004-01-23. Release 3.10/01a - 2004-01-23. Release 3.10/01 - 2004-01-23. Release 3.05/07a - 2003-08-06. Release 3.05/07 - 2003-07-27. Release 3.05/06 - 2003-07-18. Release 3.05/05 - 2003-05-08. Release 3.05/04 - 2003-04-21. Release 3.05/03 - 2003-03-11. Release 3.05/02 - 2003-02-12. Release 3.04/02 - 2002-12-18. Release 3.04/01 - 2002-12-11. Release 3.03/09b - 2002-11-05. Release 3.03/09a - 2002-10-31. Release 3.03/09 - 2002-09-18. Release 3.02/07 - 2002-02-06. . Release notes can be found on the respective release page; release notes for old releases can be found here. ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:8021,release,release,8021,d/releases.html,https://root.cern,https://root.cern/d/releases.html,3,['release'],"['release', 'releases']"
Deployability,"eated basis functions; Int_t_basisSin; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numeric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCPEigenDecay.html:44026,integrat,integration,44026,root/html602/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html602/RooNonCPEigenDecay.html,2,['integrat'],['integration']
Deployability,"eated basis functions; Int_t_basisSin; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPGenDecay.html:43054,integrat,integration,43054,root/html602/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPGenDecay.html,2,['integrat'],['integration']
Deployability,"eated basis functions; Int_t_basisSin; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooRealProxy_effRatio; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBCPEffDecay.html:43189,integrat,integration,43189,root/html602/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html602/RooBCPEffDecay.html,2,['integrat'],['integration']
Deployability,"ecessary to have the first vector sorted.; I.e. the correlation between the elements is kept. void UsefulSortDescending(vector<vector<Double_t> >& , vector<TString>* vs = 0); sort 2D vector (AND in parallel a TString vector) in such a way; that the ""first vector is sorted"" and the other vectors are reshuffled; in the same way as necessary to have the first vector sorted.; I.e. the correlation between the elements is kept. Double_t GetMutualInformation(const TH2F& ); Mutual Information method for non-linear correlations estimates in 2D histogram; Author: Moritz Backes, Geneva (2009). Double_t GetCorrelationRatio(const TH2F& ); Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables; Author: Moritz Backes, Geneva (2009). Double_t GetYMean_binX(const TH2& , Int_t bin_x); Compute the mean in Y for a given bin X of a 2D histogram. TH2F* TransposeHist(const TH2F& ); Transpose quadratic histogram. Bool_t CheckForSilentOption(const TString& ) const; check for ""silence"" option in configuration option string. Bool_t CheckForVerboseOption(const TString& ) const; check if verbosity ""V"" set in option. void UsefulSortDescending(vector<Double_t>& ); sort vector. void UsefulSortAscending(vector<Double_t>& ); sort vector. Int_t GetIndexMaxElement(vector<Double_t>& ); find index of maximum entry in vector. Int_t GetIndexMinElement(vector<Double_t>& ); find index of minimum entry in vector. Bool_t ContainsRegularExpression(const TString& s); check if regular expression; helper function to search for ""$!%^&()'<>?= "" in a string. TString ReplaceRegularExpressions(const TString& s, const TString& replace = ""+""); replace regular expressions; helper function to remove all occurences ""$!%^&()'<>?= "" from a string; and replace all ::,$,*,/,+,- with _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Tools.html:9123,configurat,configuration,9123,root/html602/TMVA__Tools.html,https://root.cern,https://root.cern/root/html602/TMVA__Tools.html,2,['configurat'],['configuration']
Deployability,"ecial helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87 - [Working with missing values in the dataset](\ref missing-values); 88- [Efficient analysis in Python](\ref python); 89- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 90 ; 91\anchor cheatsheet; 92## Cheat sheet; 93These are the operations which can be performed with RDataFrame.; 94 ; 95### Transformations; 96Transformations are a way to manipulate the data.; 97 ; 98| **Transformation** | **Description** |; 99|------------------|--------------------|; 100| Alias() | Introduce an alias for a particular column name. |; 101| DefaultValueFor() | If the value of the input column is missing, provide a default value instead. |; 102| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 103| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 104| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:4492,toggle,toggleInherit,4492,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['toggle'],['toggleInherit']
Deployability,"eclare tb...Definition EExecutionPolicy.hxx:4; ROOT::GetDelayedAddClassAlternatestd::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate()Definition TClassTable.cxx:254; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::GetDelayedAddClassstd::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass()Definition TClassTable.cxx:248; ROOT::RemoveClassvoid RemoveClass(const char *cname, TClass *cl)Global function called by the dtor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:985; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::ClassTableHashstatic UInt_t ClassTableHash(const char *name, UInt_t size)Definition TClassTable.cxx:237; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; TClassEdit::IsStdClassbool IsStdClass(const char *type)return true if the class belongs to the std namespaceDefinition TClassEdit.cxx:1418; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854. corecontsrcTClassTable.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClassTable_8cxx_source.html:50124,update,update,50124,doc/v632/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClassTable_8cxx_source.html,1,['update'],['update']
Deployability,"ect ; (; ). virtual . Disconnect from TGLViewer class-signals. ; Definition at line 413 of file TEveViewer.cxx. ◆ GetColorBrightness(). Float_t TEveViewerList::GetColorBrightness ; (; ); const. inline . Definition at line 126 of file TEveViewer.h. ◆ GetShowTooltip(). Bool_t TEveViewerList::GetShowTooltip ; (; ); const. inline . Definition at line 123 of file TEveViewer.h. ◆ HandleTooltip(). void TEveViewerList::HandleTooltip ; (; ). protected . Show / hide tooltip for various MouseOver events. ; Must be called from slots where sender is TGLEventHandler. ; Definition at line 508 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewerList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 132 of file TEveViewer.h. ◆ OnClicked(). void TEveViewerList::OnClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::Clicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 605 of file TEveViewer.cxx. ◆ OnMouseOver(). void TEveViewerList::OnMouseOver ; (; TObject * ; obj, . UInt_t ; state . ). Slot for global TGLViewer::MouseOver() signal. ; The attempt is made to determine the TEveElement being represented by the physical shape and global highlight is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not highlighted.; Highlight is always in single-selection mode. ; Definition at line 539 of file TEveViewer.cxx. ◆ OnReClicked(). void TEveViewerList::OnReClicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). Slot for global TGLViewer::ReClicked(). ; The obj is dyn-casted to the TEveElement and global selection is updated accordingly.; If TEveElement::IsPickable() returns false, the element is not selected. ; Definition at line 622 of file TEveViewer.cxx. ◆ OnReMouseOver().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:37557,update,updated,37557,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['update'],['updated']
Deployability,"ect Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to setup ROOT externals from AFS/CVMFS. The following instructions are useful for setting up an environment with all the required ROOT externals coming from the central installations inAFS or CVMFS. This is exactly the same scripts used by the continuous integration system (Jenkins).; For slc and centos systems using the gcc compiler; The instructions are a single line to source an existing script in AFS/CVMFS. In the following example OS is 'slc6', the compiler is 'gcc49', and build type is 'release'.; # on AFS:; source /afs/cern.ch/sw/lcg/app/releases/ROOT-externals/ROOT-latest/x86_64-slc6-gcc49-opt/setup.sh ; # on CVMFS; source /cvmfs/sft.cern.ch/lcg/views/ROOT-latest/x86_64-slc6-gcc49-opt/setup.csh. For all the other compilers (icc, clang,...) and systems; In this case we can use the script that is used by jenkins. The script expects 4 arguments:. LABEL is system OS and version. E.g. 'slc6', 'centos7', 'fedora14', 'mac1012', etc.; COMPILER is the compiler and version. E.g. 'icc16', 'clang37', 'native' (for the native compiler), etc.; BUILDTYPE is the type of the build. E.g. Release, Debug; EXTERNALS is the label for the set of versions of the externals. Typically 'ROOT-date', but 'ROOT-latest' is a safe bet. . git clone http://root.cern.ch/git/rootspi.git ; source rootspi/jenkins/jk-setup.sh slc6 icc14 Release ROOT-latest. Debugging an existing nightly build; Often when a build has failed in the nightlies we are required to debug it.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:2393,release,release,2393,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['release'],['release']
Deployability,"ect bound to this RooAbsReal with given definition of observables; and parameters. RooDerivative* derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooDerivative* derivative(RooRealVar& obs, const RooArgSet& normSet, Int_t order, Double_t eps = 0.001); Return function representing first, second or third order derivative of this function. RooAbsMoment* moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); Return function representing moment of function of given order. If central is; true, the central moment is given <(x-<x>)^2>. RooAbsMoment* moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. If central is; true, the central moment is given <(x-<x>)^2>. If intNormObs is true, the moment of the function integrated over; all normalization observables is returned. Double_t findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval). Return value of x (in range xmin,xmax) at which function equals yval.; (Calculation is performed with Brent root finding algorithm). RooGenFunction* iGenFunction(RooRealVar& x, const RooArgSet& nset = RooArgSet()). RooMultiGenFunction* iGenFunction(const RooArgSet& observables, const RooArgSet& nset = RooArgSet()). RooFitResult* chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Perform a chi^2 fit to given histogram By default the fit is executed through the MINUIT; commands MIGRAD, HESSE in succession. The following named arguments ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:73508,integrat,integrated,73508,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['integrat'],['integrated']
Deployability,"ect for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:16613,integrat,integrator,16613,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix compu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:4843,update,updated,4843,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['update'],['updated']
Deployability,"ect! Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddModel.html:42563,configurat,configuration,42563,root/html530/RooAddModel.html,https://root.cern,https://root.cern/root/html530/RooAddModel.html,3,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ect.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:148; RooPrintable::kSingleLine@ kSingleLineDefinition RooPrintable.h:34; RooPrintable::kName@ kNameDefinition RooPrintable.h:33; RooPrintable::kAddress@ kAddressDefinition RooPrintable.h:33; RooPrintable::kValue@ kValueDefinition RooPrintable.h:33; RooPrintable::kArgs@ kArgsDefinition RooPrintable.h:33; RooPrintable::kTitle@ kTitleDefinition RooPrintable.h:33; RooPrintable::printStreamvirtual void printStream(std::ostream &os, Int_t contents, StyleOption style, TString indent="""") constPrint description of object on ostream, printing contents set by contents integer,...Definition RooPrintable.cxx:72; RooProjectedPdfA RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned...Definition RooProjectedPdf.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166781,update,updateNormVarsvoid,166781,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['update'],"['updateNormVars', 'updateNormVarsvoid']"
Deployability,ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList_configSetsList of configuration sets for individual integration methods; static RooNumGenConfig*_default; RooCategory_method1DSelects integration method for 1D p.d.f.s; RooCategory_method1DCatSelects integration method for 1D p.d.f.s with categories; RooCategory_method1DCondSelects integration method for 1D conditional p.d.f.s; RooCategory_method1DCondCatSelects integration method for 1D conditional p.d.f.s with categories; RooCategory_method2DSelects integration method for 2D p.d.f.s; RooCategory_method2DCatSelects integration method for 2D p.d.f.s with categories; RooCategory_method2DCondSelects integration method for 2D conditional p.d.f.s; RooCategory_method2DCondCatSelects integration method for 2D conditional p.d.f.s with categories; RooCategory_methodNDSelects integration method for ND p.d.f.s; RooCategory_methodNDCatSelects integration method for ND p.d.f.s with categories; RooCategory_methodNDCondSelects integration method for ND conditional p.d.f.s; RooCategory_methodNDCondCatSelects integration method for ND conditional p.d.f.s with categories; static Int_tRooPrintable::_nameLength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Function called by atexit() handler installed by RooSentinel to; cleanup global objects at end of job. RooNumGenConfig& defaultConfig(); Return reference to instance of default numeric integrator configuration object. RooNumGenCo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumGenConfig.html:8616,integrat,integration,8616,root/html602/RooNumGenConfig.html,https://root.cern,https://root.cern/root/html602/RooNumGenConfig.html,2,['integrat'],['integration']
Deployability,"ect::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html:10353,integrat,integration,10353,root/html602/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html,2,['integrat'],['integration']
Deployability,"ect::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tEquals(RooArgSet& x1, RooArgSet& x2); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooDataSet*fCachethe cached proposal data set; Int_tfCachePositionour position in the cached proposal data set; Int_tfCacheSizehow many points to generate each time; map<RooRealVar*,RooAbsReal*,less<RooRealVar*>,allocator<pair<RooRealVar* const,RooAbsReal*> > >::iteratorfItpdf iterator; RooArgSetfLastXthe last point we were at; map<RooRealVar*,RooAbsReal*>fMapmap of values in pdf to update; RooArgSetfMasterpointers to master variables needed for updates; Bool_tfOwnsPdfwhether we own the proposal density function; RooAbsPdf*fPdfthe proposal density function. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PdfProposal(). PdfProposal(RooAbsPdf& pdf). Bool_t Equals(RooArgSet& x1, RooArgSet& x2). void Propose(RooArgSet& xPrime, RooArgSet& x). Bool_t IsSymmetric(RooArgSet& x1, RooArgSet& x2); kbelasco: is there a better way to do this?. Double_t GetProposalDensity(RooArgSet& x1, RooArgSet& x2). void AddMapping(RooRealVar& proposalParam, RooAbsReal& update). PdfProposal(). void SetPdf(RooAbsPdf& pdf); Set the PDF to be the proposal density function. { fPdf = &pdf; }. const RooAbsPdf* GetPdf() const; Get the PDF is the proposal density function. { return fPdf; }. void Reset(). void printMappings(). void SetCacheSize(Int_t size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__PdfProposal.html:7378,update,update,7378,root/html526/RooStats__PdfProposal.html,https://root.cern,https://root.cern/root/html526/RooStats__PdfProposal.html,10,['update'],"['update', 'updates']"
Deployability,"ect::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. void*fBaddress!branch address when used as a branch; TStringfBaddressClassName!Name of the class pointed to by fBaddress; Bool_tfBaddressIsPtr!True if the address is a pointer to an address; UInt_tfBaddressType!Type of the value pointed to by fBaddress; TBranch**fBranchPtr!Address of user branch pointer (to updated upon loading a file); Long64_tfEntriesNumber of entries in the tree of this chain element; Int_tfNPacketsNumber of packets; TStringTNamed::fNameobject identifier; Int_tfPacketSizeNumber of events in one packet for parallel root; char*fPackets!Packet descriptor string; Int_tfStatusbranch status when used as a branch; TStringTNamed::fTitleobject title. private:. static TChainElement::EStatusBitskHasBeenLookedUp. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TChainElement(); Default constructor for a chain element. TChainElement(const char* title, const char* filename); Create a chain element. ~TChainElement(); Default destructor for a chain element. void CreatePackets(); Initialize the packet descriptor string. void ls(Option_t* option = """") const; List files in the chain. void SetPacketSize(Int_t size = 100); Set number of entries per packet for parallel root. void SetLookedUp(Bool_t y = kTRUE); Set/Reset the looked-up bit. TChainElement(). void * GetBaddress",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TChainElement.html:7025,update,updated,7025,root/html602/TChainElement.html,https://root.cern,https://root.cern/root/html602/TChainElement.html,2,['update'],['updated']
Deployability,"ect::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooNumIntFactory*_instance; map<string,pair<RooAbsIntegrator*,string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Jun 2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumIntFactory.html:7397,integrat,integrator,7397,root/html604/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html604/RooNumIntFactory.html,1,['integrat'],['integrator']
Deployability,"ect::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooNumIntFactory*_instance; map<string,pair<RooAbsIntegrator*,string> >_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumIntFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumIntFactory(); Destructor. RooNumIntFactory(const RooNumIntFactory& other); Copy constructor. RooNumIntFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsIntegrator* getProtoIntegrator(const char* name); Return prototype integrator with given (class) name. const char* getDepIntegratorName(const char* name); Get list of class names of integrators needed by integrator named 'name'. RooAbsIntegrator* createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0, Bool_t isBinned = kFALSE); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Jun 30",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumIntFactory.html:7397,integrat,integrator,7397,root/html602/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html602/RooNumIntFactory.html,1,['integrat'],['integrator']
Deployability,"ect; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenProdProj(); Default constructor. RooGenProdProj(const char* name, const char* title, const RooArgSet& _prodSet, const RooArgSet& _intSet, const RooArgSet& _normSet, const char* isetRangeName); Constructor for a normalization projection of the product of p.d.f.s _prodSet; integrated over _intSet in range isetRangeName while normalized over _normSet. RooGenProdProj(const RooGenProdProj& other, const char* name = 0); Copy constructor. ~RooGenProdProj(); Destructor. RooAbsReal* makeIntegral(const char* name, const RooArgSet& compSet, const RooArgSet& intSet, RooArgSet& saveSet, const char* isetRangeName); Utility function to create integral over observables intSet in range isetRangeName over product of p.d.fs in compSet.; The integration is factorized into components as much as possible and done analytically as far as possible.; All component object needed to represent product integral are added as owned members to saveSet.; The return value is a RooAbsReal object representing the requested integral. Double_t evaluate() const; Calculate and return value of normalization projection. void operModeHook(); Intercept cache mode operation changes and propagate them to the components. TObject* clone(const char* newname) const; { return new RooGenProdProj(*this, newname); }. » Last changed: Mon D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenProdProj.html:33404,integrat,integrated,33404,root/html526/RooGenProdProj.html,https://root.cern,https://root.cern/root/html526/RooGenProdProj.html,1,['integrat'],['integrated']
Deployability,"ect; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _negateCoefficient = false;  ; RooRealProxy c;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:68357,integrat,integration,68357,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['integrat'],['integration']
Deployability,"ectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooLinkedList _configSets;  List of configuration sets for individual integration methods. ;  ; double _epsAbs;  Absolute precision. ;  ; double _epsRel;  Relative precision. ;  ; RooCategory _method1D;  Selects integration method for 1D integrals. ;  ; RooCategory _method1DOpen;  Selects integration method for open ended 1D integrals. ;  ; RooCategory _method2D;  Selects integration method for 2D integrals. ;  ; RooCategory _method2DOpen;  Selects integration method for open ended 2D integrals. ;  ; RooCategory _methodND;  Selects integration method for ND integrals. ;  ; RooCategory _methodNDOpen;  Selects integration method for open ended ND integrals. ;  ; bool _printEvalCounter;  Flag to control printing of function evaluation counter. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:13230,integrat,integration,13230,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['integrat'],['integration']
Deployability,"ected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:40788,integrat,integration,40788,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"ected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManager.html:13628,update,updates,13628,root/html528/TDataSetManager.html,https://root.cern,https://root.cern/root/html528/TDataSetManager.html,3,['update'],['updates']
Deployability,"ected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:22203,integrat,integrator,22203,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,4,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"ected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:17491,integrat,integrator,17491,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,4,"['configurat', 'integrat']","['configuration', 'integration', 'integrator']"
Deployability,"ected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const RooAbsFunc*_functionPointer to function binding of integrand; Bool_t_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_validIs integrator in valid state?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsIntegrator(); Default constructor. RooAbsIntegrator(const RooAbsFunc& function, Bool_t printEvalCounter = kFALSE); Copy constructor. Double_t calculate(const Double_t* yvec = 0); Calculate integral value with given array of parameter values. Bool_t setLimits(Double_t xmin, Double_t xmax); Interface to set limits on integration. Bool_t setUseIntegrandLimits(Bool_t flag); Interface function that allows to defer limit definition to integrand definition. RooAbsIntegrator(). virtual ~RooAbsIntegrator(); Destructor. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const. Bool_t isValid() const; Is integrator in valid state. Double_t integrand(const Double_t[] x) const; Return value of integrand at given observable values. const RooAbsFunc * integrand() const; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsIntegrator.html:6810,integrat,integration,6810,root/html602/RooAbsIntegrator.html,https://root.cern,https://root.cern/root/html602/RooAbsIntegrator.html,4,['integrat'],"['integration', 'integrator']"
Deployability,"ectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id: TFitParametersDialog.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2010-09-23 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitParametersDialog.html:24778,update,update,24778,root/html528/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFitParametersDialog.html,1,['update'],['update']
Deployability,"ectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id: TFitParametersDialog.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFitParametersDialog.html:24931,update,update,24931,root/html530/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html530/TFitParametersDialog.html,1,['update'],['update']
Deployability,"ectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitParametersDialog(const TGWindow* p, const TGWindow* main, TF1* func, TVirtualPad* pad, Int_t* ret_code = 0); Create a dialog for fit function parameters' settings. ~TFitParametersDialog(); Destructor. void CloseWindow(); Close parameters' dialog. void DoCancel(); Slot related to the Cancel button. void DoParBound(Bool_t on); Slot related to the Bound check button. void DoParStep(); Slot related to parameter step setting. void DoParFix(Bool_t on); Slot related to the Fix check button. void SetParameters(); Set the parameter values inside the function. void DoOK(); Slot related to the OK button. void DoApply(); Slot related to the Preview button. void DoReset(); Slot related to the Reset button. void DoSlider(); Slot related to the parameters' value settings. void DoParValue(); Slot related to the parameter value settings. void DoParMinLimit(); Slot related to the minumum parameter limit settings. void DoParMaxLimit(); Slot related to the maximum parameter limit settings. void DrawFunction(); Redraw function graphics. void HandleButtons(Bool_t update); Handle the button dependent states in this dialog. void DisconnectSlots(); Disconnect signals from slot methods. » Author: Ilka Antcheva, Lorenzo Moneta, David Gonzalez Maline 03/10/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/fitpanel:$Id: TFitParametersDialog.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFitParametersDialog.html:24931,update,update,24931,root/html532/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html532/TFitParametersDialog.html,1,['update'],['update']
Deployability,"ectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 1079 of file RooNDKeysPdf.cxx. ◆ gauss(). double RooNDKeysPdf::gauss ; (; std::vector< double > & ; x, . std::vector< std::vector< double > > & ; weights . ); const. protected . loop over all closest point to x, as determined by loopRange() ; Definition at line 917 of file RooNDKeysPdf.cxx. ◆ getAnalyticalIntegral(). Int_t RooNDKeysPdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 1105 of file RooNDKeysPdf.cxx. ◆ getWeights(). TMatrixD RooNDKeysPdf::getWeights ; (; const int & ; k); const. Return evaluated weights. ; Definition at line 1291 of file RooNDKeysPdf.cxx. ◆ initialize(). void RooNDKeysPdf::initialize ; (; RooDataSet const & ; data). protected . initialization ; Definition at line 406 of file RooNDKeysPdf.cxx. ◆ IsA(). TClass * RooNDKeysPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 198 of file RooNDKeysPdf.h. ◆ loadDataSet(). void RooNDKeysPdf::loadDataSet ; (; bool ; firstCall, . RooDataSet const & ; data . ). protected . copy the dataset and calculate some useful variables ; Definition at line 476 of file RooNDKeysPdf.cxx. ◆ loadWeightSet(). void RooNDKeysPdf::loadWeightSet ; (; RooDataSet const & ; data). protected . Definition at line 696 of file RooNDKeysPdf.cxx. ◆ loopRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:87351,integrat,integration,87351,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['integrat'],['integration']
Deployability,"ection * fClipboardList of clipboard objects.Definition TROOT.h:163; TROOT::GetGitDateconst char * GetGitDate()Return date/time make was run.Definition TROOT.cxx:2474; TROOT::SetEditorModevoid SetEditorMode(const char *mode="""")Set editor mode.Definition TROOT.cxx:2704; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3115; TROOT::~TROOTvirtual ~TROOT()Clean up and free resources used by ROOT (files, network sockets, shared memory segments,...Definition TROOT.cxx:867; TROOT::fColorsTSeqCollection * fColorsList of colors.Definition TROOT.h:153; TROOT::GetGlobalFunctionWithPrototypeTFunction * GetGlobalFunctionWithPrototype(const char *name, const char *proto=nullptr, Bool_t load=kFALSE)Return pointer to global function by name.Definition TROOT.cxx:1718; TROOT::GetListOfBrowsersTSeqCollection * GetListOfBrowsers() constDefinition TROOT.h:245; TROOT::ReadingObjectBool_t ReadingObject() constDeprecated (will be removed in next release).Definition TROOT.cxx:2460; TROOT::fStylesTSeqCollection * fStylesList of styles.Definition TROOT.h:150; TROOT::fVersionDateInt_t fVersionDateDate of ROOT version (ex 951226)Definition TROOT.h:116; TROOT::GetListOfColorsTSeqCollection * GetListOfColors() constDefinition TROOT.h:232; TROOT::MacroLongptr_t Macro(const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE)Execute a macro in the interpreter.Definition TROOT.cxx:2316; TROOT::fBuiltTimeInt_t fBuiltTimeTime of ROOT built.Definition TROOT.h:119; TROOT::AddExtraInterpreterArgsstatic const std::vector< std::string > & AddExtraInterpreterArgs(const std::vector< std::string > &args)Provide command line arguments to the interpreter construction.Definition TROOT.cxx:2952; TROOT::GetClassTClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE) constReturn pointer to class with name. Obsolete, use TClass::GetClass directly.Definition TROOT.cxx:1518; TROOT::fSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:156181,release,release,156181,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['release'],['release']
Deployability,"ection * fClipboardList of clipboard objects.Definition TROOT.h:163; TROOT::GetGitDateconst char * GetGitDate()Return date/time make was run.Definition TROOT.cxx:2474; TROOT::SetEditorModevoid SetEditorMode(const char *mode="""")Set editor mode.Definition TROOT.cxx:2704; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; TROOT::~TROOTvirtual ~TROOT()Clean up and free resources used by ROOT (files, network sockets, shared memory segments,...Definition TROOT.cxx:867; TROOT::fColorsTSeqCollection * fColorsList of colors.Definition TROOT.h:153; TROOT::GetGlobalFunctionWithPrototypeTFunction * GetGlobalFunctionWithPrototype(const char *name, const char *proto=nullptr, Bool_t load=kFALSE)Return pointer to global function by name.Definition TROOT.cxx:1718; TROOT::GetListOfBrowsersTSeqCollection * GetListOfBrowsers() constDefinition TROOT.h:245; TROOT::ReadingObjectBool_t ReadingObject() constDeprecated (will be removed in next release).Definition TROOT.cxx:2460; TROOT::fStylesTSeqCollection * fStylesList of styles.Definition TROOT.h:150; TROOT::fVersionDateInt_t fVersionDateDate of ROOT version (ex 951226)Definition TROOT.h:116; TROOT::GetListOfColorsTSeqCollection * GetListOfColors() constDefinition TROOT.h:232; TROOT::MacroLongptr_t Macro(const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE)Execute a macro in the interpreter.Definition TROOT.cxx:2316; TROOT::fBuiltTimeInt_t fBuiltTimeTime of ROOT built.Definition TROOT.h:119; TROOT::AddExtraInterpreterArgsstatic const std::vector< std::string > & AddExtraInterpreterArgs(const std::vector< std::string > &args)Provide command line arguments to the interpreter construction.Definition TROOT.cxx:2956; TROOT::GetClassTClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE) constReturn pointer to class with name. Obsolete, use TClass::GetClass directly.Definition TROOT.cxx:1518; TROOT::fSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:156357,release,release,156357,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['release'],['release']
Deployability,"ectives; BEGIN_HTML END_HTML: include 'raw' HTML; BEGIN_MACRO END_MACRO: include a picture generated by a macro; BEGIN_LATEX END_LATEX: include a latex picture. Product and module index; Auxiliary files: style sheet, JavaScript, help page; Class Charts; Configuration variables; Behind the scenes. I. Usage; These are typical things people do with THtml:. root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes. or to run on just a few classes:. root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only. To ""beautify"" (i.e. create links to documentation for class names etc) some text; file or macro, use:. root[] html.Convert( ""hsimple.C"", ""Histogram example"" ). II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable,; which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing; .cxx and .h files (see: TEnv); of the classes you want to document, or call THtml::SetInputDir(); Example:; Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/html; II.2 Output directory; The output directory can be specified using the Root.Html.OutputDir; configuration variable (default value: ""htmldoc""). If that directory; doesn't exist THtml; will create it.; Example:; Root.Html.OutputDir: htmldoc; II.3 Linking other documentation; When trying to document a class, THtml searches for a source file in; the directories set via SetInputDir(). If it cannot find it, it assumes; that this class must have been documented before. Based on the library; this class is defined in, it checks the configuration variable; Root.Html.LibName, and creates a link using its value.; Alternatively, you can set thes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml.html:2075,configurat,configuration,2075,root/html602/THtml.html,https://root.cern,https://root.cern/root/html602/THtml.html,6,['configurat'],['configuration']
Deployability,"ector<double> >(const RooCacheManager<vector<double> >& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<vector<double>*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(nset,0,sterileIndex,isetRangeName). Int_t setObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0). T* getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. T* getObjByIndex(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_vector_double___.html:3543,integrat,integration,3543,root/html602/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_vector_double___.html,2,['integrat'],['integration']
Deployability,"ects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::SliceRooCmdArg Slice(const RooArgSet &sliceSet)Definition RooGlobalFunc.cxx:134; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf310_sliceplotDefinition rf310_sliceplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav,mixState); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 16213 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf310_sliceplot.C. tutorialsroofitrf310_sliceplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8C.html:5735,integrat,integrates,5735,doc/master/rf310__sliceplot_8C.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8C.html,3,['integrat'],['integrates']
Deployability,"ecution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can be performed with RDataFrame.; 93 ; 94### Transformations; 95Transformations are a way to manipulate the data.; 96 ; 97| **Transformation** | **Description** |; 98|------------------|--------------------|; 99| Alias() | Introduce an alias for a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:5128,update,updated,5128,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['update'],['updated']
Deployability,"ed . editor's menu bar ; Definition at line 47 of file TGTextEditor.h. ◆ fMenuBarItemLayout. TGLayoutHints* TGTextEditor::fMenuBarItemLayout. protected . used for for menubar items ; Definition at line 46 of file TGTextEditor.h. ◆ fMenuBarLayout. TGLayoutHints* TGTextEditor::fMenuBarLayout. protected . used for the menubar ; Definition at line 45 of file TGTextEditor.h. ◆ fMenuEdit. TGPopupMenu* TGTextEditor::fMenuEdit. protected . ""Edit"" menu entry ; Definition at line 49 of file TGTextEditor.h. ◆ fMenuFile. TGPopupMenu* TGTextEditor::fMenuFile. protected . ""File"" menu entry ; Definition at line 48 of file TGTextEditor.h. ◆ fMenuHelp. TGPopupMenu* TGTextEditor::fMenuHelp. protected . ""Help"" menu entry ; Definition at line 52 of file TGTextEditor.h. ◆ fMenuSearch. TGPopupMenu* TGTextEditor::fMenuSearch. protected . ""Search"" menu entry ; Definition at line 50 of file TGTextEditor.h. ◆ fMenuTools. TGPopupMenu* TGTextEditor::fMenuTools. protected . ""Tools"" menu entry ; Definition at line 51 of file TGTextEditor.h. ◆ fStatusBar. TGStatusBar* TGTextEditor::fStatusBar. protected . for file name, line and col number ; Definition at line 38 of file TGTextEditor.h. ◆ fTextChanged. Bool_t TGTextEditor::fTextChanged. protected . true if text has changed ; Definition at line 54 of file TGTextEditor.h. ◆ fTextEdit. TGTextEdit* TGTextEditor::fTextEdit. protected . text edit widget ; Definition at line 40 of file TGTextEditor.h. ◆ fTimer. TTimer* TGTextEditor::fTimer. protected . for statusbar and toolbar update ; Definition at line 37 of file TGTextEditor.h. ◆ fToolBar. TGToolBar* TGTextEditor::fToolBar. protected . toolbar with common tool buttons ; Definition at line 39 of file TGTextEditor.h. Libraries for TGTextEditor:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTextEditor.h; gui/gui/src/TGTextEditor.cxx. TGTextEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:50983,update,update,50983,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['update'],['update']
Deployability,"ed Attributes; RooSetProxy _cacheObs;  Observable to be cached. ;  ; RooRealProxy pdf;  Proxy to p.d.f being cached. ;  ;  Protected Attributes inherited from RooAbsCachedPdf; std::map< Int_t, AnaIntConfig > _anaIntMap;  ! Map for analytical integration codes ;  ; RooAICRegistry _anaReg;  ! Registry for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ; Int_t _ipOrder;  The cache manager. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:71402,configurat,configuration,71402,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['configurat'],['configuration']
Deployability,"ed Members; Includes; Libraries. Function documentation; TBranchClones(); -- Default and i/o constructor. TBranchClones(TTree* tree, const char* name, void* clonesaddress, Int_t basketsize = 32000, Int_t compress = -1, Int_t splitlevel = 1); -- Constructor. TBranchClones(TBranch* parent, const char* name, void* clonesaddress, Int_t basketsize = 32000, Int_t compress = -1, Int_t splitlevel = 1); -- Constructor. void Init(TTree* tree, TBranch* parent, const char* name, void* clonesaddress, Int_t basketsize = 32000, Int_t compress = -1, Int_t splitlevel = 1); Initialization (non-virtual, to be called from constructor). ~TBranchClones(); -- Destructor. void Browse(TBrowser* b); -- Browse this branch. Int_t Fill(); -- Loop on all branches and fill Basket buffer. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Read all branches and return total number of bytes read. void Print(Option_t* option = """") const; -- Print branch parameters. void Reset(Option_t* option = """"); -- Reset branch. Existing buffers are deleted; Entries, max and min are reset. void SetAddress(void* add); -- Set address of this branch. void SetBasketSize(Int_t buffsize); -- Reset basket size for all sub-branches. void Streamer(TBuffer& b); -- Serialize/Deserialize from a buffer. void UpdateFile(); Refresh the value of fDirectory (i.e. where this branch writes/reads its buffers); with the current value of fTree->GetCurrentFile unless this branch has been; redirected to a different file. Also update the sub-branches. Int_t GetN() const; {return fN;}. TClonesArray * GetList() const; {return fList;}. Bool_t IsFolder() const; {return kTRUE;}. » Author: Rene Brun 11/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchClones.h 33097 2010-04-19 21:47:55Z pcanal $ » Last generated: 2010-09-23 20:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchClones.html:14142,update,update,14142,root/html528/TBranchClones.html,https://root.cern,https://root.cern/root/html528/TBranchClones.html,1,['update'],['update']
Deployability,"ed Members; Includes; Libraries. Function documentation; TBranchClones(); -- Default and i/o constructor. TBranchClones(TTree* tree, const char* name, void* clonesaddress, Int_t basketsize = 32000, Int_t compress = -1, Int_t splitlevel = 1); -- Constructor. TBranchClones(TBranch* parent, const char* name, void* clonesaddress, Int_t basketsize = 32000, Int_t compress = -1, Int_t splitlevel = 1); -- Constructor. void Init(TTree* tree, TBranch* parent, const char* name, void* clonesaddress, Int_t basketsize = 32000, Int_t compress = -1, Int_t splitlevel = 1); Initialization (non-virtual, to be called from constructor). ~TBranchClones(); -- Destructor. void Browse(TBrowser* b); -- Browse this branch. Int_t Fill(); -- Loop on all branches and fill Basket buffer. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Read all branches and return total number of bytes read. void Print(Option_t* option = """") const; -- Print branch parameters. void Reset(Option_t* option = """"); -- Reset branch. Existing buffers are deleted; Entries, max and min are reset. void SetAddress(void* add); -- Set address of this branch. void SetBasketSize(Int_t buffsize); -- Reset basket size for all sub-branches. void Streamer(TBuffer& b); -- Serialize/Deserialize from a buffer. void UpdateFile(); Refresh the value of fDirectory (i.e. where this branch writes/reads its buffers); with the current value of fTree->GetCurrentFile unless this branch has been; redirected to a different file. Also update the sub-branches. Int_t GetN() const; {return fN;}. TClonesArray * GetList() const; {return fList;}. Bool_t IsFolder() const; {return kTRUE;}. » Author: Rene Brun 11/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchClones.h 39635 2011-06-09 15:37:27Z pcanal $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranchClones.html:14938,update,update,14938,root/html530/TBranchClones.html,https://root.cern,https://root.cern/root/html530/TBranchClones.html,1,['update'],['update']
Deployability,ed PDF. ; Definition at line 81 of file RooNumConvolution.h. ◆ _cloneVar. RooAbsReal* RooNumConvolution::_cloneVar. mutableprotected . Pointer to cloned convolution variable. ; Definition at line 80 of file RooNumConvolution.h. ◆ _convIntConfig. RooNumIntConfig RooNumConvolution::_convIntConfig. protected . Configuration of numeric convolution integral ;. ; Definition at line 69 of file RooNumConvolution.h. ◆ _doProf. bool RooNumConvolution::_doProf. protected . Switch to activate profiling option. ; Definition at line 94 of file RooNumConvolution.h. ◆ _init. bool RooNumConvolution::_init. mutableprotected . Definition at line 63 of file RooNumConvolution.h. ◆ _integrand. RooConvIntegrandBinding* RooNumConvolution::_integrand. mutableprotected . ! Binding of Convolution Integrand function ; Definition at line 70 of file RooNumConvolution.h. ◆ _integrator. std::unique_ptr<RooAbsIntegrator> RooNumConvolution::_integrator. mutableprotected . ! Numeric integrator of convolution integrand ; Definition at line 71 of file RooNumConvolution.h. ◆ _origModel. RooRealProxy RooNumConvolution::_origModel. protected . Original resolution model. ; Definition at line 75 of file RooNumConvolution.h. ◆ _origPdf. RooRealProxy RooNumConvolution::_origPdf. protected . Original input PDF. ; Definition at line 74 of file RooNumConvolution.h. ◆ _origVar. RooRealProxy RooNumConvolution::_origVar. protected . Original convolution variable. ; Definition at line 73 of file RooNumConvolution.h. ◆ _ownedClonedModelSet. RooArgSet RooNumConvolution::_ownedClonedModelSet. mutableprotected . Owning set of cloned model components. ; Definition at line 78 of file RooNumConvolution.h. ◆ _ownedClonedPdfSet. RooArgSet RooNumConvolution::_ownedClonedPdfSet. mutableprotected . Owning set of cloned PDF components. ; Definition at line 77 of file RooNumConvolution.h. ◆ _useWindow. bool RooNumConvolution::_useWindow. protected . Switch to activate window convolution. ; Definition at line 89 of file RooNumConvo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:72863,integrat,integrator,72863,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['integrat'],['integrator']
Deployability,"ed after the projection has; been already performed on the parent.; This is called from TEveElement::ProjectChild(). Returns the projected replica of el. Can be 0, if el and none of; its children are projectable. Int_t SubImportChildren(TEveElement* el, TEveElement* proj_parent); Recursively import childer elements of el and apply projection; to the newly imported objects. The proj_parent argument should be a projected replica of; element 'el'. This allows to insert projected children of; a given element when they are added after the projection has; been already performed on the parent.; This is called from TEveElement::ProjectChild(). Returns the projected replica of el. Can be 0, if el and none of; its children are projectable. void ProjectChildrenRecurse(TEveElement* el); Project el (via TEveProjected::UpdateProjection()) and recurse; through el's children.; Bounding-box is updated along the recursion. void ProjectChildren(); Project all children recursively, update bounding-box and notify; TEveManger about the scenes that have been changed. void ComputeBBox(); Virtual from TAttBBox; fill bounding-box information. The bounding-box information is kept coherent during addition of; projected elements and projection parameter updates. This is; called only in case the manager has not been populated at all. TEveProjectionManager(const TEveProjectionManager& ). TEveProjectionManager& operator=(const TEveProjectionManager& ). TEveProjection* GetProjection(); { return fProjection; }. TEveVector& GetCenter(); { return fCenter; }. void SetCurrentDepth(Float_t d); { fCurrentDepth = d; }. Float_t GetCurrentDepth() const; { return fCurrentDepth; }. void SetImportEmpty(Bool_t ie); { fImportEmpty = ie; }. Bool_t GetImportEmpty() const; { return fImportEmpty; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveProjectionManager.html:25160,update,updates,25160,root/html534/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html534/TEveProjectionManager.html,1,['update'],['updates']
Deployability,"ed after the projection has; been already performed on the parent.; This is called from TEveElement::ProjectChild(). Returns the projected replica of el. Can be 0, if el and none of; its children are projectable. Int_t SubImportChildren(TEveElement* el, TEveElement* proj_parent); Recursively import childer elements of el and apply projection; to the newly imported objects. The proj_parent argument should be a projected replica of; element 'el'. This allows to insert projected children of; a given element when they are added after the projection has; been already performed on the parent.; This is called from TEveElement::ProjectChild(). Returns the projected replica of el. Can be 0, if el and none of; its children are projectable. void ProjectChildrenRecurse(TEveElement* el); Project el (via TEveProjected::UpdateProjection()) and recurse; through el's children.; Bounding-box is updated along the recursion. void ProjectChildren(); Project all children recursively, update bounding-box and notify; TEveManger about the scenes that have been changed. void ComputeBBox(); Virtual from TAttBBox; fill bounding-box information. The bounding-box information is kept coherent during addition of; projected elements and projection parameter updates. This is; called only in case the manager has not been populated at all. TEveProjectionManager(const TEveProjectionManager& ). TEveProjectionManager& operator=(const TEveProjectionManager& ). TEveProjection* GetProjection(); { return fProjection; }. TEveVector& GetCenter(); { return fCenter; }. void SetCurrentDepth(Float_t d); { fCurrentDepth = d; }. Float_t GetCurrentDepth() const; { return fCurrentDepth; }. void SetImportEmpty(Bool_t ie); { fImportEmpty = ie; }. Bool_t GetImportEmpty() const; { return fImportEmpty; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveProjectionManager.html:26089,update,updates,26089,root/html604/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html604/TEveProjectionManager.html,1,['update'],['updates']
Deployability,"ed after the projection has; been already performed on the parent.; This is called from TEveElement::ProjectChild(). Returns the projected replica of el. Can be 0, if el and none of; its children are projectable. Int_t SubImportChildren(TEveElement* el, TEveElement* proj_parent); Recursively import childer elements of el and apply projection; to the newly imported objects. The proj_parent argument should be a projected replica of; element 'el'. This allows to insert projected children of; a given element when they are added after the projection has; been already performed on the parent.; This is called from TEveElement::ProjectChild(). Returns the projected replica of el. Can be 0, if el and none of; its children are projectable. void ProjectChildrenRecurse(TEveElement* el); Project el (via TEveProjected::UpdateProjection()) and recurse; through el's children.; Bounding-box is updated along the recursion. void ProjectChildren(); Project all children recursively, update bounding-box and notify; TEveManger about the scenes that have been changed. void ComputeBBox(); Virtual from TAttBBox; fill bounding-box information. The bounding-box information is kept coherent during addition of; projected elements and projection parameter updates. This is; called only in case the manager has not been populated at all. TEveProjectionManager(const TEveProjectionManager& ). TEveProjectionManager& operator=(const TEveProjectionManager& ). TEveProjection* GetProjection(); { return fProjection; }. TEveVector& GetCenter(); { return fCenter; }. void SetCurrentDepth(Float_t d); { fCurrentDepth = d; }. Float_t GetCurrentDepth() const; { return fCurrentDepth; }. void SetImportEmpty(Bool_t ie); { fImportEmpty = ie; }. Bool_t GetImportEmpty() const; { return fImportEmpty; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjectionManager.html:26089,update,updates,26089,root/html602/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html602/TEveProjectionManager.html,1,['update'],['updates']
Deployability,"ed by PyROOT; # in the Python world. However, be aware that objects other than fundamental types,; # such as complex C++ objects and not int or float, are costly to read-out.; ROOT.gInterpreter.Declare(""""""; // Inject the C++ class CustomObject in the C++ runtime.; class CustomObject {; public:; int x = 42;; };; // Create a function that returns such an object. This is called to fill the dataframe.; CustomObject fill_object() { return CustomObject(); }; """"""); ; df3 = df.Define(""custom_object"", ""fill_object()""); npy5 = df3.AsNumpy(); print(""Read-out of C++ objects:\n{}\n"".format(npy5[""custom_object""])); print(""Access to all methods and data members of the C++ object:\nObject: {}\nAccess data member: custom_object.x = {}\n"".format(; repr(npy5[""custom_object""][0]), npy5[""custom_object""][0].x)); ; # Note that you can pass the object returned by AsNumpy directly to pandas.DataFrame; # including any complex C++ object that may be read-out.; try:; import pandas; except:; print(""Please install the pandas package to run this section of the tutorial.""); exit(1); ; df = pandas.DataFrame(npy5); print(""Content of the ROOT.RDataFrame as pandas.DataFrame:\n{}\n"".format(df)); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html:2665,install,install,2665,doc/master/df026__AsNumpyArrays_8py.html,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html,1,['install'],['install']
Deployability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:12699,integrat,integration,12699,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,4,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:23973,integrat,integration,23973,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,6,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:12480,integrat,integration,12480,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,2,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:23553,integrat,integration,23553,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,56,"['configurat', 'integrat']","['configuration', 'integration']"
Deployability,"ed by x,y,namez by a weight w. If the weight is not equal to 1, the storage of the sum of squares of; weights is automatically triggered and the sum of the squares of weights is incremented; by w^2 in the corresponding cell.; The function returns the corresponding global bin number which has its content; incremented by w. void FillRandom(const char* fname, Int_t ntimes = 5000); Fill histogram following distribution in function fname. The distribution contained in the function fname (TF1) is integrated; over the channel contents.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. void FillRandom(TH1* h, Int_t ntimes = 5000); Fill histogram following distribution in histogram h. The distribution contained in the histogram h (TH3) is integrated; over the channel contents.; It is normalized to 1.; Getting one random number implies:; - Generating a random number between 0 and 1 (say r1); - Look in which bin in the normalized integral r1 corresponds to; - Fill histogram channel; ntimes random numbers are generated. Int_t FindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; Find first bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. Int_t FindLastBinAbove(Double_t threshold = 0, Int_t axis = 1) const; Find last bin with content > threshold for axis (1=x, 2=y, 3=z); if no bins with content > threshold is found the function returns -1. void FitSlicesZ(TF1* f1 = 0, Int_t binminx = 1, Int_t binmaxx = 0, Int_t binminy = 1, Int_t binmaxy = 0, Int_t cut = 0, Option_t* option = ""QNR""); Project slices along Z in case of a 3-D histogram, then fit each slice; with function f1 and make a 2-d histogram for each fit parameter; Only cells",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:34449,integrat,integrated,34449,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,2,['integrat'],['integrated']
Deployability,"ed byte values from tree branches ; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_tRooAbsTestStatistic::_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_tRooAbsTestStatistic::_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Bool_t_weightSqApply weights squared?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNLLVar(const char* name, const char* title, RooAbsPdf& pdf, RooAbsData& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNLLVar.html:36708,integrat,integrator,36708,root/html530/RooNLLVar.html,https://root.cern,https://root.cern/root/html530/RooNLLVar.html,4,"['configurat', 'integrat']","['configuration', 'integrator']"
Deployability,"ed efficiency. The weights to be used in the; combination should be the probability that an; electron comes from the corresponding process.; . VI. Further operations; VI.1 Information about the internal histograms; The methods GetPassedHistogram and GetTotalHistogram; return a constant pointer to the internal histograms. They can be used to; obtain information about the internal histograms (e.g. the binning, number of passed / total events in a bin, mean values...).; One can obtain a clone of the internal histograms by calling GetCopyPassedHisto or GetCopyTotalHisto.; The returned histograms are completely independent from the current; TEfficiency object. By default, they are not attached to a directory to; avoid the duplication of data and the user is responsible for deleting them.; . Example:; //open a root file which contains a TEfficiency object; TFile* pFile = new TFile(""myfile.root"",""update"");; //get TEfficiency object with name ""my_eff""; TEfficiency* pEff = (TEfficiency*)pFile->Get(""my_eff"");; //get clone of total histogram; TH1* clone = pEff->GetCopyTotalHisto();; //change clone...; //save changes of clone directly; clone->Write();; //or append it to the current directoy and write the file; //clone->SetDirectory(gDirectory);; //pFile->Wrtie();; //delete histogram object; delete clone;; clone = 0;; . It is also possible to set the internal total or passed histogram by using the; methods SetPassedHistogram or; SetTotalHistogram.; In order to ensure the validity of the TEfficiency object, the consistency of the; new histogram and the stored histogram is checked. It sometimes might be; impossible to change the histograms in a consistent way. Therefore one can force; the replacement by passing the option ""f"". Then the user has to ensure that the; other internal histogram is replaced as well and that the TEfficiency object is; in a valid state.; VI.2 Fitting; The efficiency can be fitted using the Fit function which uses internally the TBinomialEfficiencyFitter::F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:17631,update,update,17631,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,1,['update'],['update']
Deployability,"ed for suppression of signals; TGButtonGroup*fTypeButtons; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipSetSubEditor(const TGWindow* p); Constructor. void SetModel(TGLClipSet* m); Set model object. void Changed(); Emit Changed signal. void ClipValueChanged(); One of number entries was changed. void ClipTypeChanged(Int_t ); Clip type radio button changed - update viewer. void UpdateViewerClip(); Change clipping volume. void ResetViewerClip(); Reset transformation of the current clip. TGLClipSetSubEditor(const TGLClipSetSubEditor& ). TGLClipSetSubEditor& operator=(const TGLClipSetSubEditor& ). virtual ~TGLClipSetSubEditor(); {}. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLClipSetSubEditor.html:20249,update,update,20249,root/html604/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html604/TGLClipSetSubEditor.html,1,['update'],['update']
Deployability,"ed for suppression of signals; TGButtonGroup*fTypeButtons; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLClipSetSubEditor(const TGWindow* p); Constructor. void SetModel(TGLClipSet* m); Set model object. void Changed(); Emit Changed signal. void ClipValueChanged(); One of number entries was changed. void ClipTypeChanged(Int_t ); Clip type radio button changed - update viewer. void UpdateViewerClip(); Change clipping volume. void ResetViewerClip(); Reset transformation of the current clip. TGLClipSetSubEditor(const TGLClipSetSubEditor& ). TGLClipSetSubEditor& operator=(const TGLClipSetSubEditor& ). virtual ~TGLClipSetSubEditor(); {}. » Author: Matevz Tadel, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLClipSetSubEditor.html:20249,update,update,20249,root/html602/TGLClipSetSubEditor.html,https://root.cern,https://root.cern/root/html602/TGLClipSetSubEditor.html,1,['update'],['update']
Deployability,"ed frame while moving. Bool_t CheckTargetAtPoint(Int_t x, Int_t y); Helper. Look for the drop target under grabbed/selected frame while moving. Bool_t HandleMotion(Event_t* ); Handle motion event. void PlaceFrame(TGFrame* , TGLayoutHints* ); Put created frame at position of the last mouse click. void DrawLasso(); Draw lasso for allocation new object. Bool_t HandleClientMessage(Event_t* ); Handle client message. Bool_t HandleDestroyNotify(Event_t* ); Handle destroy notify. Bool_t HandleSelection(Event_t* ); not used yet. Bool_t HandleSelectionRequest(Event_t* ); not used yet. TGFrame * GetMovableParent(TGWindow* p); Find parent frame which can be dragged. TGWindow * GetResizableParent(TGWindow* p); Find parent frame which can be resized. Bool_t StartDrag(TGFrame* src, Int_t x, Int_t y); Start dragging. Bool_t EndDrag(); End dragging. Bool_t Cancel(Bool_t delSrc); Do cancel action. Bool_t Drop(); Drop grabbed frame. Bool_t IsMoveWaiting() const; Waits for either the mouse move from the given initial ButtonPress location; or for the mouse button to be released. If mouse moves away from the initial; ButtonPress location before the mouse button is released ""IsMoveWaiting""; returns kTRUE. If the mouse button released before the mose moved from the; initial ButtonPress location, ""IsMoveWaiting"" returns kFALSE. void Compact(Bool_t global = kTRUE); Layout and Resize frame.; If global is kFALSE - compact selected frame; If global is kFALSE - compact main frame of selected frame. void SetEditable(Bool_t on = kTRUE); Grab server. void ToGrid(Int_t& x, Int_t& y); Return grid coordinates which are close to given. void HandleAction(Int_t act); Main handler of actions. Bool_t CanChangeLayout(TGWindow* w) const; kTRUE - if it's possible to switch disable/enable layout. Bool_t CanChangeLayoutOrder(TGWindow* w) const; kTRUE - if it's possible to change layout order in the parent's layout of window w. Bool_t CanCompact(TGWindow* w) const; kTRUE is frame could be compacted/""layouted"". vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBldDragManager.html:29472,release,released,29472,root/html528/TGuiBldDragManager.html,https://root.cern,https://root.cern/root/html528/TGuiBldDragManager.html,6,['release'],['released']
Deployability,"ed frame; If global is kFALSE - compact main frame of selected frame. void SetEditable(Bool_t on = kTRUE); Grab server. void ToGrid(Int_t& x, Int_t& y); Return grid coordinates which are close to given. void HandleAction(Int_t act); Main handler of actions. Bool_t CanChangeLayout(TGWindow* w) const; kTRUE - if it's possible to switch disable/enable layout. Bool_t CanChangeLayoutOrder(TGWindow* w) const; kTRUE - if it's possible to change layout order in the parent's layout of window w. Bool_t CanCompact(TGWindow* w) const; kTRUE is frame could be compacted/""layouted"". void CreatePropertyEditor(); Create widget property editor (it could be located outside of guibuilder). void SetPropertyEditor(TGuiBldEditor* e); Helper method. void HandleLayoutOrder(Bool_t forward = kTRUE); Change layout order. void HandleGrid(); Switch on/of grid drawn. TGCompositeFrame * FindLayoutFrame(TGFrame* f); Helper to find a frame which can be layouted. void HandleUpdateSelected(TGFrame* ); When selected frame was changed by guibuilder editor -> update its appearence. void HideGrabRectangles(); Hide/Unmap grab rectangles. void DeletePropertyEditor(); Delete widget property editor. Int_t GetStrartDragX() const; Return the X coordinate where drag started. Int_t GetStrartDragY() const; Return the Y coordinate where drag started. Int_t GetEndDragX() const; Return the current X coordinate of the dragged frame. Int_t GetEndDragY() const; Returns the current Y coordinate of the dragged frame. void BreakLayout(); Disable/Enable layout for selected/grabbed composite frame. void SwitchLayout(); Switch Horizontal/Vertical layout of selected/grabbed composite frame. TGFrame * GetSelected() const; Return the current grabbed/selected frame. void CloseMenus(); Helper to close all menus. TGFrame * GetEditableParent(TGFrame* f); Return the parent frame which can be editted. void AddDialogMethods(TGPopupMenu* menu, TObject* object); Add DIALOG entries to the selected frame popup menu. void AddClassMenuMethods",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBldDragManager.html:30868,update,update,30868,root/html528/TGuiBldDragManager.html,https://root.cern,https://root.cern/root/html528/TGuiBldDragManager.html,6,['update'],['update']
Deployability,"ed from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; std::vector< std::vector< Matrix_t > > fBiasUpdates;  The accumulation of the past Biases for performing updates. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ;  ; Scalar_t fRho;  The Rho constant used by the optimizer. ;  ; std::vector< std::vector< Matrix_t > > fWeightUpdates;  The accumulation of the past Weights for performing updates. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor1;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor2;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:3033,update,updates,3033,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['update'],['updates']
Deployability,"ed from inverting the cumulative posterior distribution. . The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when ; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extrem of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by ; scanning the posterior function in the given number of points. The firts method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. . The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using ; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in the nuisances and in the poi. All the numerical ; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Function Members (Methods); public:. virtual~BayesianCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooStats::BayesianCalculatorBayesianCalculator(); RooStats::BayesianCalculatorBayesianCalculator(const RooStats::BayesianCalculator&); RooStats::BayesianCalculatorBayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:1785,integrat,integration,1785,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['integrat'],['integration']
Deployability,"ed grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically ; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create palette for further use. In particular, it is; rec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColor.html:4491,continuous,continuous,4491,root/html532/TColor.html,https://root.cern,https://root.cern/root/html532/TColor.html,1,['continuous'],['continuous']
Deployability,"ed grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:4511,continuous,continuous,4511,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,1,['continuous'],['continuous']
Deployability,"ed grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; const Int_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TColor.html:4512,continuous,continuous,4512,root/html602/TColor.html,https://root.cern,https://root.cern/root/html602/TColor.html,2,['continuous'],['continuous']
Deployability,"ed in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooRealProxyRooAbsMoment::_funcInput function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooRealProxy_ifInt(F(x))dx ;; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; RooRealProxy_ixfInt(X*F(X))dx ;; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsMoment::_meanMean (if calculated for central moment); static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFirstMoment.html:33567,integrat,integration,33567,root/html534/RooFirstMoment.html,https://root.cern,https://root.cern/root/html534/RooFirstMoment.html,2,['integrat'],['integration']
Deployability,"ed in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTruthModel.html:41836,integrat,integration,41836,root/html534/RooTruthModel.html,https://root.cern,https://root.cern/root/html534/RooTruthModel.html,1,['integrat'],['integration']
Deployability,"ed in recent unfolding ; empty bins of the response matrix or bins which can not be unfolded due to rank deficits are not counted ; Definition at line 3242 of file TUnfold.cxx. ◆ GetNr(). Int_t TUnfold::GetNr ; (; void ; ); const. get number of regularisation conditions ; Ths returns the number of regularisation conditions, useful for booking a histogram for a subsequent call of GetL(). ; Definition at line 3176 of file TUnfold.cxx. ◆ GetNx(). Int_t TUnfold::GetNx ; (; void ; ); const. inlineprotected . returns internal number of output (truth) matrix rows ; Definition at line 230 of file TUnfold.h. ◆ GetNy(). Int_t TUnfold::GetNy ; (; void ; ); const. inlineprotected . returns the number of measurement bins ; Definition at line 238 of file TUnfold.h. ◆ GetOutput(). void TUnfold::GetOutput ; (; TH1 * ; output, . const Int_t * ; binMap = nullptr . ); const. get output distribution, possibly cumulated over several bins ; Parameters. [out]outputexisting output histogram. content and errors will be updated. ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. If nonzero, the array binMap must have dimension n+2, where n corresponds to the number of bins on the truth axis of the response matrix (the histogram specified with the TUnfold constructor). The indexes of binMap correspond to the truth bins (including underflow and overflow) of the response matrix. The element binMap[i] specifies the histogram number in output where the corresponding truth bin will be stored. It is possible to specify the same output bin number for multiple indexes, in which case these bins are added. Set binMap[i]=-1 to ignore an unfolded truth bin. The uncertainties are calculated from the corresponding parts of the covariance matrix, properly taking care of added truth bins. ; If the pointer binMap is zero, the bins are mapped one-to-one. Truth bin zero (underflow) is stored in the output underflow, truth bin 1 is stored in bin number 1, etc. ; Definition at line 3289",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:40696,update,updated,40696,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['update'],['updated']
Deployability,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:6825,integrat,integration,6825,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,5,['integrat'],['integration']
Deployability,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6797,integrat,integration,6797,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,1,['integrat'],['integration']
Deployability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html:4832,integrat,integration,4832,root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html:4834,integrat,integration,4834,root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html:4834,integrat,integration,4834,root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['integrat'],['integration']
Deployability,"ed object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoomended to re-generate the toy for each poi scanned point of the posterior function. ROOFIT:; use roofit default integration methods which will produce a nested integral (not reccomended for more; than 1 nuisance parameters). if type = 0 use default specified via class Integrato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:13040,integrat,integration,13040,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['integrat'],['integration']
Deployability,"ed objects.Definition TList.cxx:468; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::GetLastInt_t GetLast() const overrideReturn index of last object in array.Definition TObjArray.cxx:577; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::GetRootSysstatic const TString & GetRootSys()Get the rootsys directory in the installation. Static utility function.Definition TROOT.cxx:2983; TROOT::GetDataDirstatic const TString & GetDataDir()Get the data directory in the installation. Static utility function.Definition TROOT.cxx:3066; TRootSnifferStoreJsonStorage of hierarchy scan in TRootSniffer in JSON format.Definition TRootSnifferStore.h:79; TRootSnifferStoreXmlStorage of hierarchy scan in TRootSniffer in XML format.Definition TRootSnifferStore.h:55; TRootSnifferSniffer of ROOT objects, data provider for THttpServer.Definition TRootSniffer.h:115; TRootSniffer::CreateOwnTopFoldervoid CreateOwnTopFolder()Create own TFolder structures independent from gROOT This allows to have many independent TRootSniffe...Definition TRootSniffer.cxx:913; TRootSniffer::SetReadOnlyvoid SetReadOnly(Bool_t on=kTRUE)When readonly on (default), sniffer is not allowed to change ROOT structures For instance,...Definition TRootSniffer.h:190; TRootSniffer::SetScanGlobalDirvoid SetScanGlobalDir(Bool_t on=kTRUE)When enabled (default), sniffer scans gROOT for files, canvases, histograms.Definition TRootSniffer.h:206; TStringBasic string cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:68377,install,installation,68377,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['install'],['installation']
Deployability,"ed on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Chebyshev.html:3437,integrat,integration,3437,root/html528/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Chebyshev.html,1,['integrat'],['integration']
Deployability,"ed one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:129347,configurat,configuration,129347,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['configurat'],['configuration']
Deployability,"ed only); frame2 = dt.frame(Title=""Decay distribution of mixed events""); data.plotOn(frame2, Cut=""mixState==mixState::mixed""); ; # Position slice in mixState at ""mixed"" and plot slice of pdf in mixstate; # over data (integrated over tagFlav); bmix_gm1.plotOn(frame2, Slice=(mixState, ""mixed"")); ; # Create frame, data (unmixed only); frame3 = dt.frame(Title=""Decay distribution of unmixed events""); data.plotOn(frame3, Cut=""mixState==mixState::unmixed""); ; # Position slice in mixState at ""unmixed"" and plot slice of pdf in; # mixstate over data (integrated over tagFlav); bmix_gm1.plotOn(frame3, Slice=(mixState, ""unmixed"")); ; c = ROOT.TCanvas(""rf310_sliceplot"", ""rf310_sliceplot"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame3.Draw(); ; c.SaveAs(""rf310_sliceplot.png""); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (mixState,tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 16213 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf310_sliceplot.py. tutorialsroofitrf310_sliceplot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8py.html:3236,integrat,integrates,3236,doc/master/rf310__sliceplot_8py.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8py.html,3,['integrat'],['integrates']
Deployability,"ed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:24614,integrat,integrated,24614,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['integrat'],['integrated']
Deployability,ed shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxy_paramsEffective parameters of this p.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:44415,integrat,integrated,44415,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,3,['integrat'],['integrated']
Deployability,"ed to document your classes in a reference guide, and to convert your text or source files to HTML.; 27.1 Reference Guide; The Reference Guide for the ROOT classes at http://root.cern.ch/root/html/ has been generated by ROOT’s THtml class. Just as for ROOT’s classes, it can generate (and update) a reference guide for your classes, too. You document your classes using source code comments. All comments will be automatically put into a <pre></pre> environment to keep the indentation and line length. You can write “raw” HTML by enclosing comments in the keywords Begin_Html and End_Html.; To generate documentation for the class TObject you could run the following commands:; root[] THtml h; root[] h.SetInputDir(""$(ROOTSYS)"");; root[] h.MakeClass(""TObject"");; root[] h.CreateJavascript();; root[] h.CreateStylesheet();; The comments following the first comment of the form //____________________, before any method, is assumed to be the class description. As with any other documentation part, it has to be a continuous block of comments.; Any documented class will have an class index entry in the ClassIndex.html, showing their name with a link to their documentation page and a miniature description. This description for e.g. the class MyClass has to be given in MyClass's header file as documentation.; A method description block starts immediately after ‘{’ and looks like this:; void TWorld::HelloWorldFunc(string *text); {; // This is a documentation example of the function TWorld::HelloWorldFunc; helloWorld.Print(text);; }; Like in a class description block, everything until the first non-commented line is considered as a valid member function description block.; Data members are documented by putting a C++ comment behind their declaration in the header file, e.g.; Int_t fIAmADataMember; // this is a data member; When documenting a class, THtml creates both a “beautified” version of the source file and a web page containing the class documentation. The documentation also shows ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1240940,continuous,continuous,1240940,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['continuous'],['continuous']
Deployability,"ed with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits or plotting etc. NoteThe binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit. Use RooRealVar::setBinning() to adapt it. Instruct test statistics to carry out this wrapping automatically: pdf.fitTo(data, IntegrateBins(<precision>));; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooBinSamplingPdf::pdfconst RooAbsPdf & pdf() constDefinition RooBinSamplingPdf.h:110; This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped, depending on the value of precision:; precision < 0.: None of the PDFs are touched, bin sampling is off.; precision = 0.: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision forwarded to the integrator is 1.E-4 (the default argument of the constructor).; precision > 0.: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are fit to (see next paragraph). The same ‘'precision’` is used for all integrators. Simulating a binned fit using RooDataSet; Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to integrate over in this kind of dataset).; In this case, IntegrateBins(>0.) needs to be used, and the desired binning needs to be assigned to the observable of the dataset: RooRealVar x(""x"", ""x"", 0., 5.);; x.setBins(10);; ; // <create dataset and model>; ; model.fitTo(data, IntegrateBins(>0.));; RooRealVarVariable t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:3219,integrat,integrator,3219,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['integrat'],['integrator']
Deployability,"ed with item the current directory. ;  ; void ClearHistory ();  clear navigation history ;  ; void CreateBrowser (const char *name);  Create the actual browser. ;  ; void DeleteListTreeItem (TGListTreeItem *item);  delete list tree item, remove it from history ;  ; void DisplayDirectory ();  Display current directory in second label, fLbl2. ;  ; void DisplayTotal (Int_t total, Int_t selected);  Display in statusbar total number of objects and number of selected objects in IconBox. ;  ; void HideTextEdit ();  hide text edit ;  ; void HighlightListLevel ();  helper method to track history ;  ; Bool_t HistoryBackward ();  go to the past ;  ; Bool_t HistoryForward ();  go to the future ;  ; void IconBoxAction (TObject *obj);  Default action when double clicking on icon. ;  ; void ListTreeHighlight (TGListTreeItem *item);  Open tree item and list in iconbox its contents. ;  ; TRootBrowserLite & operator= (const TRootBrowserLite &)=delete;  ; void Search ();  starts serach dialog ;  ; void SetViewMode (Int_t new_mode, Bool_t force=kFALSE);  Set iconbox's view mode and update menu and toolbar buttons accordingly. ;  ; void ShowMacroButtons (Bool_t show=kTRUE);  show/hide macro buttons ;  ; void ToSystemDirectory (const char *dirname);  display directory ;  ; void UpdateDrawOption ();  add new draw option to the ""history"" ;  . Private Attributes; TGLayoutHints * fBarLayout;  ; Bool_t fBrowseTextFile;  ; TGLayoutHints * fComboLayout;  ; TGComboBox * fDrawOption;  drawing option entry ;  ; TGLayoutHints * fExpandLayout;  ; TGHorizontalFrame * fHf;  ; TList * fHistory;  history of browsing ;  ; TObject * fHistoryCursor;  current history position ;  ; const TGPicture * fIconPic;  icon picture ;  ; TGLabel * fLbl1;  ; TGLabel * fLbl2;  ; TGCompositeFrame * fListHdr;  ; TGMenuBar * fMenuBar;  ; TGLayoutHints * fMenuBarHelpLayout;  ; TGLayoutHints * fMenuBarItemLayout;  ; TGLayoutHints * fMenuBarLayout;  ; TString fTextFileName;  ; TGToolBar * fToolBar;  ; TGHorizontal3DLine * fToo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:36398,update,update,36398,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['update'],['update']
Deployability,"ed(); Bool_tViewCheck() const; voidViewCheck(Bool_t c); Float_tWFLineW() const. private:. TGLSceneInfo(const TGLSceneInfo&); TGLSceneInfo&operator=(const TGLSceneInfo&). Data Members; public:. enum EClipTest { kClipNone; kClipOutside; kClipInside; };. protected:. Bool_tfActiveShow fScene in fViewer; UInt_tfCameraStampCamera's time-stamp on last update.; TGLClip*fClipOptional override of clipping-plane; Char_tfClipModeClipping mode, can be disbled.; TGLPlaneSet_tfClipPlanesClipping planes from clip-object; which planes are kept depends on inside/outside mode.; UInt_tfClipStampClip's time-stamp on last update.; TGLPlaneSet_tfFrustumPlanesClipping planes defined by frustum; only those intersecting the scene volume are kept.; Bool_tfInClipIs scene contained within clipping-volume.; Bool_tfInFrustumIs scene intersecting view-frustum.; Short_tfLODOptional override of scene lod; TGLCamera*fLastCameraLast camera used.; TGLClip*fLastClipLast combined viewer/scene clip (set in scene::update); Short_tfLastLODLast combined viewer/scene lod (set in scene::lodify-scene-info).; Float_tfLastOLLineWLast combined viewer/scene outline line-width (set in scene::pre-draw).; Short_tfLastStyleLast combined viewer/scene style (set in scene::pre-draw).; Float_tfLastWFLineWLast combined viewer/scene wire-frame line-width (set in scene::pre-draw).; Float_tfOLLineWOptional override of scene outline line-width; TGLSceneBase*fScene; UInt_tfSceneStampScene's time-stamp on last update.; Short_tfStyleOptional override of scene style; TGLBoundingBoxfTransformedBBox; Bool_tfUpdateTimeoutedSet if update was interrupted.; Bool_tfViewCheckViewer side check if render is necessary.; TGLViewerBase*fViewer; Float_tfWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLSceneInfo(TGLViewerBase* view = 0, TGLSceneBase* scene = 0); Default constructor. void SetActive(Bool_t a); Set active state of the scene, mark vie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSceneInfo.html:3507,update,update,3507,root/html528/TGLSceneInfo.html,https://root.cern,https://root.cern/root/html528/TGLSceneInfo.html,4,['update'],['update']
Deployability,"ed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooFit::BidirMMapPipe*_pipe! connection to child; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; RooAbsReal::ErrorLoggingMode_remoteEvalErrorLoggingState; Bool_t_retrieveDispatched!; RooArgList_saveVarsCopy of variables; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; static RooMPSentinel_sentinel; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooRealMPFE::State_state; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; RooRealMPFE*_updateMaster! Update master; Double_tRooAbsReal::_valueCache for current value of object; vector<Bool_t>_valueChanged! Flags if variable needs update on server-side; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; RooListProxy_varsVariables; Bool_t_verboseClient; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; Bool_t_verboseServer; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:38490,integrat,integrator,38490,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,6,"['configurat', 'integrat', 'update']","['configuration', 'integrator', 'update']"
Deployability,"ed, kBlue, kYellow, kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; return w->GetCanvas();; }; Bright and dark colors; The dark and bright color are used to give 3-D effects when drawing various; boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). The Dark colors have an index = color_index+100; The Bright colors have an index = color_index+150; Two static functions return the bright and dark color number; corresponding to a color index. If the bright or dark color does not; exist, they are created:; ; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; . Gray scale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer grayscales), while access via HLS returns de-saturated grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the pallette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColor.html:3145,toggle,toggle,3145,root/html528/TColor.html,https://root.cern,https://root.cern/root/html528/TColor.html,2,['toggle'],['toggle']
Deployability,"ed.; Definition at line 73 of file TTreeIndex.h. ◆ IsValidFor(). bool TTreeIndex::IsValidFor ; (; const TTree * ; parent). overridevirtual . Return true if index can be applied to the TTree. ; Implements TVirtualIndex.; Definition at line 526 of file TTreeIndex.cxx. ◆ operator=(). TTreeIndex & TTreeIndex::operator= ; (; const TTreeIndex & ; ). privatedelete . ◆ Print(). void TTreeIndex::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the table with : serial number, majorname, minorname. . if option = ""10"" print only the first 10 entries; if option = ""100"" print only the first 100 entries; if option = ""1000"" print only the first 1000 entries . Reimplemented from TNamed.; Definition at line 542 of file TTreeIndex.cxx. ◆ SetTree(). void TTreeIndex::SetTree ; (; TTree * ; T). overridevirtual . this function is called by TChain::LoadTree and TTreePlayer::UpdateFormulaLeaves when a new Tree is loaded. ; Because Trees in a TChain may have a different list of leaves, one must update the leaves numbers in the TTreeFormula used by the TreeIndex. ; Implements TVirtualIndex.; Definition at line 638 of file TTreeIndex.cxx. ◆ Streamer(). void TTreeIndex::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TTreeIndex. ; Note that this Streamer should be changed to an automatic Streamer once TStreamerInfo supports an index of type Long64_t ; Reimplemented from TNamed.; Definition at line 583 of file TTreeIndex.cxx. ◆ StreamerNVirtual(). void TTreeIndex::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TTreeIndex.h. ◆ UpdateFormulaLeaves(). void TTreeIndex::UpdateFormulaLeaves ; (; const TTree * ; parent). overridevirtual . Called by TChain::LoadTree when the parent chain changes it's tree. ; Implements TVirtualIndex.; Definition at line 619 of file TTreeIndex.cxx. Member Data Documentation. ◆ fIndex. Long64_t* TTreeIndex::fIndex. protected . [fN] Index of sorted values ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeIndex.html:24863,update,update,24863,doc/master/classTTreeIndex.html,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html,1,['update'],['update']
Deployability,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35389,integrat,integration,35389,root/html602/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html,2,['integrat'],['integration']
Deployability,"ed:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddition.html:35143,integrat,integration,35143,root/html602/RooAddition.html,https://root.cern,https://root.cern/root/html602/RooAddition.html,2,['integrat'],['integration']
Deployability,"ed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 1e-12); Return Integral of function between a and b. based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A, B: End-points of integration interval. Note that B may be less; than A.; - params: Array of function parameters. If 0, use current parameters.; - epsilon: Accuracy parameter (see Accuracy). Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the argument EPS may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:49635,integrat,integration,49635,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['integrat'],['integration']
Deployability,"edPdf.; Definition at line 46 of file RooProjectedPdf.h. ◆ extendMode(). ExtendMode RooProjectedPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Reimplemented in xRooProjectedPdf.; Definition at line 47 of file RooProjectedPdf.h. ◆ forceAnalyticalInt(). bool RooProjectedPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . Force RooRealIntegral to relegate integration of all observables to internal logic. ; Reimplemented from RooAbsReal.; Definition at line 157 of file RooProjectedPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooProjectedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Mark all requested variables as internally integrated. ; Reimplemented from RooAbsReal.; Definition at line 167 of file RooProjectedPdf.cxx. ◆ getProjection(). const RooAbsReal * RooProjectedPdf::getProjection ; (; const RooArgSet * ; iset, . const RooArgSet * ; nset, . const char * ; rangeName, . int & ; code . ); const. protected . Retrieve object representing projection integral of input p.d.f over observables iset, while normalizing over observables nset. ; The code argument returned by reference is the unique code defining this particular projection configuration ; Definition at line 109 of file RooProjectedPdf.cxx. ◆ initGenerator(). void RooProjectedPdf::initGenerator ; (; Int_t ; code). inlineoverridevirtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented from RooAbsPdf.; Definition at line 34 of file RooProjectedPdf.h. ◆ IsA(). TClass * RooProjectedPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemente",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:78804,integrat,integrated,78804,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['integrat'],['integrated']
Deployability,"ed_len = len64;; 6506 }; 6507 body = conn->buf + conn->request_len + conn->consumed_content;; 6508 memcpy(buf, body, (size_t)buffered_len);; 6509 len64 -= buffered_len;; 6510 conn->consumed_content += buffered_len;; 6511 nread += buffered_len;; 6512 buf = (char *)buf + buffered_len;; 6513 }; 6514 ; 6515 /* We have returned all buffered data. Read new data from the remote; 6516 * socket.; 6517 */; 6518 if ((n = pull_all(NULL, conn, (char *)buf, (int)len64)) >= 0) {; 6519 conn->consumed_content += n;; 6520 nread += n;; 6521 } else {; 6522 nread = ((nread > 0) ? nread : n);; 6523 }; 6524 }; 6525 return (int)nread;; 6526}; 6527 ; 6528 ; 6529/* Forward declarations */; 6530static void handle_request(struct mg_connection *);; 6531static void log_access(const struct mg_connection *);; 6532 ; 6533 ; 6534/* Handle request, update statistics and call access log */; 6535static void; 6536handle_request_stat_log(struct mg_connection *conn); 6537{; 6538#if defined(USE_SERVER_STATS); 6539 struct timespec tnow;; 6540 conn->conn_state = 4; /* processing */; 6541#endif; 6542 ; 6543 handle_request(conn);; 6544 ; 6545 ; 6546#if defined(USE_SERVER_STATS); 6547 conn->conn_state = 5; /* processed */; 6548 ; 6549 clock_gettime(CLOCK_MONOTONIC, &tnow);; 6550 conn->processing_time = mg_difftimespec(&tnow, &(conn->req_time));; 6551 ; 6552 mg_atomic_add64(&(conn->phys_ctx->total_data_read), conn->consumed_content);; 6553 mg_atomic_add64(&(conn->phys_ctx->total_data_written),; 6554 conn->num_bytes_sent);; 6555#endif; 6556 ; 6557 DEBUG_TRACE(""%s"", ""handle_request done"");; 6558 ; 6559 if (conn->phys_ctx->callbacks.end_request != NULL) {; 6560 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6561 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6562 }; 6563 log_access(conn);; 6564}; 6565 ; 6566 ; 6567#if defined(USE_HTTP2); 6568#if defined(NO_SSL); 6569#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6570#endif; 6571#define USE_ALPN; 6572#include ""mod_http2.inl""; 6573/* Not sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:190248,update,update,190248,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['update'],['update']
Deployability,"ed_len = len64;; 6507 }; 6508 body = conn->buf + conn->request_len + conn->consumed_content;; 6509 memcpy(buf, body, (size_t)buffered_len);; 6510 len64 -= buffered_len;; 6511 conn->consumed_content += buffered_len;; 6512 nread += buffered_len;; 6513 buf = (char *)buf + buffered_len;; 6514 }; 6515 ; 6516 /* We have returned all buffered data. Read new data from the remote; 6517 * socket.; 6518 */; 6519 if ((n = pull_all(NULL, conn, (char *)buf, (int)len64)) >= 0) {; 6520 conn->consumed_content += n;; 6521 nread += n;; 6522 } else {; 6523 nread = ((nread > 0) ? nread : n);; 6524 }; 6525 }; 6526 return (int)nread;; 6527}; 6528 ; 6529 ; 6530/* Forward declarations */; 6531static void handle_request(struct mg_connection *);; 6532static void log_access(const struct mg_connection *);; 6533 ; 6534 ; 6535/* Handle request, update statistics and call access log */; 6536static void; 6537handle_request_stat_log(struct mg_connection *conn); 6538{; 6539#if defined(USE_SERVER_STATS); 6540 struct timespec tnow;; 6541 conn->conn_state = 4; /* processing */; 6542#endif; 6543 ; 6544 handle_request(conn);; 6545 ; 6546 ; 6547#if defined(USE_SERVER_STATS); 6548 conn->conn_state = 5; /* processed */; 6549 ; 6550 clock_gettime(CLOCK_MONOTONIC, &tnow);; 6551 conn->processing_time = mg_difftimespec(&tnow, &(conn->req_time));; 6552 ; 6553 mg_atomic_add64(&(conn->phys_ctx->total_data_read), conn->consumed_content);; 6554 mg_atomic_add64(&(conn->phys_ctx->total_data_written),; 6555 conn->num_bytes_sent);; 6556#endif; 6557 ; 6558 DEBUG_TRACE(""%s"", ""handle_request done"");; 6559 ; 6560 if (conn->phys_ctx->callbacks.end_request != NULL) {; 6561 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6562 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6563 }; 6564 log_access(conn);; 6565}; 6566 ; 6567 ; 6568#if defined(USE_HTTP2); 6569#if defined(NO_SSL); 6570#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6571#endif; 6572#define USE_ALPN; 6573#include ""mod_http2.inl""; 6574/* Not sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:190280,update,update,190280,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['update'],['update']
Deployability,"edefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); create a new TCurlyarc with center (x1, y1) and radius rad.; The wavelength and amplitude are given in percent of the line length; phimin and phimax are given in degrees. void Build(); Create a curly (Gluon) or wavy (Gamma) arc. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an arc. Compute the closest distance of approach from point px,py to this arc.; The distance is computed in pixels units. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyArc is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCenter(Double_t x1, Double_t y1); Set Curly Arc center. void SetRadius(Double_t radius); Set Curly Arc radius. void SetPhimin(Double_t phimin); Set Curly Arc minimum Phi. void SetPhimax(Double_t phimax); Set Curly Arc maximum Phi. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default wave amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set default ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default wave amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". TCurlyArc(); {;}. TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyArc.html:11159,release,released,11159,root/html526/TCurlyArc.html,https://root.cern,https://root.cern/root/html526/TCurlyArc.html,4,['release'],['released']
Deployability,"edition of the Users Guide with a better style, improved index and several new chapters (since 2002).; Bertrand Bellenot has been developing and maintaining the Win32GDK version of ROOT. Bertrand has also many other contributions like the nice RootShower example (since 2001).; Valeriy Onoutchin has been working on several ROOT packages, in particular the graphics sub-system for Windows and the GUI Builder (since 2000).; Gerri Ganis has been working on the authentication procedures to be used by the root daemons and the PROOF system (since 2002).; Maarten Ballintijn (MIT) is one of the main developers of the PROOF sub-system (since 1995).; Valeri Fine (now at BNL) ported ROOT to Windows and contributed largely to the 3-D graphics. He is currently working on the Qt layer of ROOT (since 1995).; Victor Perevoztchikov (BNL) worked on key elements of the I/O system, in particular the improved support for STL collections (1997-2001).; Nenad Buncic developed the HTML documentation generation system and integrated the X3D viewer inside ROOT (1995-1997).; Suzanne Panacek was the author of the first version of this User’s Guide and very active in preparing tutorials and giving lectures about ROOT (1999-2002).; Axel Naumann has been developing further the HTML Reference Guide and helps in porting ROOT under Windows (cygwin/gcc implementation) (since 2000).; Anna Kreshuk has developed the Linear Fitter and Robust Fitter classes as well as many functions in TMath, TF1, TGraph (since 2005).; Richard Maunder has contributed to the GL viewer classes (since 2004).; Timur Pocheptsov has contributed to the GL viewer classes and GL in pad classes (since 2004).; Sergei Linev has developed the XML driver and the TSQLFile classes (since 2003).; Stefan Roiser has been contributing to the reflex and cintex packages (since 2005).; Lorenzo Moneta has been contributing the MathCore, MathMore, Smatrix & Minuit2 packages (since 2005).; Wim Lavrijsen is the author of the PyRoot package (since 2004",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:4587,integrat,integrated,4587,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['integrat'],['integrated']
Deployability,"editor usage is the following :; - you can write C expressions made of leaf names by hand or you can insert; any item from the right panel by clicking on it (recommandable);; - you can click on other expressions/leaves to paste them in the editor;; - you should write the item alias by hand since it not only make the expression; meaningfull, but it also highly improve the layout for big expressions; - you may redefine an old alias - the other expressions depending on it will; be modified accordingly. An alias must not be the leading string of other aliases.; When Draw commands are issued, the name of the corresponding histogram axes; will become the aliases of the expressions. User commands can be issued directly from the textbox labeled ""Command""; from the upper-left toolbar by typing and pressing Enter at the end.; Another way is from the right panel context menu : ExecuteCommand.; All commands can be interrupted at any time by pressing the STOP button; from the bottom-left; You can toggle recording of the current command in the history file by; checking the Rec button from the top-right. Context menus. You can activate context menus by right-clicking on items or inside the; right panel.; Context menus for mapped items from the left tree-type list :; The items from the left that are provided with context menus are tree and; branch items. You can directly activate the *MENU* marked methods of TTree; from this menu.; Context menu for the right panel :; A general context menu is acivated if the user right-clicks the right panel.; Commands are :; - EmptyAll : clears the content of all expressions;; - ExecuteCommand : execute a ROOT command;; - MakeSelector : equivalent of TTree::MakeSelector();; - NewExpression : add an expression item in the right panel;; - Process : equivalent of TTree::Process();; - SaveSource : save the current session as a C++ macro;; - SetScanFileName : define a name for the file where TTree::Scan command; is redirected when the <Scan> button is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeViewer.html:5503,toggle,toggle,5503,root/html534/TTreeViewer.html,https://root.cern,https://root.cern/root/html534/TTreeViewer.html,3,['toggle'],['toggle']
Deployability,"ee.cxx:3139; TTree::GetImplicitMTvirtual bool GetImplicitMT()Definition TTree.h:520; TTree::fFileNumberInt_t fFileNumber! current file number (if file extensions)Definition TTree.h:116; TTree::GetLeafvirtual TLeaf * GetLeaf(const char *branchname, const char *leafname)Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of fri...Definition TTree.cxx:6195; TTree::GetZipBytesvirtual Long64_t GetZipBytes() constDefinition TTree.h:585; TTree::fLeavesTObjArray fLeavesDirect pointers to individual branch leaves.Definition TTree.h:123; TTree::Resetvirtual void Reset(Option_t *option="""")Reset baskets, buffers and entries count in all branches and leaves.Definition TTree.cxx:8003; TTree::SetImplicitMTvirtual void SetImplicitMT(bool enabled)Definition TTree.h:661; TTree::KeepCircularvirtual void KeepCircular()Keep a maximum of fMaxEntries in memory.Definition TTree.cxx:6415; TTree::SetDefaultEntryOffsetLenvirtual void SetDefaultEntryOffsetLen(Int_t newdefault, bool updateExisting=false)Update the default value for the branch's fEntryOffsetLen.Definition TTree.cxx:8940; TTree::DirectoryAutoAddvirtual void DirectoryAutoAdd(TDirectory *)Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file...Definition TTree.cxx:3819; TTree::fMaxVirtualSizeLong64_t fMaxVirtualSizeMaximum total size of buffers kept in memory.Definition TTree.h:99; TTree::GetTotBytesvirtual Long64_t GetTotBytes() constDefinition TTree.h:556; TTree::MakeSelectorvirtual Int_t MakeSelector(const char *selector=nullptr, Option_t *option="""")Generate skeleton selector class for this tree.Definition TTree.cxx:6822; TTree::SetObjectvirtual void SetObject(const char *name, const char *title)Change the name and title of this tree.Definition TTree.cxx:9260; TTree::fPerfStatsTVirtualPerfStats * fPerfStats! pointer to the current perf stats objectDefinition TTree.h:132; TTree::fWeightDouble_t fWeightTree weight (see TTree::SetWeight)Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:72849,update,updateExisting,72849,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['update'],['updateExisting']
Deployability,"eeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnixSystem;  CTUnuranTUnuran class ;  CTUnuranBaseDistTUnuranBaseDist, base class for Unuran distribution classees such as TUnuranContDist (for one-dimension) or TUnuranMultiContDist (multi-dimension) ;  CTUnuranContDistTUnuranContDist class describing one dimensional continuous distribution ;  CTUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution ;  CTUnuranEmpDistTUnuranEmpDist class for describing empiral distributions ;  CTUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions ;  CTUnuranSamplerTUnuranSampler class class implementing the ROOT::Math::DistSampler interface using the UNU.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:161537,continuous,continuous,161537,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,2,['continuous'],['continuous']
Deployability,efCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*_dataPointer to original input dataset; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_t_doOffsetApply interval value offset to control numeric precision?; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_t_evalCarry! carry of Kahan sum in evaluatePartition; Int_t_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*_funcPointer to original input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! Is object initialized ; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealMPFE**_mpfeArray! Array of paral,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:35461,integrat,integration,35461,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,1,['integrat'],['integration']
Deployability,efCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:42990,integrat,integration,42990,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,1,['integrat'],['integration']
Deployability,"efault range. ; Definition at line 381 of file RooRealVar.cxx. ◆ removeRange(). void RooRealVar::removeRange ; (; const char * ; name = nullptr). Remove range limits for binning with given name. Empty name means default range. ; Definition at line 387 of file RooRealVar.cxx. ◆ setAsymError(). void RooRealVar::setAsymError ; (; double ; lo, . double ; hi . ). inline . Definition at line 66 of file RooRealVar.h. ◆ setBinning(). void RooRealVar::setBinning ; (; const RooAbsBinning & ; binning, . const char * ; name = nullptr . ). Add given binning under name 'name' with this variable. ; If name is null, the binning is installed as the default binning. ; Definition at line 403 of file RooRealVar.cxx. ◆ setBins(). void RooRealVar::setBins ; (; Int_t ; nBins, . const char * ; name = nullptr . ). Create a uniform binning under name 'name' for this variable. ; Parameters. [in]nBinsNumber of bins. The limits are taken from the currently set limits. ; [in]nameOptional name. If name is null, install as default binning. . Definition at line 396 of file RooRealVar.cxx. ◆ setError(). void RooRealVar::setError ; (; double ; value). inline . Definition at line 60 of file RooRealVar.h. ◆ setExpensiveObjectCache(). void RooRealVar::setExpensiveObjectCache ; (; RooExpensiveObjectCache & ; ). inlineoverrideprotectedvirtual . variables don't need caches ; Reimplemented from RooAbsArg.; Definition at line 162 of file RooRealVar.h. ◆ setMax() [1/2]. void RooRealVar::setMax ; (; const char * ; name, . double ; value . ). Set maximum of name range to given value. ; If name is null maximum of default range is set ; Definition at line 479 of file RooRealVar.cxx. ◆ setMax() [2/2]. void RooRealVar::setMax ; (; double ; value). inline . Definition at line 78 of file RooRealVar.h. ◆ setMin() [1/2]. void RooRealVar::setMin ; (; const char * ; name, . double ; value . ). Set minimum of name range to given value. ; If name is null minimum of default range is set ; Definition at line 449 of file RooRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:87143,install,install,87143,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['install'],['install']
Deployability,"efault=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. TVectorDfAtbvector Atb; TVectorDfAtbTemp! temporary vector, used for num.stability; TVectorDfAtbTemp2!; TVectorDfAtbTemp3!; Double_tfChisquareChisquare of the fit; TMatrixDSymfDesignmatrix AtA; TMatrixDSymfDesignTemp! temporary matrix, used for num.stability; TMatrixDSymfDesignTemp2!; TMatrixDSymfDesignTemp3!; TVectorDfEthe errors if they are known; TBitsfFitsampleindices of points, used in the robust fit; Bool_t*fFixedParams[fNfixed] array of fixed/released params; char*fFormulathe formula; Int_tfFormulaSizelength of the formula; TObjArrayfFunctionsarray of basis functions; Int_tfHnumber of good points in robust fit; TFormula*fInputFunctionthe function being fit; Bool_tfIsSetHas the formula been set?; Int_tfNdimnumber of dimensions in the formula; Int_tfNfixednumber of fixed parameters; Int_tfNfunctionsnumber of basis functions; Int_tfNpointsnumber of points; TMatrixDSymfParCovarmatrix of parameters' covariances; TVectorDfParSignsignificance levels of parameters; TVectorDfParamsvector of parameters; Bool_tfRobusttrue when performing a robust fit; Int_tfSpecial=100+n if fitting a polynomial of deg.n; Bool_tfStoreDataIs the data stored?; TVectorDfTValuesT-Values of parameters; Double_tfVal[1000]! temporary; TMatrixDfXvalues of x; TVectorDfYthe values being fit; Double_tfY2sum of square of y, used for chisquare; Double_tfY2Temp! temporary variable used for num.stability. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearFitter(); default c-tor, input data is stored; If you don't want to store the input data,; run the function StoreData(kFALSE) after constructor. TLinearFitter(Int_t ndim); The parameter stands",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearFitter.html:18694,release,released,18694,root/html528/TLinearFitter.html,https://root.cern,https://root.cern/root/html528/TLinearFitter.html,5,['release'],['released']
Deployability,"efault=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. TVectorDfAtbvector Atb; TVectorDfAtbTemp! temporary vector, used for num.stability; TVectorDfAtbTemp2!; TVectorDfAtbTemp3!; Double_tfChisquareChisquare of the fit; TMatrixDSymfDesignmatrix AtA; TMatrixDSymfDesignTemp! temporary matrix, used for num.stability; TMatrixDSymfDesignTemp2!; TMatrixDSymfDesignTemp3!; TVectorDfEthe errors if they are known; TBitsfFitsampleindices of points, used in the robust fit; Bool_t*fFixedParams[fNfixed] array of fixed/released params; char*fFormulathe formula; Int_tfFormulaSizelength of the formula; TObjArrayfFunctionsarray of basis functions; Int_tfHnumber of good points in robust fit; TFormula*fInputFunctionthe function being fit; Bool_tfIsSetHas the formula been set?; Int_tfNdimnumber of dimensions in the formula; Int_tfNfixednumber of fixed parameters; Int_tfNfunctionsnumber of basis functions; Int_tfNpointsnumber of points; TMatrixDSymfParCovarmatrix of parameters' covariances; TVectorDfParSignsignificance levels of parameters; TVectorDfParamsvector of parameters; Bool_tfRobusttrue when performing a robust fit; Int_tfSpecial=100+n if fitting a polynomial of deg.n; Bool_tfStoreDataIs the data stored?; TVectorDfTValuesT-Values of parameters; Double_tfVal[1000]! temporary; TMatrixDfXvalues of x; TVectorDfYthe values being fit; Double_tfY2sum of square of y, used for chisquare; Double_tfY2Temp! temporary variable used for num.stability; static map<TString,TFormula*>fgFormulaMap! map of basis functions and formula. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearFitter(); default c-tor, input data is stored; If you don't want to store the input data,; run the function Store",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLinearFitter.html:19331,release,released,19331,root/html604/TLinearFitter.html,https://root.cern,https://root.cern/root/html604/TLinearFitter.html,1,['release'],['released']
Deployability,"eference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::PdfProposal Class ReferenceRooFit » RooStats. ; PdfProposal is a concrete implementation of the ProposalFunction interface. ; It proposes points across the parameter space in the distribution of the given PDF.; To make Propose(xPrime, x) dependent on x, configure with PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);; ; // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);; ; // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime; ; // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooStats::PdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface.Definition PdfProposal.h:30; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works for future versions. ; Definition at line 30 of file PdfProposal.h. Public Member Functions;  PdfProposal ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html:1101,update,updated,1101,doc/master/classRooStats_1_1PdfProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html,1,['update'],['updated']
Deployability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooAdaptiveGaussKronrodIntegrator1D::DomainType_domainType; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_maxSegMaximum number of segments; Int_t_methodKeyGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html:8293,integrat,integrator,8293,root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooAdaptiveGaussKronrodIntegrator1D.html,2,['integrat'],['integrator']
Deployability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooAdaptiveGaussKronrodIntegrator1D::DomainType_domainType; Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Int_t_maxSegMaximum number of segments; Int_t_methodKeyGSL method key; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimits; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; void*_workspaceGSL workspace ; Double_t*_x! Current coordinate; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register this class with RooNumIntConfig as a possible choice of numeric; integrator for one-dimensional integrals over finite and infinite domains. RooAdaptiveGaussKronrodIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor taking a function binding and a configuration object. RooAdaptiveGaussKronrodIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Constructor taking a function binding, an integration range and a configuration object. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Virtual constructor. Bool_t initialize(); Initialize integrator allocate buffers and setup GSL workspace. ~RooAdaptiveGaussKronrodIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html:8348,integrat,integrator,8348,root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooAdaptiveGaussKronrodIntegrator1D.html,3,['integrat'],['integrator']
Deployability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooRealVar**fAxesarray of pointers to RooRealVars representing; RooStats::MarkovChain*fChainthe markov chain; Double_tfConfidenceLevelRequested confidence level (eg. 0.95 for 95% CL); RooRealVar*fCutoffVarcutoff variable to use for integrating keys pdf; RooDataHist*fDataHistthe binned Markov Chain data; Int_tfDimensionnumber of variables; Double_tfEpsilonacceptable error for Keys interval determination; Double_tfFullValue of intergral of fProduct; RooStats::Heavyside*fHeavysidethe Heavyside function; TH1*fHistthe binned Markov Chain data; Double_tfHistConfLevelthe actual conf level determined by hist; Double_tfHistCutoffcutoff bin size to be in interval; Double_tfIntervalSumsum of heights of bins in the interval; Bool_tfIsHistStrictwhether the specified confidence level is a floor; Double_tfKeysConfLevelthe actual conf level determined by keys; Double_tfKeysCutoffcutoff keys pdf value to be in interval; RooDataHist*fKeysDataHistdata hist representing product; RooNDKeysPdf*fKeysPdfthe kernel estimation pdf; TStringTNamed::fNameobject identifier; Int_tfNumBurnInStepsnumber of steps to discard as burn in, starting from the first; RooArgSetfParametersparameters of interest for this interval; RooProduct*fProductthe (keysPdf * heavyside) product; THnSparse*fSparseHistthe binned Markov Chain data; TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation; Bool_tfUseSparseHistwhether to use sparse hist (vs. RooDataHist). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCInterval(const char* name). MCMCInterval(const char* name, const RooArgSet& parameters, RooStats::MarkovChain& chain). ~MCMCInterval(); destructor. Bool_t IsInInterval(const RooArgSet& point) const. void SetConfidenceLevel(Double_t cl). void SetAxes(R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCInterval.html:10360,integrat,integrating,10360,root/html526/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCInterval.html,1,['integrat'],['integrating']
Deployability,"effectively just maximize the; area. It is mandatory to have a normalization variable; which is fixed for the fit. e.g. TF1* f1 = new TF1(""f1"", ""gaus(0)/sqrt(2*3.14159)/[2]"", 0, 5);; f1->SetParameters(1, 3.1, 0.01);; f1->SetParLimits(0, 1, 1); // fix the normalization parameter to 1; data->UnbinnedFit(""f1"", ""jpsimass"", ""jpsipt>3.0"");. 1, 2 and 3 Dimensional fits are supported.; See also TTree::Fit. Return status. The function return the status of the fit in the following form; fitResult = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult; The fitResult is 0 is the fit is OK.; The fitResult is negative in case of an error not connected with the fit.; The number of entries used in the fit can be obtained via; mytree.GetSelectedRows();; If the number of selected entries is null the function returns -1. void UpdateFormulaLeaves(); this function is called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. TTreePlayer(const TTreePlayer& ). TTreePlayer& operator=(const TTreePlayer& ). void TakeAction(Int_t nfill, Int_t& npoints, Int_t& action, TObject* obj, Option_t* option). void TakeEstimate(Int_t nfill, Int_t& npoints, Int_t action, TObject* obj, Option_t* option). Int_t GetDimension() const; {return fDimension;}. TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNfill() const; {return fSelector->GetNfill();}. const char * GetScanFileName() const; {return fScanFileName;}. TTreeFormula * GetSelect() const; {return fSelector->GetSelect();}. Long64_t GetSelectedRows() const; {return fSelectedRows;}. TSelector * GetSelector() const; {return fSelector;}. TSelector * GetSelectorFromFile() const; See TSelectorDraw::GetVar. {return fSelectorFromFile;}. TTreeFormula * GetVar(Int_t i) const; See TSelectorDraw::GetVar. {return fSelector->GetVar(i);}. TTreeFormula * GetVar1() const; See TSelectorDraw::GetVar. {return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreePlayer.html:32309,update,update,32309,root/html530/TTreePlayer.html,https://root.cern,https://root.cern/root/html530/TTreePlayer.html,5,['update'],['update']
Deployability,"effectively just maximize the; area. It is mandatory to have a normalization variable; which is fixed for the fit. e.g. TF1* f1 = new TF1(""f1"", ""gaus(0)/sqrt(2*3.14159)/[2]"", 0, 5);; f1->SetParameters(1, 3.1, 0.01);; f1->SetParLimits(0, 1, 1); // fix the normalization parameter to 1; data->UnbinnedFit(""f1"", ""jpsimass"", ""jpsipt>3.0"");. 1, 2 and 3 Dimensional fits are supported.; See also TTree::Fit. Return status. The function return the status of the fit in the following form; fitResult = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult; The fitResult is 0 is the fit is OK.; The fitResult is negative in case of an error not connected with the fit.; The number of entries used in the fit can be obtained via; mytree.GetSelectedRows();; If the number of selected entries is null the function returns -1. void UpdateFormulaLeaves(); this function is called by TChain::LoadTree when a new Tree is loaded.; Because Trees in a TChain may have a different list of leaves, one; must update the leaves numbers in the TTreeFormula used by the TreePlayer. TTreePlayer(const TTreePlayer& ). TTreePlayer& operator=(const TTreePlayer& ). void TakeAction(Int_t nfill, Int_t& npoints, Int_t& action, TObject* obj, Option_t* option). void TakeEstimate(Int_t nfill, Int_t& npoints, Int_t action, TObject* obj, Option_t* option). Int_t GetDimension() const; {return fDimension;}. TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNfill() const; {return fSelector->GetNfill();}. const char * GetScanFileName() const; {return fScanFileName;}. TTreeFormula * GetSelect() const; {return fSelector->GetSelect();}. Long64_t GetSelectedRows() const; {return fSelectedRows;}. TSelector * GetSelector() const; {return fSelector;}. TSelector * GetSelectorFromFile() const; {return fSelectorFromFile;}. TTreeFormula * GetVar(Int_t i) const; {return fSelector->GetVar(i);}. TTreeFormula * GetVar1() const; {return fSelector->GetVar1();}. TTreeFormula * GetVar2() const; {return fSelector->GetVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:58112,update,update,58112,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['update'],['update']
Deployability,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:80976,integrat,integration,80976,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['integrat'],['integration']
Deployability,"efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Loop over components for plot sampling hints and merge them if there are multiple. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooAddPdf with cache-and-track. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is self normalized. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. const RooArgSet& getCoefNormalization() const; { return _refCoefNorm ; }. const char* getCoefRange() const; { return _refCoefRangeName?RooNameReg::str(_refCoefRangeName):"""" ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Tue Jun 2 15:27:44 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAddPdf.html:53281,integrat,integration,53281,root/html604/RooAddPdf.html,https://root.cern,https://root.cern/root/html604/RooAddPdf.html,1,['integrat'],['integration']
Deployability,"efficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset) const; Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:45920,integrat,integration,45920,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,12,['integrat'],['integration']
Deployability,"efficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate and return the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Determine which part (if any) of given integral can be performed analytically.; If any analytical integration is possible, return integration scenario code. RooAddPdf queries each component PDF for its analytical integration capability of the requested; set ('allVars'). It finds the largest common set of variables that can be integrated; by all components. If such a set exists, it reconfirms that each component is capable of; analytically integrating the common set, and combines the components individual integration; codes into a single integration code valid for RooAddPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms, multiplied with the fraction that; is in the current range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:45163,integrat,integration,45163,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['integrat'],['integration']
Deployability,"efined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specified to cache x and p and only x is a observable in the given use context the cache histogram will store sampled values for all values of observable x and parameter p. In such a mode of operation the cache will also not be recalculated if the observable p changes ; Definition at line 66 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [3/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf . ). Constructor taking name, title and function to be cached. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. The dimensions of the cache are automatically matched to the number of observables used in each use context. Multiple cache in different observable may exists simultaneously if the cached p.d.f is used with multiple observable configurations simultaneously ; Definition at line 44 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [4/4]. RooCachedPdf::RooCachedPdf ; (; const RooCachedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 79 of file RooCachedPdf.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooCachedPdf::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . If this pdf is operated with a fixed set of observables, return the subset of the fixed observables that are actual dependents of the external input p.d.f. ; If this p.d.f is operated without a fixed set of cache observables, return the actual observables of the external input p.d.f given the choice of observables defined in nset ; Implements RooAbsCachedPdf.; Definition at line 129 of file RooCachedPdf.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooCachedPdf::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . If t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:78646,configurat,configurations,78646,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['configurat'],['configurations']
Deployability,"efines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:70628,integrat,integration,70628,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['integrat'],['integration']
Deployability,"efines plotting and tabulating entry points for its contents and provides an iterator over its elements (bins for binned data sets, data points for unbinned datasets). Storing global observables in RooFit datasets; RooFit groups model variables into observables and parameters, depending on if their values are stored in the dataset. For fits with parameter constraints, there is a third kind of variables, called global observables. These represent the results of auxiliary measurements that constrain the nuisance parameters. In the RooFit implementation, a likelihood is generally the sum of two terms:; the likelihood of the data given the parameters, where the normalization set is the set of observables (implemented by RooNLLVar); the constraint term, where the normalization set is the set of global observables (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the model/pdf. With this release, a mechanism is added to store a snapshot of global observables in any RooDataSet or RooDataHist. For toy studies where the global observables assume a different values for each toy, the bookkeeping of the set of global observables and in particular their values is much easier with this change.; Usage example for a model with global observables g1 and g2: using namespace RooFit;; ; std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObservables(g1, g2); // now, data also stores a snapshot of g1 and g2; ; // If you fit the model to the data, the global observables and their values; // are taken from the dataset:; model.fitTo(*data);; ; // You can still define the set of global observables yourself, but the values; // will be takes from the dataset if available:; model.fitTo(*data, GlobalObservables(g1, g2));; ; // To force `fitTo` to take the global observable values from the model even; // though they are in the dataset, you can use the new `GlobalObservablesS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:1487,release,release,1487,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['release'],['release']
