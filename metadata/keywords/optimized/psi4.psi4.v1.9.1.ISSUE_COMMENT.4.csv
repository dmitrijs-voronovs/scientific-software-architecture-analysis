quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Energy Efficiency,"I was able to get the potential energy curve (PEC) for the ground state of the CF molecule but then once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:32,energy,energy,32,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,5,['energy'],['energy']
Energy Efficiency,"I was originally thinking the interface would be more like:; ```python; tddft(""B3LYP/cc-pVDZ""); ```; or ; ```python; ref_e, ref_wfn = psi4.energy(""B3LYP/cc-pVDZ"", return_wfn=True); tddft(ref_wfn); ```. I would be curious as to others thoughts on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302:139,energy,energy,139,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302,1,['energy'],['energy']
Energy Efficiency,I was running `mp2/cc-pvqz-ri` and also `mp2/cc-pvqz` and saw the difference in the energy and was thinking I needed to explicitly set ri. . Thanks for clarifying that. Really helps before I scale. . Will update soon with some test results.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432,1,['energy'],['energy']
Energy Efficiency,I was thinking a head a bit where we would be able to kill off globals or at least provide a way to reduce them. I was hopeful that this scheme would be able to fill that roll as well to prevent duplication.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259862684:100,reduce,reduce,100,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259862684,1,['reduce'],['reduce']
Energy Efficiency,"I was using psi4.0 version. However i just compiled the newest version of psi4 from github and obtain now just for one symmetry non-sense : . ```; Excitation Energy OS RS RS Einstein A; State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 1 Ag 12.964 104563.5 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 2 Ag 16.771 135268.1 73.9 0.616327 0.0000 0.0000 0.0000 0.000000E+00; 3 Ag 18.773 151417.7 66.0 0.689910 0.0000 0.0000 0.0000 0.000000E+00; 4 Ag 25.910 208978.9 47.9 0.952178 0.0000 0.0000 0.0000 0.000000E+00; 1B1g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B1g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B1g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B1g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B2g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 0.000 0.0 30667796364.5 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 0.000 0.0 20136140996.1 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 0.000 0.0 18363592897.3 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 0.000 0.0 9232632432.8 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670004E+07; 1B2u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521#issuecomment-261643092:158,Energy,Energy,158,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261643092,1,['Energy'],['Energy']
Energy Efficiency,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:685,charge,charge,685,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"I would add that lately we have seen a lot of problems with UHF and ROHF; converging on a wrong state for open-shells in Psi4. Although new stability; analysis code helps a lot in fixing some of the problems (for UHF), for; many of these systems finding the lowest root is quite non-trivial and is; accompanied by many SCF convergence issues, as well as symmetry-breaking; issues (UHF). Things get a lot worse for transition metal compounds (even; simple ones, like Fe(CO)5). The most helpful solution is to start with; basis set projection from a small basis, but this strategy doesn't always; work. Sometimes, combining stability analysis root search and basis set; projection helps. Indeed, other codes (particularly, MOLPRO) sometimes do better job in; finding lowest-energy solutions for systems of this type. Usually, after; investing some time, it is possible to find the necessary solution for; these non-trivial cases with Psi4, but it may be worth investigating some; of these systems for possible improvements in the code. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com wrote:. > @lothian https://github.com/lothian I guess these other codes are using; > some other convergence accelerator than Psi4 ? I would not be surprised if; > SOSCF with a core guess would converge on the right solution.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171659792:772,energy,energy,772,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171659792,2,['energy'],['energy']
Energy Efficiency,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:238,energy,energy,238,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083,2,['energy'],['energy']
Energy Efficiency,"I would keep the ""COSX"" for recognition. This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though.; Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one.; After we gain experience with the psi4 COSX we can make a couple useful defaults. Couple of things about grids later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1115769652:296,efficient,efficient,296,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1115769652,2,['efficient'],['efficient']
Energy Efficiency,"I would love to see an algorithm for trying to locate the global minimum of the SCF energy, preferably an automated one. This feature would be especially useful for using Psi4 as a backend for _ab-initio_ MD applications. The random orbital rotation scheme (described in [10.1021/acs.jctc.7b00011](https://dx.doi.org/10.1021/acs.jctc.7b00011)) seems like a simple and sensible approach, as it can nudge the SCF out of saddle points, as well as local minima.; This method might also be useful as a last-resort option for cases where the SCF seems impossible to converge: random rotations could be applied to the initial guess. A reference implementation is available at https://github.com/ReiherGroup/OrbitalPerturbation. (under LGPL3, so no worries there)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352274531:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352274531,2,['energy'],['energy']
Energy Efficiency,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:200,adapt,adapted,200,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['adapt'],['adapted']
Energy Efficiency,I'd be happy to pick this one up if no one else is working on it. I just want to clarify is the desired behavior of something like this:. set dft_functional b3lyp; energy('scf'). Should this run the dft or HF calculation? (amusing the user or the solution to #118 has set the reference properly) Currently this would do the the HF.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117#issuecomment-121810936:164,energy,energy,164,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121810936,1,['energy'],['energy']
Energy Efficiency,"I'd just like to point out that the `""stage""` keyword can be set to anything (not only `""deltan""`), and it's used only to name the stage within the printing script. Perhaps prepending `""CBS {GRAND_NEED[dc]['d_stage'].upper()} TOTAL ENERGY""` might be safer to avoid possible clashing / overwriting of existing energies by the user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548:232,ENERGY,ENERGY,232,https://psicode.org,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548,1,['ENERGY'],['ENERGY']
Energy Efficiency,"I'd prefer @dgasmith option. As for storage of excitations, I was thinking to modify the return value of the solver to a data structure collecting energy, response vectors, and transition moments for each excitation. `Wavefunction` could hold a dictionary of these, with labeling by irrep (`f""STATE {n} in IRREP {m}""`) or by energy (`f""STATE {n}""`) I think the latter could be more intuitive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626346287,4,['energy'],['energy']
Energy Efficiency,"I'd prefer not needing to throw in a prefactor at all, but I suppose that's necessary given that `occ` and `dfocc` measure the ""residual"" as the size of the first order update, not the size of the residual proper. No issues there. My thoughts about the CEPA issue are unchanged from my previous comment; as best as I can tell, the energy being within convergence tolerance does not mean all of its spin components are. As for why this doesn't afflict other modules:; * `fnocc` and `occ` compute the energy differently. `fnocc` uses an energy functional that is variational in the amplitudes, where `occ` uses the normal CCD-like energy functional. They'll both agree at convergence, but not at other amplitudes. This difference seems to give `fnocc` its better behaved spin-components.; * There don't seem to be `dfocc` LCCD eneries in the standard suite, so of course those aren't raising errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339:331,energy,energy,331,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339,4,['energy'],['energy']
Energy Efficiency,"I'd prefer sticking to the `energy` call though I can see the appeal of using `tddft(ref_wfn)`. `energy(""TD-B3LYP/c-pVDZ"")` and `energy(""TDA-B3LYP/cc-pVDZ"")` would be cool.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626334781,3,['energy'],['energy']
Energy Efficiency,"I'll defer a more thorough review until after GA Tech's pass, but I do want some input on this, to make sure that properties stay sane. A few preliminary comments. 1. ""ATOMIC_VOLUMES"" computations will fail unless the user has already run ""MBIS_CHARGES"", since grid_, rho_a_points_, rho_a_0_points_, and distances_ won't even be meaningfully defined. Good luck calling the `blocks` method of `nullptr`.; 2. You are making `grid_`, `rho_a_points_`, `rho_a_0_points_`, and `distances_` new members of `PopulationAnalysisCalc`, but these are only needed for MBIS multipoles. Both of these indicate that MBIS_CHARGES and ATOMIC_VOLUMES are more tightly coupled than can be captured with a model of independent property calculations used throughout the rest of the class. Might I suggest that you move atomic volumes to be computed during an MBIS charge calculation, rather than as an independent property?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742530038:842,charge,charge,842,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742530038,1,['charge'],['charge']
Energy Efficiency,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183540864:462,energy,energy,462,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I'm a bit puzzled by CAS. The following input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set restricted_docc [2]; set restricted_uocc [16]; set active [10]; set wfn detci; set NUM_DETS_PRINT 40000; set e_convergence 1e-10; set r_convergence 1e-10; set ci_maxiter 1000; set mcscf_maxiter 100; set nat_orbs true. cas_e, cas_wfn = energy('casscf', return_wfn=True). energy('casscf', ref_wfn=cas_wfn); ```; should do what you suggest, but when I look at the determinants output; ```; * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX ; * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX ; * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX ; * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX ; * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB ; ```; the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's really using NOs, the Aufbau determinant should have significant weight, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275616670:372,energy,energy,372,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275616670,2,['energy'],['energy']
Energy Efficiency,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:320,energy,energy,320,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744,2,['energy'],['energy']
Energy Efficiency,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-250948669:713,efficient,efficient,713,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669,1,['efficient'],['efficient']
Energy Efficiency,"I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:. <pre>; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.072955 0.170180; 17 -1.309315455352626 1.686e-07 0.019205 0.072955 0.072955 0.170180; 18 -1.309315454431369 8.202e-08 0.019205 0.072955 0.072955 0.170180; Iterations converged.; </pre>. Am I forgetting about some other restart keyword besides those I mentioned in my first post?. Cheers,; Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089484:290,Energy,Energy,290,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089484,1,['Energy'],['Energy']
Energy Efficiency,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:625,charge,charges,625,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,6,['charge'],['charges']
Energy Efficiency,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:73,reduce,reduced,73,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['reduce'],['reduced']
Energy Efficiency,"I'm going to adapt the sample file, too, afterwards this can be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830:13,adapt,adapt,13,https://psicode.org,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830,1,['adapt'],['adapt']
Energy Efficiency,"I'm not familiar with Chargemol, but it must have some mechanism for providing information about core electrons (the `ncore` that is listed as zero in your provided output); to my knowledge there is no place in the cube file format for this information. The problem you are experiencing is almost certainly because the 28 'missing' electrons are accounted for by an ECP for the iodine atom, so we need some way to tell Chargemol about those.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412845397:22,Charge,Chargemol,22,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412845397,2,['Charge'],['Chargemol']
Energy Efficiency,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:75,charge,charges,75,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890,3,['charge'],['charges']
Energy Efficiency,"I'm not sure how often `oeprop` really gets called directly in an input, so this is an interesting case. I'm actually tempted to say this is ""expected"" behavior - if you're not calling `oeprop` within the pre-built workflow of another method, maybe it shouldn't get a name unless you specify one. . the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals? generally we only update the density in `properties`, so I'd wager you would actually get the SCF dipole back out. if I recall, it should be printed in the output file which density is used, but if you pull results directly from the python output then you won't necessarily know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545:402,energy,energy,402,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545,1,['energy'],['energy']
Energy Efficiency,"I'm not sure if there are any Gaussian codes that have the Yukawa kernels. However, I do have the Yukawa kernels in HelFEM for atomic calculations, and for `hyb_gga_xc_camy_b3lyp` I get the following energies. | atom | energy |; |--------|-----------|; | He | -2.90309239 |; | N | -54.59195697 |; | Ne | -128.96948058 |. If you run the calculations in Psi4 with the AHGBS-9 basis (available from the BSE) and a large quadrature grid like (250, 590), you should be able to match these to sub-microhartree accuracy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944:219,energy,energy,219,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997412944,1,['energy'],['energy']
Energy Efficiency,I'm not sure what you're asking... Do you want to calculate the kinetic energy matrix T using DFT quadrature?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734#issuecomment-541356534:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/issues/1734#issuecomment-541356534,1,['energy'],['energy']
Energy Efficiency,"I'm not sure why the Aufbau determinant has such a small weight, so that's; a bit of a mystery. But I'm a little surprised you would want to run this; particular procedure. If you ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you sug",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:297,energy,energy,297,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,2,['energy'],['energy']
Energy Efficiency,"I'm running a single point energy calculation with `psi4.energy(""ccsd(t)/aug-cc-pvdz"")`. . The input is simple. Just:. ```; import psi4; from psi4 import *. psi4.core.set_output_file('xxx.dat', False). psi4.set_memory('200 GB'); psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""xxx""); psi4.set_num_threads(24); ```; followed by the molecule specification with `psi4.geometry()` and then; ```; psi4.energy(""ccsd(t)/aug-cc-pvdz""); ```. (I know this will take a lot of memory and disk space, but I believe the memory limit should stand.). - psi4 version 1.3.2 in a new python 3.7 conda environment; - RHEL 7.6",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679407019:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679407019,6,['energy'],['energy']
Energy Efficiency,"I'm sorry, but the issue does not seem to be fully solved... Yes now the atom nr in the header of the cube file is correct:; ```; Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0571983,0); 5 -12.329260 -10.002258 -9.679907; 131 0.160000 0.000000 0.000000; 120 0.000000 0.160000 0.000000; 122 0.000000 0.000000 0.160000; 53 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708. ```; But the integrated electrons in the cube file still misses alot of electrons. I use the cube file as input for the Chargemol code, and it works perfect for all other than molecules with Iodine as in this example. ```; Starting DDEC program; 2018/08/14 12:53:41; Copyright (c) 2014, 2015, 2016 by Thomas A. Manz and Nidia Gabaldon Limas. Rights reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:693,Charge,Chargemol,693,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['Charge'],['Chargemol']
Energy Efficiency,"I'm sure Stanton knows what he is talking about here, but I am not sure; there is a discrepancy between what he is saying and what I am saying.; Perhaps he never coded the minimal displacement approach, as we have never; coded it either. He may have decided the robustness and simplicity of +2/3; gradients was better than the complexity and complication of solving all; these little equations. I don't see a problem with you going ahead as you; are planning for pyvib2. We could revisit to try to reduce the; computational cost slightly at a later time. On Fri, Jan 19, 2018 at 12:43 PM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, my concern is your insistence; > that the rot SALCs *aren't* needed at non-stationary geometries (""3; > rotational degrees for which the energy is invariant"", ""don't have to do; > the extra displacements"") vs. Stanton's insistence that they *are* (""At a; > stationary point on the potential energy surface, both options will give; > equivalent harmonic force fields, but OFF [retains the rotational degrees; > of freedom] should be used at non-stationary points."" Since pyvib2 has to; > start from Cartesian Hessians (findif or anal.), I'm just trying to gauge; > what situations the former is valid for.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-359053844>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTPrMzI8UDltN7yLjOYyEfycGPrnAks5tMOJIgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359059459:498,reduce,reduce,498,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359059459,6,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"I'm taking a look at this in pyoptking and hit the scf issue described above (after deactivating the torsion error). @loriab `""guess"" : ""read""` is being sent to psi4 in the `AtomicInput`. Is `read` expected to work with a standard energy call followed by a call through `run_qcschema`?. I get:; `Unable to find file 180, defaulting to SAD guess.` . If psi4 is looking in `$PSI_SCRATCH` I don't see file 180 there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078:231,energy,energy,231,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870088078,1,['energy'],['energy']
Energy Efficiency,"I'm using icpc 16.0.1 and I get the same failing test, scf5 with:. ```; PsiException: Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-227418754:102,energy,energy,102,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-227418754,1,['energy'],['energy']
Energy Efficiency,"I've PR'd to this PR a fix for all the recent ghost/ECP issues (https://github.com/PeterKraus/psi4/pull/2). This is all sidestepping the true problem, which is that we're overloading `mol->Z()` to be atomic number, ghostedness, and non-ECP charge. Errors downstream of libmints Molecule are going to keep popping up, methinks. In fact, I should probably check the mol->json procedure. Thoughts on a forward strategy?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582:240,charge,charge,240,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409411582,1,['charge'],['charge']
Energy Efficiency,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:160,charge,charges,160,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223,1,['charge'],['charges']
Energy Efficiency,I've built a 10 once for Susi. Compilation time isn't too bad when it's only energy ints -- Hessians are painful. The real obstacle is storage space for the conda pkg. But maybe EFV knows reasons to be suspicious.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1124284720:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1124284720,1,['energy'],['energy']
Energy Efficiency,"I've finally managed to get your branch to compile on my machine (Libint was throwing a fit like it always does whenever I want to do anything), so hopefully I can get to the bottom of the non-zero values soon. I get the correct SCF energy with libecpint through my (non-Psi4) code, so it has to be a wrapping issue. Edit: see below - it was indeed a wrapping issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980:233,energy,energy,233,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980,1,['energy'],['energy']
Energy Efficiency,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202577523:821,ENERGY,ENERGY,821,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523,1,['ENERGY'],['ENERGY']
Energy Efficiency,"I've just noticed that this is meant for the 1.3 release. I'll have another look at it and will implement both `freeze_core True/False` and `freeze_core 0/-1/-2/-3` options, where `False == 0` witout FC, `True` is the ""smart handling"" (previous rare gas of each atom, taking into account charge), and `-1/-2/-3` would be ""strict"" N-th previous rare gas, ignoring charge but throwing a reasonable error when all electrons are frozen. I will have it done by Monday, if that's OK?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734:288,charge,charge,288,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734,2,['charge'],['charge']
Energy Efficiency,"I've looked at this a little more. The issue is that DETCI was written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,1,['energy'],['energy']
Energy Efficiency,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20587095:249,energy,energy,249,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095,1,['energy'],['energy']
Energy Efficiency,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286#issuecomment-189699831:229,energy,energy,229,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831,2,['energy'],['energy']
Energy Efficiency,I've only run `ctest -L smoke` in the `build/` directory and it all seems to pass:; ```; Test project /gpfs/alpine2/scratch/jslj23/chm205/psi4/build; Start 6: casscf-sp; 1/20 Test #6: casscf-sp ........................ Passed 12.07 sec; Start 21: cc1; 2/20 Test #21: cc1 .............................. Passed 6.74 sec; Start 138: dfmp2-1; 3/20 Test #138: dfmp2-1 .......................... Passed 78.01 sec; Start 228: fcidump; 4/20 Test #228: fcidump .......................... Passed 4.32 sec; Start 385: sapt1; 5/20 Test #385: sapt1 ............................ Passed 59.83 sec; Start 419: scf-property; 6/20 Test #419: scf-property ..................... Passed 9.06 sec; Start 434: tu1-h2o-energy; 7/20 Test #434: tu1-h2o-energy ................... Passed 2.56 sec; Start 470: tdscf-1; 8/20 Test #470: tdscf-1 .......................... Passed 5.19 sec; Start 471: tdscf-2; 9/20 Test #471: tdscf-2 .......................... Passed 3.84 sec; Start 472: tdscf-3; 10/20 Test #472: tdscf-3 .......................... Passed 12.44 sec; Start 473: tdscf-4; 11/20 Test #473: tdscf-4 .......................... Passed 11.39 sec; Start 487: ddd-deriv; 12/20 Test #487: ddd-deriv ........................ Passed 17.49 sec; Start 492: psi4numpy-rhf; 13/20 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 494: psi4numpy-rhf-hessian; 14/20 Test #494: psi4numpy-rhf-hessian ............ Passed 2.55 sec; Start 499: python-energy; 15/20 Test #499: python-energy .................... Passed 2.27 sec; Start 514: json-schema-1-gradient; 16/20 Test #514: json-schema-1-gradient ........... Passed 2.83 sec; Start 518: dftd3-energy; 17/20 Test #518: dftd3-energy ..................... Passed 49.54 sec; Start 523: sapt0-d; 18/20 Test #523: sapt0-d .......................... Passed 379.12 sec; Start 524: fsapt-d; 19/20 Test #524: fsapt-d .......................... Passed 487.00 sec; Start 526: dftd4-energy; 20/20 Test #526: dftd4-energy ..................... Passed 128.98 sec. 100% tests p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523:695,energy,energy,695,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523,2,['energy'],['energy']
Energy Efficiency,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:341,energy,energy,341,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827,1,['energy'],['energy']
Energy Efficiency,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:1158,energy,energy,1158,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['energy'],['energy']
Energy Efficiency,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:461,energy,energy-large,461,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,1,['energy'],['energy-large']
Energy Efficiency,"I've tried ROHF molden output from PSI4 input:. memory 2 Gb. molecule be {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; }. hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). Total Energy = -24.5289623832308834. Single determinant CASINO output:. E = -24.529(1) ; var = 4.89(8). 3 determinants with weighting factors:; 1-st 0.972153; 2-nd 0.165709; 3-rd 0.165709. CASINO output:. E = -24.459(1) ; var = 5.1(2) . 3 determinants with weighting factors:; 1-st 0.972153; 2-nd -0.165709; 3-rd -0.165709. CASINO output:. E = -24.535(1) ; var = 5.0(1) . The last determinant composition has lowest energy so I would like to know is multi-determinant construction convention PS4's and CASINO are equal. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331683153:201,energy,energy,201,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331683153,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I've tried this out, and tests are clean. However, the output is confusing with no iterations printed. Fortunately, the same effect can be had with `fail_on_maxiter=False`. Then the output is:. ```. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 0: -128.84964605391272 -1.28850e+02 1.60374e-02. PsiException: Could not converge SCF iterations in 0 iterations. Energy and/or wave function did not converge, but proceeding anyway.; ```. Function reorganization is good, imo. I'll suggest edits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-767629805:225,Energy,Energy,225,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-767629805,2,['Energy'],['Energy']
Energy Efficiency,"I've turned up some much nastier behavior then a segfault -- incorrect QM... Take the attached input file [run.txt](https://github.com/psi4/psi4/files/9274229/run.txt) and note that `set num_frozen_docc 6` at the top there should potentially cause issues for the water molecule in the dimer. The alkane is perfectly OK with this, however, but should num_frozen_docc even be coming into play in a HF-level calc? I thought not, isn't it just for correlated calculations? . Anyway, in the run, the first SAPT0 step runs just fine -- really, the HF Is what we're looking at, and we get sensible numbers for the interaction:; ```; Total HF -0.10898644 [mEh] -0.06839003 [kcal/mol] -0.28614386 [kJ/mol]; Total SAPT0 -0.27387960 [mEh] -0.17186205 [kcal/mol] -0.71907080 [kJ/mol]; ```; ; And the underlying HF energies are:; ```; Total Energy = -272.3598217308123139; Total Energy = -196.3248586337326458; Total Energy = -76.0348541106373688; ```. But something goes Very Wrong in the second calculation. The water has _moved_, sure, but it's not done anything dramatic, really. It's still a water. The alkane hasn't moved at all. And yet... ```; Total HF -510.71908624 [mEh] -320.48106505 [kcal/mol] -1340.89277619 [kJ/mol]; Total SAPT0 -512.45472131 [mEh] -321.57019251 [kcal/mol] -1345.44968545 [kJ/mol]; ```. That's no good. Where did we go wrong?. In the water monomer energy, in fact:; ```; Total Energy = -272.3599706292600899; Total Energy = -196.3248586336976587; Total Energy = -75.5243929093220743; ```. Note that the water there seems to be 1 _hartree_ too ""unstable"". . If we instead take the second geometry and run it stand-alone, _with the incorrect num_frozen_docc_, we get a perfectly cromulent result:. ```; Total HF -0.25751717 [mEh] -0.16159446 [kcal/mol] -0.67611123 [kJ/mol]; Total SAPT0 -0.62788646 [mEh] -0.39400470 [kcal/mol] -1.64851567 [kJ/mol]; ```. So something strange is going on here -- I'd expect either the incorrect num_frozen_docc to break everything, or to break nothing ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207127647:828,Energy,Energy,828,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207127647,3,['Energy'],['Energy']
Energy Efficiency,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:383,energy,energy,383,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,1,['energy'],['energy']
Energy Efficiency,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:610,energy,energy,610,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883,1,['energy'],['energy']
Energy Efficiency,"IIRC a common problem with alkali and alkaline elements is that the core levels can lie higher up in energy than the valence electrons in other species. Defining the core levels via e.g. population analysis ([Rassolov et al, Chem. Phys. Lett. 350, 573 (2001)](https://doi.org/10.1016/S0009-2614(01)01345-8) can be used to avoid this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857:101,energy,energy,101,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857,1,['energy'],['energy']
Energy Efficiency,"IIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pick",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9377,Energy,Energy,9377,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:126,charge,charges,126,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836,2,['charge'],['charges']
Energy Efficiency,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:494,charge,charges,494,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699,8,"['charge', 'energy']","['charge', 'charges', 'energy']"
Energy Efficiency,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:640,reduce,reduce,640,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646,1,['reduce'],['reduce']
Energy Efficiency,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:40,reduce,reduced,40,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515,2,"['energy', 'reduce']","['energy', 'reduced']"
Energy Efficiency,"If you are doing an update of the documentation for Molecule.Z, it might be useful to consider possible user confusion between Molecule.Z (capital, gives the charge) and Molecule.z (lowercase, gives the z-coordinate). Both return floats, so no type mismatch, and it's not an obvious typo visually. Maybe a warning in the API would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363502006:158,charge,charge,158,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363502006,1,['charge'],['charge']
Energy Efficiency,"If you calculate higher roots : set roots_per_irrep [3,0,0,0,0,0,0,0]. you should get the followings : . Iter=49 L=36 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016108 3.23e-10 5.08e-07 Y; 2 0.3299082274 -4.27e-08 2.15e-05 N; 3 0.3364017920 3.03e-10 6.02e-07 Y; Iter=50 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -4.16e-11 5.07e-07 Y; 2 0.3299082274 9.50e-12 2.15e-05 N; 3 0.3364017920 -1.83e-11 6.05e-07 Y; Iter=51 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -7.15e-12 5.08e-07 Y; 2 0.3299081111 -1.16e-07 2.65e-05 N; 3 0.3364017920 5.08e-11 6.06e-07 Y; Iter=52 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016109 1.66e-10 5.11e-07 Y; 2 0.3299079665 -1.45e-07 1.51e-05 N; 3 0.3364017922 1.60e-10 6.04e-07 Y; Iter=53 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016134 2.49e-09 4.23e-07 Y; 2 0.3299076116 -3.55e-07 2.15e-05 N; 3 0.3364017922 -2.69e-11 6.01e-07 Y; Iter=54 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3031989513 -2.11e-02 2.19e-01 N; 2 0.3243016119 -5.61e-03 4.37e-07 N; 3 0.3299093542 -6.49e-03 4.01e-05 N; Iter=55 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1959550539 -1.07e-01 1.77e-01 N; 2 0.3243016120 1.51e-10 2.03e-07 Y; 3 0.3299083008 -1.05e-06 1.35e-05 N; Iter=56 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1704364933 -2.55e-02 7.63e-02 N; 2 0.3243016120 2.24e-11 1.99e-07 Y; 3 0.3299082189 -8.19e-08 1.11e-05 N; Iter=57 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1646225593 -5.81e-03 4.39e-02 N; 2 0.3243016115 -5.11e-10 1.86e-07 Y; 3 0.3299081686 -5.03e-08 1.05e-05 N; Iter=58 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.1600433140 -4.58e-03 5.00e-02 N; 2 0.2894312372 -3.49e-02 2.35e-01 N; 3 0.3243016111 -5.61e-03 2.21e-07 N",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097143:127,Energy,Energy,127,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097143,10,['Energy'],['Energy']
Energy Efficiency,"If you examine `Final Occupation by Irrep` you can see it changes eventually, causing a drastic change in the SCF energy.; It's not a technically issue but an electronic one. What you can try is set `psi4.set_options({'reference': 'uhf', 'guess':'read'})` after the first SCF is done and check if the state still changes. It should help a lot. (And think about which state you want, and/or check which is lower in energy).; Sometimes bond scans are more stable going from long to short distances.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455:114,energy,energy,114,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455,2,['energy'],['energy']
Energy Efficiency,"If you put a `clean()` between the `energy` calls, it'll work. The files used to transform ints in the two calls are somehow interfering with each other.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-429564670:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-429564670,1,['energy'],['energy']
Energy Efficiency,"If you're able to run psi outside Jupyter, could you try the below? It's your file with `clean()` added. It runs fine for me. It sounds like something you tried, so I want to confirm we're running the same circumstances. ```; import psi4 . basis_sets = ['STO-3G','6-31g','6-311g','6-31+G','6-31G*','6-31+G*',; '6-311G*','6-311+G**','cc-pVDZ','cc-pVTZ']. B = psi4.geometry(""""""; 0 2; B; """"""). bs, es, wfns = [], [], []. for basis_set in basis_sets:; ; psi4.core.clean(); psi4.set_options({'reference': 'uhf','basis': basis_set}); e, wfn = psi4.energy('hf',return_wfn=True); ; es.append(e); wfns.append(wfn.basisset().nbf()); bs.append(basis_set). print(bs); print(es); print(wfns); ```. ```; ['STO-3G', '6-31g', '6-311g', '6-31+G', '6-31G*', '6-31+G*', '6-311G*', '6-311+G**', 'cc-pVDZ', 'cc-pVTZ']; [-24.149116604634685, -24.519491417069652, -24.52701726771759, -24.52372741487474, -24.522035242682847, -24.526158480502467, -24.5300987020333, -24.53034517277682, -24.529958285088252, -24.532065412570194]; [5, 9, 13, 13, 15, 19, 18, 22, 14, 30]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794#issuecomment-581095759:542,energy,energy,542,https://psicode.org,https://github.com/psi4/psi4/issues/1794#issuecomment-581095759,1,['energy'],['energy']
Energy Efficiency,"If you're using libxc's camb3lyp, the energy should be something like -76.32981537.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360596788:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360596788,1,['energy'],['energy']
Energy Efficiency,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:115,energy,energy,115,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592,3,['energy'],['energy']
Energy Efficiency,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-183702993:11,energy,energy,11,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993,2,['energy'],['energy']
Energy Efficiency,"In general, psi4 is `DOCC`/`SOCC` _or_ `guess`. That is, guess won't respect DOCC/SOCC. Good point that this could be better documented. Actually fixing this is scheduled for further development of the Wavefunction object.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/420#issuecomment-227920484:161,schedul,scheduled,161,https://psicode.org,https://github.com/psi4/psi4/issues/420#issuecomment-227920484,1,['schedul'],['scheduled']
Energy Efficiency,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:739,schedul,scheduled,739,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,1,['schedul'],['scheduled']
Energy Efficiency,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:627,energy,energy,627,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,3,['energy'],['energy']
Energy Efficiency,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:141,ENERGY,ENERGY,141,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355,2,['ENERGY'],['ENERGY']
Energy Efficiency,"In reply to @WDerricotte's last post. This runs on my laptop too. ```; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon; ```; but ; ```; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; ```; does not. The second version (not working) should be the preferred one because the non-DK basis are not meant to be used for relativistic computations. This is the error that I get and it looks like a problem with DF, since if I add the keyword `scf_type = pk` it runs.; ```; CHE-FEVANGE-01I:x2c-double-decontract fevange$ psi4; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4-fork-bin-Debug/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 2794, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1938, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/procrouting/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/Users/fevange/Source/psi4-fork-bin-Debug/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 742, in construct; tmp.append(c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288840729:799,energy,energy,799,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288840729,2,['energy'],['energy']
Energy Efficiency,"Input:; ```; molecule no {; 1 2; F; H 1 0.9015; }. set {; basis cc-pvtz; reference rohf; guess sad; scf_type pk; df_scf_guess false; docc [ 3, 0, 0, 1 ]; socc [ 0, 0, 1, 0 ]; }; energy('scf'); ```; Output before:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -61.25773907843870 -9.86099e+01 2.31925e-01 ; @ROHF iter 2: -94.47417324752453 -3.32164e+01 1.02224e-01 DIIS; @ROHF iter 3: -98.93494550743969 -4.46077e+00 5.01802e-02 DIIS; @ROHF iter 4: -99.51385930181866 -5.78914e-01 5.73014e-03 DIIS; @ROHF iter 5: -99.52593866328210 -1.20794e-02 7.53133e-04 DIIS; @ROHF iter 6: -99.52616227812669 -2.23615e-04 1.38250e-04 DIIS; @ROHF iter 7: -99.52617115743607 -8.87931e-06 1.41516e-05 DIIS; @ROHF iter 8: -99.52617133422457 -1.76789e-07 4.22537e-06 DIIS; @ROHF iter 9: -99.52617135108980 -1.68652e-08 6.00763e-07 DIIS; Energy converged.; ```; Output now:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -98.88199282615329 -1.36234e+02 5.47587e-02 ; @ROHF iter 2: -99.37308671364974 -4.91094e-01 2.39373e-02 DIIS; @ROHF iter 3: -99.52506651519121 -1.51980e-01 1.60839e-03 DIIS; @ROHF iter 4: -99.52612487148851 -1.05836e-03 3.72093e-04 DIIS; @ROHF iter 5: -99.52617068447645 -4.58130e-05 3.55283e-05 DIIS; @ROHF iter 6: -99.52617130679994 -6.22323e-07 6.69049e-06 DIIS; @ROHF iter 7: -99.52617134939356 -4.25936e-08 1.37357e-06 DIIS; @ROHF iter 8: -99.52617135123231 -1.83874e-09 1.08978e-07 DIIS; Energy converged.; ```; so ROHF saves almost two iterations even in this simple case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450632700:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450632700,6,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Inspired by @CDSherrill's comment, I modified the plots to be a little more educational. The code now plots the harmonic and anharmonic (quartic) fits on top of each other, and shows the first few energy levels as well as a comparison of r_e and r_0. ![example plot](http://imgur.com/UPklaZW.png). The two commits have been squashed and rebased to the current master, so should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515#issuecomment-260096464:197,energy,energy,197,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260096464,1,['energy'],['energy']
Energy Efficiency,"Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Number of basis function: 46; Number of Cartesian functions: 50; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 3.6142168109E-01.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -2.85515015411516 -2.85515e+00 1.19401e-03 ; @DF-UHF iter 1: -2.85520007568163 -4.99216e-05 7.84987e-05 DIIS; @DF-UHF iter 2: -2.85520042336024 -3.47679e-07 7.68575e-06 DIIS; @DF-UHF iter 3: -2.85520042767878 -4.31854e-09 3.18063e-07 DIIS; @DF-UHF iter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:8159,Energy,Energy,8159,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"Is ""PowerShell"" the Ubuntu Shell or Windows Subsystem for Linux? No, no real plans to try a native compile. Build is cmake, so at least that's windows friendly. Need c++11, so newish compiler. That should be ok if dropped py2. So no obvious barrier to Windows, but the dev community has no need or experience. I take it that Windows would be useful? By the way, would you be pained if py2.7 was dropped and min moved to 3.5?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-371308270:4,Power,PowerShell,4,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-371308270,1,['Power'],['PowerShell']
Energy Efficiency,"Is anyone presently working on this? I see it's gotten moved from milestone to milestone, just curious what priority level this is (or isn't). I've gotten some dimer interaction energy mismatches of >0.1 kcal/mol due to this bug in CP-corrected dimer interaction energies, though these errors are still << the error of DFT vs a CCSD(T)-level method, so it's not a big deal, just a little obnoxious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1764883227,1,['energy'],['energy']
Energy Efficiency,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['energy'],['energy']
Energy Efficiency,"Is that a new option? It's doesn't seem to have an effect in version 1.1.; ```; molecule {; -1 1; Mn -5.8534733333 1.3394733837 -0.4649497438; O -4.6678229246 2.7275455154 -0.8242237964; H -4.6340746874 3.3845395668 -0.1494211065; O -7.2789168965 2.1411811086 0.4215893334; H -7.8199772787 1.5357569391 0.8999611740; O -5.3067672331 -0.0431310925 0.6533689515; H -4.7858036361 -0.6983214503 0.2203485236; O -6.1585656429 0.5314683638 -2.1129873999; H -6.1687683674 1.1358176653 -2.8360759358; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type df; set mcscf_type df; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True). # 31 occ orbs; set restricted_docc [ 26 ]; set active [10]; set mcscf_algorithm ah; set mcscf_guess mp2; cas_e, cas_wfn = energy('casscf', ref_wfn = scf_wfn, return_wfn = True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829#issuecomment-339627123:630,energy,energy,630,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339627123,2,['energy'],['energy']
Energy Efficiency,"Is the ""it"" you're trying the original input file you posted, or the one that Lori posted?. Your input file may or may not demonstrate the problem. Noise in the energy single points leads to noise in the computed gradient leads to noise in the optimization step leads to noise in whether or not you get a problematic geometry. Lori's input file should reproduce the bug 100% of the time. I've been exploring Psi's symmetry handling for an unrelated issue, and it looks like Psi's symmetry detection assumes the symmetry operations can be oriented along the x-, y-, z- axes. I'm not surprised to see problems with symmetry detection if you don't let Psi center-of-mass-adjust the molecule. The symmetry elements would need to be translated in space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442804174:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442804174,1,['energy'],['energy']
Energy Efficiency,"Is the guess energy the same or does it change by a large amount when changing the Cholesky threshold?. So the SAD energies are correct which means the densities are *likely* similar, and tweaking the Cholesky doesn't help. Color me stumped. Maybe the SAD guess is picking up a odd symmetry with different diagonalizers, can you try `set sad_frac_occ true`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-319246264:13,energy,energy,13,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319246264,1,['energy'],['energy']
Energy Efficiency,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110021718:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718,5,['energy'],['energy']
Energy Efficiency,"Is this problem restricted to CD-MP2, @loriab? If it's affecting the SCF energy too, it seems like it's a problem with the input parser not correctly handling the commented lines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183516602:73,energy,energy,73,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183516602,1,['energy'],['energy']
Energy Efficiency,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:197,energy,energy,197,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['energy'],['energy']
Energy Efficiency,"It also might be an issue with the functional. In my experience with finite element calculations, the B97 functionals are not very well-behaved numerically. I would not be surprised if this was also a case where the functional is so un-smooth that it produces a Fock matrix that causes the energy to blow up. You can try adding damping or switching to another functional. You might have better success by preconverging the orbitals with something else like HF or a simpler density functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565:290,energy,energy,290,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565,2,['energy'],['energy']
Energy Efficiency,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182597595:221,reduce,reduce,221,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595,1,['reduce'],['reduce']
Energy Efficiency,"It does for the [direct integrals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L228), but not for one-electron integrals, or the disk-based TEIs. The one-electron integrals being slow was not a problem before we started adding external point charge fields like PCM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1362#issuecomment-439913645:273,charge,charge,273,https://psicode.org,https://github.com/psi4/psi4/issues/1362#issuecomment-439913645,1,['charge'],['charge']
Energy Efficiency,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:129,energy,energy,129,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,2,"['adapt', 'energy']","['adapted', 'energy']"
Energy Efficiency,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:394,energy,energy,394,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,2,['energy'],['energy']
Energy Efficiency,"It is printed... I know which basis set I use, but would just like upfront; to make my chargemol job-control file ready for my basis set choise. Thank; you all!. On Tue, 14 Aug 2018, 15.59 David Sherrill, <notifications@github.com> wrote:. > If we don't print the number of implied core electrons in the output; > somewhere when using an ECP basis, it wouldn't be a bad idea to do so.; >; > On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; > wrote:; >; > > Ideally, you should know what kind of basis set you're using, as you're; > > presumably going to cite it in your work; the details about the number of; > > core e-'s treated as effective potentials will be included there. There; > > are also all-electron basis sets available for almost any element; some; > of; > > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an; > ECP; > > in the => Loading Basis Set <= section, and the details are printed later; > > on under ==> Primary Basis <==.; > >; > > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > > The additional 8 electrons you're thinking about are from the 4th period; > > shells, where the 4d10 part is in your 5th valence shell - so you don't; > > really want to replace any of those with a potential. (At least that's my; > > rather limited understanding.); > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or; > mute; > > the thread; > > <; > https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l; > >; > > .; > >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412881311>, or mute; > the thread; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315:87,charge,chargemol,87,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315,1,['charge'],['chargemol']
Energy Efficiency,"It is still possible to create the ""ADIIS minimization failed"" error with the input file below (only changes to the above are correcting the coordinates' units and changing VV10 parameters), but I imagine this is because the values for (b,c) are now so extreme that it's no longer physical. . ```; set num_frozen_docc 12; set {; dft_vv10_b 0.01; dft_vv10_c 0.01; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.49280516 -1.34928891 1.93251153; C 0.84810575 -1.10523761 2.10967679; C 1.26836829 0.29972931 2.0863085 ; C 0.33631373 1.28766879 2.06605249; C -1.0593442 1.02559068 1.99570094; C -1.46753033 -0.25217665 2.08599284; H -0.8366212 -2.3512709 1.85597882; H 1.65258993 -1.81487491 2.11488685; H 2.30066607 0.63566923 1.9769963 ; H 0.6336208 2.42220895 1.85607739; H -1.79244121 1.74937993 2.11242291; H -2.68362171 -0.43063144 2.07823169; C -0.8151077 -1.09341082 -1.9012646 ; C -1.16492239 0.31096713 -2.00016775; C -0.29873999 1.38082172 -1.68134071; C 0.91640784 1.08513712 -1.22645142; C 1.30080416 -0.26891269 -1.09865272; C 0.4588141 -1.39278819 -1.38251659; H -1.3834194 -1.9058937 -2.16792859; H -2.20012949 0.38972302 -2.19448924; H -0.48864896 2.51613661 -1.54574084; H 1.66750317 1.87858355 -1.04866167; H 2.23050409 -0.51844162 -0.70388782; H 0.9799473 -2.25156744 -1.27023577; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871:1610,energy,energy,1610,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192984871,1,['energy'],['energy']
Energy Efficiency,It is; ```; molecule {; pubchem:91749189; }. memory 40 gb; set basis pcseg-0; energy('pbe'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503139259:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503139259,1,['energy'],['energy']
Energy Efficiency,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:308,allocate,allocated,308,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634,2,['allocate'],['allocated']
Energy Efficiency,"It looks like the default screening thresholds are different for energy and gradient calculations:. https://github.com/psi4/psi4/blob/3057799cde5524432ed3978416748386e437f1fb/psi4/src/psi4/libfock/jk.cc#L199. https://github.com/psi4/psi4/blob/3057799cde5524432ed3978416748386e437f1fb/psi4/src/psi4/scfgrad/jk_grad.cc#L118. I don't know if this is intentional, but it seems reasonable since a small integral doesn't guarantee a small gradient. Either way, these defaults are overridden when `ints_tolerance` is explicitly set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1540#issuecomment-464864482:65,energy,energy,65,https://psicode.org,https://github.com/psi4/psi4/issues/1540#issuecomment-464864482,1,['energy'],['energy']
Energy Efficiency,"It might not be in the code this way, but to me, the keyword `set basis something` sets a global-like value: everything that follows is expected to be calculated using that basis set. Both you and I know, that it is possible to change the code to allow:; ```; set basis sto-3g; energy('gaussian-2'); ```; to finish, and currently it even calculates a proper G2 energy. However, for example:; ```; set basis sto-3g; energy('pbeh-3c'); ```; doesn't - it will use `sto-3g` and it'll pretend it's doing `pbeh-3c`. If I pretend I'm someone who's never used Psi4 before, this is confusing. I believe we should change it, one way or another, but be consistent for composite methods. To answer your question, i'd suggest:; ```; molecule {; ...; }. energy('scf/sto-3g'); energy('gaussian-2'); ```; as a neat, unambiguous alternative.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233:278,energy,energy,278,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483020233,5,['energy'],['energy']
Energy Efficiency,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261257394:456,energy,energy,456,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394,2,['energy'],['energy']
Energy Efficiency,"It seems that the process of creating the geometry was at fault—in particular, in a production run, I created molecules with the ""units angstrom"" tag, and then called `molecule.set_full_geometry(xyzs)` on each of them. This seems to have had the effect of assuming that the coordinates were in bohr, then converting them to angstroms (dividing by 1.889). This, I think, produces the rough factor of 2 difference observed. I had missed that set_full_geometry assumes that the coordinates are in Bohr. I will try rerunning the fixed version in production to see if I end up with any similar errors. It takes a rather long time to converge (currently at 35 iterations; it's not converged yet), and it is quite low in energy—currently, -905 Hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026:714,energy,energy,714,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192972026,1,['energy'],['energy']
Energy Efficiency,"It should do but I'll check once the test suite with python 3 has finished and let you know. I am running the full test suite which is revealing a few more compatibility issues. Most are minor and easily fixed. The major problem is that iteritems and itervalues are used in several places. Unfortunately these have been (essentially) replaced in python 3 with the items and values methods, which return lists (rather than memory efficient generators) in python 2. I'm not sure what to do about this--one option is to just use the items and values methods, but that uses more memory in python 2. Another alternative is to write a function which returns iteritems in python 2 and items in python 3, but that's quite intrusive. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20534484:429,efficient,efficient,429,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20534484,1,['efficient'],['efficient']
Energy Efficiency,"It was able to converge fine. . You should see a section like this in the output file showing the EOM code working away at the root. ; ```; Symmetry of ground state: Ag; Symmetry of excited state: Ag; Symmetry of right eigenvector: Ag; Seeking states with multiplicity of 1; Obtaining initial guess from singles-singles block of Hbar...Done. Iter=1 L=1 Root EOM Energy Delta E Res. Norm Conv?; 1 0.4128588902 4.13e-01 3.16e-01 N; Iter=2 L=2 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3340136980 -7.88e-02 5.54e-02 N; Iter=3 L=3 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3311169492 -2.90e-03 2.75e-02 N; Iter=4 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3303034550 -8.13e-04 1.53e-02 N; Iter=5 L=5 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299847862 -3.19e-04 9.33e-03 N; Iter=6 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299158588 -6.89e-05 4.43e-03 N; Iter=7 L=7 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299119405 -3.92e-06 1.74e-03 N; Iter=8 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299103467 -1.59e-06 6.71e-04 N; Iter=9 L=9 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299072934 -3.05e-06 3.17e-04 N; Iter=10 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299064524 -8.41e-07 1.45e-04 N; Iter=11 L=11 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3299063854 -6.69e-08 9.39e-05 Y; Collapsing to only 1 vector(s). Procedure converged for 1 root(s).; Energy written to CC_INFO:Etot -231.2454217333; States per irrep written to CC_INFO.; EOM CCSD R0 for root 0 = -0.03232771150. Final Energetic Summary for Converged Roots of Irrep Ag; Excitation Energy Total Energy; (eV) (cm^-1) (au) (au); EOM State 1 8.977 72406.1 0.3299063854 -231.245421733323; ```. Summary at the end of the file also shows:; ```; 	 Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 8.977 72406.1 138.1 0.329906 0.0000 0.0000 0.0000 0.000000E+00; ```. If you are seeing something different could you put your output in a gist, or pastebin?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-278675637:1156,Energy,Energy,1156,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-278675637,7,['Energy'],['Energy']
Energy Efficiency,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:112,Power,Power,112,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,1,['Power'],['Power']
Energy Efficiency,"It'd be good if your experience writing and running the code and some of the data from your technical document can be formed into some user documentation, @yxie326 . I suggest a section within https://raw.githubusercontent.com/psi4/psi4/master/doc/sphinxman/source/sapt.rst . No need to build the docs -- you can just edit the file, and I'll clean up any sphinx difficulties later. You'll want the section to help the user answer the questions of ""what is this method?"" and ""will it work for my application?"". Below are some specific aspects that might help the user. Anything in the style of the rest of that sapt.rst file would be helpful. * what references (rhf/uhf/rohf) does dft-sapt work for?; * what are the differences btwn this and molpro or sapt2000? implementations?; * hybrid disp is new. what accuracy advantages can it give? what's not coded (e.g., LRC)?; * what is the largest system it's been tried for?; * what is the big-O scaling wrt occ/virt orb/aux sizes?; * eligible scf_type both conv and df?; * S^2 treatment? is the approx always applied or can Patkowski's S inf be used?; * any needed or recommended keywords for running?; * influence of grid? default (75, 302) ok? any more sensitive than dft itself?; * probably mention charge-transfer and monomer-centered basis variants not applicable to dft-sapt; * when you'd want to use each of the disp_scale_scheme; * is GRAC pertinent? any additional data needed for molecular system?; * where (in literature) can I find the equations if I want to know more? (probably the answer is a few published papers and your WIP one that you can use a placeholder for)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-674974155:1248,charge,charge-transfer,1248,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-674974155,1,['charge'],['charge-transfer']
Energy Efficiency,"It'd be great if you wanted to work on this. I'm fine with the current behavior, that the `set dft_functional b3lyp\n energy('scf')` runs scf. It's the `energy('b3lyp')` notation that we want to be user friendly, and that's already satisfied. Ok to keep the `set dft_functional b3lyp` notation straightforward and less user-friendly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117#issuecomment-121817414:118,energy,energy,118,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121817414,4,['energy'],['energy']
Energy Efficiency,"It's a duplicate of #391 . Unfortunately, python3-numpy is linked to ATLAS on Debian, so it will not be very easy to get around this, but I have (again) confirmed that if I set `blas.so` and `lapack.so` to something else than ATLAS then the `cdomp2-2` test passes:. ```; 	CD-OMP2 Total Energy (a.u.).......................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451659665:286,Energy,Energy,286,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451659665,1,['Energy'],['Energy']
Energy Efficiency,"It's a feature not a bug?. Symmetric molecules are supposed to have symmetric wavefunctions (because; the Hamiltonian commutes with the symmetry operators). Certainly, the; exact wavefunction does has the full point group symmetry. Occasionally,; approximate QM methods can have lower-energy non-symmetric solutions.; Anytime the wavefunction has a lower symmetry than the molecule, this is; usually considered a bad thing and is often called ""artifactual (spatial); symmetry breaking."" Wes Allen and Daniel Crawford have some excellent; papers on this topic (I've made a couple contributions, also). In most applications, generally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:285,energy,energy,285,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"It's actually not in the molecule parsing, as the first `Mol.print_out()` is correct. So somewhere in the driver call. Investigating ... ```; molecule probe {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe {; @H 0.0 0.0 0.0; @F 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843#issuecomment-397901527:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397901527,2,['energy'],['energy']
Energy Efficiency,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43508954:123,energy,energy,123,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954,8,['energy'],['energy']
Energy Efficiency,"It's not too complicated. The below is equivalent and slightly preferred. ```; set {; basis sto-3g # minimal orbital basis set; df_scf_guess false # usually, psi4 saves time by doing most of the HF iterations using density fitting then only a few with the full integrals. Since fitting basis sets aren't available, this skips the density fitting iterations.; scf_type direct # selects a non-density-fitting algorithm for the HF; guess sad # a better guess to start the HF iterations; sad is nearly always the best guess; mp2_type conv # selects a non-density-fitting algorithm for the MP2; }; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144769489:593,energy,energy,593,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144769489,1,['energy'],['energy']
Energy Efficiency,"It's sort of hard to follow the code. You should remove all the stuff about charges; the algorithm needs to do the memory estimate based on the actual occupied orbitals. You should separate the Coulomb and exchange bits, since Coulomb can be computed as a dot product, while exchange is a matrix multiplication. Range-separated exchange should be supported. You also can't assume that you can fit all the integrals into memory in a big system; you need to batch over the occupied orbitals based on the amount of memory that's available. . Please check Weigend's paper on how to do RI-HF optimally.; https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957:76,charge,charges,76,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-733280957,1,['charge'],['charges']
Energy Efficiency,"It's too bad thus is not working properly!. If the Molden output from Psi is being used as input to the QMC, and the; wrong CI energy is obtained, then it may be that we have a bug in the; Molden output writer. (Are we sure the CAS orbitals are the ones being; written out, and not HF orbitals?). The signs on the determinants printed by Psi4 code are well tested, and so; I think it is extremely unlikely they could be wrong. It is much more; likely that there is some kind of mismatch between the orbitals being used; in the CAS and the orbitals being put into the QMC code. Possible due to a; bug in the Molden writer, or possibly due to some kind of enforced phase; convention in the QMC code that is incompatible with the phase of the; orbitals from Psi. On Sep 23, 2017 9:47 AM, ""Daniel Smith"" <notifications@github.com> wrote:. > @CDSherrill <https://github.com/cdsherrill> Perhaps you could comment on; > this?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331640263>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdiI93WW1UBA9Fg9JkauL9vxRKM6uks5slRnvgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331666710:127,energy,energy,127,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331666710,1,['energy'],['energy']
Energy Efficiency,"I’ve hit that myself. Add to the cmake command -DENABLE_simint=OFF. I’ll have another go at the simint ppl to get them to release a tarball with simint am8 so we can build both at once. Or, having pointed cmake toward an am8 libint prebuilt, reduce your min requested to 7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448:242,reduce,reduce,242,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448,1,['reduce'],['reduce']
Energy Efficiency,"J/(mol K)] 0.00000000 [mEh/K]. Constant volume heat capacity, Cv; Electronic Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Rotational Cv 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cv 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cv 64.732 [cal/(mol K)] 270.838 [J/(mol K)] 0.10315665 [mEh/K]; Correction Cv 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. Constant pressure heat capacity, Cp; Electronic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.1675",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6218,Energy,Energy,6218,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['Energy'],['Energy']
Energy Efficiency,"Jonathon has pointed out that def2-svp has an ECP but 3-21G does not, hence the massive energy difference, so no issue there. My bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432353409:88,energy,energy,88,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432353409,1,['energy'],['energy']
Energy Efficiency,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:77,reduce,reduce,77,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,['reduce'],"['reduce', 'reduced']"
Energy Efficiency,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:180,energy,energy,180,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['energy'],['energy']
Energy Efficiency,"Just implemented some of Lori and Tibor's suggestions. I have also implemented SC-LMP2 for ""weak pairs"" to reduce the cost of the LCCSD computation, per the Sparse Maps II paper.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915#issuecomment-1493167993:107,reduce,reduce,107,https://psicode.org,https://github.com/psi4/psi4/pull/2915#issuecomment-1493167993,1,['reduce'],['reduce']
Energy Efficiency,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:203,energy,energy,203,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Just out of interest, can the power or R used in the Thole damping exponential be changed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922#issuecomment-641529045:30,power,power,30,https://psicode.org,https://github.com/psi4/psi4/pull/1922#issuecomment-641529045,1,['power'],['power']
Energy Efficiency,"Just out of interest, does this fix the `energy(cbs, ... , bsse_type=[...])` calls? The ""method/basis"" syntax for CBS works fine, but ""explicit"" returns the total energy. I'm not sure what's the expected behaviour, but I think it should be consistent:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ```; returns:; ```; TestComparisonError: 	Interaction energy: computed value (445.7515388) does not match (0.0131014) to 6 digits.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975#issuecomment-383597174:41,energy,energy,41,https://psicode.org,https://github.com/psi4/psi4/pull/975#issuecomment-383597174,6,['energy'],['energy']
Energy Efficiency,Just reporting that updating to the latest 1.9.1 package shows all green for me :-),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-2014049833:67,green,green,67,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-2014049833,1,['green'],['green']
Energy Efficiency,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:1002,energy,energy,1002,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,2,['energy'],['energy']
Energy Efficiency,"Just to clarify, is the long-term plan to use Bohr for external charges irrespective of the molecule units? I'd rather have both specified in the same units to avoid confusion and to make input creation easy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371:64,charge,charges,64,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371,1,['charge'],['charges']
Energy Efficiency,"Just to document this here as well, there's no convergence issue with any of the guesses with the default SCF options: SAD converges in 1+16 iterations, Huckel in 18. However, SAD lands on a saddle point, Huckel does not. The problem is the SCF after the stability analysis in SAD: the DIIS error starts out small at 8e-4, dips down, but soon comes back up and plateaus at 6e-4 all the while the energy converges. My first bet would be that something screws up orbital orthonormality in the stability code for UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482:396,energy,energy,396,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-548850482,1,['energy'],['energy']
Energy Efficiency,"Just to make sure I understand the issues here:; The first one is clear. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; The second one is less clear. Obviously, the QC variables controlling the HF energy are getting grabbed incorrectly, but are these two geometries supposed to be different?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933:311,energy,energy,311,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933,2,['energy'],['energy']
Energy Efficiency,"Just to prevent things falling in between the cracks, @loriab and I have discussed this issue on Slack a while ago, and the consensus was that while adding FC spec to `Molecule` might be attractive because it's easier to do, it really ought to belong to the `Wavefunction` object. . To paraphrase @loriab's comments, as the `Wavefunction` owns a `Basisset` which owns a `Molecule` anyway, it is the most logical place to plug this logic in. It should process options like `frozen_docc Int` or `freeze_core True` (or any possible `freeze_core N` spec where `N` is the N-th previous noble gas, or potential per-fragment `frozen_docc`). For the latter case (`freeze_core True`), it should take into account the fragment charge, or any electrons already frozen by ECP's, so that atoms such as Ca2+ with FC have some valence electrons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-445241427:717,charge,charge,717,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-445241427,1,['charge'],['charge']
Energy Efficiency,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-272780463:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463,1,['energy'],['energy']
Energy Efficiency,"Justin, can you send me the input where you disabled DKH? An SCF read of converged orbitals from the same molecule should never provide such a bad guess that you get an energy error on the order of Hartrees. Even if it's a naughty molecule like FeH. This points to an error in the way that PSI4 is reading orbitals for the set scf guess read procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360834609:169,energy,energy,169,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360834609,1,['energy'],['energy']
Energy Efficiency,"Last request for the night: Can you take scf5 and run it a bunch of times in a row (maybe 20 times)? On my Ivy Bridge machine, it will sometimes pass, sometimes fail.... ```; Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places; ```. Is this what you're seeing? Or is this an unrelated problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198631685:190,energy,energy,190,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198631685,1,['energy'],['energy']
Energy Efficiency,"Let me make sure I have this right: you're plotting energy errors on the order of 1e-7, but you only converged the energy to 1e-6? If so, then your plots are pure noise. If not, then what am I getting wrong?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583:52,energy,energy,52,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821212583,2,['energy'],['energy']
Energy Efficiency,"Let's start with the basics: Should it be possible to let a user do an SCF computation and then a G2 computation? I would think yes, but I can't see how that would be possible with your proposal. The obvious input is. ```; molecule {; h; h 1 1.0; }. set basis sto-3g; energy('scf'); energy('gaussian-2'); ```. If you don't set basis, SCF crashed. If you do, then under your proposal, the gaussian-2 would.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-483017069:268,energy,energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-483017069,2,['energy'],['energy']
Energy Efficiency,"Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry. Rotational constants: A = 0.08471 B = 0.08471 C = 0.08471 [cm^-1]; Rotational constants: A = 2539.41412 B = 2539.41051 C = 2539.40513 [MHz]; Nuclear repulsion = 46.252677099401765. Charge = -1; Multiplicity = 1; Electrons = 34; Nalpha = 17; Nbeta = 17. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:2264,charge,charge,2264,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['charge'],['charge']
Energy Efficiency,"Look at iteration 1: we're seeing a change in the iteration energy of over a mH due to this integral screening. This strongly suggests a bona fide bug. If you have additional systems that fail, this seems like a bug that is going to afflict a _lot_ of our users. I highly suggest we fast-track this for investigation but I would rather avoid being the one to debug this directly. (I'm trying to get into paper-writing mode.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755:60,energy,energy,60,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755,1,['energy'],['energy']
Energy Efficiency,"Looking at the output while SOSCF is active, it seems like the SO step is taken even if the microiterations do not converge. Assuming that is true, perhaps it would be a good idea to add some damping if we are taking an unconverged SO step.; Maybe increase the damping if the previous SO step increased the energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2212#issuecomment-1189482561:307,energy,energy,307,https://psicode.org,https://github.com/psi4/psi4/issues/2212#issuecomment-1189482561,1,['energy'],['energy']
Energy Efficiency,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:329,reduce,reduce,329,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,6,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304474246:228,energy,energy,228,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246,6,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:116,charge,charges,116,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['charge'],['charges']
Energy Efficiency,"Looks like there are a few test cases where SAD may converge onto a different solution than the previously used guess. Namely, on my computer the tests that fail on CI run just fine, and the SAD guess gives the same solution, only with a slightly lower energy in a fewer number of iterations. ROHF is tricky due to the existence of many local minima.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-447636721:253,energy,energy,253,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-447636721,1,['energy'],['energy']
Energy Efficiency,"Looks like there are some unrelated test failures, but this one is ready to go. As shown by the changes in the pytest guess energies, the new code reaches a considerably lower SAD guess energy for the HF molecule: -100.02909951427 vs -99.63941801281894. Large improvements are expected especially for systems containing hydrogen atoms, since the existing code only includes 0.5 electrons on those atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707:186,energy,energy,186,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707,1,['energy'],['energy']
Energy Efficiency,Looks like this isnt handling custom basis sets correctly and a few other python pieces like inline for-based lists and dicts. Failing tests are:. ```; The following tests FAILED:; 	 60 - cc49 (Failed); 	 93 - cubeprop (Failed); 	120 - dfmp2-1 (Failed); 	187 - mints2 (Failed); 	206 - mp2-property (Failed); 	235 - opt1 (Failed); 	256 - psimrcc-ccsd_t-1 (Failed); 	257 - psimrcc-ccsd_t-2 (Failed); 	258 - psimrcc-ccsd_t-3 (Failed); 	262 - psimrcc-pt2 (Failed); 	263 - psimrcc-sp1 (Failed); 	268 - pywrap-alias (Failed); 	310 - stability1 (Failed); 	322 - options1 (Failed); 	335 - dftd3-energy (Failed); 	339 - gdma-gdma1 (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-289183019:587,energy,energy,587,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289183019,1,['energy'],['energy']
Energy Efficiency,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189282404:1270,energy,energy,1270,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404,2,['energy'],['energy']
Energy Efficiency,"Lori, This is a problem that I have long wished to solve. Perhaps we can do it together. I've scribbled down some notes on the attached pdf. The primary problem is that the transformation to the cartesian hessian is not a linear one at non-stationary points. However, given the constraint that the energy is independent of rotations and translations, we don't have to do the extra displacements. The bad news is that it is not trivial. We need the 'derivative B matrix' or the second derivative of the external coordinates wrt cartesian displacements. Perhaps these are 0 for the COM coordinates, and your scheme will therefore work out of the box. But they are not for rotations. However, if we can find them or figure them out, then we can construct the Cartesian Hessian from a minimal number of displacements. Solving a 6x6 for each element is a good tradeoff I would say. The only real pain I forsee might be accommodating the linear molecules. In those cases one might be able to revert to not projecting the rotations at all as you planned. My notation is an inconsistent compromise between what I'm used to and the notation in WDA, JCP, 98, 1993. [cartesian hessians.pdf](https://github.com/psi4/psi4/files/1644627/cartesian.hessians.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-358800415:298,energy,energy,298,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-358800415,1,['energy'],['energy']
Energy Efficiency,"M=) | `83.80% <0.00%> (-10.63%)` | :arrow_down: |; | [psi4/src/psi4/libfock/sap.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3NhcC5jYw==) | `80.00% <0.00%> (-9.29%)` | :arrow_down: |; | [psi4/src/psi4/scfgrad/scf\_grad.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9zY2ZncmFkL3NjZl9ncmFkLmNj) | `95.09% <0.00%> (-1.19%)` | :arrow_down: |; | [psi4/src/psi4/liboptions/liboptions.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJvcHRpb25zL2xpYm9wdGlvbnMuY2M=) | `56.26% <0.00%> (-0.91%)` | :arrow_down: |; | [psi4/src/psi4/libmints/vector.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJtaW50cy92ZWN0b3IuY2M=) | `62.27% <0.00%> (-0.60%)` | :arrow_down: |; | [psi4/src/psi4/libfock/points.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3BvaW50cy5jYw==) | `72.24% <0.00%> (-0.27%)` | :arrow_down: |; | [psi4/src/core.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvY29yZS5jYw==) | `82.19% <0.00%> (-0.25%)` | :arrow_down: |; | [psi4/driver/driver.py](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9kcml2ZXIvZHJpdmVyLnB5) | `79.10% <0.00%> (-0.22%)` | :arrow_down: |; | ... and [106 more](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=footer). Last update [7d35d14...6e36f6b](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097:3228,Power,Powered,3228,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097,1,['Power'],['Powered']
Energy Efficiency,"Mac's Beer & Wine confirms that they will happily reserve gift cards for you at the register, and you developers need to do better if you want that beer. Usually, a QC app 'fails' gracefully on atomic systems.; By 'fail', I mean that it should: **_handle stupid requests gracefully._**. In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and may be of little value. The user adds in some Boltzmann kT multiples to internal E,H as needed. Total energies and enthalpies of atoms are needed for calculating molecular enthalpies of formation by the atomization method. I want this because I'm writing composite method modules for Psi4 with the goal of replicating Gaussian and GAMESS results. It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all well-behaved on the atomic cases, but those applications are why I'm here. [rant on egregious software licenses and general dislike of Fortran redacted]. Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the hydrogen atom. (joke!); Thanks to all.; -drh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204230882:1067,energy,energy,1067,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204230882,1,['energy'],['energy']
Energy Efficiency,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,2,['energy'],['energy']
Energy Efficiency,"Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; like this for CASSCF. Are they CAS NO's? Perhaps the most important; determinants are printed prior to the natural orbital procedure (in which; case there would be a mismatch between the orbitals and the determinant; printout)? Or, alternatively, I wonder if we enforce any kind of phase; convention in our MOLDEN writer that the CASSCF code is unaware of?. David. On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:. > Hello Francesco.; > I don't quite understand you. The only matrix determine orbital; > coefficients is [MO] section data of the MOLDEN file and different; > determinants have only different occupation numbers of there orbitals.; > I only sort MO orbitals by energy if required before feed it into CASINO.; >; > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > hours when I will have access to the server.; >; > But you can also create these files easily from my inputs or you can talk; > about some other matrices.; >; > Best, Vladimir.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331884804:779,energy,energy,779,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331884804,1,['energy'],['energy']
Energy Efficiency,"Michał Hapka's (JCP 2012) dev molpro code with SAPT0(UKS), which can be force to run CPUHF, but it would be a comparison with code without density fitting. I had these results laying around, with larger than usual fitting basis set. ```python; import time; import psi4. geometry = """"""; 0 1; O 0.0000 0.00000 3.175060; H 0.0000 0.75750 2.587994; H 0.0000 -0.75750 2.587994; --; 0 2; O 0.0000 0.00000 0.000000; O 0.0000 1.32501 0.000000; H 0.0000 -0.22470 -0.973420. units angstrom; no_reorient; no_com; symmetry c1; """""". BASIS = ""aug-cc-pvdz""; MEMORY = ""20000 MB""; THREADS = 4. psi4.set_memory(MEMORY); psi4.core.set_num_threads(THREADS); psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""mem_df"",; ""stability_analysis"": ""follow"",; ""d_convergence"": 1e-10,; ""e_convergence"": 1e-10,; ""guess"": ""sad"",; ""basis"": BASIS,; ""df_basis_sapt"": ""aug-cc-pv5z-ri"",; ""df_basis_scf"": ""aug-cc-pv5z-jkfit"",; }; ). def compute_s2():; time_start = time.time(); dimer = psi4.geometry(geometry); psi4.energy(""sapt0"", molecule=dimer). if __name__ == ""__main__"":; compute_s2(); ```. run on top of `2d342fe`. ```shell; SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]; Elst10,r -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]. Exchange 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10(S^2) 2.18871598 [mEh] 1.37344002 [kcal/mol] 5.74647303 [kJ/mol]. Induction -0.46899705 [mEh] -0.29430009 [kcal/mol] -1.23135159 [kJ/mol]; Ind20,r -0.81555155 [mEh] -0.51176632 [kcal/mol] -2.14123029 [kJ/mol]; Exch-Ind20,r 0.51152243 [mEh] 0.32098517 [kcal/mol] 1.34300196 [kJ/mol]; delta HF,r (2) -0.16496793 [mEh] -0.10351894 [kcal/mol] -0.43312325 [kJ/mol]. Dispersion -1.62383455 [mEh] -1.01897156 [kcal/mol] -4.26337702 [kJ/mol]; Disp20 -1.79467532 [mEh] -1.12617576 [kcal/mol] -4.711",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624:1018,energy,energy,1018,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624,1,['energy'],['energy']
Energy Efficiency,"Most (83%) fail. I've been using tu1 and scf5 in particular. Of all the test cases, only mrcc-ccsdt, mrcc-ccsdt_q_, psimrcc-pt2, cc36, cc55, dcft[12348], docs-*, fd-freq-energy, fd-freq-gradient, matrix1, mints[23459], mcscf1, mcscf3, mom, mp2-grad1, omp2-1, omp2-grad1, props1, psithon1, various pywraps, rasci-h2o, rasscf-sp, pubchem1, scf[34], zaptn-nh2 _do_ pass. And that's _with_ the aforementioned commenting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198629513:170,energy,energy,170,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198629513,1,['energy'],['energy']
Energy Efficiency,"Moving the finite-difference code into Python seems like a good idea. I'm sure it could be much cleaner. For geometry optimization purposes, one only ever really needs cartesian Hessian -> internal coordinate Hessian. This capability is in the C++ and also now in the Python optking - including the gradient.derivative B term (with the derivative-B matrix elements computed analytically). I think that the challenge I ran into (long ago) in the referenced commented-out code in generating a cartesian Hessian using a finite-difference derivative B matrix for this term was in the Sayvetz/Eckart conditions. The rotations/translations are projected out (now by cdsalc) for the original, undisplaced geometry - but then will not be exactly so at the displaced geometries. I don't recall if my motivation for using finite-difference derivative-B elements at the time was for reduced computational expense, because the analytic derivative-B elements were not yet coded, or to try to avoid discontinuity problems in the derivative formulas. The f-d option might be a good capability to have; I'm not sure offhand if it is worth doing. On the coordinate transformation of course Wesley Allen is the guru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-352449546:872,reduce,reduced,872,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-352449546,1,['reduce'],['reduced']
Energy Efficiency,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:799,efficient,efficient,799,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,2,['efficient'],['efficient']
Energy Efficiency,"My guess is that the performance would be better with fewer threads, since too much parallellization can hurt performance. The 50 Hartree difference in energy suggests that the compilation on Summit is not good. Did you run the Psi4 test suite?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965,1,['energy'],['energy']
Energy Efficiency,"My guess is that you are only allowing contributions when both basis functions are on the same center which removes the density where basis functions are on different centers. ```; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""cc-pVDZ"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-14}). method = ""PBE""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()); Ca = np.array(wfn.Ca()). # Grab objects; basis = wfn.basisset(); Vpot = wfn.V_potential(); points_func = Vpot.properties()[0]. center = 2. for center in range(3):; # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()); nlocal_basis = lpos.shape[0]. oncenter = np.array([basis.function_to_center(x) == center for x in lpos]); lpos = lpos[oncenter]. # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :nlocal_basis]; phi = phi[:, oncenter]. # Build a local density; localDa = Da[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(center, nelectrons); ```. ```; 0 7.59001168019781; 1 0.5717653447775689; 2 0.5717641193430182; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963:588,energy,energy,588,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963,1,['energy'],['energy']
Energy Efficiency,"My thoughts on the questions:; > How much validation do we want?. I would think that input would need to be validated always as the source is unknown, and output should be validated as part of the test suite, but then does not need to be validated at run-time before they are returned since (ideally) the test-suite ensures that our output jsons always adhere to the schema. Is there a best practice followed by applications using JSON APIs? For example does the JSON ""consumer"" always hold responsibility for checking that the object received is valid, or is it up to the JSON ""producer"" to ensure that objects are valid before sending them? . >A full test suite should like come from the schema itself?. Not sure what you mean here. Should the schema project provide functionality to validate objects that can be used by applications adhering to the schema to test that their JSON generating functions are generating valid objects? That would be great, and would reduce the amount of work that needs to be done by devs of individual QC packages to adopt the interface. > How we will we handle extra psi vars? Is the current setup sufficient.; If the schema allows for extra/arbitrary fields somewhere, we could provide all psivars/arrays there. If not then I guess we can just add handling of additional psivars in the future as they apply to new revisions of the schema?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-384995562:965,reduce,reduce,965,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-384995562,1,['reduce'],['reduce']
Energy Efficiency,"My understanding is that there are two issues:; 1. All correlated densities are written to ""CC Density"". The reference Lori linked (http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm) says there are separate density sections for MP2, CI, and CC. Susi said it's adequate for the correlated density to be written to one of the three. Forum posters want the densities sent to the ""proper"" place. I don't know whether the current behavior is adequate for Gaussian or not, but I can easily believe this would confuse some other program that consumes FCHK files. I am not convinced that this is an aesthetic issue and that FCHK is ""undefined"" in this regard. Again, would it be possible to use the `name` attribute of a wavefunction to figure out the right density title?; 2. Sometimes a correlated wavefunction displays as having a ""density"" which is really the SCF density (http://forum.psicode.org/t/density-labels-in-fchk-files/1445/3) and sometimes the correlated density overwrites the reference density (http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532/13). Issue #1478 mentions this but doesn't go into details. In particular, I'm bothered by the fact that forum users report CC density does not override, but Susi reports that CC density does override. The difference is probably that Susi ran a property computation, but the forum user may have just run an energy computation. This part should be moved to #1478, with a caveat that whoever fixes this should check whether it fixes FCHK problems or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631:1413,energy,energy,1413,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631,1,['energy'],['energy']
Energy Efficiency,"NW-Chem. ```; closed-shell vwn_3 Total DFT energy = -76.407526614389; closde-shell vwn_1_rpa (def.) Total DFT energy = -76.444577160243; open-shell vwn_3 Total DFT energy = -75.940741067166; open-shell vwn_1_rpa (def.) Total DFT energy = -75.974154693676; ```. Psi4. ```; closed-shell VWN3RPA_C -76.4445772372 # matches NW closed VWN_1_RPA; closed-shell VWN5RPA_C -76.4445772372 # """"; closed-shell VWN3_C -76.4075266923 # matches NW closed VWN3; closed-shell VWN5_C -76.4075266923 # """". open-shell VWN3RPA_C -75.9741548527 # matches NW open VWN_1_RPA; open-shell VWN5RPA_C -75.9744079442; open-shell VWN3_C -75.9404785496; open-shell VWN5_C -75.9407528036 # ~matches NW open VWN_3; ```. Conditions. ```; aug-cc-pvdz. #0 1 # closed; 1 2 # open; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; ```. Summary; Looks like psi's b3lyp3 should remain with `VWN3RPA_C` and its b3lyp5 should use `VWN5_C` in order to match NW-Chem with both open- and closed-shell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209252377:43,energy,energy,43,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209252377,4,['energy'],['energy']
Energy Efficiency,"Nevermind:; ```; molecule {; 0 1; H 0.43774 1.07383 -0.88985; O -0.04657 -0.75634 0.00000; H 0.86440 -1.05180 0.00000; }. set basis pcseg-1; set reference rhf; set s_tolerance 1e-5; set guess sad; scf_en, scf_wfn = energy('scf', return_wfn=True); fchk(scf_wfn, ""scf.fchk""); ccsd_en, ccsd_wfn = properties('ccsd', properties=['dipole'], return_wfn=True, ref_wfn=scf_wfn); fchk(ccsd_wfn, ""ccsd.fchk""); ```; shows that the density matrix **does** change from SCF to CCSD. Now, I would need a function in the Wavefunction class that would get me the SCF density matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-454119809:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-454119809,1,['energy'],['energy']
Energy Efficiency,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1046,energy,energy,1046,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294,3,['energy'],['energy']
Energy Efficiency,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121080590:169,energy,energy,169,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590,2,['energy'],['energy']
Energy Efficiency,"No reason it needs to be 'roa'. The point is that the code which executes; right now when one selects 'roa' is already doing the IR intensities; correctly. If we otherwise have IR intensities working, then just ignore; this post. I did MP2 because Spartan and Psi could. Presumably with the; new CCSD gradient with fields check-in last weekend, the CCSD intensities; would work too, but I haven't checked that. The input file could certainly; be simplified, including trying to eliminate some of the restrictions and; seeing if there is any impact on the IR intensities. I thought it might be; helpful if someone else would like to start from that point. On Mon, Nov 27, 2017 at 9:22 AM, Lori A. Burns <notifications@github.com>; wrote:. > @psi-rking <https://github.com/psi-rking>, great, thanks for the; > prototype. Maybe put your post at #402; > <https://github.com/psi4/psi4/issues/402> and mention it in the newdev; > slack channel. Also,; >; > - is there anything particular to MP2 or is that just what you tested; > against?; > - general fyi is that there's multi-QC-package vib outputs in the; > isotope-1 test cases that also may have some intensities; > - how rigorous is that c1/no_com/no_reorient req. in your input file.; > Absolutely required to get the right charge origin? Or could we run with; > symmetry if we knew how to transform the Hessian or perturbation vectors; > into better frame? Is it different for charged species?; > - why ""roa""? Just because it brings dipole derivatives for free?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/347#issuecomment-347215160>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMMsKLuYghtYIPsfAYOmbk9WBCBXks5s6tPSgaJpZM4II2n7>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347#issuecomment-347240852:1275,charge,charge,1275,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347240852,4,['charge'],"['charge', 'charged']"
Energy Efficiency,"No rush. I've put off doing this for at least 10 years :), and I'm; swamped. I think I've convinced myself your scheme will work after all; (since the derivative B matrix for a COM displacement coordinate is zero).; However, one doesn't need 3N-3 gradients, because there are 3 rotational; degrees for which the energy is invariant. How many programs like C4; exploit this I couldn't say. Ultimately, might be nice to have it either; way. 3 more gradients, or else N_atoms^2 * small matrix operation. --; Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Thu, Jan 18, 2018 at 5:08 PM, Lori A. Burns <notifications@github.com>; wrote:. > I'd like to, @psi-rking <https://github.com/psi-rking>, but I really; > don't dare take up anything else until after ACS. Actually seeking the; > minimal stuff to do before sending pyvib2 to general review.; >; > Thanks for the notes. It's a very user-knowledge view, but I'm not; > understanding your ""don't have to do the extra displacements, vs. the; > FD_PROJECT keyword from Cfour; > <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>.; > Different strategies?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/884#issuecomment-358812718>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTFqGHSAeT4cqjgXz_oF86JmR_ccMks5tL87bgaJpZM4REtHr>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-358814330:312,energy,energy,312,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-358814330,1,['energy'],['energy']
Energy Efficiency,No worries. I quoted the manual above. The external charge unit coordinates should change according to the coordinates in the input yes. . The output seems inconsistent to the manual statement.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625236495:52,charge,charge,52,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625236495,1,['charge'],['charge']
Energy Efficiency,"No, the same compound:. ```; molecule LiF {; 0 1; Li; F 1 1.5; }. set {; basis cc-pv5z; df_scf_guess false; freeze_core false; }; set_memory(32000000000). energy('ccsd(t)'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467161493:155,energy,energy,155,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467161493,1,['energy'],['energy']
Energy Efficiency,"Not so keen on extra psivars. Just detangling how `DFT TOTAL ENERGY`/`DFT FUNCTIONAL TOTAL ENERGY` or `SAPT EXCH-IND22 ENERGY`/`SAPT EXCH-IND20,R ENERGY` are different is enough without considering aliasing. And then we'd have to consider same for options. And they all have to fit through the [math](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/qcdb/psivardefs.py). Not adamant, if everyone likes the idea, but not in favor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253959628:61,ENERGY,ENERGY,61,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959628,4,['ENERGY'],['ENERGY']
Energy Efficiency,"Not that I can tell. It's key to note that it did not re-use the T2 amplitudes, as those are far more important in the correlation procedure. I'm sorry for the trouble, but restarts are one of the trickiest parts of the code because, if not done correctly, they can make the convergence even slower. ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 8, 2013, at 11:20 AM, sbart76 notifications@github.com wrote:. > I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:; > ; > ```; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; > 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; > 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; > 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; > 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; > 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; > 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; > 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; > 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; > 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; > 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; > 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; > 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; > 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; > 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; > 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.07295",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089575:750,Energy,Energy,750,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089575,1,['Energy'],['Energy']
Energy Efficiency,"Not that I'm aware of. There are three reasons somebody might be tempted to use a manual `compute_gradient` call.; 1. _Method developer reason_. You are a plugin developer and don't know you can edit `proc_table` to tell `gradient` how to run for your new method. Not a good reason because you actually can.; 2. _Method developer reason_. You are writing a gradient method and want your gradient function to enter the C-code to do your energy, return to the driver, then re-enter the C-code to do your gradient. This is the best reason I've come up with, and while I'm sympathetic, I just don't think it's worth the danger of exposing this function to completely general Python use. The gradient machinery should only ever be called after your energy computation finishes.; 3. _User reason_. You want to run some additional commands between your energy and your gradient computation. I just can't imagine a use case for this _other than_ bypassing some sanity check. There isn't a case where separating the calls saves times. Even if there were, shoving intermediates onto a `wfn` only works for SCF (not sure about general DFT functionals). Even MP2 gradient theory needs intermediates too large to store on the `wfn`. The best I've come up with is that you're doing SCF, serialize the wavefunction for later analysis, and then decide you want a gradient after that later analysis. But even in that case, the serialized wavefunction has the converged orbitals, so just use `gradient`. I would expect minor computational overhead for the energy step. (I suppose there is the cost of re-building the TEI?). Since this would affect Forte and heads off a possible bug in relativistic computations, it's probably worth asking @fevangelista for input on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209:436,energy,energy,436,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209,4,['energy'],['energy']
Energy Efficiency,"Note that I just tacked on `Wfn.energy_` / `Wfn.variables_[""CURRENT ENERGY""]` syncing as discussed. https://github.com/psi4/psi4/pull/1575/commits/89f6490ef54e419fb181ee19af361550591f1ad4 if you want to re-evaluate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1575#issuecomment-472564147:68,ENERGY,ENERGY,68,https://psicode.org,https://github.com/psi4/psi4/pull/1575#issuecomment-472564147,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183535595:111,energy,energy,111,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Now that I can run some VTune tests myself, there is definitely an efficiency hit from this PR. The explicit copy in the last commit contributes a _lot_ of overhead. If we want to flatten the tuples, this should be done in the index itself, not in the `IndexIterator`. With that commit reverted, we're looking at 62.4 seconds (pre-PR) vs 75.5 seconds (post-PR) for an Mk-MRCCSD(T) single point with 82 basis functions divided into irreps of 53 and 29, in serial. I can give more detailed machine diagnostics if needed, but I think the point is clear. I'll work on getting the speed restored while waiting for reviews on my other live PR. This is a good opportunity to learn about how to make C++ code efficient, at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254:701,efficient,efficient,701,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-640146254,2,['efficient'],['efficient']
Energy Efficiency,"Now that I can see the log, I notice that you're building with AM=5. If you plan to add some CBS tests that need _h_ functions, we should bump the Travis setup. If not, we should reduce Disteli's AM, to speed it up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235419669:179,reduce,reduce,179,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419669,1,['reduce'],['reduce']
Energy Efficiency,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:314,energy,energy,314,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772,8,['energy'],['energy']
Energy Efficiency,"OK, I can confirm it only fails with ATLAS - works fine with refblas. If I run it with `mpirun -n 1`, it does not crash, but the result is bad:. ```; Nuclear Repulsion Energy (a.u.)...................................PASSED; CD-HF Energy (a.u.)...............................................PASSED; CD-OMP2 Total Energy (a.u.): computed value (-129.5432868) does not match (-129.5897884) to 6 decimal places.; ```. If I switch to `mpirun -n 2`, it crashes as indicated before, so that might be a hint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222325997:168,Energy,Energy,168,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222325997,3,['Energy'],['Energy']
Energy Efficiency,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-54483620:124,charge,charges,124,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620,3,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,"OK, from my point of view this one is ready for a review. The old syntax (`freeze_core true/false`) is equivalent to `freeze_core 1/0`, with `1` being positive-charge-aware; it simply un-freezes another full shell in that case. The new syntax of `freeze_core -1/-2/-3` attempts to freeze Nth previous noble gas on each atom, and throws an exception if no valence electrons remain in the fragment (due to charge).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451587094:160,charge,charge-aware,160,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451587094,4,['charge'],"['charge', 'charge-aware']"
Energy Efficiency,"OK, then I suggest that for all cases where we're switching basis sets, we should do a `clean()` - it's done in the CBS routine which is used for `energy()` and `gradient()` (as the CBS routines can handle ""method/basis"" syntax), we might as well do it for `properties()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562043:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562043,1,['energy'],['energy']
Energy Efficiency,"OK. I'm also not sure about the automatic root following bit... If the energy has converged, the Fock gradient *has to* be small, since it is the orbital gradient. This is if you use DIIS. If, however, you use orbital rotation techniques with gradient descent methods, this can happen in case the preconditioning isn't working properly. But even in such cases most chemical models don't cause problems; it's orbital-dependent models that tend to be hairy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-450748956:71,energy,energy,71,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-450748956,1,['energy'],['energy']
Energy Efficiency,ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012:144,adapt,adapt,144,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012,1,['adapt'],['adapt']
Energy Efficiency,Occurs also for automatic counterpoise calculations as reported in the forum: http://forum.psicode.org/t/non-covalent-bond-energy-in-solution-potential-pcmsolver-bug/1896/3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656#issuecomment-670418149:123,energy,energy-in-solution-potential-pcmsolver-bug,123,https://psicode.org,https://github.com/psi4/psi4/issues/1656#issuecomment-670418149,1,['energy'],['energy-in-solution-potential-pcmsolver-bug']
Energy Efficiency,"Of the recent SCF PRs that may have had an impact on SAD and this bug, the relevant one would have been https://github.com/psi4/psi4/pull/2848, I think. In making that PR, I ran into a bug where the code would throw an exception with `SCF_TYPE=MEM_DF` + `SCF_SUBTYPE=INCORE`, even if enough memory was allocated to run in-core. The issue was that there is a point in DFHelper (the `get_core_size()` function) at which the SCF subalgorithm is determined via `AO_core()`, before the memory is actually allocated to the JK object. Some of the commits in https://github.com/psi4/psi4/pull/2848 (specifically, commits e8f8bdad573f43aaf1a1eca5871606b29a77ae50 and 3d3f138eb53e3ee4abe8b8c8d23ad6e457fa68ef) deal with fixing this bug. If it was the SCF PRs that fixed the cc44 bug, it is likely that range of commits in https://github.com/psi4/psi4/pull/2848.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576#issuecomment-1540856066:302,allocate,allocated,302,https://psicode.org,https://github.com/psi4/psi4/issues/2576#issuecomment-1540856066,2,['allocate'],['allocated']
Energy Efficiency,"Oh right, the issue is that due to `freeze_core = True`, there is only one active electron. So yeah, it would be nice if MP2 did not crash but returned the HF energy, since the MP2 correction is zero.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2976#issuecomment-1573525851:159,energy,energy,159,https://psicode.org,https://github.com/psi4/psi4/issues/2976#issuecomment-1573525851,1,['energy'],['energy']
Energy Efficiency,"Oh since I mentioned gradients in the title. When I was running some optimizations, gradient behavior did match that of the energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068:124,energy,energy,124,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068,1,['energy'],['energy']
Energy Efficiency,"Oh wow, I had no idea there were already so many moving parts or I wouldn't have suggested it. I don't have any strong opinion, but I think `ENERGY` seems like the more consistent label.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253961421:141,ENERGY,ENERGY,141,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253961421,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Oh, I see its only if its cast and no other scenario. @bwb314 Can you add a *single* cast to `tests/dftd3/energy/input.dat`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/769#issuecomment-316857100:106,energy,energy,106,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316857100,1,['energy'],['energy']
Energy Efficiency,"Ok I got the following test failures:. ```; 252:nbody-convergence; 306:psimrcc-ccsd_t-4; 420:psi4numpy-cphf; 421:psi4numpy-dfmp2; 422:psi4numpy-rhf; 423:psi4numpy-rhf-gradient; 424:psi4numpy-rhf-hessian; 425:psi4numpy-fci; 429:python-energy; 430:python-curve; 431:python-pubchem; 432:python-mints9; 433:python-mints2; 434:python-cc54; 435:python-3-index-transforms; 436:python-mints13; 437:python-cc_amps; 438:json-schema-1-energy; 439:json-schema-1-ghost; 440:json-schema-1-orient; 441:json-schema-1-throws; 442:json-schema-1-gradient; 443:json-schema-1-properties; 444:gcp-pbeh3c; 445:gcp-hf3c; 446:gcp-hf3c-gradient; 447:gcp-hf3c-hessian; 448:gcp-dft-custom-hybrid; ```. And now my problem is on the import psi4. I tried adding the correct PYTHONPATH as follows:. ```; export PATH=/usr/local/bin:$PATH # python interpreter; export PATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin:$PATH # psi4 executable; export PYTHONPATH=/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib//:$PYTHONPATH # psi4 pymodule; ```. But I get a new kind of error. Any idea how to fix it? :. ```; >>> import psi4; Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Expected in: flat namespace; in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); Im",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796:234,energy,energy,234,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614773796,2,['energy'],['energy']
Energy Efficiency,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:364,charge,charged,364,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,2,['charge'],['charged']
Energy Efficiency,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:717,energy,energy,717,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611,3,['energy'],['energy']
Energy Efficiency,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:578,reduce,reduced,578,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965,2,['reduce'],['reduced']
Energy Efficiency,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:919,energy,energy-large,919,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,2,['energy'],['energy-large']
Energy Efficiency,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-321913106:649,energy,energy-wise,649,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106,1,['energy'],['energy-wise']
Energy Efficiency,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:317,energy,energy,317,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Ok, that was an interesting problem for this version of psi4 ! I now got the very last one and things work fine again:. ```; Total Energy Delta E RMS |[F,P]| ; ; @RHF iter SAD: -1.10951830992328 -1.10952e+00 0.00000e+00 ; @RHF iter 1: -1.42989087630227 -3.20373e-01 2.63944e-02 DIIS; @RHF iter 2: -1.48669699030023 -5.68061e-02 1.49695e-02 DIIS; @RHF iter 3: -1.52194618795963 -3.52492e-02 1.34968e-02 DIIS; @RHF iter 4: -1.53906330108634 -1.71171e-02 5.44189e-03 DIIS; @RHF iter 5: -1.54087887085299 -1.81557e-03 2.40827e-03 DIIS; @RHF iter 6: -1.54117109557693 -2.92225e-04 1.16803e-03 DIIS; @RHF iter 7: -1.54123744472211 -6.63491e-05 5.44231e-04 DIIS; @RHF iter 8: -1.54125234553558 -1.49008e-05 2.21654e-04 DIIS; @RHF iter 9: -1.54125494714724 -2.60161e-06 7.30916e-05 DIIS; @RHF iter 10: -1.54125524201882 -2.94872e-07 1.85602e-05 DIIS; @RHF iter 11: -1.54125526151990 -1.95011e-08 3.60860e-06 DIIS; @RHF iter 12: -1.54125526228451 -7.64613e-10 1.18266e-07 DIIS; Energy and wave function converged. ; ; SO Integrals not on disk. Computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest singlet (RHF->RHF) stability eigenvalues:-; A 0.118946 A 0.152195 A 0.527951 A 0.790910 ; ; Lowest triplet (RHF->UHF) stability eigenvalues:-; A -0.429230 A -0.408687 A 0.114615 A 0.215652 ; ```. Thank you for your help ! I'll close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623974761:131,Energy,Energy,131,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623974761,2,['Energy'],['Energy']
Energy Efficiency,"Ok, the problem arises because in `psivardefs.py` the `SAPT0 IND ENERGY` variable is always defined in terms of coupled induction. I remember we had discussions about that at the time. Since usapt0.cc does not put uncoupled induction in the coupled induction variables, the `SAPT0 IND ENERGY` is not defined properly any more. Possible solution: define uncoupled variants of the variables in `psivardefs.py`, and when we create `SAPT IND ENERGY` (in `proc.py`) we copy `SAPT0 IND,U ENERGY` value if `SAPT0 IND ENERGY` is not defined. ; - Would that work ?; - Is there a way to check whether a Psivar is defined other than checking if it is exactly 0 ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364679625:65,ENERGY,ENERGY,65,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364679625,5,['ENERGY'],['ENERGY']
Energy Efficiency,"Ok, this was changed in Nov 2019 in #1351 (unmerged) to ""extern object units are bohr, not whatever the Molecule was."" And in that branch Mol units ang/bohr + extern units bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total En",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:382,energy,energy,382,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"Okay, I got something to run, but it's getting inf's and nan's. Looks like built-in basis sets cause errors, while with custom ones the calculation runs, but something weird happens. The matrices look alright: the Cholesky procedure builds MOs, the Fock matrix is built and looks fine, but in the next iteration the density and Fock matrices are full of NaNs....; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.05,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.05]); activate(mol); set s_orthogonalization partialcholesky; set df_scf_guess false; set scf_type direct; set basis ugbs; #set basis cc-pvdz # fails with SOBasis: shell changed; #set basis cc-pvdz-decon # fails with SOBasis: shell changed; set debug 10; set guess core; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279:867,energy,energy,867,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595998279,1,['energy'],['energy']
Energy Efficiency,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290#issuecomment-189916188:77,energy,energy,77,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188,2,['energy'],['energy']
Energy Efficiency,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-326351281:154,Energy,Energy,154,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281,2,['Energy'],['Energy']
Energy Efficiency,"On my computer, there's no problem with huge integers (edit: yes there is). Also, that bug is unrelated to the algorithm: I don't use the Cholesky decomposed overlap, the only thing that matter are the pivot indices. So, looks like the problem is that in the 5th symmetry block, the Windows build picks up the 3rd SO basis function, while my build picks up the 12th basis function, thus leading to a different energy. The other blocks are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571256793:410,energy,energy,410,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571256793,1,['energy'],['energy']
Energy Efficiency,"On my wishlist is the addition of the D3(ABC) term (`dftd3 -abc`). I haven't really gone through all the changes, but it should now be easier to add now, right?. Envisioning `energy('pbe-d3bjabc')`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-416132986:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-416132986,1,['energy'],['energy']
Energy Efficiency,"On the `-std=gnu++11`, we're scheduled to suppress that soon with [this line](https://github.com/psi4/psi4/pull/627/files#diff-af3b638bc2a3e6c650974192a53c7291R176), as the issue came up with cmake >=3.6 and Intel compilers. I see what you mean about return type of [`std::bind`](http://en.cppreference.com/w/cpp/utility/functional/bind) being deprecated in c++17.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-283067827:29,schedul,scheduled,29,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283067827,1,['schedul'],['scheduled']
Energy Efficiency,"On the `clean` issue, I don't see a change in behavior from your PR. The below (on master) also requires the intervening `clean()` to avoid a PSIO error. Maybe the rules of how much the user should need to call clean need rethinking, but at least they are steady (one used to have to call it after practically everything). ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 2 0 0; }. set basis cc-pvdz; sapt_global = energy(""sapt2+(3)"", molecule=ne2). clean() # PSIO error without this line. # these two calls are equivalent; #cbs_string = energy(""mp2/6-311++G** + D:ccsd/6-311+G""); cbs_string = energy(cbs, corl_wfn='mp2', corl_basis='6-311++G**', delta_wfn='ccsd', delta_basis='6-311+G'); compare_values(-257.50097969, cbs_string, 5, 'cbs'); ```. On the caspt2, runs fine for me, too. If you want to see the error try [looking in the testing log file](http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput). But it's certainly outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379830469:414,energy,energy,414,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379830469,3,['energy'],['energy']
Energy Efficiency,"On the one hand, for cases like SAPT/auto-CP/etc, I'd be fine with just disabling `num_frozen_docc` -- it's clearly inappropriate in any supersystem calculation where the user knows at the `energy` call that it's going to run sub-systems. But going upthread back to the original issue, there's use-cases like `MBIS_VOLUME_RATIOS` that are an add-on to what would otherwise be a valid standalone calculation to use `num_frozen_docc` with (a monomer calc), and there's still the question of what should happen there. You can't just guess based on calc name, because you don't know if the user is going to call `oeprop` down-stream. Disabling `num_frozen_docc` for any calculation where this *could* happen would effectively ban the keyword. . A reasonableness check, or a good guess, could be inserted before any calculation done on a new mol if `num_frozen_docc` is set in the global scope -- with a warning. Or simply error out if a new mol is calculated without `num_frozen_docc` having been updated (not sure how reasonable that is?). . This is but one user's thoughts, of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916:190,energy,energy,190,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916,2,['energy'],['energy']
Energy Efficiency,"On the test suite error, it's a good idea to turn convergences way down (e.g., 10 or 12) to compute the reference values, then remove conv settings for the final test case and do the compare_values check to the number or fewer decimals than the default for the calc type (energy, gradient, etc.). You're checking the latter to 6, so probably better ref vals will do the trick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136:272,energy,energy,272,https://psicode.org,https://github.com/psi4/psi4/pull/1346#issuecomment-437675136,1,['energy'],['energy']
Energy Efficiency,"One feature I'd like to add (later) is the ability to do something like:. ```; my_new_method = { ""name"": ""my_func"", ... functional_dictionary ... }; my_superfunctional = add_functional_from_dictionary(my_new_method); energy(""my_func""); ```; That way one can fit dispersion parameters or benchmark functionals in a simple loop... However, I think it is a bit of work, so I'd prefer to leave that for later. The PR can be pulled in as is from my point of view.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-376409454:217,energy,energy,217,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-376409454,2,['energy'],['energy']
Energy Efficiency,"One more tiny bug:; ```; molecule {; 0 2 ; H 0.0 0.0 0.000000; H 0.0 0.0 0.500000; H 0.0 0.0 1.000000; }. set basis STO-3G; set reference rohf; set ci_maxiter 100; set scf_type pk; set fail_on_maxiter false; set nat_orbs true; ci_e, ci_wfn=energy('fci', return_wfn=True). # Rerun to get true solution; set num_roots 3; set e_convergence 1e-10; set r_convergence 1e-8; energy('fci', ref_wfn=ci_wfn); ```; prints out; ```; $ psi4; (H0block_setup): Can't find CI block!; (H0block_setup): Can't find CI block!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275884420:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275884420,2,['energy'],['energy']
Energy Efficiency,"One more try... The two RASSCF tests fail because the energy is not invariant with respect to arbitrary rotations of active orbitals. I'll put an if statement that checks if a calculation type is RASSCF. The DFCASSCF test was affected by the new algorithm to compute CI natural orbitals. The new one does not scramble different orbital classes, which is what I suspect happened with the old code. All the entries in the `nov0` array are the same but are sorted differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304748159:54,energy,energy,54,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304748159,1,['energy'],['energy']
Energy Efficiency,"One reason ghosted masses may be nonzero is we didn't want the frame to change btwn a fully real dimer and its counterpoise variants? wouldn't be surprised if sapt relies on this. That brings to mind a question I had on the Hessian analysis of whether frame should be changing upon isotopic substitution. Center of charge frame would solve that but not a frame-change-upon-ghosting issue. Upshot is that some uses require ghost Z be zero (nuclear repulsion energy), some require ghost Z be atomic number (reading off element identity), some require ghost mass be zero (molecular mass), some require ghost mass be real (frame stability for dimer subsetting). So may as well provide a Mol function with a required argument to choose each case (like ACS & DGAS recently imposed for nuclear_repulsion_energy) to make sure consumers are aware of the differences and are using the right one. Python export can defuault to something sensible (hopefully the current behavior).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363484400:315,charge,charge,315,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363484400,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"One smart feature would be to check whether the energy decreases when changing configurations. This could be a configurable setting in the solver. That is, when the Aufbau principle would lead to changing the configuration, the program should check whether the new occupations lead to a lower energy with the current orbitals than the old occupations with the same orbitals. Although this requires one additional energy evaluation, it probably saves quite a bit of iterations by preventing switches to less-good occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-879347426:48,energy,energy,48,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-879347426,3,['energy'],['energy']
Energy Efficiency,"One ugly way around this issue:. ```; set {; fail_on_maxiter false; maxiter 0; }. # Note: my_wfn.npy is a locally saved, previously written wfn file; e, wfn = energy('scf', return_wfn=True, restart_file='my_wfn') ; gradient('scf', ref_wfn=wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2713#issuecomment-1240833143:159,energy,energy,159,https://psicode.org,https://github.com/psi4/psi4/issues/2713#issuecomment-1240833143,1,['energy'],['energy']
Energy Efficiency,"Oops, I missed your comment. The old `addBasis` still works the same way, and the normalization associated with it is appropriate for external basis functions derived from density fitting. In QM/MM we normally want some Gaussians at different points in space, and in this case we want unit normalization so that the charges, dipoles, etc. specified don't need to be adjusted. Essentially there are two use cases, and I just added a new one here. Not really a bug fix, but also harmless if we want it in 1.4 - entirely up to you. It gives us a backend that can be tested for the multipole interface at least :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219:316,charge,charges,316,https://psicode.org,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219,1,['charge'],['charges']
Energy Efficiency,Optking's powers of alchemy are [known](https://github.com/psi4/psi4/issues/1082). Lori could say more about the specifics of how ECPs are causing trouble.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114#issuecomment-409361281:10,power,powers,10,https://psicode.org,https://github.com/psi4/psi4/issues/1114#issuecomment-409361281,1,['power'],['powers']
Energy Efficiency,"P.S. The following two similar inputs do work, but correspond to different calculations, I assume:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; basis_relativistic ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. and . ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; reference uhf; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487622646:222,energy,energy,222,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487622646,2,['energy'],['energy']
Energy Efficiency,"Pardon my asking and not looking at the code and `timer.dat`s, but right now we always calc the ind-exch(s^2) and disp-exch(s^2) and optionally the (s^inf) variants if requested by `DO_IND_EXCH_SINF` and/or `DO_DISP_EXCH_SINF`, right?. This arrangement is great for probing the terms, but does it make sense to define a route whereby the s^2 terms are skipped, the s^inf terms computed instead and `energy(sapt0)` returns the inf totals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252:399,energy,energy,399,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252,1,['energy'],['energy']
Energy Efficiency,Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 sec; Start 211: mcscf3; 394/411 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 409: skeletonscf; 395/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 397/411 Test #354: tu2-ch2-energy ................... Passed 0.86 sec; Start 216: mints5; 398/411 Test #334: scf3 ............................. Passed 0.73 sec; Start 208: matrix1; 399/411 Test #209: mcscf1 ........................... Passed 0.69 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:36351,energy,energy,36351,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,Passed 2.37 sec; Start 104: decontract; 367/413 Test #354: stability2 ....................... Passed 1.07 sec; Start 290: psimrcc-ccsd_t-2; 368/413 Test #382: psi4numpy-cphf ................... Passed 1.29 sec; Start 190: fci-tdm; 369/413 Test #123: dfccdl1 .......................... Passed 1.45 sec; Start 223: mints9; 370/413 Test #358: scf-response1 .................... Passed 2.27 sec; Start 384: psi4numpy-rhf; 371/413 Test #120: dfcasscf-fzc-sp .................. Passed 1.74 sec; Start 355: tu1-h2o-energy; 372/413 Test #224: mints10 .......................... Passed 1.32 sec; Start 347: dfep2-2; 373/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 1.56 sec; Start 330: scf-upcast-custom-basis; 374/413 Test #190: fci-tdm .......................... Passed 0.85 sec; Start 351: sapt-sf1; 375/413 Test #313: rasci-h2o ........................ Passed 1.13 sec; Start 222: mints-helper; 376/413 Test #132: dfmp2-2 .......................... Passed 1.70 sec; Start 356: tu2-ch2-energy; 377/413 Test #329: scf-guess-read1 .................. Passed 1.55 sec; Start 8: castup1; 378/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 1.46 sec; Start 332: scf-bs; 379/413 Test #384: psi4numpy-rhf .................... Passed 0.97 sec; Start 216: mints3; 380/413 Test #380: mints12 .......................... Passed 1.30 sec; Start 336: scf3; 381/413 Test #104: decontract ....................... Passed 1.30 sec; Start 300: pubchem2; 382/413 Test #355: tu1-h2o-energy ................... Passed 1.26 sec; Start 212: mcscf2; 383/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.63 sec; Start 213: mcscf3; 384/413 Test #356: tu2-ch2-energy ................... Passed 0.86 sec; Start 218: mints5; 385/413 Test #330: scf-upcast-custom-basis .......... Passed 1.54 sec; Start 241: numpy-array-interface; 386/413 Test #351: sapt-sf1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: optio,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:35433,energy,energy,35433,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,Passed 339.46 sec; Start 183: fsapt-allterms; 22/413 Test #229: mp2-def2 ......................... Passed 401.24 sec; Start 195: fd-freq-energy-large; 23/413 Test #13: cbs-xtpl-alpha ................... Passed 339.68 sec; Start 197: fd-freq-gradient-large; 24/413 Test #59: cc41 ............................. Passed 137.70 sec; Start 280: opt13; 25/413 Test #45: cc29 ............................. Passed 218.43 sec; Start 375: dft-custom-mgga; 26/413 Test #61: cc43 ............................. Passed 139.20 sec; Start 71: cc52; 27/413 Test #46: cc3 .............................. Passed 1535.28 sec; Start 28: cc13c; 28/413 Test #184: isapt1 ........................... Passed 416.48 sec; Start 283: opt-irc-2; 29/413 Test #114: dcft6 ............................ Passed 212.86 sec; Start 361: tu6-cp-ne2; 30/413 Test #306: pywrap-checkrun-rhf .............. Passed 1024.50 sec; Start 98: cisd-opt-fd; 31/413 Test #307: pywrap-checkrun-rohf ............. Passed 516.10 sec; Start 322: sapt6; 32/413 Test #11: cbs-delta-energy ................. Passed 271.51 sec; Start 92: cepa-module; 33/413 Test #112: dcft4 ............................ Passed 1638.41 sec; Start 263: omp3-5; 34/413 Test #28: cc13c ............................ Passed 116.00 sec; Start 388: cookbook-rohf-orb-rot; 35/413 Test #308: pywrap-checkrun-uhf .............. Passed 885.27 sec; Start 106: dcft-grad2; 36/413 Test #71: cc52 ............................. Passed 147.28 sec; Start 160: dfscf-bz2; 37/413 Test #375: dft-custom-mgga .................. Passed 190.68 sec; Start 262: omp3-4; 38/413 Test #283: opt-irc-2 ........................ Passed 158.88 sec; Start 27: cc13b; 39/413 Test #263: omp3-5 ........................... Passed 76.35 sec; Start 261: omp3-3; 40/413 Test #92: cepa-module ...................... Passed 99.34 sec; Start 146: dfomp2-grad2; 41/413 Test #98: cisd-opt-fd ...................... Passed 156.92 sec; Start 31: cc15; 42/413 Test #106: dcft-grad2 ....................... Passed 99.47 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:3358,energy,energy,3358,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['energy'],['energy']
Energy Efficiency,Passed 571.32 sec; Start 42: cc27; 14/411 Test #394: python-vibanalysis ............... Passed 966.42 sec; Start 76: cc7; 15/411 Test #40: cc25 ............................. Passed 480.63 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 484.30 sec; Start 181: fsapt-allterms; 17/411 Test #38: cc23 ............................. Passed 495.58 sec; Start 193: fd-freq-energy-large; 18/411 Test #42: cc27 ............................. Passed 441.98 sec; Start 195: fd-freq-gradient-large; 19/411 Test #76: cc7 .............................. Passed 452.44 sec; Start 278: opt13; 20/411 Test #305: pywrap-checkrun-rohf ............. Passed 627.45 sec; Start 111: dcft5; 21/411 Test #110: dcft4 ............................ Passed 890.57 sec; Start 145: dfomp2-grad3; 22/411 Test #195: fd-freq-gradient-large ........... Passed 305.38 sec; Start 240: ocepa-freq1; 23/411 Test #111: dcft5 ............................ Passed 303.53 sec; Start 373: dft-custom-mgga; 24/411 Test #193: fd-freq-energy-large ............. Passed 541.73 sec; Start 112: dcft6; 25/411 Test #373: dft-custom-mgga .................. Passed 188.78 sec; Start 114: dcft8; 26/411 Test #181: fsapt-allterms ................... Passed 611.68 sec; Start 359: tu6-cp-ne2; 27/411 Test #178: fsapt1 ........................... Passed 2082.73 sec; Start 29: cc14; 28/411 Test #112: dcft6 ............................ Passed 211.14 sec; Start 320: sapt6; 29/411 Test #240: ocepa-freq1 ...................... Passed 484.94 sec; Start 155: dfscf-bz2; 30/411 Test #278: opt13 ............................ Passed 786.51 sec; Start 97: cisd-opt-fd; 31/411 Test #145: dfomp2-grad3 ..................... Passed 797.94 sec; Start 183: isapt2; 32/411 Test #320: sapt6 ............................ Passed 170.76 sec; Start 379: cc-module; 33/411 Test #155: dfscf-bz2 ........................ Passed 133.50 sec; Start 13: cbs-xtpl-alpha; 34/411 Test #359: tu6-cp-ne2 ....................... Passed 352.85 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:2480,energy,energy-large,2480,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy-large']
Energy Efficiency,Passed 8.00 sec; Start 200: freq-isotope2; 260/413 Test #99: cisd-sp .......................... Passed 7.83 sec; Start 390: python-curve; 261/413 Test #374: dft-custom-hybrid ................ Passed 9.30 sec; Start 401: json-schema-1-energy; 262/413 Test #134: dfmp2-4 .......................... Passed 5.04 sec; Start 399: json-v11-energy; 263/413 Test #270: opt2-fd .......................... Passed 8.68 sec; Start 143: dfomp2-3; 264/413 Test #89: cepa2 ............................ Passed 3.44 sec; Start 15: cbs-xtpl-freq; 265/413 Test #343: soscf-ref ........................ Passed 5.84 sec; Start 182: fsapt-terms; 266/413 Test #337: scf4 ............................. Passed 7.11 sec; Start 125: dfccsd1; 267/413 Test #390: python-curve ..................... Passed 2.27 sec; Start 372: scf-coverage; 268/413 Test #3: casscf-fzc-sp .................... Passed 4.38 sec; Start 137: dfmp2-grad2; 269/413 Test #297: psithon1 ......................... Passed 4.83 sec; Start 187: fci-h2o; 270/413 Test #401: json-schema-1-energy ............. Passed 2.54 sec; Start 4: casscf-semi; 271/413 Test #399: json-v11-energy .................. Passed 2.20 sec; Start 257: omp2p5-grad1; 272/413 Test #200: freq-isotope2 .................... Passed 4.35 sec; Start 87: cepa0-grad2; 273/413 Test #143: dfomp2-3 ......................... Passed 4.36 sec; Start 186: fci-dipole; 274/413 Test #163: dft-ghost ........................ Passed 8.01 sec; Start 393: python-mints2; 275/413 Test #9: castup2 .......................... Passed 7.47 sec; Start 264: omp3-grad1; 276/413 Test #369: scf-hess1 ........................ Passed 8.45 sec; Start 331: scf-guess-read2; 277/413 Test #125: dfccsd1 .......................... Passed 5.83 sec; Start 253: omp2-grad1; 278/413 Test #372: scf-coverage ..................... Passed 6.09 sec; Start 267: opt1; 279/413 Test #393: python-mints2 .................... Passed 2.54 sec; Start 387: psi4numpy-fci; 280/413 Test #182: fsapt-terms ...................... Passed 7.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:25315,energy,energy,25315,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,Passed 9.61 sec; Start 211: mcscf2; 361/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 3.94 sec; Start 363: x2c3; 362/412 Test #225: molden2 .......................... Passed 14.23 sec; Start 355: tu2-ch2-energy; 363/412 Test #409: skeletonmointegrals .............. Passed 3.09 sec; Start 222: mints9; 364/412 Test #97: cisd-h2o-clpse ................... Passed 3.65 sec; Start 223: mints10; 365/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 3.79 sec; Start 411: skeletonsointegrals; 366/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.36 sec; Start 396: python-mints13; 367/412 Test #189: fci-tdm .......................... Passed 2.50 sec; Start 221: mints-helper; 368/412 Test #391: python-mints9 .................... Passed 1.96 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #362: x2c2 ............................. Passed 3.13 sec; Start 354: tu1-h2o-energy; 370/412 Test #331: scf-bs ........................... Passed 2.33 sec; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:34911,energy,energy,34911,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['energy'],['energy']
Energy Efficiency,"People at the forum have kindly supplied Turbomole and G\* values for further comparison. They are encoded into the test case below, which passes using this PR branch (that reenables b3lyp5 with `VWN5_C`). The open-shell b3lyp5 in psi4 matches turbochem rather better than nwchem. ```; set scf_type pk; set e_convergence 9; set basis aug-cc-pvdz; set dft_spherical_points 590; set dft_radial_points 99. molecule cswater {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. oswater = cswater.clone(); oswater.set_multiplicity(2); oswater.set_molecular_charge(1). e = energy('b3lyp', molecule=cswater); compare_values(-76.444577160243, e, 5, 'clsd-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'). set reference uhf; e = energy('b3lyp', molecule=oswater); compare_values(-75.974154693676, e, 5, 'open-shell: b3lyp (vwn3rpa) vs NWChem (vwn_1_rpa; default)'); compare_values(-75.97415476252, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Turbomole (vwn3)'); compare_values(-75.9741544303, e, 5, 'open-shell: b3lyp (vwn3rpa) vs Gaussian (default)'). set reference rks; e = energy('b3lyp5', molecule=cswater); compare_values(-76.407526614389, e, 5, 'clsd-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'). set reference uks; e = energy('b3lyp5', molecule=oswater); compare_values(-75.940741067166, e, 4, 'open-shell: b3lyp5 (vwn5) vs NWChem (vwn_3)'); compare_values(-75.94075271487, e, 5, 'open-shell: b3lyp5 (vwn5) vs Turbomole (vwn5; default)'); # this one doesn't match quite so well; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209503911:618,energy,energy,618,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209503911,4,['energy'],['energy']
Energy Efficiency,"Please guys, I am still battling with how I can generate potential energy curves for the CF molecule for at 5 excited states. Here's the code I am trying to debug it's error.; import numpy as np; import matplotlib.pyplot as plt; import psi4. def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'rohf',; 'maxiter': 500,; 'restricted_docc': [1, 0, 1, 0],; 'active': [3, 1, 2, 2],; 'mcscf_max_iter': 1000,; 'num_roots': 1,; 'avg_states': [0],; 'avg_weights': [1],; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'guess': 'sad'; }). try:; energy = psi4.energy('scf'); return energy; except Exception as e:; print(f""Error computing ground state energy at bond length {bond_length}: {str(e)}""); return float('nan'). def compute_energies(bond_length, num_states, methods_to_try):; psi4.core.set_output_file('output.dat', False); ; cf_molecule = psi4.geometry(f""""""; 0 2; C; F 1 {bond_length}; symmetry c1; units angstrom; """"""). psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:67,energy,energy,67,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,5,['energy'],['energy']
Energy Efficiency,"Please include either the full input, or a reduced test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749:43,reduce,reduced,43,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749,1,['reduce'],['reduced']
Energy Efficiency,Please note that `libdiis` did not exist when the DIIS code was written in the `cc` modules. Convergence difficulties in `cclambda` are not due to DIIS difficulties but due to the fact that linear equations become poorly conditioned for excited states that are relatively close in energy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589:281,energy,energy,281,https://psicode.org,https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589,1,['energy'],['energy']
Energy Efficiency,"Please try the latest 1.4 release. 61K is the size of the aux basis, 12k basis functions in the orbital basis.; It is still a huge(!) calculation and PSI4 is not optimised to deal with that.; Usually negligible matrices can become large enough that our memory estimates are off.; Maybe the memory of your machine ran out. The aux basis can probably be reduced by 20K functions without loss in accuracy with some smart manipulations of the aux basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216:352,reduce,reduced,352,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216,1,['reduce'],['reduced']
Energy Efficiency,"Posting Dom's very nice summary for easier perusal and searchability. Effective `scf_type df` Testing: `mem_df` & `disk_df`; =====================================================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:226,energy,energy,226,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,4,['energy'],['energy']
Energy Efficiency,"Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2708,energy,energy,2708,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 5 5 0 0 0 0; B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0; B3g 1 1 0 0 0 0; Au 0 0 0 0 0 0; B1u 2 2 0 0 0 0; B2u 2 2 0 0 0 0; B3u 2 2 0 0 0 0; -------------------------------------------------------; Total 14 14 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; Integrals threads: 1; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -122.97213766263802 -1.22972e+02 5.13141e-01; @RKS iter 2: -124.26578841108680 -1.29365e+00 6.24312e-01 DIIS; @RKS iter 3: -128.75874780675335 -4.49296e+00 6.03176e-02 DIIS; @RKS iter 4: -128.79292051117602 -3.41727e-02 3.60017e-03 DIIS; @RKS iter 5: -128.79304881103522 -1.28300e-04 3.68316e-04 DIIS; @RKS iter 6: -128.79305011369129 -1.30266e-06 6.11487e-06 DIIS; @RKS iter 7: -128.79305011405475 -3.63457e-10 1.42312e-08 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.472472 2Ag -1.291608 1B2u -0.442005; 1B3u -0.442005 1B1u -0.442005. Virtual:. 2B1u 1.309754 2B3u 1.309754 2B2u 1.309754; 3Ag 1.759040 4Ag 4.620812 1B1g 4.620812; 1B2g 4.620812 1B3g 4.620812 5Ag 4.620812. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.79305011405475. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:6359,Energy,Energy,6359,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 5 5 0 0 0 0; B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0; B3g 1 1 0 0 0 0; Au 0 0 0 0 0 0; B1u 2 2 0 0 0 0; B2u 2 2 0 0 0 0; B3u 2 2 0 0 0 0; -------------------------------------------------------; Total 14 14 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; Integrals threads: 1; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.05635077157466 -1.23056e+02 5.15651e-01; @RKS iter 2: -123.10132047688978 -4.49697e-02 6.79382e-01 DIIS; @RKS iter 3: -128.77814169956412 -5.67682e+00 1.11592e-01 DIIS; @RKS iter 4: -128.89363525981292 -1.15494e-01 1.11421e-02 DIIS; @RKS iter 5: -128.89481463928649 -1.17938e-03 2.07054e-03 DIIS; @RKS iter 6: -128.89485608871536 -4.14494e-05 8.00321e-05 DIIS; @RKS iter 7: -128.89485614958289 -6.08675e-08 1.05214e-05 DIIS; @RKS iter 8: -128.89485615065263 -1.06974e-09 2.89771e-07 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.509932 2Ag -1.282862 1B3u -0.438441; 1B2u -0.438441 1B1u -0.438441. Virtual:. 2B3u 1.301627 2B2u 1.301627 2B1u 1.301627; 3Ag 1.757418 1B1g 4.636294 1B2g 4.636294; 1B3g 4.636294 4Ag 4.636294 5Ag 4.636294. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.89485615065263. => Energetics <=. Nuclea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:11329,Energy,Energy,11329,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 5 5 0 0 0 0; B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0; B3g 1 1 0 0 0 0; Au 0 0 0 0 0 0; B1u 2 2 0 0 0 0; B2u 2 2 0 0 0 0; B3u 2 2 0 0 0 0; -------------------------------------------------------; Total 14 14 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; Integrals threads: 1; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.06827227634659 -1.23068e+02 5.10480e-01; @RKS iter 2: -124.48927326489800 -1.42100e+00 6.09229e-01 DIIS; @RKS iter 3: -128.81236257833254 -4.32309e+00 6.22777e-02 DIIS; @RKS iter 4: -128.84986583076252 -3.75033e-02 3.18114e-03 DIIS; @RKS iter 5: -128.84995056097870 -8.47302e-05 1.63856e-03 DIIS; @RKS iter 6: -128.84997750974767 -2.69488e-05 1.32063e-04 DIIS; @RKS iter 7: -128.84997753200267 -2.22550e-08 1.18126e-04 DIIS; @RKS iter 8: -128.84997768193202 -1.49929e-07 1.19984e-05 DIIS; @RKS iter 9: -128.84997768349052 -1.55850e-09 7.58989e-06 DIIS; @RKS iter 10: -128.84997768334148 1.49043e-10 1.04995e-05 DIIS; @RKS iter 11: -128.84997768341361 -7.21343e-11 4.72686e-06 DIIS; @RKS iter 12: -128.84997768353034 -1.16728e-10 5.01495e-06 DIIS; @RKS iter 13: -128.84997768351695 1.33866e-11 2.51483e-06 DIIS; @RKS iter 14: -128.84997768351064 6.30962e-12 4.66979e-06 DIIS; @RKS iter 15: -128.84997768347296 3.76872e-11 1.34665e-06 DIIS; @RKS iter 16: -128.849977",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:16309,Energy,Energy,16309,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"Psi4 is primarily a QM program. We have a ""qmmm"" module for adding external charges into a QM calc, http://psicode.org/psi4manual/master/scf.html#external-potentials-and-qm-mm . There's support for single-point calculations of EFP fragments alone or embedded into QM calcs, http://psicode.org/psi4manual/master/libefp.html . And there are a couple pure-MM projects simmering. But right now we don't support any particular MM software packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/341#issuecomment-208966398:76,charge,charges,76,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-208966398,1,['charge'],['charges']
Energy Efficiency,"PyTuple_Type)>::check(_object*) in export_mints.cc.o; boost::python::detail::tuple_base::call(boost::python::api::object const&) in libboost_python-1_57.a(tuple.o); boost::python::detail::register_tuple_pytype_ptr::register_tuple_pytype_ptr() in libboost_python-1_57.a(tuple.o); boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::get_pytype() in libboost_python-1_57.a(pickle_support.o); ""_PyType_GenericAlloc"", referenced from:; boost::python::objects::class_type_object in libboost_python-1_57.a(class.o); ""_PyType_IsSubtype"", referenced from:; boost::python::instance_holder::install(_object*) in libboost_python-1_57.a(class.o); boost::python::objects::find_instance_impl(_object*, boost::python::type_info, bool) in libboost_python-1_57.a(class.o); boost::python::objects::(anonymous namespace)::new_class(char const*, unsigned long, boost::python::type_info const*, char const*) in libboost_python-1_57.a(class.o); boost::python::instance_holder::allocate(_object*, unsigned long, unsigned long) in libboost_python-1_57.a(class.o); boost::python::instance_holder::deallocate(_object*, void*) in libboost_python-1_57.a(class.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ...; ""_PyType_Ready"", referenced from:; boost::python::objects::static_data() in libboost_python-1_57.a(class.o); boost::python::objects::class_metatype() in libboost_python-1_57.a(class.o); boost::python::objects::class_type() in libboost_python-1_57.a(class.o); boost::python::objects::function::function(boost::python::objects::py_function const&, boost::python::detail::keyword const*, unsigned int) in libboost_python-1_57.a(function.o); boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:71160,allocate,allocate,71160,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,2,['allocate'],['allocate']
Energy Efficiency,"Python/ceval.c:4187; #41 0x55e0616ae01b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #42 0x55e0617303c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #43 0x55e0617307c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #44 0x55e0617309c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #45 0x55e0617344b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #46 0x55e0617344b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #47 0x55e0615fd02d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #48 0x7fdb59a14412 in __libc_start_main (/lib64/libc.so.6+0x24412); #49 0x55e0616dde0d (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x1c3e0d). 0x60700011cc20 is located 0 bytes to the right of 80-byte region [0x60700011cbd0,0x60700011cc20); allocated by thread T0 here:; #0 0x7fdb59cac49f in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86; #1 0x7fdb48229e3a in psi::init_int_array(int) /home/raimis/prj/psi4.git/psi4/src/psi4/libciomr/int_array.cc:65; #2 0x7fdb48ee97f2 in psi::IntegralTransform::initialize() /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform.cc:211; #3 0x7fdb48ee65cf in psi::IntegralTransform::IntegralTransform(std::shared_ptr<psi::Wavefunction>, std::vector<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >, psi::IntegralTransform::TransformationType, psi::IntegralTransform::OutputType, psi::IntegralTransform::MOOrdering, psi::IntegralTransform::FrozenOrbitals, bool) /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform.cc:110; #4 0x7fdb46dc8b1a in psi::cctransort::cctransort(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401:7718,allocate,allocated,7718,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401,1,['allocate'],['allocated']
Energy Efficiency,"Python/ceval.c:4187; #47 0x564ef0b4b01b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #48 0x564ef0bcd3c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #49 0x564ef0bcd7c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #50 0x564ef0bcd9c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #51 0x564ef0bd14b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #52 0x564ef0bd14b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #53 0x564ef0a9a02d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #54 0x7f7bba2d9412 in __libc_start_main (/lib64/libc.so.6+0x24412); #55 0x564ef0b7ae0d (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x1c3e0d). 0x6030001fb1a8 is located 0 bytes to the right of 24-byte region [0x6030001fb190,0x6030001fb1a8); allocated by thread T0 here:; #0 0x7f7bba57149f in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86; #1 0x7f7ba935bb96 in psi::Matrix::matrix(int, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libmints/matrix.cc:245; #2 0x7f7ba93613f6 in psi::Matrix::alloc() /home/raimis/prj/psi4.git/psi4/src/psi4/libmints/matrix.cc:486; #3 0x7f7ba9359c77 in psi::Matrix::Matrix(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, psi::Dimension const&, psi::Dimension const&, int) /home/raimis/prj/psi4.git/psi4/src/psi4/libmints/matrix.cc:196; #4 0x7f7ba975bd94 in void __gnu_cxx::new_allocator<psi::Matrix>::construct<psi::Matrix, char const (&) [23], psi::Dimension const&, psi::Dimension const&>(psi::Matrix*, char const (&) [23], psi::Dimension const&, psi::Dimension const&) /home/raimis/opt/conda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881:10766,allocate,allocated,10766,https://psicode.org,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881,1,['allocate'],['allocated']
Energy Efficiency,"RHF iter 2: -75.97384127453083 -1.95023e-02 1.55795e-02 DIIS; 401: @DF-RHF iter 3: -75.97992825374592 -6.08698e-03 1.86735e-03 DIIS; 401: @DF-RHF iter 4: -75.98012170651255 -1.93453e-04 4.06200e-04 DIIS; 401: @DF-RHF iter 5: -75.98014095901934 -1.92525e-05 8.89529e-05 DIIS; 401: @DF-RHF iter 6: -75.98014186620988 -9.07191e-07 9.85581e-06 DIIS; 401: @DF-RHF iter 7: -75.98014187224302 -6.03315e-09 1.00607e-06 DIIS; 401: @DF-RHF iter 8: -75.98014187231389 -7.08695e-11 1.20203e-07 DIIS; 401: ; 401: ==> Post-Iterations <==; 401: ; 401: Orbital Energies [Eh]; 401: ---------------------; 401: ; 401: Doubly Occupied: ; 401: ; 401: 1A1 -20.568888 2A1 -1.334711 1B2 -0.686874 ; 401: 3A1 -0.554298 1B1 -0.499284 ; 401: ; 401: Virtual: ; 401: ; 401: 4A1 0.193417 2B2 0.287599 3B2 1.041506 ; 401: 5A1 1.130379 2B1 1.164432 6A1 1.220999 ; 401: 4B2 1.368964 7A1 1.693510 ; 401: ; 401: Final Occupation by Irrep:; 401: A1 A2 B1 B2 ; 401: DOCC [ 3, 0, 1, 1 ]; 401: ; 401: Energy converged.; 401: ; 401: @DF-RHF Final Energy: -75.98014187231389; 401: ; 401: => Energetics <=; 401: ; 401: Nuclear Repulsion Energy = 8.8014620606294294; 401: One-Electron Energy = -122.2750929709242769; 401: Two-Electron Energy = 37.4934890379809431; 401: Total Energy = -75.9801418723139079; 401: ; 401: ; 401: ; 401: Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 40",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:6343,Energy,Energy,6343,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Energy'],['Energy']
Energy Efficiency,"RHF iter 8: -24.23681570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:6977,Energy,Energy,6977,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:636,efficient,efficient,636,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715,4,['efficient'],['efficient']
Energy Efficiency,"Reduced @dspoel test case; ```; molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 16.000000000 0.000000000 0.000000000; }; set basis cc-pVDZ; set df_scf_guess false; set scf_type direct. energy('scf'); ```; Ends up in ; ```; @RHF iter 99: -93.26608062600357 7.76623e-11 9.86087e-02 DIIS; @RHF iter 100: -93.26608062574179 2.61778e-10 9.86087e-02 DIIS; ```. If you use an augmented basis set, the calculation converges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-465488934:0,Reduce,Reduced,0,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-465488934,2,"['Reduce', 'energy']","['Reduced', 'energy']"
Energy Efficiency,"Regarding over-riding, as long as the `energy(..., options={'BASIS', 'STO-3G'})` are executed as actual `psi4.core.set_global_option(...)` commands, there shouldn't be any special treatment needed for overriding options. This is still the global options object that's being set, though, yes? So those `options` are going to need to be reset and revoked in an `OptionsState` before return. Sorry if this is out of place – with all the ""overriding"", I'm not quite following if it's the user-facing or programming process that's under discussion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-259860494:39,energy,energy,39,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-259860494,1,['energy'],['energy']
Energy Efficiency,"Regarding the PTE test case, I get the following `Integral setup` running the code on `master`:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 50; Number of atomic orbitals: 19; Number of basis functions: 18; ; Integral cutoff 1.00e-12; Number of threads: 1; ```; while this one with the code on this PR:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 55; Number of atomic orbitals: 19; Number of basis functions: 18; Integral cutoff 1.00e-12; Number of threads: 1; ```; The SCF results are the same within 10^-11 The CC results are different already at the first iteration of the T amplitude solver, _i.e._ the MP2 correlation energy. This despite the fact that the SCF energies reported by the two versions at the end of cctransort are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-308221334:788,energy,energy,788,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-308221334,1,['energy'],['energy']
Energy Efficiency,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:130,ENERGY,ENERGY,130,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,2,['ENERGY'],['ENERGY']
Energy Efficiency,"Returning 0.0 works fine for the interrim, however the issue will need to be revisited eventually. The following are excerpts from Hessian runs from two other QM apps. **Nwchem** reports the following for atomic Boron as a neutral doublet:. > Zero-Point correction to Energy = 0.000 kcal/mol ( 0.000000 au); > Thermal correction to Energy = 0.888 kcal/mol ( 0.001416 au); > Thermal correction to Enthalpy = 1.481 kcal/mol ( 0.002359 au); > ; > Total Entropy = 33.126 cal/mol-K; > - Translational = 33.126 cal/mol-K (mol. weight = 11.0093); > - Rotational = 0.000 cal/mol-K (symmetry # = 1); > - Vibrational = 0.000 cal/mol-K; > ; > Cv (constant volume heat capacity) = 2.979 cal/mol-K; > - Translational = 2.979 cal/mol-K; > - Rotational = 0.000 cal/mol-K; > - Vibrational = 0.000 cal/mol-K. **GAMESS'** authors include electronic properties. Kcal and cal/mol-K units are omitted since the markdown can't handle them easily. . | | E | H | G | CV | CP | S |; | --- | --- | --- | --- | --- | --- | --- |; | ELEC. | 0.000 | 0.000 | -0.411 | 0.000 | 0.000 | 1.377 |; | TRANS. | 0.889 | 1.481 | -8.400 | 2.981 | 4.968 | 33.141 |; | ROT. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | VIB. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | TOTAL | 0.889 | 1.481 | -8.810 | 2.981 | 4.968 | 34.518 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204559936:268,Energy,Energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204559936,2,['Energy'],['Energy']
Energy Efficiency,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955,6,"['energy', 'reduce']","['energy', 'reduces']"
Energy Efficiency,Running `ctest -L quick` results in:. ```; Test project /gpfs/alpine2/scratch/jslj23/chm205/psi4/build; Start 2: casscf-fzc-sp; 1/185 Test #2: casscf-fzc-sp .................... Passed 3.47 sec; Start 3: casscf-semi; 2/185 Test #3: casscf-semi ...................... Passed 2.70 sec; Start 4: casscf-sa-sp; 3/185 Test #4: casscf-sa-sp ..................... Passed 18.40 sec; Start 5: ao-casscf-sp; 4/185 Test #5: ao-casscf-sp ..................... Passed 3.72 sec; Start 6: casscf-sp; 5/185 Test #6: casscf-sp ........................ Passed 8.16 sec; Start 7: castup1; 6/185 Test #7: castup1 .......................... Passed 2.61 sec; Start 10: cbs-delta-energy; 7/185 Test #10: cbs-delta-energy ................. Passed 21.39 sec; Start 13: cbs-xtpl-energy; 8/185 Test #13: cbs-xtpl-energy .................. Passed 23.30 sec; Start 14: cbs-xtpl-freq; 9/185 Test #14: cbs-xtpl-freq .................... Passed 44.45 sec; Start 15: cbs-xtpl-gradient; 10/185 Test #15: cbs-xtpl-gradient ................ Passed 12.67 sec; Start 20: cbs-xtpl-dict; 11/185 Test #20: cbs-xtpl-dict .................... Passed 45.25 sec; Start 21: cc1; 12/185 Test #21: cc1 .............................. Passed 6.13 sec; Start 27: cc13b; 13/185 Test #27: cc13b ............................ Passed 7.25 sec; Start 31: cc15; 14/185 Test #31: cc15 ............................. Passed 4.23 sec; Start 33: cc17; 15/185 Test #33: cc17 ............................. Passed 8.09 sec; Start 34: cc18; 16/185 Test #34: cc18 ............................. Passed 45.65 sec; Start 44: cc28; 17/185 Test #44: cc28 ............................. Passed 274.18 sec; Start 48: cc31; 18/185 Test #48: cc31 ............................. Passed 367.81 sec; Start 49: cc32; 19/185 Test #49: cc32 ............................. Passed 3.80 sec; Start 57: cc4; 20/185 Test #57: cc4 .............................. Passed 9.40 sec; Start 67: cc49; 21/185 Test #67: cc49 ............................. Passed 18.04 sec; Start 79: cc8; 22/185 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:657,energy,energy,657,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,4,['energy'],['energy']
Energy Efficiency,Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0											 Charge = 0; Multiplicity = 2											 Multiplicity = 2; Electrons = 9											 Electrons = 9; Nalpha = 5											 Nalpha = 5; Nbeta = 4											 Nbeta = 4. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is PK.										 SCF Algorithm Type is PK.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is SAD.											 Guess Type is SAD.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-06										 Density threshold = 1.00e-06; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. Basis Set: DZ												 Basis Set: DZ; Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12		,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:10579,Energy,Energy,10579,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,1,['Energy'],['Energy']
Energy Efficiency,"Running my example with a debug build and #2700 results in this log:; ```; LSEEK failed. Error description from the OS: : Bad file descriptor; Error in PSIO_WT_TOCLEN()! Cannot seek vol[0] to its beginning, unit 102. Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:451,energy,energy,451,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,2,['energy'],['energy']
Energy Efficiency,"S; @RHF iter 12: -2058.62669482462434 -1.82716e-01 2.82478e-03 DIIS; @RHF iter 13: -2058.70818041849816 -8.14856e-02 4.77369e-04 DIIS; @RHF iter 14: -2058.71254091207129 -4.36049e-03 2.19998e-04 DIIS; @RHF iter 15: -2058.71333247888015 -7.91567e-04 1.06203e-04 DIIS; @RHF iter 16: -2058.71385812449535 -5.25646e-04 7.34977e-05 DIIS; @RHF iter 17: -2058.71419440133604 -3.36277e-04 6.51060e-05 DIIS; @RHF iter 18: -2058.71480929891686 -6.14898e-04 5.06877e-05 DIIS; @RHF iter 19: -2058.71557380138074 -7.64502e-04 2.56577e-05 DIIS; @RHF iter 20: -2058.71570264423553 -1.28843e-04 1.10771e-05 DIIS; @RHF iter 21: -2058.71571795960836 -1.53154e-05 6.56999e-06 DIIS; @RHF iter 22: -2058.71572010000091 -2.14039e-06 4.19181e-06 DIIS; @RHF iter 23: -2058.71572133933978 -1.23934e-06 2.84272e-06 DIIS; @RHF iter 24: -2058.71572216216646 -8.22827e-07 1.46190e-06 DIIS; @RHF iter 25: -2058.71572235289977 -1.90733e-07 6.37553e-07 DIIS; Energy converged.; ```; After:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -2027.61462571415450 -2.02761e+03 0.00000e+00 ; @RHF iter 1: -2047.54782267664223 -1.99332e+01 3.19491e-02 ; @RHF iter 2: -1955.99273532148004 9.15551e+01 6.70510e-02 DIIS; @RHF iter 3: -2057.53819937519893 -1.01545e+02 9.02846e-03 DIIS; @RHF iter 4: -2058.54743414181848 -1.00923e+00 4.31560e-03 DIIS; @RHF iter 5: -2058.67427146292175 -1.26837e-01 1.67738e-03 DIIS; @RHF iter 6: -2058.68592550112453 -1.16540e-02 1.96127e-03 DIIS; @RHF iter 7: -2058.71313050125491 -2.72050e-02 2.22231e-04 DIIS; @RHF iter 8: -2058.71421043177043 -1.07993e-03 1.00804e-04 DIIS; @RHF iter 9: -2058.71444510627452 -2.34675e-04 6.14040e-05 DIIS; @RHF iter 10: -2058.71464094420026 -1.95838e-04 5.39836e-05 DIIS; @RHF iter 11: -2058.71503691077487 -3.95967e-04 4.33684e-05 DIIS; @RHF iter 12: -2058.71567587119080 -6.38960e-04 2.33421e-05 DIIS; @RHF iter 13: -2058.71571904189250 -4.31707e-05 1.03865e-05 DIIS; @RHF iter 14: -2058.71572200714991 -2.96526e-06 2.57224e-06 DIIS; @RHF iter 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309:3088,Energy,Energy,3088,https://psicode.org,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309,1,['Energy'],['Energy']
Energy Efficiency,"Sebastian, my apologies for the forthcoming long response, which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:630,adapt,adapt,630,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['adapt'],['adapt']
Energy Efficiency,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010043:134,Energy,Energy,134,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043,6,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Setting MKL_CBWR=AUTO for Intel machines (CI runs on intel for now, right?) seems reasonable. . I am all for moving forward with this as it blocks other PRs.; We could make an issue about MKL instabilities and keep monitoring it for now?. With supercomputers getting build with AMD Epyc we might need to consider supporting an AMD-oriented build in the future and switch to another BLAS library for it. (i'm not up to date on BLAS stuff there, but things have been improving i think)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633701524:215,monitor,monitoring,215,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633701524,1,['monitor'],['monitoring']
Energy Efficiency,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:362,Energy,Energy,362,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,3,['Energy'],['Energy']
Energy Efficiency,"Side issue, just checking that `mp2/cc-pvqz-ri` is your shorthand, and that you're not actually running `energy('mp2/cc-pvqz-ri')`? That would be bad b/c cc-pvqz-ri isn't designed as a primary/orbital basis. It will be used automatcally as an auxiliary/fitting basis in a calc like `energy('mp2/cc-pvqz')` [good].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279094276:105,energy,energy,105,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279094276,2,['energy'],['energy']
Energy Efficiency,"Similar to pull request #497 but should fix all broken links, not only those to energy/optimize/frequency. Removed unnecessary line break.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/500#issuecomment-258539160:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258539160,1,['energy'],['energy']
Energy Efficiency,Simplified test case; ```; molecule dimer {; 0 1; Ne 0.0 0.0 0.0; --; 0 1; Xe 0.0 0.0 3.0; }. set {; basis def2-svp; print 2; }. set guess core; Eall = energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-447940882:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-447940882,1,['energy'],['energy']
Energy Efficiency,"Since nobody answered this yet, let me do so and bump this thread... You are right Lori, at present the s^2 variants are always computed, and the s^inf variants are computed in addition if the respective variables are True. As the new addition makes it possible to run complete SAPT0 without the s^2 approximation, it definitely makes sense to create a route that does exactly that, skipping the s^2 calculations altogether. However, it probably needs a new name (`energy('sapt0-sinf')` or similar) so the meaning of the standard and widely used `energy('sapt0')` is unchanged. It might also make sense to define new optional routes for higher-order SAPT that combine SAPT0-level s^inf exchange corrections with higher-level s^2 exchange corrections. I don't have a good name for such routes though: `energy('sapt2-sinf')` is not a good idea because it's not _all_ s^inf.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052:465,energy,energy,465,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052,3,['energy'],['energy']
Energy Efficiency,Since the energy is considerably higher in the failing example I wonder if the geometry is okay?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952844434:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952844434,1,['energy'],['energy']
Energy Efficiency,"Since the energy usually goes up from the SAD value in the first iteration, I would take the first update step from GDM; otherwise I'd use ADIIS/EDIIS+DIIS by default (see discussion in #2235). However, there should be also a setting that if the energy hasn't going down in N consecutive iterations (N=2 or N=3 are reasonable values) that the program should automatically switch to GDM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-874494530:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-874494530,2,['energy'],['energy']
Energy Efficiency,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224644390:227,energy,energy,227,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390,1,['energy'],['energy']
Energy Efficiency,"Sir, I just noticed that my psi4 does not reflect the methods that comes with it. Because of this, I can't calculate the potential energy data for the first excited states of the CF molecule. How can I add different methods to the Psi4 I already have compiled and installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2191716280:131,energy,energy,131,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2191716280,1,['energy'],['energy']
Energy Efficiency,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:529,energy,energy,529,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,2,['energy'],['energy']
Energy Efficiency,"So for the record, this would be:. ```; molecule N2 {; N 0.0000 0.0000 0.0000; N 0.0000 0.0000 2.1180; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12. set dmrg wfn_irrep 0; set dmrg wfn_multp 1; set dmrg frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrg active [ 2 , 0 , 1 , 1 , 0 , 2 , 1 , 1 ]. set dmrg dmrg_states [ 500, 1000]; set dmrg dmrg_e_convergence [ 1e-10, 1e-10]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-10]; set dmrg dmrg_maxsweeps [ 5, 5]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_d_convergence 1e-6; set dmrg dmrg_store_unit true; set dmrg dmrg_do_diis true; set dmrg dmrg_diis_branch 1e-2; set dmrg dmrg_store_diis false. set dmrg dmrg_which_root 1 # Ground state; set dmrg dmrg_state_avg false; set dmrg dmrg_active_space NO # INPUT; NO; LOC; set dmrg dmrg_loc_random false. set dmrg dmrg_caspt2_orb pseudocanonical; set dmrg dmrg_ipea 0.0; set dmrg dmrg_imag_shift 0.0. energy(""dmrg-caspt2""). compare_values(-109.103502335253, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; compare_values(-109.311041321133, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223891395:1021,energy,energy,1021,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223891395,5,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"So here is the output file for 64 GB:. [formaldimine.txt](https://github.com/psi4/psi4/files/4948227/formaldimine.txt). and the error:. ```; PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and I confirm the 64 GB used : ` Memory set to 64.000 GiB by Python driver.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874:534,energy,energy,534,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661069874,3,['energy'],['energy']
Energy Efficiency,"So in addition to setting `mf.small_rho_cutoff = 1e-15` in PySCF you also need to use a smaller threshold for the basis function screening. The default density screening threshold in Psi4 comes from Libxc, which is usually `1e-15`. I think there is another keyword for controlling the basis function threshold. I recently looked at the density threshold in finite element calculations on atoms in [arXiv:2302.06284](https://arxiv.org/abs/2302.06284). `1e-11` was sufficient to converge the total energy for all functionals to 1e-7 Hartree. The results for molecules may be different, though, since one might have larger regions of space with low electron density. Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though, since my usual interest is just to check that a functional is implemented the same way. Here that is not an issue since libxc provides the density functional to both Psi4 and PySCF, which is a huge boon for reproducibility.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487436664:496,energy,energy,496,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487436664,1,['energy'],['energy']
Energy Efficiency,"So, this Ni(CO)3 calculation from #2209 currently fails in at least in STO-3G, def2-SVP, def2-QZVP and pcseg-0; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-869292864:382,energy,energy,382,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-869292864,1,['energy'],['energy']
Energy Efficiency,"So... looks like it works; DIIS just takes it to the wrong solution; ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.70872378254081 -7.08724e-01 0.00000e+00 ; Mixing alpha HOMO/LUMO orbitals (1,2). @DF-UHF iter 1: -0.82640393434897 -1.17680e-01 1.12200e-03 DIIS; @DF-UHF iter 2: -0.97800267490794 -1.51599e-01 1.18746e-02 DIIS; @DF-UHF iter 3: -0.82673929652084 1.51263e-01 9.92192e-04 DIIS; @DF-UHF iter 4: -0.82768446534307 -9.45169e-04 2.11271e-03 DIIS; @DF-UHF iter 5: -0.82648408142877 1.20038e-03 9.77585e-06 DIIS; @DF-UHF iter 6: -0.82648447847074 -3.97042e-07 3.83550e-05 DIIS; @DF-UHF iter 7: -0.82648407869393 3.99777e-07 1.24969e-06 DIIS; @DF-UHF iter 8: -0.82648407827585 4.18083e-10 7.42903e-08 DIIS; @DF-UHF iter 9: -0.82648407827446 1.38667e-12 8.54867e-10 DIIS; @DF-UHF iter 10: -0.82648407827446 7.77156e-16 1.13025e-12 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643:80,Energy,Energy,80,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016618643,2,['Energy'],['Energy']
Energy Efficiency,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276222956:65,Allocate,Allocates,65,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956,2,"['Allocate', 'allocate']","['Allocates', 'allocate']"
Energy Efficiency,"Some comments for posterity:; * The Coulomb terms also come from the derivatives of two-electron integrals. You can (and for efficiency should) contract the TEI derivatives against the 1RDM to get the Coulomb terms. Conceptually, this is the interaction of an orbital with the mean field of all orbitals. It's not a pure one-electron interaction, but it's close enough.; * For purposes of thinking about the implementation, this issue is two very different ones: (1) exposing the existing pieces of the SCF gradient and (2) further decomposing those pieces into per-orbital contributions, where applicable. (1) is as easy as setting array variables on the wavefunction. Per-orbital contributions aren't even computed, as they shouldn't be in an efficient code, so (2) is non-trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091:745,efficient,efficient,745,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091,1,['efficient'],['efficient']
Energy Efficiency,"Some more information:; As I said above, for H2O the orbital energies and coeffcients are printed out in the FCHK file, but the field headers are not standard. They are:. - orbital energies ; - MO coefficients. This is not the case for Psi4 1.1 where these headers are; - Alpha Orbital Energies; - Alpha MO coefficients. Why was this change made? . Input file below:. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule H2O_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 0.0 0.0 0.1246319249; > H1 -1.4536519623 0.0 -0.9970553993; > H2 1.4536519623 0.0 -0.9970553993; > }; > set {; > s_tolerance 1.0E-08; > ints_tolerance 1.0E-10; > }; > ; > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('H2O_minimal.fchk')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1501#issuecomment-458640727:675,energy,energy,675,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458640727,2,['energy'],['energy']
Energy Efficiency,"Some tests from the original issue on a 48 core Intel Xeon Gold 5120 Linux box, with OneAPI compilers (version 2021.2.0) as well as GCC 7.1, with and without the bug fixed:. | Compiler | #Threads | wcombine | Bug fixed? | Energy (Eh) | Still Bad? |; |----------|----------|----------|------------|--------------------|----|; | OneAPI | 1 | True | False | -1963.7577 8206 1252* | yes |; | OneAPI | 8 | True | False | did not converge | yes |; | OneAPI | 1 | False | False | -1963.7615 9009 8066 |; | OneAPI | 8 | False | False | -1962.6864 3082 1442 | yes |; | OneAPI | 1 | True | True | -1963.7615 2234 6426 |; | OneAPI | 8 | True | True | -1963.7615 2417 8940 |; | OneAPI | 1 | False | True | -1963.7615 5899 4243 |; | OneAPI | 8 | False | True | -1963.7615 5898 3752 |; | GCC | 1 | True | False | -1963.7587 7038 0348 | yes |; | GCC | 8 | True | False | -1963.7587 7038 0374 | yes |; | GCC | 1 | False | False | -1963.7615 8294 3193 |; | GCC | 8 | False | False | -1963.7615 8294 3197 |; | GCC | 1 | True | True | -1963.7615 8460 3790 |; | GCC | 8 | True | True | -1963.7615 8460 3791 |; | GCC | 1 | False | True | -1963.7615 5884 0375 |; | GCC | 8 | False | True | -1963.7615 5884 0376 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904776872:222,Energy,Energy,222,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904776872,1,['Energy'],['Energy']
Energy Efficiency,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:883,reduce,reduce,883,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763,1,['reduce'],['reduce']
Energy Efficiency,"Something is ... not right. I'm looking into this now, but the basis guess gives a PBE energy of `-13988.27302270776818` Eh, both on my workstation and on our cluster ... trying to track this down now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432344773:87,energy,energy,87,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432344773,1,['energy'],['energy']
Energy Efficiency,"Something like this is an excellent idea. On Tue, Jun 26, 2018 at 11:15 AM Daniel Smith <notifications@github.com>; wrote:. > I have seen folks try the following several times:; >; > e, wfn = energy('MP2', return_wfn=True); > oeprop(wfn); >; > which will return the HF properties as MP2 densities are costly to; > compute, the same is true with CCSD and others. To help alleviate confusion; > I would add a few lines here; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L866>; > in the OEProp compute call that would highlight the name of the density; > matrix. A line like the following could be appropriate:; >; > if (title_ == """"){; > outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; > }; >; > This should give folks some hint that things may not be as they appear.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1055>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdm83GNlNX1pZQY31qL_iHYoua4E4ks5uAlAGgaJpZM4U4J0b>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1055#issuecomment-400498443:192,energy,energy,192,https://psicode.org,https://github.com/psi4/psi4/issues/1055#issuecomment-400498443,1,['energy'],['energy']
Energy Efficiency,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:534,energy,energy,534,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,2,['energy'],['energy']
Energy Efficiency,"Sorry I realize my example was incomplete.; I used the following options:. ```; psi4.set_options({'basis': 'STO-3G-DECON',; 'reference': 'rohf',; 'scf_type': 'direct',; 'guess': 'sad',; 'puream':true}); ```. I then used @hokru 's trick to set the ```DF_BASIS_SCF``` object. I modified the active space (using ```RESTRICTED_DOCC``` instead of ```FROZEN_DOCC``` and only 4 active orbitals) and I also get the Segmentation Fault in the property section. But the energy is there, which is already good enough for me right now, so thanks for the tip !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761:459,energy,energy,459,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615494761,1,['energy'],['energy']
Energy Efficiency,"Sorry for messing the fix up, and thanks for diagnosing it, @jgonthier . No, it doesn't look like the driver is touching `df_scf_guess`. read_options defaults it to `on`, but otherwise only `hf.cc` handles that option. Ah, yes, I see what you mean at L1969. If the path to resolve this is clear to you, then yes, please, go ahead and do so, @jgonthier . I'm sort of with @fevangelista that I don't see that we need to facilitate `df_scf_guess` for non-`direct` since it doesn't change the convergence behaviour or reduce quantities to compute. Maybe also change. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```. to. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech; in a |scf__scf_type| ``DIRECT`` calculation -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189416253:514,reduce,reduce,514,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189416253,2,['reduce'],['reduce']
Energy Efficiency,"Sorry for not checking the PRs for a few days. Yes, this is ready to go and I think it should be merged because it does reduce the MRPT memory usage. The transition from IWL that we mentioned should be done at some point for consistency with other codes, but it won't gain any new functionality.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/296#issuecomment-208381486:120,reduce,reduce,120,https://psicode.org,https://github.com/psi4/psi4/pull/296#issuecomment-208381486,1,['reduce'],['reduce']
Energy Efficiency,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291492708:286,reduce,reduce,286,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708,2,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"Sorry to keep making you write, but is the ""big picture"" view of nbody documented _anywhere_? I can't follow what `energy_body_dict` means, or why the value of one of its entries is coupled to whether the total energy is available. I fear this is a case where there is a _lot_ of ""developer was only coding to be comprehensible to themselves"" code debt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871765509:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871765509,1,['energy'],['energy']
Energy Efficiency,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:745,energy,energy,745,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,4,['energy'],['energy']
Energy Efficiency,"Sounds good. Check for natom==1, and if true assume for rovibrations only 1 state/no energy or entropy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204475629:85,energy,energy,85,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204475629,1,['energy'],['energy']
Energy Efficiency,"Sounds like a version mismatch. The `cp()` function was deprecated sometime last spring in favor of a `bsse_type='cp'` argument to `energy()`, as shown in [this section of the tutorial](http://psicode.org/psi4manual/master/tutorial.html#potential-surface-scans-and-counterpoise-correction-made-easy-with-psithon). It sounds like you've got a new version of Psi4 (latest ones [here](https://github.com/psi4/psi4/issues/466#issuecomment-272589229) but an old version of the tutorial. Use the latest versions of both and all should be well. If not, tell me more about what you're running (`psi4 --version`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/653#issuecomment-287394510:132,energy,energy,132,https://psicode.org,https://github.com/psi4/psi4/issues/653#issuecomment-287394510,1,['energy'],['energy']
Energy Efficiency,Start 243: ocepa-grad2; 89/412 Test #58: cc40 ............................. Passed 75.15 sec; Start 60: cc42; 90/412 Test #82: cc9 .............................. Passed 62.16 sec; Start 108: dcft1; 91/412 Test #57: cc4 .............................. Passed 57.29 sec; Start 35: cc19; 92/412 Test #114: dcft7 ............................ Passed 393.99 sec; Start 66: cc48; 93/412 Test #69: cc50 ............................. Passed 73.08 sec; Start 101: ci-property; 94/412 Test #78: cc8 .............................. Passed 58.53 sec; Start 65: cc47; 95/412 Test #245: ocepa2 ........................... Passed 85.34 sec; Start 28: cc13c; 96/412 Test #251: omp2-5 ........................... Passed 85.48 sec; Start 67: cc49; 97/412 Test #80: cc8b ............................. Passed 50.08 sec; Start 55: cc38; 98/412 Test #298: pubchem1 ......................... Passed 62.79 sec; Start 257: omp2p5-grad2; 99/412 Test #60: cc42 ............................. Passed 63.53 sec; Start 72: cc53; 100/412 Test #193: fd-freq-energy ................... Passed 94.52 sec; Start 157: dfomp2p5-grad2; 101/412 Test #35: cc19 ............................. Passed 71.33 sec; Start 148: dfomp3-2; 102/412 Test #101: ci-property ...................... Passed 60.88 sec; Start 163: dft-grad-meta; 103/412 Test #66: cc48 ............................. Passed 63.96 sec; Start 27: cc13b; 104/412 Test #243: ocepa-grad2 ...................... Passed 84.44 sec; Start 74: cc55; 105/412 Test #108: dcft1 ............................ Passed 97.71 sec; Start 19: cbs-xtpl-nbody; 106/412 Test #55: cc38 ............................. Passed 58.64 sec; Start 300: pywrap-alias; 107/412 Test #65: cc47 ............................. Passed 80.60 sec; Start 141: dfomp2-2; 108/412 Test #67: cc49 ............................. Passed 72.11 sec; Start 171: dft1-alt; 109/412 Test #72: cc53 ............................. Passed 57.83 sec; Start 73: cc54; 110/412 Test #26: cc13a ............................ Passed 508.31 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:9555,energy,energy,9555,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['energy'],['energy']
Energy Efficiency,Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 247.88 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.30 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 318.32 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 6.14 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 2.45 sec; Start 5: casscf-sa-sp; 12/411 Test #2: adc2 ............................. Passed 46.87 sec; Start 6: ao-casscf-sp; 13/411 Test #394: python-vibanalysis ............... Passed 861.59 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 13.43 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:1852,energy,energy,1852,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['energy'],['energy']
Energy Efficiency,Start 383: psi4numpy-rhf-gradient; 363/411 Test #328: scf-upcast-custom-basis .......... Passed 1.36 sec; Start 408: skeletonmointegrals; 364/411 Test #8: castup1 .......................... Passed 1.23 sec; Start 362: x2c3; 365/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 398: json-v11-gradient; 366/411 Test #390: python-mints9 .................... Passed 1.91 sec; Start 352: stability2; 367/411 Test #383: psi4numpy-rhf-gradient ........... Passed 0.97 sec; Start 353: tu1-h2o-energy; 368/411 Test #408: skeletonmointegrals .............. Passed 0.95 sec; Start 96: cisd-h2o-clpse; 369/411 Test #221: mints9 ........................... Passed 1.94 sec; Start 403: json-schema-1-gradient; 370/411 Test #398: json-v11-gradient ................ Passed 0.96 sec; Start 327: scf-guess-read1; 371/411 Test #352: stability2 ....................... Passed 0.88 sec; Start 333: scf2; 372/411 Test #362: x2c3 ............................. Passed 1.46 sec; Start 334: scf3; 373/411 Test #353: tu1-h2o-energy ................... Passed 1.10 sec; Start 288: psimrcc-ccsd_t-2; 374/411 Test #96: cisd-h2o-clpse ................... Passed 1.20 sec; Start 400: json-schema-1-ghost; 375/411 Test #334: scf3 ............................. Passed 0.73 sec; Start 287: psimrcc-ccsd_t-1; 376/411 Test #403: json-schema-1-gradient ........... Passed 1.22 sec; Start 289: psimrcc-ccsd_t-3; 377/411 Test #333: scf2 ............................. Passed 1.28 sec; Start 410: skeletonsointegrals; 378/411 Test #327: scf-guess-read1 .................. Passed 1.34 sec; Start 210: mcscf2; 379/411 Test #400: json-schema-1-ghost .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 380/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.53 sec; Start 229: mp2-grad2; 381/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.31 sec; Start 298: pubchem2; 382/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.35 sec; Start 102: decontract; 383/411 Test #410: skeleton,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:34787,energy,energy,34787,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,Start 399: json-schema-1-energy; 314/411 Test #351: dft-reference .................... Passed 4.90 sec; Start 384: psi4numpy-rhf-hessian; 315/411 Test #377: pywrap-align-chiral .............. Passed 3.04 sec; Start 136: dfmp2-grad3; 316/411 Test #116: ao-dfcasscf-sp ................... Passed 6.35 sec; Start 225: mom; 317/411 Test #310: rasci-c2-active .................. Passed 9.23 sec; Start 213: mints2; 318/411 Test #385: psi4numpy-fci .................... Passed 9.16 sec; Start 397: json-v11-energy; 319/411 Test #370: scf-coverage ..................... Passed 11.16 sec; Start 328: scf-upcast-custom-basis; 320/411 Test #135: dfmp2-grad2 ...................... Passed 15.32 sec; Start 327: scf-guess-read1; 321/411 Test #314: sad1 ............................. Passed 5.26 sec; Start 391: python-mints2; 322/411 Test #234: mp3-grad2 ........................ Passed 9.93 sec; Start 362: x2c3; 323/411 Test #284: props1 ........................... Passed 7.76 sec; Start 228: mp2-grad1; 324/411 Test #399: json-schema-1-energy ............. Passed 5.52 sec; Start 271: opt5; 325/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.49 sec; Start 233: mp3-grad1; 326/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 262: omp3-grad1; 327/411 Test #85: cepa0-grad1 ...................... Passed 9.67 sec; Start 121: dfccdl1; 328/411 Test #328: scf-upcast-custom-basis .......... Passed 2.52 sec; Start 356: scf-response1; 329/411 Test #190: fci-coverage ..................... Passed 13.09 sec; Start 361: x2c2; 330/411 Test #327: scf-guess-read1 .................. Passed 2.57 sec; Start 246: omp2-1; 331/411 Test #397: json-v11-energy .................. Passed 3.24 sec; Start 255: omp2p5-grad1; 332/411 Test #225: mom .............................. Passed 3.92 sec; Start 332: scf-occ; 333/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 345: dfep2-2; 334/411 Test #362: x2c3 ............................. Passed 2.55 sec; Start 229: mp2-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:30441,energy,energy,30441,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-170686261:326,energy,energy,326,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261,2,['energy'],['energy']
Energy Efficiency,"Sure! I need to calculate the integrals of AOs ERI between different molecules at different locations. Eventually, I need to calculate Hartree-like energy BETWEEN two molecules, i.e. $\int drdr' \frac{n_{mol1}(r)n_{mol2}(r')}{|r-r'|}$.; I can define a Psi4 geometry and basis set of two molecules together and calculate the ao_eri of that entire basis set. But this will take a little more calculation and memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1038496348:148,energy,energy,148,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1038496348,1,['energy'],['energy']
Energy Efficiency,"Sure, go ahead and add to this PR. Branch is in my acct now so you can push to it. . Yeah, the distelli thing is weird. So fat, always fails first time, always passes second time. . Sent from my iPhone. > On Sep 23, 2016, at 9:23 AM, Daniel Smith notifications@github.com wrote:; > ; > @loriab It looks like I forget to reimplement in driver. My plan was to move it to energy/gradient/etc so that it would be universal. I need to add MOWriter to proc/scf_helper and probably proc/mcscf as well. Should I just add it to this PR?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/472#issuecomment-249195924:369,energy,energy,369,https://psicode.org,https://github.com/psi4/psi4/pull/472#issuecomment-249195924,1,['energy'],['energy']
Energy Efficiency,"Sure, here is the script:. ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad; }. with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046:304,charge,charge,304,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046,8,"['ENERGY', 'charge', 'energy']","['ENERGY', 'charge', 'energy']"
Energy Efficiency,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394#issuecomment-222842020:591,energy,energy,591,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020,2,['energy'],['energy']
Energy Efficiency,"Sure, we get a NaN because an occupied and a virtual eigenvalue have the exact same energy. Its an unphysical reference that we didn't anticipate. We probably wont patch this as its an extreme edge case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561#issuecomment-271457794:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271457794,1,['energy'],['energy']
Energy Efficiency,"Sure. When you do a complex Psi4 job with multiple computations and one global variable space, there's nothing preventing a fci/sto-3g followed by a hf/cc-pvqz from getting a value from `get_variable('FCI TOTAL ENERGY')` or a `DISPERSION CORRECTION` after a CC job. Whereas for `P::e.globals` you'd have to deliberately `clean_variables()`, variable attached to a wavefunction are more likely rationally related. (Though not always. We still have to delete `MP2 TOTAL ENERGY` after a double-hybrid DFT job.). Whereas the psi4 driver operates a lot with ""wavefunction passing"" with `return_wfn` and most useful info (primary return val, psivars, basisset, orbital info, mol) stored on it, the analogy with generic objects (e.g., no `psi4.core.Matrix`) is a QCSchema dictionary being passed around via `return_json` holding psivars (or ""qcvars"" to be generic). Multiple json/wfn structures can be organized into a CBS dict record to describe extrapolations or a findif dict record as you have done. This ""dict passing"" is how qcdb works. So `P::e.globals` --> `Wfn.variables_` gets quantities localized onto calculations. Then `Wfn.variables_` --> QCSchema `psi4:variables` gets quantities generic and serializable. Let me know if anything needs elaboration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136:211,ENERGY,ENERGY,211,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136,2,['ENERGY'],['ENERGY']
Energy Efficiency,"Sure. ```; molecule {; 0 2; C; H 1 RCH; H 1 RCH 2 A; C 1 RCd 3 A 2 D180; H 4 RCH 1 A 3 D; C 4 RCs 5 A 2 D180; H 6 RCH 4 A 5 D180; C 6 RCd 7 A 4 D180; H 8 RCH 6 A 7 D180; C 8 RCs 9 A 6 D180; H 10 RCH 8 A 9 D180; C 10 RCd 11 A 8 D180; H 12 RCH 10 A 11 D180; C 12 RCs 13 A 10 D180; H 14 RCH 12 A 13 D180; C 14 RCd 15 A 12 D180; H 16 RCH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg wfn_irrep 1; set dmrg wfn_multp 2; set dmrg frozen_docc [ 9, 0 ]; set dmrg active [ 38, 9 ]. set dmrg dmrg_states [ 250, 250 ]; set dmrg dmrg_e_convergence [ 1e-8, 1e-8 ]; set dmrg dmrg_maxsweeps [ 10, 10 ]; set dmrg dmrg_noiseprefactors [ 0.05, 0.00 ]; set dmrg dmrg_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg dmrg_print_corr false; set dmrg dmrg_chkpt false. set dmrg dmrg_active_space loc; set dmrg dmrg_loc_random true. set dmrg dmrg_molden true # DMRG-CI pseudocanonical orbitals; set dmrg dmrg_density_ao true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244575544:1339,energy,energy,1339,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244575544,1,['energy'],['energy']
Energy Efficiency,"Surprising that the low memory algorithm is faster! . I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/lowmemory_triples.cc#L72; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L659-L661; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L780",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556:96,adapt,adapted,96,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556,1,['adapt'],['adapted']
Energy Efficiency,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:73,allocate,allocate,73,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130,1,['allocate'],['allocate']
Energy Efficiency,"TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2171,ENERGY,ENERGY,2171,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,2,['ENERGY'],['ENERGY']
Energy Efficiency,Tagging @JonathonMisiewicz : ; [3he.txt](https://github.com/psi4/psi4/files/5140334/3he.txt); ```; 	IRREP FC AOCC BOCC AVIR BVIR FV ; 	==========================================; 	 Ag 0 2 0 0 2 0; 	 B1g 0 0 0 0 0 0; 	 B2g 0 0 0 0 0 0; 	 B3g 0 0 0 0 0 0; 	 Au 0 0 0 0 0 0; 	 B1u 0 0 0 1 1 0; 	 B2u 0 0 0 1 1 0; 	 B3u 0 0 0 1 1 0; 	==========================================. 	Computing MP2 energy using SCF MOs (Canonical MP2)... ; 	============================================================================== ; 	Nuclear Repulsion Energy (a.u.) : 0.00000000000000; 	SCF Energy (a.u.) : -1.40116327670131; 	REF Energy (a.u.) : -1.40116327670131; 	Alpha-Alpha Contribution (a.u.) : 0.00000000000000; 	Alpha-Beta Contribution (a.u.) : 0.00000000000000; 	Beta-Beta Contribution (a.u.) : 0.00000000000000; 	Scaled_SS Correlation Energy (a.u.): 0.00000000000000; 	Scaled_OS Correlation Energy (a.u.): 0.00000000000000; 	SCS-MP2 Total Energy (a.u.) : -1.40116327670131; 	SOS-MP2 Total Energy (a.u.) : -1.40116327670131; 	SCSN-MP2 Total Energy (a.u.) : -1.40116327670131; 	SCS-MP2-VDW Total Energy (a.u.) : -1.40116327670131; 	SOS-PI-MP2 Total Energy (a.u.) : -1.40116327670131; 	MP2 Correlation Energy (a.u.) : 0.00000000000000; 	MP2 Total Energy (a.u.) : -1.40116327670131; 	============================================================================== ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682348770:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682348770,13,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,Taking the Krypton dimer at 3 angstroms with the def2-QZVP basis we get:. ```; SCF Energy difference: 7.1e-10 [hartree]; AO potential norm: 2.1e-8; AO max diff: 5.1e-9. AO ERI norm: 4.6e-8; AO ERI max diff: 2.0e-9; ```. Kr is nice and heavy with up to G functions. We could test something like aug-cc-pVDZ-RI for H and I functions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-277770423:83,Energy,Energy,83,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277770423,1,['Energy'],['Energy']
Energy Efficiency,Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Start 360: x2c1; 216/411 Test #151: dfomp2p5-2 ....................... Passed 29.24 sec; Start 81: cc9; 217/411 Test #192: fd-freq-energy ................... Passed 9.41 sec; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Test #10: castup3 .......................... Passed 20.61 sec; Start 80: cc8c; 223/411 Test #107: dcft1 ............................ Passed 58.98 sec; Start 171: dft2; 224/411 Test #171: dft2 ............................. Passed 6.62 sec; Start 266: opt1-fd; 225/411 Test #147: dfomp3-2 ......................... Passed 64.94 sec; Start 23: cc12; 226/411 Test #266: opt1-fd .......................... Passed 34.40 sec; Start 140: dfomp2-2; 227/411 Test #360: x2c1 ............................. Passed 82.77 sec; Start 313: rasscf-sp; 228/411 Test #73: cc55 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:20366,energy,energy,20366,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2139,energy,energy,2139,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,['energy'],['energy']
Energy Efficiency,"Test case:; ```; molecule {; 0 3; O; }. set reference rohf; set basis pcseg-1; set guess sad; energy('scf'); ```. Output before changes:; ```. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: 28.43955367824759 2.84396e+01 0.00000e+00 ; @DF-ROHF iter 1: -74.75118310291205 -1.03191e+02 1.84153e-02 DIIS; @DF-ROHF iter 2: -74.75844495846947 -7.26186e-03 6.55338e-03 DIIS; @DF-ROHF iter 3: -74.75962778267566 -1.18282e-03 8.89743e-04 DIIS; @DF-ROHF iter 4: -74.75966293836538 -3.51557e-05 7.52761e-05 DIIS; @DF-ROHF iter 5: -74.75966326690698 -3.28542e-07 1.44805e-05 DIIS; @DF-ROHF iter 6: -74.75966327706121 -1.01542e-08 4.33092e-07 DIIS; Energy and wave function converged.; ```. Output after changes; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter SAD: -73.85293189670189 -7.38529e+01 0.00000e+00 ; @DF-ROHF iter 1: -74.75118310291205 -8.98251e-01 1.84153e-02 DIIS; @DF-ROHF iter 2: -74.75844495846947 -7.26186e-03 6.55338e-03 DIIS; @DF-ROHF iter 3: -74.75962778267566 -1.18282e-03 8.89743e-04 DIIS; @DF-ROHF iter 4: -74.75966293836538 -3.51557e-05 7.52761e-05 DIIS; @DF-ROHF iter 5: -74.75966326690698 -3.28542e-07 1.44805e-05 DIIS; @DF-ROHF iter 6: -74.75966327706121 -1.01542e-08 4.33092e-07 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493#issuecomment-457500670:94,energy,energy,94,https://psicode.org,https://github.com/psi4/psi4/pull/1493#issuecomment-457500670,5,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Test subjects:; * `thread.py` from above (uses psi4 and np internally); * PsiAPI – has to import both; * Psithon – comment out both good and bad blocks above; * `tu1.py` below (uses psi4 internally so imports it); * Psi4 1.1 (add49) and current devel head Psi4. Findings:; * The SCF (tu1.py) scales as expected; * Psithon doesn't care if Numpy imported in bin/psi4; * Psithon takes orders from `psi4 -nN`; * Psithon & PsiAPI take orders preferentially from `psi4.set_num_threads(N)`; * Psithon & PsiAPI ignore :envvar:`MKL_NUM_THREADS`; * The DGEMM scaling thest (thread.py) behaves as previously described; * Psithon and PsiAPI thread if through the file itself or through bin/psi4 (if relevant) NumPy is imported before Psi4; * Psithon and PsiAPI _don't_ thread otherwise; * No difference btwn 1.1 and head (bad news for @schiebermc whose tests indicate something happened around June 14-15); * This contradicts @rmcgibbo's findings above, so maybe my MKLs are fighting; * Seem to be ok on most use cases, but not if doing detailed thread setting from input. ```; import psi4; #psi4.set_num_threads(6). def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({'basis': ""aug-cc-pV5Z""}); psi4.energy('scf'). if __name__ == '__main__':; test_psi4_basic(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312397812:1140,energy,energy,1140,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312397812,2,['energy'],['energy']
Energy Efficiency,"Thank you for bring this to our attention! I was also able to recreate the bug using your example. I looked into it a little bit, and found something interesting. Particularly, it seems the presence of randomness is dependent on the size of the basis set. When one switches the basis set in your minimal example from STO-3G to STO-6G:. ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/sto-6g',; ```. One seems randomness in the final answer, but to a decreased amount:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.18948320502566343; -0.18948320502566343; -0.19856521894753998; -0.18948320502566343; -0.18948320502566343; -0.3347954277756876; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; ```. That said, the answer PK commonly converges to here seems wrong anyway, as using DIRECT leads to an answer of -0.47102563660383534 h, and DF leads to the close answer of -0.4711430783826256 h. . When switching to the 3-21G basis set:; ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/3-21g',; ```. Everything seems to look good:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element ; 1 --multiplicity 2; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; ```. Consistent answers, and closely matching the DIRECT energy of -0.4964017399788503 h. These findings lead me to suspect that the issue you pointed out here is due to PK having issues handling calculations with extremely small basis function counts. Regardless, I shall look into this more. Thank you again for bringing this to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896:1567,energy,energy,1567,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896,1,['energy'],['energy']
Energy Efficiency,"Thank you for letting me know!. Regarding parallelization, nothing seems especially amiss. I can see `schedule(guided)` being preferred over `schedule(dynamic)` here. The comments look largely good to me, as well!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780:102,schedul,schedule,102,https://psicode.org,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780,4,['schedul'],['schedule']
Energy Efficiency,"Thank you for posting this!. I was looking into this some, and something popped up that quite troubled me. When I make the following changes to your minimal reproducing script:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:481,energy,energy,481,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662,4,['energy'],['energy']
Energy Efficiency,"Thank you for suggesting the dev version. It worked without any further errors or warnings. Cheers!. That is a good point, David. In this case we just wanted to optimize the energy, not the structure, and we already had scripts to do so for larger molecules. Thank you for the heads-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493:174,energy,energy,174,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493,1,['energy'],['energy']
Energy Efficiency,"Thank you for the info and recommendation, @hokru! Results are still not perfect, but much better. | Benzene Dimer | Min. Monomer Separation (Å) | Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points | Notes |; |---|---|---|---|---|---|---|---|; | 2mer+0-1 | 2.544 | -6.06459045 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -6.06828307 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -5.99965831 | Psi4 | | | | benchmark (CC) |; | 2mer+0-77 | 11.016 | -0.03793439 | ORCA | 590 | OptM3 with GC (2021) | 277814 | |; | | | -0.04297074 | Psi4 | 590 | 99 | 451461 | pruning = robust |; | | | -0.03186856 | Psi4 | | | | benchmark (CC) |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506:147,Energy,Energy,147,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-937245506,1,['Energy'],['Energy']
Energy Efficiency,"Thank you very much for your answer! The second link you give really explains how to convert Wavefunction to dictionary and vice versa. And it is indeed possible to change necessary things in the dictionary.; Concerning the first link, I didn't find there anything about wavefunction. That might be my problem, I often do not see things just in front of my eyes.; However, there is an example when it is difficult modify a wavefunction in a desired manner. If I have normal wavefunction resulting from; ```SCF_E_psi, scf_wfn = psi4.energy('SCF', return_wfn=True)```; And after that I want to change 1) nuclear charges in the molecule; 2) number of occupied states; 3) orbitals and density;; the conversion to dictionary and back does not work because psi4 thinks that charge, multiplicity and the number of occupied states are inconsistent (which is not in fact true). By the way, special thanks to you for the possibility to set arbitrary fractional nuclear charges!!! ; When I found it, I felt really really lucky! It is crucial for the approach I am trying implement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2086#issuecomment-762756780:532,energy,energy,532,https://psicode.org,https://github.com/psi4/psi4/issues/2086#issuecomment-762756780,4,"['charge', 'energy']","['charge', 'charges', 'energy']"
Energy Efficiency,"Thank you very much, @loriab. Is there a rough schedule whether and if yes, when this will make it into the master? We are currently preparing a paper which makes use of this code and it would be nice if it was available publicly in the not-too-far future :innocent:. Is there anything i can do for speeding up this progress?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1197787105:47,schedul,schedule,47,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1197787105,1,['schedul'],['schedule']
Energy Efficiency,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:564,ENERGY,ENERGY,564,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145,5,['ENERGY'],['ENERGY']
Energy Efficiency,Thanks @andysim. #1257 is in so there is nothing blocking this anymore. Third reviewer is free to merge! (once everything is green),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1206#issuecomment-424377712:125,green,green,125,https://psicode.org,https://github.com/psi4/psi4/pull/1206#issuecomment-424377712,1,['green'],['green']
Energy Efficiency,"Thanks @loriab , I'll make a note to schedule that against our March release. We're using psi4 as part of a force-field parameteristion tool (see https://github.com/Acellera/htmd ). It's Python 3 only and distributed via conda so we have to do some nastry tricks to ship the py2 psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608#issuecomment-278480471:37,schedul,schedule,37,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278480471,1,['schedul'],['schedule']
Energy Efficiency,Thanks @loriab and @edeprince3 It's green! 🎉,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355381185:36,green,green,36,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355381185,1,['green'],['green']
Energy Efficiency,"Thanks @loriab, I don't think I'd have found where this is handled. What puzzles me is: how does `extract_subsets` work? I see we tag the whole molecule as `Absent` first and then the appropriate fragments as `Ghost` second (in molecule.cc - `Molecule::extract_subsets`). We then loop over the atoms in molecule.cc `Molecule::reinterpret_coordentries` and apply `set_ghosted` on them, but how does this translate into modifying `Z`?. Incidentally, why don't we just apply `set_ghosted` to each coordentry that's actually ghosted, instead of messing with Z and charge in `Molecule::create_molecule_from_string`?. Edit: ah, my grep-fu is failing me - the actual ghosting for `extract_subsets` is done on lines https://github.com/psi4/psi4/blob/5b23c2f9643137a43a066f0c3b45b4362d47d70f/psi4/src/psi4/libmints/coordentry.cc#L94-L100",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409455167:560,charge,charge,560,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409455167,1,['charge'],['charge']
Energy Efficiency,"Thanks a lot @hokru! ; I will fix the mistake first and then see about the basis set and functional change. Can you provide me with some literature where I can read up on those things? Also this point charge embedding is new to me. This would only work if I was not interested in the shifted lattice positions, but how much cheaper would that be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709#issuecomment-1233101316:201,charge,charge,201,https://psicode.org,https://github.com/psi4/psi4/issues/2709#issuecomment-1233101316,1,['charge'],['charge']
Energy Efficiency,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:463,energy,energy,463,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['energy'],['energy']
Energy Efficiency,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:504,energy,energy,504,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,2,['energy'],['energy']
Energy Efficiency,"Thanks all for the thorough reviews. I've added the OS/SS decomposition of the DLPNO-MP2 correlation energy and verified that SCS-DLPNO-MP2 works correctly. As far as I know, this PR is ready to be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-932616184:101,energy,energy,101,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-932616184,1,['energy'],['energy']
Energy Efficiency,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:773,sustainab,sustainable,773,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['sustainab'],['sustainable']
Energy Efficiency,"Thanks for the analysis. After the wavefunction pass, I haven't revisited sow/reap operation at all, and I don't actually expect any of them to be working. Since you've obliged with an official ticket, I'll make a list of things to do :-); - [ ] grad by fd energy s/r; - [ ] freq by fd energy s/r; - [ ] freq by fd gradient s/r (new capability); - [ ] in opt by fd energy, make sure optdata is being carried along, rather than opt restarting from step 1 everytime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291#issuecomment-190004493:257,energy,energy,257,https://psicode.org,https://github.com/psi4/psi4/issues/291#issuecomment-190004493,3,['energy'],['energy']
Energy Efficiency,Thanks for the clarification! Revising the error message should reduce confusion.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477:64,reduce,reduce,64,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477,1,['reduce'],['reduce']
Energy Efficiency,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:70,adapt,adapts,70,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058,1,['adapt'],['adapts']
Energy Efficiency,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:193,energy,energy,193,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,4,['energy'],['energy']
Energy Efficiency,"Thanks for the insightful comments. @fevangelista @loriab @susilehtola Would QM/MM point charges entering the Hamiltonian or other perturbations have similar issues? Also, when computing derivatives of the energy, e.g. forces on nuclei, these will also be affected by the relativistic corrections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558485452:89,charge,charges,89,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558485452,2,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:552,adapt,adapt,552,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,4,"['adapt', 'energy']","['adapt', 'energy']"
Energy Efficiency,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:77,CHARGE,CHARGES,77,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117,2,"['CHARGE', 'charge']","['CHARGES', 'charges']"
Energy Efficiency,"Thanks for the replies! Just FYI that the ""other software"" that I tested, which seemingly worked (at least converged to a reasonable energy with the similar spin-square value) are ORCA and Terachem, as you may wonder. And yes, for Psi4 calculations from scratch for both basis sets work can converge to the same results. The issue only happens when I tried to do the project as I want to ensure the convergence to the same electronic state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-665093036:133,energy,energy,133,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-665093036,1,['energy'],['energy']
Energy Efficiency,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:1044,energy,energy,1044,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909,1,['energy'],['energy']
Energy Efficiency,"Thanks for the report!. I suspect you've been caught out by our rapidly changing DFT code. If you're using psi4conda, that's the last published release, so 1.1, which uses our home-grown DFT functionals before we switched out to Libxc (and added nifty things like `energy(..., dft_functional='b3lyp')`). You can check to confirm with `psi4 --version`. The 1.1 manual is at http://www.psicode.org/psi4manual/1.1/dft.html#advanced-functional-use-and-manipulation. See [here](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-into-an-ana-miniconda-distribution) for updating (still with conda) to the pre-1.2 development branch, for which your two commands should behave differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927#issuecomment-370153860:265,energy,energy,265,https://psicode.org,https://github.com/psi4/psi4/issues/927#issuecomment-370153860,1,['energy'],['energy']
Energy Efficiency,"Thanks for the report. I've been able to reproduce the crash. (I observe a fifth decimal place disagreement in DF-RKS SAD energy and a third decimal place disagreement in all iteration energies.) There are two things that worry me here:. 1. The crash itself. I struggle to imagine why the ADIIS optimization problem is so difficult to solve here.; 2. The abhorrent SCF energies. The energy jumps 138 hartrees after the guess! If I remember correctly, the SAD energy isn't the energy corresponding to a particular set of orbitals, but this is still astounding. @susilehtola may have some insight on this. I can poke on this, but the first step will be to try and reproduce this with a smaller system. I don't have access to 14 threads, so I'll have trouble running this repeatedly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164:122,energy,energy,122,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164,4,['energy'],['energy']
Energy Efficiency,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:405,energy,energy,405,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,2,['energy'],['energy']
Energy Efficiency,"Thanks for this!. Bullet points before an in-depth review:; * Why have separate `form_C` and `form_C_level_shift`? I could imagine a single `form_C` function that takes a level shift `int` that defaults to 0.; * This needs user docs on when to use level shifts, how to select a good level shift, and whether this will change the converged energy/orbitals/density-matrix/Fock-matrix; * To get the build working, please commit the `CMakeLists.txt` file for `scf-level-shift-rks`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2225#issuecomment-871767934:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/pull/2225#issuecomment-871767934,1,['energy'],['energy']
Energy Efficiency,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:858,energy,energy,858,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,1,['energy'],['energy']
Energy Efficiency,"Thanks for your answer! But can I use this file for a restart? This seems not to work:. `energy('scf',restart_file=""./output.default.17274.180.npz""); ` . thanks,; Christopher",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/918#issuecomment-365643972:89,energy,energy,89,https://psicode.org,https://github.com/psi4/psi4/issues/918#issuecomment-365643972,1,['energy'],['energy']
Energy Efficiency,"Thanks for your comments. I've changed `schedule(dynamic)` to `schedule(guided)` in the OpenMP loop.; I think @TiborGY is right that there is false sharing. I changed the code to create a copy of the output matrix `V_charge` for each thread and then sum them at the end. New timings are:. Cores | New code, no charges | New code, with charges; ---- | ---- | ----; 1 | 1.00 | 1.00; 2 | 1.67 | 1.29; 4 | 2.72 | 2.18; 8 | 3.92 | 3.57; 16 | 4.87 | 5.04; 32 | 5.80 | 7.21",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401:40,schedul,schedule,40,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656390401,8,"['charge', 'schedul']","['charges', 'schedule']"
Energy Efficiency,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:139,energy,energy,139,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,2,['energy'],['energy']
Energy Efficiency,"Thanks for your patience with the late response. Take this especially simple example with DF-OMP2; ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```. I have not found any alteration of `hess_type` lets me converge the maximum MO gradient below 1e-4. I am attempting to verify the correctness of my Psi4Numpy-type implementation of DF-OMP2, which converges to `-74.698372226179` in only 5 iterations using the exact MO hessian. This disagrees with Psi in the eighth decimal place, but the Psi answer's MO gradient is not adequately converged to determine if this is an error in my code. I have attempted swapping my guess orbitals for a few systems, and I have not once found that helpful in getting the MO gradient well converged. I'll be able to post some non-toy examples sometime in January.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680:372,energy,energy,372,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-449754680,2,['energy'],['energy']
Energy Efficiency,"Thanks for your quick reply, with 1.2.1 and an augmented basis set I still have problems in another system, see below. But do I understand correctly that master should work?. molecule ClCl {; -1 1; Cl 0.000000000 0.000000000 0.000000000; --; -1 1; Cl 0.700000000 0.000000000 0.000000000. units angstrom; no_reorient; }; set globals {; basis aug-cc-pVTZ; }; set_memory(32000000000); energy('sapt2+3(ccd)dmp2')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-465492870:382,energy,energy,382,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-465492870,1,['energy'],['energy']
Energy Efficiency,"Thanks, @VHchavez, that'd be a great help. I think PsiAPI is the better framework to describe more advanced topics like wfn. (The exception is the two mirrored tutorials in PSIthon and PsiAPI that we try to keep in sync.) Topics include how to get wfn, things on wfn, things not on wfn (e.g., amplitudes in most cases), when wfn might be inconsistent (energy is mp2, while orbitals are scf), numpy serialization (python_helpers.py), schema serialization (schema_wrapper.py), etc. Another thing is feel free to be more of a clearinghouse where you collect links to the p4n tutorial, the serialization code, the psi4.core.Wavefunction API docs, various test cases that use things off the wfn. All those other places are autogen or tested, so are a better place than docs for big code snippets. And folks interested in wfn are usually able and willing to read python code if directed, just not willing to sift through 1M lines to find it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121:352,energy,energy,352,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-956508121,2,['energy'],['energy']
Energy Efficiency,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-189992984:150,Energy,Energy,150,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984,6,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182875337:343,reduce,reduce,343,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337,1,['reduce'],['reduce']
Energy Efficiency,"Thanks, Lori. I’m still tied up with work in St Louis, but will get on this as soon as I get back to UT. It should be easy to find, I hope. > On Jul 18, 2015, at 12:46 AM, Lori A. Burns notifications@github.com wrote:; > ; > here's a minimal input for debugging; > ; > molecule {; > efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; > --; > O 4.0 0.0 0.0; > H 4.7 0.7 0.0; > H 3.3 -0.7 0.0; > --; > efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; > }; > ; > set basis cc-pvdz; > energy('scf'); > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/115#issuecomment-122486808.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-122544746:449,energy,energy,449,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-122544746,1,['energy'],['energy']
Energy Efficiency,"Thanks, although this was a reduced input file - I'm running with much more virtual states in the DMRG.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244672286:28,reduce,reduced,28,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244672286,1,['reduce'],['reduced']
Energy Efficiency,"Thanks, the basis set name makes sense. I will start naming my basis sets, but would it be possible to use a deterministic name for basis sets instead of a random one?. The `gradient` method does not use the `restart_file` keyword. I tried it, and it defaulted to the SAD guess. the SCF took 13 iterations to converge for the molecule in the original input file. As far as I can tell, only `energy` will utilize the guess from the restart file. I suppose I could call `energy(..., restart_file=X)`, then use `set guess read`, and then call `gradient`. That feels like more juggling than should be necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1121436485:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1121436485,2,['energy'],['energy']
Energy Efficiency,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:188,schedul,schedule,188,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077,1,['schedul'],['schedule']
Energy Efficiency,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178857878:279,energy,energy,279,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878,1,['energy'],['energy']
Energy Efficiency,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1503,allocate,allocate,1503,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,That is fine. I have some test cases with chargemol where I believe it can be very useful. Please ping me on the PR,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1138#issuecomment-416927479:42,charge,chargemol,42,https://psicode.org,https://github.com/psi4/psi4/pull/1138#issuecomment-416927479,1,['charge'],['chargemol']
Energy Efficiency,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081364:754,energy,energy,754,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364,2,['energy'],['energy']
Energy Efficiency,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:303,energy,energy,303,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936,2,['energy'],['energy']
Energy Efficiency,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:294,adapt,adapted,294,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['adapt'],['adapted']
Energy Efficiency,"That's right. I made three different mistakes in the units (missed the section you pointed out, didn't realize you were converting _to_ not _from_ SI at the end, and mixed up the probability-from-mean-intensity definition vs. the probability-from-energy-density definition of the Einstein B.). Documentation updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1084589177:247,energy,energy-density,247,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1084589177,1,['energy'],['energy-density']
Energy Efficiency,"That's still only if you're just looking at the density itself. If you want properties, then a O(1e-12) error in the NO coefficients can still yield noticable errors in matrix elements, since those get weighted by exponents. E.g. tight core exponents will have huge kinetic energy elements T_{ij}, but very small expansion coefficients. Still, the product of the two may well be significant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456181584:274,energy,energy,274,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456181584,1,['energy'],['energy']
Energy Efficiency,"The FNOCC module includes CEPA/LCCSD/CISD codes, and I suppose FNOCC’s version of CISD is default. That code assumes the number of virtual orbitals is greater than the number of occupied orbitals and won’t work in this case. You can invoke DETCI’s CISD code instead with . set ex_level 2; energy(‘detci’). > On Oct 25, 2017, at 12:55 PM, Susi Lehtola <notifications@github.com> wrote:; > ; > I also noticed like an hour ago that running energy('cisd') triggers for some reason a frozen natural orbital calculation. I don't think this should be happening..?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339397438>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGkBj9d5B7EnoRZvyETzQg7vKsysdks5sv2gegaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339405629:289,energy,energy,289,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339405629,2,['energy'],['energy']
Energy Efficiency,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282102859:497,adapt,adapted,497,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859,2,['adapt'],['adapted']
Energy Efficiency,"The NBody driver will need a similar fix as the SAPT driver, I think. http://forum.psicode.org/t/why-is-interaction-energy-of-a-halogen-bonded-complex-unexpectedly-and-surprisingly-positive/2352 shows that we freeze to many electrons on Na",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-957296211:116,energy,energy-of-a-halogen-bonded-complex-unexpectedly-and-surprisingly-positive,116,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-957296211,1,['energy'],['energy-of-a-halogen-bonded-complex-unexpectedly-and-surprisingly-positive']
Energy Efficiency,"The `gradient` call is using the whole CBS function for the displacements. Thus getting MP2 ""for free"". Looks like `ptype=energy` is run in `cbs()` because one does not get the `GRADIENT` label, while for the `hessian()` we get `ptype=hessian` which calculates a hessian for each component(?). The separation of MP2 and CCSD(T) for the `:D` part then uses DF-MP2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632827953:122,energy,energy,122,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632827953,1,['energy'],['energy']
Energy Efficiency,"The `pcg_convergence` behavior is a change for the better. Your analysis of the issue is right, but I'd rather couple `pcg_convergence` to `r_convergence`, how tightly the residual equations are satisfied. The CEPA is a touch trickier. My initial tests say that the energy convergence is working just fine. What isn't within convergence tolerance is the decomposition of correlation energy into same-spin and opposite-spin components. Is that what you're seeing? I can investigate, but this may not be an implementation issue, just a quirk of the equations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057:266,energy,energy,266,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676411057,2,['energy'],['energy']
Energy Efficiency,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:1182,power,powerful,1182,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204,1,['power'],['powerful']
Energy Efficiency,The basis set taken from https://github.com/HPQC-LABS/AI_ENERGIES/blob/master/GENBAS is here (just change the suffix): [aV10Z-FELLER_H.txt](https://github.com/psi4/psi4/files/5132469/aV10Z-FELLER_H.txt). Example input; ```; molecule {; 0 1; H; H 1 0.74; }. memory 8 gb; set basis aV10Z-FELLER; set scf_type direct; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681083674:315,energy,energy,315,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681083674,1,['energy'],['energy']
Energy Efficiency,"The benefits of the SAD guess are pretty humongous over the current default. E.g. ; ```; molecule {; 0 2; V 0.000000 0.000000 0.000000 ; N -0.009654 1.561722 1.062138 ; N 0.009654 -1.561722 1.062138 ; N -1.561722 -0.009654 -1.062138 ; N 1.561722 0.009654 -1.062138 ; C -1.219978 2.113945 1.655979 ; C 1.219978 -2.113945 1.655979 ; C -2.113945 -1.219978 -1.655979 ; C 2.113945 1.219978 -1.655979 ; C 1.188278 2.080402 1.709075 ; C -1.188278 -2.080402 1.709075 ; C -2.080402 1.188278 -1.709075 ; C 2.080402 -1.188278 -1.709075 ; H -2.112996 1.691813 1.177356 ; H 2.112996 -1.691813 1.177356 ; H -1.691813 -2.112996 -1.177356 ; H 1.691813 2.112996 -1.177356 ; H 2.089441 1.627028 1.275983 ; H -2.089441 -1.627028 1.275983 ; H -1.627028 2.089441 -1.275983 ; H 1.627028 -2.089441 -1.275983 ; H -1.254235 3.214541 1.536136 ; H 1.254235 -3.214541 1.536136 ; H -1.905317 -1.281383 -2.742242 ; H 1.905317 1.281383 -2.742242 ; H 1.192045 1.877111 2.798018 ; H -1.192045 -1.877111 2.798018 ; H -3.178469 1.263762 -1.584921 ; H 3.178469 -1.263762 -1.584921 ; H -1.281383 1.905317 2.742242 ; H 1.281383 -1.905317 2.742242 ; H -3.214541 -1.254235 -1.536136 ; H 3.214541 1.254235 -1.536136 ; H 1.263762 3.178469 1.584921 ; H -1.263762 -3.178469 1.584921 ; H -1.877111 1.192045 -2.798018 ; H 1.877111 -1.192045 -2.798018; }. set basis pcseg-1; set reference uhf; set scf_type direct; set sad_print 2; set guess sad; set sad_spin_average false; set df_scf_guess false; energy('scf'); ```. | Guess | Num iter | Energy |; | -- | -- | -- |; | fractional SAD, ground spin state | 13 | -1477.26833028686269 |; | fractional SAD, spin-averaged occupations | 14 | -1477.26833044972045 |; | gwh | 62 | -1477.12773301260950 |; | core | >100 | |. so not only is the number of iterations reduced by almost a factor of 5, it also yields a lower solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607232:1452,energy,energy,1452,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607232,3,"['Energy', 'energy', 'reduce']","['Energy', 'energy', 'reduced']"
Energy Efficiency,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:448,efficient,efficient,448,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['efficient'],['efficient']
Energy Efficiency,"The calculation I'm trying to run is; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Guess active space orbitals: (20e,40o); set restricted_docc [49]; set active [40]; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True). # Run (10e,10o) CASSCF; set frozen_docc [0]; set restricted_docc [64]; set active [10]; set nat_orbs true; cas_e, cas_wfn = energy('casscf', ref_wfn=ci_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598#issuecomment-276286479:1240,energy,energy,1240,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276286479,3,['energy'],['energy']
Energy Efficiency,"The ccenergy & detci shortcuts are basically there for the small subset of users (maybe 2) who know psi3 better than psi4 and for debugging. They were faintly documented here https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L103-L117 (first and last lines) but not advertised since it didn't match the psi4 philosophy of specific method. The `ex_level` wasn't intended to be used directly. Is it `energy(""ci5"")` that you're after? detci can do so many arbitrary orders (inefficiently) that we didn't want to clutter up the procedures dict (this was pre-dft days).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2282#issuecomment-904256592:427,energy,energy,427,https://psicode.org,https://github.com/psi4/psi4/issues/2282#issuecomment-904256592,1,['energy'],['energy']
Energy Efficiency,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:213,reduce,reduce,213,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,2,['reduce'],['reduce']
Energy Efficiency,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:73,efficient,efficient,73,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,10,"['adapt', 'allocate', 'efficient']","['adapted', 'allocate', 'efficient']"
Energy Efficiency,"The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand _why_ the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520:168,charge,charges,168,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520,1,['charge'],['charges']
Energy Efficiency,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29895339:507,energy,energy,507,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The contraption you show above could also be written as `if procedures['energy'][method_name] in [proc.run_scf, proc.run_tdscf_energy]:`. Regarding the nirrep>1 problem, it sounds like the backtransformation is either not numerically sound or is not being applied correctly. I didn't see anything wrong in the first pass through but I'll look again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644786185:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644786185,1,['energy'],['energy']
Energy Efficiency,"The conversion to traceless form can be done for any order of multipole, but I'm not really sure it's got a use case at this point. Quadrupoles in traceless form can be useful for force field definitions. Our CFMM code uses very high orders of multipoles, but they're converted to spherical harmonics to work with all the efficient machinery we've developed so that doesn't need the traceless definition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075088445:322,efficient,efficient,322,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075088445,1,['efficient'],['efficient']
Energy Efficiency,"The crash is also reproducible with a slightly smaller input; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=110; # virtuals. Let's take only the first 40 virtuals; set restricted_docc [32]; set restricted_uocc [70]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/606#issuecomment-277491791:1293,energy,energy,1293,https://psicode.org,https://github.com/psi4/psi4/issues/606#issuecomment-277491791,2,['energy'],['energy']
Energy Efficiency,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:343,reduce,reduced,343,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,1,['reduce'],['reduced']
Energy Efficiency,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275790678:71,Energy,Energy,71,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The farther the waters are apart the more positive the energy gets. Energy also stays essentially constant then. ```; @DF-RKS iter 4: -76.32981119020519 -1.12735e-04 7.24826e-05 DIIS; @DF-RKS iter 5: 119.53415655216450 1.95864e+02 4.45340e-01 DIIS; @DF-RKS iter 6: 119.53415655216457 7.10543e-14 4.45340e-01 DIIS; @DF-RKS iter 7: 119.53415655216453 -4.26326e-14 4.45340e-01 DIIS. ```. They are 5 A apart in the original example, quite far already. Putting them at 3 A leads to SCF convergence.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-360585139:55,energy,energy,55,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-360585139,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The first SAD energy gives you a general feeling of how well SAD is doing. We do mark this as ""Iteration 0"", but we could bump up the documentation level there. Either way very much not in favor of removing it wholesale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493#issuecomment-457198710:14,energy,energy,14,https://psicode.org,https://github.com/psi4/psi4/pull/1493#issuecomment-457198710,1,['energy'],['energy']
Energy Efficiency,"The following calculation; ```; molecule {; 0 1; He 0.0 0.0 -0.01; Gh(Be) 0.0 0.0 0.0; He 0.0 0.0 0.01; }. set basis ugbs; energy('scf'); ```; crashes with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0), (0, 2, 0.0), (1, 2, 0.0)]; ```; Something in the code (QCElemental?) is bastardizing the input so that the atoms that are well-separated are placed on top of each other. @loriab @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978:123,energy,energy,123,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978,1,['energy'],['energy']
Energy Efficiency,"The general plan here is to merge this likely before 1.3, but not hook this up to an external driver yet. So users curious in this code can still access it with a beta warning flag, but in general will not be accessible by non-power users. This will close #886.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-449586996:227,power,power,227,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-449586996,1,['power'],['power']
Energy Efficiency,"The guess energy changes by 0.018 H when changing the Cholesky threshold from 1e-6 to 1e-12. . Using `set sad_frac_occ true`, the job actually converges, and the guess energy from the source build and Conda binary are much more similar (within 0.0001 H):. Conda Binary:; `@DF-RKS iter 0: -1710.72967880925034 -1.71073e+03 1.05313e-01`. Source Build:; `@DF-RKS iter 0: -1710.72974672447867 -1.71073e+03 9.17594e-02`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-319403375:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319403375,2,['energy'],['energy']
Energy Efficiency,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254947891:106,reduce,reduced,106,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891,1,['reduce'],['reduced']
Energy Efficiency,The key information of the input file.; ```; memory 40 GB. molecule trimer {; 0 1; C 1.07154500 -0.44112100 1.91483900; C -0.17235900 -0.69652300 2.10370800; H -0.91485400 -1.28561300 2.61721300; C 2.45326100 -0.73511300 2.24630100; C 2.85437200 -2.08262200 2.30607700; C 3.40427800 0.27780800 2.45099100; C 4.18806600 -2.39739300 2.55990100; H 2.14221600 -2.86783100 2.07560500; C 4.73194500 -0.04754300 2.71722300; H 3.09893800 1.31634000 2.39879300; C 5.12929300 -1.38659800 2.76657000; H 4.48898800 -3.44096500 2.57307500; H 5.45915400 0.74482300 2.87386900; H 6.16909200 -1.63882200 2.95648300; --; 0 1; Ni 0.01252300 0.22250100 0.43479800; P -1.47081900 1.42539400 1.60377300; Br 1.54315200 -4.13099100 -0.43801300; ...; --; 0 1; P -1.40616300 -0.52452000 -1.14922700; ...; }. set {; scf_type DF; MAXITER 1000; freeze_core True; fisapt_do_plot true ; }. basis {; assign jun-cc-pvdz; assign Ni def2-svp; }. energy('fisapt0'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870#issuecomment-1411945748:912,energy,energy,912,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411945748,1,['energy'],['energy']
Energy Efficiency,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:657,charge,charge,657,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,3,['charge'],"['charge', 'charges']"
Energy Efficiency,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:231,allocate,allocated,231,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,4,['allocate'],['allocated']
Energy Efficiency,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17312112:385,adapt,adapted,385,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112,1,['adapt'],['adapted']
Energy Efficiency,The modification sounds fine to me. Will energy('hf') assume something about reference? e.g. rhf for closed shells and rohf for open shells. Or does the user have to always specify reference?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110147470:41,energy,energy,41,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110147470,1,['energy'],['energy']
Energy Efficiency,"The only test that failed in quicktests is x2c1, and I don't believe this PR is the culprit:. TestComparisonError: Non-relativistic CCSD energy: computed value (-76.2807318207) does not match (-76.2807318195) to 9 digits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981#issuecomment-384402964:137,energy,energy,137,https://psicode.org,https://github.com/psi4/psi4/pull/981#issuecomment-384402964,1,['energy'],['energy']
Energy Efficiency,"The overall intent is that we usually run psi4 from an outside workflow that runs exactly _one_ single-point energy per infile (or a scan of geometrically-related single point energies, e.g., a dimer being pulled apart). Usually, each of these calculations represents ONLY a monomer, or the dimer. We have a lookup table of how many orbitals we want to freeze in post-HF calculations, and the most visible way to apply that setting was to just set `num_frozen_docc`. For example, if we wanted to calculate the interaction energy of a water-alkane dimer at the MP2 level, we'd have three calculations:; - A in the AB basis with `num_frozen_docc` set accordingly for A; - B in the AB basis with `num_frozen_docc` set accordingly for B; - AB in the AB basis with `num_frozen_docc` set accordingly for AB. This scheme worked very well, until it came time to run SAPT0 calcs. As I admittedly hadn't thought through the effect of an incorrect `n_frozen_docc` on the monomer calcs done within the SAPT0 dimer calc (and presumed them to be at the HF level anyway), I didn't think to check for correct behavior. . The only place where our frozen-core lookup table disagrees with psi4's is for some more exotic elements (transition metals), so for now my solution is to just use `freeze_core true` for all SAPT0 calcs and go about my life. And when I thought the bad setting _just_ caused segfaults, I was fine to assume that all calculations that ran to completion were obviously OK. Now seeing that there's some shade of undefined behavior leading to memory corruption possibly going on, I'd like to understand what is going wrong so I can figure out what's likely impacted... cases where the energy is obviously and egregiously wrong (like above) are easy, but I'm worried more about subtle incorrectness. As for the general fix -- if `num_frozen_docc` is disabled for SAPT0, then it becomes impossible for a user to impose their own beliefs about frozen orbitals in tricky cases like transition metals, whic",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380,2,['energy'],['energy']
Energy Efficiency,"The picture change transformation error should only be relevant in the nuclear region. If you have point charges in a QM/MM embedding fashion, these should be so far away from the QM regions that picture-change transforming that potential would have a negligible numerical effect. This is the approached used [here](https://pubs.acs.org/doi/10.1021/acs.jctc.7b00162) As far as I know, no one ever tested this assumption. The authors of this paper note:. > A note should be added regarding the use of X2C Hamiltonians. In this case, the one-electron part of the Fock matrix is transformed (see, e.g., ref 7 for details). Strictly, all external fields (including a field from a environment) should also be transformed. Currently, our PE-X2C-DFT implementation involves transformation only of the vacuum terms. Thus, the PE operator is left untransformed, and the untransformed operator is carried over to the linear response formalism described below (following the general implementation in the DIRAC program, all property operators are always transformed).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297:105,charge,charges,105,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558530297,1,['charge'],['charges']
Energy Efficiency,"The potential gradient function should be usable to compute gradients on point charges, since the gradient for a point charge is simply the charge multiplied by the potential gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210:79,charge,charges,79,https://psicode.org,https://github.com/psi4/psi4/issues/2472#issuecomment-1066175210,6,['charge'],"['charge', 'charges']"
Energy Efficiency,"The problem appears to be as follows:. The Bozkaya OO code and the DCT OO code use different indexing conventions with libdpd. What one code says is a column index, the other says is a row index. Consequently, they conflict with each other when trying to pull files from libtrans. At the least, that is what is happening on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_integrals_UHF.cc#L362) of the DCT code. While a user can fix this with `clean()` calls, an in-program fix is harder. If we put a `clean()` call at the end of the energy calls in `procrouting`, we obliterate the density matrices that may be needed if `energy` was called by `gradient`. The only solutions I can see are to unify the indexing conventions or to leave modification/sorting of `libtrans` files to `libtrans`. We had also best do _something_ to prevent this problem from recurring. What that looks like will depend on the fix we make. Either way, might I suggest we put this on the agenda for PsiCon?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456:563,energy,energy,563,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456,2,['energy'],['energy']
Energy Efficiency,"The problem is not IO issues from parallel testing. The problem is an actual, reproducible segfault on the testing machine. On psinet, this input:. ```; cdsgroup@bash:psinet:/scratch/cdsgroup/conda-builds/work/tests/fnocc2: cat alt.in ; molecule {; O 0.000000000000 0.000000000000 -0.066736129322; H 0.000000000000 -0.763241114523 0.529575400775; H 0.000000000000 0.763241114523 0.529575400775; }. set scf_type out_of_core; set basis 6-311G(D_P). energy('qcisd(t)'); ```. gives a valgrind output the end of which is:. ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:447,energy,energy,447,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['energy'],['energy']
Energy Efficiency,"The problem is that the pubchem structure does not appear to have Cs symmetry. The pubchem geometry gives; ```; ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F 1.054979085535 0.279491800552 0.000000000000 18.998403162730; C -0.000320914465 -0.577108199448 0.000000000000 12.000000000000; C -1.279120914465 0.226491800552 0.000000000000 12.000000000000; H 0.072379085535 -1.206508199448 -0.891000000000 1.007825032230; H 0.072279085535 -1.206508199448 0.891000000000 1.007825032230; H -2.153920914465 -0.429408199448 -0.000100000000 1.007825032230; H -1.322020914465 0.874191800552 0.881000000000 1.007825032230; H -1.321920914465 0.874291800552 -0.880900000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = 1.21162 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A = 36323.59189 B = 9689.02155 C = 8459.03982 [MHz]; Nuclear repulsion = 80.019990391667150; ```. Reading this into IQmol and running ""Symmetrize geometry"", I get; ```; ==> Geometry <==. Molecular point group: cs; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; F -0.264271602373 1.058895456489 0.000000000000 18.998403162730; C 0.577048397627 -0.008634543511 0.000000000000 12.000000000000; C -0.244891602373 -1.275724543511 0.000000000000 12.000000000000; H 1.207428397627 0.054945456489 -0.891000000000 1.007825032230; H 1.207428397627 0.054945456489 0.891000000000 1.007825032230; H 0.398348397627 -2.159884543511 0.000000000000 1.007825032230; H -0.893191602373 -1.309244543511 0.880950000000 1.007825032230; H -0.893191602373 -1.309244543511 -0.880950000000 1.007825032230. Running in cs symmetry. Rotational constants: A = 1.21161 B = 0.32319 C = 0.28216 [cm^-1]; Rotational constants: A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252:203,charge,charge,203,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062277252,1,['charge'],['charge']
Energy Efficiency,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:840,energy,energy,840,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['energy'],['energy']
Energy Efficiency,The question is how to run truncated CI most efficiently in detci.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-276765389:45,efficient,efficiently,45,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276765389,1,['efficient'],['efficiently']
Energy Efficiency,"The reference ground-state multiplicities, particularly for heavier elements, may not be correct. Also there is the larger question of whether to use the broken-symmetry ground-state densities, as is done here, or to use the spin-averaged ones as is done in the SAD code. In the original MBIS paper ([https://pubs.acs.org/doi/pdf/10.1021/acs.jctc.6b00456](url), sec 5), they explore both options, and find that the broken-symmetry, ground-state densities give more accurate dispersion coefficients (computed with the Tkatchenko-Scheffler method, which relies on these volume ratios) with the MBIS method. Given that these volume ratios are used for force field development, I wouldn't be too concerned with potential inaccuracies in the multiplicities of heavier elements. That said, I think the option to use either the broken-symmetry densities or the spin-averaged ones should be made possible. I think it would likely be cleanest for me to get the densities directly from SAD (since it can handle both cases already) and pass them to the MBIS code, rather than calling `energy` and `oeprop` as I've currently done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-794000033:1074,energy,energy,1074,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-794000033,1,['energy'],['energy']
Energy Efficiency,"The reference is already somewhat off:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; - Nuclear Repulsion Energy (a.u.) : 25.59060766929189; - CD-HF Energy (a.u.) : -129.25927207001686; - REF Energy (a.u.) : -129.25927207001686; - Alpha-Alpha Contribution (a.u.) : -0.04358607252482; - Alpha-Beta Contribution (a.u.) : -0.22869655849159; - Beta-Beta Contribution (a.u.) : -0.04274321396769; - Scaled_SS Correlation Energy (a.u.): -0.02877642883084; - Scaled_OS Correlation Energy (a.u.): -0.27443587018991; - CD-SCS-MP2 Total Energy (a.u.) : -129.56248436903761; - CD-SOS-MP2 Total Energy (a.u.) : -129.55657759605592; - CD-SCSN-MP2 Total Energy (a.u.) : -129.41121161424368; - CD-MP2 Correlation Energy (a.u.) : -0.31502584498410; - CD-MP2 Total Energy (a.u.) : -129.57429791500095; + Nuclear Repulsion Energy (a.u.) : 25.59060766929188; + CD-HF Energy (a.u.) : -129.25927206477397; + REF Energy (a.u.) : -129.25927206477397; + Alpha-Alpha Contribution (a.u.) : -0.03921205696199; + Alpha-Beta Contribution (a.u.) : -0.20476196654188; + Beta-Beta Contribution (a.u.) : -0.03692010667753; + Scaled_SS Correlation Energy (a.u.): -0.02537738787984; + Scaled_OS Correlation Energy (a.u.): -0.24571435985026; + CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; + CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; + CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; + CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; + CD-MP2 Total Energy (a.u.) : -129.54016619495539; ======================================================================= . ```. Should I post the whole diff against output.ref? I just saw output.ref seems to have been generated with 0.5, can somebody confirm this is not a general problem on 1.0rc? All other tests in `quicktests` have passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222312734:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222312734,21,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The relaxed density matrix is computed every time property() is executed. Some methods dump it to disk, but some only store it in memory. As to the charges, property() has the ability to compute Mulliken charges, and for most of the methods implemented it already prints them out at the end of the computation, even if not explicitly requested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38213986:148,charge,charges,148,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213986,2,['charge'],['charges']
Energy Efficiency,The remaining problem would be that `H` is recalculated manually by directly calling [so_potential](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1261) that only knows about DKH and not X2C. ; That means X2C is only included in the SCF energy and not in the Fock matrix in DF/CD-(FNO)-CC.; X2C did not crash the calculation. Either `H` is taken from the SCF wavefunction object like done elsewhere (e.g in [dfocc](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/get_moinfo.cc#L367) or the X2C potential needs to be added somehow. Direct use of `so_potential` is done here (as far as I could find):; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/frozen_natural_orbitals.cc#L1039; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714. The other occurrence I found is in the SCF template: https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/scf/scf.cc.template,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788:270,energy,energy,270,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788,1,['energy'],['energy']
Energy Efficiency,"The result of test has changed:; ```; $ ctest --output-on-failure -R cookbook-rohf-orb-rot; Test project /home/raimis/psi4.git/linux_build; Start 401: cookbook-rohf-orb-rot; 1/1 Test #401: cookbook-rohf-orb-rot ............***Failed 22.19 sec; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy......................................................PASSED; 	A CCSD energy.....................................................PASSED; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 84, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cart = 22.19 sec*proc (1 test); cookbook = 22.19 sec*proc (1 test); psi = 22.19 sec*proc (1 test). Total Test time (real) = 22.35 sec. The following tests FAILED:; 	401 - cookbook-rohf-orb-rot (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095:251,energy,energy,251,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095,8,['energy'],['energy']
Energy Efficiency,"The solution to the problem is to call fchk instead of the FCHKWriter function. . With fchk(wfn, 'molecule.fchk'), the CC density is printed out successfully. . I just wanted to put this out to save other people the trouble. . ```; memory 55 GB. molecule water {; 0 1; O 0.000000 0.119325 0.000000; H 0.763133 -0.477420 0.000000; H -0.763133 -0.477177 0.000000. symmetry c1; no_com; no_reorient; }. set {; basis aug-cc-pVTZ; scf_type df; cc_type df; }. set_num_threads(6). #e, wfn1 = energy('ccsd(t)', return_wfn=True,); grad, wfn = gradient('ccsd(t)', return_wfn=True). fchk(wfn, 'molecule.fchk'). #fchk_writer = psi4.FCHKWriter(wfn); #fchk_writer.write('molecule.fchk'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2275#issuecomment-897965622:484,energy,energy,484,https://psicode.org,https://github.com/psi4/psi4/issues/2275#issuecomment-897965622,1,['energy'],['energy']
Energy Efficiency,"The sum of Mulliken charges should not be positive or negative, it should be zero for a charge neutral system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-455882484:20,charge,charges,20,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-455882484,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:323,energy,energy,323,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003,2,['energy'],['energy']
Energy Efficiency,"The test is very like [sapt-dft1](https://github.com/psi4/psi4/blob/master/tests/sapt-dft1/input.dat) except He instead of Ar. I computed the grac-s of all three in molpro, and it still fails on iterations, though far better behaved. ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between He and Ar atoms. molecule dimer {; He; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.2316; sapt_dft_grac_shift_b 0.14208 #0.138264; }. # Molpro Ne,Ar: aug-cc-pvqz He: def2-qzvpp; # He 0.23160613844599998; # Ne 0.2069797945509999; # Ar 0.14207557000000004. energy('sapt(dft)', molecule=dimer); ```. ```; @DF-RKS iter 95: -0.14789452072560 -7.20653e-11 2.50590e-02 DIIS; @DF-RKS iter 96: -0.14789452081143 -8.58302e-11 2.50590e-02 DIIS; @DF-RKS iter 97: -0.14789452057679 2.34638e-10 2.50590e-02 DIIS; @DF-RKS iter 98: -0.14789452082882 -2.52026e-10 2.50590e-02 DIIS; @DF-RKS iter 99: -0.14789452079974 2.90820e-11 2.50590e-02 DIIS; @DF-RKS iter 100: -0.14789452100104 -2.01303e-10 2.50590e-02 DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304:276,energy,energy,276,https://psicode.org,https://github.com/psi4/psi4/issues/1684#issuecomment-515629304,2,['energy'],['energy']
Energy Efficiency,"The two bottlenecks that you have identified are the computation of the ESP at the tesserae and then computing the contribution of the resulting charges back to the Fock matrix. Both terms use the exact same one-electron potential integrals, which are not very efficient in the current version and are computed in serial. The serial performance issue is addressed in #592, but we can probably do even more improvement of the OS recursions to speed up these one electron ints, whose cost is negligible in regular QM calcs. Unlike explicit water QM/MM runs, we can't really do much by way of screening here I don't think, but I haven't pursued that. A simple OpenMP parallelization will go a long we here, however. I'm also looking into how to implement ddCosmo as a backend; although PCMSolver is not the bottleneck here, it'd be really helpful to have analytic gradients with implicit solvent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742:145,charge,charges,145,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742,4,"['charge', 'efficient']","['charges', 'efficient']"
Energy Efficiency,"The two installs are https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L355 and https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L315-L316 . The former copies the quadrature files into `<objdir>/stage/share/` and the latter copies the whole `<objdir>/stage/` into `CMAKE_INSTALL_PREFIX`. From the `find` output you posted and an earlier issue, I think your CMake build setup or the FreeBSD layout is doing something unexpected at the install. Short of understanding where that's happening, adapting your recipe to remove the extra dirs may be your best bet. ```; >>> objdir_py310_gcc: (sdftd3) find . -name ""1_xk01_1E1""; ./stage/share/psi4/quadratures/1_x/1_xk01_1E1; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085:513,adapt,adapting,513,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085,1,['adapt'],['adapting']
Energy Efficiency,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76#issuecomment-78986839:484,energy,energy,484,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839,1,['energy'],['energy']
Energy Efficiency,Then I suspect that the degeneracy of the orbitals might be the cause of the problem. If the orbitals are degenerate then any arbitrary rotation would give you the same SCF energy but different CI wave functions. Am I missing something?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301918898:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301918898,1,['energy'],['energy']
Energy Efficiency,"Then there is something that is not done correct with the new passed D2 matrix to points..; ```; molecule mol {; 0 1; O 0.000000 1.031228 1.125381; H 0.000000 1.785070 0.512177; H 0.000000 0.253722 0.542498; }; set scf_type df; set basis cc-pVTZ. E, wfn = energy('pbe',return_wfn=True); bas = wfn.basisset(); for x in range(bas.nshell()):; shell = bas.shell(x); nfunc = shell.nfunction; fi = shell.function_index; ce = shell.ncenter; print(""Basis {}, AM = {}, center {}, indices = {}"".format(x, shell.am, ce, range(fi, fi + nfunc))); ```; prints:; ```; Basis 0, AM = 0, center 0, indices = [0]; Basis 1, AM = 0, center 0, indices = [1]; Basis 2, AM = 0, center 0, indices = [2]; Basis 3, AM = 0, center 0, indices = [3]; Basis 4, AM = 1, center 0, indices = [4, 5, 6]; Basis 5, AM = 1, center 0, indices = [7, 8, 9]; Basis 6, AM = 1, center 0, indices = [10, 11, 12]; Basis 7, AM = 2, center 0, indices = [13, 14, 15, 16, 17]; Basis 8, AM = 2, center 0, indices = [18, 19, 20, 21, 22]; Basis 9, AM = 3, center 0, indices = [23, 24, 25, 26, 27, 28, 29]; Basis 10, AM = 0, center 1, indices = [30]; Basis 11, AM = 0, center 1, indices = [31]; Basis 12, AM = 0, center 1, indices = [32]; Basis 13, AM = 1, center 1, indices = [33, 34, 35]; Basis 14, AM = 1, center 1, indices = [36, 37, 38]; Basis 15, AM = 2, center 1, indices = [39, 40, 41, 42, 43]; Basis 16, AM = 0, center 2, indices = [44]; Basis 17, AM = 0, center 2, indices = [45]; Basis 18, AM = 0, center 2, indices = [46]; Basis 19, AM = 1, center 2, indices = [47, 48, 49]; Basis 20, AM = 1, center 2, indices = [50, 51, 52]; Basis 21, AM = 2, center 2, indices = [53, 54, 55, 56, 57]; ```. if I use all basis functions in indices:; ```; 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ; number of electrons: 9.93018. ```; only Hydrogens:; ```; 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436412695:256,energy,energy,256,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436412695,1,['energy'],['energy']
Energy Efficiency,"There are a few issues here, first you set `soscf true` which will fail for the `bp86` computation so you would need to switch it off. In addition, `basis_guess` will override `guess read` so your input file should look like:. ```; set basis_guess false; set soscf false; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. Both SCF taking guess Wavefunctions and the combination of read options all relate to issue #483. Without some discussion there on all of the possible use cases and how these options should interact with each other I probably will not make fundamental changes to how SCF guessing works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612#issuecomment-278680499:309,energy,energy,309,https://psicode.org,https://github.com/psi4/psi4/issues/612#issuecomment-278680499,1,['energy'],['energy']
Energy Efficiency,"There have been many issues in [PySCF ](https://github.com/pyscf/pyscf) with similar issues in that changing the number of threads results in significant changes in the SCF energy. The origin of these issues has always been an inconsistent set of OpenMP libraries, and my best guess is that that's also the case here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2429922482:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2429922482,1,['energy'],['energy']
Energy Efficiency,"There is also the old-school way via orbital energy thresholds (below -3.5 eV works quite well). Could indirectly solve specific wants. per atom/fragment declaration could be useful perhaps and would be, I think, a stand-out feature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437595468:45,energy,energy,45,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437595468,1,['energy'],['energy']
Energy Efficiency,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-300683881:116,energy,energy,116,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881,2,['energy'],['energy']
Energy Efficiency,There is something wrong with the (ia|jb) block of integrals. This is probably why the first iteration of CCSD has zero correlation energy. Could you send your atomic coordinates so I can try to reproduce this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-34625278:132,energy,energy,132,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34625278,1,['energy'],['energy']
Energy Efficiency,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:134,adapt,adaptation,134,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941,2,['adapt'],['adaptation']
Energy Efficiency,"There's a bypass_scf=True argument to energy() that may help. Look in proc.py if I don't have the syntax quite right. . Sent from my iPhone. > On May 30, 2015, at 12:08 PM, wpoely86 notifications@github.com wrote:; > ; > It's not clear to me if it's possible to start from a previous calculated rhf result to do for example ccsd(t). Can this be done? If I keep the scratch dir, and use the -r parameters with guess read, it will start from the rhf solution of the previous run, but it will still do the rhf calculation and integral transformations. I would like it to directly start with the ccsd(t) calculation, and not redo the rhf calculation. Is this currently possible?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/102#issuecomment-107072181:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072181,2,['energy'],['energy']
Energy Efficiency,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:568,power,power,568,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900,1,['power'],['power']
Energy Efficiency,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304462078:531,energy,energy,531,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078,2,['energy'],['energy']
Energy Efficiency,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,1,['energy'],['energy']
Energy Efficiency,"These definitions all look ok. It's correct that the CCSD energy should; not equal the sum of the same-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:58,energy,energy,58,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275696746:708,energy,energy-large,708,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746,2,['energy'],['energy-large']
Energy Efficiency,"This PR will have a merge conflict with my #2247. I wasn't comfortable touching the SCF code this close to 1.4 _then_, and I'm still not comfortable with it now. My vote is to keep this as a 1.5 target. I would prefer a dedicated option or keyword argument to `energy` for the short-circuit. Yes, this is a _reasonable_ behavior, but:. 1. Explicit is better than implicit.; 2. The SCF code is too complicated as-it-is due to overloading of the meaning of the `iterations_` variable. It was reasonable in one or two places, but becomes a mess as different parts of the code use it slightly differently. I'm paranoid of variable overloading, and having a special case of `maxiter = 0` is too close to that for comfort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352:261,energy,energy,261,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352,1,['energy'],['energy']
Energy Efficiency,"This advice is fine. Try `opt_coordinates = 'cartesian'` (which worked for me); But I just tried with the psi4 on my macbook 1.4rc3.dev3, and the optimization ran perfectly smoothly. Also, there is a confusingly named but powerful keyword `dynamic_level = 1`. This will cause alternative optimization algorithm to run if the first one fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362:222,power,powerful,222,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362,1,['power'],['powerful']
Energy Efficiency,"This could explain some bugs we've been seeing lately. I don't know who introduced ""coldim"" and why it is needed if we already; have nmopi. On Tue, Feb 23, 2021 at 9:37 PM Eugene DePrince <notifications@github.com>; wrote:. > DF-CC freaks out when linear dependencies are present, and i tracked the; > issue to an inconsistency between reference_wavefunction_->nmopi() and; > reference_wavefunction_->Ca()->coldim(). The latter has the correct value; > when linear dependencies are removed.; >; > Should nmopi() and Ca()->coldim() be consistent in this case?; >; > Minimal input:; >; > molecule {; > o; > h 1 1.0; > h 1 1.0 2 104.5; > }; >; > set {; > basis 'aug-cc-pvtz'; > scf_type df; > cc_type df; > s_tolerance 1e-3; > }; > energy('ccsd'); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2120>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5THGTZ2CCKELMGOIZ3TARQ5JANCNFSM4YDUMEUA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707:729,energy,energy,729,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707,1,['energy'],['energy']
Energy Efficiency,This does not appear to be fixed with the new CI code. I now get an energy of -1492.0189996...; Likely related to issue #69,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-170681070:68,energy,energy,68,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-170681070,1,['energy'],['energy']
Energy Efficiency,"This input runs fine for HF, for me. Let me know if you need anything else. ```python; ref_nuc_energy = 5.176733562293478; ref_rel_energy = -100.10780818747669. molecule hf{; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; basis_relativistic cc-pvdz-decon #Must Specify relativistic basis; #when using decontracted primary basis; relativistic x2c; }. testrel = energy('hf'). compare_values(ref_nuc_energy, hf.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(ref_rel_energy,testrel, 9, ""X2C relativistic SCF energy"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288839643:370,energy,energy,370,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839643,3,['energy'],['energy']
Energy Efficiency,"This is a Davidson error. Looks like as soon as the norm of the correction vector gets small enough an instability occurs causing a non-variational energy. Very hard to debug and/or fix. Dividing small numbers by small numbers is always tricky. If you are just after the energy (the only things the current CI code can do at the moment) the simplest option is to reduce your CI convergence threshold to something reasonable like `r_convergence 1.e-4` . You can also try setting `hd_avg hd_exact` in your settings. . Also, something like this really belongs on the [Psi forums](http://forum.psicode.org/latest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/448#issuecomment-235024888:148,energy,energy,148,https://psicode.org,https://github.com/psi4/psi4/issues/448#issuecomment-235024888,6,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184227998:731,reduce,reduce,731,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998,1,['reduce'],['reduce']
Energy Efficiency,"This is pretty early days on this PR. The short is that a `Computer` can be `CBS/FindIf/N-Body/Single/etc` (?) so that you can nest them and where a `Single` is the only object that calls quantum chemistry. For example, a `N-Body` can be made up of `Single` computations or `CBS` computations where a CBS computation will be made up for two or more `Single` computations. In this case, calling `compute` on `N-Body` will call `compute` on all of its children which if is a `Single` will call a quantum chemistry computation or if `CBS` will call 2 or more single computations (or FindIf!) and then construct that data into an extrapolated energy which will be given to `N-Body`. The key here is that the `Single` can have three modes 1) a continuous computation on a single node 2) a sow/reap mode using files and 3) a sow/reap mode using [QCFractal](https://qcfractal.readthedocs.io/en/latest/). There will assuredly be many more docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-437624744:639,energy,energy,639,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-437624744,1,['energy'],['energy']
Energy Efficiency,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:814,adapt,adapted,814,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,2,['adapt'],['adapted']
Energy Efficiency,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:191,energy,energy,191,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['energy'],['energy']
Energy Efficiency,"This is very odd, indeed. With Q-Chem I get the following results. | | HF | MP2 |; |--|--|--|; |Kr2 dimer | -5478.3777659931 | -5478.43678797 |; |Kr atom | -2739.1975667825 | -2739.22713486 |; |interaction energy | 0.017368 | 0.017482 |. which are close to the original df values, so the new values are wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452700868:206,energy,energy,206,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452700868,1,['energy'],['energy']
Energy Efficiency,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183423323:50,Energy,Energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"This is what I got and that looks good to me, too:; ```; *** tstop() called on larry at Mon Jan 30 20:51:46 2017; Module time:; user time = 0.35 seconds = 0.01 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 24.96 seconds = 0.42 minutes; system time = 0.20 seconds = 0.00 minutes; total time = 28 seconds = 0.47 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```. What does this mean: `Exit Status: infile ( -6 )`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276601165:481,energy,energy,481,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276601165,2,['energy'],['energy']
Energy Efficiency,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:290,ENERGY,ENERGY,290,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"This looks like the same issue as #1924, except #1924 is a much quicker computation to run. Unfortunately, I don't know what the issue here is and can't recommend a way around it. The other person with a similar issue said that switching to Cartesian coordinates helped them?. I'll add that the ECP gradient terms took a suspiciously long time to compute, and that the SCF iterations should have gone much faster. It took about 13 iterations(!) for the SCF energy to be to lower than the initial SCF guess energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640549188:457,energy,energy,457,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640549188,2,['energy'],['energy']
Energy Efficiency,"This question would probably be better asked on the [Matter Modeling sackexchange site](https://mattermodeling.stackexchange.com/), or maybe the Psi4 forum. But not as a Github issue. Make sure you are accounting for the fact that your cyclic molecule has 4 fewer hydrogen atoms! If you want to compute any kind of energy difference between those two molecules, those hydrogens need to go somewhere, your reaction needs to be balanced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3077#issuecomment-1812895975:315,energy,energy,315,https://psicode.org,https://github.com/psi4/psi4/issues/3077#issuecomment-1812895975,1,['energy'],['energy']
Energy Efficiency,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:320,energy,energy,320,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,2,"['allocate', 'energy']","['allocated', 'energy']"
Energy Efficiency,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:546,energy,energy,546,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,3,['energy'],['energy']
Energy Efficiency,"Timings test indicate that re-allocation cost is negligible. All these quantities are `n^2`, and a 5000 x 5000 matrix takes about 0.11 seconds to allocate on my laptop. That's nothing in comparison to the diagonalization time. I no longer see a barrier to merging this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2319#issuecomment-944352419:146,allocate,allocate,146,https://psicode.org,https://github.com/psi4/psi4/pull/2319#issuecomment-944352419,1,['allocate'],['allocate']
Energy Efficiency,"To Jerome's point, I would agree that for UHF doing stability analysis; helps a lot. However, we have also seen cases when stability analysis; severely breaks spin symmetry and converges on the wrong (or mixed) spin; state instead of the lowest energy root of desired spin. So one should be; careful about this issue. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; alexander.y.sokolov@gmail.com> wrote:. > I would add that lately we have seen a lot of problems with UHF and ROHF; > converging on a wrong state for open-shells in Psi4. Although new stability; > analysis code helps a lot in fixing some of the problems (for UHF), for; > many of these systems finding the lowest root is quite non-trivial and is; > accompanied by many SCF convergence issues, as well as symmetry-breaking; > issues (UHF). Things get a lot worse for transition metal compounds (even; > simple ones, like Fe(CO)5). The most helpful solution is to start with; > basis set projection from a small basis, but this strategy doesn't always; > work. Sometimes, combining stability analysis root search and basis set; > projection helps.; > ; > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > finding lowest-energy solutions for systems of this type. Usually, after; > investing some time, it is possible to find the necessary solution for; > these non-trivial cases with Psi4, but it may be worth investigating some; > of these systems for possible improvements in the code.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I guess these other codes are; > > using some other convergence accelerator than Psi4 ? I would not be; > > surprised if SOSCF with a core guess would converge on the right solution.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171660919:245,energy,energy,245,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171660919,4,['energy'],['energy']
Energy Efficiency,"To answer your first question: `set guess read` does fix this problem. . I can not pass a wavefunction to a second scf call. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf', ref_wfn=refwfn) ; ```. I get an error that scf_helper can not take a wavefunction. Not sure if this is what you wanted me to do. If I run two scf calls. ```; refscf, refwfn = energy('scf', return_wfn=True) ; energy('scf'); ```. This works fine. This has the same effect as set guess read, so I guess there is a check to see if a previous scf has ran. . So it seems that there is no problem with reading the orbitals, but passing them seems to be off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227802600:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227802600,4,['energy'],['energy']
Energy Efficiency,"To be fair, I don't understand big parts of nbody either - the whole factorial thing is a bit strange. Which is why if we'd like return an object containing all possible nbody x bsse_type results from the data calculated by the combination of bsse_type and return_total_data, it'd take me a lot of work to get there - and is probably not worth it before DDD is in. The problem with the link between `energy_body_dict` and the returned data is that it's copied to the results directly, and if the calculation cannot compute total energies, it only returns an intermediate. For most cases that's sort of OK (since the intermediate is 0), but in the case of counterpoise without calculating monomers in monomer basis, the intermediate is the interaction energy:. ```; 2CP = Etot,cp = E(AB)_AB - E(A)_AB - E(B)_AB + E(A)_A + E(B)_B; 2CP = Etot,cp = Eint,cp + monomer_energies; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871913661:751,energy,energy,751,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871913661,1,['energy'],['energy']
Energy Efficiency,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:69,energy,energy,69,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,1,['energy'],['energy']
Energy Efficiency,"To give my 2 cents to the questions above:; - `freeze_core True` should be a best-effort solution, always freezing as much as possible, but ensuring there are valence electrons (ie. for Ca2+, [Ne] core is frozen instead of [Ar], while for Ca0, [Ar] is frozen; similarly for Ar- the whole [Ar] shell should be frozen). This one is charge aware. This option should never crash the code.; - `freeze_core N` where `N = [1,2,3...]` will always freeze the N-th previous full shell, ie for `N=1` the current behaviour in master. Validation error when no valence electrons remain, to avoid the non-helpful segfault in #1271.; - @JonathonMisiewicz's idea of per-atom frozen cores (or in my view even better: per-fragment frozen orbitals) is a good one, and I'd be keen to get that sorted, but it'd probably need changes to `molecule {}` or somewhere else.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950:330,charge,charge,330,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950,1,['charge'],['charge']
Energy Efficiency,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264418892:537,power,powerful,537,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892,2,['power'],['powerful']
Energy Efficiency,"To sum up the discussion so far:; * The original geometry was malformed. Not a Psi4 problem.; * We've noticed large changes in energy in the early iterations, with the malformed geometry and a SAD guess. Not a Psi4 problem. (See https://github.com/psi4/psi4/issues/2641#issuecomment-1192909620); * There's been some discussion over how appropriate custom setting DFT VV10 c parameters is. Not a Psi4 problem.; * It's still possible to cause A/EDIIS failure with a sufficiently non-physical Hamiltonian, whether due to DFT VV10 parameters or a compressed geometry. **This is a Psi4 problem.**. I'll see what I can do about the last one, but I suspect that my options will be very limited.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194129799:127,energy,energy,127,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194129799,1,['energy'],['energy']
Energy Efficiency,"To summarise, it seems that running DF-MP2/3-21G is a bad idea for these small systems. The value of the interaction energy one gets, even with `E_CONVERGENCE` and `D_CONVERGENCE` at 1.0e-12, differs in the 4th DP based on which `DF_FITTING_CONDITION` is used. This caused the change in the energy during this PR (`df_fitting_condition 1.0e-10 -> 1.0e-12`). The def2-svp basis set is not affected nearly as much, as its fitting basis is better suited for the purpose. Switching the basis set in the test and tightening the energy/density convergence criteria to 1e-10 passes agreement with 1e-12 reference to 8DP's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452840875:117,energy,energy,117,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452840875,3,['energy'],['energy']
Energy Efficiency,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:503,energy,energy,503,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,2,['energy'],['energy']
Energy Efficiency,"Trouble is nothing to do with Hessian (it's hanging at the preliminary energy calc) and everything to do with setting more than one thread. ```; (p4dev36) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-qcdb/objdir-gnu36: ((detached from matt/SYMM_JK)) cat ../tests/psi4numpy/rhf-hessian/input.py ; # -*- coding: utf-8 -*- . import time; import numpy as np; np.set_printoptions(precision=15, linewidth=200, suppress=True); import psi4. #psi4.set_memory(int(1e9), False); #psi4.core.set_output_file('output.dat', False); psi4.core.set_num_threads(2). mol = psi4.geometry(""""""; O; H 1 1.1; H 1 1.1 2 104; symmetry c1; """"""). psi4.core.set_active_molecule(mol). options = {'BASIS':'STO-3G', 'SCF_TYPE':'PK',; 'E_CONVERGENCE':1e-10,; 'D_CONVERGENCE':1e-10; }. psi4.set_options(options). rhf_e, wfn = psi4.energy('SCF', return_wfn=True); ```. Debug traceback shows hang is in SAD guess at `DFHelper::contract_metric_AO_core_symm`. ```; (p4dev36) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-qcdb/objdir-gnu36: ((detached from matt/SYMM_JK)) gdb --args python ../tests/psi4numpy/rhf-hessian/input.py ; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-94.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python3.6...done.; (gdb) run; Starting program: /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python ../tests/psi4numpy/rhf-hessian/input.py; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Missing separate debuginfo for /home/psilocaluser/toolchaincond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:71,energy,energy,71,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,2,['energy'],['energy']
Energy Efficiency,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260372655:99,energy,energy,99,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655,2,['energy'],['energy']
Energy Efficiency,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/92#issuecomment-99127921:528,energy,energy,528,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921,5,['energy'],['energy']
Energy Efficiency,"Turns out the PCM polarisation energy was way too large when using ghost atoms. I compared with what ORCA gives and I found I had to change back to 'ghost atoms' here: https://github.com/psi4/psi4/pull/1977/files#diff-acd2a9822c706c971498ea1a2669bb7eR175; Didn't try to reproduce ORCA exactly (not sure what PCM settings are needed in detail, if possible at all), but it looks similar enough. @robertodr, can you have another look? static casting for the int<->double conversion OK for visibility?; Are there similar cases inside pcmsolver where one needs to differentiate between cavity-building-atoms and charge-carrying atoms?. I also manually checked the PEDRA outputs and the ghost atom-system uses the correct dimer-sized cavity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977#issuecomment-671224246:31,energy,energy,31,https://psicode.org,https://github.com/psi4/psi4/pull/1977#issuecomment-671224246,2,"['charge', 'energy']","['charge-carrying', 'energy']"
Energy Efficiency,"UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5011,Energy,Energy,5011,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"Unfortunately for diagnosis, everything looks pretty much as it ought. I might need to bump min glibc from 2.7-->2.11, but you should still be ok with 2.12. I just tried out the installer on a RHEL 6.7 system (6.6 == rocks 6.2 on my chart) with glibc 2.12, and it worked fine. Not sure how to go about debugging this remotely. Psi4 folks, if any of you have a Rocks sys I can log into, please let me know. I'll be back in Atlanta Monday. In the meantime, please (1) try `conda remove v2rdm_casscf` and (2) (from your miniconda3 dir). ```; >>> which conda python psi4; >>> gdb --args python psi4 share/psi4/samples/tu1-h2o-energy/test.in; (gdb) run; ...; SegFault; (gdb) bt; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404386592:622,energy,energy,622,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404386592,1,['energy'],['energy']
Energy Efficiency,Unfortunately the DETCI code is primarily meant to do highly-correlated CI computations like Full CI. It is not super-efficient for CISD and can't handle systems this big.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62#issuecomment-122011825:118,efficient,efficient,118,https://psicode.org,https://github.com/psi4/psi4/issues/62#issuecomment-122011825,1,['efficient'],['efficient']
Energy Efficiency,"V); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2097,energy,energy,2097,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"Very easily. ```; wfn, grad = psi4.gradient(method, return_wfn=True); en = wfn.variable(""CURRENT ENERGY""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211:97,ENERGY,ENERGY,97,https://psicode.org,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Very happy to see this, it will be a nice addition!. Maybe @andysim and/or @robertodr can check some of the external potential; handling stuff. My group and I will look into some of the subtleties of FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies wit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:901,energy,energy,901,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,"Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least. Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300589507:286,energy,energy,286,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300589507,1,['energy'],['energy']
Energy Efficiency,"Wait, what? Then how is Incremental Fock build set to energy tolerance on the order of 1e-9 giving you errors on the order of 1e-7?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821209195:54,energy,energy,54,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821209195,1,['energy'],['energy']
Energy Efficiency,"We can argue about whether the `dfmp2-ecp` test was or wasn't broken before PR #1350 was made, but the following point remains:. - the original part of the test is not touched by this PR, and by looking at `git blame` for the `input.dat` file, hasn't been touched in quite some time.; - as part of this PR, i have added a completely new section of tests, that are Kr--Kr interaction energies with DF-MP2/3-21G (no ECP's).; - a previous version of this PR, from around 2019-01-04, passed both the new and the old test.; - a later version of this PR, from until and excluding 2019-01-09, did not pass the new part of the test, but still passed the old test; - the current version of this PR has modified the new part of the test, after rebasing from master; it passes both the old test and the new test to 7 DP (I need to tighten convergence on the energy to pass it to 8 DP). A good diff to look at the issue is here:; https://github.com/psi4/psi4/pull/1350/commits/9e6329abb493ed79dbb6913ac4c1df957e9839ae#diff-32d6050d16bb770a64f7f94a67f26101; which compares the `output.ref` of the test for the version that passed on 2019-01-04 when the test was originally written, and passes the test now (locally) on 2019-01-09 with updated values. The puzzling thing is: what caused the change of the Kr--Kr interaction energies (and Kr MP2/3-21G energies converged to 1e-9)? What change would cause that, but not affect the first part of the test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452682935:847,energy,energy,847,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452682935,1,['energy'],['energy']
Energy Efficiency,"We have discussed this previous, but didnt find a clean way to do it. In 1.2 we have the ability to write/read Wavefunctions from disk. Would it be sufficient if you could do the following:. ```; scf_e, scf_wfn = psi4.energy(""SCF/cc-pVDZ"", return_wfn=True); scf_wfn.to_file(""my_wave.npz""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/646#issuecomment-285695742:218,energy,energy,218,https://psicode.org,https://github.com/psi4/psi4/issues/646#issuecomment-285695742,1,['energy'],['energy']
Energy Efficiency,"We have not coded explicitly the spin-adapted triplet states arising from; the EOM-CC equations starting from a singlet ground state. However, you; might be able to obtain the desired states by changing your reference to; UHF and still selecting a multiplicity of 1. The Hartree-Fock reference; should still be the same singlet state as you get from the corresponding; RHF calculation, and the EOM-CC _should_ yield both singlets and triplets.; You'll be able to sort out which is which (and make sure that everything is; running correctly) by comparing the results to the corresponding RHF-EOM-CC; calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Nov 20, 2016 at 8:51 PM, lucamontana notifications@github.com; wrote:. > one further question :; > ; > i like to calculate the eom-ccsd triplet states starting from the; > Hartree-Fock singlet ground state.; > However i do not manage to set up an input file for such calculation.; > ; > with multiplicity 3, PSI4 starts from a triplet ground state that i do not; > want.; > Any idea how to start from the HF singlet state but calculate triplet; > excited state energies in eom-CCSD?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/523#issuecomment-261824508, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ACtz7VgMGDHWFRa604RIVjYHaS0a3kseks5rAPk-gaJpZM4K3iYW; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261831203:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261831203,1,['adapt'],['adapted']
Energy Efficiency,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:107,charge,charges,107,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662,10,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:55,adapt,adapt,55,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614,1,['adapt'],['adapt']
Energy Efficiency,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:912,energy,energy,912,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893,1,['energy'],['energy']
Energy Efficiency,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081025:512,energy,energy,512,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025,2,['energy'],['energy']
Energy Efficiency,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182667180:404,energy,energy,404,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"We're going to go with no change here, and people will have to do the below to get df-omp3. Can revisit as density-fitting for >mp2 becomes more generally accepted and as other modules include more df algorithms alongside conv. ```; set mp_type df; energy('omp3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/279#issuecomment-212039726:249,energy,energy,249,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-212039726,1,['energy'],['energy']
Energy Efficiency,"Welcome to psi4 and thanks for the PR. Could you add a regression test with your example? http://psicode.org/psi4manual/master/add_tests.html; E.g. a third `extern` version would do. If anything is unclear, please ask here or join us on slacks. edit: I forgot. Please rebase your fork to fix the CI. ---. I am wondering. In principle `mol.set_nuclear_charge(0,7.05)` should work to modify Z. However, the C molecule object doesn't get the changes only the python one. ```; molecule mol {; N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; 0 1; }. set basis 6-31G; set reference rhf. mol.set_nuclear_charge(0,7.05); print(mol.Z(0),mol.Z(1)); nn = mol.nuclear_repulsion_energy(); mol.update_geometry(); e, wfn = energy('scf',return_wfn=True); print(nn); print(wfn.variable('NUCLEAR REPULSION ENERGY')); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777:718,energy,energy,718,https://psicode.org,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Well the ""-3c""s are not in dashparam. And for adding new entries to dashparam it will be somewhat clear if psi4 has the functional or not (Why else add it). So maybe a cookbook recipe is all that is needed. ```; from psi4.driver.qcdb.dashparam import get_dispersion_aliases; from psi4.driver.qcdb.dashparam import dashcoeff; from psi4.driver.procrouting.dft_funcs import dict_builder. for dtype in dashcoeff.keys():; for func in dashcoeff[dtype]:; check=func in psi4.driver.procedures['energy']; if check == False:; alt= find_approximate_string_matches(func,dict_builder.dict_functionals,3); print(dtype, func.upper(), ""not found! maybe? :"",alt); ```. Above is already quite nice, showing potential fitting names.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385938130:486,energy,energy,486,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385938130,2,['energy'],['energy']
Energy Efficiency,"Well, I needed to add a commit so that the code compiles, so I also made sure the `Ind20,u` Psivars are filled up whenever Ind20,u is available (i.e. always except in the closed-shell SAPT0 code). Also, I added all the energy components Psivars in the FISAPT code. Once the tests are done I'll commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364640527:219,energy,energy,219,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364640527,1,['energy'],['energy']
Energy Efficiency,"Well, good news is that the functional and the psi version are irrelevant. It's purely a particular geometry that you hit that's confusing the symmetry detection. And only when not shifted to center-of-mass. Never seen that error before, so will definitely investigate. Below is minimal example. BTW, `1.2a1.dev600` is still 300-400 commits behind master, due to my conda negligence. If I can get #946 in, I'll have a minimal _new_ conda build on the `-c psi4/label/agg` subchannel that actually uses the `-ng`/gcc72 compilers. ```; molecule MOL {; 1 1; nocom # toggle for disaster; C 0.000000000445 -0.000000002634 -0.176009819382; C 0.017055492504 1.213674219316 0.519005187104; C 0.010905297833 1.207533611621 1.904879649273; C 0.000000001371 -0.000000001015 2.595491320593; C -0.010905296809 -1.207533610178 1.904879653967; C -0.017055492743 -1.213674218642 0.519005186244; C 0.000000000685 -0.000000001418 -1.643506768663; H -0.011074063554 2.157895826255 -0.014254560550; H 0.006037200834 2.144998257605 2.447030976059; H 0.000000002397 0.000000004130 3.679031777447; H -0.006037200687 -2.144998259786 2.447030974663; H 0.011074059226 -2.157895829902 -0.014254553860; N -0.738518375832 -0.879256115198 -2.298061241871; N 0.738518376065 0.879256115454 -2.298061238276; H 0.714314308196 0.973365270982 -3.302615035270; H 1.398512102453 1.450008704958 -1.792988230964; H -1.398512105220 -1.450008704099 -1.792988237236; H -0.714314307164 -0.973365267449 -3.302615039280. }. energy = energy('B3lyp/cc-pvdz'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-379332937:1477,energy,energy,1477,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-379332937,2,['energy'],['energy']
Energy Efficiency,"Well, it still fails for triplet helium, which is a case that is perfectly physical!; ```; molecule {; 0 3; He; }. set basis cc-pVTZ; set reference uhf; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682069520:153,energy,energy,153,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682069520,1,['energy'],['energy']
Energy Efficiency,"Well, the B3LYP/6-31G* had no issues with the SCF, it did hit 50 iterations and cancel because of that. It was clearly converging, albeit, very slowly. I am not sure why it stopped at 50 iterations considering I specify 100 iterations as my max? (Nevermind, that maxiter 100 is only for the SCF convergence). For B3LYP/6-31G* I used. ```; set {; basis 6-31G*; maxiter 100; g_convergence gau; opt_coordinates both; }; ```. ```; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.084027420038 -1520.084027420038 0.01209684 0.00318489 0.09585970 0.02642430 ~; 2 -1520.101971720320 -0.017944300282 0.00752027 0.00158941 0.12994949 0.02669655 ~; 3 -1520.111617832344 -0.009646112024 0.00329597 0.00094589 0.09913642 0.01723322 ~; 4 -1520.114648443302 -0.003030610957 0.00216198 0.00062847 0.08202824 0.01366308 ~; 5 -1520.116031406611 -0.001382963310 0.00122597 0.00033545 0.05989395 0.01111816 ~; 6 -1520.116772315849 -0.000740909238 0.00131990 0.00033374 0.06203108 0.01396358 ~; 7 -1520.117591979154 -0.000819663305 0.00119721 0.00034756 0.09267135 0.02072228 ~; 8 -1520.118547103847 -0.000955124693 0.00156371 0.00030629 0.07994782 0.01866175 ~; 9 -1520.119170359052 -0.000623255205 0.00125623 0.00027764 0.06344987 0.01578896 ~; 10 -1520.119638965232 -0.000468606180 0.00067629 0.00021266 0.04981669 0.01425496 ~; 11 -1520.119963148907 -0.000324183675 0.00106241 0.00018459 0.03721107 0.01011712 ~; 12 -1520.120138724090 -0.000175575183 0.00077654 0.00015862 0.03691754 0.00896792 ~; 13 -1520.120303579945 -0.000164855855 0.00055434 0.00012476 0.03805513 0.00913406 ~; 14 -1520.120449457803 -0.000145877858 0.00082349 0.00014532 0.03164180 0.00803309 ~; 15 -1520.120569511735 -0.000120053932 0.00090778 0.00014097 0.03673389 0.00918033 ~; 16 -1520",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503:553,Energy,Energy,553,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957933503,1,['Energy'],['Energy']
Energy Efficiency,"Well, the initial energy is cray cray, e.g. ROHF on FH+ gives; ```; @ROHF iter 0: 37.35213783948360 3.73521e+01 0.00000e+00 ; @ROHF iter 1: -98.88199282615329 -1.36234e+02 5.47587e-02 ; @ROHF iter 2: -99.37308671364974 -4.91094e-01 2.39373e-02 DIIS; @ROHF iter 3: -99.52506651519121 -1.51980e-01 1.60839e-03 DIIS; @ROHF iter 4: -99.52612487148851 -1.05836e-03 3.72093e-04 DIIS; @ROHF iter 5: -99.52617068447645 -4.58130e-05 3.55283e-05 DIIS; @ROHF iter 6: -99.52617130679994 -6.22323e-07 6.69049e-06 DIIS; @ROHF iter 7: -99.52617134939356 -4.25936e-08 1.37357e-06 DIIS; @ROHF iter 8: -99.52617135123231 -1.83874e-09 1.08978e-07 DIIS; Energy converged.; ```; but the thing still works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450479977:18,energy,energy,18,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450479977,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29878672:197,energy,energy,197,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339448378:510,efficient,efficient,510,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378,1,['efficient'],['efficient']
Energy Efficiency,"What about just the relaxed density matrix, and partial charges?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38213099:56,charge,charges,56,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213099,1,['charge'],['charges']
Energy Efficiency,"What method are you dealing with (that is, `energy(???)`)?. The aim is to have each job run max thread of node? That is, https://github.com/psi4/psi4/blob/master/tests/tu1-h2o-energy/output.ref#L67-L72 shows `Threads 48`? And the `-pe smp 64` is for one job running one Psi4 energy() call?. Were you setting `psi4.set_num_threads(1)` or `psi4.set_num_threads(64)`? I'd expect the latter if I'm reading your intentions right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278199072:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278199072,3,['energy'],['energy']
Energy Efficiency,"What version of psi4 that you are using? The version info should be printed in the heading of the output file. . I ran your input using a build from the current master and I got the following results:. ```; Excitation Energy OS RS RS Einstein A ; State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 1 Ag 12.964 104563.5 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 2 Ag 16.771 135268.1 73.9 0.616327 0.0000 0.0000 0.0000 0.000000E+00; 3 Ag 18.773 151417.7 66.0 0.689910 0.0000 0.0000 0.0000 0.000000E+00; 4 Ag 25.910 208978.9 47.9 0.952178 0.0000 0.0000 0.0000 0.000000E+00; 1B1g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B1g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B1g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B1g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B2g 16.855 135946.1 73.6 0.619416 0.0000 0.0000 0.0000 0.000000E+00; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 19.495 157235.3 63.6 0.716417 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 19.585 157966.1 63.3 0.719747 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 19.612 158178.3 63.2 0.720713 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 19.626 158297.8 63.2 0.721258 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B2u 13.809 111376.2 89",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521#issuecomment-261612983:218,Energy,Energy,218,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261612983,1,['Energy'],['Energy']
Energy Efficiency,"What's happening on (2) is as follows:; * For the supersystem computation, #2271 means that the supersystem frozen core is the sum of monomer A and monomer B frozen core. Both of those are set to zero right now, which is bad, but not the direct cause of the issue.; * **For both monomers, `num_frozen_docc 6` means Psi thinks there are 6 frozen orbitals when those monomer computations run**. That doesn't affect energies, but that does contaminate the wavefunction.; * All three wavefunctions are saved; * After reading the monomer B wavefunction, Psi asks monomer B for its occupied orbitals; * When computing its occupied orbitals, monomer B realizes it has 6 frozen orbitals, so it must be at least 6 and therefore returns 6 occupied orbitals; * With a garbage number of occupied orbitals, Psi computes a garbage SCF energy. The primary issue here is that for SAPT supersystem computations, Psi doesn't split `num_frozen_docc` into Monomer A frozen docc and Monomer B frozen docc. (nbody may well have the same problem.). Idea 1:; For _reasonable_ frozen cores, we could plausibly do the supersystem computation, assume the core orbitals are localized on monomers, see which monomers the core orbitals are localized on, and use that to work out the docc per subsystem. This is not distributed and will fail for large frozen cores, where the localization assumption fails. Idea 2:; `num_frozen_docc` simply should not be used for supersystem computations. We need a different keyword that has the user specify this for each elementary system. just like they do charges and spin multiplicities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1211894195:821,energy,energy,821,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1211894195,4,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"When I did a calculation on a doublet, I got the following outputs during the convergence of CCSD. ```; MP2 correlation energy -0.3532279300684508; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; 0 -0.353227930068451 0.000e+00 0.000000 0.000000 0.000000 0.000000; 1 -0.372702747934713 9.484e-02 0.016815 0.000000 0.000000 0.000000; 2 -0.388397428813444 4.357e-02 0.025198 0.000000 0.000000 0.000000; 3 -0.394491992316835 2.808e-02 0.035707 0.000000 0.000000 0.000000; 4 -0.395063121334025 1.162e-02 0.041511 0.000000 0.000000 0.000000; 5 -0.395062761630612 3.231e-03 0.042317 0.000000 0.000000 0.000000; 6 -0.395097874139116 1.330e-03 0.042563 0.000000 0.000000 0.000000; 7 -0.395105439920260 5.176e-04 0.042615 0.000000 0.000000 0.000000; 8 -0.395105335262559 2.249e-04 0.042627 0.000000 0.000000 0.000000; 9 -0.395105487878768 1.167e-04 0.042635 0.000000 0.000000 0.000000; 10 -0.395106716028309 6.184e-05 0.042637 0.000000 0.000000 0.000000; 11 -0.395106616553506 2.856e-05 0.042640 0.000000 0.000000 0.000000; 12 -0.395107024185774 1.291e-05 0.042640 0.000000 0.000000 0.000000; 13 -0.395107014887657 5.342e-06 0.042641 0.000000 0.000000 0.000000; 14 -0.395106962475645 1.871e-06 0.042641 0.000000 0.000000 0.000000; 15 -0.395106957186010 7.159e-07 0.042641 0.000000 0.000000 0.000000; 16 -0.395106960040855 3.172e-07 0.042641 0.000000 0.000000 0.000000; 17 -0.395106969782621 1.352e-07 0.042641 0.000000 0.000000 0.000000; 18 -0.395106971659234 5.567e-08 0.042641 0.000000 0.000000 0.000000. Iterations converged.; ```. Hope this output could help to clarify the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1681#issuecomment-515176656:120,energy,energy,120,https://psicode.org,https://github.com/psi4/psi4/issues/1681#issuecomment-515176656,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:422,reduce,reduce,422,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890,1,['reduce'],['reduce']
Energy Efficiency,"When attempting to rerun this computation, I get a perfectly reasonable energy of -1802.809573 for the tungsten product listed here, and an overall energy of -11.3 kcal/mol for the reaction the user originally requested. This disagrees with Gaussian, but without more information (especially about density-fitting), I'm inclined to take the beer. Issue solved, presumably by a mix of ADIIS helping converge to the right state and/or ECP terms converging due to libecpint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338#issuecomment-1133754655:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/issues/1338#issuecomment-1133754655,2,['energy'],['energy']
Energy Efficiency,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178858441:110,energy,energy,110,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441,1,['energy'],['energy']
Energy Efficiency,"Will you tack this onto your PR, please? @PeterKraus, will you verify on your branch that `set e_convergence 10` and `set d_convergence 10` give these new ref values?. ```; diff --git a/tests/sapt-ecp/input.dat b/tests/sapt-ecp/input.dat; index 0aaa59f..36519f3 100644; --- a/tests/sapt-ecp/input.dat; +++ b/tests/sapt-ecp/input.dat; @@ -16,12 +16,12 @@ scf_type df; FREEZE_CORE true; }; ; -ref_lanl = -0.10472432075265364; -ref_321g = -0.09561604218297935; +ref_lanl = -0.10472408363385473; +ref_321g = -0.09561567751654523; ; E = energy('sapt0/3-21g'); -compare_values(ref_321g, E, 8, ""SAPT0 energy with Ca2+, without ECP"") #TEST; +compare_values(ref_321g, E, 6, ""SAPT0 energy with Ca2+, without ECP"") #TEST; E = energy('sapt0/lanl2dz'); -compare_values(ref_lanl, E, 8, ""SAPT0 energy with Ca2+, with ECP"") #TEST; +compare_values(ref_lanl, E, 6, ""SAPT0 energy with Ca2+, with ECP"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1481#issuecomment-455382870:532,energy,energy,532,https://psicode.org,https://github.com/psi4/psi4/pull/1481#issuecomment-455382870,6,['energy'],['energy']
Energy Efficiency,"With `MP2/cc-PVDZ`, the discrepancies seem to be within 1 Hartree when Summit is compared to local runs. I ran the compairisons for the 20 canonical amino acids (structures from `HF/6-31G*` geometry optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:494,energy,energy,494,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,6,['energy'],['energy']
Energy Efficiency,"With the fixes and default cutoff, I get; ```; Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 1512230731449.1877441406 1512230731449.1877441406 140929.0768005789 125; ```; which is not surprising. Setting `df_fitting_condition 1e-7` I get; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -196270759150.0319519043 -196270759150.0319519043 89246.9451637544 129; ```; which is clearly different :laughing:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606:111,Energy,Energy,111,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465300606,4,['Energy'],['Energy']
Energy Efficiency,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:76,energy,energy,76,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,11,['energy'],['energy']
Energy Efficiency,"Without nocom, the first time the energy is computed, the center of mass is shifted to the origin, and all of the stored coordinates are updated. If change beh2.z to a new value, I might be expecting all of the other coordinates to still be where I specified them, not at their com-shifted values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43509699:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43509699,1,['energy'],['energy']
Energy Efficiency,"Wondering if it mightn't be better to just continue routing everything with a `/` to `driver_cbs._cbs_gufunc` only now with an extra kwarg `cbs_allowed=True` that is false for `def properties()`. I worry about not breaking (or complicating) recursive driver cases (where cbs and nbody function re-enter energy, hessian, properties etc. after being broken into smaller pieces (like `mp2/cc-pv[dt]z` --> `mp2/cc-pvdz`)).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562840:303,energy,energy,303,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562840,1,['energy'],['energy']
Energy Efficiency,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:58,adapt,adapted,58,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139,1,['adapt'],['adapted']
Energy Efficiency,"Would you mind teaching me if I have this right because I don't actually know and this is how far I got, I still can't seem to get intensities out. . ```python. import psi4; import textwrap; import numpy as np. psi4.core.set_num_threads(8); psi4.set_memory('30000mb'). psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'reference': 'rhf',; 'freeze_core': 'true',; }). psi4.core.set_output_file('water.out', False). def run_calculation(molecule):; ; universe = psi4.geometry(molecule); universe.update_geometry(); mass = np.asarray([16.01, 1.0, 1.0]); geometry = np.asarray(universe.geometry()); irrep_labels = universe.irrep_labels(); dipole_derivatives = None; project_translation = True; project_rotation = True; symbols = [universe.symbol(at) for at in range(universe.natom())]; theory = 'mp2/aug-cc-pvdz'; ; energy, wave_function = psi4.optimize(; 'hf/6-31g*',; return_wfn = 'yes',; molecule=universe; ). hessian, wave_function_2 = psi4.hessian(; theory,; ref_gradient=wave_function.gradient(),; return_wfn= True; ). basisset = wave_function_2.basisset(). wave_function_2.hessian().print_out(). vibinfo, vibtext = psi4.driver.qcdb.vib.harmonic_analysis(; np.array(hessian),; geometry,; mass,; basisset,; irrep_labels,; dipole_derivatives,; project_translation,; project_rotation; ). print(vibtext); print(psi4.driver.qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='q', atom_lbl=symbols)). if __name__ == '__main__':. water_zmatrix = '''\; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; '''; run_calculation(textwrap.dedent(water_zmatrix)). ```. The output from the script for water is:. ```python. Vibration 7 8 9 ; Freq [cm^-1] 1563.0797 4068.4404 4208.3554 ; Irrep ; Reduced mass [u] 1.0740 1.0365 1.0684 ; Force const [mDyne/A] 1.5461 10.1080 11.1487 ; Turning point v=0 [a0] 0.2678 0.1690 0.1636 ; RMS dev v=0 [a0 u^1/2] 0.1962 0.1216 0.1196 ; Char temp [K] 2248.9237 5853.5800 6054.8864 ; --------------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650:832,energy,energy,832,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650,1,['energy'],['energy']
Energy Efficiency,"Wow, thanks for your work.; I'm completely fine with changing `REMP`/`OREMP` to `REMP2`/`OREMP2`.; (with the limitation that it's the 2nd order energy/1st order wavefunction, but this is equivalent in the case of MP2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1200115598:144,energy,energy,144,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1200115598,1,['energy'],['energy']
Energy Efficiency,"Yay, nesting levels reduced from 10 to 5 :-) . And I'm reassured to see ""3d"" in there. Looks like we're not doing wait-and-repeat anymore, but `MaxSeconds` available if travis habitually times out. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979110:20,reduce,reduced,20,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979110,1,['reduce'],['reduced']
Energy Efficiency,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:678,energy,energy,678,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,4,['energy'],['energy']
Energy Efficiency,"Yeah that unwanted root mentioned above, E = -75.086475619870, is a quintet apparently. You can get it directly by running this computation. set {; S 2.0; NUM_ROOTS 1; qc_module DETCI; calc_s_squared TRUE; r_convergence 3; }. Going directly for high-lying higher spin multiplicities can cause convergence problems (roundoff can cause the program to start to find lower-energy solutions of lower spin multiplicities). That is why I dropped the convergence criterion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2075#issuecomment-770024893:369,energy,energy,369,https://psicode.org,https://github.com/psi4/psi4/issues/2075#issuecomment-770024893,1,['energy'],['energy']
Energy Efficiency,"Yeah we should sit down and try to sort out all the latest SAPT additions; and how they should be called. On Thu, Mar 5, 2020 at 12:56 PM Lori A. Burns <notifications@github.com>; wrote:. > right now, one gets (wfn) sapt0-inf through sapt(dft). in light of that; > new addition, plus outright sapt(dft) plus sapt0-d, take a wholistic looks; > at the arguments to energy(sapt*); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1835?email_source=notifications&email_token=AAXVA5X6PP6BNHUB4YWNW33RF7RTTA5CNFSM4LCPIX5KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IS3UY5Q>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TLWRLB4PCIU2BX74TRF7RTTANCNFSM4LCPIX5A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1835#issuecomment-595374584:363,energy,energy,363,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-595374584,1,['energy'],['energy']
Energy Efficiency,"Yeah, I didn't think of higher multiplicity cases. There, the fix will be a little more involved I guess. `DF-MP2` (which is used also for DH-DFT) and CD MP2 in `DFOCC` crash, while conventional MP2 via `OCC` runs fine, but the correlation energy is 0 (Is that correct? Shouldn't there be some same-spin contribution?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682331057:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682331057,1,['energy'],['energy']
Energy Efficiency,"Yeah, I'll dive into it when I get some free time. On Fri, Mar 24, 2017 at 10:40 PM, Daniel Smith <notifications@github.com>; wrote:. > Looks like this isnt handling custom basis sets correctly and a few other; > python pieces like inline for-based lists and dicts. Failing tests are:; >; > The following tests FAILED:; > 	 60 - cc49 (Failed); > 	 93 - cubeprop (Failed); > 	120 - dfmp2-1 (Failed); > 	187 - mints2 (Failed); > 	206 - mp2-property (Failed); > 	235 - opt1 (Failed); > 	256 - psimrcc-ccsd_t-1 (Failed); > 	257 - psimrcc-ccsd_t-2 (Failed); > 	258 - psimrcc-ccsd_t-3 (Failed); > 	262 - psimrcc-pt2 (Failed); > 	263 - psimrcc-sp1 (Failed); > 	268 - pywrap-alias (Failed); > 	310 - stability1 (Failed); > 	322 - options1 (Failed); > 	335 - dftd3-energy (Failed); > 	339 - gdma-gdma1 (Failed); >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/658#issuecomment-289183019>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_ue38d1uwecW7_m5NMmKhLLmUZyoks5rpH6agaJpZM4MjEU7>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-289222048:756,energy,energy,756,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289222048,1,['energy'],['energy']
Energy Efficiency,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:182,efficient,efficient,182,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,2,['efficient'],['efficient']
Energy Efficiency,"Yeah, that code isn't efficient to use. That's probably why it wasn't exported. Could we help you to update the code instead?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963:22,efficient,efficient,22,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963,1,['efficient'],['efficient']
Energy Efficiency,"Yeah, the use of `Z` is going beyond what it was intended to do and I'm to blame for the ECP instances of that. I think we need to track both the effective charge and the atomic number separately. And perhaps a different entry to handle ghostedness. Happy to help to fix this, but will need to consult with SAPT/CP folks first to make sure the design is right in terms of ghosted behavior. Sounds like a good conference call topic. Finding all usages and changing them will be easy with QtCreator.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409423509:156,charge,charge,156,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409423509,1,['charge'],['charge']
Energy Efficiency,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:159,efficient,efficiently,159,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749,1,['efficient'],['efficiently']
Energy Efficiency,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204212411:819,charge,charge,819,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411,1,['charge'],['charge']
Energy Efficiency,"Yep, suggested change heals it. Matt or you can include it among your commits. ```; -#pragma omp parallel for num_threads(nthreads_) schedule(static, nao_ / nthreads_); +#pragma omp parallel for num_threads(nthreads_) schedule(static) //, nao_ / nthreads_); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384640906:133,schedul,schedule,133,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384640906,2,['schedul'],['schedule']
Energy Efficiency,"Yep, what we have here is a casualty of one of my less favorite topics, the type A vs. type B ghost ([details](https://github.com/psi4/psi4/issues/909#issuecomment-363473061)). By subtracting out the ECP electrons [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L182) and resetting `Z`, it's wiping out the only evidence of those atoms being ghosted (compare `gh=1` for extract_subsets ghosting vs. `gh=0` for `@/Gh()` ghosting). Printing is `printf(""ECP: preZ=%f TAN=%d - ncore=%d = Z=%d gh=%d\n"", mol->Z(atom), mol->true_atomic_number(atom), ncore, Z, mol->atom_entry(atom)->is_ghosted());`. ```; # @/Gh() ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=0; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; # extract_subsets ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=1; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=1; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; >>> grep 'Final E' i843_c.out ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033528; ```. ```; memory 1800 Mb; set guess core. molecule probe1 {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe1.update_geometry(); probe1.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe3 {; H 0.0 0.0 0.0; I 1.5 0.0 0.0; --; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe3.update_geometry(); probe3gh = probe3.extract_subsets(2, 1); probe3gh.update_geometry(); probe3gh.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843#issuecomment-397970352:1105,Energy,Energy,1105,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397970352,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Yes Peter, and then use density cube as valence_density.cube input - AND set non ECP using atoms to 0, as default in chargemol is having last nobel atom as core electrons",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412874936:117,charge,chargemol,117,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412874936,1,['charge'],['chargemol']
Energy Efficiency,"Yes, I was using Intel 2018 and GCC 5.2 and 7.2, so those are all fully C++11 compliant. If you'd like to prevent OpenBLAS from building with unsatisfactory compilers, you're welcome to adapt https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658:186,adapt,adapt,186,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658,1,['adapt'],['adapt']
Energy Efficiency,"Yes, IIRC we need to make sure that `CCEnergyWavefunction`'s vars is updated *not* `ref_wfn`'s ? but just in energy modules, lambda/density/eom/response do not have proper wfns so they need to update whatever wfn they were passed [*Warning: It might not have the same name in all of those modules*]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376675608:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376675608,1,['energy'],['energy']
Energy Efficiency,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:562,energy,energy,562,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596,1,['energy'],['energy']
Energy Efficiency,"Yes, but that needs to be done automatically when the user specifies -nl in the energy call.; I just cant picture all the work flow in my head right now. Maybe next week I have more time for this. As a side note: the current changes in compute_gradient+hessian in empirical_dispersion.py are not working correctly. (they should never be called since we need numerical gradients, but still...)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-369527099:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-369527099,1,['energy'],['energy']
Energy Efficiency,"Yes, by testing the guess energy for H atom.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2056135687:26,energy,energy,26,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2056135687,1,['energy'],['energy']
Energy Efficiency,"Yes, it seems to run fine! I am calling DETCI multiple times within the test itself, since I wanted to test SF, SF-IP, and SF-EA cases; I can reduce it to just SF-IP if that will be more stable in the long run. I've also just added some docs; let me know if there's anything else I need to do. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205:142,reduce,reduce,142,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-607977205,1,['reduce'],['reduce']
Energy Efficiency,"Yes, most likely the DMRG code is not adapted to use density fitting, so it; has to go off and compute all the usual 2-electron integrals before it; starts up. On Tue, Nov 24, 2015 at 6:58 PM, Lori A. Burns notifications@github.com; wrote:. > I can't say exactly, but we usually put in that flag if the scf has been; > done DF, but the subsequent post-SCF needs for 2e- integrals.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/194#issuecomment-159443070.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/194#issuecomment-159447131:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/194#issuecomment-159447131,1,['adapt'],['adapted']
Energy Efficiency,"Yes, one of the cases where a stability analysis is detrimental is; closed-shell benzene with UHF. The closed-shell solution is unstable and; the stable UHF solution looks like a singlet hexaradical... Unfortunately I; believe this is related to the intrinsic spin contamination in UHF. There; are specific methods that can constrain or project UHF solutions to; alleviate this problem.; ROHF also avoids spin contamination, but lacks description of spin; polarization, which may sometimes be of interest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:817,energy,energy,817,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,2,['energy'],['energy']
Energy Efficiency,"Yes, one way is to compare your energies at the minimum (r_e) from the dissociated energy (eg. the 30 angstrom value) and correct by adding zero point energy:; ```; De = E(30A) - E(r_e) + ZPE; ```; Another way is to do a counterpoise-corrected calculation, which due to the charges is a little more tricky to set up:; ```; mol = psi4.core.Molecule.from_arrays(; elez=[7, 7],; fragment_separators=[1],; fix_com=True,; fix_orientation=True,; fix_symmetry='c1',; fragment_multiplicities=[2, 1],; fragment_charges=[0, 1],; molecular_charge=1,; molecular_multiplicity=2,; geom= [; 0.000, 0.000, 0.000000,; 0.000, 0.000, 1.080176]); activate(mol). ...; set reference uks; energy(""method/basis"", bsse_type=""cp""); ```; where 1.080176 is the `re` from above, and i'm using UKS assuming it's a DFT calc (for wavefunction theory the alternative is UHF). The other text is pretty self-explanatory. You still have to correct the resulting interaction energy by the ZPE of N2+, though. (I should note the energies calculated above are negative - i.e. the ""complexation"" of N with N+ is exothermic; in the paper they're quoting them as positive.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201:83,energy,energy,83,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483543201,5,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"Yes, that ""allow edits by maintainers"" checkbox confers surprising powers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1017#issuecomment-388644453:67,power,powers,67,https://psicode.org,https://github.com/psi4/psi4/pull/1017#issuecomment-388644453,1,['power'],['powers']
Energy Efficiency,"Yes, that's a handy Molpro page to keep bookmarked, thanks!. sadly, `energy('zapt2')` is a different call with a different answer. . ``` ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544558; CalcInfo_->e0 = -20.492192306874799; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.370960218553336. n Corr. Energy E(ZAPTn) n Corr. Energy E(ZAPTn). 0 0.000000000000000 -15.572654099991222; 1 -10.370960218553336 -25.943614318544558; 1 -10.370960218555073 -25.943614318546295; 2 -0.059970897144711 -26.003585215689270 2 -0.059970897144711 -26.003585215689270; 3 -0.015564779310290 -26.019149994999559. ZAPT2 energy saved. EZAPTn = -26.0035852156893; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-597871392:69,energy,energy,69,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597871392,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:86,energy,energy,86,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735,1,['energy'],['energy']
Energy Efficiency,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184837562:162,energy,energy,162,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562,1,['energy'],['energy']
Energy Efficiency,"Yes, we're planning on a series of release candidates after the necessary features are in wherein only bug fixes permitted. For the most part, we work on a nightly build release schedule, but yes, we do want 1.0.0 to be durable. Thanks for the new term, ""brown-paperbag"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178167204:178,schedul,schedule,178,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178167204,1,['schedul'],['schedule']
Energy Efficiency,"Yes, you can use `from_arrays` like below that takes [these arguments](https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_arrays.py#L136-L293). Then you have to either activate the molecule (`psi4.geometry()` does this behind the scenes) or pass the molecule explicitly to each calculation line. `from_arrays` is the same fn that `geometry()` is calling after parsing the string. If you want to get the arrays back out of a built molecule, there's a `to_dict()` fn. Let me know if there's other functionality that would be handy but you can't find. Also, be aware of running in schema mode with json in and json out. ```; h2o = psi4.core.Molecule.from_arrays(elem=[""O"", ""H"", ""H""], units=""Angstrom"", geom=[; 0.000000000000, 0.000000000000, -0.065775570538, ; 0.000000000000, -0.759061990794, 0.521953018295, ; 0.000000000000, 0.759061990794, 0.521953018295]) ; psi4.activate(h2o); # activate -or- pass into fn; psi4.energy(..., molecule=h2o); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2553#issuecomment-1105670625:940,energy,energy,940,https://psicode.org,https://github.com/psi4/psi4/issues/2553#issuecomment-1105670625,1,['energy'],['energy']
Energy Efficiency,You also need to put the 2nd layer into the molecule section to have it enter the calculation.; Adding surrounding point charges in place of Na Cl atoms from missing layers/edges is a common way to do slabs in molecular codes (point charge embedding). Stabilises the electrostatics and reduces edge effects. Should help to converge the SCF as well. I'd suggest trying def2-SVP and a (meta)GGA and first see if you can converge the SCF before doing a geometry optimisation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209:121,charge,charges,121,https://psicode.org,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209,3,"['charge', 'reduce']","['charge', 'charges', 'reduces']"
Energy Efficiency,"You can run it like this:; ```; set scf_type direct; energy('scf',df_functional='wb97x'). ```; But first I would carefully compare if the gradient is actually OK.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346631515:53,energy,energy,53,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346631515,1,['energy'],['energy']
Energy Efficiency,"You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2691,energy,energy,2691,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['energy'],['energy']
Energy Efficiency,"You may check energy and gradients with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. In the case of OMP2.5 gradient you may compute gradient with a 5 point formula again with CD-OMP2.5 energies. Alternatively, you may use DF-OMP2.5 gradient in a small primary basis set with a very large auxiliary basis. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784:14,energy,energy,14,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-592130784,2,['energy'],['energy']
Energy Efficiency,"You may verify your changes with respect to DFOCC CD-OMP2.5 code. In the case of energy with CD tolerance of 10^-14, CD becomes exact. Hence, you may verify your changes with respect to DFOCC module. As long as you can reproduce my results in OMP2.5 paper (with CDS) or you can get the same results with CD-OMP2.5, you are welcome to make any change in OCC module. Frankly speaking, I have focused on DFOCC since 2014. @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1809#issuecomment-592131837:81,energy,energy,81,https://psicode.org,https://github.com/psi4/psi4/pull/1809#issuecomment-592131837,1,['energy'],['energy']
Energy Efficiency,"You mean a standard format for point charge files for QMMM? Not that I know of. ; I know the AMBER QM/MM interface a bit, and there are all kinds of formats for different QM programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093:37,charge,charge,37,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093,1,['charge'],['charge']
Energy Efficiency,"You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points. This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so. I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?. Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821266004:626,energy,energy,626,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821266004,2,['energy'],['energy']
Energy Efficiency,"You would need to make your own wfn file first. The serial-wfn test seems fine for testing:. ```; molecule mol {; 0 1; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H -.7 0.7 0.0; symmetry c1; }; memory 4 GiB; set {; basis sto-3g; guess sad; active [7]; }; # make a wavefunction; e, wfn_old = energy('hf', return_wfn=True). # write the wavefunction to file; wfn_old.to_file('my_wfn'). # read wavefunction from file; wfn_new = Wavefunction.from_file('my_wfn'); #wfn_new.set_basisset(""DF_BASIS_SCF"", core.BasisSet.zero_ao_basis_set()); energy('casscf',ref_wfn=wfn_new); ```. I notice now that I get a segfault at the `Properties computed using the CASSCF density matrix`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545:277,energy,energy,277,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615439545,2,['energy'],['energy']
Energy Efficiency,"You're correct: DETCI only calculates excited states with the same irrep as the reference, and there is no keyword to select irrep symmetry directly. It's been a few years since I've had to worry about diatomic symmetry, but let's see if I remember how this works. The two lowest energy singlet Pi gerade states are going to be [Be]p+ap-b and [Be]p-ap+b. However, Psi4 doesn't believe in complex orbitals. Ignoring normalization, p+ = px + i py, and p- = px - i py. Then using multilinearity of determinants, our states become (pxa + i pya)(pxb - i pyb) and (pxa - i pya)(pxb + i pyb) equalling (pxa pxb + i pya pxb - i pxa pyb + pya pyb) and (pxa pxb - i pya pxb + i pxa pyb + pya pyb). However, Psi4 doesn't believe in imaginary numbers. Taking the plus linear combination gives us (pxa pxb + pya pyb), and taking the - linear combination and normalizing away i gives us (pya pxb + pxa pyb). The conclusion of all this math is that because Psi4 doesn't use complex orbitals or complex linear combinations, the electronic states you're looking for are simply **not** going to be well-described by a single (real) Slater Determinant. The only solution I see is to make peace with that and modify your target symmetry to match one of those determinants. pxa pxb does not look like a diradical to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569:280,energy,energy,280,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-643464569,2,['energy'],['energy']
Energy Efficiency,"You're definitely interested in H-by-E, not H-by-G?. the ground rules; * Outright cc, mp2, hf, etc. calculations are controlled by cc_type, mp2_type, hf_type, etc. ; * In a CBS, if a needed component can be got for free, it is taken, regardless of type. ; * Practically, ""for free"" are only active for energies, since there's only one known separable gradient. ; * Also, it's not smart enough to harvest an mp2 findif derivative from a ccsd(t) findif derivative. I haven't studied your evidence in detail, but conv mp2 in energy(cbs), where it can be got from conv ccsd(t), and df mp2 in freq(cbs), where mp2 is an outright calc and thus governed by mp2_type, sounds plausible. I would expect gradient to behave like freq, though. Possible complications are that some modules are spotty about returning mp2 from ccsd(t), so I'd need to look into exactly what's running. #1850 fixes several of these and will probably heal the HF=0.0, too. df/conv not behaving as you expect is a larger issue. I have some plans for tighter control.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632721824:522,energy,energy,522,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632721824,1,['energy'],['energy']
Energy Efficiency,"Your analysis of inconsistency and proposed fix are totally reasonable. But I disagree and rather have the opposite complaint about the Molecule class – that Z returns 0 instead of atomic number for ghost atoms so that function is actually conflating two independent quantities. mass is doing the right thing. The reason nonzero quantities are stored for ghost atoms in a CoordEntry is because the atoms can change their ghostedness upon `extract_subsets`, `activate_all_fragments`, etc. This leads to two tiers of ghostedness. The first are those that are read in as ghosts `@C` and get 0 Z and charge from the start. The others are those that are read in as real, then have their ghostedness changed on the fly. Note that Molecule internal fns sometimes have to check both `Molecule.fragment_types_` and `CoordEntry.ghost_` to get the full state of the Molecule. I've taken the back-away-slowly approach to ghosts in Molecule. And I have some memory of full-real-mol --> ghost-fragment-mol --> full-real-mol not actually being able to accomplish that last step. We tend to clone-manipulate-discard Mols these days rather than transform them internally, so our tests may not have noticed. In the [molrec dictionary repr](https://github.com/loriab/psi4/blob/pyvib2/psi4/driver/qcdb/molparse/tofrom.py#L78-L113) of a molecule, I've dropped fragment_types and consolidated the ghostedness. I've tried to keep the fields either totally independent (Z from real) or tied together (Z and symbol; to a lesser extent A, Z, symbol, mass). As far as getting things working for you, i'm inclined to suggest letting sleeping ghosts lie as far as internal Molecule structure. But go ahead and write a `molecular_weight` fn that accounts for both types of ghostedness internally and has a required bool argument as to whether or not mass of ghosts should be accounted for. Other opinions or rebuttals welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-362856324:596,charge,charge,596,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-362856324,1,['charge'],['charge']
Energy Efficiency,"Yup - adding the missing ```reset_occ = True``` fixes the issue -- however, the guess energy becomes very bad. (I'm not sure this can be solved; you'd just want to use a basis guess from a smaller one with the same ECP!). Anyway, the fix is in the ```sad_rohf``` branch, which will be merged for #1429. Unfortunately, the merge doesn't appear to be going anywhere until the ECPs are fixed, since the ```dfmp2-ecp``` test is producing junk if you change the guess, see #1433 . And this is exactly what happens with your example as well - once the occupations have been changed, the calculation gives the nonsensical result; ```; @DF-RHF iter 100: -259.15000393594977 5.10693e-09 3.69243e-01 DIIS. PsiException: Could not converge SCF iterations in 100 iterations.; ```; It's looking very much like the ECP Hamiltonian is asymmetric. There's no way the DIIS error should be so large with such a small energy change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-449015958:86,energy,energy,86,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-449015958,2,['energy'],['energy']
Energy Efficiency,"Yup, bet were hitting a `num_threads(nthreads_) schedule(static, 0)` there. We can add a bit of logic to ensure this doesn't go below 1. LLVM is smarter than GCC there apparently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384643478:48,schedul,schedule,48,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384643478,1,['schedul'],['schedule']
Energy Efficiency,[From forums.](http://forum.psicode.org/t/difficulties-converging-uks-energies/1757/2). ```; set_num_threads(8). molecule mol {; 1 2; C 0.81874699 0.86417234 0.18828612; H 1.46611361 1.71666767 0.34472141; C 1.36899712 -0.39052394 -0.06669818; H 2.44303637 -0.51186194 -0.11057444; C 0.53437860 -1.48849320 -0.27188804; H 0.96084825 -2.46156422 -0.47550749; C -0.84911561 -1.33050735 -0.21989643; H -1.49706942 -2.18186028 -0.37955321; C -1.39948546 -0.07603020 0.04043417; H -2.47268667 0.04490778 0.09338206; C -0.56529230 1.02140336 0.24227921; H -0.99255667 1.99366131 0.44625817; unit angstrom; }. set basis cc-pVDZ; set d_convergence 1e-9; set e_convergence 1e-9; set reference uks. energy('PBE0'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-619287285:689,energy,energy,689,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-619287285,1,['energy'],['energy']
Energy Efficiency,"[MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4386,Energy,Energy,4386,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"[lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; Traceback (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['ener",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:1484,energy,energy,1484,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,1,['energy'],['energy']
Energy Efficiency,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3832,energy,energy,3832,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['energy'],['energy']
Energy Efficiency,"_1546130271559/work/Python/pythonrun.c:978; #67 0x557a417649c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #68 0x557a417684b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsigned long, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:1260",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11548,allocate,allocate,11548,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['allocate'],['allocate']
Energy Efficiency,"_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2939,energy,energy,2939,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,2,['energy'],['energy']
Energy Efficiency,"_matrices(anl_grad, fd_grad, 4, ""Analytic vs FD CAM Gradients""). !----------------------------------------------------------------------------------!; ! !; ! root !; ! Arrays differ. _compare_recursive: computed value does not match to !; ! atol=1e-06. !; ! Expected: !; ! [[ 0. 0. -0.034683256669] !; ! [ 0. 0. 0.034649906885]] !; ! Observed: !; ! [[ 0. -0. -0.034681333539] !; ! [ 0. 0. 0.034680903324]] !; ! Difference (passed elements are zeroed): !; ! [[0.000000000000e+00 0.000000000000e+00 1.923130171867e-06] !; ! [0.000000000000e+00 0.000000000000e+00 3.099643936547e-05]] !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 47.89 sec; ----------------------------------------------------------; Test Failed.; ""dft-grad-lr2"" end time: Jan 05 15:36 EST; ""dft-grad-lr2"" time elapsed: 00:00:47; ----------------------------------------------------------; ```. ```. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_RADIAL_POINTS"", 75); core.set_global_option(""SCF_TYPE"", ""df""); for k, v in test_dict.items():; if k == 'DSD-PBEP86-D3BJ' and 'dftd3' not in psi4.addons():; continue; --> ret = energy(k); compare_values(v, ret, 5, ""RKS 0 1 %15s Energy"" % k); pbe = {; ""name"": ""PBE-TEST"",; ""x_functionals"": { ""GGA_X_PBE"": {} },; ""c_functionals"": { ""GGA_C_PBE"": {} },. !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 106.86 sec; ----------------------------------------------------------; Test Failed.; ""dft-smoke"" end time: Jan 05 15:37 EST; ""dft-smoke"" time elapsed: 00:01:46; ----------------------------------------------------------; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:4237,energy,energy,4237,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"_still going_. @psi-rking, here's an example where dynamic level 2 might have kicked in a bit early?. ```; base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out ; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; 	Raising dynamic level to 2. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016:331,Energy,Energy,331,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482748016,1,['Energy'],['Energy']
Energy Efficiency,"`. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, time taken: 250.7947356943041 seconds.; Valine energy: -401.1469758245755 Hartrees, time taken: 182.75560629181564 seconds.; ```; [Local_psi4_outputs.tar.gz](https://github.com/user-attachments/files/17141527/Local_psi4_outputs.tar.gz); [Summit_psi4_outputs.tar.gz](https://github.com/user-attachments/files/17141532/Summit_psi4_outputs.tar.gz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:3229,energy,energy,3229,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,9,['energy'],['energy']
Energy Efficiency,"`; mol = psi4.geometry(""""""; H 0.000 0.000 0.000; H 0.000 0.000 0.740; Symmetry c1; """"""); psi4.set_options({'basis': 'sto-3g'}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); print(""MO coefficients""); print(wfn.Ca().to_array()); print(""Fock in the AO basis""); print(wfn.Fa_subset(""AO"").to_array()); print(""Fock in the MO basis""); print(wfn.Fa_subset(""MO"").to_array()); ```; this gives the following output:; ```; MO coefficients ; [[ 0.54884228 1.21245192]; [ 0.54884228 -1.21245192]]; Fock in the AO basis; [[-0.36607883 -0.59428702]; [-0.59428702 -0.36607883]]; Fock in the MO basis; [[-1.59408547e+00 8.04278118e-16]; [ 7.39285035e-16 7.76197397e-02]]; ```; and in the output file; ```; Orbital Energies [Eh]; ---------------------; Doubly Occupied: ; 1A -0.578578 ; Virtual: ; 2A 0.670950 ; @DF-RHF Final Energy: -1.11678331788308; ```; the orbital energies in the output file are correct, which should be the diagonal elements of the Fock matrix in the MO basis, but these are different. . I check the AO and MO coefficients produced by two other QM programs (pyscf is below) to see where the inconsistency might be, they both produced the ""correct"" Fock matrix (i.e. the diagnoal elements in the MO basis are the orbital energies) with the following MO coefficients:; pyscf input; ```; import numpy; from pyscf import gto, scf, lo. geometry = '''; H 0.000 0.000 0.000; H 0.000 0.000 0.740; ''' . mol = gto.M(atom=geometry,; basis='STO-3G') ; mf = scf.RHF(mol); mf.kernel(); print(mf.kernel()); Fao = mf.get_fock(); print(""MO coefficients""); print(mf.mo_coeff); print(""Fock in AO basis""); print(Fao); Fmo = mf.mo_coeff.T @ Fao @ mf.mo_coeff; print(""Fock in MO basis""); print(Fmo); ```; ```; converged SCF energy = -1.11675930739643; -1.1167593073964255; MO coefficients; [[ 0.54884228 -1.21245192]; [ 0.54884228 1.21245192]]; Fock in AO basis; [[-0.36602603 -0.59429997]; [-0.59429997 -0.36602603]]; Fock in MO basis; [[-5.78553860e-01 -2.43968808e-16]; [-2.12179326e-16 6.71143492e-01]]. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699:1950,energy,energy,1950,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699,2,['energy'],['energy']
Energy Efficiency,"`NO_RESPONSE` is only for SAPT0, that's right. The open-shell SAPT0 uses a different implementation and a different variable (I think it's `COUPLED_INDUCTION`) that already issues the proper warning, so I thought it would be more consistent to have closed-shell SAPT0 do the same. Currently, when induction is uncoupled, the induction energy gets put in both an UNCOUPLED and a COUPLED induction Psivar, with a warning in the output file. Would you rather have us not set the COUPLED variables ? We could then delete the warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-362872366:335,energy,energy,335,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-362872366,1,['energy'],['energy']
Energy Efficiency,```; $ ctest -j 1 -E dft-bench --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 799.52 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1815.94 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 406.26 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 407.07 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 652.29 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 433.67 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 248.39 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 644.29 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 188.07 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 207.25 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 169.73 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 287.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1746.35 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 117.02 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.02 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 38.38 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.85 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.66 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.72 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.05 sec; Start 7: casscf-sp; 21/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:610,energy,energy-large,610,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy-large']
Energy Efficiency,```; $ ctest -j 1 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 513.47 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1836.71 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 380.51 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 319.26 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 508.84 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 415.27 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 234.47 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 619.81 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 191.63 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 204.32 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 171.24 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 293.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1738.06 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 101.48 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.21 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 34.53 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.66 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.72 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.18 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.12 sec; Start 7: casscf-sp; 21/411 Test #7: casscf-sp .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:590,energy,energy-large,590,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 245: nbody-convergence; Start 405: python-vibanalysis; Start 181: fsapt1; Start 11: cbs-delta-energy; Start 185: isapt1; Start 18: cbs-xtpl-func; Start 184: fsapt-allterms; Start 196: fd-freq-energy-large; Start 198: fd-freq-gradient-large; Start 287: opt13; Start 28: cc13b; Start 310: pywrap-all; Start 107: dcft-grad2; Start 22: cc1; Start 32: cc15; Start 45: cc28; 1/415 Test #184: fsapt-allterms ................... Passed 110.85 sec; Start 110: dcft1; 2/415 Test #287: opt13 ............................ Passed 189.62 sec; Start 79: cc8; 3/415 Test #45: cc28 ............................. Passed 206.85 sec; Start 152: dfomp3-grad2; 4/415 Test #32: cc15 ............................. Passed 210.28 sec; Start 233: mp2-module; 5/415 Test #22: cc1 .............................. Passed 218.85 sec; Start 35: cc18; 6/415 Test #28: cc13b ............................ Passed 229.19 sec; Start 312: pywrap-cbs1; 7/415 Test #110: dcft1 ............................ Passed 127.34 sec; Start 27: cc13a; 8/415 Test #107: dcft-grad2 ....................... Passed 252.96 sec; Start 116: dcft7; 9/415 Test #79: cc8 .............................. Passed 81.11 sec; Start 208: frac-traverse; 10/415 Test #185: isapt1 ........................... Passed 272.01 sec; Start 326: sapt2; 11/415 Test #35: cc18 ............................. Passed 60.66 sec; Start 328: sapt4; 12/415 Test #245: nbody-convergence ................ Passed 293.73 sec; Start 335: scf-bz2; 13/415 Test #152: dfomp3-grad2 ..................... Passed 117.47 sec; Start 251: ocepa-grad2; 14/415 Test #233: mp2-module ....................... Passed 120.91 sec; Start 68: cc49; 15/415 Test #326: sapt2 ............................ Passed 97.27 sec; Start 58: cc4; 16/415 Test #208: frac-traverse .................... Passed 108.53 sec; Start 390: cc-module; 17/415 Test #198: fd-freq-gradient-large ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:232,energy,energy,232,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,2,['energy'],"['energy', 'energy-large']"
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 122: dfccdl1; Start 124: dfccsd1; Start 395: python-vibanalysis; Start 156: dft-grad-lr3; Start 104: dcft-grad1; Start 228: mp2-def2; Start 179: fsapt1; Start 111: dcft4; Start 301: pywrap-all; Start 39: cc23; Start 183: isapt1; Start 37: cc21; Start 36: cc2; Start 42: cc26; Start 46: cc3; Start 40: cc24; 1/412 Test #122: dfccdl1 .......................... Passed 6.36 sec; Start 18: cbs-xtpl-func; 2/412 Test #124: dfccsd1 .......................... Passed 10.68 sec; Start 182: fsapt-allterms; 3/412 Test #42: cc26 ............................. Passed 241.32 sec; Start 194: fd-freq-energy-large; 4/412 Test #36: cc2 .............................. Passed 267.40 sec; Start 196: fd-freq-gradient-large; 5/412 Test #40: cc24 ............................. Passed 276.21 sec; Start 279: opt13; 6/412 Test #37: cc21 ............................. Passed 307.87 sec; Start 241: ocepa-freq1; 7/412 Test #39: cc23 ............................. Passed 310.94 sec; Start 41: cc25; 8/412 Test #46: cc3 .............................. Passed 370.77 sec; Start 146: dfomp2-grad3; 9/412 Test #228: mp2-def2 ......................... Passed 429.97 sec; Start 307: pywrap-checkrun-uhf; 10/412 Test #183: isapt1 ........................... Passed 436.25 sec; Start 305: pywrap-checkrun-rhf; 11/412 Test #156: dft-grad-lr3 ..................... Passed 470.44 sec; Start 112: dcft5; 12/412 Test #104: dcft-grad1 ....................... Passed 479.75 sec; Start 374: dft-custom-mgga; 13/412 Test #111: dcft4 ............................ Passed 507.03 sec; Start 43: cc27; 14/412 Test #301: pywrap-all ....................... Passed 521.85 sec; Start 113: dcft6; 15/412 Test #41: cc25 ............................. Passed 236.96 sec; Start 321: sapt6; 16/412 Test #241: ocepa-freq1 ...................... Passed 240.27 sec; Start 77: cc7; 17/412 Test #196: fd-freq-gradient-large ......",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:721,energy,energy-large,721,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:268,energy,energy-large,268,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 395: python-vibanalysis; Start 179: fsapt1; Start 183: isapt1; Start 18: cbs-xtpl-func; Start 182: fsapt-allterms; Start 194: fd-freq-energy-large; Start 196: fd-freq-gradient-large; Start 279: opt13; Start 26: cc13a; Start 114: dcft7; Start 206: frac-traverse; Start 317: sapt2; Start 319: sapt4; Start 326: scf-bz2; Start 1: adc1; Start 2: adc2; 1/412 Test #1: adc1 ............................. Passed 40.38 sec; Start 3: casscf-fzc-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:268,energy,energy-large,268,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; \ Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:270,energy,energy-large,270,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:268,energy,energy-large,268,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy-large']
Energy Efficiency,```; $ ctest -j 32; Test project /home/raimis/psi4.git/linux_build; Start 401: json-schema_0_properties; Start 371: dft-bench-interaction; Start 370: dft-bench-ionization; Start 391: python-vibanalysis; Start 102: dcft-grad1; Start 174: fsapt1; Start 178: isapt1; Start 109: dcft4; Start 300: pywrap-checkrun-rhf; Start 302: pywrap-checkrun-uhf; Start 236: ocepa-freq1; Start 18: cbs-xtpl-func; Start 177: fsapt-allterms; Start 189: fd-freq-energy-large; Start 191: fd-freq-gradient-large; Start 274: opt13; Start 301: pywrap-checkrun-rohf; Start 144: dfomp2-grad3; Start 110: dcft5; Start 13: cbs-xtpl-alpha; Start 296: pywrap-all; Start 354: tu6-cp-ne2; Start 277: opt-irc-2; Start 111: dcft6; Start 113: dcft8; Start 42: cc27; Start 36: cc21; Start 45: cc3; Start 40: cc25; Start 383: cookbook-rohf-orb-rot; Start 75: cc7; Start 25: cc13a; 1/401 Test #401: json-schema_0_properties .........***Failed 3.21 sec; Start 112: dcft7; 2/401 Test #177: fsapt-allterms ................... Passed 136.27 sec; Start 201: frac-traverse; 3/401 Test #277: opt-irc-2 ........................ Passed 159.76 sec; Start 312: sapt2; 4/401 Test #111: dcft6 ............................ Passed 165.22 sec; Start 314: sapt4; 5/401 Test #383: cookbook-rohf-orb-rot ............ Passed 222.55 sec; Start 321: scf-bz2; 6/401 Test #312: sapt2 ............................ Passed 93.85 sec; Start 29: cc14; 7/401 Test #201: frac-traverse .................... Passed 121.71 sec; Start 164: dft1; 8/401 Test #274: opt13 ............................ Passed 292.05 sec; Start 38: cc23; 9/401 Test #178: isapt1 ........................... Passed 299.95 sec; Start 35: cc2; 10/401 Test #191: fd-freq-gradient-large ........... Passed 307.91 sec; Start 223: mp2-def2; 11/401 Test #189: fd-freq-energy-large ............. Passed 319.82 sec; Start 39: cc24; 12/401 Test #13: cbs-xtpl-alpha ................... Passed 330.09 sec; Start 24: cc13; 13/401 Test #321: scf-bz2 .......................... Passed 118.24 sec; Start 17: cbs-xt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:441,energy,energy-large,441,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 340.82 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 486.53 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 538.29 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 603.47 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 281.79 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 716.17 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ......................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 243: ocepa1; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; 1/411 Test #243: ocepa1 ........................... Passed 1.89 sec; Start 193: fd-freq-energy-large; 2/411 Test #227: mp2-def2 ......................... Passed 436.21 sec; Start 195: fd-freq-gradient-large; 3/411 Test #182: isapt1 ........................... Passed 472.25 sec; Start 278: opt13; 4/411 Test #162: dft-grad-lr3 ..................... Passed 488.24 sec; Start 103: dcft-grad1; 5/411 Test #193: fd-freq-energy-large ............. Passed 507.09 sec; Start 300: pywrap-all; 6/411 Test #18: cbs-xtpl-func .................... Passed 512.61 sec; Start 304: pywrap-checkrun-rhf; 7/411 Test #181: fsapt-allterms ................... Passed 628.73 sec; Start 45: cc3; 8/411 Test #195: fd-freq-gradient-large ........... Passed 291.98 sec; Start 373: dft-custom-mgga; 9/411 Test #394: python-vibanalysis ............... Passed 771.15 sec; Start 320: sapt6; 10/411 Test #304: pywrap-checkrun-rhf .............. Passed 277.81 sec; Start 306: pywrap-checkrun-uhf; 11/411 Test #300: pywrap-all ....................... Passed 288.34 sec; Start 112: dcft6; 12/411 Test #45: cc3 .............................. Passed 192.30 sec; Start 155: dfscf-bz2; 13/411 Test #103: dcft-grad1 ....................... Passed 361.67 sec; Start 183: isapt2; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 99.74 sec; Start 39: cc24; 15/411 Test #373: dft-custom-mgga .................. Passed 186.38 sec; Start 305: pywrap-checkrun-rohf; 16/411 Test #320: sapt6 ............................ Passed 165.71 sec; Start 110: dcft4; 17/411 Test #112: dcft6 ............................ Passed 164.24 sec; Start 38: cc23; 18/411 Test #155: dfscf-bz2 ........................ Passed 143.19 sec; Start 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:401,energy,energy-large,401,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 287.94 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 442.34 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 511.29 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 597.58 sec; Start 316: sapt2; 5/411 Test #205: frac-traverse .................... Passed 227.64 sec; Start 318: sapt4; 6/411 Test #278: opt13 ............................ Passed 764.00 sec; Start 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 316.06 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 469.47 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 544.74 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 628.02 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 336.73 sec; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['energy'],['energy-large']
Energy Efficiency,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 323.95 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 528.74 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 536.55 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 593.28 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 297.32 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 736.98 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 247.88 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.30 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 318.32 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 6.14 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 2.45 sec; Start 5: casscf-sa-sp; 12/411 Test #2: adc2 ............................. Passed 46.87 sec; Start 6: ao-casscf-sp; 13/411 Test #394: python-vibanalysis ............... Passed 861.59 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:267,energy,energy-large,267,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['energy'],['energy-large']
Energy Efficiency,```; (psi4) [raimis@computer06 linux_build]$ ctest -j 16; Test project /home/raimis/psi4.git/linux_build; Start 371: dft-bench-interaction; Start 370: dft-bench-ionization; Start 391: python-vibanalysis; Start 174: fsapt1; Start 178: isapt1; Start 18: cbs-xtpl-func; Start 177: fsapt-allterms; Start 189: fd-freq-energy-large; Start 191: fd-freq-gradient-large; Start 274: opt13; Start 25: cc13a; Start 112: dcft7; Start 201: frac-traverse; Start 312: sapt2; Start 314: sapt4; Start 321: scf-bz2; 1/401 Test #312: sapt2 ............................ Passed 83.28 sec; Start 35: cc2; 2/401 Test #201: frac-traverse .................... Passed 108.95 sec; Start 45: cc3; 3/401 Test #321: scf-bz2 .......................... Passed 120.54 sec; Start 44: cc29; 4/401 Test #177: fsapt-allterms ................... Passed 137.88 sec; Start 39: cc24; 5/401 Test #314: sapt4 ............................ Passed 171.80 sec; Start 41: cc26; 6/401 Test #35: cc2 .............................. Passed 99.07 sec; Start 69: cc52; 7/401 Test #44: cc29 ............................. Passed 63.23 sec; Start 38: cc23; 8/401 Test #112: dcft7 ............................ Passed 242.47 sec; Start 40: cc25; 9/401 Test #69: cc52 ............................. Passed 63.01 sec; Start 61: cc44; 10/401 Test #39: cc24 ............................. Passed 117.59 sec; Start 36: cc21; 11/401 Test #25: cc13a ............................ Passed 261.95 sec; Start 75: cc7; 12/401 Test #274: opt13 ............................ Passed 266.64 sec; Start 74: cc6; 13/401 Test #45: cc3 .............................. Passed 162.14 sec; Start 29: cc14; 14/401 Test #41: cc26 ............................. Passed 100.81 sec; Start 42: cc27; 15/401 Test #189: fd-freq-energy-large ............. Passed 277.33 sec; Start 47: cc31; 16/401 Test #191: fd-freq-gradient-large ........... Passed 278.60 sec; Start 68: cc51; 17/401 Test #178: isapt1 ........................... Passed 294.68 sec; Start 296: pywrap-all; 18/401 Test #61: cc44 ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:313,energy,energy-large,313,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy-large']
Energy Efficiency,"```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4953,energy,energy,4953,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"```; from psi4.driver.qcdb.dashparam import get_dispersion_aliases; from psi4.driver.qcdb.dashparam import dashcoeff. for dtype in get_dispersion_aliases():; for func in dashcoeff[dtype]:; check=func in psi4.driver.procedures['energy']; if check == False:; print(dtype, func.upper(), ""missing!""). ```. saving this little bit here for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385800439:227,energy,energy,227,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385800439,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set restricted_docc [2]; set qc_module detci. # Initial guess from CISD natural orbitals; ci_e, ci_wfn = energy('cisd', return_wfn=True). # Run CAS(10,10); set active [10]; cas_e, cas_wfn = energy('casscf', return_wfn=True, ref_wfn=ci_wfn); ```. crashes with 90cbafb2ad1e7a0a70780b26e5caa15c1ed02a60 applied. Without qc_module = detci, the CASSCF initial energy is the same as with HF, I guess the CISD module doesn't have NOs implemented?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275790506:210,energy,energy,210,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790506,3,['energy'],['energy']
Energy Efficiency,"```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF; set basis 6-31G*; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-276463125:1203,energy,energy,1203,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-276463125,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; 1 1; symmetry c1; O; O 1 R1; O 2 R2 1 A1; H 3 R3 2 A2 1 D1. R1=1.228; R2=1.587; R3=0.968; A1=109.80; A2=97.10; D1=180.0; }. set basis 6-31G; set reference rohf; set scf_type pk; set nat_orbs true; scf_e, scf_wfn = energy('scf', return_wfn=True). set restricted_docc [7]; set active [10]; set qc_module detci; ci_e, ci_wfn = energy('cisd', return_wfn=True, ref_wfn=scf_wfn); ```; has Nmo = 29 and docc = 12, so a (10e,10o) active space. I get with cisd; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; with cisdt; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```; and with cisdtq; ```; There are 252 alpha and 252 beta strings; The CI space requires 63504 (6.35E+04) determinants and 1 blocks; ```. 63504 is the dimension of the FCI space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/600#issuecomment-276855493:231,energy,energy,231,https://psicode.org,https://github.com/psi4/psi4/issues/600#issuecomment-276855493,2,['energy'],['energy']
Energy Efficiency,"`bypass_scf` _should_ not work as there is no longer a global wavefunction. So this simply need to be purged from docs/driver/etc and replaced with:. ``` python; scf_e, scf_wfn = energy('SCF', return_wfn = True); energy('other_method', ref_wfn=scf_wfn); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/353#issuecomment-211380881:179,energy,energy,179,https://psicode.org,https://github.com/psi4/psi4/issues/353#issuecomment-211380881,4,['energy'],['energy']
Energy Efficiency,`c-hooo` from the W4-17 database fails to converge in many basis sets; here pcseg-0 for example:; ```; molecule {; 0 2; O 1.14394 0.07535 0.00000; O 0.00000 0.57695 0.00000; O -1.08211 -0.49387 0.00000; H -0.49463 -1.26742 0.00000; }. set basis pcseg-0; set reference uhf; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-619347930:273,energy,energy,273,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-619347930,1,['energy'],['energy']
Energy Efficiency,`cc5` is a near duplicate of `cc5a`. The latter uses a smaller basis set as `cc5` is very slow.; `scf11-freq-from-energies` is a near duplicate of `fd-freq-energy-large` with a slightly different geometry. The former does not pass without adjusting findif stepsize settings.; `dft-pbe0-2` is duplicated verbatim in `dft-custom-dhdf`; `dft-dsd` is duplicated in `dft-custom-dhdf` with corrected reference values. Former does not pass.; `dft-dldf` is duplicated in `dft-custom-mgga` with corrected reference values. Former does not pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655#issuecomment-1203164328:156,energy,energy-large,156,https://psicode.org,https://github.com/psi4/psi4/pull/2655#issuecomment-1203164328,1,['energy'],['energy-large']
Energy Efficiency,"`compute_gradient` after a `energy(""ccsd"")` and `gradient(""scf"")` also throw the wfn.h error, so no worries there. py-side `gradient(""ccsd"")` is what this PR misses catching, as I see it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869809049:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869809049,1,['energy'],['energy']
Energy Efficiency,`compute_gradient` is also in use py-side for dispersion. perhaps we could cease to export the fn for general wfn and only keep export for libdisp and dfmp2. that reduces the risk of relativistic misuse to one method.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927:163,reduce,reduces,163,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927,1,['reduce'],['reduces']
Energy Efficiency,"`density_a` must be the MO density while all quantities on the Wavefunction itself are in the AO basis. I can see how this could be confusing and have edited several parts of the documentation. In addition, most post-SCF methods do not build the density by default as this can be much more costly than the energy itself. Perhaps @amjames can give hints on extracting CC densities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258831635:306,energy,energy,306,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258831635,1,['energy'],['energy']
Energy Efficiency,`df_fitting_condition 1e-5` yields; ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -236767940236.2724609375 -236767940236.2724609375 64635.6718298420 130; ```. so something is still awry.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465304144:51,Energy,Energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465304144,2,['Energy'],['Energy']
Energy Efficiency,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:81,adapt,adapt,81,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,4,"['Energy', 'adapt', 'energy']","['Energy', 'adapt', 'energy']"
Energy Efficiency,`energy('B3lyp/6-311++G**')` is another one the regex needs to be smarter for.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934#issuecomment-379323814:1,energy,energy,1,https://psicode.org,https://github.com/psi4/psi4/issues/934#issuecomment-379323814,1,['energy'],['energy']
Energy Efficiency,"`maxiter = 0` is fundamentally different from `maxiter>0`. Again, in the former no SCF step is even taken; the code should just evaluate the energy. I think there's a limit to the stupidity we can assume from the users...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784545976:141,energy,energy,141,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784545976,1,['energy'],['energy']
Energy Efficiency,"a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1339,energy,energy,1339,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,1,['energy'],['energy']
Energy Efficiency,ability1 ....................... Passed 4.39 sec; Start 223: mints9; 369/413 Test #136: dfmp2-grad1 ...................... Passed 8.06 sec; Start 222: mints-helper; 370/413 Test #122: dfccd1 ........................... Passed 6.37 sec; Start 351: sapt-sf1; 371/413 Test #384: psi4numpy-rhf .................... Passed 1.01 sec; Start 347: dfep2-2; 372/413 Test #380: mints12 .......................... Passed 1.28 sec; Start 332: scf-bs; 373/413 Test #354: stability2 ....................... Passed 2.35 sec; Start 216: mints3; 374/413 Test #224: mints10 .......................... Passed 2.23 sec; Start 289: psimrcc-ccsd_t-1; 375/413 Test #190: fci-tdm .......................... Passed 1.59 sec; Start 329: scf-guess-read1; 376/413 Test #355: tu1-h2o-energy ................... Passed 1.51 sec; Start 336: scf3; 377/413 Test #222: mints-helper ..................... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 sec; Start 313: rasci-h2o; 381/413 Test #332: scf-bs ........................... Passed 1.21 sec; Start 330: scf-upcast-custom-basis; 382/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:35669,energy,energy,35669,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['energy'],['energy']
Energy Efficiency,"ace, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1524,ENERGY,ENERGY,1524,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,ad1 ....................... Passed 1466.56 sec; Start 28: cc13c; 24/413 Test #114: dcft6 ............................ Passed 226.08 sec; Start 71: cc52; 25/413 Test #77: cc7 .............................. Passed 665.07 sec; Start 375: dft-custom-mgga; 26/413 Test #13: cbs-xtpl-alpha ................... Passed 425.08 sec; Start 98: cisd-opt-fd; 27/413 Test #28: cc13c ............................ Passed 157.23 sec; Start 307: pywrap-checkrun-rohf; 28/413 Test #46: cc3 .............................. Passed 1642.77 sec; Start 322: sapt6; 29/413 Test #242: ocepa-freq1 ...................... Passed 704.28 sec; Start 31: cc15; 30/413 Test #71: cc52 ............................. Passed 164.06 sec; Start 44: cc28; 31/413 Test #197: fd-freq-gradient-large ........... Passed 290.82 sec; Start 106: dcft-grad2; 32/413 Test #98: cisd-opt-fd ...................... Passed 155.65 sec; Start 146: dfomp2-grad2; 33/413 Test #375: dft-custom-mgga .................. Passed 183.50 sec; Start 11: cbs-delta-energy; 34/413 Test #112: dcft4 ............................ Passed 1745.55 sec; Start 160: dfscf-bz2; 35/413 Test #31: cc15 ............................. Passed 89.05 sec; Start 58: cc40; 36/413 Test #44: cc28 ............................. Passed 88.29 sec; Start 283: opt-irc-2; 37/413 Test #322: sapt6 ............................ Passed 158.72 sec; Start 117: dcft9; 38/413 Test #146: dfomp2-grad2 ..................... Passed 99.16 sec; Start 60: cc42; 39/413 Test #106: dcft-grad2 ....................... Passed 122.59 sec; Start 151: dfomp3-grad2; 40/413 Test #58: cc40 ............................. Passed 84.64 sec; Start 47: cc30; 41/413 Test #160: dfscf-bz2 ........................ Passed 131.53 sec; Start 349: sapt-dft2; 42/413 Test #60: cc42 ............................. Passed 81.75 sec; Start 251: omp2-4; 43/413 Test #151: dfomp3-grad2 ..................... Passed 88.57 sec; Start 261: omp3-3; 44/413 Test #195: fd-freq-energy-large ............. Passed 515.62 sec; Start 262: omp3-4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:3495,energy,energy,3495,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['energy'],['energy']
Energy Efficiency,ad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec; Start 170: dft1-alt; 79/404 Test #204: frac-ip-fitting .................. Passed 44.19 sec; Start 347: sapt-dft2; 80/404 Test #244: ocepa2 ........................... Passed 30.49 sec; Start 19: cbs-xtpl-wrapper; 81/404 Test #11: cbs-delta-energy ................. Passed 54.44 sec; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:7651,energy,energy,7651,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,added plot for Argon dimer showing oscillating energy (following the Ochsenfeld paper),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-481629474:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-481629474,1,['energy'],['energy']
Energy Efficiency,adient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec; 398/412 Test #175: docs-bases ....................... Passed 0.78 sec; 399/412 Test #210: mcscf1 ........................... Passed 1.26 sec; 400/412 Test #397: python-memdfjk ................... Passed 1.51 sec; 401/412 Test #213: mints1 ........................... Passed 0.96 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36719,energy,energy,36719,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,"agrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13544,energy,energy,13544,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"aid, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2656,energy,energy,2656,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['energy'],['energy']
Energy Efficiency,"al Energies [Eh]									 <; ---------------------									 <; 												 <; Doubly Occupied: 			 <; 												 <; 1Ag -30.481683 2Ag -1.294447 1B1u -0.437312 				 <; 1B3u -0.437312 1B2u -0.437308 							 <; 												 <; Virtual: 			 <; 												 <; 2B1u 1.320623 2B3u 1.320623 2B2u 1.320642 				 <; 3Ag 1.748199 4Ag 4.628379 1B2g 4.628379 				 <; 1B3g 4.628379 1B1g 4.628379 5Ag 4.628380 				 <. Final Occupation by Irrep:									 |	 @RKS iter 4: -64.85356066083639 1.85276e+00 2.38223e+04 DIIS; 												 >	 Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u 						 Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]						 DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. @RKS Final Energy: -128.85010519995217							 |	 @RKS iter 5: -6.75599189156451 5.80976e+01 1.01095e+00 DIIS; 												 |	 Occupation by irrep:; => Energetics <=										 |	 Ag B1g B2g B3g Au B1u B2u B3u ; 												 |	 DOCC [ 2, 1, 1, 1, 0, 0, 0, 0 ]; Nuclear Repulsion Energy = 0.0000000000000000					 <; One-Electron Energy = -182.5700580338770465					 <; Two-Electron Energy = 66.1959588591321619					 <; DFT Exchange-Correlation Energy = -12.4760060252072993					 <; Empirical Dispersion Energy = 0.0000000000000000					 <; VV10 Nonlocal Energy = 0.0000000000000000					 <; Total Energy = -128.8501051999521962					 <; 												 <; Computation Completed										 <; 												 <; 												 <; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]				 <; 												 <; Properties computed using the SCF density matrix						 <; 												 <; Nuclear Dipole Moment: [e a0]									 <; X: 0.0000 Y: 0.0000 Z: 0.0000					 <; 												 <; Electronic Dipole Moment: [e a0]								 <; X: 0.0000 Y: 0.0000 Z: 0.0000					 <; 												 <; Dipole Moment: [e a0]										 <; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000			 <; 												 <; Dipole Moment: [D]										 <; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000			 <. 												 >	 @RKS iter 6: -59.21347042486877 -5.24575e+01 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:10607,Energy,Energy,10607,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Energy'],['Energy']
Energy Efficiency,all nice exercises...but as chargemol can take wfx files I would first try to make such files from the psi4 molden files using https://github.com/zorkzou/Molden2AIM. ; Then you don't have to abuse cube files for data transfer. Or is this something else and not chargemol?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436698161:28,charge,chargemol,28,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436698161,2,['charge'],['chargemol']
Energy Efficiency,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1149,energy,energy,1149,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260,2,['energy'],['energy']
Energy Efficiency,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11679,energy,energy,11679,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,10,['energy'],['energy']
Energy Efficiency,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183509137:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"ared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); gcp_part = core.Matrix.from_array(jobrec.return_result); dashd_part.add(gcp_part); ; ```. your script needed a couple tweaks, so here's a working version:; ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:3821,charge,charge,3821,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['charge'],['charge']
Energy Efficiency,"arge = 0, multiplicity = 1:						 Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440176200		 NE 0.000000000000 0.000000000000 0.000000000000 19.992440176200. Running in d2h symmetry.										 Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]			 Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]			 Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000								 Nuclear repulsion = 0.000000000000000. Charge = 0											 Charge = 0; Multiplicity = 1											 Multiplicity = 1; Electrons = 10											 Electrons = 10; Nalpha = 5											 Nalpha = 5; Nbeta = 5											 Nbeta = 5. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is DIRECT.										 SCF Algorithm Type is DIRECT.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is CORE.											 Guess Type is CORE.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-05										 Density threshold = 1.00e-05; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. -AO BASIS SET INFORMATION:									 |	 Basis Set: CC-PVDZ; Name = CC-PVDZ								 |	 Blend: CC-PVDZ; Blend = CC-PVDZ								 |	 Number of shells: 6; Total number of shells = 6									 |	 Number of basis function: 14; Number of primitives = 22									 |	 Number of Cartesian functions: 15; Number of AO = 15							",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:2571,Charge,Charge,2571,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,2,['Charge'],['Charge']
Energy Efficiency,"arify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1156,ENERGY,ENERGY,1156,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,art 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:1855,energy,energy,1855,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['energy'],['energy']
Energy Efficiency,art 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:1856,energy,energy,1856,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['energy'],['energy']
Energy Efficiency,art 43: cc28; 48/411 Test #97: cisd-opt-fd ...................... Passed 154.70 sec; Start 59: cc42; 49/411 Test #17: cbs-xtpl-opt ..................... Passed 90.29 sec; Start 347: sapt-dft2; 50/411 Test #373: dft-custom-mgga .................. Passed 178.76 sec; Start 26: cc13b; 51/411 Test #57: cc40 ............................. Passed 62.96 sec; Start 20: cc1; 52/411 Test #320: sapt6 ............................ Passed 163.15 sec; Start 30: cc15; 53/411 Test #107: dcft1 ............................ Passed 67.37 sec; Start 147: dfomp3-2; 54/411 Test #158: dfscf-bz2 ........................ Passed 135.99 sec; Start 74: cc5a; 55/411 Test #181: fsapt-allterms ................... Passed 571.01 sec; Start 69: cc51; 56/411 Test #386: cookbook-rohf-orb-rot ............ Passed 200.39 sec; Start 75: cc6; 57/411 Test #43: cc28 ............................. Passed 100.27 sec; Start 154: dft-grad-lr2; 58/411 Test #59: cc42 ............................. Passed 99.93 sec; Start 65: cc48; 59/411 Test #193: fd-freq-energy-large ............. Passed 499.88 sec; Start 168: dft1; 60/411 Test #183: isapt2 ........................... Passed 128.83 sec; Start 302: pywrap-cbs1; 61/411 Test #347: sapt-dft2 ........................ Passed 119.85 sec; Start 25: cc13a; 62/411 Test #147: dfomp3-2 ......................... Passed 126.78 sec; Start 113: dcft7; 63/411 Test #30: cc15 ............................. Passed 133.87 sec; Start 205: frac-traverse; 64/411 Test #20: cc1 .............................. Passed 139.89 sec; Start 316: sapt2; 65/411 Test #26: cc13b ............................ Passed 142.88 sec; Start 318: sapt4; 66/411 Test #74: cc5a ............................. Passed 110.18 sec; Start 325: scf-bz2; 67/411 Test #379: cc-module ........................ Passed 236.85 sec; Start 61: cc44; 68/411 Test #69: cc51 ............................. Passed 103.52 sec; Start 140: dfomp2-2; 69/411 Test #154: dft-grad-lr2 ..................... Passed 106.99 sec; Start 34: cc19; 70/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:5812,energy,energy-large,5812,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy-large']
Energy Efficiency,art 76: cc6; 65/412 Test #372: dft-custom-dhdf .................. Passed 94.74 sec; Start 27: cc13b; 66/412 Test #19: cbs-xtpl-nbody ................... Passed 29.27 sec; Start 31: cc15; 67/412 Test #27: cc13b ............................ Passed 12.53 sec; Start 70: cc51; 68/412 Test #279: opt13 ............................ Passed 803.57 sec; Start 28: cc13c; 69/412 Test #31: cc15 ............................. Passed 17.78 sec; Start 318: sapt3; 70/412 Test #28: cc13c ............................ Passed 24.56 sec; Start 145: dfomp2-grad2; 71/412 Test #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:7190,energy,energy,7190,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1017,adapt,adapted,1017,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,1,['adapt'],['adapted']
Energy Efficiency,assed 0.89 sec; Start 400: json-schema-1-ghost; 382/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.47 sec; Start 353: tu1-h2o-energy; 383/411 Test #220: mints-helper ..................... Passed 1.12 sec; Start 330: scf-bs; 384/411 Test #411: skeletonwavefunction ............. Passed 0.90 sec; Start 378: mints12; 385/411 Test #398: json-v11-gradient ................ Passed 0.97 sec; Start 349: sapt-sf1; 386/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.48 sec; Start 387: python-energy; 387/411 Test #404: json-schema-1-properties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 174: docs-bases; 402/411 Test #216: mints5 ........................... Passed 0.57 sec; Start 402: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:36735,energy,energy,36735,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,assed 1.49 sec; Start 288: psimrcc-ccsd_t-1; 362/412 Test #334: scf2 ............................. Passed 1.76 sec; Start 223: mints10; 363/412 Test #189: fci-tdm .......................... Passed 1.78 sec; Start 391: python-mints9; 364/412 Test #161: dft-grac ......................... Passed 1.88 sec; Start 222: mints9; 365/412 Test #362: x2c2 ............................. Passed 2.13 sec; Start 396: python-mints13; 366/412 Test #357: scf-response1 .................... Passed 2.24 sec; Start 411: skeletonsointegrals; 367/412 Test #211: mcscf2 ........................... Passed 1.93 sec; Start 354: tu1-h2o-energy; 368/412 Test #353: stability2 ....................... Passed 1.90 sec; Start 103: decontract; 369/412 Test #331: scf-bs ........................... Passed 1.66 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:34946,energy,energy,34946,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,assed 1366.40 sec; Start 380: cc-module; 18/412 Test #104: dcft-grad1 ....................... Passed 1482.58 sec; Start 18: cbs-xtpl-func; 19/412 Test #30: cc14 ............................. Passed 530.98 sec; Start 182: fsapt-allterms; 20/412 Test #42: cc26 ............................. Passed 719.24 sec; Start 194: fd-freq-energy-large; 21/412 Test #25: cc13 ............................. Passed 644.30 sec; Start 196: fd-freq-gradient-large; 22/412 Test #115: dcft8 ............................ Passed 792.13 sec; Start 279: opt13; 23/412 Test #45: cc29 ............................. Passed 353.43 sec; Start 374: dft-custom-mgga; 24/412 Test #36: cc2 .............................. Passed 842.78 sec; Start 32: cc16; 25/412 Test #183: isapt1 ........................... Passed 425.05 sec; Start 282: opt-irc-2; 26/412 Test #112: dcft5 ............................ Passed 486.74 sec; Start 113: dcft6; 27/412 Test #13: cbs-xtpl-alpha ................... Passed 538.76 sec; Start 11: cbs-delta-energy; 28/412 Test #111: dcft4 ............................ Passed 1785.19 sec; Start 71: cc52; 29/412 Test #380: cc-module ........................ Passed 446.77 sec; Start 321: sapt6; 30/412 Test #29: cc13d ............................ Passed 499.20 sec; Start 159: dfscf-bz2; 31/412 Test #387: cookbook-rohf-orb-rot ............ Passed 499.71 sec; Start 98: cisd-opt-fd; 32/412 Test #360: tu6-cp-ne2 ....................... Passed 503.92 sec; Start 348: sapt-dft2; 33/412 Test #282: opt-irc-2 ........................ Passed 181.33 sec; Start 48: cc31; 34/412 Test #32: cc16 ............................. Passed 186.69 sec; Start 184: isapt2; 35/412 Test #374: dft-custom-mgga .................. Passed 196.14 sec; Start 59: cc41; 36/412 Test #113: dcft6 ............................ Passed 189.44 sec; Start 169: dft1; 37/412 Test #11: cbs-delta-energy ................. Passed 156.32 sec; Start 155: dft-grad-lr2; 38/412 Test #71: cc52 ............................. Passed 137.50 sec; Start 61: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:2992,energy,energy,2992,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,assed 2.19 sec; Start 349: sapt-sf1; 363/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 96: cisd-h2o-clpse; 364/411 Test #408: skeletonmointegrals .............. Passed 1.03 sec; Start 233: mp3-grad1; 365/411 Test #157: dft-grac ......................... Passed 1.50 sec; Start 400: json-schema-1-ghost; 366/411 Test #229: mp2-grad2 ........................ Passed 1.50 sec; Start 333: scf2; 367/411 Test #349: sapt-sf1 ......................... Passed 1.13 sec; Start 353: tu1-h2o-energy; 368/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.53 sec; Start 411: skeletonwavefunction; 369/411 Test #228: mp2-grad1 ........................ Passed 1.56 sec; Start 231: mp2p5-grad1; 370/411 Test #96: cisd-h2o-clpse ................... Passed 1.22 sec; Start 298: pubchem2; 371/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 102: decontract; 372/411 Test #233: mp3-grad1 ........................ Passed 1.31 sec; Start 410: skeletonsointegrals; 373/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 398: json-v11-gradient; 374/411 Test #411: skeletonwavefunction ............. Passed 0.99 sec; Start 210: mcscf2; 375/411 Test #333: scf2 ............................. Passed 1.33 sec; Start 330: scf-bs; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.46 sec; Start 354: tu2-ch2-energy; 377/411 Test #102: decontract ....................... Passed 1.11 sec; Start 406: skeletonaointegrals; 378/411 Test #410: skeletonsointegrals .............. Passed 1.06 sec; Start 222: mints10; 379/411 Test #330: scf-bs ........................... Passed 0.94 sec; Start 188: fci-tdm; 380/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 383: psi4numpy-rhf-gradient; 381/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 387: python-energy; 382/411 Test #210: mcscf2 ........................... Passed 1.34 sec; Start 220: mints-helper; 383/411 Test #354: tu2-ch2-energy .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:34882,energy,energy,34882,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,assed 7.95 sec; Start 15: cbs-xtpl-freq; 247/401 Test #346: dft-reference .................... Passed 3.44 sec; Start 390: python-3-index-transforms; 248/401 Test #196: fnocc2 ........................... Passed 68.39 sec; Start 280: props1; 249/401 Test #85: cepa0-grad2 ...................... Passed 6.79 sec; Start 93: cisd-h2o+-1; 250/401 Test #258: omp3-grad1 ....................... Passed 6.75 sec; Start 287: psimrcc-fd-freq1; 251/401 Test #108: dcft3 ............................ Passed 26.99 sec; Start 126: dfccsdt1; 252/401 Test #311: sapt1 ............................ Passed 9.29 sec; Start 94: cisd-h2o+-2; 253/401 Test #93: cisd-h2o+-1 ...................... Passed 3.01 sec; Start 98: cisd-sp-2; 254/401 Test #121: dfccd-grad1 ...................... Passed 13.83 sec; Start 286: psimrcc-ccsd_t-4; 255/401 Test #302: pywrap-checkrun-uhf .............. Passed 947.45 sec; Start 307: rasci-h2o; 256/401 Test #280: props1 ........................... Passed 4.24 sec; Start 221: mom; 257/401 Test #14: cbs-xtpl-energy .................. Passed 9.40 sec; Start 228: mp2p5-grad2; 258/401 Test #140: dfomp2-3 ......................... Passed 6.80 sec; Start 291: psithon1; 259/401 Test #94: cisd-h2o+-2 ...................... Passed 2.70 sec; Start 129: dfmp2-2; 260/401 Test #390: python-3-index-transforms ........ Passed 6.25 sec; Start 267: opt5; 261/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 5: casscf-sa-sp; 262/401 Test #309: rasscf-sp ........................ Passed 37.02 sec; Start 176: fsapt-terms; 263/401 Test #48: cc32 ............................. Passed 24.10 sec; Start 225: mp2-grad2; 264/401 Test #362: scf-hess1 ........................ Passed 8.87 sec; Start 224: mp2-grad1; 265/401 Test #307: rasci-h2o ........................ Passed 2.28 sec; Start 84: cepa0-grad1; 266/401 Test #7: casscf-sp ........................ Passed 23.83 sec; Start 194: freq-isotope2; 267/401 Test #251: omp2p5-grad1 ..................... Passed 7.23 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:24432,energy,energy,24432,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,"at 3:13 AM Holger Kruse <notifications@github.com>; wrote:. > The following input, given to me via email, gives a 'bad' dMP2 correction; > for SAPT:; >; > delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; > delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; >; > molecule {; > 0 1; > F 0.00000000 0.00000000 2.96216000; > I 0.00000000 0.00000000 0.96704400; > --; > 0 1; > C 0.00000000 0.00000000 -2.52999200; > N 0.00000000 0.00000000 -1.35165800; > Na 0.00000000 0.00000000 -4.84283500; > units angstrom; > no_reorient; > symmetry c1; > }; > memory 20 GiB; > set {; > basis def2-TZVP; > freeze_core true; > }; > energy('sapt2+dMP2'); > energy('mp2',bsse_type=['nocp']); >; > The issue is reproducible for MP2/CCSD post-SCF methods. It is not; > directly DF nor ghost atom related. (besides a possibly small error due; > to #1968 <https://github.com/psi4/psi4/issues/1968>). And not a module; > specific issue.; >; > Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no; > rel. effects.) with global FC=on seems to give 'better' results in the; > sense that MP2 interaction energy is negative.; >; > One, and perhaps only, issue is frozen_core.; > Turning FC = off only for the supermolecular MP2 part gives OK results.; > For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is; > freezing only 3.; > At least for this case, freezing the Ne-shell by default for Na is not a; > good choice.; >; > Tagging @PeterKraus <https://github.com/PeterKraus>.; >; > freeze_core -2 makes the SAPT part crash because sth goes wrong for the IF; > fragment (fragment A):; >; > FOCC A = 18446744073709551611; > FOCC B = 1; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2012>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VFTGKRYGV72IUHFIDSIV4SRANCNFSM4SBLH6ZA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354:2049,energy,energy,2049,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354,1,['energy'],['energy']
Energy Efficiency,"at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 fun",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1333,energy,energy,1333,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"at(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref_d2 = [-0.00390110, -0.00165271, -0.00058118]; ref_d3zero = [-0.00285088, -0.00084340, -0.00031923]; ref_d3bj = [-0.00784595, -0.00394347, -0.00226683]. ref_pbe_d2 = [-0.00278650, -0.00118051, -0.00041513]; ref_pbe_d3zero = [-0.00175474, -0.00045421, -0.00016839]; ref_pbe_d3bj = [-0.00475937, -0.00235265, -0.00131239]. eneyne = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; """"""). print(' -D correction from Py-side'); eneyne.update_geometry(); > E, G = eneyne.run_dftd3('b3lyp', 'd2'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:202:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:8195,energy,energy,8195,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ate I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1147,energy,energy,1147,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"ate: 0.4538994 (a.u.), 12.3512305 (eV); 	4 A state: 0.5246003 (a.u.), 14.2751021 (eV); 	5 A state: 0.5709848 (a.u.), 15.5372886 (eV); 	6 A state: 0.7050389 (a.u.), 19.1850862 (eV); 	7 A state: 1.0543763 (a.u.), 28.6910395 (eV); 	8 A state: 1.0720010 (a.u.), 29.1706341 (eV); 	9 A state: 1.1388267 (a.u.), 30.9890538 (eV); 	10 A state: 1.1821020 (a.u.), 32.1666340 (eV); 	11 A state: 1.1875445 (a.u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.255",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:1635,energy,energy,1635,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"ate: 1.1821020 (a.u.), 32.1666340 (eV); 	11 A state: 1.1875445 (a.u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:1965,energy,energy,1965,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"ations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays canno",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:10497,energy,energy,10497,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,2,['energy'],['energy']
Energy Efficiency,"atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7890,Energy,Energy,7890,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"atural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX 4AB 5AA 6AA 7AX 8AB; >; > the Aufbau determinant has a tiny weight: -5.602591646315e-03. If it's; > really using NOs, the Aufbau determinant should have significant weight,; > right?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/556#issuecomment-275616670>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdrXQXwFMnyc3v9cHAYN_Mscy_dnmks5rWbAGgaJpZM4LdHsQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1899,energy,energy,1899,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,2,['energy'],['energy']
Energy Efficiency,"avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > * 5 0.015212 ( 1, 1) 7AX 9AX; >; > * 6 0.000000 ( 1, 0) 7AX 8AB 9AA; >; > * 7 0.000000 ( 0, 1) 7AX 8AA 9AB; >; > * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX; >; > * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX; >; >; > ------------------------------; > ------------------------------; >; > As you can see, there is typically the same kind of sign for some; > determinants sharing a similar coefficient. For example, for the; > groundstate we have : -0.691216 ( 0, 1) 7AX 8AA 9AB and -0.691216 ( 1, 0); > 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these; > determinants should present opposite signs. To check this, I used a; > personal code to bui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:2805,energy,energy,2805,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,2,['energy'],['energy']
Energy Efficiency,b-rot; 372/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.48 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411 Test #397: json-v11-energy .................. Passed 3.63 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.08 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:35737,energy,energy,35737,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,b-rot; 373/412 Test #376: pywrap-bfs ....................... Passed 26.37 sec; Start 388: python-energy; 374/412 Test #388: python-energy .................... Passed 1.62 sec; Start 389: python-curve; 375/412 Test #386: psi4numpy-fci .................... Passed 9.39 sec; Start 390: python-pubchem; 376/412 Test #375: dft-custom-gga ................... Passed 34.06 sec; Start 391: python-mints9; 377/412 Test #389: python-curve ..................... Passed 4.70 sec; Start 392: python-mints2; 378/412 Test #391: python-mints9 .................... Passed 2.13 sec; Start 393: python-cc54; 379/412 Test #392: python-mints2 .................... Passed 3.94 sec; Start 394: python-3-index-transforms; 380/412 Test #321: sapt6 ............................ Passed 171.44 sec; Start 396: python-mints13; 381/412 Test #396: python-mints13 ................... Passed 1.98 sec; Start 397: python-memdfjk; 382/412 Test #397: python-memdfjk ................... Passed 1.74 sec; Start 398: json-v11-energy; 383/412 Test #394: python-3-index-transforms ........ Passed 12.36 sec; Start 399: json-v11-gradient; 384/412 Test #399: json-v11-gradient ................ Passed 1.56 sec; Start 400: json-schema-1-energy; 385/412 Test #398: json-v11-energy .................. Passed 4.06 sec; Start 401: json-schema-1-ghost; 386/412 Test #401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 404: json-schema-1-gradient; 389/412 Test #403: json-schema-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:35876,energy,energy,35876,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['energy'],['energy']
Energy Efficiency,"been adding some things that are correct but not full-stack hooked up. here are the reminders to do so:; - [ ] after #1491, add the ability to call ATM from functional., e.g. `energy('b3lyp-d3-atm`)`; - [ ] after #1491, MP2D gradients still need addressing; - [ ] after #1490, set up a `energy(sapt0inf)` call (if component anaylysis deems suitable) and add it to the qcvar parade. Also, figure out why it's only in fisapt and is called through dft-sapt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-473124117:176,energy,energy,176,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124117,2,['energy'],['energy']
Energy Efficiency,"been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1074,ENERGY,ENERGY,1074,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"bin/python3.6+0x1c0cb9); #33 0x561a73567458 in PyEval_EvalCodeEx (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x199458); #34 0x561a735681eb in PyEval_EvalCode (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x19a1eb); #35 0x561a735e29a3 in run_mod (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x2149a3); #36 0x561a735e2da0 in PyRun_FileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214da0); #37 0x561a735e2fa3 in PyRun_SimpleFileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214fa3); #38 0x561a735e6a9d in Py_Main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x218a9d); #39 0x561a734ae4bd in main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe04bd); #40 0x7f290458a444 in __libc_start_main (/lib64/libc.so.6+0x22444); #41 0x561a73595772 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c7772). 0x6030003bc668 is located 0 bytes to the right of 24-byte region [0x6030003bc650,0x6030003bc668); allocated by thread T0 here:; #0 0x7f2904bfbe10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7f28e2c07ef9 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/ext/new_allocator.h:111; #2 0x7f28e2c07ef9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/alloc_traits.h:436; #3 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:172; #4 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:9284,allocate,allocated,9284,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocated']
Energy Efficiency,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:1368,power,power,1368,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375,4,"['ENERGY', 'power']","['ENERGY', 'power']"
Energy Efficiency,"bly come a little closer to the borderline where this issue does/does not occur. Seems like it's not related to the low-memory algorithm (I've been using some 500gb RAM machines where the following jobs fit nicely). The first snippet of output completes successfully, the second does not... They are both very similarly sized, which is why I think they might be helpful. As you can see, these jobs are very lengthy... I would be more than happy to supply the inputs, however be mindful that they were running with 64 threads (32 physical cores, hyperthreaded) and 500Gb of ram. ```; *** at Fri Mar 7 12:33:06 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726326. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. memory requirements for CCSD(T): 433739.41 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058514 -3.8800058514 1.0189008044 626; 1 1 3 -3.8152481717 0.0647576797 0.2191661023 24884; 2 2 4 -3.9577344796 -0.1424863079 0.0847277058 25298; 3 3 5 -3.9682900741 -0.0105555944 0.0382308599 25123; 4 4 6 -3.968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:1050,energy,energy,1050,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['energy'],['energy']
Energy Efficiency,"bstart = 0; bstart < nb; bstart += max_b) {; size_t nbblock = (bstart + max_b >= nb ? nb - bstart : max_b);				 size_t nbblock = (bstart + max_b >= nb ? nb - bstart : max_b);. dfh->fill_tensor(""Abs"", Abs, {bstart, bstart + nbblock});					 dfh->fill_tensor(""Abs"", Abs, {bstart, bstart + nbblock});; dfh->fill_tensor(""Bbr"", Bbr, {bstart, bstart + nbblock});				 |	 dfh->fill_tensor(""Bbs"", Bbs, {bstart, bstart + nbblock});; dfh->fill_tensor(""Cbr"", Cbr, {bstart, bstart + nbblock});					 dfh->fill_tensor(""Cbr"", Cbr, {bstart, bstart + nbblock});; dfh->fill_tensor(""Fbs"", Dbs, {bstart, bstart + nbblock});				 |	 dfh->fill_tensor(""Dbr"", Dbr, {bstart, bstart + nbblock});; 												 >	 dfh->fill_tensor(""Ebs"", Ebs, {bstart, bstart + nbblock});. long int nab = nablock * nbblock;								 long int nab = nablock * nbblock;. #pragma omp parallel for schedule(dynamic) reduction(+ : Disp20, ExchDisp20)			 |	#pragma omp parallel for schedule(dynamic) reduction(+ : Disp20, CompleteDisp20); for (long int ab = 0L; ab < nab; ab++) {							 for (long int ab = 0L; ab < nab; ab++) {; int a = ab / nbblock;									 int a = ab / nbblock;; int b = ab % nbblock;									 int b = ab % nbblock;. int thread = 0;										 int thread = 0;; #ifdef _OPENMP												#ifdef _OPENMP; thread = omp_get_thread_num();								 thread = omp_get_thread_num();; #endif													#endif. double** Trsp = Trs[thread]->pointer();							 double** Trsp = Trs[thread]->pointer();; double** Vrsp = Vrs[thread]->pointer();							 double** Vrsp = Vrs[thread]->pointer();. // => Amplitudes, Disp20 <= //								 // => Amplitudes, Disp20 <= //. C_DGEMM('N', 'T', nr, ns, nQ, 1.0, Aarp[(a)*nr], nQ, Absp[(b)*ns], nQ, 0.0, Vrsp	 C_DGEMM('N', 'T', nr, ns, nQ, 1.0, Aarp[(a)*nr], nQ, Absp[(b)*ns], nQ, 0.0, Vrsp. for (int r = 0; r < nr; r++) {								 for (int r = 0; r < nr; r++) {; for (int s = 0; s < ns; s++) {							 for (int s = 0; s < ns; s++) {; Trsp[r][s] = Vrsp[r][s] / (eap[a + astart] + ebp[b + bstart] - erp[r] - 	 Trsp[r][s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:28831,schedul,schedule,28831,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,4,['schedul'],['schedule']
Energy Efficiency,"by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.994914619560; 401: H 0.000000000000 -1.494187339480 1.027446507924 1.007825032070; 401: H -0.000000000000 1.494187339480 1.027446507924 1.007825032070; 401: ; 401: Running in c2v symmetry.; 401: ; 401: Rotational constants: A = 25.12553 B = 13.37732 C = 8.72954 [cm^-1]; 401: Rotational constants: A = 753244.47204 B = 401041.84791 C = 261705.04646 [MHz]; 401: Nuclear repulsion = 8.801462060629429; 401: ; 401: Charge = 0; 401: Multiplicity = 1; 401: Electrons = 10; 401: Nalpha = 5; 401: Nbeta = 5; 401: ; 401: ==> Algorithm <==; 401: ; 401: SCF Algorithm Type is DF.; 401: DIIS enabled.; 401: MOM disabled.; 401: Fractional occupation disabled.; 401: Guess Type is SAD.; 401: Energy threshold = 1.00e-06; 401: Density threshold = 1.00e-06; 401: Integral threshold = 0.00e+00; 401: ; 401: ==> Primary Basis <==; 401: ; 401: Basis Set: 6-31G; 401: Blend: 6-31G; 401: Number of shells: 9; 401: Number of basis function: 13; 401: Number of Cartesian functions: 13; 401: Spherical Harmonics?: false; 401: Max angular momentum: 1; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: (6-31G AUX); 401: Role: JKFIT; 401: Keyword: DF_BASIS_SCF; 401: atoms 1 entry O line 221 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: atoms 2-3 entry H line 51 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: ; 401: ==> Pre-Iterations <==; 401",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:2821,Charge,Charge,2821,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Charge'],['Charge']
Energy Efficiency,"c++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@eule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1610,energy,energy,1610,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['energy'],['energy']
Energy Efficiency,c-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:1561,energy,energy,1561,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,2,['energy'],['energy']
Energy Efficiency,c13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec; Start 196: fd-freq-gradient-large; 34/412 Test #156: dft-grad-lr3 ..................... Passed 451.76 sec; Start 279: opt13; 35/412 Test #228: mp2-def2 ......................... Passed 428.14 sec; Start 374: dft-custom-mgga; 36/412 Test #183: isapt1 ........................... Passed 433.43 sec; Start 321: sapt6; 37/412 Test #374: dft-custom-mgga .................. Passed 185.89 sec; Start 48: cc31; 38/412 Test #196: fd-freq-gradient-large ........... Passed 270.86 sec; Start 98: cisd-opt-fd; 39/412 Test #48: cc31 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2895,energy,energy,2895,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,c; Start 18: cbs-xtpl-func; 20/413 Test #229: mp2-def2 ......................... Passed 374.64 sec; Start 183: fsapt-allterms; 21/413 Test #242: ocepa-freq1 ...................... Passed 672.14 sec; Start 195: fd-freq-energy-large; 22/413 Test #29: cc13d ............................ Passed 269.25 sec; Start 197: fd-freq-gradient-large; 23/413 Test #48: cc31 ............................. Passed 195.21 sec; Start 280: opt13; 24/413 Test #45: cc29 ............................. Passed 176.04 sec; Start 361: tu6-cp-ne2; 25/413 Test #113: dcft5 ............................ Passed 343.29 sec; Start 375: dft-custom-mgga; 26/413 Test #46: cc3 .............................. Passed 1717.81 sec; Start 59: cc41; 27/413 Test #307: pywrap-checkrun-rohf ............. Passed 670.21 sec; Start 388: cookbook-rohf-orb-rot; 28/413 Test #13: cbs-xtpl-alpha ................... Passed 329.60 sec; Start 322: sapt6; 29/413 Test #114: dcft6 ............................ Passed 222.96 sec; Start 381: cc-module; 30/413 Test #11: cbs-delta-energy ................. Passed 275.19 sec; Start 283: opt-irc-2; 31/413 Test #112: dcft4 ............................ Passed 1796.11 sec; Start 61: cc43; 32/413 Test #59: cc41 ............................. Passed 103.24 sec; Start 71: cc52; 33/413 Test #396: python-vibanalysis ............... Passed 1038.97 sec; Start 98: cisd-opt-fd; 34/413 Test #184: isapt1 ........................... Passed 413.67 sec; Start 160: dfscf-bz2; 35/413 Test #361: tu6-cp-ne2 ....................... Passed 174.82 sec; Start 28: cc13c; 36/413 Test #61: cc43 ............................. Passed 78.23 sec; Start 92: cepa-module; 37/413 Test #322: sapt6 ............................ Passed 166.76 sec; Start 304: pywrap-cbs1; 38/413 Test #381: cc-module ........................ Passed 141.83 sec; Start 106: dcft-grad2; 39/413 Test #375: dft-custom-mgga .................. Passed 184.62 sec; Start 349: sapt-dft2; 40/413 Test #388: cookbook-rohf-orb-rot ............ Passed 186.42 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:3206,energy,energy,3206,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['energy'],['energy']
Energy Efficiency,c; Start 297: psimrcc-ccsd_t-1; 128/415 Test #363: stability2 ....................... Passed 1.67 sec; Start 398: python-energy; 129/415 Test #356: dfep2-2 .......................... Passed 2.54 sec; Start 367: scf-response1; 130/415 Test #324: sad1 ............................. Passed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13352,energy,energy,13352,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,c; Start 396: python-memdfjk; 380/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.25 sec; Start 411: skeletonwavefunction; 381/411 Test #293: psimrcc-pt2 ...................... Passed 1.38 sec; Start 408: skeletonmointegrals; 382/411 Test #108: dcft2 ............................ Passed 2.92 sec; Start 410: skeletonsointegrals; 383/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 212: mints1; 399/411 Test #409: skeletonscf ...................... Passed 0.60 sec; Start 364: options1; 400/411 Test #239: numpy-array-interface ............ Passed 0.64 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36565,energy,energy,36565,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,c; Start 80: cc9; 43/401 Test #303: pywrap-db1 ....................... Passed 31.39 sec; Start 70: cc53; 44/401 Test #27: cc13c ............................ Passed 72.66 sec; Start 332: scf5; 45/401 Test #51: cc35 ............................. Passed 15.14 sec; Start 78: cc8b; 46/401 Test #49: cc33 ............................. Passed 14.41 sec; Start 54: cc38; 47/401 Test #55: cc39 ............................. Passed 19.02 sec; Start 43: cc28; 48/401 Test #63: cc47 ............................. Passed 22.87 sec; Start 77: cc8a; 49/401 Test #226: mp2-module ....................... Passed 75.91 sec; Start 298: pywrap-cbs1; 50/401 Test #72: cc55 ............................. Passed 24.10 sec; Start 79: cc8c; 51/401 Test #81: cc9a ............................. Passed 25.08 sec; Start 288: psimrcc-fd-freq2; 52/401 Test #80: cc9 .............................. Passed 21.90 sec; Start 99: ci-property; 53/401 Test #70: cc53 ............................. Passed 19.97 sec; Start 23: cc12; 54/401 Test #11: cbs-delta-energy ................. Passed 127.44 sec; Start 37: cc22; 55/401 Test #54: cc38 ............................. Passed 18.35 sec; Start 65: cc49; 56/401 Test #78: cc8b ............................. Passed 23.61 sec; Start 30: cc15; 57/401 Test #332: scf5 ............................. Passed 32.95 sec; Start 21: cc10; 58/401 Test #77: cc8a ............................. Passed 30.77 sec; Start 16: cbs-xtpl-gradient; 59/401 Test #23: cc12 ............................. Passed 20.30 sec; Start 295: pywrap-alias; 60/401 Test #37: cc22 ............................. Passed 20.74 sec; Start 22: cc11; 61/401 Test #79: cc8c ............................. Passed 26.19 sec; Start 165: dft-vv10; 62/401 Test #99: ci-property ...................... Passed 24.29 sec; Start 71: cc54; 63/401 Test #43: cc28 ............................. Passed 46.96 sec; Start 26: cc13b; 64/401 Test #65: cc49 ............................. Passed 35.49 sec; Start 128: dfmp2-1; 65/401 Test #21: cc10 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:5176,energy,energy,5176,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy']
Energy Efficiency,casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2273,energy,energy,2273,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['energy'],['energy']
Energy Efficiency,cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-property; 77/412 Test #251: omp2-5 ........................... Passed 64.13 sec; Start 264: omp3-grad2; 78/412 Test #32: cc16 ............................. Passed 140.13 sec; Start 303: pywrap-cbs1; 79/412 Test #390: python-pubchem ................... Passed 63.68 sec; Start 145: dfomp2-grad2; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 71.38 sec; Start 231: mp2-module; 81/412 Test #47: cc30 ............................. Passed 73.41 sec; Start 171: dft1-alt; 82/412 Test #257: omp2p5-grad2 ..................... Passed 60.64 sec; Start 61: cc43; 83/412 Test #163: dft-grad-meta .................... Passed 53.44 sec; Start 193: fd-freq-energy; 84/412 Test #44: cc28 ............................. Passed 82.41 sec; Start 150: dfomp3-grad2; 85/412 Test #148: dfomp3-2 ......................... Passed 63.71 sec; Start 82: cc9; 86/412 Test #101: ci-property ...................... Passed 57.32 sec; Start 260: omp3-3; 87/412 Test #58: cc40 ............................. Passed 66.56 sec; Start 220: mints-benchmark; 88/412 Test #59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 243: ocepa-grad2; 91/412 Test #171: dft1-alt ......................... Passed 53.53 sec; Start 132: dfmp2-3; 92/412 Test #264: omp3-grad2 ....................... Passed 71.89 sec; Start 262: omp3-5; 93/412 Test #220: mints-benchmark .................. Passed 42.98 sec; Start 277: opt11; 94/412 Test #145: dfomp2-grad2 ..................... Passed 91.70 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:8124,energy,energy,8124,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy']
Energy Efficiency,cc25; 7/411 Test #162: dft-grad-lr3 ..................... Passed 412.33 sec; Start 38: cc23; 8/411 Test #182: isapt1 ........................... Passed 416.77 sec; Start 76: cc7; 9/411 Test #304: pywrap-checkrun-rhf .............. Passed 243.61 sec; Start 36: cc21; 10/411 Test #39: cc24 ............................. Passed 229.63 sec; Start 35: cc2; 11/411 Test #76: cc7 .............................. Passed 204.63 sec; Start 240: ocepa-freq1; 12/411 Test #40: cc25 ............................. Passed 228.58 sec; Start 41: cc26; 13/411 Test #38: cc23 ............................. Passed 232.18 sec; Start 42: cc27; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 316.81 sec; Start 111: dcft5; 15/411 Test #394: python-vibanalysis ............... Passed 760.31 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 216.12 sec; Start 181: fsapt-allterms; 17/411 Test #41: cc26 ............................. Passed 181.93 sec; Start 193: fd-freq-energy-large; 18/411 Test #35: cc2 .............................. Passed 207.82 sec; Start 195: fd-freq-gradient-large; 19/411 Test #42: cc27 ............................. Passed 170.28 sec; Start 278: opt13; 20/411 Test #240: ocepa-freq1 ...................... Passed 209.57 sec; Start 114: dcft8; 21/411 Test #111: dcft5 ............................ Passed 162.07 sec; Start 305: pywrap-checkrun-rohf; 22/411 Test #114: dcft8 ............................ Passed 63.15 sec; Start 112: dcft6; 23/411 Test #305: pywrap-checkrun-rohf ............. Passed 76.19 sec; Start 320: sapt6; 24/411 Test #112: dcft6 ............................ Passed 119.43 sec; Start 373: dft-custom-mgga; 25/411 Test #195: fd-freq-gradient-large ........... Passed 259.17 sec; Start 29: cc14; 26/411 Test #320: sapt6 ............................ Passed 144.05 sec; Start 155: dfscf-bz2; 27/411 Test #29: cc14 ............................. Passed 51.56 sec; Start 281: opt-irc-2; 28/411 Test #373: dft-custom-mgga ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:1914,energy,energy-large,1914,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy-large']
Energy Efficiency,"ce, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = 1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; B 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 1; Multiplicity = 1; Electrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occup",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:2401,energy,energy,2401,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['energy'],['energy']
Energy Efficiency,"cessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17735,energy,energy,17735,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,2,['energy'],['energy']
Energy Efficiency,cf-sa-sp ..................... Passed 14.84 sec; Start 368: scf-freq1; 225/411 Test #217: mints6 ........................... Passed 11.92 sec; Start 285: props2; 226/411 Test #226: mp2-1 ............................ Passed 8.62 sec; Start 98: cisd-sp; 227/411 Test #143: dfomp2-grad1 ..................... Passed 9.47 sec; Start 201: fnocc3; 228/411 Test #7: casscf-sp ........................ Passed 18.41 sec; Start 14: cbs-xtpl-energy; 229/411 Test #23: cc12 ............................. Passed 18.39 sec; Start 139: dfomp2-1; 230/411 Test #368: scf-freq1 ........................ Passed 11.13 sec; Start 122: dfccd-grad1; 231/411 Test #338: scf7 ............................. Passed 13.09 sec; Start 268: opt2-fd; 232/411 Test #98: cisd-sp .......................... Passed 9.44 sec; Start 369: dft-jk; 233/411 Test #139: dfomp2-1 ......................... Passed 8.89 sec; Start 127: dfccsdt1; 234/411 Test #285: props2 ........................... Passed 14.75 sec; Start 372: dft-custom-hybrid; 235/411 Test #14: cbs-xtpl-energy .................. Passed 14.69 sec; Start 101: cubeprop; 236/411 Test #201: fnocc3 ........................... Passed 17.46 sec; Start 393: python-3-index-transforms; 237/411 Test #268: opt2-fd .......................... Passed 12.91 sec; Start 266: opt1-fd; 238/411 Test #122: dfccd-grad1 ...................... Passed 13.35 sec; Start 141: dfomp2-3; 239/411 Test #127: dfccsdt1 ......................... Passed 7.70 sec; Start 192: fd-freq-energy; 240/411 Test #369: dft-jk ........................... Passed 13.09 sec; Start 197: freq-isotope1; 241/411 Test #141: dfomp2-3 ......................... Passed 6.05 sec; Start 15: cbs-xtpl-freq; 242/411 Test #101: cubeprop ......................... Passed 10.02 sec; Start 357: tu4-h2o-freq; 243/411 Test #372: dft-custom-hybrid ................ Passed 11.78 sec; Start 132: dfmp2-4; 244/411 Test #393: python-3-index-transforms ........ Passed 9.38 sec; Start 90: cepa1; 245/411 Test #266: opt1-fd ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:21905,energy,energy,21905,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,chema-1-gradient; 371/412 Test #407: skeletonaointegrals .............. Passed 16.90 sec; Start 396: python-mints13; 372/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 17.50 sec; Start 299: pubchem2; 373/412 Test #8: castup1 .......................... Passed 17.96 sec; Start 223: mints10; 374/412 Test #331: scf-bs ........................... Passed 17.01 sec; Start 354: tu1-h2o-energy; 375/412 Test #391: python-mints9 .................... Passed 18.84 sec; Start 411: skeletonsointegrals; 376/412 Test #222: mints9 ........................... Passed 17.91 sec; Start 221: mints-helper; 377/412 Test #404: json-schema-1-gradient ........... Passed 16.86 sec; Start 103: decontract; 378/412 Test #396: python-mints13 ................... Passed 17.37 sec; Start 381: psi4numpy-cphf; 379/412 Test #299: pubchem2 ......................... Passed 16.12 sec; Start 384: psi4numpy-rhf-gradient; 380/412 Test #223: mints10 .......................... Passed 16.21 sec; Start 355: tu2-ch2-energy; 381/412 Test #354: tu1-h2o-energy ................... Passed 16.19 sec; Start 397: python-memdfjk; 382/412 Test #411: skeletonsointegrals .............. Passed 15.60 sec; Start 215: mints3; 383/412 Test #221: mints-helper ..................... Passed 15.41 sec; Start 405: json-schema-1-properties; 384/412 Test #103: decontract ....................... Passed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:35719,energy,energy,35719,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,2,['energy'],['energy']
Energy Efficiency,chiral; 363/411 Test #377: pywrap-align-chiral .............. Passed 3.38 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.36 sec; Start 379: cc-module; 365/411 Test #305: pywrap-checkrun-rohf ............. Passed 197.70 sec; Start 380: psi4numpy-cphf; 366/411 Test #380: psi4numpy-cphf ................... Passed 1.32 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.03 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 1.00 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.50 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #375: pywrap-bfs ....................... Passed 25.30 sec; Start 385: psi4numpy-fci; 371/411 Test #374: dft-custom-gga ................... Passed 29.94 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.48 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:34846,energy,energy,34846,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,2,['energy'],['energy']
Energy Efficiency,chiral; 371/411 Test #306: pywrap-checkrun-uhf .............. Passed 336.85 sec; Start 378: mints12; 372/411 Test #378: mints12 .......................... Passed 1.19 sec; Start 379: cc-module; 373/411 Test #376: pywrap-align ..................... Passed 3.89 sec; Start 380: psi4numpy-cphf; 374/411 Test #377: pywrap-align-chiral .............. Passed 3.14 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.28 sec; Start 382: psi4numpy-rhf; 376/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.74 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #382: psi4numpy-rhf .................... Passed 0.90 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 385: psi4numpy-fci; 379/411 Test #300: pywrap-all ....................... Passed 393.32 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.92 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 1.22 sec; Start 388: python-curve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:35504,energy,energy,35504,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['energy'],['energy']
Energy Efficiency,"chwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91835e-02 DIIS	 |	 Ap App ; @DF-UKS iter 3: -75.87814618269091 -4.06312e-01 2.70648e-03 DIIS	 |	 DOCC [ 4, 0 ]; @DF-UKS iter 4: -75.87860013991410 -4.53957e-04 1.85656e-04 DIIS	 |	 SOCC [ 0, 1 ]; @DF-UKS iter 5: -75.87860479400773 -4.65409e-06 5.17609e-05 DIIS	 |; @DF-UKS iter 6: -75.87860525313432 -4.59127e-07 6.18748e-06 DIIS	 |	 @DF-UKS iter 1: -75.69919988631725 -3.76072e+00 8.89804e-02 ; @DF-UKS iter 7: -75.87860525835350 -5.21918e-09 1.04046e-06 DIIS	 |	 @DF-UKS iter 2: -75.57133352451177 1.27866e-01 1.11758e-01 DIIS; @DF-UKS iter 8: -75.87860525846337 -1.09864e-10 1.13063e-07 DIIS	 |	 @DF-UKS iter 3: -76.19695131159150 -6.25618e-01 4.05977e-03 DIIS; @DF-UKS iter 9: -75.87860525846484",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383210085:1670,Energy,Energy,1670,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085,2,['Energy'],['Energy']
Energy Efficiency,"cks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 secon",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11586,energy,energy,11586,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,cphf; 370/411 Test #405: skeleton ......................... Passed 0.94 sec; Start 190: fci-coverage; 371/411 Test #102: decontract ....................... Passed 1.14 sec; Start 398: json-v11-gradient; 372/411 Test #96: cisd-h2o-clpse ................... Passed 1.11 sec; Start 411: skeletonwavefunction; 373/411 Test #229: mp2-grad2 ........................ Passed 1.37 sec; Start 220: mints-helper; 374/411 Test #298: pubchem2 ......................... Passed 1.45 sec; Start 222: mints10; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.09 sec; Start 309: pywrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:35493,energy,energy,35493,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,"ction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.0454606 (a.u.), 1.2370470 (eV); Occ Vir Coefficient; ---------------------------------------------. Converged in 2 iteration.; Squared norm of the S component: 1.0000000; The S vector is rotated up to 90.000 (deg.); #WARNING: Strongly rotated from the CIS state!. -> Corresponding GS total energy (a.u.) = -909.00717671283519. Module time:; user time = 13203.86 seconds = 220.06 minutes; system time = 4785.08 seconds = 79.75 minutes; total time = 17996 seconds = 299.93 minutes; Total time:; user time = 13569.80 seconds = 226.16 minutes; system time = 5014.77 seconds = 83.58 minutes; total time = 18567 seconds = 309.45 minutes. ∩==; (: 3)))== kskkskkskksk BOOOoooooOOOON!; ∪==. Psi4 stopped on: Thursday, 11 April 2019 04:20PM; Psi4 wall time for execution: 5:09:26.20. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The calculation ran, but there is a warning. Does anybody have any good ideas for checking this? I'm sure other codes can compute ADC, but it's not something I've played with before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:3052,energy,energy,3052,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859,1,['energy'],['energy']
Energy Efficiency,"ctron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -122.97213766263802 -1.22972e+02 5.13141e-01; @RKS iter 2: -124.26578841108680 -1.29365e+00 6.24312e-01 DIIS; @RKS iter 3: -128.75874780675335 -4.49296e+00 6.03176e-02 DIIS; @RKS iter 4: -128.79292051117602 -3.41727e-02 3.60017e-03 DIIS; @RKS iter 5: -128.79304881103522 -1.28300e-04 3.68316e-04 DIIS; @RKS iter 6: -128.79305011369129 -1.30266e-06 6.11487e-06 DIIS; @RKS iter 7: -128.79305011405475 -3.63457e-10 1.42312e-08 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.472472 2Ag -1.291608 1B2u -0.442005; 1B3u -0.442005 1B1u -0.442005. Virtual:. 2B1u 1.309754 2B3u 1.309754 2B2u 1.309754; 3Ag 1.759040 4Ag 4.620812 1B1g 4.620812; 1B2g 4.620812 1B3g 4.620812 5Ag 4.620812. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.79305011405475. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5667771440329830; Two-Electron Energy = 66.1914406060751901; DFT Exchange-Correlation Energy = -12.4177135760969506; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.7930501140547506. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total ti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:7317,Energy,Energy,7317,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"cts the `basis_relativistic` basis, which is used internally by x2c to solve the Dirac equation. This is the recommended procedure for basis sets like cc-pVXZ-DK. This table should help:. | `basis` | `basis_relativistic ` | Procedure | Good idea? |; | ------------- | ------------------- | ------------------------------------------------- |------------------- |; | cc-pVDZ-DK | | solve Dirac eq in cc-pVDZ-DK-decon basis/recontract to cc-pVDZ-DK| Yes, default |; | cc-pVDZ-DK | cc-pVDZ-DK-decon | Same as above | Option above is preferred |; | cc-pVDZ-DK | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK basis| No, need to solve Dirac eq in decon basis to get accurate results |; | cc-pVDZ-DK-decon | | solve Dirac eq in cc-pVDZ-DK-decon basis/return Hx2c in cc-pVDZ-DK-decon basis| Yes, if you need high accuracy. Very expensive |; | cc-pVDZ-DK-decon | cc-pVDZ-DK-decon | Same as above| Option above is preferred |; | cc-pVDZ-DK-decon | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK-decon basis| No, need to solve Dirac eq in decon basis to get accurate results |. My student Sam recently posted about this issue. This input should run:. ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```; but fails on the python side. This is equivalent to this other input (which should also run):; ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```. @loriab ""That said, the answer in the docs for the x2c example is known wrong"". I have the fix, the example should read:; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'); ```. @jevandezande: If you are **not** interested in explicitly decontracting the basis the recommended way to run this input is:. ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-dk; relativistic x2c; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288839929:1441,energy,energy,1441,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839929,4,['energy'],['energy']
Energy Efficiency,"d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x2149a3); #36 0x561a735e2da0 in PyRun_FileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214da0); #37 0x561a735e2fa3 in PyRun_SimpleFileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214fa3); #38 0x561a735e6a9d in Py_Main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x218a9d); #39 0x561a734ae4bd in main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe04bd); #40 0x7f290458a444 in __libc_start_main (/lib64/libc.so.6+0x22444); #41 0x561a73595772 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c7772). 0x6030003bc668 is located 0 bytes to the right of 24-byte region [0x6030003bc650,0x6030003bc668); allocated by thread T0 here:; #0 0x7f2904bfbe10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7f28e2c07ef9 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/ext/new_allocator.h:111; #2 0x7f28e2c07ef9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/alloc_traits.h:436; #3 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:172; #4 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:187; #5 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:138; #6 0x7f28e2c07ef9 in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:9536,allocate,allocate,9536,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocate']
Energy Efficiency,d 1.70 sec; Start 382: psi4numpy-dfmp2; 358/412 Test #8: castup1 .......................... Passed 1.72 sec; Start 331: scf-bs; 359/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 2.32 sec; Start 299: pubchem2; 360/412 Test #97: cisd-h2o-clpse ................... Passed 1.62 sec; Start 404: json-schema-1-gradient; 361/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 288: psimrcc-ccsd_t-1; 362/412 Test #334: scf2 ............................. Passed 1.76 sec; Start 223: mints10; 363/412 Test #189: fci-tdm .......................... Passed 1.78 sec; Start 391: python-mints9; 364/412 Test #161: dft-grac ......................... Passed 1.88 sec; Start 222: mints9; 365/412 Test #362: x2c2 ............................. Passed 2.13 sec; Start 396: python-mints13; 366/412 Test #357: scf-response1 .................... Passed 2.24 sec; Start 411: skeletonsointegrals; 367/412 Test #211: mcscf2 ........................... Passed 1.93 sec; Start 354: tu1-h2o-energy; 368/412 Test #353: stability2 ....................... Passed 1.90 sec; Start 103: decontract; 369/412 Test #331: scf-bs ........................... Passed 1.66 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:34568,energy,energy,34568,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,d 4.45 sec; Start 389: python-curve; 322/412 Test #311: rasci-c2-active .................. Passed 7.52 sec; Start 236: mp2-property; 323/412 Test #226: mom .............................. Passed 4.69 sec; Start 312: rasci-h2o; 324/412 Test #378: pywrap-align-chiral .............. Passed 3.44 sec; Start 294: psimrcc-pt2; 325/412 Test #235: mp3-grad2 ........................ Passed 5.64 sec; Start 119: dfcasscf-fzc-sp; 326/412 Test #356: tu3-h2o-opt ...................... Passed 4.82 sec; Start 258: omp3-1; 327/412 Test #344: stability1 ....................... Passed 3.58 sec; Start 352: dft-reference; 328/412 Test #312: rasci-h2o ........................ Passed 2.09 sec; Start 364: zaptn-nh2; 329/412 Test #398: json-v11-energy .................. Passed 3.22 sec; Start 412: skeletonwavefunction; 330/412 Test #294: psimrcc-pt2 ...................... Passed 1.99 sec; Start 328: scf-guess-read1; 331/412 Test #345: dfep2-1 .......................... Passed 3.72 sec; Start 131: dfmp2-2; 332/412 Test #400: json-schema-1-energy ............. Passed 4.20 sec; Start 333: scf-occ; 333/412 Test #266: opt1 ............................. Passed 5.44 sec; Start 385: psi4numpy-rhf-hessian; 334/412 Test #389: python-curve ..................... Passed 3.42 sec; Start 392: python-mints2; 335/412 Test #236: mp2-property ..................... Passed 3.47 sec; Start 402: json-schema-1-orient; 336/412 Test #295: psimrcc-sp1 ...................... Passed 4.98 sec; Start 315: sad1; 337/412 Test #192: fcidump .......................... Passed 5.16 sec; Start 214: mints2; 338/412 Test #412: skeletonwavefunction ............. Passed 1.49 sec; Start 329: scf-upcast-custom-basis; 339/412 Test #119: dfcasscf-fzc-sp .................. Passed 3.11 sec; Start 346: dfep2-2; 340/412 Test #258: omp3-1 ........................... Passed 3.09 sec; Start 290: psimrcc-ccsd_t-3; 341/412 Test #328: scf-guess-read1 .................. Passed 2.07 sec; Start 350: sapt-sf1; 342/412 Test #352: dft-reference .........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:31174,energy,energy,31174,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,d 6.79 sec; Start 236: mp2-property; 322/412 Test #356: tu3-h2o-opt ...................... Passed 5.64 sec; Start 398: json-v11-energy; 323/412 Test #400: json-schema-1-energy ............. Passed 4.36 sec; Start 119: dfcasscf-fzc-sp; 324/412 Test #295: psimrcc-sp1 ...................... Passed 5.67 sec; Start 258: omp3-1; 325/412 Test #226: mom .............................. Passed 6.16 sec; Start 352: dft-reference; 326/412 Test #272: opt5 ............................. Passed 6.07 sec; Start 385: psi4numpy-rhf-hessian; 327/412 Test #230: mp2-grad2 ........................ Passed 7.17 sec; Start 364: zaptn-nh2; 328/412 Test #122: dfccdl1 .......................... Passed 6.15 sec; Start 312: rasci-h2o; 329/412 Test #266: opt1 ............................. Passed 8.11 sec; Start 294: psimrcc-pt2; 330/412 Test #344: stability1 ....................... Passed 4.56 sec; Start 392: python-mints2; 331/412 Test #345: dfep2-1 .......................... Passed 4.20 sec; Start 131: dfmp2-2; 332/412 Test #398: json-v11-energy .................. Passed 2.33 sec; Start 214: mints2; 333/412 Test #192: fcidump .......................... Passed 7.02 sec; Start 333: scf-occ; 334/412 Test #312: rasci-h2o ........................ Passed 1.99 sec; Start 315: sad1; 335/412 Test #236: mp2-property ..................... Passed 3.18 sec; Start 328: scf-guess-read1; 336/412 Test #389: python-curve ..................... Passed 3.54 sec; Start 329: scf-upcast-custom-basis; 337/412 Test #294: psimrcc-pt2 ...................... Passed 1.77 sec; Start 346: dfep2-2; 338/412 Test #364: zaptn-nh2 ........................ Passed 2.70 sec; Start 402: json-schema-1-orient; 339/412 Test #258: omp3-1 ........................... Passed 2.96 sec; Start 412: skeletonwavefunction; 340/412 Test #119: dfcasscf-fzc-sp .................. Passed 3.02 sec; Start 290: psimrcc-ccsd_t-3; 341/412 Test #131: dfmp2-2 .......................... Passed 1.98 sec; Start 289: psimrcc-ccsd_t-2; 342/412 Test #392: python-mint,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:31179,energy,energy,31179,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"d Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_option_list(); print(""\nAvailable Options:""); print(options). # Check specific option; print(""\nIs 'tdscf_type' available?"", 'tdscf_type' in options). And here's the result I got when I ran the script:; (psi4_env) -bash-4.2# python3 CF_PEC_Project.py. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/; Avail",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:5292,energy,energy,5292,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1807,adapt,adapted,1807,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,2,['adapt'],['adapted']
Energy Efficiency,"d be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > > .; > >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/796#issuecomment-331884804>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcVnVaDTdIjAAgctHtOFPT0ldszOGks5sl63AgaJpZM4PK23n>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331891537:1378,energy,energy,1378,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537,1,['energy'],['energy']
Energy Efficiency,"d state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting optio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3843,Energy,Energy,3843,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"d to a state ~20 hartrees below the def2-TZVP result. I think the def2-TZVP is the ""correct"" state as it converges to this state in vacuum and with PCMSolver using def2-TZVPPD, as well as using ddX with def2-TZVPP. . I tried changing the guess to Huckel which seems to have resolved the issue for this particular case. I also tried changing the convergence algorithm (e.g. using damping, not using ADIIS, etc), as well as other guesses, but only the Huckel guess was able to converge to the same state as the def2-TZVP. . I would think that the specific solution isn't necessarily transferrable to all other systems, but that fiddling with the convergence/guess settings may help in general. Result:; ```; MBIS Charges: (a.u.); Center Symbol Z Pop. Charge; 1 C 6 6.139025 -0.139025; 2 C 6 6.133511 -0.133511; 3 C 6 6.122876 -0.122876; 4 C 6 6.070789 -0.070789; 5 C 6 6.122873 -0.122873; 6 C 6 6.133418 -0.133418; 7 I 25 25.053866 -0.053866; 8 H 1 0.850991 0.149009; 9 H 1 0.849569 0.150431; 10 H 1 0.836862 0.163138; 11 H 1 0.836785 0.163215; 12 H 1 0.849450 0.150550; ```. Input:; ```; molecule test {; 0 1; C -2.770566610000 0.138041700000 0.070178320000; C -1.574766790000 -2.182402580000 0.041630990000; C 1.033304570000 -2.323434390000 -0.024422900000; C 2.435037490000 -0.121299970000 -0.061679550000; C 1.259017560000 2.209348470000 -0.033641890000; C -1.350150920000 2.328080550000 0.032456990000; I 6.389923580000 -0.318582790000 -0.161855610000; H -4.794725900000 0.238941070000 0.121450260000; H -2.664958600000 -3.891956620000 0.070604800000; H 1.951364020000 -4.127647160000 -0.046322210000; H 2.351710440000 3.913369620000 -0.062674850000; H -2.265188840000 4.137542080000 0.054275640000; units bohr; no_com; no_reorient; }. set {; basis def2-TZVPPD; ddx true; ddx_model pcm; ddx_solvent_epsilon 4.0; guess huckel; }. energy('pbe0'); properties('pbe0',properties= [""mbis_charges"",""quadrupole"",""mulliken_charges"",""dipole"",""lowdin_charges"",""wiberg_lowdin_indices"",""mayer_indices"", ]); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-2349712230:1905,energy,energy,1905,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-2349712230,1,['energy'],['energy']
Energy Efficiency,"d.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 67 (A) A 70 (A) A 0.6385; 67 (A) A 73 (A) A 0.1036; ---------------------------------------------------------; ----------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4962,energy,energy,4962,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190,2,['energy'],['energy']
Energy Efficiency,d1; 303/415 Test #228: mom .............................. Passed 7.35 sec; Start 237: mp3-grad2; 304/415 Test #207: frac-ip-fitting .................. Passed 55.28 sec; Start 240: nbody-he-cluster; 305/415 Test #231: mp2-grad1 ........................ Passed 6.35 sec; Start 241: nbody-intermediates; 306/415 Test #232: mp2-grad2 ........................ Passed 11.81 sec; Start 242: nbody-nocp-gradient; 307/415 Test #237: mp3-grad2 ........................ Passed 9.82 sec; Start 243: nbody-cp-gradient; 308/415 Test #236: mp3-grad1 ........................ Passed 10.08 sec; Start 244: nbody-vmfc-gradient; 309/415 Test #235: mp2p5-grad2 ...................... Passed 11.14 sec; Start 246: nbody-freq; 310/415 Test #229: mp2-1 ............................ Passed 24.07 sec; Start 247: nbody-multi-level; 311/415 Test #241: nbody-intermediates .............. Passed 26.74 sec; Start 249: ocepa-freq1; 312/415 Test #242: nbody-nocp-gradient .............. Passed 21.71 sec; Start 250: ocepa-grad1; 313/415 Test #195: fd-freq-energy ................... Passed 115.82 sec; Start 253: ocepa2; 314/415 Test #250: ocepa-grad1 ...................... Passed 17.00 sec; Start 254: ocepa3; 315/415 Test #243: nbody-cp-gradient ................ Passed 39.06 sec; Start 255: omp2-1; 316/415 Test #244: nbody-vmfc-gradient .............. Passed 45.13 sec; Start 257: omp2-3; 317/415 Test #255: omp2-1 ........................... Passed 9.46 sec; Start 258: omp2-4; 318/415 Test #240: nbody-he-cluster ................. Passed 65.04 sec; Start 259: omp2-5; 319/415 Test #230: mp2-def2 ......................... Passed 92.05 sec; Start 261: omp2-grad2; 320/415 Test #257: omp2-3 ........................... Passed 36.70 sec; Start 262: omp2p5-1; 321/415 Test #262: omp2p5-1 ......................... Passed 8.70 sec; Start 264: omp2p5-grad1; 322/415 Test #247: nbody-multi-level ................ Passed 85.90 sec; Start 265: omp2p5-grad2; 323/415 Test #254: ocepa3 ........................... Passed 68.79 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:29450,energy,energy,29450,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,d2 ...................... Passed 3.41 sec; Start 234: mp3-grad2; 315/411 Test #395: python-mints13 ................... Passed 1.71 sec; Start 361: x2c2; 316/411 Test #397: json-v11-energy .................. Passed 2.95 sec; Start 362: x2c3; 317/411 Test #191: fcidump .......................... Passed 3.66 sec; Start 223: molden1; 318/411 Test #232: mp2p5-grad2 ...................... Passed 3.51 sec; Start 119: dfcasscf-sp; 319/411 Test #271: opt5 ............................. Passed 3.06 sec; Start 399: json-schema-1-energy; 320/411 Test #361: x2c2 ............................. Passed 1.96 sec; Start 224: molden2; 321/411 Test #362: x2c3 ............................. Passed 2.32 sec; Start 130: dfmp2-2; 322/411 Test #4: casscf-semi ...................... Passed 4.96 sec; Start 228: mp2-grad1; 323/411 Test #234: mp3-grad2 ........................ Passed 3.56 sec; Start 136: dfmp2-grad3; 324/411 Test #119: dfcasscf-sp ...................... Passed 4.30 sec; Start 118: dfcasscf-fzc-sp; 325/411 Test #399: json-schema-1-energy ............. Passed 3.59 sec; Start 262: omp3-grad1; 326/411 Test #130: dfmp2-2 .......................... Passed 2.96 sec; Start 255: omp2p5-grad1; 327/411 Test #223: molden1 .......................... Passed 5.46 sec; Start 190: fci-coverage; 328/411 Test #228: mp2-grad1 ........................ Passed 3.17 sec; Start 134: dfmp2-grad1; 329/411 Test #199: fnocc1 ........................... Passed 8.69 sec; Start 88: cepa2; 330/411 Test #224: molden2 .......................... Passed 4.34 sec; Start 203: frac; 331/411 Test #136: dfmp2-grad3 ...................... Passed 3.01 sec; Start 157: dft-grac; 332/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.94 sec; Start 403: json-schema-1-gradient; 333/411 Test #262: omp3-grad1 ....................... Passed 1.90 sec; Start 229: mp2-grad2; 334/411 Test #157: dft-grac ......................... Passed 1.69 sec; Start 246: omp2-1; 335/411 Test #203: frac ............................. Passed 1.98,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:30371,energy,energy,30371,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > super",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5081,energy,energy,5081,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-597662949:258,Energy,Energy,258,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949,7,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"did you happen to try something like below? iirc, `""detci""` is intended to trigger the specify-everything-by-detci-keyword mode that makes detci behave like psi3. ```; set detci ex_level 5. energy(""detci""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2282#issuecomment-904248802:190,energy,energy,190,https://psicode.org,https://github.com/psi4/psi4/issues/2282#issuecomment-904248802,1,['energy'],['energy']
Energy Efficiency,dy ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53; 85/413 Test #60: cc42 ............................. Passed 16.11 sec; Start 247: ocepa3; 86/413 Test #207: frac-traverse .................... Passed 224.00 sec; Start 109: dcft1; 87/413 Test #78: cc8 .............................. Passed 13.24 sec; Start 153: dfomp2p5-2; 88/413 Test #72: cc53 ............................. Passed 17.52 sec; Start 74: cc55; 89/413 Test #319: sapt3 ............................ Passed 75.92 sec; Start 149: dfomp3-2; 90/413 Test #246: ocepa2 ........................... Passed 38.94 sec; Start 66: cc48; 91/413 Test #247: ocepa3 ........................... Passed 27.97 sec; Start 258: omp2p5-grad2; 92/413 Test #153: df,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:7844,energy,energy,7844,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,"e 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:3282,Charge,Charge,3282,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Charge'],['Charge']
Energy Efficiency,"e compairisons for the 20 canonical amino acids (structures from `HF/6-31G*` geometry optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1112,energy,energy,1112,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"e let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1298,ENERGY,ENERGY,1298,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,adapt,adapter,1081,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapter']
Energy Efficiency,"e with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1080,ENERGY,ENERGY,1080,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8028,Energy,Energy,8028,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"e-04 4.06200e-04 DIIS; 401: @DF-RHF iter 5: -75.98014095901934 -1.92525e-05 8.89529e-05 DIIS; 401: @DF-RHF iter 6: -75.98014186620988 -9.07191e-07 9.85581e-06 DIIS; 401: @DF-RHF iter 7: -75.98014187224302 -6.03315e-09 1.00607e-06 DIIS; 401: @DF-RHF iter 8: -75.98014187231389 -7.08695e-11 1.20203e-07 DIIS; 401: ; 401: ==> Post-Iterations <==; 401: ; 401: Orbital Energies [Eh]; 401: ---------------------; 401: ; 401: Doubly Occupied: ; 401: ; 401: 1A1 -20.568888 2A1 -1.334711 1B2 -0.686874 ; 401: 3A1 -0.554298 1B1 -0.499284 ; 401: ; 401: Virtual: ; 401: ; 401: 4A1 0.193417 2B2 0.287599 3B2 1.041506 ; 401: 5A1 1.130379 2B1 1.164432 6A1 1.220999 ; 401: 4B2 1.368964 7A1 1.693510 ; 401: ; 401: Final Occupation by Irrep:; 401: A1 A2 B1 B2 ; 401: DOCC [ 3, 0, 1, 1 ]; 401: ; 401: Energy converged.; 401: ; 401: @DF-RHF Final Energy: -75.98014187231389; 401: ; 401: => Energetics <=; 401: ; 401: Nuclear Repulsion Energy = 8.8014620606294294; 401: One-Electron Energy = -122.2750929709242769; 401: Two-Electron Energy = 37.4934890379809431; 401: Total Energy = -75.9801418723139079; 401: ; 401: ; 401: ; 401: Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Mulliken Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.39836 4.39836 0.00000 -0.79673; 401: 2 H 0.30082 0.30082 0.00000 0.39836; 401: 3 H 0.30082 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:6528,Energy,Energy,6528,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Energy'],['Energy']
Energy Efficiency,"e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 6.464 GiB; user supplied 6.464 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90916690803959 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -306.98727406041530 -7.81072e-02 1.83756e-03 DIIS; @DF-RKS iter 2: -307.13667252428678 -1.49398e-01 1.47236e-03 DIIS; @DF-RKS iter 3: -307.32880507487312 -1.92133e-01 1.25216e-04 DIIS; @DF-RKS iter 4: -307.32990958370664 -1.10451e-03 7.65745e-05 DIIS; @DF-RKS iter 5: -307.33036354773054 -4.53964e-04 1.70705e-05 DIIS; @DF-RKS iter 6: -307.33039129462924 -2.77469e-05 5.09682e-06 DIIS; @DF-RKS iter 7: -307.33039390006070 -2.60543e-06 1.20852e-06 DIIS; @DF-RKS iter 8: -307.33039428809019 -3.88029e-07 4.42881e-07 DIIS; Energy and wave function converged.; ```. Both jobs were run with 8 threads and 29337MB of memory, on the same machine (An `Intel(R) Xeon(R) Gold 6126 CPU @ 2.60GHz`). As my be relevant, other settings are:; ```set {; guess sad; fail_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; ```. Should I have expected cherry-picking 9163cbd08865d26129cfbaf5c302fc14f870f30f into 1.4 to have resolved this discrepancy? Or should I be making `set wcombine false` a standard part of my scripts for now?. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:2783,Energy,Energy,2783,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182,1,['Energy'],['Energy']
Energy Efficiency,"e-06 0.0042 y n ; 41 10 1 1.649e-06 3.299e-06 0.0042 y n ; 42 11 1 1.116e-06 2.232e-06 0.0042 y n ; 43 12 1 7.351e-07 1.470e-06 0.0042 y n ; 44 13 2 4.965e-07 9.931e-07 0.0042 y y Converged.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4305,energy,energy,4305,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190,1,['energy'],['energy']
Energy Efficiency,"e-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1051,ENERGY,ENERGY,1051,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"e/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - MP3/cc-pVDZ & MP4/cc-pVDZ: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:10358,energy,energy,10358,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,e; 375/412 Test #386: psi4numpy-fci .................... Passed 9.39 sec; Start 390: python-pubchem; 376/412 Test #375: dft-custom-gga ................... Passed 34.06 sec; Start 391: python-mints9; 377/412 Test #389: python-curve ..................... Passed 4.70 sec; Start 392: python-mints2; 378/412 Test #391: python-mints9 .................... Passed 2.13 sec; Start 393: python-cc54; 379/412 Test #392: python-mints2 .................... Passed 3.94 sec; Start 394: python-3-index-transforms; 380/412 Test #321: sapt6 ............................ Passed 171.44 sec; Start 396: python-mints13; 381/412 Test #396: python-mints13 ................... Passed 1.98 sec; Start 397: python-memdfjk; 382/412 Test #397: python-memdfjk ................... Passed 1.74 sec; Start 398: json-v11-energy; 383/412 Test #394: python-3-index-transforms ........ Passed 12.36 sec; Start 399: json-v11-gradient; 384/412 Test #399: json-v11-gradient ................ Passed 1.56 sec; Start 400: json-schema-1-energy; 385/412 Test #398: json-v11-energy .................. Passed 4.06 sec; Start 401: json-schema-1-ghost; 386/412 Test #401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 404: json-schema-1-gradient; 389/412 Test #403: json-schema-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 408: skeletondfmp2; 393/412 Test #406: skeleton ......................... Passed 3.87 sec; Start 409: skeletonmointegrals; 394/412 Test #393: python-cc54 ...................... Passed 28.49 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:36082,energy,energy,36082,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,2,['energy'],['energy']
Energy Efficiency,e; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 2.00 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.09 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.55 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.65 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.32 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.08 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.10 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 1.17 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.29 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.22 sec; Start 409,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:36892,energy,energy,36892,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy']
Energy Efficiency,e; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.15 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 1.84 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.49 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.45 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.90 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.11 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 0.98 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.33 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.07 sec; Start 409,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:36921,energy,energy,36921,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy']
Energy Efficiency,e; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1276,energy,energy,1276,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy']
Energy Efficiency,e; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1278,energy,energy,1278,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy']
Energy Efficiency,"easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphson SCF and trust region SCF. These are bound to give you a local solution, but they are 1) unreliable and 2) slow in the initial phases of the calculation. It is better to do first some ADIIS/EDIIS to get you to a reasonable solution, and only then start refining it with something fancier. Also GDM is a great solution for the initial phase of the calculation, since as you have a **guarantee** that you are taking a step down in energy. At variance, the first step in DIIS is usually up in energy, and it takes you a few steps to recover from. I'm sure there is always a use for the real second-order methods, but - when properly preconditioned - the gradient descent methods work really well, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:4707,energy,energy,4707,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,6,['energy'],['energy']
Energy Efficiency,"ec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1216,adapt,adapted,1216,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['adapt'],['adapted']
Energy Efficiency,"ec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8431,energy,energy,8431,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['energy'],['energy']
Energy Efficiency,ec; Start 324: scf-upcast-custom-basis; 335/401 Test #381: psi4numpy-rhf-hessian ............ Passed 3.32 sec; Start 323: scf-guess-read1; 336/401 Test #209: mints2 ........................... Passed 3.21 sec; Start 351: scf-response1; 337/401 Test #125: dfccsd-t-grad1 ................... Passed 38.87 sec; Start 212: mints5; 338/401 Test #310: sad1 ............................. Passed 3.89 sec; Start 8: castup1; 339/401 Test #33: cc18 ............................. Passed 43.81 sec; Start 400: json-schema_0_gradient; 340/401 Test #387: python-mints9 .................... Passed 2.08 sec; Start 378: psi4numpy-dfmp2; 341/401 Test #304: pywrap-db3 ....................... Passed 1.13 sec; Start 171: docs-dft; 342/401 Test #138: dfomp2-1 ......................... Passed 17.53 sec; Start 393: python-memdfjk; 343/401 Test #341: dfep2-2 .......................... Passed 2.51 sec; Start 347: stability2; 344/401 Test #187: fcidump .......................... Passed 6.32 sec; Start 348: tu1-h2o-energy; 345/401 Test #119: dfccd1 ........................... Passed 3.69 sec; Start 170: docs-bases; 346/401 Test #92: cisd-h2o+-0 ...................... Passed 3.19 sec; Start 326: scf-bs; 347/401 Test #207: mcscf3 ........................... Passed 1.36 sec; Start 399: json-schema_0_throws; 348/401 Test #212: mints5 ........................... Passed 1.05 sec; Start 305: pywrap-molecule; 349/401 Test #394: json-v11_energy .................. Passed 3.76 sec; Start 211: mints4; 350/401 Test #171: docs-dft ......................... Passed 0.95 sec; Start 330: scf3; 351/401 Test #392: python-mints13 ................... Passed 2.38 sec; Start 380: psi4numpy-rhf-gradient; 352/401 Test #357: x2c3 ............................. Passed 2.63 sec; Start 349: tu2-ch2-energy; 353/401 Test #133: dfmp2-grad1 ...................... Passed 3.71 sec; Start 290: psimrcc-sp1; 354/401 Test #399: json-schema_0_throws ............. Passed 0.76 sec; Start 101: decontract; 355/401 Test #211: mints4 .............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:32666,energy,energy,32666,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,ec; Start 410: skeletonsointegrals; 373/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 398: json-v11-gradient; 374/411 Test #411: skeletonwavefunction ............. Passed 0.99 sec; Start 210: mcscf2; 375/411 Test #333: scf2 ............................. Passed 1.33 sec; Start 330: scf-bs; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.46 sec; Start 354: tu2-ch2-energy; 377/411 Test #102: decontract ....................... Passed 1.11 sec; Start 406: skeletonaointegrals; 378/411 Test #410: skeletonsointegrals .............. Passed 1.06 sec; Start 222: mints10; 379/411 Test #330: scf-bs ........................... Passed 0.94 sec; Start 188: fci-tdm; 380/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 383: psi4numpy-rhf-gradient; 381/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 387: python-energy; 382/411 Test #210: mcscf2 ........................... Passed 1.34 sec; Start 220: mints-helper; 383/411 Test #354: tu2-ch2-energy ................... Passed 0.84 sec; Start 378: mints12; 384/411 Test #188: fci-tdm .......................... Passed 0.80 sec; Start 293: psimrcc-pt2; 385/411 Test #406: skeletonaointegrals .............. Passed 1.10 sec; Start 209: mcscf1; 386/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 309: pywrap-molecule; 387/411 Test #387: python-energy .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:35845,energy,energy,35845,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,"ection without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1618,ENERGY,ENERGY,1618,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,ed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Passed 14.91 sec; Start 209: matrix1; 401/412 Test #240: numpy-array-interface ............ Passed 13.74 sec; Start 176: docs-dft; 402/412 Test #213: mints1 ........................... Passed 14.04 sec; Start 365: options1; 403/412 Test #309: pywrap-db3 ....................... Passed 13.36 sec; Start 403: json-schema-1-throws; 404/412 Test #175: docs-bases ....................... Passed 13.52 sec; Start 88: cepa1; 405/412 Test #216: mints4 ........................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:37114,energy,energy,37114,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,ed 22.50 sec; Start 397: python-memdfjk; 369/412 Test #396: python-mints13 ................... Passed 23.34 sec; Start 215: mints3; 370/412 Test #404: json-schema-1-gradient ........... Passed 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ................... Passed 23.46 sec; Start 217: mints5; 380/412 Test #221: mints-helper ..................... Passed 24.04 sec; Start 240: numpy-array-interface; 381/412 Test #401: json-schema-1-ghost .............. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 25.10 sec; Start 175: docs-bases; 385/412 Test #379: mints12 .......................... Passed 23.88 sec; Start 216: mints4; 386/412 Test #335: scf3 ............................. Passed 23.31 sec; Start 309: pywrap-db3; 387/412 Test #405: json-schema-1-properties ......... Passed 23.98 sec; Start 365: options1; 388/412 Test #310: pywrap-molecule .................. Passed 23.01 sec; Start 403: json-schema-1-throws; 389/412 Test #388: python-energy ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:35822,energy,energy,35822,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,"edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1566,ENERGY,ENERGY,1566,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"elta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2277,Energy,Energy,2277,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,elta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; It,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1136,Energy,Energy,1136,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,"en. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result with our analytic gradient.; > ; > ## Here is the G09 result:; > ; > Center Atomic Forces (Hartrees/Bohr); > ; > ## Number Number X Y Z; > ; > 1 1 0.000000000 0.00",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1862,energy,energy,1862,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,2,['energy'],['energy']
Energy Efficiency,"en. I was wondering if there is a current work around? I tried some simple experiments to see if it was still producing the incorrect output:; `> psi4 --version`; `1.7`; input file contents:; ```; mol = psi4.geometry(""""""; H 0.000 0.000 0.000; H 0.000 0.000 0.740; Symmetry c1; """"""); psi4.set_options({'basis': 'sto-3g'}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); print(""MO coefficients""); print(wfn.Ca().to_array()); print(""Fock in the AO basis""); print(wfn.Fa_subset(""AO"").to_array()); print(""Fock in the MO basis""); print(wfn.Fa_subset(""MO"").to_array()); ```; this gives the following output:; ```; MO coefficients ; [[ 0.54884228 1.21245192]; [ 0.54884228 -1.21245192]]; Fock in the AO basis; [[-0.36607883 -0.59428702]; [-0.59428702 -0.36607883]]; Fock in the MO basis; [[-1.59408547e+00 8.04278118e-16]; [ 7.39285035e-16 7.76197397e-02]]; ```; and in the output file; ```; Orbital Energies [Eh]; ---------------------; Doubly Occupied: ; 1A -0.578578 ; Virtual: ; 2A 0.670950 ; @DF-RHF Final Energy: -1.11678331788308; ```; the orbital energies in the output file are correct, which should be the diagonal elements of the Fock matrix in the MO basis, but these are different. . I check the AO and MO coefficients produced by two other QM programs (pyscf is below) to see where the inconsistency might be, they both produced the ""correct"" Fock matrix (i.e. the diagnoal elements in the MO basis are the orbital energies) with the following MO coefficients:; pyscf input; ```; import numpy; from pyscf import gto, scf, lo. geometry = '''; H 0.000 0.000 0.000; H 0.000 0.000 0.740; ''' . mol = gto.M(atom=geometry,; basis='STO-3G') ; mf = scf.RHF(mol); mf.kernel(); print(mf.kernel()); Fao = mf.get_fock(); print(""MO coefficients""); print(mf.mo_coeff); print(""Fock in AO basis""); print(Fao); Fmo = mf.mo_coeff.T @ Fao @ mf.mo_coeff; print(""Fock in MO basis""); print(Fmo); ```; ```; converged SCF energy = -1.11675930739643; -1.1167593073964255; MO coefficients; [[ 0.54884228 -1.21245192];",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699:1049,Energy,Energy,1049,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699,1,['Energy'],['Energy']
Energy Efficiency,"ence actually has some; influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; computation). The issue is that the code can't determine what irrep; your target wavefunction is supposed to be, because you haven't given it; information about the orbital occupancy of the reference HF wavefunction.; I think if you specified docc [] and socc [] arrays for the reference; high-spin triplet, the code would have a much better chance to figure out; what you want. On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm hoping to do atomic MCHF calculations with Psi4, which amount to small; > CASSCF calculations. However, I can't get DETCI to run the calculations for; > me.; >; > Take the oxygen atom for example. The 3P state has 4 electrons on the P; > shell. DETCI correctly determines that there is 1 alpha string (since the; > shell is fully occupied) and 3 beta strings, but then it says that the CI; > space only has a single determinant and crashes.; >; > Example inputs; >; > molecule {; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; > set active [0, 0, 0, 0, 0, 1, 1, 1]; > energy('casscf'); >; > or a lower symmetry; >; > molecule {; > symmetry c2h; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0]; > set active [0, 0, 1, 2]; > energy('casscf'); >; > I guess the problem is that DETCI can't find a proper symmetry? Is there a; > way to circumvent this issue? @CDSherrill <https://github.com/CDSherrill>; > ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572203700:1240,energy,energy,1240,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572203700,2,['energy'],['energy']
Energy Efficiency,"ence': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available option",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3616,energy,energy,3616,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"ence, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if othe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4171,energy,energy,4171,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['energy'],['energy']
Energy Efficiency,"energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:2029,Energy,Energy,2029,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,energy('lccd') calls fnocc's CEPA(0) (without singles). You can get an equivalent energy (for closed shells) for. set reference uhf; set ao_basis none; set dcft_functional cepa0; set algorithm twostep; print energy('dcft'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/714#issuecomment-302571941:0,energy,energy,0,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302571941,3,['energy'],['energy']
Energy Efficiency,energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411 Test #397: json-v11-energy .................. Passed 3.63 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.08 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:35875,energy,energy,35875,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"ential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9240,energy,energy,9240,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"enylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2616,energy,energy,2616,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,eq1 ...................... Passed 240.27 sec; Start 77: cc7; 17/412 Test #196: fd-freq-gradient-large ........... Passed 290.96 sec; Start 159: dfscf-bz2; 18/412 Test #182: fsapt-allterms ................... Passed 603.67 sec; Start 98: cisd-opt-fd; 19/412 Test #112: dcft5 ............................ Passed 195.44 sec; Start 115: dcft8; 20/412 Test #374: dft-custom-mgga .................. Passed 190.44 sec; Start 306: pywrap-checkrun-rohf; 21/412 Test #113: dcft6 ............................ Passed 168.02 sec; Start 348: sapt-dft2; 22/412 Test #159: dfscf-bz2 ........................ Passed 147.69 sec; Start 30: cc14; 23/412 Test #321: sapt6 ............................ Passed 169.03 sec; Start 184: isapt2; 24/412 Test #146: dfomp2-grad3 ..................... Passed 348.19 sec; Start 13: cbs-xtpl-alpha; 25/412 Test #43: cc27 ............................. Passed 216.94 sec; Start 26: cc13a; 26/412 Test #98: cisd-opt-fd ...................... Passed 132.73 sec; Start 114: dcft7; 27/412 Test #194: fd-freq-energy-large ............. Passed 520.95 sec; Start 206: frac-traverse; 28/412 Test #77: cc7 .............................. Passed 226.39 sec; Start 317: sapt2; 29/412 Test #348: sapt-dft2 ........................ Passed 124.46 sec; Start 319: sapt4; 30/412 Test #307: pywrap-checkrun-uhf .............. Passed 393.60 sec; Start 326: scf-bz2; 31/412 Test #395: python-vibanalysis ............... Passed 825.22 sec; Start 155: dft-grad-lr2; 32/412 Test #184: isapt2 ........................... Passed 120.44 sec; Start 25: cc13; 33/412 Test #305: pywrap-checkrun-rhf .............. Passed 413.09 sec; Start 169: dft1; 34/412 Test #30: cc14 ............................. Passed 145.98 sec; Start 282: opt-irc-2; 35/412 Test #115: dcft8 ............................ Passed 187.59 sec; Start 45: cc29; 36/412 Test #306: pywrap-checkrun-rohf ............. Passed 207.51 sec; Start 360: tu6-cp-ne2; 37/412 Test #13: cbs-xtpl-alpha ................... Passed 176.77 sec; Start 380: cc-mod,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:2912,energy,energy-large,2912,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy-large']
Energy Efficiency,"er 1: -122.97213766263802 -1.22972e+02 5.13141e-01; @RKS iter 2: -124.26578841108680 -1.29365e+00 6.24312e-01 DIIS; @RKS iter 3: -128.75874780675335 -4.49296e+00 6.03176e-02 DIIS; @RKS iter 4: -128.79292051117602 -3.41727e-02 3.60017e-03 DIIS; @RKS iter 5: -128.79304881103522 -1.28300e-04 3.68316e-04 DIIS; @RKS iter 6: -128.79305011369129 -1.30266e-06 6.11487e-06 DIIS; @RKS iter 7: -128.79305011405475 -3.63457e-10 1.42312e-08 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.472472 2Ag -1.291608 1B2u -0.442005; 1B3u -0.442005 1B1u -0.442005. Virtual:. 2B1u 1.309754 2B3u 1.309754 2B2u 1.309754; 3Ag 1.759040 4Ag 4.620812 1B1g 4.620812; 1B2g 4.620812 1B3g 4.620812 5Ag 4.620812. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.79305011405475. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5667771440329830; Two-Electron Energy = 66.1914406060751901; DFT Exchange-Correlation Energy = -12.4177135760969506; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.7930501140547506. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Ne: PBE............................................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:7404,Energy,Energy,7404,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"er.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1540,ENERGY,ENERGY,1540,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"erally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:1625,energy,energy,1625,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"ergies = {method: {state: [float('nan')] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [None] for state in range(1, num_states + 1)} for method in methods_to_try}. return energies, wfns. def generate_potential_energy_curves():; bond_lengths = np.arange(1.0, 10.2, 0.2); num_states = 6; methods_to_try = ['EOM-CCSD', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig(",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:2998,energy,energy,2998,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['energy'],['energy']
Energy Efficiency,erties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 174: docs-bases; 402/411 Test #216: mints5 ........................... Passed 0.57 sec; Start 402: json-schema-1-throws; 403/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #215: mints4 ........................... Passed 0.54 sec; 406/411 Test #174: docs-bases ....................... Passed 0.52 sec; 407/411 Test #212: mints1 ........................... Passed 0.55 sec; 408/411 Test #402: json-schema-1-throws ............. Passed 0.52 sec; 409/411 Test #409: skeletonscf ...................... Passed 0.61 sec; 410/411 Test #87,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:37288,energy,energy,37288,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,"es(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: PBE <=. PBE GGA Exchang",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:4053,charge,charge,4053,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['charge'],['charge']
Energy Efficiency,"ess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.05635077157466 -1.23056e+02 5.15651e-01; @RKS iter 2: -123.10132047688978 -4.49697e-02 6.79382e-01 DIIS; @RKS iter 3: -128.77814169956412 -5.67682e+00 1.11592e-01 DIIS; @RKS iter 4: -128.89363525981292 -1.15494e-01 1.11421e-02 DIIS; @RKS iter 5: -128.89481463928649 -1.17938e-03 2.07054e-03 DIIS; @RKS iter 6: -128.89485608871536 -4.14494e-05 8.00321e-05 DIIS; @RKS iter 7: -128.89485614958289 -6.08675e-08 1.05214e-05 DIIS; @RKS iter 8: -128.89485615065263 -1.06974e-09 2.89771e-07 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.509932 2Ag -1.282862 1B3u -0.438441; 1B2u -0.438441 1B1u -0.438441. Virtual:. 2B3u 1.301627 2B2u 1.301627 2B1u 1.301627; 3Ag 1.757418 1B1g 4.636294 1B2g 4.636294; 1B3g 4.636294 4Ag 4.636294 5Ag 4.636294. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.89485615065263. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5988982401030682; Two-Electron Energy = 66.2281289694592061; DFT Exchange-Correlation Energy = -12.5240868800087686; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.8948561506526289. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:12257,Energy,Energy,12257,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,est #27: cc13b ............................ Passed 69.13 sec; Start 280: opt14; 55/412 Test #194: fd-freq-energy-large ............. Passed 573.09 sec; Start 231: mp2-module; 56/412 Test #145: dfomp2-grad2 ..................... Passed 68.95 sec; Start 17: cbs-xtpl-opt; 57/412 Test #372: dft-custom-dhdf .................. Passed 105.99 sec; Start 76: cc6; 58/412 Test #260: omp3-3 ........................... Passed 88.45 sec; Start 318: sapt3; 59/412 Test #326: scf-bz2 .......................... Passed 141.14 sec; Start 70: cc51; 60/412 Test #182: fsapt-allterms ................... Passed 606.28 sec; Start 320: sapt5; 61/412 Test #281: opt-irc-1 ........................ Passed 101.38 sec; Start 262: omp3-5; 62/412 Test #206: frac-traverse .................... Passed 240.35 sec; Start 293: psimrcc-fd-freq2; 63/412 Test #280: opt14 ............................ Passed 89.39 sec; Start 250: omp2-4; 64/412 Test #76: cc6 .............................. Passed 91.93 sec; Start 193: fd-freq-energy; 65/412 Test #231: mp2-module ....................... Passed 98.50 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #318: sapt3 ............................ Passed 86.10 sec; Start 264: omp3-grad2; 67/412 Test #17: cbs-xtpl-opt ..................... Passed 106.20 sec; Start 257: omp2p5-grad2; 68/412 Test #262: omp3-5 ........................... Passed 82.61 sec; Start 205: frac-ip-fitting; 69/412 Test #320: sapt5 ............................ Passed 85.03 sec; Start 300: pywrap-alias; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:6390,energy,energy,6390,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,est #280: opt-irc-1 ........................ Passed 47.52 sec; Start 260: omp3-4; 58/404 Test #97: cisd-opt-fd ...................... Passed 42.85 sec; Start 144: dfomp2-grad2; 59/404 Test #227: mp2-def2 ......................... Passed 90.23 sec; Start 261: omp3-5; 60/404 Test #230: mp2-module ....................... Passed 40.59 sec; Start 259: omp3-3; 61/404 Test #75: cc6 .............................. Passed 39.54 sec; Start 2: adc2; 62/404 Test #279: opt14 ............................ Passed 73.42 sec; Start 373: dft-custom-mgga; 63/404 Test #115: dcft9 ............................ Passed 25.38 sec; Start 320: sapt6; 64/404 Test #61: cc44 ............................. Passed 50.15 sec; Start 299: pywrap-alias; 65/404 Test #144: dfomp2-grad2 ..................... Passed 30.14 sec; Start 149: dfomp3-grad2; 66/404 Test #2: adc2 ............................. Passed 37.17 sec; Start 59: cc42; 67/404 Test #260: omp3-4 ........................... Passed 50.35 sec; Start 11: cbs-delta-energy; 68/404 Test #261: omp3-5 ........................... Passed 51.18 sec; Start 17: cbs-xtpl-opt; 69/404 Test #259: omp3-3 ........................... Passed 51.49 sec; Start 57: cc40; 70/404 Test #149: dfomp3-grad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:6406,energy,energy,6406,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,est #284: opt-freeze-coords ................ Passed 6.63 sec; Start 332: scf1; 307/412 Test #172: dft2 ............................. Passed 6.11 sec; Start 204: frac; 308/412 Test #94: cisd-h2o+-0 ...................... Passed 5.56 sec; Start 122: dfccdl1; 309/412 Test #371: scf-coverage ..................... Passed 9.20 sec; Start 272: opt5; 310/412 Test #229: mp2-grad1 ........................ Passed 4.37 sec; Start 235: mp3-grad2; 311/412 Test #95: cisd-h2o+-1 ...................... Passed 5.16 sec; Start 226: mom; 312/412 Test #121: dfccd1 ........................... Passed 5.30 sec; Start 356: tu3-h2o-opt; 313/412 Test #232: mp2p5-grad1 ...................... Passed 5.44 sec; Start 378: pywrap-align-chiral; 314/412 Test #180: fsapt2 ........................... Passed 5.69 sec; Start 266: opt1; 315/412 Test #377: pywrap-align ..................... Passed 6.95 sec; Start 344: stability1; 316/412 Test #332: scf1 ............................. Passed 5.49 sec; Start 400: json-schema-1-energy; 317/412 Test #204: frac ............................. Passed 5.38 sec; Start 295: psimrcc-sp1; 318/412 Test #285: props1 ........................... Passed 6.21 sec; Start 192: fcidump; 319/412 Test #340: scf-property ..................... Passed 6.13 sec; Start 345: dfep2-1; 320/412 Test #122: dfccdl1 .......................... Passed 4.43 sec; Start 398: json-v11-energy; 321/412 Test #272: opt5 ............................. Passed 4.45 sec; Start 389: python-curve; 322/412 Test #311: rasci-c2-active .................. Passed 7.52 sec; Start 236: mp2-property; 323/412 Test #226: mom .............................. Passed 4.69 sec; Start 312: rasci-h2o; 324/412 Test #378: pywrap-align-chiral .............. Passed 3.44 sec; Start 294: psimrcc-pt2; 325/412 Test #235: mp3-grad2 ........................ Passed 5.64 sec; Start 119: dfcasscf-fzc-sp; 326/412 Test #356: tu3-h2o-opt ...................... Passed 4.82 sec; Start 258: omp3-1; 327/412 Test #344: stability1 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:29704,energy,energy,29704,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,est #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2141,energy,energy,2141,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['energy'],['energy']
Energy Efficiency,est #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec; Start 196: fd-freq-gradient-large; 34/412 Test #156: dft-grad-lr3 ..................... Passed 451.76 sec; Start 279: opt13; 35/412 Test #228: mp2-def2 ......................... Passed 428.14 sec; Start 374: dft-custom-mgga; 36/412 Test #183: isapt1 ........................... Passed 433.43 sec; Start 321: sapt6; 37/412 Test #374: dft-custom-mgga .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2681,energy,energy,2681,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"eta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas there are 247456 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 1.5687182609E-03.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -802.88132998346850 -8.02881e+02 1.33370e-02 ; @RHF iter 1: -787.60962084475932 1.52717e+01 5.31297e-03 ; @RHF iter 2: -784.61065630353232 2.99896e+00 2.74010e-02 DIIS; @RHF iter 3: -787.81386527066320 -3.20321e+00 1.99984e-03 DIIS; @RHF iter 4: -787.84423605872018 -3.03708e-02 3.17913e-04 DIIS; @RHF iter 5: -787.84661751791953 -2.38146e-03 1.61048e-04 DIIS; @RHF iter 6: -787.84753550465541 -9.17987e-04 8.58328e-05 DIIS; @RHF iter 7: -787.84773333581302 -1.97831e-04 4.22806e-05 DIIS; @RHF iter 8: -787.84780097425346 -6.76384e-05 1.42899e-05 DIIS; @RHF iter 9: -787.84781537788342 -1.44036e-05 9.60906e-06 DIIS; @RHF iter 10: -787.84782410513617 -8.72725e-06 5.16659e-06 DIIS; @RHF iter 11: -787.84782705514579 -2.95001e-06 2.70301e-06 DIIS; @RHF iter 12: -787.84782764529461 -5.90149e-07 1.01248e-06 DIIS; @RHF iter 13: -787.84782771441280 -6.91182e-08 4.44180e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:4528,Energy,Energy,4528,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Energy'],['Energy']
Energy Efficiency,"eta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes. Psi4 stopped on: Monday, 29 April 2019 11:26AM; Psi4 wall time for execution: 0:0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7708,Energy,Energy,7708,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,"etci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/detci/params.cc on line: 949; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. Please could you go through it and see if you would find what's still wrong with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1959,energy,energy,1959,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,3,['energy'],['energy']
Energy Efficiency,"ethionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hart",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2529,energy,energy,2529,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; import numpy as np; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. #psi4_geo = psi4.geometry(geo_txt); with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:3807,energy,energy,3807,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['energy'],['energy']
Energy Efficiency,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276186318:364,energy,energy,364,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318,2,['energy'],['energy']
Energy Efficiency,"extra open parenthesis in `energy('MP2/cc-pV([TQ]Z + D:CCSD(T)/cc-pVDZ')` above?. Yay, I'll have to try out the alternate syntax in pywrap-all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/374#issuecomment-217932178:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/pull/374#issuecomment-217932178,1,['energy'],['energy']
Energy Efficiency,f ............. Passed 2.63 sec; Start 419: scf-property; 125/185 Test #419: scf-property ..................... Passed 8.65 sec; Start 420: soscf-large; 126/185 Test #420: soscf-large ...................... Passed 42.04 sec; Start 423: stability1; 127/185 Test #423: stability1 ....................... Passed 4.41 sec; Start 424: dfep2-1; 128/185 Test #424: dfep2-1 .......................... Passed 5.74 sec; Start 425: dfep2-2; 129/185 Test #425: dfep2-2 .......................... Passed 5.25 sec; Start 426: sapt-dft1; 130/185 Test #426: sapt-dft1 ........................ Passed 952.16 sec; Start 428: sapt-compare; 131/185 Test #428: sapt-compare ..................... Passed 74.02 sec; Start 429: sapt-sf1; 132/185 Test #429: sapt-sf1 ......................... Passed 2.74 sec; Start 432: stability2; 133/185 Test #432: stability2 ....................... Passed 2.32 sec; Start 433: stability3; 134/185 Test #433: stability3 ....................... Passed 7.49 sec; Start 434: tu1-h2o-energy; 135/185 Test #434: tu1-h2o-energy ................... Passed 2.56 sec; Start 435: tu2-ch2-energy; 136/185 Test #435: tu2-ch2-energy ................... Passed 2.67 sec; Start 436: tu3-h2o-opt; 137/185 Test #436: tu3-h2o-opt ...................... Passed 5.54 sec; Start 437: scf-response1; 138/185 Test #437: scf-response1 .................... Passed 3.56 sec; Start 438: scf-response2; 139/185 Test #438: scf-response2 .................... Passed 15.29 sec; Start 439: scf-response3; 140/185 Test #439: scf-response3 .................... Passed 3.31 sec; Start 440: scf-cholesky-basis; 141/185 Test #440: scf-cholesky-basis ............... Passed 1123.82 sec; Start 442: tu4-h2o-freq; 142/185 Test #442: tu4-h2o-freq ..................... Passed 13.30 sec; Start 445: x2c1; 143/185 Test #445: x2c1 ............................. Passed 11.75 sec; Start 446: x2c2; 144/185 Test #446: x2c2 ............................. Passed 7.26 sec; Start 447: x2c3; 145/185 Test #447: x2c3 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:12568,energy,energy,12568,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,"f FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > --------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1328,energy,energy,1328,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,"f"", ; ""guess"": ""SADNO"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.9987213510449",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:1061,energy,energy,1061,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676,1,['energy'],['energy']
Energy Efficiency,f-fzc-sp .................... Passed 55.64 sec; Start 256: omp2-2; 40/415 Test #210: gibbs ............................ Passed 51.08 sec; Start 403: python-cc54; 41/415 Test #136: dfmp2-ecp ........................ Passed 32.87 sec; Start 323: rasscf-sp; 42/415 Test #149: dfomp3-1 ......................... Passed 52.09 sec; Start 14: cbs-xtpl-energy; 43/415 Test #346: scf5 ............................. Passed 46.11 sec; Start 5: casscf-sa-sp; 44/415 Test #317: pywrap-db1 ....................... Passed 41.80 sec; Start 85: cdomp2-1; 45/415 Test #263: omp2p5-2 ......................... Passed 30.33 sec; Start 179: extern1; 46/415 Test #102: ci-property ...................... Passed 28.56 sec; Start 386: pywrap-bfs; 47/415 Test #256: omp2-2 ........................... Passed 32.02 sec; Start 127: dfccsdl1; 48/415 Test #371: x2c1 ............................. Passed 130.82 sec; Start 4: casscf-semi; 49/415 Test #5: casscf-sa-sp ..................... Passed 14.54 sec; Start 205: fnocc4; 50/415 Test #14: cbs-xtpl-energy .................. Passed 17.93 sec; Start 377: dft-smoke; 51/415 Test #85: cdomp2-1 ......................... Passed 16.80 sec; Start 126: dfccsd1; 52/415 Test #116: dcft7 ............................ Passed 408.77 sec; Start 132: dfmp2-1; 53/415 Test #4: casscf-semi ...................... Passed 15.25 sec; Start 252: ocepa1; 54/415 Test #179: extern1 .......................... Passed 22.42 sec; Start 6: ao-casscf-sp; 55/415 Test #127: dfccsdl1 ......................... Passed 19.45 sec; Start 172: dft-vv10; 56/415 Test #126: dfccsd1 .......................... Passed 16.21 sec; Start 142: dfomp2-1; 57/415 Test #403: python-cc54 ...................... Passed 49.72 sec; Start 260: omp2-grad1; 58/415 Test #386: pywrap-bfs ....................... Passed 24.47 sec; Start 368: tu4-h2o-freq; 59/415 Test #323: rasscf-sp ........................ Passed 37.57 sec; Start 103: cubeprop; 60/415 Test #205: fnocc4 ........................... Passed 22.18 sec; Start 293: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:5033,energy,energy,5033,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,f-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.41 sec; Start 27: cc13c; 24/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1560,energy,energy,1560,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy']
Energy Efficiency,f-orb-rot; 380/411 Test #371: dft-custom-dhdf .................. Passed 92.73 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 2.12 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 9.75 sec; Start 389: python-pubchem; 383/411 Test #389: python-pubchem ................... Passed 57.20 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.93 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 3.30 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 177.04 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 10.00 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.99 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.99 sec; Start 398: json-v11-gradient; 391/411 Test #398: json-v11-gradient ................ Passed 1.80 sec; Start 399: json-schema-1-energy; 392/411 Test #399: json-schema-1-energy ............. Passed 6.76 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 2.03 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 3.12 sec; Start 402: json-schema-1-throws; 395/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 396/411 Test #403: json-schema-1-gradient ........... Passed 2.54 sec; Start 404: json-schema-1-properties; 397/411 Test #404: json-schema-1-properties ......... Passed 3.37 sec; Start 405: skeleton; 398/411 Test #405: skeleton ......................... Passed 4.85 sec; Start 406: skeletonaointegrals; 399/411 Test #406: skeletonaointegrals .............. Passed 5.08 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:36380,energy,energy,36380,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['energy'],['energy']
Energy Efficiency,fci-dipole ....................... Passed 10.91 sec; Start 30: cc15; 203/411 Test #186: fci-h2o-2 ........................ Passed 9.39 sec; Start 15: cbs-xtpl-freq; 204/411 Test #63: cc46 ............................. Passed 139.50 sec; Start 376: pywrap-align; 205/411 Test #335: scf4 ............................. Passed 14.54 sec; Start 151: dfomp2p5-2; 206/411 Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Start 360: x2c1; 216/411 Test #151: dfomp2p5-2 ....................... Passed 29.24 sec; Start 81: cc9; 217/411 Test #192: fd-freq-energy ................... Passed 9.41 sec; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Test #10: castup3 .......................... Passed 20.61 sec; Start 80: cc8c; 223/411 Test #107: dcft1 ............................ Passed 58.98 sec; Start 171: dft2; 224/411 Test #171: dft2 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:19973,energy,energy,19973,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"fear not, we've got a sol'n for item 1 -- `AtomicInput.keywords[""function_kwargs""]` https://github.com/psi4/psi4/blob/master/psi4/driver/schema_wrapper.py#L534 . psi passes these on to the e.g., `energy()` call rather than to `psi4.set_options()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870054471:196,energy,energy,196,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870054471,1,['energy'],['energy']
Energy Efficiency,"few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those are accounted for, the ones which are weird are the . ```; Exit Status: infile ( -11 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; failures. I've updated the packaging and am running a new build/test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:1825,allocate,allocate,1825,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,2,"['allocate', 'energy']","['allocate', 'energy']"
Energy Efficiency,"ff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transfo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9162,energy,energy,9162,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Den",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2239,Charge,Charge,2239,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Charge'],['Charge']
Energy Efficiency,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124906121:135,Energy,Energy,135,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2533,allocate,allocated,2533,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['allocate'],['allocated']
Energy Efficiency,formation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > Frozen core energy = 0.00000000000000; > > ; > > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178205078:2803,energy,energy,2803,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078,1,['energy'],['energy']
Energy Efficiency,freq-gradient-large ........... Passed 286.40 sec; Start 278: opt13; 11/411 Test #145: dfomp2-grad3 ..................... Passed 1015.18 sec; Start 11: cbs-delta-energy; 12/411 Test #76: cc7 .............................. Passed 587.31 sec; Start 373: dft-custom-mgga; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 1029.41 sec; Start 320: sapt6; 14/411 Test #45: cc3 .............................. Passed 1036.97 sec; Start 111: dcft5; 15/411 Test #240: ocepa-freq1 ...................... Passed 625.43 sec; Start 41: cc26; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1061.37 sec; Start 155: dfscf-bz2; 17/411 Test #35: cc2 .............................. Passed 641.50 sec; Start 42: cc27; 18/411 Test #300: pywrap-all ....................... Passed 1079.44 sec; Start 183: isapt2; 19/411 Test #103: dcft-grad1 ....................... Passed 1109.73 sec; Start 112: dcft6; 20/411 Test #110: dcft4 ............................ Passed 1118.85 sec; Start 347: sapt-dft2; 21/411 Test #11: cbs-delta-energy ................. Passed 162.34 sec; Start 305: pywrap-checkrun-rohf; 22/411 Test #320: sapt6 ............................ Passed 167.87 sec; Start 302: pywrap-cbs1; 23/411 Test #155: dfscf-bz2 ........................ Passed 147.41 sec; Start 97: cisd-opt-fd; 24/411 Test #373: dft-custom-mgga .................. Passed 186.86 sec; Start 281: opt-irc-2; 25/411 Test #183: isapt2 ........................... Passed 139.93 sec; Start 25: cc13a; 26/411 Test #193: fd-freq-energy-large ............. Passed 507.44 sec; Start 113: dcft7; 27/411 Test #347: sapt-dft2 ........................ Passed 128.04 sec; Start 205: frac-traverse; 28/411 Test #394: python-vibanalysis ............... Passed 1264.60 sec; Start 316: sapt2; 29/411 Test #181: fsapt-allterms ................... Passed 586.19 sec; Start 318: sapt4; 30/411 Test #111: dcft5 ............................ Passed 259.90 sec; Start 325: scf-bz2; 31/411 Test #112: dcft6 ............................ Passed 192.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:2340,energy,energy,2340,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,ft-grad1 ....................... Passed 361.43 sec; Start 36: cc21; 10/411 Test #38: cc23 ............................. Passed 142.28 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #35: cc2 .............................. Passed 153.53 sec; Start 41: cc26; 12/411 Test #162: dft-grad-lr3 ..................... Passed 443.69 sec; Start 182: isapt1; 13/411 Test #45: cc3 .............................. Passed 236.97 sec; Start 145: dfomp2-grad3; 14/411 Test #36: cc21 ............................. Passed 148.51 sec; Start 42: cc27; 15/411 Test #305: pywrap-checkrun-rohf ............. Passed 140.52 sec; Start 29: cc14; 16/411 Test #41: cc26 ............................. Passed 135.18 sec; Start 111: dcft5; 17/411 Test #42: cc27 ............................. Passed 101.05 sec; Start 18: cbs-xtpl-func; 18/411 Test #29: cc14 ............................. Passed 87.25 sec; Start 181: fsapt-allterms; 19/411 Test #145: dfomp2-grad3 ..................... Passed 173.53 sec; Start 193: fd-freq-energy-large; 20/411 Test #111: dcft5 ............................ Passed 108.27 sec; Start 195: fd-freq-gradient-large; 21/411 Test #394: python-vibanalysis ............... Passed 717.15 sec; Start 278: opt13; 22/411 Test #227: mp2-def2 ......................... Passed 425.85 sec; Start 240: ocepa-freq1; 23/411 Test #240: ocepa-freq1 ...................... Passed 62.06 sec; Start 359: tu6-cp-ne2; 24/411 Test #359: tu6-cp-ne2 ....................... Passed 29.96 sec; Start 76: cc7; 25/411 Test #182: isapt1 ........................... Passed 448.19 sec; Start 24: cc13; 26/411 Test #195: fd-freq-gradient-large ........... Passed 273.70 sec; Start 373: dft-custom-mgga; 27/411 Test #76: cc7 .............................. Passed 57.56 sec; Start 112: dcft6; 28/411 Test #24: cc13 ............................. Passed 44.47 sec; Start 302: pywrap-cbs1; 29/411 Test #302: pywrap-cbs1 ...................... Passed 22.59 sec; Start 13: cbs-xtpl-alpha; 30/411 Test #18: cbs-xtpl-func .................... ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:2044,energy,energy-large,2044,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy-large']
Energy Efficiency,fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1559,energy,energy,1559,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,2,['energy'],['energy']
Energy Efficiency,"g <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11538,energy,energy,11538,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1497,energy,energy,1497,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,2,['energy'],['energy']
Energy Efficiency,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:1998,energy,energy,1998,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,9,['energy'],['energy']
Energy Efficiency,ge; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1275,energy,energy,1275,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2143,adapt,adapting,2143,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,2,['adapt'],['adapting']
Energy Efficiency,gga ................... Passed 30.91 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.82 sec; Start 396: python-memdfjk; 381/411 Test #178: fsapt1 ........................... Passed 2162.17 sec; Start 397: json-v11-energy; 382/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 398: json-v11-gradient; 383/411 Test #320: sapt6 ............................ Passed 163.49 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.11 sec; Start 400: json-schema-1-ghost; 385/411 Test #397: json-v11-energy .................. Passed 3.25 sec; Start 401: json-schema-1-orient; 386/411 Test #400: json-schema-1-ghost .............. Passed 1.15 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.58 sec; Start 403: json-schema-1-gradient; 388/411 Test #393: python-3-index-transforms ........ Passed 10.07 sec; Start 404: json-schema-1-properties; 389/411 Test #399: json-schema-1-energy ............. Passed 3.30 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.63 sec; Start 406: skeletonaointegrals; 391/411 Test #401: json-schema-1-orient ............. Passed 3.44 sec; Start 407: skeletondfmp2; 392/411 Test #404: json-schema-1-properties ......... Passed 1.53 sec; Start 408: skeletonmointegrals; 393/411 Test #405: skeleton ......................... Passed 1.87 sec; Start 409: skeletonscf; 394/411 Test #406: skeletonaointegrals .............. Passed 1.86 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 3.51 sec; 397/411 Test #408: skeletonmointegrals .............. Passed 4.21 sec; 398/411 Test #410: skeletonsointegrals .............. Passed 4.63 sec; 399/411 Test #411: skeletonwavefunction ............. Passed 4.43 sec; 400/411 Test #392,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:36578,energy,energy,36578,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy']
Energy Efficiency,"gies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7161,Energy,Energy,7161,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,gn-chiral; 363/411 Test #372: dft-custom-hybrid ................ Passed 11.01 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.20 sec; Start 379: cc-module; 365/411 Test #376: pywrap-align ..................... Passed 4.55 sec; Start 380: psi4numpy-cphf; 366/411 Test #377: pywrap-align-chiral .............. Passed 3.66 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #380: psi4numpy-cphf ................... Passed 1.91 sec; Start 382: psi4numpy-rhf; 368/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #382: psi4numpy-rhf .................... Passed 0.93 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.17 sec; Start 385: psi4numpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.93 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.28 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.39 sec; Start 388: python-curve; 374/411 Test #388: python-curve ..................... Passed 3.19 sec; Start 389: python-pubchem; 375/411 Test #375: pywrap-bfs ....................... Passed 25.67 sec; Start 390: python-mints9; 376/411 Test #305: pywrap-checkrun-rohf ............. Passed 171.95 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 2.08 sec; Start 392: python-cc54; 378/411 Test #374: dft-custom-gga ................... Passed 29.34 sec; Start 393: python-3-index-transforms; 379/411 Test #391: python-mints2 .................... Passed 3.28 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.88 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 397: json-v11-energy; 382/411 Test #397: json-v11-energy .................. Passed 3.85 sec; Start 398: json-v11-gradient; 383/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:34881,energy,energy,34881,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,2,['energy'],['energy']
Energy Efficiency,"gth in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4283,Energy,Energy,4283,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,gy ................... Passed 1.13 sec; Start 209: mcscf1; 383/411 Test #404: json-schema-1-properties ......... Passed 1.20 sec; Start 382: psi4numpy-rhf; 384/411 Test #293: psimrcc-pt2 ...................... Passed 1.09 sec; Start 212: mints1; 385/411 Test #411: skeletonwavefunction ............. Passed 1.06 sec; Start 211: mcscf3; 386/411 Test #214: mints3 ........................... Passed 1.15 sec; Start 239: numpy-array-interface; 387/411 Test #188: fci-tdm .......................... Passed 1.07 sec; Start 409: skeletonscf; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.01 sec; Start 174: docs-bases; 389/411 Test #410: skeletonsointegrals .............. Passed 1.37 sec; Start 175: docs-dft; 390/411 Test #334: scf3 ............................. Passed 1.13 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.14 sec; Start 215: mints4; 392/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 208: matrix1; 393/411 Test #354: tu2-ch2-energy ................... Passed 0.98 sec; Start 364: options1; 394/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 402: json-schema-1-throws; 395/411 Test #211: mcscf3 ........................... Passed 0.76 sec; Start 87: cepa1; 396/411 Test #309: pywrap-molecule .................. Passed 1.18 sec; 397/411 Test #216: mints5 ........................... Passed 1.01 sec; 398/411 Test #396: python-memdfjk ................... Passed 1.06 sec; 399/411 Test #212: mints1 ........................... Passed 0.85 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.69 sec; 401/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; 402/411 Test #174: docs-bases ....................... Passed 0.62 sec; 403/411 Test #175: docs-dft ......................... Passed 0.68 sec; 404/411 Test #215: mints4 ........................... Passed 0.63 sec; 405/411 Test #208: matrix1 .......................... Passed 0.56 sec; 406/411 Te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:36998,energy,energy,36998,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy']
Energy Efficiency,"gy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:2803,energy,energy,2803,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"gy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ; @DF-RHF iter 1: -7259.15010997926129 -4.14910e+00 1.35868e-02 DIIS; @DF-RHF iter 2: -7259.17972994142656 -2.96200e-02 3.74973e-03 DIIS; @DF-RHF iter 3: -7259.18676197489549 -7.032",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1856,energy,energy,1856,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3069,energy,energy,3069,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,4,['energy'],['energy']
Energy Efficiency,"h them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1422,ENERGY,ENERGY,1422,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9275,energy,energy,9275,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,6,['energy'],['energy']
Energy Efficiency,"harges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147558094236395; Additional nuclear repulsion = -0.220306557236836; Total nuclear repulsion = 8.927251536999558. Minimum eigenvalue in the overlap matrix is 2.2467595935E-02.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.335417355952",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:6936,Energy,Energy,6936,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"he I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1238,ENERGY,ENERGY,1238,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"he SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of its; > self-imposed symmetry constraints.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/875>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlmJNWz39F1kSptiR8vFq7913CBnks5s9aN8gaJpZM4Q25IB>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:2567,energy,energy,2567,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"he X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; 2B2u 0.741625 2B1u 0.741625 4Ag 0.880345 ; 1B2g 0.880345 1B3g 0.880345 1B1g 0.880345 ; 5Ag 0.880345 6Ag 0.985424 3B2u 2.200372 ; 3B3u 2.200372 3B1u 2.200372 7Ag 2.508422 ; 8Ag 2.916076 2B1g 2.916076 2B3g 2.916076 ; 2B2g 2.916076 9Ag 2.916076 4B3u 4.215041 ; 4B1u 4.215041 4B2u 4.215041 5B1u 4.215041 ; 1Au 4.215041 5B3u 4.215041 5B2u 4.215041 ; 10Ag 5.006734 6B3u 5.367541 6B2u 5.367541 ; 6B1u 5.367541 11Ag 8.068526 12Ag 8.272193 ; 3B3g 8.272193 3B2g 8.272193 3B1g 8.272193 ; 13Ag 8.272193 7B3u 11.798691 7B2u 11.798691 ; 7B1u 11.798691 14Ag 14.696251 15Ag 34.149342 . Beta Occupied: . . Beta Vir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5699,Energy,Energy,5699,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1281,energy,energy,1281,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,2,['energy'],['energy']
Energy Efficiency,"he lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for; > > these non-trivial cases with Psi4, but it may be worth investigating some; > > of these systems for possible improvements in the code.; > > ; > > Best wishes,; > > ; > > Alexander.; > > ; > > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I guess these other codes are; > > > using some other convergence accelerator than Psi4 ? I would not be; > > > surprised if SOSCF with a core guess would converge on the right; > > > solution.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171660919.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:1868,energy,energy,1868,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,2,['energy'],['energy']
Energy Efficiency,"he scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1158,ENERGY,ENERGY,1158,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"hen once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1093,energy,energy,1093,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,here's a minimal input for debugging. ```; molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis cc-pvdz; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-122486808:199,energy,energy,199,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-122486808,1,['energy'],['energy']
Energy Efficiency,here's some changes to Grimme-distributed dftd3 that do what we need:; https://github.com/loriab/dftd3/compare/v3.2.0...master. * more decimals for ABC energy (and [Eh] printing); * separate gradient for ABC gradient; * CMake build system (so Windows can build it); * corrects header and prints version with `dftd3 -version`; * bumps to 3.2.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1407#issuecomment-456884685:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/1407#issuecomment-456884685,1,['energy'],['energy']
Energy Efficiency,"hey all! I don't think at all think this is fundamentally an issue with the SCF converging to the wrong state, even if the stability analysis is showing a negative eigenvalue. IMO, there could be an issue with the basis set projection. . For this electronic state in this system, it is indeed difficult to converge to the appropriate state. However, the multireference character results in low-lying LUMOs. So if PSI4 was populating the wrong orbitals, we would see the energy of the larger basis set ROHF increasing by (this is all back-of-the-envelope, btw) 5 mEh. We know that the smaller basis set (cc-pwCVDZ-DK, which is explicitly defined in the input file because that basis set is not in the PSI4 library for iron) is converging to the right state. . If DZ->TZ projection is going wrong by 3 Hartrees, then there is something totally haywire with PSI4. Molpro's SCF guess from atomic densities sucks, but I have never seen it crap the bed with incorrect states on the order of Hartrees! . Try this test: run the ROHF energy calculation using just the TZ set, with no DZ step and no ""set scf guess read""; When I do this, I get ; @ROHF Final Energy: -1271.65162910275285. HERE is where PSI4 has the incorrect state. I haven't run an orbital stability analysis, but I can tell by looking at the MO coefficients (thanks Yukio!) --- 10A1 (doubly occupied d2+) needs to be swapped with 14A1 (singly occupied d0) to change the excited Phi state to the correct Pi state. Another clue that leads me to believe there's an actual bug somewhere: look at the SCF orbital energies for the initial DZ guess versus the screwed up TZ projection. The only significant difference is; DZ ROHF:; 1A1 -263.972182; and; TZ ROHF:; 1A1 -261.966897. Since 1A1 is doubly occupied, there's your 4 Hartrees worth of error. ; Looking at the MO coefficients; DZ ROHF:; FE1 s0 0.9825555 (duh, first orbital should be iron 1s). TZ ROHF:; 1 FE1 s0 0.8531471 0.3343274 0.0000000 0.0000000 0.0003960; 2 FE1 s0 -0.5169916 1.410880",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360370142:470,energy,energy,470,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360370142,1,['energy'],['energy']
Energy Efficiency,hf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.28 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.39 sec; Start 388: python-curve; 374/411 Test #388: python-curve ..................... Passed 3.19 sec; Start 389: python-pubchem; 375/411 Test #375: pywrap-bfs ....................... Passed 25.67 sec; Start 390: python-mints9; 376/411 Test #305: pywrap-checkrun-rohf ............. Passed 171.95 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 2.08 sec; Start 392: python-cc54; 378/411 Test #374: dft-custom-gga ................... Passed 29.34 sec; Start 393: python-3-index-transforms; 379/411 Test #391: python-mints2 .................... Passed 3.28 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.88 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 397: json-v11-energy; 382/411 Test #397: json-v11-energy .................. Passed 3.85 sec; Start 398: json-v11-gradient; 383/411 Test #393: python-3-index-transforms ........ Passed 10.30 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 3.98 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.26 sec; Start 401: json-schema-1-orient; 386/411 Test #399: json-schema-1-energy ............. Passed 3.33 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.05 sec; Start 404: json-schema-1-properties; 389/411 Test #392: python-cc54 ...................... Passed 17.13 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.61 sec; Start 406: skeletonaointegrals; 391/411 Test #404: json-schema-1-properties ......... Passed 1.34 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:35772,energy,energy,35772,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,2,['energy'],['energy']
Energy Efficiency,"home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1396, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""BASIS"", ""ano-rcc""); core.set_global_option(""RELATIVISTIC"", ""x2c""); core.set_global_option(""REFERENCE"", ""uhf""); --> energy('hf'). Psi4 stopped on: Monday, 29 April 2019 07:36PM; Psi4 wall time for execution: 0:00:00.18. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:5431,energy,energy,5431,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['energy'],['energy']
Energy Efficiency,hon-cc54 ...................... Passed 12.99 sec; Start 6: ao-casscf-sp; 240/411 Test #48: cc32 ............................. Passed 10.33 sec; Start 186: fci-h2o-2; 241/411 Test #197: freq-isotope1 .................... Passed 14.33 sec; Start 198: freq-isotope2; 242/411 Test #6: ao-casscf-sp ..................... Passed 2.88 sec; Start 21: cc10; 243/411 Test #357: tu4-h2o-freq ..................... Passed 12.92 sec; Start 254: omp2p5-2; 244/411 Test #367: scf-hess1 ........................ Passed 6.11 sec; Start 335: scf4; 245/411 Test #198: freq-isotope2 .................... Passed 3.61 sec; Start 10: castup3; 246/411 Test #184: fci-dipole ....................... Passed 6.13 sec; Start 128: dfccsdat1; 247/411 Test #185: fci-h2o .......................... Passed 6.11 sec; Start 117: dfcasscf-sa-sp; 248/411 Test #186: fci-h2o-2 ........................ Passed 6.45 sec; Start 154: dfrasscf-sp; 249/411 Test #21: cc10 ............................. Passed 4.59 sec; Start 192: fd-freq-energy; 250/411 Test #254: omp2p5-2 ......................... Passed 5.70 sec; Start 109: dcft3; 251/411 Test #128: dfccsdat1 ........................ Passed 3.87 sec; Start 341: soscf-ref; 252/411 Test #154: dfrasscf-sp ...................... Passed 2.76 sec; Start 143: dfomp2-grad1; 253/411 Test #117: dfcasscf-sa-sp ................... Passed 4.38 sec; Start 9: castup2; 254/411 Test #10: castup3 .......................... Passed 5.12 sec; Start 86: cepa0-grad2; 255/411 Test #335: scf4 ............................. Passed 7.46 sec; Start 179: fsapt2; 256/411 Test #109: dcft3 ............................ Passed 4.45 sec; Start 122: dfccd-grad1; 257/411 Test #192: fd-freq-energy ................... Passed 6.62 sec; Start 90: cepa1; 258/411 Test #143: dfomp2-grad1 ..................... Passed 4.96 sec; Start 171: dft2; 259/411 Test #86: cepa0-grad2 ...................... Passed 4.15 sec; Start 132: dfmp2-4; 260/411 Test #179: fsapt2 ........................... Passed 4.61 sec; Start 22: cc11;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:23247,energy,energy,23247,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,"http://psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow for future reference. Yes, problem is when you try to push and it's rejected, `git` suggests pulling, and that's fatal. As the last green lines at end of link above shows, `git push -f` is actually the right move. Nearly everyone I know (including myself) has been bitten. (Fortunately, it's a memorable bite, so one rarely does it again.). If you created a new branch before rebasing, you can restore from old. Otherwise, taking a clean branch and cherry-picking may be best remedy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452421558:228,green,green,228,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452421558,1,['green'],['green']
Energy Efficiency,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:146,adapt,adapted,146,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['adapt'],['adapted']
Energy Efficiency,"i/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:8029,energy,energy,8029,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"i4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be valid until the wavefunction is destroyed. The same would need to be done for the cclambda wavefunction as well. . The constructing the dpd object is far from trival as it allocates memory for and computes index translations for all possible pairs and quartets of the orbital subspaces provided, since this is only done once at the beginning of each module using a DPD I haven't looked into how significan the overhead is but it may be an issue for the first option. The second option is better for code quality, and I once played around with this idea in a plugin years ago, but I never got to the point where I could test if there were any unforeseen consequences down the pipeline (subsequent calls to other CC* modules).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:2170,allocate,allocates,2170,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,2,['allocate'],['allocates']
Energy Efficiency,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3399,energy,energy,3399,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['energy'],['energy']
Energy Efficiency,"ian will be computed in the X2C Basis. Comparing only 15 out of 17 elements of H_Dirac. The 1-norm of |H_X2C - H_Dirac| is: 9.762433630521. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; 2B2u 0.741625 2B1u 0.741625 4Ag 0.880345 ; 1B2g 0.880345 1B3g 0.880345 1B1g 0.880345 ; 5Ag 0.880345 6Ag 0.985424 3B2u 2.200372 ; 3B3u 2.200372 3B1u 2.200372 7Ag 2.508422 ; 8Ag 2.916076 2B1g 2.916076 2B3g 2.916076 ; 2B2g 2.916076 9Ag 2.916076 4B3u 4.215041 ; 4B1u 4.215041 4B2u 4.215041 5B1u 4.215041 ; 1Au 4.215041 5B3u 4.215041 5B2u 4.215041 ; 10Ag 5.006734 6B3u 5.367541 6B2u 5.367541 ; 6B1u 5.367541 11Ag 8.068526 12Ag 8.272193 ; 3B3g 8.272193",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5548,Energy,Energy,5548,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,"ibrary is badly formed, so it's `coreNone`. When I add a symlink to a proper name, it works just fine. ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) ll stage/lib/psi4/; total 25704; lrwxrwxrwx. 1 psilocaluser psilocaluser 8 Nov 1 15:57 core.cpython-311-x86_64-linux-gnu.so -> coreNone; -rwxr-xr-x. 1 psilocaluser psilocaluser 26286096 Nov 1 16:14 coreNone; drwxr-xr-x. 7 psilocaluser psilocaluser 4096 Nov 1 15:58 driver; -rw-r--r--. 1 psilocaluser psilocaluser 5898 Nov 1 15:08 extras.py; -rw-r--r--. 1 psilocaluser psilocaluser 2934 Nov 1 14:50 header.py; -rw-r--r--. 1 psilocaluser psilocaluser 3693 Nov 1 15:08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:14 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```. Full conda env is this:. ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) conda list; # packages in environment at /psi/toolchainconda/envs/py311cf_L1:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; binutils_impl_linux-64 2.39 h6ceecb4_0 conda-forge; binutils_linux-64 2.39 h5fc0e48_11 conda-forge; blas 2.116 mkl conda-forge; blas-devel 3.9.0 16_linux64_mkl conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.18.1 h7f98852_0 conda-forge; ca-certificates 2022.9.24 ha878542_0 conda-forge; cmake 3.24.2 h5432695_0 conda-forge; deepdiff 6.2.1 pyhd8ed1ab_0 conda-forge; expat 2.5.0 h27087fc_0 conda-forge; gcc_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gcc_linux-64 12.2.0 h4798a0e_11 conda-forge; gxx_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gxx_linux-64 12.2.0 hb41e900_11 c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719:1758,energy,energy,1758,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719,1,['energy'],['energy']
Energy Efficiency,"ic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6774,energy,energy,6774,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['energy'],['energy']
Energy Efficiency,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1239,adapt,adapt,1239,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['adapt'],['adapt']
Energy Efficiency,"idth}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:4706,energy,energy,4706,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['energy'],['energy']
Energy Efficiency,"ields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); opa_plot = plot_spectrum(opa_spectrum,; title=""OPA (Gaussian broadening)"",; x_title=(""λ"", ""nm"")). ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""); ecd_plot = plot_spectrum(ecd_spectrum,; title=""ECD (Gaussian broadening)"",; x_title=(""λ"", ""nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:3186,ENERGY,ENERGY,3186,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['ENERGY'],['ENERGY']
Energy Efficiency,ies ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Start 410: skeletonscf; 392/412 Test #406: skeleton ......................... Passed 1.57 sec; Start 175: docs-bases; 393/412 Test #383: psi4numpy-rhf .................... Passed 1.25 sec; Start 216: mints4; 394/412 Test #212: mcscf3 ........................... Passed 1.34 sec; Start 209: matrix1; 395/412 Test #210: mcscf1 ........................... Passed 1.13 sec; Start 403: json-schema-1-throws; 396/412 Test #240: numpy-array-interface ............ Passed 0.83 sec; Start 88: cepa1; 397/412 Test #355: tu2-ch2-energy ................... Passed 1.66 sec; 398/412 Test #365: options1 ......................... Passed 0.66 sec; 399/412 Test #335: scf3 ............................. Passed 1.37 sec; 400/412 Test #176: docs-dft ......................... Passed 0.77 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 0.79 sec; 402/412 Test #189: fci-tdm .......................... Passed 1.52 sec; 403/412 Test #213: mints1 ........................... Passed 0.95 sec; 404/412 Test #407: skeletonaointegrals .............. Passed 1.98 sec; 405/412 Test #410: skeletonscf ...................... Passed 0.71 sec; 406/412 Test #175: docs-bases ....................... Passed 0.64 sec; 407/412 Test #209: matrix1 .......................... Passed 0.60 sec; 408/412 Test #403: json-schema-1-throws ............. Passed 0.61 sec; 409/412 Test #216: mints4 ........................... Passed 0.69 sec; 410/412 Test #88: cepa1 ............................ Passed 3.82 sec; 411/412 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:37361,energy,energy,37361,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy']
Energy Efficiency,"ies will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Mulliken Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.39836 4.39836 0.00000 -0.79673; 401: 2 H 0.30082 0.30082 0.00000 0.39836; 401: 3 H 0.30082 0.30082 0.00000 0.39836; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: Lowdin Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.29726 4.29726 0.00000 -0.59451; 401: 2 H 0.35137 0.35137 0.00000 0.29726; 401: 3 H 0.35137 0.35137 0.00000 0.29726; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: ; 401: Mayer Bond Indices:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.80206409286279 0.80206409286279; 401: 2 0.80206409286279 0.00000000000000 0.00302003360260; 401: 3 0.80206409286279 0.00302003360260 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wiberg Bond Indices using Orthogonal Lowdin Orbitals:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.92373852221608 0.92373852221608; 401: 2 0.92373852221608 0.00000000000000 0.00699264970980; 401: 3 0.92373852221608 0.00699264970980 0.0000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:7640,Charge,Charges,7640,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Charge'],['Charges']
Energy Efficiency,ime = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 F,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:5925,energy,energy,5925,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['energy'],['energy']
Energy Efficiency,"ime taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1799,energy,energy,1799,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting succe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11634,energy,energy,11634,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,"ine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2795,energy,energy,2795,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"ine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2881,energy,energy,2881,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"inmodule.c.h:283; #38 0x7fb0e963efed in _PyCFunction_FastCallDict Objects/methodobject.c:234; #39 0x7fb0e96d8499 in call_function Python/ceval.c:4830; #40 0x7fb0e96dc71b in _PyEval_EvalFrameDefault Python/ceval.c:3328; #41 0x7fb0e96d809d in _PyEval_EvalCodeWithName Python/ceval.c:4159; #42 0x7fb0e96d86cc in PyEval_EvalCodeEx Python/ceval.c:4180; #43 0x7fb0e96d871a in PyEval_EvalCode Python/ceval.c:731; #44 0x7fb0e97140a1 in run_mod Python/pythonrun.c:1025; #45 0x7fb0e97140a1 in PyRun_FileExFlags Python/pythonrun.c:978; #46 0x7fb0e9714206 in PyRun_SimpleFileExFlags Python/pythonrun.c:420; #47 0x7fb0e97306fc in run_file Modules/main.c:340; #48 0x7fb0e97306fc in Py_Main Modules/main.c:810; #49 0x400bbb in main Programs/python.c:69; #50 0x7fb0e869b444 in __libc_start_main (/lib64/libc.so.6+0x22444); #51 0x400c7c (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x400c7c). 0x61800027ffa0 is located 0 bytes to the right of 800-byte region [0x61800027fc80,0x61800027ffa0); allocated by thread T0 here:; #0 0x7fb0e9b6149f in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86; #1 0x7fb0ddb0c841 in psi::Matrix::matrix(int, int) /home/raimis/psi4.git/psi4/src/psi4/libmints/matrix.cc:247; #2 0x7fb0ddb1201a in psi::Matrix::alloc() /home/raimis/psi4.git/psi4/src/psi4/libmints/matrix.cc:486; #3 0x7fb0ddb0827d in psi::Matrix::Matrix(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int const*, int const*, int) /home/raimis/psi4.git/psi4/src/psi4/libmints/matrix.cc:129; #4 0x7fb0ddb50910 in void __gnu_cxx::new_allocator<psi::Matrix>::construct<psi::Matrix, char const (&) [1], int&, psi::Dimension const&, psi::Dimension&>(psi::Matrix*, char const (&) [1], int&, psi::Dimension const&, psi::Dimension&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:136; #5 0x7fb0ddb50269 i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861:6643,allocate,allocated,6643,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861,1,['allocate'],['allocated']
Energy Efficiency,"interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1648,energy,energy,1648,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,ints9 .................... Passed 2.21 sec; Start 296: psimrcc-sp1; 300/413 Test #400: json-v11-gradient ................ Passed 1.40 sec; Start 403: json-schema-1-orient; 301/413 Test #100: cisd-sp-2 ........................ Passed 4.98 sec; Start 226: molden2; 302/413 Test #397: python-mints13 ................... Passed 2.19 sec; Start 312: rasci-c2-active; 303/413 Test #238: mpn-bh ........................... Passed 3.26 sec; Start 205: frac; 304/413 Test #95: cisd-h2o+-1 ...................... Passed 4.61 sec; Start 398: python-memdfjk; 305/413 Test #96: cisd-h2o+-2 ...................... Passed 5.04 sec; Start 259: omp3-1; 306/413 Test #189: fci-h2o-fzcv ..................... Passed 4.96 sec; Start 333: scf1; 307/413 Test #94: cisd-h2o+-0 ...................... Passed 4.41 sec; Start 389: python-energy; 308/413 Test #188: fci-h2o-2 ........................ Passed 6.48 sec; Start 273: opt5; 309/413 Test #398: python-memdfjk ................... Passed 1.04 sec; Start 271: opt3; 310/413 Test #389: python-energy .................... Passed 1.00 sec; Start 231: mp2-grad2; 311/413 Test #248: omp2-1 ........................... Passed 2.94 sec; Start 119: dfcasscf-sa-sp; 312/413 Test #233: mp2p5-grad1 ...................... Passed 2.39 sec; Start 402: json-schema-1-ghost; 313/413 Test #255: omp2p5-1 ......................... Passed 2.99 sec; Start 341: scf-property; 314/413 Test #205: frac ............................. Passed 2.48 sec; Start 181: fsapt2; 315/413 Test #259: omp3-1 ........................... Passed 2.37 sec; Start 138: dfmp2-grad3; 316/413 Test #273: opt5 ............................. Passed 2.08 sec; Start 6: ao-casscf-sp; 317/413 Test #231: mp2-grad2 ........................ Passed 2.00 sec; Start 407: skeleton; 318/413 Test #226: molden2 .......................... Passed 4.08 sec; Start 405: json-schema-1-gradient; 319/413 Test #312: rasci-c2-active .................. Passed 4.10 sec; Start 409: skeletondfmp2; 320/413 Test #296: psimrcc-sp1 ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:29065,energy,energy,29065,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,"inutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:12645,Allocate,Allocate,12645,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Allocate'],['Allocate']
Energy Efficiency,"ion 6 energy: -320.87957561560631 -0.00035297476529 0.00008011419372; @Atomic UHF iteration 7 energy: -320.87958210143461 -0.00000648582829 0.00000325221580; @Atomic UHF Final Energy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1676,energy,energy,1676,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"ion); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1718,energy,energy,1718,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"ions <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module tim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7922,Energy,Energy,7922,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"ions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis sets into user-supplied `.gbs`'s (which is what I was doing for my systems anyway) and the CBS function will happily use them, as long as they match the regex.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1241,power,power,1241,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,2,['power'],['power']
Energy Efficiency,"ir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4574,energy,energy,4574,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"ith this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Ite",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1010,Energy,Energy,1010,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,jk ................... Passed 1.05 sec; Start 73: cc54; 195/413 Test #328: scf-ecp .......................... Passed 32.66 sec; Start 174: dft3; 196/413 Test #390: python-curve ..................... Passed 4.05 sec; Start 179: extern2; 197/413 Test #256: omp2p5-2 ......................... Passed 37.38 sec; Start 360: tu5-sapt; 198/413 Test #201: fnocc1 ........................... Passed 37.85 sec; Start 260: omp3-2; 199/413 Test #240: nbody-intermediates .............. Passed 25.85 sec; Start 191: fci-tdm-2; 200/413 Test #145: dfomp2-grad1 ..................... Passed 26.84 sec; Start 348: sapt-dft1; 201/413 Test #24: cc12 ............................. Passed 50.83 sec; Start 249: omp2-2; 202/413 Test #394: python-cc54 ...................... Passed 56.05 sec; Start 401: json-schema-1-energy; 203/413 Test #174: dft3 ............................. Passed 25.44 sec; Start 324: sapt-dft-lrc; 204/413 Test #360: tu5-sapt ......................... Passed 20.54 sec; Start 243: ocepa-grad1; 205/413 Test #401: json-schema-1-energy ............. Passed 5.82 sec; Start 90: cepa3; 206/413 Test #179: extern2 .......................... Passed 31.66 sec; Start 389: python-energy; 207/413 Test #389: python-energy .................... Passed 1.70 sec; Start 166: dft-grad1; 208/413 Test #191: fci-tdm-2 ........................ Passed 20.28 sec; Start 292: psimrcc-ccsd_t-4; 209/413 Test #72: cc53 ............................. Passed 85.96 sec; Start 141: dfomp2-1; 210/413 Test #324: sapt-dft-lrc ..................... Passed 19.90 sec; Start 403: json-schema-1-orient; 211/413 Test #73: cc54 ............................. Passed 48.53 sec; Start 209: gibbs; 212/413 Test #348: sapt-dft1 ........................ Passed 24.61 sec; Start 167: dft-grad2; 213/413 Test #260: omp3-2 ........................... Passed 35.02 sec; Start 402: json-schema-1-ghost; 214/413 Test #166: dft-grad1 ........................ Passed 14.49 sec; Start 277: opt9; 215/413 Test #403: json-schema-1-orient ............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:19337,energy,energy,19337,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['energy'],['energy']
Energy Efficiency,"k (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:3489,energy,energy,3489,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,1,['energy'],['energy']
Energy Efficiency,"k and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1040,ENERGY,ENERGY,1040,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1062,energy,energy,1062,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000,3,['energy'],['energy']
Energy Efficiency,"k if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1116,ENERGY,ENERGY,1116,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1714,energy,energy,1714,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"ks as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 510: dftd3-energy; 1/5 Test #510: dftd3-energy ..................... Passed 24.64 sec; Start 511: dftd3-grad; 2/5 Test #511: dftd3-grad ....................... Passed 11.33 sec; Start 512: dftd3-psithon2; 3/5 Test #512: dftd3-psithon2 ................... Passed 13.39 sec; Start 513: dftd3-version; 4/5 Test #513: dftd3-version .................... Passed 27.06 sec; Start 514: dftd3-nbody-cp-gradient; 5/5 Test #514: dftd3-nbody-cp-gradient ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:1499,energy,energy,1499,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,4,['energy'],['energy']
Energy Efficiency,"l = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_geo, return_wfn=True); density_mat_0iters = wfn_sad.Da().to_array(). np.isclose(sad_guess_manual, density_mat_0iters, atol=1e-5).sum() / (density_mat_0iters.shape[0] ** 2); >> 0.08549818 # should be close to 1.00 but no :/ ; ```. i think this must mean that even setting `maxiter = 0` already evolves the initial guess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:1937,energy,energy,1937,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['energy'],['energy']
Energy Efficiency,"l Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4906,Energy,Energy,4906,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,l-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #11: cbs-delta-energy ................. Passed 341.48 sec; Start 29: cc14; 34/411 Test #26: cc13b ............................ Passed 204.38 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 209.71 sec; Start 31: cc16; 36/411 Test #13: cbs-xtpl-alpha ................... Passed 415.31 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 89.67 sec; Start 33: cc18; 38/411 Test #33: cc18 ............................. Passed 59.67 sec; Start 34: cc19; 39/411 Test #30: cc15 ............................. Passed 175.79 sec; Start 35: cc2; 40/411 Test #34: cc19 ............................. Passed 88.82 sec; Start 36: cc21; 41/411 Test #24: cc13 ............................. Passed 491.05 sec; Start 37: cc22; 42/411 Test #28: cc13d ............................ Passed 425.47 sec; Start 38: cc23; 43/411 Test #37: cc22 ............................. Passed 49.53 sec; Start 39: cc24; 44/411 Test #31: cc16 ............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:3256,energy,energy,3256,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['energy'],['energy']
Energy Efficiency,"l. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2126,energy,energy,2126,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,4,['energy'],['energy']
Energy Efficiency,"ld do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1118,ENERGY,ENERGY,1118,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"le. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.84",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1878,energy,energy,1878,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,2,['energy'],['energy']
Energy Efficiency,"le; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', col",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3154,ENERGY,ENERGY,3154,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['ENERGY'],['ENERGY']
Energy Efficiency,lear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 19 19 0 0 0 0; -------------------------------------------------------; Total 19 19 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 8; Integrals threads: 8; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 42; Number of basis function: 131; Number of Cartesian functions: 131; Spherical Harmonics?: false; Max angular momentum: 3. => External Potential Field: <= . > Charges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147558094236395; Additional nuclear repulsion = -0.220306557236836; Total nuclear repulsion = 8.927251536999558. Minimum eigenvalue in the overlap matrix is 2.2467595935E-02.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:5945,Charge,Charges,5945,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Charge'],['Charges']
Energy Efficiency,"least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result wi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1698,energy,energy,1698,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,2,['energy'],['energy']
Energy Efficiency,letonsointegrals; 364/412 Test #8: castup1 .......................... Passed 23.16 sec; Start 355: tu2-ch2-energy; 365/412 Test #391: python-mints9 .................... Passed 24.17 sec; Start 381: psi4numpy-cphf; 366/412 Test #189: fci-tdm .......................... Passed 23.11 sec; Start 401: json-schema-1-ghost; 367/412 Test #211: mcscf2 ........................... Passed 23.47 sec; Start 384: psi4numpy-rhf-gradient; 368/412 Test #350: sapt-sf1 ......................... Passed 22.50 sec; Start 397: python-memdfjk; 369/412 Test #396: python-mints13 ................... Passed 23.34 sec; Start 215: mints3; 370/412 Test #404: json-schema-1-gradient ........... Passed 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ................... Passed 23.46 sec; Start 217: mints5; 380/412 Test #221: mints-helper ..................... Passed 24.04 sec; Start 240: numpy-array-interface; 381/412 Test #401: json-schema-1-ghost .............. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:35311,energy,energy,35311,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,"level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graphyne using basis cc-pvdz; > ; > memory 5000 mb; > ; > molecule Graphyne {; > 0 1; > C 1.396 0.000 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > thisenergy = energy('fci'); > ; > Memory set to 5.000 GiB by Python script.; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:39:34 2014; > ; > ```; > ---------------------------------------------------------; > SCF; > by Justin Turney, Rob Parrish, and Andy Simmonett; > RHF Reference; > 1 Threads, 5000 MiB Core; > ---------------------------------------------------------; > ```; > ; > ==> Geometry <==; > ; > Molecular point group: c1; > Full point group: D2h; > ; > Geometry (in Angstrom), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -2.013000000000 0.000000000000 0.000000000000; > C -2.711000000000 1.209000000000 0.000000000000; > C -4.107000000000 1.209000000000 0.000000000000; > C -4.805000000000 0.000000000000 0.000000000000; > C -4.107000000000 -1.209000000000 0.000000000000; > C -2.711000000000 -1.209000000000 0.000000000000; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:4054,energy,energy,4054,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['energy'],['energy']
Energy Efficiency,"ling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1380,ENERGY,ENERGY,1380,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,lper; 368/412 Test #391: python-mints9 .................... Passed 1.96 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #362: x2c2 ............................. Passed 3.13 sec; Start 354: tu1-h2o-energy; 370/412 Test #331: scf-bs ........................... Passed 2.33 sec; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:35573,energy,energy,35573,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['energy'],['energy']
Energy Efficiency,lr3 ..................... Passed 428.34 sec; Start 29: cc13d; 11/412 Test #307: pywrap-checkrun-uhf .............. Passed 1529.35 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #305: pywrap-checkrun-rhf .............. Passed 1560.06 sec; Start 360: tu6-cp-ne2; 13/412 Test #146: dfomp2-grad3 ..................... Passed 1580.99 sec; Start 183: isapt1; 14/412 Test #46: cc3 .............................. Passed 1614.45 sec; Start 387: cookbook-rohf-orb-rot; 15/412 Test #301: pywrap-all ....................... Passed 1620.63 sec; Start 45: cc29; 16/412 Test #104: dcft-grad1 ....................... Passed 1653.03 sec; Start 380: cc-module; 17/412 Test #228: mp2-def2 ......................... Passed 409.78 sec; Start 71: cc52; 18/412 Test #25: cc13 ............................. Passed 772.82 sec; Start 32: cc16; 19/412 Test #112: dcft5 ............................ Passed 535.41 sec; Start 282: opt-irc-2; 20/412 Test #30: cc14 ............................. Passed 624.07 sec; Start 11: cbs-delta-energy; 21/412 Test #42: cc26 ............................. Passed 1000.31 sec; Start 113: dcft6; 22/412 Test #71: cc52 ............................. Passed 310.04 sec; Start 18: cbs-xtpl-func; 23/412 Test #183: isapt1 ........................... Passed 405.79 sec; Start 182: fsapt-allterms; 24/412 Test #45: cc29 ............................. Passed 367.98 sec; Start 194: fd-freq-energy-large; 25/412 Test #115: dcft8 ............................ Passed 1028.74 sec; Start 196: fd-freq-gradient-large; 26/412 Test #29: cc13d ............................ Passed 605.10 sec; Start 279: opt13; 27/412 Test #360: tu6-cp-ne2 ....................... Passed 631.78 sec; Start 374: dft-custom-mgga; 28/412 Test #36: cc2 .............................. Passed 1118.56 sec; Start 321: sapt6; 29/412 Test #380: cc-module ........................ Passed 544.21 sec; Start 48: cc31; 30/412 Test #113: dcft6 ............................ Passed 264.36 sec; Start 98: cisd-opt-fd; 31/412 Test #282: opt-irc-2 .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:2309,energy,energy,2309,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"ls = psi4.core.Vector(""evals"", rdim); evecs = psi4.core.Matrix(""evecs"", rdim, rdim). S.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Descending); shalf_inv = psi4.core.Matrix(""s^(-1/2)"", rdim, rdim); for h in range(nirrep):; for i in range(rdim[h]):; shalf_inv.set(h, i, i, evals.get(h, i) ** -0.5). X = psi4.core.Matrix.doublet(evecs, shalf_inv, False, False); return X. """"""; This function semicanonicalize the orbitals; Fso: SO Fock matrix at geometry 2; C: molecular orbitals that transforms Fso to Fmo; return: unitary matrix that transforms orbitals to semicanonical orbitals; """"""; def semicanonicalize(Fso, C):; # transform SO Fock to MO Fock; Fmo = psi4.core.Matrix.triplet(C, Fso, C, True, False, False). offsets = psi4.core.Dimension.from_list([0 * i for i in range(nirrep)]). U = psi4.core.Matrix(""U to semi"", nmopi, nmopi). # diagonalize each blcok of Fmo; for block in [nrdoccpi,nactvpi,nruoccpi]:; F = psi4.core.Matrix(""Fock"",block,block); for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; F.set(h, i, j, Fmo.get(h, i + offset, j + offset)); ; evals = psi4.core.Vector(""F Evals"", block); evecs = psi4.core.Matrix(""F Evecs"", block, block); F.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Ascending); ; for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; U.set(h, i + offset, j + offset, evecs.get(h, i, j)); offsets[h] += block[h] ### important ###. return U. ```. To use it, you can put the following to the input:; ```; h2o.R = old; Ecas, wfn = energy('casscf', return_wfn=True). h2o.R = new; Escf, wfnSCF = energy('scf', return_wfn=True). # import the script <== Change HERE; sys.path.insert(0, '......'); from ...... import ortho_orbs. wfnSCF.Ca().copy(ortho_orbs(wfn,wfnSCF)); Ecas, wfn = energy('casscf', ref_wfn=wfnSCF, return_wfn=True); ```. I do not worry about efficiency usually, but you can probably make it faster using slicing when filling in the data to matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-313731339:6049,energy,energy,6049,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339,6,['energy'],['energy']
Energy Efficiency,"lse,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.grids.build(); mf.grids.coords = points; print(mf.grids.coords.shape); mf.grids.weights = weights_psi4; print(mf.grids.weights.shape); mf.conv_tol = 1e-7; energy_pyscf = mf.kernel(); print(mf.grids.coords.shape); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); print(abs(energy_psi4-energy_pyscf)). ```. Not entirely sure if pyscf indeed was using psi4 grids here though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:5360,energy,energy,5360,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,2,['energy'],['energy']
Energy Efficiency,"lt_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); ; dashd_part = core.Matrix.from_array(jobrec.extras['qcvars']['DISPERSION CORRECTION GRADIENT']); if wfn is not None:; @@ -296,7 +296,7 @@ class EmpiricalDispersion(object):; resi,; ""gcp"",; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); gcp_part = core.Matrix.from_array(jobrec.return_result); dashd_part.add(gcp_part); ; ```. your script needed a couple tweaks, so here's a working version:; ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:3412,charge,charge,3412,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['charge'],['charge']
Energy Efficiency,"ltiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: c2v										 Molecular point group: c2v; Full point group: C_inf_v										 Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:						 Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0			",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:9018,charge,charge,9018,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['charge'],['charge']
Energy Efficiency,"m the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent, but its effects on COM, inertial frame, symmetry, etc. would need to be probed. Or maybe our moments of inertia are even now wrong in the presence of ghosts. Summary: I would love a rationalization pass through the Mol accessor fns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:1246,charge,charge,1246,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['charge'],['charge']
Energy Efficiency,m-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53; 85/413 Test #60: cc42 ............................. Passed 16.11 sec; Start 247: ocepa3; 86/413 Test #207: frac-traverse .................... Passed 224.00 sec; Start 109: dcft1; 87/413 Test #78: cc8 .............................. Passed 13.24 sec; Start 153: dfomp2p5-2; 88/413 Test #72: cc53 ............................. Passed 17.52 sec; Start 74: cc55; 89/413 Test #319: sapt3 ............................ Passed 75.92 sec; Start 149: dfomp3-2; 90/413 Test #246: ocepa2 ........................... Passed 38.94 sec; Start 66: cc48; 91/413 Test #247: ocepa3 ........................... Passed 27.97 sec; Start 258: omp2p5-grad2; 92/413 Test #153: dfomp2p5-2 ....................... Passed 28.23 sec; Start 56: cc39; 93/413 Test #109: dcft1 ............................ Passed 30.12 sec; Start 206: frac-ip-fitting; 94/413 Test #7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:8022,energy,energy-large,8022,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy-large']
Energy Efficiency,ma-1-ghost; 371/412 Test #350: sapt-sf1 ......................... Passed 1.19 sec; Start 399: json-v11-gradient; 372/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.78 sec; Start 405: json-schema-1-properties; 373/412 Test #221: mints-helper ..................... Passed 1.34 sec; Start 412: skeletonwavefunction; 374/412 Test #381: psi4numpy-cphf ................... Passed 1.38 sec; Start 397: python-memdfjk; 375/412 Test #354: tu1-h2o-energy ................... Passed 1.35 sec; Start 294: psimrcc-pt2; 376/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 388: python-energy; 377/412 Test #379: mints12 .......................... Passed 1.64 sec; Start 406: skeleton; 378/412 Test #223: mints10 .......................... Passed 1.59 sec; Start 217: mints5; 379/412 Test #215: mints3 ........................... Passed 1.33 sec; Start 407: skeletonaointegrals; 380/412 Test #310: pywrap-molecule .................. Passed 1.44 sec; Start 355: tu2-ch2-energy; 381/412 Test #411: skeletonsointegrals .............. Passed 1.57 sec; Start 212: mcscf3; 382/412 Test #401: json-schema-1-ghost .............. Passed 1.49 sec; Start 383: psi4numpy-rhf; 383/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.69 sec; Start 189: fci-tdm; 384/412 Test #353: stability2 ....................... Passed 1.68 sec; Start 210: mcscf1; 385/412 Test #399: json-v11-gradient ................ Passed 1.41 sec; Start 335: scf3; 386/412 Test #405: json-schema-1-properties ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:35835,energy,energy,35835,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy']
Energy Efficiency,"mar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.8",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1476,energy,energy,1476,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,2,['energy'],['energy']
Energy Efficiency,"may have found a memory allocation/usage bug. What kind of; computation is this?. Unfortunately we don't really have a way to estimate scratch usage at; present. It's a feature we'd like to add, but it needs to be added for; every module separately, so is a somewhat daunting task. In principle, can; be known ahead of time based on number of basis functions, number of atoms,; etc., but is different for every method (and sometimes depends on the; particular algorithm used within that method). On Mon, Aug 24, 2020 at 5:55 PM David Slochower <notifications@github.com>; wrote:. > I see memory usage significantly above psi4.set_memory() limit. I do see; > the note in the documentation that memory usage might be *slightly*; > higher, but if I even request within 20% of a node's total memory; > (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now,; > running with psi4.set_memory(""200 GB""), I see persistent VIRT usage of; > 259 GB and RES 256 GB. I know that determining the *actual* amount of memory; > consumed by a process is tricky; > <https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process>,; > but this is important to me to prevent the scheduler from killing my jobs.; > After some troubleshooting, I am requesting 300 GB from the scheduler, but; > 200 GB from psi4, and end up with ~260 GB used. Is this expected?; >; > Relatedly, but separate, is there a way to estimate what the scratch file; > size may be? I was planning to use node-local storage until I found out my; > scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead; > of time (number of atoms × level of theory × some magic thing?); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1985>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5WFYJDHW36AZTXMGCDSCLOVDANCNFSM4QJ6TFCA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520:1226,schedul,scheduler,1226,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520,2,['schedul'],['scheduler']
Energy Efficiency,"me taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1886,energy,energy,1886,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"metry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1473,ENERGY,ENERGY,1473,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['ENERGY'],['ENERGY']
Energy Efficiency,"mmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1315,ENERGY,ENERGY,1315,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,2,['ENERGY'],['ENERGY']
Energy Efficiency,"module.c.h:283; #36 0x7fa146d8bfed in _PyCFunction_FastCallDict Objects/methodobject.c:234; #37 0x7fa146e25499 in call_function Python/ceval.c:4830; #38 0x7fa146e2971b in _PyEval_EvalFrameDefault Python/ceval.c:3328; #39 0x7fa146e2509d in _PyEval_EvalCodeWithName Python/ceval.c:4159; #40 0x7fa146e256cc in PyEval_EvalCodeEx Python/ceval.c:4180; #41 0x7fa146e2571a in PyEval_EvalCode Python/ceval.c:731; #42 0x7fa146e610a1 in run_mod Python/pythonrun.c:1025; #43 0x7fa146e610a1 in PyRun_FileExFlags Python/pythonrun.c:978; #44 0x7fa146e61206 in PyRun_SimpleFileExFlags Python/pythonrun.c:420; #45 0x7fa146e7d6fc in run_file Modules/main.c:340; #46 0x7fa146e7d6fc in Py_Main Modules/main.c:810; #47 0x400bbb in main Programs/python.c:69; #48 0x7fa145de8444 in __libc_start_main (/lib64/libc.so.6+0x22444); #49 0x400c7c (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x400c7c). 0x6020004445d8 is located 0 bytes to the right of 8-byte region [0x6020004445d0,0x6020004445d8); allocated by thread T0 here:; #0 0x7fa1472af94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7fa137a9a6f2 in __gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7fa137a90c98 in std::allocator_traits<std::allocator<double> >::allocate(std::allocator<double>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7fa137a88909 in std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7fa1392ce272 in std::vector<double, std::allocator<double> >::_M_default_append(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:6392,allocate,allocated,6392,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['allocate'],['allocated']
Energy Efficiency,"mory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3385,energy,energy,3385,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,mplete.; > (OO|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Frozen core energy = 0.00000000000000; > ; > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178134633:2431,energy,energy,2431,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633,1,['energy'],['energy']
Energy Efficiency,"mpute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_optio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1922,Energy,Energy,1922,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,"mpute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3434,Energy,Energy,3434,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,mrcc-ccsd_t-3; 377/411 Test #408: skeletonmointegrals .............. Passed 0.92 sec; Start 220: mints-helper; 378/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.40 sec; Start 398: json-v11-gradient; 379/411 Test #333: scf2 ............................. Passed 1.23 sec; Start 411: skeletonwavefunction; 380/411 Test #298: pubchem2 ......................... Passed 1.42 sec; Start 404: json-schema-1-properties; 381/411 Test #410: skeletonsointegrals .............. Passed 0.89 sec; Start 400: json-schema-1-ghost; 382/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.47 sec; Start 353: tu1-h2o-energy; 383/411 Test #220: mints-helper ..................... Passed 1.12 sec; Start 330: scf-bs; 384/411 Test #411: skeletonwavefunction ............. Passed 0.90 sec; Start 378: mints12; 385/411 Test #398: json-v11-gradient ................ Passed 0.97 sec; Start 349: sapt-sf1; 386/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.48 sec; Start 387: python-energy; 387/411 Test #404: json-schema-1-properties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:36219,energy,energy,36219,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,n-chiral; 363/411 Test #376: pywrap-align ..................... Passed 3.18 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.17 sec; Start 379: cc-module; 365/411 Test #377: pywrap-align-chiral .............. Passed 3.11 sec; Start 380: psi4numpy-cphf; 366/411 Test #227: mp2-def2 ......................... Passed 434.72 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #380: psi4numpy-cphf ................... Passed 1.36 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.04 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 2.43 sec; Start 385: psi4numpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.52 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.41 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.33 sec; Start 388: python-curve; 374/411 Test #240: ocepa-freq1 ...................... Passed 431.50 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 3.42 sec; Start 390: python-mints9; 376/411 Test #375: pywrap-bfs ....................... Passed 25.37 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 1.87 sec; Start 392: python-cc54; 378/411 Test #391: python-mints2 .................... Passed 2.43 sec; Start 393: python-3-index-transforms; 379/411 Test #374: dft-custom-gga ................... Passed 30.91 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.82 sec; Start 396: python-memdfjk; 381/411 Test #178: fsapt1 ........................... Passed 2162.17 sec; Start 397: json-v11-energy; 382/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 398: json-v11-gradient; 383/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:34910,energy,energy,34910,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,2,['energy'],['energy']
Energy Efficiency,n-chiral; 371/411 Test #376: pywrap-align ..................... Passed 3.23 sec; Start 378: mints12; 372/411 Test #378: mints12 .......................... Passed 1.18 sec; Start 379: cc-module; 373/411 Test #377: pywrap-align-chiral .............. Passed 2.88 sec; Start 380: psi4numpy-cphf; 374/411 Test #380: psi4numpy-cphf ................... Passed 1.66 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #381: psi4numpy-dfmp2 .................. Passed 3.39 sec; Start 382: psi4numpy-rhf; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.80 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.82 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.83 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 10.74 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #371: dft-custom-dhdf .................. Passed 92.73 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 2.12 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 9.75 sec; Start 389: python-pubchem; 383/411 Test #389: python-pubchem ................... Passed 57.20 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.93 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 3.30 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 177.04 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 10.00 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.99 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.99 sec; Start 398: json-v11-gradient; 391/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:35489,energy,energy,35489,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['energy'],['energy']
Energy Efficiency,n-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.20 sec; Start 378: mints12; 379/411 Test #378: mints12 .......................... Passed 1.19 sec; Start 379: cc-module; 380/411 Test #379: cc-module ........................ Passed 38.08 sec; Start 380: psi4numpy-cphf; 381/411 Test #380: psi4numpy-cphf ................... Passed 1.21 sec; Start 381: psi4numpy-dfmp2; 382/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 382: psi4numpy-rhf; 383/411 Test #382: psi4numpy-rhf .................... Passed 0.86 sec; Start 383: psi4numpy-rhf-gradient; 384/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 384: psi4numpy-rhf-hessian; 385/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.06 sec; Start 385: psi4numpy-fci; 386/411 Test #385: psi4numpy-fci .................... Passed 3.09 sec; Start 386: cookbook-rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 33.29 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 1.08 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:35828,energy,energy,35828,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy']
Energy Efficiency,n-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.25 sec; Start 378: mints12; 379/411 Test #378: mints12 .......................... Passed 1.27 sec; Start 379: cc-module; 380/411 Test #379: cc-module ........................ Passed 14.70 sec; Start 380: psi4numpy-cphf; 381/411 Test #380: psi4numpy-cphf ................... Passed 1.36 sec; Start 381: psi4numpy-dfmp2; 382/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.55 sec; Start 382: psi4numpy-rhf; 383/411 Test #382: psi4numpy-rhf .................... Passed 0.85 sec; Start 383: psi4numpy-rhf-gradient; 384/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.03 sec; Start 384: psi4numpy-rhf-hessian; 385/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.41 sec; Start 385: psi4numpy-fci; 386/411 Test #385: psi4numpy-fci .................... Passed 2.83 sec; Start 386: cookbook-rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 18.93 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 0.79 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:35799,energy,energy,35799,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy']
Energy Efficiency,"n/ceval.c:4187; #38 0x556f5236501b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #39 0x556f523e73c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #40 0x556f523e77c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #41 0x556f523e79c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #42 0x556f523eb4b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #43 0x556f523eb4b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #44 0x556f522b402d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #45 0x7f3580127412 in __libc_start_main (/lib64/libc.so.6+0x24412); #46 0x556f52394e0d (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x1c3e0d). 0x603000319fd8 is located 0 bytes to the right of 24-byte region [0x603000319fc0,0x603000319fd8); allocated by thread T0 here:; #0 0x7f35803c0abe in operator new[](unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:93; #1 0x7f356e93c966 in psi::block_matrix(unsigned long, unsigned long, bool) /home/raimis/prj/psi4.git/psi4/src/psi4/libciomr/block_matrix.cc:83; #2 0x7f356cf50fa3 in psi::ccresponse::roa() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/roa.cc:93; #3 0x7f356cf2a1e3 in psi::ccresponse::ccresponse(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/ccresponse.cc:136; #4 0x7f356cac7528 in py_psi_ccresponse(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:396; #5 0x7f356cb7fe9a in double pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<double, double (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(double (*&)(std::shared_ptr<psi::Wavefunction>)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133:7284,allocate,allocated,7284,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133,1,['allocate'],['allocated']
Energy Efficiency,"n: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1629,energy,energy,1629,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"n_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19029,energy,energy,19029,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ncies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AU",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:1756,charge,charge,1756,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,2,['charge'],['charge']
Energy Efficiency,"nctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasiri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5041,energy,energy,5041,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"nd routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1250,ENERGY,ENERGY,1250,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ne energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, time taken: 250.7947356943041 seconds.; Valine energy: -401.1469758245755 Hartrees, time taken: 182.75560629181564 seconds.; ```; [Local_psi4_outputs.tar.gz](https://github.com",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:3058,energy,energy,3058,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"nergy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ; @DF-RHF iter 1: -7259.15010997926129 -4.14910e+00 1.35868e-02 DIIS; @DF-RHF iter 2: -7259.17972994142656 -2.96200e-02 3.74973e-03 DIIS; @DF-RHF iter 3: -7259.18676197489549 -7.03203e-03 1.53495e-03 DIIS; @DF-RHF iter 4: -7259.18756584481798 -8.03870e-04 4.30106e-05 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1947,energy,energy,1947,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"neric; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(jobrec.keys()))) from err. try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:16098,energy,energy,16098,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"neric; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(jobrec.keys()))) from err. try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:7261,energy,energy,7261,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ng CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3684,energy,energy,3684,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785,1,['energy'],['energy']
Energy Efficiency,"ng like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1580,ENERGY,ENERGY,1580,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ngly occupied orbitals; 'restricted_docc': [5, 0, 0, 0], # Core orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solve",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1266,energy,energy,1266,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['energy'],['energy']
Energy Efficiency,"niel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1137,energy,energy,1137,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,1,['energy'],['energy']
Energy Efficiency,"niel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:9492,energy,energy,9492,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['energy'],['energy']
Energy Efficiency,"nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting library will work. Here I am using [Altair](https://altair-viz.github.io/). The output file contains the following summary:; ```; ******************************************************************************************; ********** WARNING **********; ********** Length-gauge rotatory strengths are **NOT** gauge-origin invariant **********; ******************************************************************************************. Excitation Energy Total Energy Oscillator Strength Rotatory Strength ; # Sym: GS->ES (Trans) au eV au au (length) au (velocity) au (length) au (velocity) ; ---- -------------------- --------------- --------------- --------------- --------------- --------------- --------------- ---------------; 1 A->A (3 A) 0.29232 7.95436 -191.62963 0.0000 0.0000 0.0000 -0.0000 ; 2 A->A (3 A) 0.32745 8.91025 -191.59450 0.0000 0.0000 0.0000 -0.0000 ; 3 A->A (3 A) 0.33091 9.00446 -191.59104 0.0000 0.0000 0.0000 -0.0000 ; 4 A->A (3 A) 0.34771 9.46180 -191.57423 0.0000 0.0000 0.0000 -0.0000 ; 5 A->A (3 A) 0.36617 9.96389 -191.55578 0.0000 0.0000 0.0000 -0.0000 ; 6 A->A (1 A) 0.36723 9.99278 -191.55472 0.0030 0.0073 -0.0070 -0.0076 ; 7 A->A (3 A) 0.38101 10.36789 -191.54093 0.0000 0.0000 0.0000 -0.0000 ; 8 A->A (3 A) 0.38434 10.45833 -191.53761 0.0000 0.0000 0.0000 -0.0000 ; 9 A->A (1 A) 0.38603 10.50444 -191.53591 0.0057 0.0118 0.0207 0.0211 ; 10 A->A (3 A) 0.39165 10.65733 -191.53030 0.0000 0.0000 0.0000 -0.0000 ; 11 A->A (1 A) 0.39470 10.74043 -191.52724 0.0255 0.0287 0.0509 0.0617 ; 12 A->A (1 A) 0.40636 11.05757 -191.51559 0.1813 0.1877 0.0663 0.0563 ; 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:4615,Energy,Energy,4615,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,2,['Energy'],['Energy']
Energy Efficiency,"nni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 49",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:9733,energy,energy,9733,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,nocc3 ........................... Passed 24.72 sec; Start 158: dft-ghost; 248/411 Test #270: opt4 ............................. Passed 10.67 sec; Start 241: ocepa-grad1; 249/411 Test #335: scf4 ............................. Passed 18.87 sec; Start 224: molden2; 250/411 Test #365: cubeprop-esp ..................... Passed 9.37 sec; Start 199: fnocc1; 251/411 Test #124: dfccsdl1 ......................... Passed 13.23 sec; Start 243: ocepa1; 252/411 Test #198: freq-isotope2 .................... Passed 13.17 sec; Start 223: molden1; 253/411 Test #123: dfccsd1 .......................... Passed 16.62 sec; Start 226: mp2-1; 254/411 Test #295: psithon1 ......................... Passed 15.24 sec; Start 341: soscf-ref; 255/411 Test #158: dft-ghost ........................ Passed 10.18 sec; Start 185: fci-h2o; 256/411 Test #139: dfomp2-1 ......................... Passed 18.46 sec; Start 184: fci-dipole; 257/411 Test #4: casscf-semi ...................... Passed 14.76 sec; Start 186: fci-h2o-2; 258/411 Test #192: fd-freq-energy ................... Passed 17.45 sec; Start 132: dfmp2-4; 259/411 Test #224: molden2 .......................... Passed 11.80 sec; Start 6: ao-casscf-sp; 260/411 Test #223: molden1 .......................... Passed 9.22 sec; Start 127: dfccsdt1; 261/411 Test #185: fci-h2o .......................... Passed 7.33 sec; Start 90: cepa1; 262/411 Test #243: ocepa1 ........................... Passed 12.67 sec; Start 9: castup2; 263/411 Test #184: fci-dipole ....................... Passed 8.24 sec; Start 265: opt1; 264/411 Test #266: opt1-fd .......................... Passed 21.17 sec; Start 10: castup3; 265/411 Test #186: fci-h2o-2 ........................ Passed 8.30 sec; Start 339: scf-property; 266/411 Test #241: ocepa-grad1 ...................... Passed 22.53 sec; Start 191: fcidump; 267/411 Test #265: opt1 ............................. Passed 8.60 sec; Start 141: dfomp2-3; 268/411 Test #6: ao-casscf-sp ..................... Passed 11.39 sec; Start 117: dfcass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:24218,energy,energy,24218,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,"now looking solely at the third bullet in https://github.com/psi4/psi4/pull/1980#issuecomment-677068760, post-Jonathon's mograd correction. I tried ""healing"" the other rms arithmetic grepped above, but it made no effect on iteration values. Interestingly, the internal array `rms()` fn is also `sqrt(sq) / n` rather than `sqrt(sq / n)`. Below are the 9 olccd r/u/ro ae 3 dz/adz/qz2p tests in occ. ""E"" is the scale for `tol_Eod` from `e_convergence` in `if (rms_wog < tol_grad && biggest_mograd < mograd_max && std::fabs(DE) < (1.0 * tol_Eod)) break;`. ""G"" is the floor (replacing 4.0) for mograd `tol_grad` in. ```; if (options_[""RMS_MOGRAD_CONVERGENCE""].has_changed()) {; tol_grad = options_.get_double(""RMS_MOGRAD_CONVERGENCE"");; } else {; double temp;; temp = (-0.9 * std::log10(tol_Eod)) - 1.6;; if (temp < 4.0) {; temp = 4.0;; }; tol_grad = pow(10.0, -temp);; // tol_grad = 100.0*tol_Eod;; outfile->Printf(""\tFor this energy convergence, default RMS orbital gradient is: %12.2e\n"", tol_grad);; ```. Without interventions (first block below), 2 tests fail. Iterations range is 8-11. This is unchanged from before #1988 because the iterations are E-limited. With my first proposed intervention of meddling with E by 0.1 (middle block below), that heals everything but at a cost of nearly 3 more iterations; range 10-14. Meddling with G instead (third block below) by flooring at 6 fixes everything in avg of 1 more iteration; range 8-12. Plus G is at least all positive, rather than E, which can trigger convergence on small energy _increases_. So I've switched this PR to to the third block case. Note that iteration studies have been looking at olccd only; it may be worth examining # iter for other oo methods that were fine before this PR. E 1.0 G 4 (2 fail) avg 9.6 -- pre PR; ```; iter: abs( 3.92e-07) < 1.00e-06 8.04e-07 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.11e-06 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.03e-07 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 2.32e-06 < 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682319508:923,energy,energy,923,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682319508,1,['energy'],['energy']
Energy Efficiency,"now of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1290,ENERGY,ENERGY,1290,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ntional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1293,energy,energy,1293,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"ntra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Indirect leak of 648 byte(s) in 1 object(s) allocated from:; #0 0x7f0f92dd6df8 in __interceptor_realloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:75; #1 0x557f1797673c in _PyObject_GC_Resize (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x11373c). SUMMARY: AddressSanitizer: 303271 byte(s) leaked in 149 allocation(s). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; casscf = 27.28 sec*proc (1 test); psi = 27.28 sec*proc (1 test); quicktests = 27.28 sec*proc (1 test). Total Test time (real) = 27.46 sec. The following tests FAILED:; 	 3 - casscf-fzc-sp (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:18490,allocate,allocated,18490,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,2,['allocate'],['allocated']
Energy Efficiency,nts13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Test #215: mints3 ........................... Passed 1.10 sec; Start 335: scf3; 382/412 Test #411: skeletonsointegrals .............. Passed 1.45 sec; Start 212: mcscf3; 383/412 Test #355: tu2-ch2-energy ................... Passed 1.26 sec; Start 217: mints5; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.45 sec; Start 210: mcscf1; 385/412 Test #405: json-schema-1-properties ......... Passed 1.24 sec; Start 383: psi4numpy-rhf; 386/412 Test #221: mints-helper ..................... Passed 1.60 sec; Start 240: numpy-array-interface; 387/412 Test #399: json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 sec; 398/412 Test #240: numpy-array-interface ............ Passed 1.01 sec; 399/412 Test #217: mints5 ........................... Passed 1.36 sec; 400/412 Test #383: psi4numpy-rhf .................... Passed 1.21 sec; 401/412 Test #213: mints1 ........................... Passed 0.95 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.84 sec; 403/412 Test #20,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:36820,energy,energy,36820,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"nts\\qiskit_scripts\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\python38.zip\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\DLLs\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\\win32\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\\win32\\lib\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\\Pythonwin\'] + sys.path\nfrom qiskit_nature.drivers.qmolecule import QMolecule\n_q_molecule = QMolecule(""C:\\Users\\poc\\AppData\\Local\\Temp\\tmpyn_j4sp7.hdf5"")\nimport numpy\ncore.get_active_molecule().fix_com(True)\ncore.get_active_molecule().fix_orientation(True)\ncore.get_active_molecule().reset_point_group(\'c1\')\n_q_hf_energy, _q_hf_wavefn = energy(\'scf\', return_wfn=True)\n_q_mints = MintsHelper(_q_hf_wavefn.basisset())\n_q_mol = _q_hf_wavefn.molecule()\n_has_B = not _q_hf_wavefn.same_a_b_orbs()\n_q_molecule.origin_driver_version = psi4.__version__\n_q_molecule.hf_energy = _q_hf_energy\n_q_molecule.nuclear_repulsion_energy = _q_mol.nuclear_repulsion_energy()\n_q_molecule.num_molecular_orbitals = _q_hf_wavefn.nmo()\n_q_molecule.num_alpha = _q_hf_wavefn.nalpha()\n_q_molecule.num_beta = _q_hf_wavefn.nbeta()\n_q_molecule.mo_coeff = numpy.asarray(_q_hf_wavefn.Ca())\n_q_molecule.mo_coeff_b = numpy.asarray(_q_hf_wavefn.Cb()) if _has_B else None\n_q_molecule.orbital_energies = numpy.asarray(_q_hf_wavefn.epsilon_a())\n_q_molecule.orbital_energies_b = numpy.asarray(_q_hf_wavefn.epsilon_b()) if _has_B else None\n_q_molecule.molecular_charge = _q_mol.molecular_charge()\n_q_molecule.multiplicity = _q_mol.multiplicity()\n_q_molecule.num_atoms = _q_mol.natom()\n_q_molecule.atom_symbol = []\n_q_molecule.atom_xyz = numpy.empty([_q_mol.natom(), ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922:2014,energy,energy,2014,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922,1,['energy'],['energy']
Energy Efficiency,"nv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2076,energy,energy,2076,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['energy'],['energy']
Energy Efficiency,o .......................... Passed 3.63 sec; Start 376: pywrap-align; 293/404 Test #286: props3 ........................... Passed 4.82 sec; Start 331: scf1; 294/404 Test #184: fci-dipole ....................... Passed 3.85 sec; Start 186: fci-h2o-2; 295/404 Test #401: json-schema-1-orient ............. Passed 1.77 sec; Start 217: mints6; 296/404 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 85: cepa0-grad1; 297/404 Test #340: soscf-large ...................... Passed 4.47 sec; Start 232: mp2p5-grad2; 298/404 Test #191: fcidump .......................... Passed 3.01 sec; Start 397: json-v11-energy; 299/404 Test #85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; Start 179: fsapt2; 301/404 Test #376: pywrap-align ..................... Passed 3.31 sec; Start 251: omp2-grad1; 302/404 Test #331: scf1 ............................. Passed 3.71 sec; Start 246: omp2-1; 303/404 Test #397: json-v11-energy .................. Passed 1.92 sec; Start 134: dfmp2-grad1; 304/404 Test #360: x2c1 ............................. Passed 6.36 sec; Start 284: props1; 305/404 Test #234: mp3-grad2 ........................ Passed 1.82 sec; Start 344: dfep2-1; 306/404 Test #186: fci-h2o-2 ........................ Passed 4.01 sec; Start 117: dfcasscf-sa-sp; 307/404 Test #251: omp2-grad1 ....................... Passed 1.70 sec; Start 225: mom; 308/404 Test #246: omp2-1 ........................... Passed 1.37 sec; Start 352: stability2; 309/404 Test #134: dfmp2-grad1 ...................... Passed 1.57 sec; Start 355: tu3-h2o-opt; 310/404 Test #217: mints6 ........................... Passed 4.88 sec; Start 377: pywrap-align-chiral; 311/404 Test #179: fsapt2 ........................... Passed 3.03 sec; Start 136: dfmp2-grad3; 312/404 Test #352: stability2 ....................... Passed 1.76 sec; Start 343: stability1; 313/404 Test #344: dfep2-1 .......................... Passed 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:28104,energy,energy,28104,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,"o request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1215,energy,energy,1215,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,2,['energy'],['energy']
Energy Efficiency,"oElectronInt const&) (eri.h:255); ==2802== by 0x1CC3A0EE: Libint2ErfERI (eri.h:300); ==2802== by 0x1CC3A0EE: psi::Libint2ErfERI::clone() const (eri.h:305); ==2802== by 0x1C740620: psi::DFHelper::prepare_AO_wK_core() (dfhelper.cc:571); ==2802== by 0xD265ED2: __kmp_invoke_microtask (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD228725: __kmp_invoke_task_func (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:2746,allocate,allocate,2746,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207,1,['allocate'],['allocate']
Energy Efficiency,"ode can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; >> wrote:; >>; >>> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >>> small CASSCF calculations. However, I can't get DETCI to run the; >>> calculations for me.; >>>; >>> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >>> shell. DETCI correctly determines that there is 1 alpha string (since the; >>> shell is fully occupied) and 3 beta strings, but then it says that the CI; >>> space only has a single determinant and crashes.; >>>; >>> Example inputs; >>>; >>> molecule {; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >>> set active [0, 0, 0, 0, 0, 1, 1, 1]; >>> energy('casscf'); >>>; >>> or a lower symmetry; >>>; >>> molecule {; >>> symmetry c2h; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0]; >>> set active [0, 0, 1, 2]; >>> energy('casscf'); >>>; >>> I guess the problem is that DETCI can't find a proper symmetry? Is there; >>> a way to circumvent this issue? @CDSherrill; >>> <https://github.com/CDSherrill> ?; >>>; >>> —; >>> You are receiving this because you were mentioned.; >>> Reply to this email directly, view it on GitHub; >>> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >>> or unsubscribe; >>> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >>> .; >>>; >>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:2796,energy,energy,2796,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,2,['energy'],['energy']
Energy Efficiency,"of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1196,ENERGY,ENERGY,1196,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"oh, just encountered this for ethene. here is a test case. 2 different irreps not always fail. ; ```; molecule wat {; C 0.6669000000 0.0000000000 0.0000000000; C -0.6669000000 0.0000000000 0.0000000000; H 1.2295200000 0.9222900000 0.0000000000; H -1.2295200000 0.9222900000 0.0000000000; H 1.2295200000 -0.9222900000 0.0000000000; H -1.2295200000 -0.9222900000 0.0000000000; }. set {; basis 3-21G; freeze_core true; roots_per_irrep [0,1,0,0,0,0,0,1] # <-- fails; roots_per_irrep [0,1,0,0,0,1,0,0] # <-- works (?); }; energy('eom-cc3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/502#issuecomment-437531306:517,energy,energy,517,https://psicode.org,https://github.com/psi4/psi4/issues/502#issuecomment-437531306,1,['energy'],['energy']
Energy Efficiency,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2170,ENERGY,ENERGY,2170,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"oms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2075,energy,energy,2075,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,2,['energy'],['energy']
Energy Efficiency,"on 7 energy: -320.87958210143461 -0.00000648582829 0.00000325221580; @Atomic UHF Final Energy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ; @DF-RHF iter 1: -7259.15010997926129 -4.14910e+00 1.35868e-02 DIIS; @DF-RHF iter 2: -725",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1765,energy,energy,1765,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"on(""DFT_OMEGA"", 0.6); func_call = energy('SCF', dft_functional=""wPBE""). !----------------------------------------------------------------------------------!; ! !; ! wPBE0 omega=0.4: computed value (-79.03914662) does not match !; ! (-75.27504649) to atol=1e-06 by difference (-3.76410013). !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 16.57 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom"" end time: Jan 05 15:36 EST; ""dft-custom"" time elapsed: 00:00:16; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""ne""); core.set_global_option(""DFT_SPHERICAL_POINTS"", 770); core.set_global_option(""D_CONVERGENCE"", 1e-5); core.set_global_option(""BASIS"", ""cc-pvdz""); activate(ne); --> edft = energy(""ft97""); compare_values(-128.850056371480, edft, 4, ""Ne: FT97""). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.81 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom-gga"" end time: Jan 05 15:36 EST; ""dft-custom-gga"" time elapsed: 00:00:29; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; anl_grad = gradient('scf', dft_functional=func, dertype=1); compare_matrices(func_uks_reference, anl_grad, 6, ""Analytic vs Reference CAM-like UKS Gradients""); compare_matrices(anl_grad, fd_grad, 6, ""Analytic vs FD CAM UKS Gradients""); anl_grad = gradient('scf', dft_functional=""CAM-B3LYP"", dertyp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:1765,energy,energy,1765,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,1,['energy'],['energy']
Energy Efficiency,"on) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.05635077157466 -1.23056e+02 5.15651e-01; @RKS iter 2: -123.10132047688978 -4.49697e-02 6.79382e-01 DIIS; @RKS iter 3: -128.77814169956412 -5.67682e+00 1.11592e-01 DIIS; @RKS iter 4: -128.89363525981292 -1.15494e-01 1.11421e-02 DIIS; @RKS iter 5: -128.89481463928649 -1.17938e-03 2.07054e-03 DIIS; @RKS iter 6: -128.89485608871536 -4.14494e-05 8.00321e-05 DIIS; @RKS iter 7: -128.89485614958289 -6.08675e-08 1.05214e-05 DIIS; @RKS iter 8: -128.89485615065263 -1.06974e-09 2.89771e-07 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.509932 2Ag -1.282862 1B3u -0.438441; 1B2u -0.438441 1B1u -0.438441. Virtual:. 2B3u 1.301627 2B2u 1.301627 2B1u 1.301627; 3Ag 1.757418 1B1g 4.636294 1B2g 4.636294; 1B3g 4.636294 4Ag 4.636294 5Ag 4.636294. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.89485615065263. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5988982401030682; Two-Electron Energy = 66.2281289694592061; DFT Exchange-Correlation Energy = -12.5240868800087686; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.8948561506526289. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 1.84 seconds = 0.03 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:12286,Energy,Energy,12286,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,on-vibanalysis ............... Passed 1285.91 sec; Start 24: cc13; 13/411 Test #227: mp2-def2 ......................... Passed 371.74 sec; Start 31: cc16; 14/411 Test #29: cc14 ............................. Passed 619.00 sec; Start 28: cc13d; 15/411 Test #145: dfomp2-grad3 ..................... Passed 1456.77 sec; Start 182: isapt1; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1461.98 sec; Start 11: cbs-delta-energy; 17/411 Test #111: dcft5 ............................ Passed 505.16 sec; Start 44: cc29; 18/411 Test #306: pywrap-checkrun-uhf .............. Passed 1485.55 sec; Start 47: cc31; 19/411 Test #103: dcft-grad1 ....................... Passed 1518.99 sec; Start 112: dcft6; 20/411 Test #300: pywrap-all ....................... Passed 1524.14 sec; Start 18: cbs-xtpl-func; 21/411 Test #13: cbs-xtpl-alpha ................... Passed 526.82 sec; Start 181: fsapt-allterms; 22/411 Test #114: dcft8 ............................ Passed 687.39 sec; Start 193: fd-freq-energy-large; 23/411 Test #240: ocepa-freq1 ...................... Passed 852.90 sec; Start 195: fd-freq-gradient-large; 24/411 Test #45: cc3 .............................. Passed 1687.06 sec; Start 278: opt13; 25/411 Test #110: dcft4 ............................ Passed 1692.73 sec; Start 91: cepa-module; 26/411 Test #31: cc16 ............................. Passed 395.40 sec; Start 281: opt-irc-2; 27/411 Test #44: cc29 ............................. Passed 233.84 sec; Start 359: tu6-cp-ne2; 28/411 Test #47: cc31 ............................. Passed 213.17 sec; Start 27: cc13c; 29/411 Test #112: dcft6 ............................ Passed 207.94 sec; Start 70: cc52; 30/411 Test #24: cc13 ............................. Passed 461.26 sec; Start 58: cc41; 31/411 Test #28: cc13d ............................ Passed 324.06 sec; Start 104: dcft-grad2; 32/411 Test #182: isapt1 ........................... Passed 402.87 sec; Start 373: dft-custom-mgga; 33/411 Test #11: cbs-delta-energy ................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:2477,energy,energy-large,2477,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy-large']
Energy Efficiency,"ond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1988,Energy,Energy,1988,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,"onda3\envs\qiskit-0-27-psi4-jupyter\python38.zip','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\DLLs','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter','','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\win32','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\win32\lib','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\Pythonwin','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\IPython\extensions','C:\Users\poc\.ipython'] + sys.path; from qiskit_nature.drivers.qmolecule import QMolecule; _q_molecule = QMolecule(""C:\Users\poc\AppData\Local\Temp\tmpa8t4a3xf.hdf5""); import numpy; core.get_active_molecule().fix_com(True); core.get_active_molecule().fix_orientation(True); core.get_active_molecule().reset_point_group('c1'); _q_hf_energy, _q_hf_wavefn = energy('scf', return_wfn=True); _q_mints = MintsHelper(_q_hf_wavefn.basisset()); _q_mol = _q_hf_wavefn.molecule(); _has_B = not _q_hf_wavefn.same_a_b_orbs(); _q_molecule.origin_driver_version = psi4.__version__; _q_molecule.hf_energy = _q_hf_energy; _q_molecule.nuclear_repulsion_energy = _q_mol.nuclear_repulsion_energy(); _q_molecule.num_molecular_orbitals = _q_hf_wavefn.nmo(); _q_molecule.num_alpha = _q_hf_wavefn.nalpha(); _q_molecule.num_beta = _q_hf_wavefn.nbeta(); _q_molecule.mo_coeff = numpy.asarray(_q_hf_wavefn.Ca()); _q_molecule.mo_coeff_b = numpy.asarray(_q_hf_wavefn.Cb()) if _has_B else None; _q_molecule.orbital_energies = numpy.asarray(_q_hf_wavefn.epsilon_a()); _q_molecule.orbital_energies_b = numpy.asarray(_q_hf_wavefn.epsilon_b()) if _has_B else None; _q_molecule.molecular_charge = _q_mol.molecular_charge(); _q_molecule.multiplicity = _q_mol.multiplicity(); _q_molecule.num_atoms = _q_mol.natom(); _q_molecule.atom_symbol = []; _q_molecule.atom_xyz = numpy.empty([_q_mol.natom(), 3]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922:7870,energy,energy,7870,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922,1,['energy'],['energy']
Energy Efficiency,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2145,energy,energy,2145,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['energy'],['energy']
Energy Efficiency,"optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.57",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1199,energy,energy,1199,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"opy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:11650,energy,energy,11650,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:122,Energy,Energy,122,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,7,['Energy'],['Energy']
Energy Efficiency,orb-rot; 380/411 Test #305: pywrap-checkrun-rohf ............. Passed 589.53 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 0.86 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 4.75 sec; Start 389: python-pubchem; 383/411 Test #359: tu6-cp-ne2 ....................... Passed 240.77 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.89 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.96 sec; Start 392: python-cc54; 386/411 Test #389: python-pubchem ................... Passed 50.14 sec; Start 393: python-3-index-transforms; 387/411 Test #373: dft-custom-mgga .................. Passed 175.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.81 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.53 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 10.54 sec; Start 399: json-schema-1-energy; 392/411 Test #398: json-v11-gradient ................ Passed 2.05 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.58 sec; Start 401: json-schema-1-orient; 394/411 Test #399: json-schema-1-energy ............. Passed 4.08 sec; Start 402: json-schema-1-throws; 395/411 Test #401: json-schema-1-orient ............. Passed 2.72 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.76 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.78 sec; Start 406: skeletonaointegrals; 399/411 Test #392: python-cc54 ...................... Passed 25.14 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:36396,energy,energy,36396,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['energy'],['energy']
Energy Efficiency,"orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-pac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1369,ENERGY,ENERGY,1369,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['ENERGY'],['ENERGY']
Energy Efficiency,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:2232,Energy,Energy,2232,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in En,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:3186,Energy,Energy,3186,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020851 -0.000351118183; @IRC 2 -148.751921813112 -0.001007792261; @IRC 3 -148.753458618899 -0.001536805787; @IRC 4 -148.755338547024 -0.001879928125; @IRC 5 -148.757353153707 -0.002014606684; @IRC 6 -148.759306859301 -0.001953705594; @IRC 7 -148.761045995024 -0.001739135723; @IRC 8 -148.762474848946 -0.001428853922; @IRC 9 -148.763557315982 -0.001082467035; @IRC 10 -148.764306952597 -0.000749636616; @IRC 11 -148.764771570120 -0.000464617522; @IRC 12 -148.765017199697 -0.000245629578; @IRC 13 -148.765113810944 -0.000096611247; @IRC 14 -148.765124130978 -0.000010320034; @IRC 15 -148.764729734758 0.000394396220; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:1278,Energy,Energy,1278,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,"oth `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to make sure I understand this correctly, the IR active means it is my epsilon in beer-lambert's law and all I would need to do to get absorbance is times it by the path length of my cell, and the concentration of my sample. And then calculate transmittance from how much was absorbed to how much light was emitted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:1466,Reduce,Reduced,1466,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,1,['Reduce'],['Reduced']
Energy Efficiency,"out the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1648,ENERGY,ENERGY,1648,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"outing/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; occ_wfn = core.occ(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - CISD/cc-pVDZ via DETCI: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:10829,energy,energy,10829,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,p ........................ Passed 28.98 sec; Start 177: docs-bases; 268/415 Test #177: docs-bases ....................... Passed 1.04 sec; Start 178: docs-dft; 269/415 Test #157: dft-grad-lr2 ..................... Passed 88.54 sec; Start 180: extern2; 270/415 Test #178: docs-dft ......................... Passed 0.99 sec; Start 186: isapt2; 271/415 Test #176: dft-omega ........................ Passed 16.81 sec; Start 188: fci-h2o; 272/415 Test #188: fci-h2o .......................... Passed 5.83 sec; Start 189: fci-h2o-2; 273/415 Test #158: dft-grad-lr3 ..................... Passed 99.06 sec; Start 190: fci-h2o-fzcv; 274/415 Test #175: dft3 ............................. Passed 26.67 sec; Start 191: fci-tdm; 275/415 Test #191: fci-tdm .......................... Passed 3.68 sec; Start 192: fci-tdm-2; 276/415 Test #190: fci-h2o-fzcv ..................... Passed 5.27 sec; Start 193: fci-coverage; 277/415 Test #189: fci-h2o-2 ........................ Passed 7.57 sec; Start 195: fd-freq-energy; 278/415 Test #173: dft1-alt ......................... Passed 50.55 sec; Start 197: fd-freq-gradient; 279/415 Test #159: dfomp2p5-grad2 ................... Passed 110.29 sec; Start 199: fd-gradient; 280/415 Test #193: fci-coverage ..................... Passed 20.10 sec; Start 200: freq-isotope1; 281/415 Test #180: extern2 .......................... Passed 38.73 sec; Start 202: fnocc1; 282/415 Test #186: isapt2 ........................... Passed 38.01 sec; Start 204: fnocc3; 283/415 Test #192: fci-tdm-2 ........................ Passed 21.64 sec; Start 206: frac; 284/415 Test #206: frac ............................. Passed 3.96 sec; Start 207: frac-ip-fitting; 285/415 Test #200: freq-isotope1 .................... Passed 33.77 sec; Start 209: ghosts; 286/415 Test #171: dft1 ............................. Passed 99.43 sec; Start 213: mcscf2; 287/415 Test #213: mcscf2 ........................... Passed 2.95 sec; Start 214: mcscf3; 288/415 Test #214: mcscf3 ........................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:26098,energy,energy,26098,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,"p /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17413,energy,energy,17413,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,p-align ..................... Passed 7.73 sec; Start 139: dfmp2-grad4; 241/413 Test #326: sapt8 ............................ Passed 12.95 sec; Start 359: tu4-h2o-freq; 242/413 Test #102: cubeprop ......................... Passed 10.42 sec; Start 129: dfccsdt1; 243/413 Test #84: cdomp2-1 ......................... Passed 2.74 sec; Start 371: dft-jk; 244/413 Test #228: mp2-1 ............................ Passed 4.43 sec; Start 245: ocepa1; 245/413 Test #126: dfccsdl1 ......................... Passed 4.23 sec; Start 374: dft-custom-hybrid; 246/413 Test #342: soscf-large ...................... Passed 14.81 sec; Start 159: dfrasscf-sp; 247/413 Test #139: dfmp2-grad4 ...................... Passed 4.03 sec; Start 272: opt4; 248/413 Test #129: dfccsdt1 ......................... Passed 3.54 sec; Start 99: cisd-sp; 249/413 Test #245: ocepa1 ........................... Passed 2.46 sec; Start 270: opt2-fd; 250/413 Test #288: props3 ........................... Passed 13.72 sec; Start 337: scf4; 251/413 Test #14: cbs-xtpl-energy .................. Passed 10.06 sec; Start 343: soscf-ref; 252/413 Test #370: scf-freq1 ........................ Passed 9.29 sec; Start 134: dfmp2-4; 253/413 Test #287: props2 ........................... Passed 12.06 sec; Start 89: cepa2; 254/413 Test #159: dfrasscf-sp ...................... Passed 6.55 sec; Start 163: dft-ghost; 255/413 Test #359: tu4-h2o-freq ..................... Passed 9.86 sec; Start 297: psithon1; 256/413 Test #367: cubeprop-esp ..................... Passed 11.53 sec; Start 3: casscf-fzc-sp; 257/413 Test #219: mints6 ........................... Passed 12.37 sec; Start 9: castup2; 258/413 Test #371: dft-jk ........................... Passed 9.89 sec; Start 369: scf-hess1; 259/413 Test #272: opt4 ............................. Passed 8.00 sec; Start 200: freq-isotope2; 260/413 Test #99: cisd-sp .......................... Passed 7.83 sec; Start 390: python-curve; 261/413 Test #374: dft-custom-hybrid ................ Passed 9.30 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:23524,energy,energy,23524,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,p-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35876,energy,energy,35876,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,p3-grad2 ........................ Passed 1.81 sec; Start 236: mpn-bh; 318/411 Test #262: omp3-grad1 ....................... Passed 1.81 sec; Start 399: json-schema-1-energy; 319/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.61 sec; Start 355: tu3-h2o-opt; 320/411 Test #198: freq-isotope2 .................... Passed 3.81 sec; Start 269: opt3; 321/411 Test #343: stability1 ....................... Passed 2.03 sec; Start 121: dfccdl1; 322/411 Test #283: opt-freeze-coords ................ Passed 2.68 sec; Start 311: rasci-h2o; 323/411 Test #399: json-schema-1-energy ............. Passed 1.65 sec; Start 344: dfep2-1; 324/411 Test #355: tu3-h2o-opt ...................... Passed 2.01 sec; Start 351: dft-reference; 325/411 Test #121: dfccdl1 .......................... Passed 1.29 sec; Start 224: molden2; 326/411 Test #311: rasci-h2o ........................ Passed 0.99 sec; Start 225: mom; 327/411 Test #236: mpn-bh ........................... Passed 2.74 sec; Start 397: json-v11-energy; 328/411 Test #269: opt3 ............................. Passed 2.44 sec; Start 231: mp2p5-grad1; 329/411 Test #351: dft-reference .................... Passed 2.84 sec; Start 332: scf-occ; 330/411 Test #344: dfep2-1 .......................... Passed 3.55 sec; Start 222: mints10; 331/411 Test #397: json-v11-energy .................. Passed 2.74 sec; Start 130: dfmp2-2; 332/411 Test #231: mp2p5-grad1 ...................... Passed 2.25 sec; Start 391: python-mints2; 333/411 Test #224: molden2 .......................... Passed 3.08 sec; Start 134: dfmp2-grad1; 334/411 Test #225: mom .............................. Passed 3.20 sec; Start 380: psi4numpy-cphf; 335/411 Test #332: scf-occ .......................... Passed 1.46 sec; Start 356: scf-response1; 336/411 Test #222: mints10 .......................... Passed 1.14 sec; Start 381: psi4numpy-dfmp2; 337/411 Test #130: dfmp2-2 .......................... Passed 1.52 sec; Start 271: opt5; 338/411 Test #380: psi4numpy-cphf ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:30474,energy,energy,30474,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,per (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	188 - mints9 (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:3163,energy,energy-large,3163,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['energy'],['energy-large']
Energy Efficiency,per (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:1409,energy,energy-large,1409,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['energy'],['energy-large']
Energy Efficiency,perty ..................... Passed 3.08 sec; Start 360: x2c1; 289/404 Test #180: fsapt-terms ...................... Passed 4.85 sec; Start 401: json-schema-1-orient; 290/404 Test #399: json-schema-1-energy ............. Passed 1.59 sec; Start 191: fcidump; 291/404 Test #141: dfomp2-3 ......................... Passed 1.61 sec; Start 121: dfccdl1; 292/404 Test #185: fci-h2o .......................... Passed 3.63 sec; Start 376: pywrap-align; 293/404 Test #286: props3 ........................... Passed 4.82 sec; Start 331: scf1; 294/404 Test #184: fci-dipole ....................... Passed 3.85 sec; Start 186: fci-h2o-2; 295/404 Test #401: json-schema-1-orient ............. Passed 1.77 sec; Start 217: mints6; 296/404 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 85: cepa0-grad1; 297/404 Test #340: soscf-large ...................... Passed 4.47 sec; Start 232: mp2p5-grad2; 298/404 Test #191: fcidump .......................... Passed 3.01 sec; Start 397: json-v11-energy; 299/404 Test #85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; Start 179: fsapt2; 301/404 Test #376: pywrap-align ..................... Passed 3.31 sec; Start 251: omp2-grad1; 302/404 Test #331: scf1 ............................. Passed 3.71 sec; Start 246: omp2-1; 303/404 Test #397: json-v11-energy .................. Passed 1.92 sec; Start 134: dfmp2-grad1; 304/404 Test #360: x2c1 ............................. Passed 6.36 sec; Start 284: props1; 305/404 Test #234: mp3-grad2 ........................ Passed 1.82 sec; Start 344: dfep2-1; 306/404 Test #186: fci-h2o-2 ........................ Passed 4.01 sec; Start 117: dfcasscf-sa-sp; 307/404 Test #251: omp2-grad1 ....................... Passed 1.70 sec; Start 225: mom; 308/404 Test #246: omp2-1 ........................... Passed 1.37 sec; Start 352: stability2; 309/404 Test #134: dfmp2-grad1 ...................... Passed 1.57 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:27702,energy,energy,27702,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,"phan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, time taken: 250.7947356943041 seconds.; Valine energy: -401.1469758245755 Hartrees, time",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2969,energy,energy,2969,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"plain won't load the basis file. I think some extra checks get turned on during the conda build. Hence [this knowledge](http://psicode.org/psi4manual/master/manage_git.html#how-to-locate-non-ascii-characters-in-the-codebase). Agree that it'd be nice to allow non-ascii. And probably much easier now that we're py3-only. I just haven't investigated the codecs stuff. ```; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 859, in construct; names[index] = parser.load_file(fullfilename); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasissetparser.py"", line 78, in load_file; contents = infile.readlines(); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.6/encodings/ascii.py"", line 26, in decode; return codecs.ascii_decode(input, self.errors)[0]. UnicodeDecodeError: 'ascii' codec can't decode byte 0xce in position 169: ordinal not in range(128); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 3.43 sec; ----------------------------------------------------------; Test Failed.; ""cbs-xtpl-energy"" end time: Nov 27 14:59 EST; ""cbs-xtpl-energy"" time elapsed: 00:00:03; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119:1481,energy,energy,1481,https://psicode.org,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119,2,['energy'],['energy']
Energy Efficiency,"procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasiri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:2897,energy,energy,2897,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1706,energy,energy,1706,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,psi4numpy-rhf-gradient; 373/412 Test #97: cisd-h2o-clpse ................... Passed 5.09 sec; Start 381: psi4numpy-cphf; 374/412 Test #331: scf-bs ........................... Passed 2.43 sec; Start 405: json-schema-1-properties; 375/412 Test #222: mints9 ........................... Passed 2.16 sec; Start 399: json-v11-gradient; 376/412 Test #404: json-schema-1-gradient ........... Passed 2.15 sec; Start 397: python-memdfjk; 377/412 Test #354: tu1-h2o-energy ................... Passed 1.49 sec; Start 401: json-schema-1-ghost; 378/412 Test #223: mints10 .......................... Passed 1.74 sec; Start 379: mints12; 379/412 Test #103: decontract ....................... Passed 1.22 sec; Start 310: pywrap-molecule; 380/412 Test #396: python-mints13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Test #215: mints3 ........................... Passed 1.10 sec; Start 335: scf3; 382/412 Test #411: skeletonsointegrals .............. Passed 1.45 sec; Start 212: mcscf3; 383/412 Test #355: tu2-ch2-energy ................... Passed 1.26 sec; Start 217: mints5; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.45 sec; Start 210: mcscf1; 385/412 Test #405: json-schema-1-properties ......... Passed 1.24 sec; Start 383: psi4numpy-rhf; 386/412 Test #221: mints-helper ..................... Passed 1.60 sec; Start 240: numpy-array-interface; 387/412 Test #399: json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:36071,energy,energy,36071,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,psithon2 ......................... Passed 19.59 sec; Start 5: casscf-sa-sp; 213/412 Test #170: dft-vv10 ......................... Passed 19.83 sec; Start 90: cepa3; 214/412 Test #154: dft-grad-lr1 ..................... Passed 18.31 sec; Start 341: soscf-large; 215/412 Test #177: extern1 .......................... Passed 20.99 sec; Start 91: cepa1; 216/412 Test #302: pywrap-basis ..................... Passed 19.87 sec; Start 339: scf7; 217/412 Test #325: sapt8 ............................ Passed 17.72 sec; Start 267: opt1-fd; 218/412 Test #202: fnocc3 ........................... Passed 27.34 sec; Start 165: dft-grad1; 219/412 Test #200: fnocc1 ........................... Passed 25.83 sec; Start 367: dft-smoke; 220/412 Test #248: omp2-2 ........................... Passed 27.95 sec; Start 286: props2; 221/412 Test #110: dcft3 ............................ Passed 28.17 sec; Start 351: dft-custom; 222/412 Test #292: psimrcc-fd-freq1 ................. Passed 25.26 sec; Start 14: cbs-xtpl-energy; 223/412 Test #219: mints8 ........................... Passed 17.04 sec; Start 287: props3; 224/412 Test #144: dfomp2-grad1 ..................... Passed 28.18 sec; Start 358: tu4-h2o-freq; 225/412 Test #341: soscf-large ...................... Passed 16.00 sec; Start 342: soscf-ref; 226/412 Test #91: cepa1 ............................ Passed 13.12 sec; Start 242: ocepa-grad1; 227/412 Test #90: cepa3 ............................ Passed 17.62 sec; Start 198: freq-isotope1; 228/412 Test #5: casscf-sa-sp ..................... Passed 18.78 sec; Start 369: scf-freq1; 229/412 Test #267: opt1-fd .......................... Passed 10.29 sec; Start 218: mints6; 230/412 Test #339: scf7 ............................. Passed 13.56 sec; Start 89: cepa2; 231/412 Test #165: dft-grad1 ........................ Passed 14.67 sec; Start 373: dft-custom-hybrid; 232/412 Test #286: props2 ........................... Passed 14.02 sec; Start 269: opt2-fd; 233/412 Test #351: dft-custom ....................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:20916,energy,energy,20916,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,pt2 ........................... Passed 5.43 sec; Start 86: cepa0-grad1; 350/413 Test #363: x2c2 ............................. Passed 3.08 sec; Start 216: mints3; 351/413 Test #259: omp3-1 ........................... Passed 4.13 sec; Start 224: mints10; 352/413 Test #358: scf-response1 .................... Passed 2.49 sec; Start 355: tu1-h2o-energy; 353/413 Test #271: opt3 ............................. Passed 4.85 sec; Start 335: scf2; 354/413 Test #346: dfep2-1 .......................... Passed 4.12 sec; Start 190: fci-tdm; 355/413 Test #353: dft-reference .................... Passed 3.89 sec; Start 223: mints9; 356/413 Test #104: decontract ....................... Passed 1.73 sec; Start 222: mints-helper; 357/413 Test #312: rasci-c2-active .................. Passed 5.46 sec; Start 354: stability2; 358/413 Test #216: mints3 ........................... Passed 1.18 sec; Start 97: cisd-h2o-clpse; 359/413 Test #364: x2c3 ............................. Passed 2.31 sec; Start 173: dft2; 360/413 Test #355: tu1-h2o-energy ................... Passed 1.87 sec; Start 336: scf3; 361/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 2.49 sec; Start 138: dfmp2-grad3; 362/413 Test #224: mints10 .......................... Passed 2.36 sec; Start 334: scf-occ; 363/413 Test #190: fci-tdm .......................... Passed 1.95 sec; Start 345: stability1; 364/413 Test #331: scf-guess-read2 .................. Passed 7.29 sec; Start 351: sapt-sf1; 365/413 Test #223: mints9 ........................... Passed 2.00 sec; Start 121: dfcasscf-sp; 366/413 Test #222: mints-helper ..................... Passed 1.96 sec; Start 347: dfep2-2; 367/413 Test #336: scf3 ............................. Passed 1.57 sec; Start 300: pubchem2; 368/413 Test #354: stability2 ....................... Passed 2.80 sec; Start 356: tu2-ch2-energy; 369/413 Test #335: scf2 ............................. Passed 3.39 sec; Start 290: psimrcc-ccsd_t-2; 370/413 Test #97: cisd-h2o-clpse ................... Passed 2.89 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:33908,energy,energy,33908,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['energy'],['energy']
Energy Efficiency,"pted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:1759,energy,energy,1759,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,2,['energy'],['energy']
Energy Efficiency,"puts.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1369,energy,energy,1369,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"py as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3331,energy,energy,3331,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459],; 'mass_numbers': [16, 1, 1],; 'masses': [15.99491461957,; 1.00782503223,; 1.00782503223],; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'H2O',; 'provenance': {'creator': 'QCElemental',; 'routine': 'qcelemental.molparse.from_string',; 'version': 'v0.24.0'},; 'real': [True, True, True],; 'schema_name': 'qcschema_molecule',; 'schema_version': 2,; 'symbols': ['O', 'H', 'H'],; 'validated': True},; 'provenance': {'cpu': 'Intel(R) Xeon(R) CPU E7-4870 v2 @ '; '2.30GHz',; 'creator': 'QCEngine',; 'hostname': 'nod10',; 'qcengin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:2329,energy,energy,2329,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,2,['energy'],['energy']
Energy Efficiency,"py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <mo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:9139,energy,energy,9139,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsigned long, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:1260; #5 0x7f70036313d9 in std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11761,allocate,allocate,11761,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['allocate'],['allocate']
Energy Efficiency,q ......................... Passed 26.06 sec; Start 208: ghosts; 177/413 Test #140: dfmp2-grad5 ...................... Passed 24.69 sec; Start 203: fnocc3; 178/413 Test #66: cc48 ............................. Passed 68.80 sec; Start 175: dft-omega; 179/413 Test #377: pywrap-bfs ....................... Passed 24.36 sec; Start 328: scf-ecp; 180/413 Test #16: cbs-xtpl-gradient ................ Passed 38.52 sec; Start 394: python-cc54; 181/413 Test #84: cdomp2-1 ......................... Passed 18.22 sec; Start 393: python-mints2; 182/413 Test #204: fnocc4 ........................... Passed 31.42 sec; Start 256: omp2p5-2; 183/413 Test #393: python-mints2 .................... Passed 3.14 sec; Start 397: python-mints13; 184/413 Test #274: opt6 ............................. Passed 28.70 sec; Start 24: cc12; 185/413 Test #397: python-mints13 ................... Passed 2.00 sec; Start 201: fnocc1; 186/413 Test #1: adc1 ............................. Passed 26.39 sec; Start 399: json-v11-energy; 187/413 Test #399: json-v11-energy .................. Passed 5.20 sec; Start 381: cc-module; 188/413 Test #130: dfccsdat1 ........................ Passed 40.48 sec; Start 392: python-mints9; 189/413 Test #392: python-mints9 .................... Passed 2.37 sec; Start 400: json-v11-gradient; 190/413 Test #400: json-v11-gradient ................ Passed 2.12 sec; Start 240: nbody-intermediates; 191/413 Test #208: ghosts ........................... Passed 33.10 sec; Start 145: dfomp2-grad1; 192/413 Test #175: dft-omega ........................ Passed 28.98 sec; Start 390: python-curve; 193/413 Test #203: fnocc3 ........................... Passed 33.21 sec; Start 398: python-memdfjk; 194/413 Test #398: python-memdfjk ................... Passed 1.05 sec; Start 73: cc54; 195/413 Test #328: scf-ecp .......................... Passed 32.66 sec; Start 174: dft3; 196/413 Test #390: python-curve ..................... Passed 4.05 sec; Start 179: extern2; 197/413 Test #256: omp2p5-2 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:17581,energy,energy,17581,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,2,['energy'],['energy']
Energy Efficiency,"r 14: -2058.71254091207129 -4.36049e-03 2.19998e-04 DIIS; @RHF iter 15: -2058.71333247888015 -7.91567e-04 1.06203e-04 DIIS; @RHF iter 16: -2058.71385812449535 -5.25646e-04 7.34977e-05 DIIS; @RHF iter 17: -2058.71419440133604 -3.36277e-04 6.51060e-05 DIIS; @RHF iter 18: -2058.71480929891686 -6.14898e-04 5.06877e-05 DIIS; @RHF iter 19: -2058.71557380138074 -7.64502e-04 2.56577e-05 DIIS; @RHF iter 20: -2058.71570264423553 -1.28843e-04 1.10771e-05 DIIS; @RHF iter 21: -2058.71571795960836 -1.53154e-05 6.56999e-06 DIIS; @RHF iter 22: -2058.71572010000091 -2.14039e-06 4.19181e-06 DIIS; @RHF iter 23: -2058.71572133933978 -1.23934e-06 2.84272e-06 DIIS; @RHF iter 24: -2058.71572216216646 -8.22827e-07 1.46190e-06 DIIS; @RHF iter 25: -2058.71572235289977 -1.90733e-07 6.37553e-07 DIIS; Energy converged.; ```; After:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -2027.61462571415450 -2.02761e+03 0.00000e+00 ; @RHF iter 1: -2047.54782267664223 -1.99332e+01 3.19491e-02 ; @RHF iter 2: -1955.99273532148004 9.15551e+01 6.70510e-02 DIIS; @RHF iter 3: -2057.53819937519893 -1.01545e+02 9.02846e-03 DIIS; @RHF iter 4: -2058.54743414181848 -1.00923e+00 4.31560e-03 DIIS; @RHF iter 5: -2058.67427146292175 -1.26837e-01 1.67738e-03 DIIS; @RHF iter 6: -2058.68592550112453 -1.16540e-02 1.96127e-03 DIIS; @RHF iter 7: -2058.71313050125491 -2.72050e-02 2.22231e-04 DIIS; @RHF iter 8: -2058.71421043177043 -1.07993e-03 1.00804e-04 DIIS; @RHF iter 9: -2058.71444510627452 -2.34675e-04 6.14040e-05 DIIS; @RHF iter 10: -2058.71464094420026 -1.95838e-04 5.39836e-05 DIIS; @RHF iter 11: -2058.71503691077487 -3.95967e-04 4.33684e-05 DIIS; @RHF iter 12: -2058.71567587119080 -6.38960e-04 2.33421e-05 DIIS; @RHF iter 13: -2058.71571904189250 -4.31707e-05 1.03865e-05 DIIS; @RHF iter 14: -2058.71572200714991 -2.96526e-06 2.57224e-06 DIIS; @RHF iter 15: -2058.71572223280782 -2.25658e-07 1.24361e-06 DIIS; @RHF iter 16: -2058.71572229988578 -6.70780e-08 7.90670e-07 DIIS; Energy converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309:4219,Energy,Energy,4219,https://psicode.org,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309,1,['Energy'],['Energy']
Energy Efficiency,"r of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using Symmetric Orthogonalization.; > SCF Guess: Core (One-Electron) Hamiltonian.; > ; > ==> Iterations <==; > ; > ```; > Total Energy Delta E RMS |[F,P]|; > ```; > ; > @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02; > @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; > @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; > @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; > @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; > @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; > @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; > @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1.17738e-03 DIIS; > @DF-RHF iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; > @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; > @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; > @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; > @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; > @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; > @D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:7832,Energy,Energy,7832,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Energy'],['Energy']
Energy Efficiency,"r or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent, but its effects on COM, inertial frame, symmetry, etc. would need to be probed. Or maybe our moments of inertia are even n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:1155,charge,charge,1155,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['charge'],['charge']
Energy Efficiency,"r/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - FNO-DF-CCSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:7458,energy,energy,7458,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,rad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	335 - dftd3-energy (Failed); 	336 - dftd3-grad (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:2885,energy,energy,2885,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['energy'],['energy']
Energy Efficiency,rad2 ................... Passed 15.20 sec; Start 61: cc44; 73/411 Test #292: psimrcc-fd-freq2 ................. Passed 62.74 sec; Start 204: frac-ip-fitting; 74/411 Test #104: dcft-grad2 ....................... Passed 16.24 sec; Start 144: dfomp2-grad2; 75/411 Test #74: cc5a ............................. Passed 46.64 sec; Start 11: cbs-delta-energy; 76/411 Test #144: dfomp2-grad2 ..................... Passed 11.68 sec; Start 26: cc13b; 77/411 Test #167: dft-b3lyp ........................ Passed 64.40 sec; Start 244: ocepa2; 78/411 Test #26: cc13b ............................ Passed 16.81 sec; Start 250: omp2-5; 79/411 Test #317: sapt3 ............................ Passed 72.42 sec; Start 230: mp2-module; 80/411 Test #61: cc44 ............................. Passed 45.71 sec; Start 151: dfomp2p5-2; 81/411 Test #250: omp2-5 ........................... Passed 18.02 sec; Start 19: cbs-xtpl-wrapper; 82/411 Test #151: dfomp2p5-2 ....................... Passed 12.10 sec; Start 147: dfomp3-2; 83/411 Test #11: cbs-delta-energy ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed 17.75 sec; Start 313: rasscf-sp; 93/411 Test #17: cbs-xtpl-opt ..................... Passed 43.78,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:7866,energy,energy,7866,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,rad5 ...................... Passed 9.49 sec; Start 324: sapt8; 207/411 Test #169: dft-vv10 ......................... Passed 13.69 sec; Start 366: dft-smoke; 208/411 Test #282: opt-irc-3 ........................ Passed 14.84 sec; Start 128: dfccsdat1; 209/411 Test #128: dfccsdat1 ........................ Passed 2.98 sec; Start 164: dft-grad1; 210/411 Test #200: fnocc2 ........................... Passed 11.20 sec; Start 340: soscf-large; 211/411 Test #238: nbody-intermediates .............. Passed 11.06 sec; Start 286: props3; 212/411 Test #218: mints8 ........................... Passed 14.21 sec; Start 194: fd-freq-gradient; 213/411 Test #324: sapt8 ............................ Passed 12.21 sec; Start 335: scf4; 214/411 Test #366: dft-smoke ........................ Passed 11.20 sec; Start 207: gibbs; 215/411 Test #164: dft-grad1 ........................ Passed 13.20 sec; Start 5: casscf-sa-sp; 216/411 Test #335: scf4 ............................. Passed 6.98 sec; Start 14: cbs-xtpl-energy; 217/411 Test #286: props3 ........................... Passed 12.80 sec; Start 372: dft-custom-hybrid; 218/411 Test #340: soscf-large ...................... Passed 14.19 sec; Start 275: opt9; 219/411 Test #194: fd-freq-gradient ................. Passed 12.13 sec; Start 133: dfmp2-ecp; 220/411 Test #207: gibbs ............................ Passed 11.18 sec; Start 23: cc12; 221/411 Test #5: casscf-sa-sp ..................... Passed 7.38 sec; Start 217: mints6; 222/411 Test #23: cc12 ............................. Passed 3.81 sec; Start 368: scf-freq1; 223/411 Test #372: dft-custom-hybrid ................ Passed 8.36 sec; Start 369: dft-jk; 224/411 Test #14: cbs-xtpl-energy .................. Passed 8.78 sec; Start 296: psithon2; 225/411 Test #275: opt9 ............................. Passed 9.31 sec; Start 122: dfccd-grad1; 226/411 Test #133: dfmp2-ecp ........................ Passed 10.55 sec; Start 154: dfrasscf-sp; 227/411 Test #122: dfccd-grad1 ...................... Passed 2.71 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:20128,energy,energy,20128,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,"ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > *",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1185,energy,energy,1185,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,1,['energy'],['energy']
Energy Efficiency,rap-basis ..................... Passed 19.14 sec; Start 341: soscf-large; 222/412 Test #5: casscf-sa-sp ..................... Passed 20.61 sec; Start 90: cepa3; 223/412 Test #325: sapt8 ............................ Passed 26.16 sec; Start 367: dft-smoke; 224/412 Test #166: dft-grad2 ........................ Passed 31.09 sec; Start 339: scf7; 225/412 Test #154: dft-grad-lr1 ..................... Passed 28.99 sec; Start 165: dft-grad1; 226/412 Test #219: mints8 ........................... Passed 25.77 sec; Start 351: dft-custom; 227/412 Test #341: soscf-large ...................... Passed 25.12 sec; Start 287: props3; 228/412 Test #90: cepa3 ............................ Passed 12.62 sec; Start 286: props2; 229/412 Test #339: scf7 ............................. Passed 18.98 sec; Start 198: freq-isotope1; 230/412 Test #367: dft-smoke ........................ Passed 21.68 sec; Start 218: mints6; 231/412 Test #165: dft-grad1 ........................ Passed 25.39 sec; Start 14: cbs-xtpl-energy; 232/412 Test #351: dft-custom ....................... Passed 23.35 sec; Start 358: tu4-h2o-freq; 233/412 Test #286: props2 ........................... Passed 22.38 sec; Start 267: opt1-fd; 234/412 Test #287: props3 ........................... Passed 24.71 sec; Start 373: dft-custom-hybrid; 235/412 Test #198: freq-isotope1 .................... Passed 15.05 sec; Start 369: scf-freq1; 236/412 Test #179: fsapt1 ........................... Passed 2074.68 sec; Start 91: cepa1; 237/412 Test #218: mints6 ........................... Passed 20.79 sec; Start 269: opt2-fd; 238/412 Test #14: cbs-xtpl-energy .................. Passed 21.79 sec; Start 342: soscf-ref; 239/412 Test #267: opt1-fd .......................... Passed 19.24 sec; Start 370: dft-jk; 240/412 Test #358: tu4-h2o-freq ..................... Passed 20.68 sec; Start 394: python-3-index-transforms; 241/412 Test #369: scf-freq1 ........................ Passed 20.20 sec; Start 102: cubeprop; 242/412 Test #373: dft-custom-hybrid ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:21557,energy,energy,21557,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,rap-basis ..................... Passed 21.14 sec; Start 49: cc33; 194/411 Test #303: pywrap-checkrun-convcrit ......... Passed 44.50 sec; Start 164: dft-grad1; 195/411 Test #146: dfomp3-1 ......................... Passed 27.79 sec; Start 248: omp2-3; 196/411 Test #340: soscf-large ...................... Passed 15.12 sec; Start 138: dfmp2-grad5; 197/411 Test #275: opt9 ............................. Passed 29.14 sec; Start 350: dft-custom; 198/411 Test #80: cc8c ............................. Passed 57.00 sec; Start 286: props3; 199/411 Test #366: dft-smoke ........................ Passed 20.42 sec; Start 14: cbs-xtpl-energy; 200/411 Test #54: cc38 ............................. Passed 43.19 sec; Start 258: omp3-2; 201/411 Test #5: casscf-sa-sp ..................... Passed 18.54 sec; Start 53: cc37; 202/411 Test #142: dfomp2-4 ......................... Passed 45.56 sec; Start 357: tu4-h2o-freq; 203/411 Test #148: dfomp3-grad1 ..................... Passed 28.40 sec; Start 133: dfmp2-ecp; 204/411 Test #14: cbs-xtpl-energy .................. Passed 11.68 sec; Start 105: dcft-grad3; 205/411 Test #164: dft-grad1 ........................ Passed 15.73 sec; Start 252: omp2-grad2; 206/411 Test #72: cc54 ............................. Passed 29.77 sec; Start 152: dfomp2p5-grad1; 207/411 Test #51: cc35 ............................. Passed 49.20 sec; Start 285: props2; 208/411 Test #286: props3 ........................... Passed 13.73 sec; Start 21: cc10; 209/411 Test #350: dft-custom ....................... Passed 14.96 sec; Start 217: mints6; 210/411 Test #138: dfmp2-grad5 ...................... Passed 17.05 sec; Start 3: casscf-fzc-sp; 211/411 Test #22: cc11 ............................. Passed 34.28 sec; Start 150: dfomp2p5-1; 212/411 Test #248: omp2-3 ........................... Passed 23.71 sec; Start 23: cc12; 213/411 Test #357: tu4-h2o-freq ..................... Passed 14.43 sec; Start 89: cepa3; 214/411 Test #49: cc33 ............................. Passed 31.01 sec; Start 50:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:19189,energy,energy,19189,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,rasci-h2o; 366/411 Test #214: mints3 ........................... Passed 1.03 sec; Start 209: mcscf1; 367/411 Test #157: dft-grac ......................... Passed 1.79 sec; Start 220: mints-helper; 368/411 Test #222: mints10 .......................... Passed 2.06 sec; Start 405: skeleton; 369/411 Test #293: psimrcc-pt2 ...................... Passed 1.62 sec; Start 398: json-v11-gradient; 370/411 Test #353: tu1-h2o-energy ................... Passed 1.11 sec; Start 400: json-schema-1-ghost; 371/411 Test #406: skeletonaointegrals .............. Passed 1.69 sec; Start 404: json-schema-1-properties; 372/411 Test #298: pubchem2 ......................... Passed 1.36 sec; Start 309: pywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:35356,energy,energy,35356,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,"rations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:3906,Energy,Energy,3906,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,rcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35593,energy,energy,35593,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,"rd, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1576,energy,energy,1576,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,"reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3152,allocate,allocates,3152,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['allocate'],['allocates']
Energy Efficiency,"recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF-CASSCF/cc-pVDZ: Passed; 4. DFT Smoketests; - B2PLYP/cc-pVDZ: Passed; - CAM-B3LYP/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:2845,energy,energy,2845,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1741,energy,energy,1741,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,results of psi4 1.1 is this; ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~; 2 -696.23202825 -6.08e-05 2.89e-04 * 9.64e-05 o 3.98e-03 1.27e-03 o ~; 3 -696.23204984 -2.16e-05 1.78e-04 * 5.02e-05 o 2.05e-03 7.01e-04 o ~; 4 -696.23205372 -3.88e-06 1.35e-04 * 3.92e-05 o 4.27e-03 1.33e-03 o ~; 5 -696.23205950 -5.79e-06 6.65e-05 * 1.71e-05 o 9.47e-04 * 2.94e-04 o ~; ```; And; results of psi4 1.2 is this; ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~; 2 -696.23181077 1.57e-04 6.10e-02 1.83e-02 o 1.93e-02 6.09e-03 o ~; 3 -696.23126151 5.49e-04 5.77e-02 1.78e-02 o 1.93e-02 6.09e-03 o ~; 4 -696.23034152 9.20e-04 5.45e-02 1.73e-02 o 1.93e-02 6.09e-03 o ~; 	Raising dynamic level to 4. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -696,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094#issuecomment-405297422:142,Energy,Energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/1094#issuecomment-405297422,2,['Energy'],['Energy']
Energy Efficiency,"rgy: -75.98014187231389; 401: ; 401: => Energetics <=; 401: ; 401: Nuclear Repulsion Energy = 8.8014620606294294; 401: One-Electron Energy = -122.2750929709242769; 401: Two-Electron Energy = 37.4934890379809431; 401: Total Energy = -75.9801418723139079; 401: ; 401: ; 401: ; 401: Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Mulliken Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.39836 4.39836 0.00000 -0.79673; 401: 2 H 0.30082 0.30082 0.00000 0.39836; 401: 3 H 0.30082 0.30082 0.00000 0.39836; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: Lowdin Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.29726 4.29726 0.00000 -0.59451; 401: 2 H 0.35137 0.35137 0.00000 0.29726; 401: 3 H 0.35137 0.35137 0.00000 0.29726; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: ; 401: Mayer Bond Indices:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.80206409286279 0.80206409286279; 401: 2 0.80206409286279 0.00000000000000 0.00302003360260; 401: 3 0.80206409286279 0.00302003360260 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:7354,Charge,Charges,7354,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Charge'],['Charges']
Energy Efficiency,"rgy; 168/185 Test #499: python-energy .................... Passed 2.39 sec; Start 500: python-curve; 169/185 Test #500: python-curve ..................... Passed 3.30 sec; Start 502: python-mints9; 170/185 Test #502: python-mints9 .................... Passed 2.66 sec; Start 503: python-mints2; 171/185 Test #503: python-mints2 .................... Passed 3.51 sec; Start 504: python-cc54; 172/185 Test #504: python-cc54 ...................... Passed 9.24 sec; Start 505: python-3-index-transforms; 173/185 Test #505: python-3-index-transforms ........ Passed 56.49 sec; Start 506: python-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/185 Test #510: json-schema-1-energy ............. Passed 3.74 sec; Start 514: json-schema-1-gradient; 179/185 Test #514: json-schema-1-gradient ........... Passed 2.98 sec; Start 518: dftd3-energy; 180/185 Test #518: dftd3-energy ..................... Passed 50.87 sec; Start 523: sapt0-d; 181/185 Test #523: sapt0-d .......................... Passed 440.00 sec; Start 524: fsapt-d; 182/185 Test #524: fsapt-d .......................... Passed 542.90 sec; Start 525: fsaptd-terms; 183/185 Test #525: fsaptd-terms .....................***Failed 17.57 sec; Start 526: dftd4-energy; 184/185 Test #526: dftd4-energy ..................... Passed 129.00 sec; Start 527: dftd4-r2scan; 185/185 Test #527: dftd4-r2scan .....................***Failed 9.40 sec. 95% tests passed, 9 tests failed out of 185. Label Time Summary:; addon = 189.28 sec*proc (3 tests); cart = 2407.47 sec*proc (55 tests); cas = 138.78 sec*proc (1 test); casscf = 84.46 sec*proc (11 tests); cbs = 262.77 sec*proc (9 tests); cc = 77",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:16730,energy,energy,16730,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,"rid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3013,energy,energy,3013,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,['energy'],['energy']
Energy Efficiency,"rminants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:2022,ENERGY,ENERGY,2022,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"rn_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_16",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4036,energy,energy,4036,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 18.93 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 0.79 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 2.00 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.09 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.55 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.65 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.32 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.08 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.10 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 1.17 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:36687,energy,energy,36687,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy']
Energy Efficiency,rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 33.29 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 1.08 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.15 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 1.84 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.49 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.45 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.90 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.11 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 0.98 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:36716,energy,energy,36716,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy']
Energy Efficiency,"rom full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphson SCF and trust region SCF. These are bound to give you a local solution, but they are 1) unreliable and 2) slow in the initial phases of the calculation. It is better to do first some ADIIS/EDIIS to get you to a reasonable solution, and only then start refining it with something fancier. Also GDM is a great solution for the initial phase of the calculation, since as you have a **guarantee** that you are t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:4319,energy,energy,4319,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['energy'],['energy']
Energy Efficiency,"root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: BLYP <=. BLYP GGA Exchange-Correlation Functional. P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994; B. Miehlich et. al., Chem. Phys. Lett., 157(3), 200-206 1989. Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_GGA_X_B88. => Correlation Functionals <=. 1.0000 XC_GGA_C_LYP. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. ------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:9591,Energy,Energy,9591,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: FT97 <=. FT97 GGA Exchange-Correlation Functional. M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997. Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_GGA_X_FT97_B. => Correlation Functionals <=. 1.0000 XC_GGA_C_FT97. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:14625,Energy,Energy,14625,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: PBE <=. PBE GGA Exchange-Correlation Functional. J.P. Perdew et. al., Phys. Rev. Lett., 77(18), 3865-3868, 1996. Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_GGA_X_PBE. => Correlation Functionals <=. 1.0000 XC_GGA_C_PBE. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Nd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:4683,Energy,Energy,4683,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"rote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1196,Energy,Energy,1196,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"round state energy at bond length {bond_length}: {str(e)}""); return float('nan'). def compute_energies(bond_length, num_states, methods_to_try):; psi4.core.set_output_file('output.dat', False); ; cf_molecule = psi4.geometry(f""""""; 0 2; C; F 1 {bond_length}; symmetry c1; units angstrom; """"""). psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bond_length}: {str(e)}""); energies = {method: {state: [float('nan')] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [None] for state in range(1, num_states + 1)} for method in methods_to_try}. return energies, wfns. def generate_potential_energy_curves():; bond_lengths = np.arange(1.0, 10.2, 0.2); num_states = 6; methods_to_try = ['EOM-CCSD', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:1775,energy,energy,1775,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['energy'],['energy']
Energy Efficiency,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:19,energy,energy,19,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968,1,['energy'],['energy']
Energy Efficiency,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1670,energy,energy,1670,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,6,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,rt ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020614 -0.000351117946; @IRC 2 -148.751921813072 -0.001007792458; @IRC 3 -148.753458618806 -0.001536805734; @IRC 4 -148.755338546954 -0.001879928149; @IRC 5 -148.757353153393 -0.002014606439; @IRC 6 -148.759306859244 -0.001953705851; @IRC 7 -148.761045994807 -0.001739135563; @IRC 8 -148.762474848960 -0.001428854153; @IRC 9 -148.763557315823 -0.001082466863; @IRC 10 -148.764306952777 -0.000749636954; @IRC 11 -148.764771569804 -0.000464617027; @IRC 12 -148.765017199652 -0.000245629848; @IRC 13 -148.765113811017 -0.000096611365; @IRC 14 -148.765113820352 -0.000000009335; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC -------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:4141,Energy,Energy,4141,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,rt 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1497,energy,energy,1497,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"rt(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; > ; > # 6 -139.557392223903 -0.000000583166 0.00004140 0.00002031 0.00028542 0.00012144 ~; > ; > # 7 -139.557392234146 -0.000000010243 0.00001186 0.00000566 0.00004411 0.00002377 ~; > ; > # 8 -139.557392234594 -0.000000000448 0.00000420 0.00000194 0.00001643 0.00000834 ~; > ; > # 9 -139.557392234645 -0.000000000051 0.00000176 0.00000074 0.00000686 0.00000306 ~; > ; > # 10 -139.557392",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:5197,Energy,Energy,5197,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['Energy'],['Energy']
Energy Efficiency,"rted on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_R",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2551,charge,charge,2551,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['charge'],['charge']
Energy Efficiency,rve; 382/411 Test #388: python-curve ..................... Passed 3.62 sec; Start 389: python-pubchem; 383/411 Test #359: tu6-cp-ne2 ....................... Passed 242.76 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.79 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 171.61 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 9.10 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.85 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.02 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.88 sec; Start 398: json-v11-gradient; 391/411 Test #398: json-v11-gradient ................ Passed 1.67 sec; Start 399: json-schema-1-energy; 392/411 Test #392: python-cc54 ...................... Passed 26.83 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.29 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 2.53 sec; Start 402: json-schema-1-throws; 395/411 Test #399: json-schema-1-energy ............. Passed 4.07 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.62 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.92 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.48 sec; Start 406: skeletonaointegrals; 399/411 Test #405: skeleton ......................... Passed 1.51 sec; Start 407: skeletondfmp2; 400/411 Test #406: skeletonaointegrals .............. Passed 1.67 sec; Start 408: skeletonmointegrals; 401/411 Test #407: skeletondfmp2 .................... Passed 1.70 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:36585,energy,energy,36585,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['energy'],['energy']
Energy Efficiency,"s on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of its; > self-imposed symmetry constraints.; >; > —; > You are receiving this because you are su",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:1719,energy,energy,1719,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"s over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13585,energy,energy,13585,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"s row/noble atom, -2 does; the next-previous row, etc. .... It seems to me that the only time we ever; want to do -2 is for specific elements, never for all atoms in an entire; molecule). I suppose also providing NUM_FROZEN_DOCC doesn't work because it would need; to be different for fragment A than Fragment B. On Fri, Oct 2, 2020 at 3:13 AM Holger Kruse <notifications@github.com>; wrote:. > The following input, given to me via email, gives a 'bad' dMP2 correction; > for SAPT:; >; > delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; > delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; >; > molecule {; > 0 1; > F 0.00000000 0.00000000 2.96216000; > I 0.00000000 0.00000000 0.96704400; > --; > 0 1; > C 0.00000000 0.00000000 -2.52999200; > N 0.00000000 0.00000000 -1.35165800; > Na 0.00000000 0.00000000 -4.84283500; > units angstrom; > no_reorient; > symmetry c1; > }; > memory 20 GiB; > set {; > basis def2-TZVP; > freeze_core true; > }; > energy('sapt2+dMP2'); > energy('mp2',bsse_type=['nocp']); >; > The issue is reproducible for MP2/CCSD post-SCF methods. It is not; > directly DF nor ghost atom related. (besides a possibly small error due; > to #1968 <https://github.com/psi4/psi4/issues/1968>). And not a module; > specific issue.; >; > Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no; > rel. effects.) with global FC=on seems to give 'better' results in the; > sense that MP2 interaction energy is negative.; >; > One, and perhaps only, issue is frozen_core.; > Turning FC = off only for the supermolecular MP2 part gives OK results.; > For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is; > freezing only 3.; > At least for this case, freezing the Ne-shell by default for Na is not a; > good choice.; >; > Tagging @PeterKraus <https://github.com/PeterKraus>.; >; > freeze_core -2 makes the SAPT part crash because sth goes wrong for the IF; > fragment (fragment A):; >; > FOCC A =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354:1569,energy,energy,1569,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354,2,['energy'],['energy']
Energy Efficiency,"s); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3979,energy,energy,3979,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,s-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:35748,energy,energy,35748,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,2,['energy'],['energy']
Energy Efficiency,"s.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4536,energy,energy,4536,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['energy'],['energy']
Energy Efficiency,"s/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; -------------------------------------------------------; Total 46 46 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:3175,Energy,Energy,3175,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,s2 .................... Passed 2.70 sec; Start 221: mints9; 344/411 Test #96: cisd-h2o-clpse ................... Passed 1.71 sec; Start 345: dfep2-2; 345/411 Test #401: json-schema-1-orient ............. Passed 1.68 sec; Start 327: scf-guess-read1; 346/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.45 sec; Start 8: castup1; 347/411 Test #397: json-v11-energy .................. Passed 2.46 sec; Start 330: scf-bs; 348/411 Test #233: mp3-grad1 ........................ Passed 1.92 sec; Start 160: dft-grac; 349/411 Test #311: rasci-h2o ........................ Passed 1.24 sec; Start 390: python-mints9; 350/411 Test #352: stability2 ....................... Passed 1.55 sec; Start 288: psimrcc-ccsd_t-2; 351/411 Test #362: x2c3 ............................. Passed 2.02 sec; Start 395: python-mints13; 352/411 Test #361: x2c2 ............................. Passed 1.93 sec; Start 405: skeleton; 353/411 Test #407: skeletondfmp2 .................... Passed 1.57 sec; Start 387: python-energy; 354/411 Test #213: mints2 ........................... Passed 2.49 sec; Start 333: scf2; 355/411 Test #356: scf-response1 .................... Passed 2.51 sec; Start 298: pubchem2; 356/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.78 sec; Start 287: psimrcc-ccsd_t-1; 357/411 Test #330: scf-bs ........................... Passed 1.15 sec; Start 210: mcscf2; 358/411 Test #8: castup1 .......................... Passed 1.48 sec; Start 102: decontract; 359/411 Test #387: python-energy .................... Passed 0.97 sec; Start 380: psi4numpy-cphf; 360/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 383: psi4numpy-rhf-gradient; 361/411 Test #405: skeleton ......................... Passed 1.14 sec; Start 222: mints10; 362/411 Test #327: scf-guess-read1 .................. Passed 1.74 sec; Start 403: json-schema-1-gradient; 363/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.44 sec; Start 406: skeletonaointegrals; 364/411 Test #345: dfep2-2 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:33221,energy,energy,33221,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy']
Energy Efficiency,s8; 202/411 Test #350: dft-custom ....................... Passed 11.78 sec; Start 7: casscf-sp; 203/411 Test #146: dfomp3-1 ......................... Passed 7.10 sec; Start 122: dfccd-grad1; 204/411 Test #282: opt-irc-3 ........................ Passed 16.36 sec; Start 62: cc45; 205/411 Test #194: fd-freq-gradient ................. Passed 12.91 sec; Start 286: props3; 206/411 Test #122: dfccd-grad1 ...................... Passed 3.71 sec; Start 22: cc11; 207/411 Test #238: nbody-intermediates .............. Passed 13.02 sec; Start 148: dfomp3-grad1; 208/411 Test #62: cc45 ............................. Passed 4.96 sec; Start 53: cc37; 209/411 Test #7: casscf-sp ........................ Passed 7.89 sec; Start 164: dft-grad1; 210/411 Test #301: pywrap-basis ..................... Passed 13.12 sec; Start 338: scf7; 211/411 Test #53: cc37 ............................. Passed 3.24 sec; Start 89: cepa3; 212/411 Test #218: mints8 ........................... Passed 15.41 sec; Start 14: cbs-xtpl-energy; 213/411 Test #22: cc11 ............................. Passed 6.65 sec; Start 366: dft-smoke; 214/411 Test #148: dfomp3-grad1 ..................... Passed 9.29 sec; Start 324: sapt8; 215/411 Test #286: props3 ........................... Passed 12.45 sec; Start 5: casscf-sa-sp; 216/411 Test #338: scf7 ............................. Passed 11.10 sec; Start 357: tu4-h2o-freq; 217/411 Test #89: cepa3 ............................ Passed 8.51 sec; Start 21: cc10; 218/411 Test #164: dft-grad1 ........................ Passed 14.27 sec; Start 275: opt9; 219/411 Test #14: cbs-xtpl-energy .................. Passed 10.47 sec; Start 254: omp2p5-2; 220/411 Test #21: cc10 ............................. Passed 5.53 sec; Start 52: cc36; 221/411 Test #366: dft-smoke ........................ Passed 13.99 sec; Start 133: dfmp2-ecp; 222/411 Test #5: casscf-sa-sp ..................... Passed 9.71 sec; Start 83: cdomp2-1; 223/411 Test #357: tu4-h2o-freq ..................... Passed 9.81 sec; Start 217: mint,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:19835,energy,energy,19835,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,"s_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; Energy and wave function converged. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:1545,Energy,Energy,1545,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676,2,['Energy'],['Energy']
Energy Efficiency,sapt8 ............................ Passed 12.21 sec; Start 335: scf4; 214/411 Test #366: dft-smoke ........................ Passed 11.20 sec; Start 207: gibbs; 215/411 Test #164: dft-grad1 ........................ Passed 13.20 sec; Start 5: casscf-sa-sp; 216/411 Test #335: scf4 ............................. Passed 6.98 sec; Start 14: cbs-xtpl-energy; 217/411 Test #286: props3 ........................... Passed 12.80 sec; Start 372: dft-custom-hybrid; 218/411 Test #340: soscf-large ...................... Passed 14.19 sec; Start 275: opt9; 219/411 Test #194: fd-freq-gradient ................. Passed 12.13 sec; Start 133: dfmp2-ecp; 220/411 Test #207: gibbs ............................ Passed 11.18 sec; Start 23: cc12; 221/411 Test #5: casscf-sa-sp ..................... Passed 7.38 sec; Start 217: mints6; 222/411 Test #23: cc12 ............................. Passed 3.81 sec; Start 368: scf-freq1; 223/411 Test #372: dft-custom-hybrid ................ Passed 8.36 sec; Start 369: dft-jk; 224/411 Test #14: cbs-xtpl-energy .................. Passed 8.78 sec; Start 296: psithon2; 225/411 Test #275: opt9 ............................. Passed 9.31 sec; Start 122: dfccd-grad1; 226/411 Test #133: dfmp2-ecp ........................ Passed 10.55 sec; Start 154: dfrasscf-sp; 227/411 Test #122: dfccd-grad1 ...................... Passed 2.71 sec; Start 341: soscf-ref; 228/411 Test #154: dfrasscf-sp ...................... Passed 2.65 sec; Start 177: extern2; 229/411 Test #368: scf-freq1 ........................ Passed 7.99 sec; Start 52: cc36; 230/411 Test #217: mints6 ........................... Passed 11.46 sec; Start 176: extern1; 231/411 Test #369: dft-jk ........................... Passed 9.92 sec; Start 285: props2; 232/411 Test #341: soscf-ref ........................ Passed 6.33 sec; Start 48: cc32; 233/411 Test #296: psithon2 ......................... Passed 11.70 sec; Start 357: tu4-h2o-freq; 234/411 Test #52: cc36 ............................. Passed 5.86 sec; Start 268: opt2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:20806,energy,energy,20806,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,scf-response1 .................... Passed 2.00 sec; Start 390: python-mints9; 300/411 Test #135: dfmp2-grad2 ...................... Passed 4.42 sec; Start 127: dfccsdt1; 301/411 Test #150: dfomp2p5-1 ....................... Passed 12.90 sec; Start 221: mints9; 302/411 Test #52: cc36 ............................. Passed 8.46 sec; Start 345: dfep2-2; 303/411 Test #390: python-mints9 .................... Passed 1.77 sec; Start 83: cdomp2-1; 304/411 Test #141: dfomp2-3 ......................... Passed 3.70 sec; Start 139: dfomp2-1; 305/411 Test #137: dfmp2-grad4 ...................... Passed 4.54 sec; Start 86: cepa0-grad2; 306/411 Test #50: cc34 ............................. Passed 5.92 sec; Start 191: fcidump; 307/411 Test #122: dfccd-grad1 ...................... Passed 4.34 sec; Start 363: zaptn-nh2; 308/411 Test #127: dfccsdt1 ......................... Passed 2.37 sec; Start 232: mp2p5-grad2; 309/411 Test #345: dfep2-2 .......................... Passed 1.82 sec; Start 397: json-v11-energy; 310/411 Test #221: mints9 ........................... Passed 1.93 sec; Start 199: fnocc1; 311/411 Test #83: cdomp2-1 ......................... Passed 2.27 sec; Start 4: casscf-semi; 312/411 Test #139: dfomp2-1 ......................... Passed 2.64 sec; Start 395: python-mints13; 313/411 Test #363: zaptn-nh2 ........................ Passed 1.87 sec; Start 271: opt5; 314/411 Test #86: cepa0-grad2 ...................... Passed 3.41 sec; Start 234: mp3-grad2; 315/411 Test #395: python-mints13 ................... Passed 1.71 sec; Start 361: x2c2; 316/411 Test #397: json-v11-energy .................. Passed 2.95 sec; Start 362: x2c3; 317/411 Test #191: fcidump .......................... Passed 3.66 sec; Start 223: molden1; 318/411 Test #232: mp2p5-grad2 ...................... Passed 3.51 sec; Start 119: dfcasscf-sp; 319/411 Test #271: opt5 ............................. Passed 3.06 sec; Start 399: json-schema-1-energy; 320/411 Test #361: x2c2 ............................. Passed 1.96 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:28937,energy,energy,28937,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"screpancies seem to be within 1 Hartree when Summit is compared to local runs. I ran the compairisons for the 20 canonical amino acids (structures from `HF/6-31G*` geometry optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1026,energy,energy,1026,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,sec; Start 404: json-schema-1-properties; 381/411 Test #410: skeletonsointegrals .............. Passed 0.89 sec; Start 400: json-schema-1-ghost; 382/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.47 sec; Start 353: tu1-h2o-energy; 383/411 Test #220: mints-helper ..................... Passed 1.12 sec; Start 330: scf-bs; 384/411 Test #411: skeletonwavefunction ............. Passed 0.90 sec; Start 378: mints12; 385/411 Test #398: json-v11-gradient ................ Passed 0.97 sec; Start 349: sapt-sf1; 386/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.48 sec; Start 387: python-energy; 387/411 Test #404: json-schema-1-properties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:36609,energy,energy,36609,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,"seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2437,energy,energy,2437,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,sed 17.53 sec; Start 393: python-memdfjk; 343/401 Test #341: dfep2-2 .......................... Passed 2.51 sec; Start 347: stability2; 344/401 Test #187: fcidump .......................... Passed 6.32 sec; Start 348: tu1-h2o-energy; 345/401 Test #119: dfccd1 ........................... Passed 3.69 sec; Start 170: docs-bases; 346/401 Test #92: cisd-h2o+-0 ...................... Passed 3.19 sec; Start 326: scf-bs; 347/401 Test #207: mcscf3 ........................... Passed 1.36 sec; Start 399: json-schema_0_throws; 348/401 Test #212: mints5 ........................... Passed 1.05 sec; Start 305: pywrap-molecule; 349/401 Test #394: json-v11_energy .................. Passed 3.76 sec; Start 211: mints4; 350/401 Test #171: docs-dft ......................... Passed 0.95 sec; Start 330: scf3; 351/401 Test #392: python-mints13 ................... Passed 2.38 sec; Start 380: psi4numpy-rhf-gradient; 352/401 Test #357: x2c3 ............................. Passed 2.63 sec; Start 349: tu2-ch2-energy; 353/401 Test #133: dfmp2-grad1 ...................... Passed 3.71 sec; Start 290: psimrcc-sp1; 354/401 Test #399: json-schema_0_throws ............. Passed 0.76 sec; Start 101: decontract; 355/401 Test #211: mints4 ........................... Passed 0.73 sec; Start 379: psi4numpy-rhf; 356/401 Test #170: docs-bases ....................... Passed 0.83 sec; Start 205: mcscf1; 357/401 Test #351: scf-response1 .................... Passed 1.97 sec; Start 384: python-energy; 358/401 Test #324: scf-upcast-custom-basis .......... Passed 2.26 sec; Start 204: matrix1; 359/401 Test #323: scf-guess-read1 .................. Passed 2.16 sec; Start 235: numpy-array-interface; 360/401 Test #356: x2c2 ............................. Passed 2.85 sec; Start 359: options1; 361/401 Test #328: scf-occ .......................... Passed 3.01 sec; Start 208: mints1; 362/401 Test #247: omp2-grad1 ....................... Passed 4.60 sec; Start 284: psimrcc-ccsd_t-2; 363/401 Test #400: json-schema_0_gradient ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:33434,energy,energy,33434,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,sed 2.68 sec; Start 331: scf-bs; 361/412 Test #391: python-mints9 .................... Passed 2.06 sec; Start 222: mints9; 362/412 Test #363: x2c3 ............................. Passed 3.28 sec; Start 299: pubchem2; 363/412 Test #334: scf2 ............................. Passed 3.04 sec; Start 404: json-schema-1-gradient; 364/412 Test #382: psi4numpy-dfmp2 .................. Passed 3.35 sec; Start 396: python-mints13; 365/412 Test #211: mcscf2 ........................... Passed 3.25 sec; Start 223: mints10; 366/412 Test #161: dft-grac ......................... Passed 3.59 sec; Start 354: tu1-h2o-energy; 367/412 Test #409: skeletonmointegrals .............. Passed 4.13 sec; Start 103: decontract; 368/412 Test #362: x2c2 ............................. Passed 4.28 sec; Start 411: skeletonsointegrals; 369/412 Test #353: stability2 ....................... Passed 3.95 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.69 sec; Start 355: tu2-ch2-energy; 371/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 3.29 sec; Start 215: mints3; 372/412 Test #189: fci-tdm .......................... Passed 3.92 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #97: cisd-h2o-clpse ................... Passed 5.09 sec; Start 381: psi4numpy-cphf; 374/412 Test #331: scf-bs ........................... Passed 2.43 sec; Start 405: json-schema-1-properties; 375/412 Test #222: mints9 ........................... Passed 2.16 sec; Start 399: json-v11-gradient; 376/412 Test #404: json-schema-1-gradient ........... Passed 2.15 sec; Start 397: python-memdfjk; 377/412 Test #354: tu1-h2o-energy ................... Passed 1.49 sec; Start 401: json-schema-1-ghost; 378/412 Test #223: mints10 .......................... Passed 1.74 sec; Start 379: mints12; 379/412 Test #103: decontract ....................... Passed 1.22 sec; Start 310: pywrap-molecule; 380/412 Test #396: python-mints13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:34868,energy,energy,34868,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,sed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13640,energy,energy,13640,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,"seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference reasonable for a system as small as H2O+?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171564200.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171646769:1866,energy,energy,1866,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769,1,['energy'],['energy']
Energy Efficiency,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010136:26,Energy,Energy,26,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136,5,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,si4numpy-cphf ................... Passed 1.69 sec; Start 353: dft-reference; 343/413 Test #316: sad1 ............................. Passed 3.17 sec; Start 363: x2c2; 344/413 Test #286: props1 ........................... Passed 3.16 sec; Start 9: castup2; 345/413 Test #341: scf-property ..................... Passed 4.55 sec; Start 358: scf-response1; 346/413 Test #230: mp2-grad1 ........................ Passed 3.15 sec; Start 104: decontract; 347/413 Test #87: cepa0-grad2 ...................... Passed 5.30 sec; Start 364: x2c3; 348/413 Test #237: mp2-property ..................... Passed 4.17 sec; Start 291: psimrcc-ccsd_t-3; 349/413 Test #181: fsapt2 ........................... Passed 5.43 sec; Start 86: cepa0-grad1; 350/413 Test #363: x2c2 ............................. Passed 3.08 sec; Start 216: mints3; 351/413 Test #259: omp3-1 ........................... Passed 4.13 sec; Start 224: mints10; 352/413 Test #358: scf-response1 .................... Passed 2.49 sec; Start 355: tu1-h2o-energy; 353/413 Test #271: opt3 ............................. Passed 4.85 sec; Start 335: scf2; 354/413 Test #346: dfep2-1 .......................... Passed 4.12 sec; Start 190: fci-tdm; 355/413 Test #353: dft-reference .................... Passed 3.89 sec; Start 223: mints9; 356/413 Test #104: decontract ....................... Passed 1.73 sec; Start 222: mints-helper; 357/413 Test #312: rasci-c2-active .................. Passed 5.46 sec; Start 354: stability2; 358/413 Test #216: mints3 ........................... Passed 1.18 sec; Start 97: cisd-h2o-clpse; 359/413 Test #364: x2c3 ............................. Passed 2.31 sec; Start 173: dft2; 360/413 Test #355: tu1-h2o-energy ................... Passed 1.87 sec; Start 336: scf3; 361/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 2.49 sec; Start 138: dfmp2-grad3; 362/413 Test #224: mints10 .......................... Passed 2.36 sec; Start 334: scf-occ; 363/413 Test #190: fci-tdm .......................... Passed 1.95 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:33229,energy,energy,33229,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['energy'],['energy']
Energy Efficiency,"sion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3805,energy,energy,3805,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785,1,['energy'],['energy']
Energy Efficiency,sis $\langle ab|cd \rangle$ ); UHF Reference; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information).; @UHF iter SAD: -38.17324740294831 -3.81732e+01 0.00000e+00 ; @UHF iter 1: -38.90234369081286 -7.29096e-01 9.18281e-03 DIIS/ADIIS; @UHF iter 2: -38.91513874101264 -1.27951e-02 2.96594e-03 DIIS/ADIIS; @UHF iter 3: -38.91704192221893 -1.90318e-03 9.12227e-04 DIIS/ADIIS; @UHF iter 4: -38.91728769227936 -2.45770e-04 4.46390e-04 DIIS/ADIIS; @UHF iter 5: -38.91736714064817 -7.94484e-05 1.57015e-04 DIIS/ADIIS; @UHF iter 6: -38.91737800453875 -1.08639e-05 3.99078e-05 DIIS; @UHF iter 7: -38.91737866710707 -6.62568e-07 8.99030e-06 DIIS; @UHF iter 8: -38.91737869146961 -2.43625e-08 1.73779e-06 DIIS; @UHF iter 9: -38.91737869233113 -8.61519e-10 4.12144e-07 DIIS; @UHF iter 10: -38.91737869238197 -5.08393e-11 6.23767e-08 DIIS; @UHF iter 11: -38.91737869238317 -1.20082e-12 1.38186e-08 DIIS; @UHF iter 12: -38.91737869238320 -3.55271e-14 2.41469e-09 DIIS; @UHF Final Energy: -38.91737869238320; UHF NO Occupations:; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; Reference wfn = UHF; ROHF Reference; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information).; @ROHF iter SAD: -38.17324740294831 -3.81732e+01 0.00000e+00 ; @ROHF iter 1: -38.90234369081286 -7.29096e-01 6.50261e-03 DIIS; @ROHF iter 2: -38.91242369713282 -1.00800e-02 1.83961e-03 DIIS; @ROHF iter 3: -38.91339017288891 -9.66476e-04 2.69689e-04 DIIS; @ROHF iter 4: -38.91341456819070 -2.43953e-05 8.81475e-05 DIIS; @ROHF iter 5: -38.91341661898142 -2.05079e-06 1.51310e-05 DIIS; @ROHF iter 6: -38.91341670674457 -8.77632e-08 3.07520e-06 DIIS; @ROHF iter 7: -38.91341670984617 -3.10160e-09 4.33292e-07 DIIS; @ROHF iter 8: -38.91341670989266 -4.64837e-11 7.04761e-08 DIIS; @ROHF iter 9: -38.91,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243123504:1649,Energy,Energy,1649,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243123504,1,['Energy'],['Energy']
Energy Efficiency,"sition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1962,ENERGY,ENERGY,1962,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['ENERGY'],['ENERGY']
Energy Efficiency,skeleton; 378/411 Test #349: sapt-sf1 ......................... Passed 1.04 sec; Start 406: skeletonaointegrals; 379/411 Test #353: tu1-h2o-energy ................... Passed 1.12 sec; Start 396: python-memdfjk; 380/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.25 sec; Start 411: skeletonwavefunction; 381/411 Test #293: psimrcc-pt2 ...................... Passed 1.38 sec; Start 408: skeletonmointegrals; 382/411 Test #108: dcft2 ............................ Passed 2.92 sec; Start 410: skeletonsointegrals; 383/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36349,energy,energy,36349,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"slational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal/mol] -47.112 [kJ/mol] -0.01794389 [Eh]; Rotational G -9.357 [kcal/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6819,Energy,Energy,6819,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['Energy'],['Energy']
Energy Efficiency,"something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1102,energy,energy,1102,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,2,['energy'],['energy']
Energy Efficiency,"spects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1198,ENERGY,ENERGY,1198,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,ssed 1.46 sec; Start 354: tu2-ch2-energy; 377/411 Test #102: decontract ....................... Passed 1.11 sec; Start 406: skeletonaointegrals; 378/411 Test #410: skeletonsointegrals .............. Passed 1.06 sec; Start 222: mints10; 379/411 Test #330: scf-bs ........................... Passed 0.94 sec; Start 188: fci-tdm; 380/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 383: psi4numpy-rhf-gradient; 381/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 387: python-energy; 382/411 Test #210: mcscf2 ........................... Passed 1.34 sec; Start 220: mints-helper; 383/411 Test #354: tu2-ch2-energy ................... Passed 0.84 sec; Start 378: mints12; 384/411 Test #188: fci-tdm .......................... Passed 0.80 sec; Start 293: psimrcc-pt2; 385/411 Test #406: skeletonaointegrals .............. Passed 1.10 sec; Start 209: mcscf1; 386/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 309: pywrap-molecule; 387/411 Test #387: python-energy .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:36219,energy,energy,36219,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,"ssed 1.50 sec; Start 218: mints10; 171/401 Test #329: scf2 ............................. Passed 2.95 sec; Start 115: ao-dfcasscf-sp; 172/401 Test #117: dfcasscf-fzc-sp .................. Passed 4.07 sec; Start 348: tu1-h2o-energy; 173/401 Test #138: dfomp2-1 ......................... Passed 7.01 sec; Start 305: pywrap-molecule; 174/401 Test #218: mints10 .......................... Passed 3.21 sec; Start 400: json-schema_0_gradient; 175/401 Test #253: omp3-1 ........................... Passed 5.17 sec; Start 122: dfccsd1; 176/401 Test #125: dfccsd-t-grad1 ................... Passed 19.43 sec; Start 393: python-memdfjk; 177/401 Test #220: molden2 .......................... Passed 6.09 sec; Start 123: dfccsdl1; 178/401 Test #305: pywrap-molecule .................. Passed 1.23 sec; Start 347: stability2; 179/401 Test #219: molden1 .......................... Passed 5.30 sec; Start 326: scf-bs; 180/401 Test #227: mp2p5-grad1 ...................... Passed 4.58 sec; Start 349: tu2-ch2-energy; 181/401 Test #348: tu1-h2o-energy ................... Passed 1.49 sec; Start 330: scf3; 182/401 Test #239: ocepa1 ........................... Passed 6.49 sec; Start 380: psi4numpy-rhf-gradient; 183/401 Test #115: ao-dfcasscf-sp ................... Passed 2.27 sec; Start 290: psimrcc-sp1; 184/401 Test #400: json-schema_0_gradient ........... Passed 1.81 sec; Start 101: decontract; 185/401 Test #376: cc-module, ....................... Passed 111.71 sec; Start 379: psi4numpy-rhf; 186/401 Test #393: python-memdfjk ................... Passed 1.80 sec; Start 205: mcscf1; 187/401 Test #349: tu2-ch2-energy ................... Passed 1.30 sec; Start 235: numpy-array-interface; 188/401 Test #326: scf-bs ........................... Passed 1.60 sec; Start 384: python-energy; 189/401 Test #330: scf3 ............................. Passed 1.38 sec; Start 204: matrix1; 190/401 Test #380: psi4numpy-rhf-gradient ........... Passed 1.41 sec; Start 359: options1; 191/401 Test #347: stability2 .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:16921,energy,energy,16921,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,2,['energy'],['energy']
Energy Efficiency,ssed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13817,energy,energy,13817,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,ssed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ................... Passed 141.24 sec; Start 39: cc22; 163/415 Test #17: cbs-xtpl-opt ..................... Passed 192.06 sec; Start 40: cc23; 164/415 Test #39: cc22 ............................. Passed 61.46 sec; Start 41: cc24; 165/415 Test #36: cc19 ............................. Passed 153.84 sec; Start 42: cc25; 166/415 Test #196: fd-freq-energy-large ............. Passed 970.47 sec; Start 43: cc26; 167/415 Test #29: cc13c ............................ Passed 319.30 sec; Start 44: cc27; 168/415 Test #27: cc13a ............................ Passed 864.99 sec; Start 46: cc29; 169/415 Test #33: cc16 ............................. Passed 369.56 sec; Start 47: cc3; 170/415 Test #13: cbs-xtpl-alpha ................... Passed 464.57 sec; Start 48: cc30; 171/415 Test #405: python-vibanalysis ............... Passed 1198.23 sec; Start 49: cc31; 172/415 Test #31: cc14 ............................. Passed 502.16 sec; Start 51: cc33; 173/415 Test #26: cc13 ............................. Passed 551.27 sec; Start 52: cc34; 174/415 Test #48: cc30 ............................. Passed 124.65 sec; Start 53: cc35; 175/415 Test #51: cc33 ............................. Passed 51.94 sec; Start 54: cc36; 176/415 Test #46: cc29 ............................. Passed 229.97 sec; Start 55: cc37; 177/415 Test #310: pywrap-all ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:15870,energy,energy-large,15870,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy-large']
Energy Efficiency,ssed 162.14 sec; Start 29: cc14; 14/401 Test #41: cc26 ............................. Passed 100.81 sec; Start 42: cc27; 15/401 Test #189: fd-freq-energy-large ............. Passed 277.33 sec; Start 47: cc31; 16/401 Test #191: fd-freq-gradient-large ........... Passed 278.60 sec; Start 68: cc51; 17/401 Test #178: isapt1 ........................... Passed 294.68 sec; Start 296: pywrap-all; 18/401 Test #61: cc44 ............................. Passed 53.08 sec; Start 73: cc5a; 19/401 Test #68: cc51 ............................. Passed 48.46 sec; Start 24: cc13; 20/401 Test #38: cc23 ............................. Passed 146.07 sec; Start 58: cc41; 21/401 Test #74: cc6 .............................. Passed 64.44 sec; Start 28: cc13d; 22/401 Test #73: cc5a ............................. Passed 46.72 sec; Start 31: cc16; 23/401 Test #47: cc31 ............................. Passed 88.98 sec; Start 60: cc43; 24/401 Test #58: cc41 ............................. Passed 67.08 sec; Start 11: cbs-delta-energy; 25/401 Test #40: cc25 ............................. Passed 185.19 sec; Start 67: cc50; 26/401 Test #174: fsapt1 ........................... Passed 429.49 sec; Start 57: cc40; 27/401 Test #60: cc43 ............................. Passed 63.48 sec; Start 46: cc30; 28/401 Test #29: cc14 ............................. Passed 160.30 sec; Start 27: cc13c; 29/401 Test #28: cc13d ............................ Passed 101.67 sec; Start 64: cc48; 30/401 Test #75: cc7 .............................. Passed 177.91 sec; Start 226: mp2-module; 31/401 Test #36: cc21 ............................. Passed 200.89 sec; Start 34: cc19; 32/401 Test #24: cc13 ............................. Passed 136.55 sec; Start 59: cc42; 33/401 Test #67: cc50 ............................. Passed 44.58 sec; Start 303: pywrap-db1; 34/401 Test #31: cc16 ............................. Passed 127.54 sec; Start 372: pywrap-bfs; 35/401 Test #42: cc27 ............................. Passed 204.66 sec; Start 66: cc4a; 36/401 Test #57:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:2584,energy,energy,2584,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy']
Energy Efficiency,ssed 5.90 sec; Start 283: opt-freeze-coords; 280/404 Test #6: ao-casscf-sp ..................... Passed 2.75 sec; Start 339: scf-property; 281/404 Test #223: molden1 .......................... Passed 1.19 sec; Start 286: props3; 282/404 Test #224: molden2 .......................... Passed 1.61 sec; Start 400: json-schema-1-ghost; 283/404 Test #190: fci-coverage ..................... Passed 1.78 sec; Start 185: fci-h2o; 284/404 Test #393: python-3-index-transforms ........ Passed 6.24 sec; Start 184: fci-dipole; 285/404 Test #400: json-schema-1-ghost .............. Passed 0.97 sec; Start 340: soscf-large; 286/404 Test #283: opt-freeze-coords ................ Passed 2.80 sec; Start 399: json-schema-1-energy; 287/404 Test #171: dft2 ............................. Passed 4.80 sec; Start 141: dfomp2-3; 288/404 Test #339: scf-property ..................... Passed 3.08 sec; Start 360: x2c1; 289/404 Test #180: fsapt-terms ...................... Passed 4.85 sec; Start 401: json-schema-1-orient; 290/404 Test #399: json-schema-1-energy ............. Passed 1.59 sec; Start 191: fcidump; 291/404 Test #141: dfomp2-3 ......................... Passed 1.61 sec; Start 121: dfccdl1; 292/404 Test #185: fci-h2o .......................... Passed 3.63 sec; Start 376: pywrap-align; 293/404 Test #286: props3 ........................... Passed 4.82 sec; Start 331: scf1; 294/404 Test #184: fci-dipole ....................... Passed 3.85 sec; Start 186: fci-h2o-2; 295/404 Test #401: json-schema-1-orient ............. Passed 1.77 sec; Start 217: mints6; 296/404 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 85: cepa0-grad1; 297/404 Test #340: soscf-large ...................... Passed 4.47 sec; Start 232: mp2p5-grad2; 298/404 Test #191: fcidump .......................... Passed 3.01 sec; Start 397: json-v11-energy; 299/404 Test #85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:26906,energy,energy,26906,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,st #100: cubeprop ......................... Passed 8.71 sec; Start 76: cc8; 88/401 Test #298: pywrap-cbs1 ...................... Passed 92.27 sec; Start 172: extern1; 89/401 Test #353: tu5-sapt ......................... Passed 9.35 sec; Start 196: fnocc2; 90/401 Test #91: ci-multi ......................... Passed 17.40 sec; Start 195: fnocc1; 91/401 Test #197: fnocc3 ........................... Passed 9.24 sec; Start 311: sapt1; 92/401 Test #132: dfmp2-ecp ........................ Passed 10.33 sec; Start 148: dfomp3-grad2; 93/401 Test #121: dfccd-grad1 ...................... Passed 6.11 sec; Start 32: cc17; 94/401 Test #83: cdomp2-2 ......................... Passed 16.79 sec; Start 352: tu4-h2o-freq; 95/401 Test #195: fnocc1 ........................... Passed 8.09 sec; Start 390: python-3-index-transforms; 96/401 Test #311: sapt1 ............................ Passed 9.43 sec; Start 106: dcft1; 97/401 Test #238: ocepa-grad2 ...................... Passed 49.33 sec; Start 14: cbs-xtpl-energy; 98/401 Test #172: extern1 .......................... Passed 15.83 sec; Start 362: scf-hess1; 99/401 Test #390: python-3-index-transforms ........ Passed 6.02 sec; Start 126: dfccsdt1; 100/401 Test #352: tu4-h2o-freq ..................... Passed 12.54 sec; Start 33: cc18; 101/401 Test #126: dfccsdt1 ......................... Passed 3.87 sec; Start 7: casscf-sp; 102/401 Test #76: cc8 .............................. Passed 23.26 sec; Start 176: fsapt-terms; 103/401 Test #14: cbs-xtpl-energy .................. Passed 7.95 sec; Start 286: psimrcc-ccsd_t-4; 104/401 Test #362: scf-hess1 ........................ Passed 7.64 sec; Start 120: dfccdl1; 105/401 Test #32: cc17 ............................. Passed 20.79 sec; Start 15: cbs-xtpl-freq; 106/401 Test #120: dfccdl1 .......................... Passed 2.42 sec; Start 336: soscf-large; 107/401 Test #176: fsapt-terms ...................... Passed 4.90 sec; Start 48: cc32; 108/401 Test #196: fnocc2 ........................... Passed 29.15 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:9119,energy,energy,9119,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy']
Energy Efficiency,st #307: pywrap-db1 ....................... Passed 42.02 sec; Start 312: rasci-ne; 81/411 Test #129: dfmp2-1 .......................... Passed 32.52 sec; Start 206: ghosts; 82/411 Test #230: mp2-module ....................... Passed 61.78 sec; Start 106: dcft-grad4; 83/411 Test #57: cc40 ............................. Passed 28.50 sec; Start 259: omp3-3; 84/411 Test #31: cc16 ............................. Passed 63.68 sec; Start 115: dcft9; 85/411 Test #312: rasci-ne ......................... Passed 35.69 sec; Start 323: sapt7; 86/411 Test #206: ghosts ........................... Passed 32.53 sec; Start 342: soscf-dft; 87/411 Test #386: cookbook-rohf-orb-rot ............ Passed 60.55 sec; Start 237: nbody-he-cluster; 88/411 Test #106: dcft-grad4 ....................... Passed 33.82 sec; Start 66: cc49; 89/411 Test #115: dcft9 ............................ Passed 26.24 sec; Start 359: tu6-cp-ne2; 90/411 Test #259: omp3-3 ........................... Passed 42.02 sec; Start 11: cbs-delta-energy; 91/411 Test #323: sapt7 ............................ Passed 33.21 sec; Start 244: ocepa2; 92/411 Test #342: soscf-dft ........................ Passed 30.10 sec; Start 276: opt11; 93/411 Test #237: nbody-he-cluster ................. Passed 35.76 sec; Start 374: dft-custom-gga; 94/411 Test #66: cc49 ............................. Passed 30.67 sec; Start 68: cc50; 95/411 Test #244: ocepa2 ........................... Passed 36.96 sec; Start 273: opt7; 96/411 Test #374: dft-custom-gga ................... Passed 28.59 sec; Start 59: cc42; 97/411 Test #276: opt11 ............................ Passed 43.58 sec; Start 156: dft-b2plyp; 98/411 Test #68: cc50 ............................. Passed 32.32 sec; Start 1: adc1; 99/411 Test #11: cbs-delta-energy ................. Passed 58.90 sec; Start 264: opt-lindep-change; 100/411 Test #59: cc42 ............................. Passed 20.74 sec; Start 173: dft-omega; 101/411 Test #359: tu6-cp-ne2 ....................... Passed 74.91 sec; Start 375: py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:8576,energy,energy,8576,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,st #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75 sec; Start 44: cc28; 87/412 Test #320: sapt5 ............................ Passed 77.11 sec; Start 62: cc44; 88/412 Test #20: cbs-xtpl-wrapper ................. Passed 58.85 sec; Start 300: pywrap-alias; 89/412 Test #257: omp2p5-grad2 ..................... Passed 29.36 sec; Start 205: frac-ip-fitting; 90/412 Test #245: ocepa2 ........................... Passed 35.89 sec; Start 83: cc9a; 91/412 Test #83: cc9a ............................. Passed 11.86 sec; Start 35: cc19; 92/412 Test #300: pywrap-alias ..................... Passed 25.28 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:7771,energy,energy,7771,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"st energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess sad; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > Of course, the initial guess has always a huge impact on the; > > > calculation,; > > > but is the reported difference reasonable for a system as small as; > > > H2O+?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211.; > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1650,energy,energy,1650,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,2,['energy'],['energy']
Energy Efficiency,"sual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1352,energy,energy,1352,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['energy'],['energy']
Energy Efficiency,t #112: dcft5 ............................ Passed 486.74 sec; Start 113: dcft6; 27/412 Test #13: cbs-xtpl-alpha ................... Passed 538.76 sec; Start 11: cbs-delta-energy; 28/412 Test #111: dcft4 ............................ Passed 1785.19 sec; Start 71: cc52; 29/412 Test #380: cc-module ........................ Passed 446.77 sec; Start 321: sapt6; 30/412 Test #29: cc13d ............................ Passed 499.20 sec; Start 159: dfscf-bz2; 31/412 Test #387: cookbook-rohf-orb-rot ............ Passed 499.71 sec; Start 98: cisd-opt-fd; 32/412 Test #360: tu6-cp-ne2 ....................... Passed 503.92 sec; Start 348: sapt-dft2; 33/412 Test #282: opt-irc-2 ........................ Passed 181.33 sec; Start 48: cc31; 34/412 Test #32: cc16 ............................. Passed 186.69 sec; Start 184: isapt2; 35/412 Test #374: dft-custom-mgga .................. Passed 196.14 sec; Start 59: cc41; 36/412 Test #113: dcft6 ............................ Passed 189.44 sec; Start 169: dft1; 37/412 Test #11: cbs-delta-energy ................. Passed 156.32 sec; Start 155: dft-grad-lr2; 38/412 Test #71: cc52 ............................. Passed 137.50 sec; Start 61: cc43; 39/412 Test #196: fd-freq-gradient-large ........... Passed 312.37 sec; Start 26: cc13a; 40/412 Test #348: sapt-dft2 ........................ Passed 138.78 sec; Start 114: dcft7; 41/412 Test #59: cc41 ............................. Passed 80.57 sec; Start 206: frac-traverse; 42/412 Test #98: cisd-opt-fd ...................... Passed 149.31 sec; Start 317: sapt2; 43/412 Test #159: dfscf-bz2 ........................ Passed 157.81 sec; Start 319: sapt4; 44/412 Test #61: cc43 ............................. Passed 63.98 sec; Start 326: scf-bz2; 45/412 Test #48: cc31 ............................. Passed 101.70 sec; Start 372: dft-custom-dhdf; 46/412 Test #321: sapt6 ............................ Passed 184.79 sec; Start 105: dcft-grad2; 47/412 Test #169: dft1 ............................. Passed 111.64 sec; Start 75: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:3843,energy,energy,3843,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,t 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1498,energy,energy,1498,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy']
Energy Efficiency,t 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1500,energy,energy,1500,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy']
Energy Efficiency,t 389: python-curve; 329/412 Test #235: mp3-grad2 ........................ Passed 16.33 sec; Start 236: mp2-property; 330/412 Test #232: mp2p5-grad1 ...................... Passed 17.17 sec; Start 352: dft-reference; 331/412 Test #400: json-schema-1-energy ............. Passed 17.10 sec; Start 385: psi4numpy-rhf-hessian; 332/412 Test #344: stability1 ....................... Passed 17.94 sec; Start 119: dfcasscf-fzc-sp; 333/412 Test #345: dfep2-1 .......................... Passed 18.02 sec; Start 398: json-v11-energy; 334/412 Test #389: python-curve ..................... Passed 17.89 sec; Start 258: omp3-1; 335/412 Test #236: mp2-property ..................... Passed 20.28 sec; Start 364: zaptn-nh2; 336/412 Test #352: dft-reference .................... Passed 24.29 sec; Start 97: cisd-h2o-clpse; 337/412 Test #385: psi4numpy-rhf-hessian ............ Passed 24.93 sec; Start 328: scf-guess-read1; 338/412 Test #119: dfcasscf-fzc-sp .................. Passed 26.03 sec; Start 214: mints2; 339/412 Test #398: json-v11-energy .................. Passed 31.34 sec; Start 392: python-mints2; 340/412 Test #378: pywrap-align-chiral .............. Passed 53.89 sec; Start 315: sad1; 341/412 Test #258: omp3-1 ........................... Passed 34.04 sec; Start 333: scf-occ; 342/412 Test #364: zaptn-nh2 ........................ Passed 34.64 sec; Start 312: rasci-h2o; 343/412 Test #97: cisd-h2o-clpse ................... Passed 32.86 sec; Start 346: dfep2-2; 344/412 Test #328: scf-guess-read1 .................. Passed 33.40 sec; Start 290: psimrcc-ccsd_t-3; 345/412 Test #214: mints2 ........................... Passed 33.08 sec; Start 329: scf-upcast-custom-basis; 346/412 Test #392: python-mints2 .................... Passed 30.78 sec; Start 362: x2c2; 347/412 Test #315: sad1 ............................. Passed 29.70 sec; Start 402: json-schema-1-orient; 348/412 Test #333: scf-occ .......................... Passed 28.08 sec; Start 294: psimrcc-pt2; 349/412 Test #312: rasci-h2o .............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:31695,energy,energy,31695,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"t recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; occ_wfn = core.occ(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - CISD/cc-pVDZ via DETCI: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3062, in run_detci; ciwfn = core.detci(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:11916,energy,energy,11916,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:1490,energy,energy,1490,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1537,energy,energy,1537,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"tals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1244,energy,energy,1244,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,1,['energy'],['energy']
Energy Efficiency,tart 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:1853,energy,energy,1853,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['energy'],['energy']
Energy Efficiency,tart 469: cc-module; 158/185 Test #469: cc-module ........................ Passed 23.59 sec; Start 474: tdscf-5; 159/185 Test #474: tdscf-5 .......................... Passed 328.52 sec; Start 475: tdscf-6; 160/185 Test #475: tdscf-6 .......................... Passed 24.27 sec; Start 483: linK-1; 161/185 Test #483: linK-1 ........................... Passed 4.26 sec; Start 486: cbs-xtpl-energy-conv; 162/185 Test #486: cbs-xtpl-energy-conv ............. Passed 17.51 sec; Start 487: ddd-deriv; 163/185 Test #487: ddd-deriv ........................ Passed 17.86 sec; Start 491: psi4numpy-dfmp2; 164/185 Test #491: psi4numpy-dfmp2 .................. Passed 3.86 sec; Start 492: psi4numpy-rhf; 165/185 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 493: psi4numpy-rhf-gradient; 166/185 Test #493: psi4numpy-rhf-gradient ........... Passed 2.37 sec; Start 494: psi4numpy-rhf-hessian; 167/185 Test #494: psi4numpy-rhf-hessian ............ Passed 2.52 sec; Start 499: python-energy; 168/185 Test #499: python-energy .................... Passed 2.39 sec; Start 500: python-curve; 169/185 Test #500: python-curve ..................... Passed 3.30 sec; Start 502: python-mints9; 170/185 Test #502: python-mints9 .................... Passed 2.66 sec; Start 503: python-mints2; 171/185 Test #503: python-mints2 .................... Passed 3.51 sec; Start 504: python-cc54; 172/185 Test #504: python-cc54 ...................... Passed 9.24 sec; Start 505: python-3-index-transforms; 173/185 Test #505: python-3-index-transforms ........ Passed 56.49 sec; Start 506: python-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:15735,energy,energy,15735,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,"tational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filenam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3848,energy,energy,3848,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,2,['energy'],['energy']
Energy Efficiency,"te : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for some states, the energies reported are near exact:; ```; Lit: 9.63 eV; Psi4: 9.6455240 eV; QChem: 9.631168 eV; ```; for others, the excitation energy deviates as much as 0.08 eV:; ```; Lit: 15.33 eV; Psi4: 15.2573251 eV; QChem: 15.318842 eV; ```. ### **N2**; In the case of the N2 system, we again saw no errors in the ADC(1) results. QChem continues to be able to reproduce excitation energies for ADC(2) calculations, but in Psi4, for several states in the ADC(2) calculation, we see warnings about a strongly rotated CIS state and zero eigenvalues. ### **Psi4 1.3.2 -- N2 ADC(2) excitation energies**; ```; 1 Ag state : 0.9479767 (a.u.), 25.7957601 (eV); 2 Ag state : 1.0193053 (a.u.), 27.7367101 (eV); #WARNING: Strongly rotated from the CIS state!; 3 Ag state : 1.0706909 (a.u.), 29.1349838 (eV); #WARNING: Strongly rotated from the CIS state!; 4 Ag state : 1.1395201 (a.u.), 31.0079202 (eV). 1B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 2B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 3B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:3480,energy,energy,3480,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"te-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3196,energy,energy,3196,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"tegrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OO|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|OO) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Ground State <==; -> MP2 energy = -2.73300898049903; [Squared-norm of MP1 wavefunction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:1723,energy,energy,1723,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859,1,['energy'],['energy']
Energy Efficiency,"tems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1798,energy,energy,1798,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"ter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9462,Energy,Energy,9462,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"ter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6319,Energy,Energy,6319,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Energy'],['Energy']
Energy Efficiency,"thanks, @konpat, this is mostly waiting on v1.3 tag before merge. what's hooked up at present is enough to collect sinf info for runs en masse, and I think that's the plan. Then use best-ways-to-sum-together findings to decide what `energy('sapt???')` should be defined (though I agree that something like `energy('sapt0-sinf')` is almost certainly wanted). would you want to add a paragraph about the sinf methods to https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/sapt.rst ? `.. include:: autodir_options_c/sapt__aio_cphf.rst` is how to auto-inject the read_options.cc blurb into the narrative docs. feel free to put any papers in the introduction.rst sections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629:233,energy,energy,233,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629,2,['energy'],['energy']
Energy Efficiency,"the CP IE gradient is correct from 3 SP gradients, right? and nothing labeled CP total gradient or CP total energy is printed from line 6. so I'd think line 6 would be ok without altering the defaults. if the user was interested in total energies/gradients, he'd add `return_total_data=True` for line 5 and get the 5 SP gradients and correct CP total gradient and CP total energy. maybe I'm supposing incorrectly that users easily notice when IE vs tot_E returned is not what they intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869969864:108,energy,energy,108,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869969864,2,['energy'],['energy']
Energy Efficiency,"the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1606,ENERGY,ENERGY,1606,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ther PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1959,energy,energy,1959,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,2,['energy'],['energy']
Energy Efficiency,"thods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig('potential_energy_curve_CF.png'). # Displaying the plot; plt.show(). Here's one of the error I got after several modifications. Please I need serious help on this right now.; Error computing energies at bond length 1.0: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.2: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.4: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.5999999999999999: 'NoneType' object has no attribute 'group'; ^CTraceback (most recent call last):",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:3856,Energy,Energy,3856,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,2,['Energy'],['Energy']
Energy Efficiency,"thon-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/185 Test #510: json-schema-1-energy ............. Passed 3.74 sec; Start 514: json-schema-1-gradient; 179/185 Test #514: json-schema-1-gradient ........... Passed 2.98 sec; Start 518: dftd3-energy; 180/185 Test #518: dftd3-energy ..................... Passed 50.87 sec; Start 523: sapt0-d; 181/185 Test #523: sapt0-d .......................... Passed 440.00 sec; Start 524: fsapt-d; 182/185 Test #524: fsapt-d .......................... Passed 542.90 sec; Start 525: fsaptd-terms; 183/185 Test #525: fsaptd-terms .....................***Failed 17.57 sec; Start 526: dftd4-energy; 184/185 Test #526: dftd4-energy ..................... Passed 129.00 sec; Start 527: dftd4-r2scan; 185/185 Test #527: dftd4-r2scan .....................***Failed 9.40 sec. 95% tests passed, 9 tests failed out of 185. Label Time Summary:; addon = 189.28 sec*proc (3 tests); cart = 2407.47 sec*proc (55 tests); cas = 138.78 sec*proc (1 test); casscf = 84.46 sec*proc (11 tests); cbs = 262.77 sec*proc (9 tests); cc = 775.63 sec*proc (13 tests); cdomp2 = 41.72 sec*proc (2 tests); ci = 147.62 sec*proc (2 tests); cisd = 6.82 sec*proc (1 test); cubeprop = 28.89 sec*proc (2 tests); d2ints = 58.89 sec*proc (7 tests); dct = 22.51 sec*proc (3 tests); df = 324.56 sec*proc (15 tests); dfccd = 5.11 sec*proc (1 test); dfccsd = 7.31 sec*proc (1 test); dfccsd-grad = 14.46 sec*proc (1 test); dfccsd-t-grad = 13.06 sec*proc (1 test); dfccsdl = 7.10 sec*proc (1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198.00 sec*proc (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:17314,energy,energy,17314,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,thon-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411 Test #397: json-v11-energy .................. Passed 3.63 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.08 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.35 sec; Start 409: skeletonscf; 394/411 Test #408: skeletonmointegrals .............. Passed 1.63 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 1.86 sec; 397/411 Test #410:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:36296,energy,energy,36296,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"tin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:3480,Energy,Energy,3480,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Energy'],['Energy']
Energy Efficiency,"tion class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/src/psi4/fisapt/fisapt.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-1> (68); > - *M* psi4/src/psi4/libmints/wavefunction.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-2> (2); > - *M* psi4/src/psi4/libmints/wavefunction.h; > <https://github.com/psi4/psi4/pull/1608/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1608.patch; > - http",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1763,energy,energy,1763,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,tom-hybrid ................ Passed 8.63 sec; Start 201: fnocc3; 233/404 Test #341: soscf-ref ........................ Passed 5.39 sec; Start 270: opt4; 234/404 Test #164: dft-grad1 ........................ Passed 9.34 sec; Start 290: psimrcc-ccsd_t-4; 235/404 Test #201: fnocc3 ........................... Passed 2.69 sec; Start 132: dfmp2-4; 236/404 Test #9: castup2 .......................... Passed 4.06 sec; Start 165: dft-grad2; 237/404 Test #197: freq-isotope1 .................... Passed 7.54 sec; Start 321: sapt-dft-api; 238/404 Test #315: sapt1 ............................ Passed 7.66 sec; Start 133: dfmp2-ecp; 239/404 Test #219: mints-benchmark .................. Passed 8.79 sec; Start 101: cubeprop; 240/404 Test #132: dfmp2-4 .......................... Passed 4.10 sec; Start 3: casscf-fzc-sp; 241/404 Test #270: opt4 ............................. Passed 7.71 sec; Start 5: casscf-sa-sp; 242/404 Test #358: tu5-sapt ......................... Passed 8.52 sec; Start 192: fd-freq-energy; 243/404 Test #3: casscf-fzc-sp .................... Passed 1.83 sec; Start 370: scf-coverage; 244/404 Test #290: psimrcc-ccsd_t-4 ................. Passed 9.60 sec; Start 135: dfmp2-grad2; 245/404 Test #5: casscf-sa-sp ..................... Passed 3.49 sec; Start 369: dft-jk; 246/404 Test #370: scf-coverage ..................... Passed 3.11 sec; Start 241: ocepa-grad1; 247/404 Test #165: dft-grad2 ........................ Passed 9.14 sec; Start 127: dfccsdt1; 248/404 Test #321: sapt-dft-api ..................... Passed 8.99 sec; Start 226: mp2-1; 249/404 Test #133: dfmp2-ecp ........................ Passed 8.06 sec; Start 285: props2; 250/404 Test #135: dfmp2-grad2 ...................... Passed 1.84 sec; Start 253: omp2p5-1; 251/404 Test #192: fd-freq-energy ................... Passed 5.20 sec; Start 255: omp2p5-grad1; 252/404 Test #101: cubeprop ......................... Passed 9.11 sec; Start 86: cepa0-grad2; 253/404 Test #127: dfccsdt1 ......................... Passed 2.46 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:22471,energy,energy,22471,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,"trapolated Fock matrix `F_DIIS = \sum_i c_i F_i`. If I remember correctly, there's a paper that shows that ADIIS and EDIIS are the same method, assuming that you're running at Hartree-Fock level of theory. However, I think the methods are not the same for DFT. With ADIIS+DIIS, you can converge most systems without any kind of problems. The only cases where you get problems are the ones where there really are physical issues with the wave function, like e.g. with flat angular surfaces of the energy, where rotating the orbitals changes the energy only very slowly. These are fundamentally better described by orbital rotation techniques, e.g. the geometric direct minimization method #2214, where you just do everything in terms of orbital rotations. Direct minimization is bound to converge, and the convergence rate is often quite rapid. If you program ADIIS and/or EDIIS, one can tie them with C2-DIIS with linear interpolation. For instance, when the DIIS error is greater than `1e-2`, the DIIS extrapolation will be crap and might take you far up in energy. In this case it is better to use the ADIIS/EDIIS energy functional, which is just an **interpolation** between the current and previous iterations' Fock matrices. ADIIS/EDIIS takes you very quickly to the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:2645,energy,energy,2645,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['energy'],['energy']
Energy Efficiency,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:351,energy,energy,351,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239,2,['energy'],['energy']
Energy Efficiency,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1580,Energy,Energy,1580,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115,10,['Energy'],['Energy']
Energy Efficiency,"u should never get a non-symmetric solution. But, as @dgasmith says, it depends on the math library, whether or not there is tiny numerical noise introduced, etc. Since the computer uses finite precision arithmetic, there is always a chance that noise messes up things. . I investigated this case a little today, since it captured my interest. What's going on is actually even more tricky than has been suggested so far. Normally, we don't like these symmetry-breaking solutions because they do bad things, like give unphysical dipole moments. For example, the symmetry-breaking UHF solution for NO3 radical gives very unequal charges for the O atoms [-0.0867 -0.3789 -0.3789] compared to the symmetric UHF solution [-0.2990 -0.2990 -0.2990]. I think most people would agree the asymmetric solution is just wrong, even though it has a lower energy [-278.774 819 vs -278.757 840] (https://doi.org/10.1016/S0009-2614(99)00206-7). . So, I looked at this 90 degrees twisted C2H4 example, expecting the lower-energy symmetry-broken solution to give an unphysical dipole moment. What I found surprised me. The problem here is that the ""symmetric solution"" that we've been discussing is actually a symmetry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert are finding for their computations t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:1038,energy,energy,1038,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['energy'],['energy']
Energy Efficiency,"u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2031,energy,energy,2031,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"ub.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2891,energy,energy,2891,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['energy'],['energy']
Energy Efficiency,"um_threads(8); psi4.set_memory('30000mb'). psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'reference': 'rhf',; 'freeze_core': 'true',; }). psi4.core.set_output_file('water.out', False). def run_calculation(molecule):; ; universe = psi4.geometry(molecule); universe.update_geometry(); mass = np.asarray([16.01, 1.0, 1.0]); geometry = np.asarray(universe.geometry()); irrep_labels = universe.irrep_labels(); dipole_derivatives = None; project_translation = True; project_rotation = True; symbols = [universe.symbol(at) for at in range(universe.natom())]; theory = 'mp2/aug-cc-pvdz'; ; energy, wave_function = psi4.optimize(; 'hf/6-31g*',; return_wfn = 'yes',; molecule=universe; ). hessian, wave_function_2 = psi4.hessian(; theory,; ref_gradient=wave_function.gradient(),; return_wfn= True; ). basisset = wave_function_2.basisset(). wave_function_2.hessian().print_out(). vibinfo, vibtext = psi4.driver.qcdb.vib.harmonic_analysis(; np.array(hessian),; geometry,; mass,; basisset,; irrep_labels,; dipole_derivatives,; project_translation,; project_rotation; ). print(vibtext); print(psi4.driver.qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='q', atom_lbl=symbols)). if __name__ == '__main__':. water_zmatrix = '''\; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; '''; run_calculation(textwrap.dedent(water_zmatrix)). ```. The output from the script for water is:. ```python. Vibration 7 8 9 ; Freq [cm^-1] 1563.0797 4068.4404 4208.3554 ; Irrep ; Reduced mass [u] 1.0740 1.0365 1.0684 ; Force const [mDyne/A] 1.5461 10.1080 11.1487 ; Turning point v=0 [a0] 0.2678 0.1690 0.1636 ; RMS dev v=0 [a0 u^1/2] 0.1962 0.1216 0.1196 ; Char temp [K] 2248.9237 5853.5800 6054.8864 ; ----------------------------------------------------------------------------------; 1 O 0.00 0.00 -0.27 0.00 0.00 0.19 -0.00 -0.26 0.00 ; 2 H -0.00 0.41 0.54 0.00 0.58 -0.39 -0.00 0.52 -0.44 ; 3 H -0.00 -0.41 0.54 -0.00 -0.58 -0.39 0.00 0.52 0.44 ; ```. Everything else but that, what am I missing so far?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650:1696,Reduce,Reduced,1696,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650,1,['Reduce'],['Reduced']
Energy Efficiency,"uming that you're running at Hartree-Fock level of theory. However, I think the methods are not the same for DFT. With ADIIS+DIIS, you can converge most systems without any kind of problems. The only cases where you get problems are the ones where there really are physical issues with the wave function, like e.g. with flat angular surfaces of the energy, where rotating the orbitals changes the energy only very slowly. These are fundamentally better described by orbital rotation techniques, e.g. the geometric direct minimization method #2214, where you just do everything in terms of orbital rotations. Direct minimization is bound to converge, and the convergence rate is often quite rapid. If you program ADIIS and/or EDIIS, one can tie them with C2-DIIS with linear interpolation. For instance, when the DIIS error is greater than `1e-2`, the DIIS extrapolation will be crap and might take you far up in energy. In this case it is better to use the ADIIS/EDIIS energy functional, which is just an **interpolation** between the current and previous iterations' Fock matrices. ADIIS/EDIIS takes you very quickly to the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:2702,energy,energy,2702,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['energy'],['energy']
Energy Efficiency,unction; 373/411 Test #229: mp2-grad2 ........................ Passed 1.37 sec; Start 220: mints-helper; 374/411 Test #298: pubchem2 ......................... Passed 1.45 sec; Start 222: mints10; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.09 sec; Start 309: pywrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:35788,energy,energy,35788,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,"unction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:6704,ENERGY,ENERGY,6704,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['ENERGY'],['ENERGY']
Energy Efficiency,"upied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7215,Energy,Energy,7215,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,"us GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1328,ENERGY,ENERGY,1328,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ut some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:2998,energy,energy,2998,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['energy'],['energy']
Energy Efficiency,"ution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1604,energy,energy,1604,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['energy'],['energy']
Energy Efficiency,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1930,Energy,Energy,1930,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323,10,['Energy'],['Energy']
Energy Efficiency,"val.c:4187; #64 0x557a416e201b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #65 0x557a417643c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #66 0x557a417647c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #67 0x557a417649c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #68 0x557a417684b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsig",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11274,allocate,allocated,11274,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['allocate'],['allocated']
Energy Efficiency,"vant"" in a CASSCF; > computation). The issue is that the code can't determine what irrep; > your target wavefunction is supposed to be, because you haven't given it; > information about the orbital occupancy of the reference HF wavefunction.; > I think if you specified docc [] and socc [] arrays for the reference; > high-spin triplet, the code would have a much better chance to figure out; > what you want.; >; > On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; > wrote:; >; >> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >> small CASSCF calculations. However, I can't get DETCI to run the; >> calculations for me.; >>; >> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >> shell. DETCI correctly determines that there is 1 alpha string (since the; >> shell is fully occupied) and 3 beta strings, but then it says that the CI; >> space only has a single determinant and crashes.; >>; >> Example inputs; >>; >> molecule {; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >> set active [0, 0, 0, 0, 0, 1, 1, 1]; >> energy('casscf'); >>; >> or a lower symmetry; >>; >> molecule {; >> symmetry c2h; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0]; >> set active [0, 0, 1, 2]; >> energy('casscf'); >>; >> I guess the problem is that DETCI can't find a proper symmetry? Is there; >> a way to circumvent this issue? @CDSherrill; >> <https://github.com/CDSherrill> ?; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >> .; >>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572205907:1483,energy,energy,1483,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572205907,2,['energy'],['energy']
Energy Efficiency,"various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1340,ENERGY,ENERGY,1340,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,ve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 9.59 sec; Start 399: json-schema-1-energy; 392/411 Test #397: json-v11-energy .................. Passed 4.11 sec; Start 400: json-schema-1-ghost; 393/411 Test #398: json-v11-gradient ................ Passed 2.70 sec; Start 401: json-schema-1-orient; 394/411 Test #400: json-schema-1-ghost .............. Passed 1.16 sec; Start 402: json-schema-1-throws; 395/411 Test #402: json-schema-1-throws ............. Passed 0.55 sec; Start 403: json-schema-1-gradient; 396/411 Test #401: json-schema-1-orient ............. Passed 2.34 sec; Start 404: json-schema-1-properties; 397/411 Test #399: json-schema-1-energy ............. Passed 2.80 sec; Start 405: skeleton; 398/411 Test #403: json-schema-1-gradient ........... Passed 1.54 sec; Start 406: skeletonaointegrals; 399/411 Test #404: json-schema-1-properties ......... Passed 1.27 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 1.33 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:36599,energy,energy,36599,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['energy'],['energy']
Energy Efficiency,"ver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasiria",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:8545,energy,energy,8545,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"viations are quite large either way.; # SOGGA11 only up to 4 decimals even for Ne with fine grid. ggaval ={; ""blyp"" : -128.894855380969, # ORCA; ""svwn"" : -128.357941704 , # G09; ""pbe"" : -128.79305010293, # TM LDA-PW91; #""pbe"" : -128.793027408, # G09; #""pbe"" : -128.793068569269 # ORCA LDA-PW91; #""bp86"" : -128.905683777641, # ORCA LDA-PW91; #""bp86"" : -128.9092927447, # TM = LDA-VWN, or iop(3/74=418) in Gaussian; #""bp86"" : -128.903070321, #G09 LDA-PW86; ""pw91"" : -128.871229934635, # ORCA; ""mpwpw"" : -128.893378250504, # ORCA; ""ft97"" : -128.850056371480 , # NWCHEM xfine xc ft97 screening 1-e14; ""bop"" : -128.892404778404, # NWCHEM; #""b86bpbe"" : , # ???; ""pw86pbe"" : -128.946484366 , # G09 iop(3/74=809); ""sogga11"" : -128.889273547 , # G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; set scf_type direct. for func, val in ggaval.items():; edft = energy(func); label=func.upper(); compare_values(val, edft, 4, 'Ne: '+label) #TEST; clean(). # special flower BP86; low accuracy; # #G09 LDA-PW86; edft = energy('bp86'); compare_values(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:2859,energy,energy,2859,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['energy'],['energy']
Energy Efficiency,"well, I see now that the 3rd order correlation energy is zero in my calculations...so this is not solved yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561791551:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561791551,1,['energy'],['energy']
Energy Efficiency,"were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:3322,energy,energy,3322,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig('potential_energy_curve_CF.png'). # Displaying the plot; plt.show(). Here's one of the error I got after several modifications. Please I need serious help on this right now.; Error computing energies at bond length 1.0: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.2: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.4: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.5999999999999999:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:3530,energy,energy,3530,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['energy'],['energy']
Energy Efficiency,"where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1169,energy,energy,1169,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977,1,['energy'],['energy']
Energy Efficiency,"whoa, poltype needs a lot of software! the segfault you posted is not in my power to interpret. do you have access to the file or commands poltype is submitting to psi4? I suspect a bad interaction among software libraries. does `psi4 --test` run ok (that is, no failures)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033:76,power,power,76,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033,1,['power'],['power']
Energy Efficiency,"whoa, quite a lot of details to handle DFT xtpl -- thanks for working it all out!. > Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?. I'd do a minimum of cleanup here and save it for ddd in 1.5. > The fact that the DFT VV10 ENERGY contribution is included in DFT FUNCTIONAL TOTAL ENERGY is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Having VV10 follow the empirical dispersion pattern feels more natural to me. Can add a message warning that usage has changed whenever the var is called for a spell like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L624-L628",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952:268,ENERGY,ENERGY,268,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952,3,['ENERGY'],['ENERGY']
Energy Efficiency,wrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 sec; Start 211: mcscf3; 394/411 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 409: skeletonscf; 395/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:36102,energy,energy,36102,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,"wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.044321",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1454,energy,energy,1454,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,x integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726127. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 29772.62 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058511 -3.8800058511 1.0189008043 350; 1 1 3 -3.8152481716 0.0647576795 0.2191661024 6471; 2 2 4 -3.9577344796 -0.1424863080 0.0847277059 6428; 3 3 5 -3.9682900740 -0.0105555944 0.0382308599 6716; 4 4 6 -3.9680391582 0.0002509158 0.0104096296 6663; 5 5 7 -3.9686550395 -0.0006158812 0.0052763771 6753; 6 6 8 -3.9689037022 -0.0002486628 0.0017743273 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.00000003,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-34826327:3458,Energy,Energy,3458,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327,2,['Energy'],['Energy']
Energy Efficiency,x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Indirect leak of 648 byte(s) in 1 object(s) allocated from:; #0 0x7f0f92dd6df8 in __intercept,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17830,allocate,allocated,17830,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocated']
Energy Efficiency,"xFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214fa3); #38 0x561a735e6a9d in Py_Main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x218a9d); #39 0x561a734ae4bd in main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe04bd); #40 0x7f290458a444 in __libc_start_main (/lib64/libc.so.6+0x22444); #41 0x561a73595772 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c7772). 0x6030003bc668 is located 0 bytes to the right of 24-byte region [0x6030003bc650,0x6030003bc668); allocated by thread T0 here:; #0 0x7f2904bfbe10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7f28e2c07ef9 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/ext/new_allocator.h:111; #2 0x7f28e2c07ef9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/alloc_traits.h:436; #3 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:172; #4 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:187; #5 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:138; #6 0x7f28e2c07ef9 in std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:328; #7 0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:9749,allocate,allocate,9749,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocate']
Energy Efficiency,"xcited states; > ; > Input File; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graphyne using basis cc-pvdz; > ; > memory 5000 mb; > ; > molecule Graphyne {; > 0 1; > C 1.396 0.000 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1612,energy,energy,1612,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['energy'],['energy']
Energy Efficiency,"y H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3315,Energy,Energy,3315,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['Energy'],['Energy']
Energy Efficiency,"y an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:2832,energy,energy,2832,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['energy'],['energy']
Energy Efficiency,"y, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1462,ENERGY,ENERGY,1462,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,y; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 100.99 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 43.84 sec; Start 33: cc18; 38/411 Test #28: cc13d ............................ Passed 259.61 sec; Start 34: cc19; 39/411 Test #24: cc13 ............................. Passed 319.22 sec; Start 35: cc2; 40/411 Test #33: cc18 ............................. Passed 55.96 sec; Start 36: cc21; 41/411 Test #34: cc19 ............................. Passed 61.97 sec; Start 37: cc22; 42/411 Test #37: cc22 ............................. Passed 50.38 sec; Start 38: cc23; 43/411 Test #31: cc16 ............................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:3169,energy,energy,3169,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['energy'],['energy']
Energy Efficiency,"yes I want to optimize this molecule, but even:; ```; set scf_type df; set BASIS def2-SV(P); energy('pbe'); ```; fail to converge.; with ""set basis_guess True"" it will converge energy (but not in optimization after 2-3 iterations); optimize('HF') converges fine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432321135:93,energy,energy,93,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432321135,2,['energy'],['energy']
Energy Efficiency,"you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2084,energy,energy,2084,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,1,['energy'],['energy']
Energy Efficiency,ystem); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4605,energy,energy,4605,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['energy'],['energy']
Energy Efficiency,"ython/pythonrun.c:978; #44 0x7fa146e61206 in PyRun_SimpleFileExFlags Python/pythonrun.c:420; #45 0x7fa146e7d6fc in run_file Modules/main.c:340; #46 0x7fa146e7d6fc in Py_Main Modules/main.c:810; #47 0x400bbb in main Programs/python.c:69; #48 0x7fa145de8444 in __libc_start_main (/lib64/libc.so.6+0x22444); #49 0x400c7c (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x400c7c). 0x6020004445d8 is located 0 bytes to the right of 8-byte region [0x6020004445d0,0x6020004445d8); allocated by thread T0 here:; #0 0x7fa1472af94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7fa137a9a6f2 in __gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7fa137a90c98 in std::allocator_traits<std::allocator<double> >::allocate(std::allocator<double>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7fa137a88909 in std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7fa1392ce272 in std::vector<double, std::allocator<double> >::_M_default_append(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/vector.tcc:571; #5 0x7fa1392cda2a in std::vector<double, std::allocator<double> >::resize(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:692; #6 0x7fa139345669 in psi::detci::CIWavefunction::get_parameters(psi::Options&) /home/raimis/psi4.git/psi4/src/psi4/detci/params.cc:598; #7 0x7fa139291d0d in psi::detci::CIWavefunction::common_init() /home/raimis/psi4.git/psi4/src/psi4/detci/ciwave.cc:79; #8",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:6885,allocate,allocate,6885,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['allocate'],['allocate']
Energy Efficiency,ywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start 215: mints4; 393/411 Test #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:36068,energy,energy,36068,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,zc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1562,energy,energy,1562,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,2,['energy'],['energy']
Energy Efficiency,"zkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:1908,energy,energy,1908,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['energy'],['energy']
Integrability,"	 Electrons = 10; Nalpha = 5											 Nalpha = 5; Nbeta = 5											 Nbeta = 5. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is DIRECT.										 SCF Algorithm Type is DIRECT.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is CORE.											 Guess Type is CORE.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-05										 Density threshold = 1.00e-05; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. -AO BASIS SET INFORMATION:									 |	 Basis Set: CC-PVDZ; Name = CC-PVDZ								 |	 Blend: CC-PVDZ; Blend = CC-PVDZ								 |	 Number of shells: 6; Total number of shells = 6									 |	 Number of basis function: 14; Number of primitives = 22									 |	 Number of Cartesian functions: 15; Number of AO = 15									 |	 Spherical Harmonics?: true; Number of SO = 14									 |	 Max angular momentum: 2; Maximum AM = 2									 <; Spherical Harmonics = TRUE								 <; 												 <; -Contraction Scheme:										 <; Atom Type All Primitives // Shells:							 <; ------ ------ --------------------------							 <; 1 NE 17s 4p 1d // 3s 2p 1d 							 <. ==> DFT Potential <==											 ==> DFT Potential <==. => Composite Functional: FT97 <= 									 => Composite Functional: FT97 <= . FT97 GGA Exchange-Correlation Functional								 FT97 GGA Exchange-Correlation Functional. M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997					 M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997. Deriv = 1								 Deriv = 1; GGA = TRUE								 GGA = TRUE; Meta = FALSE								 Meta = FALSE. Exchange Hybrid = FALSE								 Exchange Hybrid = FALSE; MP2 Hybrid = FALSE								 MP2 Hybrid = FALSE. => Exchange Functionals <=										 => Exchange Functionals <=. 1.0000 XC_GGA_X_FT97_B										 1.0000 XC_GGA_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:3835,Contract,Contraction,3835,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Contract'],['Contraction']
Integrability," ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True); Nmol1 = mol.fragments[0][1] - mol.fragments[0][0] + 1; Nmol2 = mol.fragments[1][1] - mol.fragments[1][0] + ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2164,rout,route,2164,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,6,['rout'],['route']
Integrability," (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" hav",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:1590,contract,contraction,1590,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,2,['contract'],['contraction']
Integrability, .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed 1.52 sec; Start 175: docs-bases; 389/412 Test #388: python-energy .................... Passed 1.01 sec; Start 309: pywrap-db3; 390/412 Test #335: scf3 ............................. Passed 0.79 sec; Start 209: matrix1; 391/412 Test #212: mcscf3 ........................... Passed 0.75 sec; Start 216: mints4; 392/412 Test #210: mcscf1 ........................... Passed 0.78 sec; Start 176: docs-dft; 393/412 Test #399: json-v11-gradient ................ Passed 1.25 sec; Start 365: options1; 394/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.35 sec; Start 410: skeletonscf; 395/412 Test #240: numpy-array-interface ............ Passed 0.80 sec; Start 403: json-schema-1-throws; 396/412 Test #213: mints1 ........................... Passed 0.80 sec; Start 88: cepa1; 397/412 Test #383: psi4numpy-rhf .................... Passed 0.92 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:36420,interface,interface,36420,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['interface'],['interface']
Integrability, ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75 sec; Start 44: cc28; 87/412 Test #320: sapt5 ............................ Passed 77.11 sec; Start 62: cc44; 88/412 Test #20: cbs-xtpl-wrapper ................. Passed 58.85 sec; Start 300: pywrap-alias; 89/412 Test #257: omp2p5-grad2 ..................... Passed 29.36 sec; Start 205: frac-ip-fitting; 90/412 Test #245: ocepa2 ........................... Passed 35.89 sec; Start 83: cc9a; 91/412 Test #83: cc9a ............................. Passed 11.86 sec; Start 35: cc19; 92/412 Test #300: pywrap-alias ..................... Passed 25.28 sec; Start 168: dft-b3lyp; 93/412 Test #293: psimrcc-fd-freq2 ................. Passed 74.88 sec; Start 58: cc40; 94/412 Test #44: cc28 ............................. Passed 49.91 sec; Start 69: cc50; 95/412 Test #35: cc19 ............................. Passed 27.20 sec; Start 390: python-pubchem; 96/412 Test #62: cc44 ............................. Passed 60.62 sec; Start 157: dfomp2p5-grad2; 97/412 Test #58: cc40 ............................. Passed 26.97 sec; Start 65: cc47; 98/412 Test #69: cc50 ............................. Passed 27.76 sec; Start 81: cc8c; 99/412 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:8327,wrap,wrapper,8327,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['wrap'],['wrapper']
Integrability," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1267,depend,dependencies,1267,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,4,['depend'],['dependencies']
Integrability, 1.70 sec; Start 229: mp2-grad2; 234/411 Test #229: mp2-grad2 ........................ Passed 1.52 sec; Start 230: mp2-module; 235/411 Test #230: mp2-module ....................... Passed 35.44 sec; Start 231: mp2p5-grad1; 236/411 Test #231: mp2p5-grad1 ...................... Passed 1.74 sec; Start 232: mp2p5-grad2; 237/411 Test #232: mp2p5-grad2 ...................... Passed 1.67 sec; Start 233: mp3-grad1; 238/411 Test #233: mp3-grad1 ........................ Passed 1.32 sec; Start 234: mp3-grad2; 239/411 Test #234: mp3-grad2 ........................ Passed 1.68 sec; Start 235: mp2-property; 240/411 Test #235: mp2-property ..................... Passed 2.64 sec; Start 236: mpn-bh; 241/411 Test #236: mpn-bh ........................... Passed 3.24 sec; Start 237: nbody-he-cluster; 242/411 Test #237: nbody-he-cluster ................. Passed 25.57 sec; Start 238: nbody-intermediates; 243/411 Test #238: nbody-intermediates .............. Passed 12.03 sec; Start 239: numpy-array-interface; 244/411 Test #239: numpy-array-interface ............ Passed 0.76 sec; Start 240: ocepa-freq1; 245/411 Test #240: ocepa-freq1 ...................... Passed 51.87 sec; Start 241: ocepa-grad1; 246/411 Test #241: ocepa-grad1 ...................... Passed 2.45 sec; Start 242: ocepa-grad2; 247/411 Test #242: ocepa-grad2 ...................... Passed 11.50 sec; Start 243: ocepa1; 248/411 Test #243: ocepa1 ........................... Passed 1.88 sec; Start 244: ocepa2; 249/411 Test #244: ocepa2 ........................... Passed 14.81 sec; Start 245: ocepa3; 250/411 Test #245: ocepa3 ........................... Passed 9.93 sec; Start 246: omp2-1; 251/411 Test #246: omp2-1 ........................... Passed 1.42 sec; Start 247: omp2-2; 252/411 Test #247: omp2-2 ........................... Passed 4.76 sec; Start 248: omp2-3; 253/411 Test #248: omp2-3 ........................... Passed 4.44 sec; Start 249: omp2-4; 254/411 Test #249: omp2-4 ........................... Passed 10.24 sec; Start 250:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:22266,interface,interface,22266,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['interface'],['interface']
Integrability, 1.97 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.77 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 13.08 sec; Start 231: mp2p5-grad1; 229/411 Test #204: frac-ip-fitting .................. Passed 69.51 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 5.92 sec; Start 233: mp3-grad1; 231/411 Test #232: mp2p5-grad2 ...................... Passed 7.49 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 4.93 sec; Start 235: mp2-property; 233/411 Test #234: mp3-grad2 ........................ Passed 5.54 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 4.45 sec; Start 237: nbody-he-cluster; 235/411 Test #219: mints-benchmark .................. Passed 40.91 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 4.44 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; Start 240: ocepa-freq1; 238/411 Test #238: nbody-intermediates .............. Passed 26.47 sec; Start 241: ocepa-grad1; 239/411 Test #155: dft-grad-lr3 ..................... Passed 418.11 sec; Start 242: ocepa-grad2; 240/411 Test #241: ocepa-grad1 ...................... Passed 22.49 sec; Start 243: ocepa1; 241/411 Test #237: nbody-he-cluster ................. Passed 59.84 sec; Start 244: ocepa2; 242/411 Test #243: ocepa1 ........................... Passed 10.32 sec; Start 245: ocepa3; 243/411 Test #110: dcft4 ............................ Passed 1172.39 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 6.44 sec; Start 247: omp2-2; 245/411 Test #230: mp2-module ....................... Passed 128.44 sec; Start 248: omp2-3; 246/411 Test #245: ocepa3 ........................... Passed 50.93 sec; Start 249: omp2-4; 247/411 Test #247: omp2-2 ........................... Passed 15.51 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:21906,interface,interface,21906,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['interface'],['interface']
Integrability, 14.25 sec; Start 229: mp2-grad2; 227/411 Test #228: mp2-grad1 ........................ Passed 3.99 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 5.05 sec; Start 231: mp2p5-grad1; 229/411 Test #226: mp2-1 ............................ Passed 13.12 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 3.94 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 38.09 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 8.25 sec; Start 235: mp2-property; 233/411 Test #232: mp2p5-grad2 ...................... Passed 9.49 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 4.03 sec; Start 237: nbody-he-cluster; 235/411 Test #234: mp3-grad2 ........................ Passed 6.75 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 5.96 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.77 sec; Start 240: ocepa-freq1; 238/411 Test #162: dft-grad-lr3 ..................... Passed 422.17 sec; Start 241: ocepa-grad1; 239/411 Test #238: nbody-intermediates .............. Passed 22.37 sec; Start 242: ocepa-grad2; 240/411 Test #241: ocepa-grad1 ...................... Passed 18.01 sec; Start 243: ocepa1; 241/411 Test #243: ocepa1 ........................... Passed 9.79 sec; Start 244: ocepa2; 242/411 Test #237: nbody-he-cluster ................. Passed 60.60 sec; Start 245: ocepa3; 243/411 Test #230: mp2-module ....................... Passed 107.78 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 5.36 sec; Start 247: omp2-2; 245/411 Test #242: ocepa-grad2 ...................... Passed 92.28 sec; Start 248: omp2-3; 246/411 Test #245: ocepa3 ........................... Passed 60.90 sec; Start 249: omp2-4; 247/411 Test #247: omp2-2 ........................... Passed 26.70 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:21887,interface,interface,21887,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['interface'],['interface']
Integrability, 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b; 24/412 Test #23: cc11 ............................. Passed 25.37 sec; Start 28: cc13c; 25/412 Test #20: cbs-xtpl-wrapper ................. Passed 66.34 sec; Start 29: cc13d; 26/412 Test #26: cc13a ............................ Passed 329.40 sec; Start 30: cc14; 27/412 Test #27: cc13b ............................ Passed 52.22 sec; Start 31: cc15; 28/412 Test #196: fd-freq-gradient-large ........... Passed 362.66 sec; Start 32: cc16; 29/412 Test #28: cc13c ............................ Passed 57.54 sec; Start 33: cc17; 30/412 Test #114: dcft7 ............................ Passed 366.03 sec; Start 34: cc18; 31/412 Test #34: cc18 ............................. Passed 33.35 sec; Start 35: cc19; 32/412 Test #317: sapt2 ............................ Passed 402.38 sec; Start 36: cc2; 33/412 Test #33: cc17 ............................. Passed 40.14 sec; Start 37: cc21; 34/412 Test #31: cc15 ............................. Passed 90.60 sec; Start 38: cc22; 35/412 Test #35: cc19 ............................. Passed 58.84 sec; Start 39: cc23; 36/412 Test #38: cc22 ............................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:2684,wrap,wrapper,2684,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['wrap'],['wrapper']
Integrability," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1256,interface,interfaces,1256,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,3,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability, 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-delta-energy; 36/401 Test #25: cc13a ............................ Passed 519.27 sec; Start 27: cc13c; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cbs-parser; 39/401 Test #200: frac-ip-fitting .................. Passed 56.76 sec; Start 255: omp3-3; 40/401 Test #343: sapt-dft2 ........................ Passed 53.47 sec; Start 60: cc43; 41/401 Test #166: dft1-alt ......................... Passed 54.05 sec; Start 163: dft-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:3585,wrap,wrapper,3585,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['wrap'],['wrapper']
Integrability, 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ................... Passed 23.46 sec; Start 217: mints5; 380/412 Test #221: mints-helper ..................... Passed 24.04 sec; Start 240: numpy-array-interface; 381/412 Test #401: json-schema-1-ghost .............. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 25.10 sec; Start 175: docs-bases; 385/412 Test #379: mints12 .......................... Passed 23.88 sec; Start 216: mints4; 386/412 Test #335: scf3 ............................. Passed 23.31 sec; Start 309: pywrap-db3; 387/412 Test #405: json-schema-1-properties ......... Passed 23.98 sec; Start 365: options1; 388/412 Test #310: pywrap-molecule .................. Passed 23.01 sec; Start 403: json-schema-1-throws; 389/412 Test #388: python-energy .................... Passed 23.44 sec; Start 399: json-v11-gradient; 390/412 Test #383: psi4numpy-rhf .................... Passed 23.40 sec; Start 4: casscf-semi; 391/412 Test #210: mcscf1 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:35981,interface,interface,35981,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['interface'],['interface']
Integrability, 3.01 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.82 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 12.93 sec; Start 231: mp2p5-grad1; 229/411 Test #231: mp2p5-grad1 ...................... Passed 3.93 sec; Start 232: mp2p5-grad2; 230/411 Test #232: mp2p5-grad2 ...................... Passed 9.01 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 40.23 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 3.90 sec; Start 235: mp2-property; 233/411 Test #234: mp3-grad2 ........................ Passed 4.13 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 3.19 sec; Start 237: nbody-he-cluster; 235/411 Test #204: frac-ip-fitting .................. Passed 73.34 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 4.83 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.70 sec; Start 240: ocepa-freq1; 238/411 Test #238: nbody-intermediates .............. Passed 21.93 sec; Start 241: ocepa-grad1; 239/411 Test #241: ocepa-grad1 ...................... Passed 14.34 sec; Start 242: ocepa-grad2; 240/411 Test #237: nbody-he-cluster ................. Passed 55.34 sec; Start 243: ocepa1; 241/411 Test #243: ocepa1 ........................... Passed 11.48 sec; Start 244: ocepa2; 242/411 Test #230: mp2-module ....................... Passed 96.52 sec; Start 245: ocepa3; 243/411 Test #162: dft-grad-lr3 ..................... Passed 434.63 sec; Start 246: omp2-1; 244/411 Test #110: dcft4 ............................ Passed 1010.33 sec; Start 247: omp2-2; 245/411 Test #246: omp2-1 ........................... Passed 11.08 sec; Start 248: omp2-3; 246/411 Test #247: omp2-2 ........................... Passed 30.77 sec; Start 249: omp2-4; 247/411 Test #248: omp2-3 ........................... Passed 40.15 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:21890,interface,interface,21890,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,['interface'],['interface']
Integrability," > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting refer",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2937,wrap,wrap,2937,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['wrap'],['wrap']
Integrability," I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:927,depend,dependencies,927,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,2,['depend'],['dependencies']
Integrability," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:616,rout,routines,616,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,4,"['Interface', 'Interoperab', 'interface', 'rout']","['Interface', 'Interoperability', 'interface', 'routines']"
Integrability," Setting option MAX_AM_ERI: 6; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4010,wrap,wrapper,4010,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['wrap'],['wrapper']
Integrability," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1597,wrap,wrapping,1597,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,2,"['integrat', 'wrap']","['integrate', 'wrapping']"
Integrability, Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 sec; Start 23: cc12; 29/411 Test #316: sapt2 ............................ Passed 390.55 sec; Start 24: cc13; 30/411 Test #17: cbs-xtpl-opt ..................... Passed 79.98 sec; Start 26: cc13b; 31/411 Test #19: cbs-xtpl-wrapper ................. Passed 69.43 sec; Start 27: cc13c; 32/411 Test #23: cc12 ............................. Passed 22.65 sec; Start 28: cc13d; 33/411 Test #22: cc11 ............................. Passed 25.63 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 186.38 sec; Start 30: cc15; 35/411 Test #26: cc13b ............................ Passed 73.68 sec; Start 31: cc16; 36/411 Test #27: cc13c ............................ Passed 79.10 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 34.47 sec; Start 33: cc18; 38/411 Test #30: cc15 ............................. Passed 84.08 sec; Start 34: cc19; 39/411 Test #33: cc18 ............................. Passed 55.39 sec; Start 35: cc2; 40/411 Test #28: cc13d ............................ Passed 214.79 sec; Start 36: cc21; 41/411 Test #34: cc19 ............................. Passed 72.97 sec; Start 37: cc22; 42/411 Test #24: cc13 ............................. Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:3076,wrap,wrapper,3076,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['wrap'],['wrapper']
Integrability, Test #60: cc43 ............................. Passed 117.60 sec; Start 115: dcft9; 64/411 Test #319: sapt5 ............................ Passed 77.33 sec; Start 74: cc5a; 65/411 Test #292: psimrcc-fd-freq2 ................. Passed 82.52 sec; Start 167: dft-b3lyp; 66/411 Test #280: opt-irc-1 ........................ Passed 116.92 sec; Start 204: frac-ip-fitting; 67/411 Test #91: cepa-module ...................... Passed 178.98 sec; Start 61: cc44; 68/411 Test #167: dft-b3lyp ........................ Passed 65.78 sec; Start 46: cc30; 69/411 Test #74: cc5a ............................. Passed 101.58 sec; Start 17: cbs-xtpl-opt; 70/411 Test #302: pywrap-cbs1 ...................... Passed 201.06 sec; Start 43: cc28; 71/411 Test #115: dcft9 ............................ Passed 163.68 sec; Start 104: dcft-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 73.44 sec; Start 230: mp2-module; 73/411 Test #61: cc44 ............................. Passed 90.14 sec; Start 19: cbs-xtpl-wrapper; 74/411 Test #46: cc30 ............................. Passed 123.09 sec; Start 159: dft-grad-meta; 75/411 Test #43: cc28 ............................. Passed 112.18 sec; Start 57: cc40; 76/411 Test #17: cbs-xtpl-opt ..................... Passed 138.99 sec; Start 297: pubchem1; 77/411 Test #19: cbs-xtpl-wrapper ................. Passed 90.48 sec; Start 389: python-pubchem; 78/411 Test #159: dft-grad-meta .................... Passed 52.62 sec; Start 100: ci-property; 79/411 Test #230: mp2-module ....................... Passed 122.41 sec; Start 65: cc48; 80/411 Test #18: cbs-xtpl-func .................... Passed 2286.51 sec; Start 2: adc2; 81/411 Test #297: pubchem1 ......................... Passed 56.65 sec; Start 11: cbs-delta-energy; 82/411 Test #104: dcft-grad2 ....................... Passed 167.43 sec; Start 59: cc42; 83/411 Test #389: python-pubchem ................... Passed 54.35 sec; Start 259: omp3-3; 84/411 Test #100: ci-property ...................... Passed 59.03 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:7030,wrap,wrapper,7030,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['wrap'],['wrapper']
Integrability," The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated wit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2963,wrap,wrapper,2963,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['wrap'],['wrapper']
Integrability," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,adapter,adapters,1150,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapter'],['adapters']
Integrability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19805,rout,routine,19805,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability, ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:411,wrap,wrapper,411,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['wrap'],['wrapper']
Integrability, frac-ip-fitting .................. Passed 68.08 sec; Start 100: ci-property; 65/411 Test #29: cc14 ............................. Passed 343.83 sec; Start 74: cc5a; 66/411 Test #278: opt13 ............................ Passed 797.72 sec; Start 19: cbs-xtpl-wrapper; 67/411 Test #359: tu6-cp-ne2 ....................... Passed 350.78 sec; Start 107: dcft1; 68/411 Test #292: psimrcc-fd-freq2 ................. Passed 76.46 sec; Start 159: dft-grad-meta; 69/411 Test #69: cc51 ............................. Passed 82.00 sec; Start 58: cc41; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1-alt; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:7328,wrap,wrapper,7328,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['wrap'],['wrapper']
Integrability, from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:1493,interface,interfaces,1493,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,1,['interface'],['interfaces']
Integrability," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2067,message,message,2067,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,6,['message'],['message']
Integrability, json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 sec; 398/412 Test #240: numpy-array-interface ............ Passed 1.01 sec; 399/412 Test #217: mints5 ........................... Passed 1.36 sec; 400/412 Test #383: psi4numpy-rhf .................... Passed 1.21 sec; 401/412 Test #213: mints1 ........................... Passed 0.95 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.84 sec; 403/412 Test #209: matrix1 .......................... Passed 0.70 sec; 404/412 Test #410: skeletonscf ...................... Passed 0.81 sec; 405/412 Test #216: mints4 ........................... Passed 0.83 sec; 406/412 Test #176: docs-dft ......................... Passed 0.72 sec; 407/412 Test #403: json-schema-1-throws ............. Passed 0.60 sec; 408/412 Test #365: options1 ......................... Passed 0.68 sec; 409/412 Test #88: cepa1 ............................ Passed 2.11 sec; 410/412 Test #179: fsapt1 ........................... Passed 2105.81 sec; 411/412 Test #18: cbs-xtpl-func .................... Passed 1523.38 sec; 412/412 Test #319: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:37458,interface,interface,37458,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['interface'],['interface']
Integrability," libxc keywords to combine unambiguity and human readability: xc = 'lda_x,lda_c_vwn_rpa'. You can also use libxc identifiers in Psi4 but the syntax is a bit more verbose (you need to define a Psi4-style functional). Yes, I agree that `xc = 'lda_x,lda_c_vwn_rpa'` is better in terms of readability. Thanks for letting me know!. > That does not suffice. In addition to setting the grid with e.g. mf.grids.atom_grid = (100,590) you need to turn pruning off explicitly with mf.grids.prune = None. I noticed that too which is why I had used it in the script I provided. > By defaults PySCF truncates basis functions to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly default",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1091,depend,dependencies,1091,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['depend'],['dependencies']
Integrability," marks ctest (longtests;snsmp;cart) and; > pytest (long;cart). vi snsmp2/cc-cc/CMakeLists.txt; > snsmp2/cc-cc/test_input.py; > - 66. snsmp2/cf-o: mismatched marks ctest (snsmp;cart) and pytest; > (cart). vi snsmp2/cf-o/CMakeLists.txt snsmp2/cf-o/test_input.py; > - 67. snsmp2/he-he: mismatched marks ctest (quick;smoke;snsmp;cart); > and pytest (quick;smoke;cart). vi snsmp2/he-he/CMakeLists.txt; > snsmp2/he-he/test_input.py; > - 68. v2rdm_casscf/v2rdm1: mismatched marks ctest (v2rdm) and pytest; > (). vi v2rdm_casscf/v2rdm1/CMakeLists.txt; > v2rdm_casscf/v2rdm1/test_input.py; > - 69. v2rdm_casscf/v2rdm2: mismatched marks ctest (v2rdm) and pytest; > (). vi v2rdm_casscf/v2rdm2/CMakeLists.txt; > v2rdm_casscf/v2rdm2/test_input.py; > - 70. v2rdm_casscf/v2rdm3: mismatched marks ctest (quick;smoke;v2rdm); > and pytest (quick;smoke). vi v2rdm_casscf/v2rdm3/CMakeLists.txt; > v2rdm_casscf/v2rdm3/test_input.py; > - 71. v2rdm_casscf/v2rdm4: mismatched marks ctest (v2rdm;cart) and; > pytest (cart). vi v2rdm_casscf/v2rdm4/CMakeLists.txt; > v2rdm_casscf/v2rdm4/test_input.py; > - 72. v2rdm_casscf/v2rdm5: mismatched marks ctest (v2rdm) and pytest; > (). vi v2rdm_casscf/v2rdm5/CMakeLists.txt; > v2rdm_casscf/v2rdm5/test_input.py; > - 73. v2rdm_casscf/v2rdm6: mismatched marks ctest (opt;v2rdm) and; > pytest (opt). vi v2rdm_casscf/v2rdm6/CMakeLists.txt; > v2rdm_casscf/v2rdm6/test_input.py; > - 74. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and; > pytest (opt). vi v2rdm_casscf/v2rdm7/CMakeLists.txt; > v2rdm_casscf/v2rdm7/test_input.py; > - 75. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest; > registration name (x2c-perturb_h). vi x2c-perturb-h/CMakeLists.txt; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2555>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TEYSZO53JGHUQ2E3ETVGLF65ANCNFSM5UCYRSWQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:8701,Message,Message,8701,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['Message'],['Message']
Integrability," out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2162,depend,dependencies-or-headers,2162,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,['depend'],['dependencies-or-headers']
Integrability," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3333,interface,interface,3333,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,5,"['Message', 'interface', 'message', 'wrap']","['Message', 'interface', 'message', 'wrapper']"
Integrability, sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; Start 235: mp2-property; 225/411 Test #231: mp2p5-grad1 ...................... Passed 6.26 sec; Start 236: mpn-bh; 226/411 Test #232: mp2p5-grad2 ...................... Passed 6.64 sec; Start 237: nbody-he-cluster; 227/411 Test #226: mp2-1 ............................ Passed 12.37 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 4.88 sec; Start 239: numpy-array-interface; 229/411 Test #235: mp2-property ..................... Passed 3.31 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 241: ocepa-grad1; 231/411 Test #236: mpn-bh ........................... Passed 4.34 sec; Start 242: ocepa-grad2; 232/411 Test #241: ocepa-grad1 ...................... Passed 11.81 sec; Start 243: ocepa1; 233/411 Test #238: nbody-intermediates .............. Passed 18.27 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 5.53 sec; Start 245: ocepa3; 235/411 Test #219: mints-benchmark .................. Passed 41.71 sec; Start 246: omp2-1; 236/411 Test #110: dcft4 ............................ Passed 423.92 sec; Start 247: omp2-2; 237/411 Test #246: omp2-1 ........................... Passed 4.28 sec; Start 248: omp2-3; 238/411 Test #204: frac-ip-fitting .................. Passed 69.19 sec; Start 249: omp2-4; 239/411 Test #247: omp2-2 ........................... Passed 16.82 sec; Start 250: omp2-5; 240/411 Test #237: nbody-he-cluster ................. Passed 43.38 sec; Start 251: omp2-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:21452,interface,interface,21452,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['interface'],['interface']
Integrability, sec; Start 230: mp2-module; 220/411 Test #228: mp2-grad1 ........................ Passed 3.46 sec; Start 231: mp2p5-grad1; 221/411 Test #229: mp2-grad2 ........................ Passed 3.65 sec; Start 232: mp2p5-grad2; 222/411 Test #226: mp2-1 ............................ Passed 5.21 sec; Start 233: mp3-grad1; 223/411 Test #231: mp2p5-grad1 ...................... Passed 2.87 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 1.98 sec; Start 235: mp2-property; 225/411 Test #232: mp2p5-grad2 ...................... Passed 3.12 sec; Start 236: mpn-bh; 226/411 Test #168: dft1 ............................. Passed 97.74 sec; Start 237: nbody-he-cluster; 227/411 Test #234: mp3-grad2 ........................ Passed 2.56 sec; Start 238: nbody-intermediates; 228/411 Test #235: mp2-property ..................... Passed 3.54 sec; Start 239: numpy-array-interface; 229/411 Test #236: mpn-bh ........................... Passed 3.71 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 241: ocepa-grad1; 231/411 Test #145: dfomp2-grad3 ..................... Passed 155.00 sec; Start 242: ocepa-grad2; 232/411 Test #206: ghosts ........................... Passed 33.52 sec; Start 243: ocepa1; 233/411 Test #241: ocepa-grad1 ...................... Passed 3.37 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 2.50 sec; Start 245: ocepa3; 235/411 Test #155: dfscf-bz2 ........................ Passed 142.25 sec; Start 246: omp2-1; 236/411 Test #246: omp2-1 ........................... Passed 2.41 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 14.13 sec; Start 248: omp2-3; 238/411 Test #247: omp2-2 ........................... Passed 10.28 sec; Start 249: omp2-4; 239/411 Test #219: mints-benchmark .................. Passed 43.79 sec; Start 250: omp2-5; 240/411 Test #248: omp2-3 ........................... Passed 13.55 sec; Start 251: omp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:21397,interface,interface,21397,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['interface'],['interface']
Integrability," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2273,Contract,Contracted,2273,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,2,['Contract'],['Contracted']
Integrability," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1875,protocol,protocol,1875,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476,2,"['Message', 'protocol']","['Message', 'protocol']"
Integrability," test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H']",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12426,rout,routine,12426,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability," the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000000. Printing out the relevant lines from the Psithon --> Python processed input file:; H6 1.51000000 0.78000000 0 44000000; H7 2.97000000 1.82000000 0.70000000; H8 1.58000000 2.16000000 -0.43000000; """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1215,message,message,1215,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,1,['message'],['message']
Integrability," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1038,integrat,integration,1038,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['integrat'],['integration']
Integrability," type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" have the same meaning as it's bra counterpart loop? Admittedly, the answer to this question is not entirely clear to me. However, my immediate hunch is yes. The reason why, is because (nu_max | nu_max)^1/2 is also present in the preselection condition definition. Without an explicit definition of (nu_max | nu_max)^1/2 in the paper, it would have to be guessed that (nu_max | nu_max)^1/2 has an analogous definition to (mu_max | mu_max)^1/2, but for ""ket"" shell pairs. If this were the case, it would imply that the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" would be a pair of loops, one looping over bra shell pair types, and one looping over ket shell pair types. . Again, this is simply my interpretation of the matter. Do let me know what you think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:3119,contract,contraction,3119,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,2,['contract'],['contraction']
Integrability," what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contribute to the code. In particular, we are willing to...""_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:1596,depend,depends,1596,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,2,['depend'],['depends']
Integrability,"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True); Nmol1 = mol.fragments[0][1] - mol.fragments[0][0] + 1; Nmol2 = mol.fragments[1][1] - mol.fragments[1][0] + 1; ; (p4dev37) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir37/asdf: (mp2d) git diff ../../psi4/driver/qcdb/psiutil.py; diff --git a/psi4/driver/qcdb/psiutil.py b/psi4/driver/qcdb/psiutil.py; index abb8e76..76eb6a7 100644; --- a/psi4/driver/qcdb/psiutil.py; +++ b/psi4/driver/qcdb/psiutil.py; @@ -291,7 +291,7 @@ def compare_arrays(expected, computed, digits, label, verbose=1):; ; ; def query_yes_no(question, default=True):; - """"""Ask a yes/no question via raw_input() and return their answer.; + """"""Ask a yes/no question via input() and return their answer.; ; *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; @@ -316,7 +316,7 @@ def query_yes_no(qu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2992,rout,route,2992,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,1,['rout'],['route']
Integrability,"""Gradient per KS-MO"" does _not_ ""just require exposing it."" First, you need to define it properly. Exact exchange depends on two KS-MOs, not just one, so it isn't clear to me how you'd meaningfully define this as a one KS-MO property. Then, you'd need to implement it, since Psi4 doesn't do this naturally. You'd probably need to decompose the density as a sum of densities for each MO and run the gradient computation on each, so a gradient computation takes #MO's times longer. This should not be the default algorithm. Putting the gradient terms on the wavefunction as array variables seems relatively straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578:114,depend,depends,114,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578,2,['depend'],['depends']
Integrability,"""This means the reference state is not stable."" In other words, the SCF solver landed on an excited state, but our algorithm is designed to work only on local minima. You'll need to land on the minimum, either by changing convergence settings such as initial guess or instability analysis. Without knowing more details about your system, I don't know which to recommend. Is the language of ""This means the reference state is not stable."" new to you? If it is, we may need to make the error message more explicit... This is an old issue, but I'd like to keep the issue list trimmer than it currently is. If there's no response from you in a week or so, I'll close this, but feel free to reopen afterwards if the issue isn't settled. Inadvertent excited states are bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748:490,message,message,490,https://psicode.org,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748,1,['message'],['message']
Integrability,"""gg"" is ""gau2grid"" which is a required dependency. that's built in to the dep list (search for ""nofortran"" build and click the little ""i"") https://anaconda.org/psi4/psi4/files, so I don't know how mamba let you install that psi4 without gau2grid. I'm not quite sure what you're trying to solve. iirc, the ambertools issue was a libgfortran one, so ideally defaults and c-f would get back in sync. I can build a new nofortran build for you, but not for several days. Alternately, you can try a dual-environment setup keeping psi in a defaults-based env and keeping c-f based deps in a c-f-based env. There's a gha that models that at [github/workflows/ecosys](https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml). If you continue with the nofortran build, be aware that in psi4 current master, py37 isn't supported, libint is now v2, and libxc is v5.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125631043:39,depend,dependency,39,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125631043,1,['depend'],['dependency']
Integrability,"""pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]"". Well, that's not really true: it depends on your integrals driver. If your program handles everything as general contractions, then segmented basis sets are slower. If it handles everything as segmented contractions, then general contracted basis sets are **much much** slower...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241127272:132,depend,depends,132,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241127272,4,"['contract', 'depend']","['contracted', 'contractions', 'depends']"
Integrability,"## Known Bugs for RC1. * [ ] Functionals wrong, [description](https://github.com/psi4/psi4/pull/961#issuecomment-385090273). Only seen for one computer, so just watch and report.; * [x] FCIDUMP for UHF refs failing, [description](https://github.com/psi4/psi4/issues/980). Shows up [in test case](https://github.com/psi4/psi4/blob/master/tests/fcidump/input.dat#L15-L23), currently suppressed.; * [x] New `MemJK` gives wrong answers when auxiliary basis is Cartesian, [for description, search ""cart"" here](https://github.com/psi4/psi4/pull/961); * [ ] ERD and SIMINT show all sorts of broken-like behavior upon interface. Only compilation I've gotten to work is a pure-GNU one, none with Intel. So some Intel vectorization operation is the suspect (though why is it still failing with debug ...).; * EDIT: simint problem is with Intel 2018 compilers; * 13 Jun EDIT: reasonable simint + Intel workaround is to compile simint with Intel 2017 compilers and feed that to a Psi4 compiled with Intel 2018. This is what's happening for the conda packages; * 13 Jun EDIT: ERD interface is broken and probably has been throughout v1.1. Possibly will be deprecated unless there's an uproar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-385264655:610,interface,interface,610,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-385264655,2,['interface'],['interface']
Integrability,"#### filesystem. By my survey, libfilesystem occurs at:; - [ ] plugins. due for an overhaul. Skipping plugin use on Windows until overhaul seems reasonable to me.; - [x] fisapt. dependency removed in #1098 ; - [x] libcubeprop/cubeprop. dependency removed in #1098 ; - [x] libefp. libefp itself removed from c-side in #953 ; - [ ] libcubeprop/csg. libfilesystem dependency remains. The libcubeprop/csg filesys calls are harder to migrate because they're at the bottom of the call stack. But I also recall that you had cubeprop test cases working already on Windows. Is it worth finishing off libcubeprop/csg? Or is the situation as outlined stable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-406507542:178,depend,dependency,178,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-406507542,3,['depend'],['dependency']
Integrability,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:983,message,message,983,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['message'],['message']
Integrability,#281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.01 sec; Start 260: omp3-3; 65/412 Test #205: frac-ip-fitting .................. Passed 76.46 sec; Start 390: python-pubchem; 66/412 Test #206: frac-traverse .................... Passed 244.37 sec; Start 62: cc44; 67/412 Test #293: psimrcc-fd-freq2 ................. Passed 85.30 sec; Start 261: omp3-4; 68/412 Test #193: fd-freq-energy ................... Passed 63.85 sec; Start 116: dcft9; 69/412 Test #168: dft-b3lyp ........................ Passed 82.97 sec; Start 298: pubchem1; 70/412 Test #26: cc13a ............................ Passed 316.11 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 82.21 sec; Start 21: cc1; 72/412 Test #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs-xtpl-nbody; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 98.26 sec; Start 28: cc13c; 75/412 Test #114: dcft7 ............................ Passed 323.56 sec; Start 27: cc13b; 76/412 Test #260: omp3-3 ........................... Passed 91.31 sec; Start 245: ocepa2; 77/412 Test #62: cc44 ............................. Passed 89.37 sec; Start 264: omp3-grad2; 78/412 Test #261: omp3-4 ........................... Passed 96.80 sec; Start 101: ci-property; 79/412 Test #298: pubchem1 ......................... Passed 86.18 sec; Start 251: omp2-5; 80/412 Test #116: dcft9 ............................ Passed 108.41 sec; Start 250: omp2-4; 81/412 Test #44: cc28 ............................. Passed 98.15 sec; Start 262: omp3-5; 82/412 Test #317: sapt2 ............................ Passed 372.09 sec; Start 257: omp2p5-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:7059,wrap,wrapper,7059,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['wrap'],['wrapper']
Integrability,#327: scf-bz2 .......................... Passed 127.64 sec; Start 109: dcft1; 84/413 Test #65: cc47 ............................. Passed 41.31 sec; Start 20: cbs-xtpl-wrapper; 85/413 Test #282: opt-irc-1 ........................ Passed 95.47 sec; Start 258: omp2p5-grad2; 86/413 Test #158: dfomp2p5-grad2 ................... Passed 61.57 sec; Start 144: dfomp2-4; 87/413 Test #35: cc19 ............................. Passed 58.05 sec; Start 319: sapt3; 88/413 Test #194: fd-freq-energy ................... Passed 85.55 sec; Start 82: cc9; 89/413 Test #64: cc46 ............................. Passed 87.60 sec; Start 153: dfomp2p5-2; 90/413 Test #207: frac-traverse .................... Passed 238.30 sec; Start 321: sapt5; 91/413 Test #258: omp2p5-grad2 ..................... Passed 77.83 sec; Start 294: psimrcc-fd-freq2; 92/413 Test #109: dcft1 ............................ Passed 84.01 sec; Start 67: cc49; 93/413 Test #144: dfomp2-4 ......................... Passed 69.24 sec; Start 79: cc8a; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/413 Test #153: dfomp2p5-2 ....................... Passed 53.80 sec; Start 81: cc8c; 97/413 Test #319: sapt3 ............................ Passed 78.68 sec; Start 206: frac-ip-fitting; 98/413 Test #82: cc9 .............................. Passed 72.01 sec; Start 391: python-pubchem; 99/413 Test #79: cc8a ............................. Passed 45.79 sec; Start 57: cc4; 100/413 Test #67: cc49 ............................. Passed 49.51 sec; Start 142: dfomp2-2; 101/413 Test #321: sapt5 ............................ Passed 77.16 sec; Start 247: ocepa3; 102/413 Test #294: psimrcc-fd-freq2 ................. Passed 73.49 sec; Start 169: dft-b3lyp; 103/413 Test #83: cc9a ............................. Passed 45.91 sec; Start 12: cbs-parser; 104/413 Test #78: cc8 .............................. Passed 64.94 sec; Start 34: cc18; 105/413 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:9024,wrap,wrapper,9024,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['wrap'],['wrapper']
Integrability,"#; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wiberg Bond Indices using Orthogonal Lowdin Orbitals:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.92373852221608 0.92373852221608; 401: 2 0.92373852221608 0.00000000000000 0.00699264970980; 401: 3 0.92373852221608 0.00699264970980 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.8474770; 401: 2: 0.9307312; 401: 3: 0.9307312; 401: ; 401: ; 401: *** tstop() called on computer06 at Mon Jul 9 14:44:29 2018; 401: Traceback (most recent call last):; 401: File ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.py"", line 120, in <module>; 401: psi4.compare_values(expected_properties[k], json_data[""properties""][k], 6, k.upper()) #TEST; 401: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; 401: raise TestComparisonError(message); 401: psi4.driver.p4util.exceptions.TestComparisonError: 	SCF_ONE_ELECTRON_ENERGY: computed value (-122.2750930) does not match (-122.2750911) to 6 digits.; 401: Module time:; 401: 	user time = 0.48 seconds = 0.01 minutes; 401: 	system time = 0.02 seconds = 0.00 minutes; 401: 	total time = 0 seconds = 0.00 minutes; 401: Total time:; 401: 	user time = 0.48 seconds = 0.01 minutes; 401: 	system time = 0.02 seconds = 0.00 minutes; 401: 	total time = 0 seconds = 0.00 minutes; 401: 	JSON Success......................................................PASSED; 401: 	Result: DIPOLE....................................................PASSED; 401: 	Result: QUADRUPOLE................................................PASSED; 401: 	Result: MULLIKEN_CHARGES..........................................PASSED; 401: 	Result: LOWDIN_CHARGES............................................PASSED; 401: 	Result: WIBERG_LOWDIN_INDICES.....................................PASSED; 401: 	Result:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:9266,message,message,9266,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['message'],['message']
Integrability,"* Correct that the `pc` basis sets in the library are the segmented forms (https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L84-L96) and also that Psi can't handle general contractions.; * Your `scf_xtpl_halkier_[2,3]` suggestion makes a good deal of sense from a citation and code-reuse point of view. However, IIRC the last char of the function name is used as a check against the number of basis set zetas supplied, which the `[2,3]` would break. I may no claims that `cbs()` is a shining design example. If you want to alias `corl_xtpl_halkier_2 = corl_xtpl_helgaker_2`, it's fine by me. Names should just be as simple as possible since ppl need to remember them to type into an input file.; * Quite right that the `alpha` doesn't get passed through; somehow, there's never been a demand for it. If you want to tackle passing it through, I'd be grateful. I think `cbs_alpha` for the kwarg name would be simplest and `cbs_delta_alpha` if stage (scf/corl/delta/delta2) differentiation is necessary. Can do something like `corl_alpha = kwargs.get('cbs_corl_alpha', kwargs.get('cbs_alpha', None))` before the call to the xtpl fn, then alpha=1.63 if alpha is not None within the xtpl fn.; * Your plan sounds good to me. If you would,; * Write up the docstrings along the lines of those in [this file](https://github.com/qcdb/qcdb/blob/master/qcdb/driver/cbs_helpers.py) which is where these functions are heading next. (I can't cherry-pick to retain commit info between repositories, but I can commit with co-authors, so it shows up on your GH record.); * For the extrapolation of gradients, if you're choosing between `psi4.core.Matrix` operations and `np.ndarray` operations, please prefer the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381446177:192,contract,contractions,192,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381446177,2,['contract'],['contractions']
Integrability,"* Hmm, if you click on ""More information"" on pc-seg4 on EMSL, you get ""Polarization Consistent Valence Pentuble Zeta, Segmented Contracted"". So that's my source iirc, but EMSL has low authority these days. Yes, please do switch to `N+2` in NOTES in this PR. Thanks for the better information.; * `delta N > 2` should probably be rewritten to be extensible w/o copy-paste-sed, so don't bother future-proofing in that respect.; * General plan is that parts of the driver that are generic quantum chemistry should be useable w/o a psi4 dependence, hence the separate qcdb repo. Glad to explain in more detail later. No need to rebase off anything but psi4/psi4 master.; * Sorry, I should have worded that better. Yes, the xtpl fns want `psi4.core.Matrix` for gradient/Hessian extrapolations as input and output. But for all the manipulations of those arrays, you have the choice of keeping them as `Matrix` and using psi internals or to grabbing them as numpy arrays and using all the numpy manipulation syntax then returning to `Matrix` at the end. I just meant to say that if you're facing this choice, choose NumPy because the next version is going to take and return `ndarray`, not `psi4.core.Matrix`. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381609280:128,Contract,Contracted,128,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381609280,2,"['Contract', 'depend']","['Contracted', 'dependence']"
Integrability,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:728,message,message,728,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711,2,['message'],['message']
Integrability,"* I think the old versions of routines we want to outright delete (when some cutting edge LAPACK comes out w/o those symbols, we want to be able to link to it).; * Agree that there's no way we want to get math detection involved.; * I think the new versions of routines should be added, checked that they link properly against a `DGGSVD3`-capable LAPACK, then commented out, and a note left in developers wish list to check travis periodically for reactivation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171:30,rout,routines,30,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171,2,['rout'],['routines']
Integrability,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:293,depend,dependencies,293,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['depend'],['dependencies']
Integrability,"* [ ] Remove the unused `PseudospectralGrid` class from `cubature.cc` and references to it throughout the code (particularly `read_options.cc`).; * [ ] Refactor the `DFTGrid` class so that the constructor accepts a single `std::map<std::string, std::any>` map instead of individual maps of different data types as noted [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L4314).; * [ ] Remove the dependence of the `DFTGrid` on global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135:428,depend,dependence,428,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135,1,['depend'],['dependence']
Integrability,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:335,synchroniz,synchronize,335,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867,1,['synchroniz'],['synchronize']
Integrability,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:187,depend,dependencies,187,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,2,"['depend', 'wrap']","['dependencies', 'wrapped']"
Integrability,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234531219:116,interface,interface,116,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219,4,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239526159:364,INTERFACE,INTERFACE,364,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependencies']"
Integrability,- [ ] Examine `properties` function in driver (that encodes the extended workflows beyond sp or time-trivial keyword needed to compute CC properties) and the `oeprop` syntax that most all other methods use. Devise and implement a unified interface that still works with the code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-341899122:238,interface,interface,238,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341899122,1,['interface'],['interface']
Integrability,"- [ ] Rename the `DFTGrid` class to `IntegrationGrid`. As written, it's confusing that non-DFT classes use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523:37,Integrat,IntegrationGrid,37,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523,1,['Integrat'],['IntegrationGrid']
Integrability,"- [x] Can libmints get away with not having `MAX_AM_ERI` passed to it? That way one could switch out `libint.so`s on the fly (conda can do this). Would have to find a way to still exit gracefully if insufficient AM and give decent error messages. EDIT: Can't be done, as the header sets data structure sizes as well. Settling on AM=8 for conda linux instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-334617561:237,message,messages,237,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-334617561,1,['message'],['messages']
Integrability,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5270,interface,interfaced,5270,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['interface'],['interfaced']
Integrability,"-72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2146,rout,route,2146,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,1,['rout'],['route']
Integrability,-dhdf .................. Passed 102.93 sec; Start 92: cepa-module; 54/412 Test #182: fsapt-allterms ................... Passed 579.58 sec; Start 320: sapt5; 55/412 Test #280: opt14 ............................ Passed 94.37 sec; Start 70: cc51; 56/412 Test #194: fd-freq-energy-large ............. Passed 545.92 sec; Start 76: cc6; 57/412 Test #318: sapt3 ............................ Passed 99.92 sec; Start 293: psimrcc-fd-freq2; 58/412 Test #47: cc30 ............................. Passed 48.45 sec; Start 205: frac-ip-fitting; 59/412 Test #326: scf-bz2 .......................... Passed 165.53 sec; Start 168: dft-b3lyp; 60/412 Test #92: cepa-module ...................... Passed 64.56 sec; Start 193: fd-freq-energy; 61/412 Test #281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.01 sec; Start 260: omp3-3; 65/412 Test #205: frac-ip-fitting .................. Passed 76.46 sec; Start 390: python-pubchem; 66/412 Test #206: frac-traverse .................... Passed 244.37 sec; Start 62: cc44; 67/412 Test #293: psimrcc-fd-freq2 ................. Passed 85.30 sec; Start 261: omp3-4; 68/412 Test #193: fd-freq-energy ................... Passed 63.85 sec; Start 116: dcft9; 69/412 Test #168: dft-b3lyp ........................ Passed 82.97 sec; Start 298: pubchem1; 70/412 Test #26: cc13a ............................ Passed 316.11 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 82.21 sec; Start 21: cc1; 72/412 Test #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs-xtpl-nbody; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 98.26 sec; Start 28: cc13,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:6305,wrap,wrapper,6305,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['wrap'],['wrapper']
Integrability,-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Passed 0.78 sec; Start 9: castup2; 199/401 Test #359: options1 ......................... Passed 0.67 sec; Start 10: castup3; 200/401 Test #122: dfccsd1 .......................... Passed 3.17 sec; Start 12: cbs-parser; 201/401 Test #123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; Start 19: cbs-xtpl-wrapper; 204/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 1.39 sec; Start 84: cepa0-grad1; 205/401 Test #289: psimrcc-pt2 ...................... Passed 1.11 sec; Start 85: cepa0-grad2; 206/401 Test #290: psimrcc-sp1 ...................... Passed 2.98 sec; Start 86: cepa1; 207/401 Test #84: cepa0-grad1 ...................... Passed 2.32 sec; Start 87: cepa2; 208/401 Test #85: cepa0-grad2 ...................... Passed 4.19 sec; Start 88: cepa3; 209/401 Test #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:19097,wrap,wrapper,19097,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['wrap'],['wrapper']
Integrability,.. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 25.10 sec; Start 175: docs-bases; 385/412 Test #379: mints12 .......................... Passed 23.88 sec; Start 216: mints4; 386/412 Test #335: scf3 ............................. Passed 23.31 sec; Start 309: pywrap-db3; 387/412 Test #405: json-schema-1-properties ......... Passed 23.98 sec; Start 365: options1; 388/412 Test #310: pywrap-molecule .................. Passed 23.01 sec; Start 403: json-schema-1-throws; 389/412 Test #388: python-energy .................... Passed 23.44 sec; Start 399: json-v11-gradient; 390/412 Test #383: psi4numpy-rhf .................... Passed 23.40 sec; Start 4: casscf-semi; 391/412 Test #210: mcscf1 ........................... Passed 23.77 sec; Start 5: casscf-sa-sp; 392/412 Test #240: numpy-array-interface ............ Passed 22.55 sec; Start 7: casscf-sp; 393/412 Test #410: skeletonscf ...................... Passed 23.60 sec; Start 88: cepa1; 394/412 Test #212: mcscf3 ........................... Passed 23.17 sec; Start 119: dfcasscf-fzc-sp; 395/412 Test #217: mints5 ........................... Passed 23.23 sec; Start 224: molden1; 396/412 Test #176: docs-dft ......................... Passed 23.17 sec; Start 314: rasscf-sp; 397/412 Test #209: matrix1 .......................... Passed 22.15 sec; 398/412 Test #213: mints1 ........................... Passed 22.39 sec; 399/412 Test #175: docs-bases ....................... Passed 22.12 sec; 400/412 Test #216: mints4 ........................... Passed 22.12 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 21.36 sec; 402/412 Test #365: options1 ......................... Passed 21.37 sec; 403/412 Test #403: json-schema-1-throws ............. Passed 21.81 sec; 404/412 Test #399: json-v11-gradien,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:37069,interface,interface,37069,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['interface'],['interface']
Integrability,.. Passed 240.35 sec; Start 293: psimrcc-fd-freq2; 63/412 Test #280: opt14 ............................ Passed 89.39 sec; Start 250: omp2-4; 64/412 Test #76: cc6 .............................. Passed 91.93 sec; Start 193: fd-freq-energy; 65/412 Test #231: mp2-module ....................... Passed 98.50 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #318: sapt3 ............................ Passed 86.10 sec; Start 264: omp3-grad2; 67/412 Test #17: cbs-xtpl-opt ..................... Passed 106.20 sec; Start 257: omp2p5-grad2; 68/412 Test #262: omp3-5 ........................... Passed 82.61 sec; Start 205: frac-ip-fitting; 69/412 Test #320: sapt5 ............................ Passed 85.03 sec; Start 300: pywrap-alias; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... Passed 98.56 sec; Start 81: cc8c; 76/412 Test #300: pywrap-alias ..................... Passed 77.65 sec; Start 261: omp3-4; 77/412 Test #257: omp2p5-grad2 ..................... Passed 88.65 sec; Start 390: python-pubchem; 78/412 Test #264: omp3-grad2 ....................... Passed 104.13 sec; Start 44: cc28; 79/412 Test #62: cc44 ............................. Passed 81.07 sec; Start 116: dcft9; 80/412 Test #19: cbs-xtpl-nbody ................... Passed 123.53 sec; Start 58: cc40; 81/412 Test #114: dcft7 ............................ Passed 416.24 sec; Start 83: cc9a; 82/412 Test #317: sapt2 ............................ Passed 390.46 sec; Start 35: cc19; 83/412 Test #81: cc8c ............................. Passed 62.89 sec; Start 251: omp2-5; 84/412 Test #168,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:7184,wrap,wrapper,7184,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['wrap'],['wrapper']
Integrability,.. Passed 3.13 sec; Start 229: mp2-grad2; 219/411 Test #218: mints8 ........................... Passed 15.91 sec; Start 230: mp2-module; 220/411 Test #228: mp2-grad1 ........................ Passed 3.46 sec; Start 231: mp2p5-grad1; 221/411 Test #229: mp2-grad2 ........................ Passed 3.65 sec; Start 232: mp2p5-grad2; 222/411 Test #226: mp2-1 ............................ Passed 5.21 sec; Start 233: mp3-grad1; 223/411 Test #231: mp2p5-grad1 ...................... Passed 2.87 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 1.98 sec; Start 235: mp2-property; 225/411 Test #232: mp2p5-grad2 ...................... Passed 3.12 sec; Start 236: mpn-bh; 226/411 Test #168: dft1 ............................. Passed 97.74 sec; Start 237: nbody-he-cluster; 227/411 Test #234: mp3-grad2 ........................ Passed 2.56 sec; Start 238: nbody-intermediates; 228/411 Test #235: mp2-property ..................... Passed 3.54 sec; Start 239: numpy-array-interface; 229/411 Test #236: mpn-bh ........................... Passed 3.71 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 241: ocepa-grad1; 231/411 Test #145: dfomp2-grad3 ..................... Passed 155.00 sec; Start 242: ocepa-grad2; 232/411 Test #206: ghosts ........................... Passed 33.52 sec; Start 243: ocepa1; 233/411 Test #241: ocepa-grad1 ...................... Passed 3.37 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 2.50 sec; Start 245: ocepa3; 235/411 Test #155: dfscf-bz2 ........................ Passed 142.25 sec; Start 246: omp2-1; 236/411 Test #246: omp2-1 ........................... Passed 2.41 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 14.13 sec; Start 248: omp2-3; 238/411 Test #247: omp2-2 ........................... Passed 10.28 sec; Start 249: omp2-4; 239/411 Test #219: mints-benchmark .................. Passed 43.79 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:21260,interface,interface,21260,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['interface'],['interface']
Integrability,.... Passed 4.55 sec; Start 327: scf-guess-read1; 325/411 Test #399: json-schema-1-energy ............. Passed 3.99 sec; Start 121: dfccdl1; 326/411 Test #257: omp3-1 ........................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 327/411 Test #284: props1 ........................... Passed 5.03 sec; Start 4: casscf-semi; 328/411 Test #243: ocepa1 ........................... Passed 6.83 sec; Start 246: omp2-1; 329/411 Test #327: scf-guess-read1 .................. Passed 2.70 sec; Start 363: zaptn-nh2; 330/411 Test #377: pywrap-align-chiral .............. Passed 3.07 sec; Start 314: sad1; 331/411 Test #388: python-curve ..................... Passed 4.00 sec; Start 253: omp2p5-1; 332/411 Test #121: dfccdl1 .......................... Passed 4.11 sec; Start 397: json-v11-energy; 333/411 Test #363: zaptn-nh2 ........................ Passed 2.47 sec; Start 384: psi4numpy-rhf-hessian; 334/411 Test #246: omp2-1 ........................... Passed 4.32 sec; Start 239: numpy-array-interface; 335/411 Test #314: sad1 ............................. Passed 3.56 sec; Start 213: mints2; 336/411 Test #239: numpy-array-interface ............ Passed 0.68 sec; Start 328: scf-upcast-custom-basis; 337/411 Test #295: psithon1 ......................... Passed 9.99 sec; Start 391: python-mints2; 338/411 Test #397: json-v11-energy .................. Passed 4.06 sec; Start 119: dfcasscf-sp; 339/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.87 sec; Start 120: dfccd1; 340/411 Test #213: mints2 ........................... Passed 3.23 sec; Start 203: frac; 341/411 Test #328: scf-upcast-custom-basis .......... Passed 3.10 sec; Start 355: tu3-h2o-opt; 342/411 Test #253: omp2p5-1 ......................... Passed 6.90 sec; Start 210: mcscf2; 343/411 Test #4: casscf-semi ...................... Passed 8.94 sec; Start 116: ao-dfcasscf-sp; 344/411 Test #391: python-mints2 .................... Passed 2.70 sec; Start 406: skeletonaointegrals; 345/411 Test #119: dfcasscf-sp ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:31244,interface,interface,31244,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['interface'],['interface']
Integrability,..... Passed 2.33 sec; Start 285: psimrcc-ccsd_t-3; 364/401 Test #115: ao-dfcasscf-sp ................... Passed 3.19 sec; Start 283: psimrcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35455,interface,interface,35455,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['interface'],['interface']
Integrability,...... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start 215: mints4; 393/411 Test #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs-bases; 394/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 402: json-schema-1-throws; 395/411 Test #411: skeletonwavefunction ............. Passed 2.89 sec; Start 87: cepa1; 396/411 Test #311: rasci-h2o ........................ Passed 4.54 sec; 397/411 Test #211: mcscf3 ........................... Passed 1.29 sec; 398/411 Test #334: scf3 ............................. Passed 1.23 sec; 399/411 Test #208: matrix1 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:36533,interface,interface,36533,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['interface'],['interface']
Integrability,....... Passed 2.06 sec; Start 137: dfmp2-grad2; 351/413 Test #353: dft-reference .................... Passed 3.64 sec; Start 354: stability2; 352/413 Test #273: opt5 ............................. Passed 7.47 sec; Start 300: pubchem2; 353/413 Test #205: frac ............................. Passed 8.25 sec; Start 271: opt3; 354/413 Test #216: mints3 ........................... Passed 2.75 sec; Start 335: scf2; 355/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 3.01 sec; Start 356: tu2-ch2-energy; 356/413 Test #190: fci-tdm .......................... Passed 2.43 sec; Start 241: numpy-array-interface; 357/413 Test #364: x2c3 ............................. Passed 3.21 sec; Start 312: rasci-c2-active; 358/413 Test #181: fsapt2 ........................... Passed 5.35 sec; Start 351: sapt-sf1; 359/413 Test #97: cisd-h2o-clpse ................... Passed 2.35 sec; Start 331: scf-guess-read2; 360/413 Test #300: pubchem2 ......................... Passed 1.65 sec; Start 259: omp3-1; 361/413 Test #241: numpy-array-interface ............ Passed 0.85 sec; Start 347: dfep2-2; 362/413 Test #354: stability2 ....................... Passed 2.54 sec; Start 334: scf-occ; 363/413 Test #356: tu2-ch2-energy ................... Passed 1.48 sec; Start 87: cepa0-grad2; 364/413 Test #335: scf2 ............................. Passed 3.66 sec; Start 86: cepa0-grad1; 365/413 Test #351: sapt-sf1 ......................... Passed 2.53 sec; Start 218: mints5; 366/413 Test #347: dfep2-2 .......................... Passed 2.64 sec; Start 366: options1; 367/413 Test #388: cookbook-rohf-orb-rot ............ Passed 255.11 sec; Start 217: mints4; 368/413 Test #218: mints5 ........................... Passed 1.11 sec; Start 345: stability1; 369/413 Test #366: options1 ......................... Passed 0.73 sec; Start 332: scf-bs; 370/413 Test #217: mints4 ........................... Passed 0.72 sec; Start 290: psimrcc-ccsd_t-2; 371/413 Test #334: scf-occ .......................... Passed 3.43 sec; Start 214,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:34040,interface,interface,34040,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['interface'],['interface']
Integrability,....... Passed 2.15 sec; Start 397: python-memdfjk; 377/412 Test #354: tu1-h2o-energy ................... Passed 1.49 sec; Start 401: json-schema-1-ghost; 378/412 Test #223: mints10 .......................... Passed 1.74 sec; Start 379: mints12; 379/412 Test #103: decontract ....................... Passed 1.22 sec; Start 310: pywrap-molecule; 380/412 Test #396: python-mints13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Test #215: mints3 ........................... Passed 1.10 sec; Start 335: scf3; 382/412 Test #411: skeletonsointegrals .............. Passed 1.45 sec; Start 212: mcscf3; 383/412 Test #355: tu2-ch2-energy ................... Passed 1.26 sec; Start 217: mints5; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.45 sec; Start 210: mcscf1; 385/412 Test #405: json-schema-1-properties ......... Passed 1.24 sec; Start 383: psi4numpy-rhf; 386/412 Test #221: mints-helper ..................... Passed 1.60 sec; Start 240: numpy-array-interface; 387/412 Test #399: json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:36415,interface,interface,36415,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['interface'],['interface']
Integrability,........ Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36404,interface,interface,36404,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['interface'],['interface']
Integrability,......... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 sec; Start 313: rasci-h2o; 381/413 Test #332: scf-bs ........................... Passed 1.21 sec; Start 330: scf-upcast-custom-basis; 382/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passed 1.04 sec; Start 214: mints1; 390/413 Test #366: options1 ......................... Passed 0.66 sec; Start 177: docs-dft; 391/413 Test #300: pubchem2 ......................... Passed 1.76 sec; Start 211: mcscf1; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec; Start 210: matrix1; 397/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:36556,interface,interface,36556,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['interface'],['interface']
Integrability,"......... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Passed 14.91 sec; Start 209: matrix1; 401/412 Test #240: numpy-array-interface ............ Passed 13.74 sec; Start 176: docs-dft; 402/412 Test #213: mints1 ........................... Passed 14.04 sec; Start 365: options1; 403/412 Test #309: pywrap-db3 ....................... Passed 13.36 sec; Start 403: json-schema-1-throws; 404/412 Test #175: docs-bases ....................... Passed 13.52 sec; Start 88: cepa1; 405/412 Test #216: mints4 ........................... Passed 13.68 sec; 406/412 Test #209: matrix1 .......................... Passed 13.44 sec; 407/412 Test #410: skeletonscf ...................... Passed 14.54 sec; 408/412 Test #176: docs-dft ......................... Passed 13.56 sec; 409/412 Test #365: options1 ......................... Passed 12.94 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 12.51 sec; 411/412 Test #88: cepa1 ............................ Passed 15.83 sec; 412/412 Test #319: sapt4 ............................ Passed 1912.45 sec. 100% tests passed, 0 tests failed out of 412. Labe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:37679,interface,interface,37679,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['interface'],['interface']
Integrability,".......... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0.69 sec; Start 364: options1; 398/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 175: docs-dft; 399/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 402: json-schema-1-throws; 400/411 Test #212: mints1 ........................... Passed 0.55 sec; Start 174: docs-bases; 401/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 215: mints4; 402/411 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 208: matrix1; 403/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #175: docs-dft ......................... Passed 0.60 sec; 406/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; 407/411 Test #174: docs-bases ....................... Passed 0.53 sec; 408/411 Test #215: mints4 ........................... Passed 0.51 sec; 409/411 Test #208: matrix1 .......................... Passed 0.51 sec; 410/411 Test #87: cepa1 ............................ Passed 1.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1890.44 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 66.55 sec*proc (2 tests); autotest = 2224.11 sec*proc (26 tests); cart = 16014.43 sec*proc (123 tests); cas = 59.03 sec*proc (1 test); casscf = 53.75 sec*proc (11 tests); cbs = 3517.28 s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:37633,interface,interface,37633,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['interface'],['interface']
Integrability,".......... Passed 6.09 sec; Start 123: dfccsdl1; 178/401 Test #305: pywrap-molecule .................. Passed 1.23 sec; Start 347: stability2; 179/401 Test #219: molden1 .......................... Passed 5.30 sec; Start 326: scf-bs; 180/401 Test #227: mp2p5-grad1 ...................... Passed 4.58 sec; Start 349: tu2-ch2-energy; 181/401 Test #348: tu1-h2o-energy ................... Passed 1.49 sec; Start 330: scf3; 182/401 Test #239: ocepa1 ........................... Passed 6.49 sec; Start 380: psi4numpy-rhf-gradient; 183/401 Test #115: ao-dfcasscf-sp ................... Passed 2.27 sec; Start 290: psimrcc-sp1; 184/401 Test #400: json-schema_0_gradient ........... Passed 1.81 sec; Start 101: decontract; 185/401 Test #376: cc-module, ....................... Passed 111.71 sec; Start 379: psi4numpy-rhf; 186/401 Test #393: python-memdfjk ................... Passed 1.80 sec; Start 205: mcscf1; 187/401 Test #349: tu2-ch2-energy ................... Passed 1.30 sec; Start 235: numpy-array-interface; 188/401 Test #326: scf-bs ........................... Passed 1.60 sec; Start 384: python-energy; 189/401 Test #330: scf3 ............................. Passed 1.38 sec; Start 204: matrix1; 190/401 Test #380: psi4numpy-rhf-gradient ........... Passed 1.41 sec; Start 359: options1; 191/401 Test #347: stability2 ....................... Passed 1.80 sec; Start 208: mints1; 192/401 Test #379: psi4numpy-rhf .................... Passed 0.87 sec; Start 284: psimrcc-ccsd_t-2; 193/401 Test #235: numpy-array-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Pa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:17595,interface,interface,17595,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['interface'],['interface']
Integrability,........... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 101.66 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 311.67 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 122.44 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 120.35 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2648,wrap,wrapper,2648,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['wrap'],['wrapper']
Integrability,........... Passed 1.96 sec; Start 347: dfep2-2; 367/413 Test #336: scf3 ............................. Passed 1.57 sec; Start 300: pubchem2; 368/413 Test #354: stability2 ....................... Passed 2.80 sec; Start 356: tu2-ch2-energy; 369/413 Test #335: scf2 ............................. Passed 3.39 sec; Start 290: psimrcc-ccsd_t-2; 370/413 Test #97: cisd-h2o-clpse ................... Passed 2.89 sec; Start 122: dfccd1; 371/413 Test #351: sapt-sf1 ......................... Passed 1.54 sec; Start 332: scf-bs; 372/413 Test #86: cepa0-grad1 ...................... Passed 4.82 sec; Start 241: numpy-array-interface; 373/413 Test #356: tu2-ch2-energy ................... Passed 1.07 sec; Start 218: mints5; 374/413 Test #347: dfep2-2 .......................... Passed 2.24 sec; Start 329: scf-guess-read1; 375/413 Test #300: pubchem2 ......................... Passed 1.45 sec; Start 366: options1; 376/413 Test #334: scf-occ .......................... Passed 3.01 sec; Start 217: mints4; 377/413 Test #241: numpy-array-interface ............ Passed 0.81 sec; Start 289: psimrcc-ccsd_t-1; 378/413 Test #332: scf-bs ........................... Passed 1.53 sec; Start 136: dfmp2-grad1; 379/413 Test #345: stability1 ....................... Passed 3.12 sec; Start 214: mints1; 380/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.93 sec; Start 6: ao-casscf-sp; 381/413 Test #218: mints5 ........................... Passed 0.97 sec; Start 120: dfcasscf-fzc-sp; 382/413 Test #366: options1 ......................... Passed 0.75 sec; Start 212: mcscf2; 383/413 Test #217: mints4 ........................... Passed 0.66 sec; Start 313: rasci-h2o; 384/413 Test #138: dfmp2-grad3 ...................... Passed 3.98 sec; Start 123: dfccdl1; 385/413 Test #122: dfccd1 ........................... Passed 2.17 sec; Start 132: dfmp2-2; 386/413 Test #214: mints1 ........................... Passed 0.80 sec; Start 330: scf-upcast-custom-basis; 387/413 Test #121: dfcasscf-sp ...................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:35502,interface,interface,35502,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['interface'],['interface']
Integrability,........... Passed 3.76 sec; Start 211: mints4; 350/401 Test #171: docs-dft ......................... Passed 0.95 sec; Start 330: scf3; 351/401 Test #392: python-mints13 ................... Passed 2.38 sec; Start 380: psi4numpy-rhf-gradient; 352/401 Test #357: x2c3 ............................. Passed 2.63 sec; Start 349: tu2-ch2-energy; 353/401 Test #133: dfmp2-grad1 ...................... Passed 3.71 sec; Start 290: psimrcc-sp1; 354/401 Test #399: json-schema_0_throws ............. Passed 0.76 sec; Start 101: decontract; 355/401 Test #211: mints4 ........................... Passed 0.73 sec; Start 379: psi4numpy-rhf; 356/401 Test #170: docs-bases ....................... Passed 0.83 sec; Start 205: mcscf1; 357/401 Test #351: scf-response1 .................... Passed 1.97 sec; Start 384: python-energy; 358/401 Test #324: scf-upcast-custom-basis .......... Passed 2.26 sec; Start 204: matrix1; 359/401 Test #323: scf-guess-read1 .................. Passed 2.16 sec; Start 235: numpy-array-interface; 360/401 Test #356: x2c2 ............................. Passed 2.85 sec; Start 359: options1; 361/401 Test #328: scf-occ .......................... Passed 3.01 sec; Start 208: mints1; 362/401 Test #247: omp2-grad1 ....................... Passed 4.60 sec; Start 284: psimrcc-ccsd_t-2; 363/401 Test #400: json-schema_0_gradient ........... Passed 2.33 sec; Start 285: psimrcc-ccsd_t-3; 364/401 Test #115: ao-dfcasscf-sp ................... Passed 3.19 sec; Start 283: psimrcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:34100,interface,interface,34100,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['interface'],['interface']
Integrability,............ Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 100.99 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2648,wrap,wrapper,2648,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['wrap'],['wrapper']
Integrability,"............. Passed 1.08 sec; Start 209: mcscf1; 391/411 Test #378: mints12 .......................... Passed 1.17 sec; Start 188: fci-tdm; 392/411 Test #211: mcscf3 ........................... Passed 0.72 sec; Start 308: pywrap-db3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.79 sec; Start 239: numpy-array-interface; 394/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 409: skeletonscf; 395/411 Test #209: mcscf1 ........................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #188: fci-tdm .......................... Passed 0.71 sec; Start 364: options1; 397/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 212: mints1; 398/411 Test #214: mints3 ........................... Passed 1.04 sec; Start 402: json-schema-1-throws; 399/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 215: mints4; 400/411 Test #175: docs-dft ......................... Passed 0.58 sec; Start 216: mints5; 401/411 Test #239: numpy-array-interface ............ Passed 0.67 sec; Start 208: matrix1; 402/411 Test #364: options1 ......................... Passed 0.55 sec; Start 174: docs-bases; 403/411 Test #212: mints1 ........................... Passed 0.56 sec; Start 87: cepa1; 404/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; 405/411 Test #215: mints4 ........................... Passed 0.51 sec; 406/411 Test #208: matrix1 .......................... Passed 0.52 sec; 407/411 Test #216: mints5 ........................... Passed 0.56 sec; 408/411 Test #174: docs-bases ....................... Passed 0.51 sec; 409/411 Test #87: cepa1 ............................ Passed 1.77 sec; 410/411 Test #178: fsapt1 ........................... Passed 2075.85 sec; 411/411 Test #318: sapt4 ............................ Passed 1795.73 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 63.77 sec*proc (2 tests); autotest = 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:37462,interface,interface,37462,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['interface'],['interface']
Integrability,............. Passed 1.49 sec; Start 388: python-energy; 377/412 Test #379: mints12 .......................... Passed 1.64 sec; Start 406: skeleton; 378/412 Test #223: mints10 .......................... Passed 1.59 sec; Start 217: mints5; 379/412 Test #215: mints3 ........................... Passed 1.33 sec; Start 407: skeletonaointegrals; 380/412 Test #310: pywrap-molecule .................. Passed 1.44 sec; Start 355: tu2-ch2-energy; 381/412 Test #411: skeletonsointegrals .............. Passed 1.57 sec; Start 212: mcscf3; 382/412 Test #401: json-schema-1-ghost .............. Passed 1.49 sec; Start 383: psi4numpy-rhf; 383/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.69 sec; Start 189: fci-tdm; 384/412 Test #353: stability2 ....................... Passed 1.68 sec; Start 210: mcscf1; 385/412 Test #399: json-v11-gradient ................ Passed 1.41 sec; Start 335: scf3; 386/412 Test #405: json-schema-1-properties ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Start 410: skeletonscf; 392/412 Test #406: skeleton ......................... Passed 1.57 sec; Start 175: docs-bases; 393/412 Test #383: psi4numpy-rhf .................... Passed 1.25 sec; Start 216: mints4; 394/412 Test #212: mcscf3 ........................... Passed 1.34 sec; Start 209: matrix1; 395/412 Test #210: mcscf1 ........................... Passed 1.13 sec; Start 403: json-schema-1-throws; 396/412 Test #240: numpy-array-interface ............ Passed 0.83 sec; Start 88: cepa1; 397/412 Test #355: tu2-ch2-energy ................... Passed 1.66 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:36393,interface,interface,36393,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['interface'],['interface']
Integrability,.............. Passed 17.22 sec; Start 379: mints12; 387/412 Test #384: psi4numpy-rhf-gradient ........... Passed 16.81 sec; Start 388: python-energy; 388/412 Test #355: tu2-ch2-energy ................... Passed 16.29 sec; Start 310: pywrap-molecule; 389/412 Test #399: json-v11-gradient ................ Passed 16.02 sec; Start 383: psi4numpy-rhf; 390/412 Test #401: json-schema-1-ghost .............. Passed 16.97 sec; Start 335: scf3; 391/412 Test #397: python-memdfjk ................... Passed 16.57 sec; Start 217: mints5; 392/412 Test #405: json-schema-1-properties ......... Passed 15.81 sec; Start 212: mcscf3; 393/412 Test #379: mints12 .......................... Passed 16.68 sec; Start 210: mcscf1; 394/412 Test #388: python-energy .................... Passed 15.79 sec; Start 213: mints1; 395/412 Test #310: pywrap-molecule .................. Passed 15.68 sec; Start 410: skeletonscf; 396/412 Test #335: scf3 ............................. Passed 16.05 sec; Start 240: numpy-array-interface; 397/412 Test #383: psi4numpy-rhf .................... Passed 16.60 sec; Start 175: docs-bases; 398/412 Test #217: mints5 ........................... Passed 15.35 sec; Start 216: mints4; 399/412 Test #212: mcscf3 ........................... Passed 15.82 sec; Start 309: pywrap-db3; 400/412 Test #213: mints1 ........................... Passed 14.72 sec; Start 176: docs-dft; 401/412 Test #210: mcscf1 ........................... Passed 15.82 sec; Start 209: matrix1; 402/412 Test #410: skeletonscf ...................... Passed 15.75 sec; Start 365: options1; 403/412 Test #175: docs-bases ....................... Passed 14.47 sec; Start 403: json-schema-1-throws; 404/412 Test #216: mints4 ........................... Passed 14.79 sec; Start 88: cepa1; 405/412 Test #240: numpy-array-interface ............ Passed 15.57 sec; 406/412 Test #309: pywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:37266,interface,interface,37266,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['interface'],['interface']
Integrability,................ Passed 1.40 sec; Start 214: mints3; 379/404 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.22 sec; Start 387: python-energy; 380/404 Test #404: json-schema-1-properties ......... Passed 1.02 sec; Start 402: json-schema-1-throws; 381/404 Test #383: psi4numpy-rhf-gradient ........... Passed 0.98 sec; Start 188: fci-tdm; 382/404 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.18 sec; Start 396: python-memdfjk; 383/404 Test #309: pywrap-molecule .................. Passed 1.10 sec; Start 334: scf3; 384/404 Test #378: mints12 .......................... Passed 1.13 sec; Start 211: mcscf3; 385/404 Test #220: mints-helper ..................... Passed 1.23 sec; Start 209: mcscf1; 386/404 Test #214: mints3 ........................... Passed 1.05 sec; Start 382: psi4numpy-rhf; 387/404 Test #402: json-schema-1-throws ............. Passed 0.57 sec; Start 308: pywrap-db3; 388/404 Test #387: python-energy .................... Passed 0.81 sec; Start 239: numpy-array-interface; 389/404 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 364: options1; 390/404 Test #334: scf3 ............................. Passed 0.82 sec; Start 208: matrix1; 391/404 Test #211: mcscf3 ........................... Passed 0.80 sec; Start 175: docs-dft; 392/404 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 216: mints5; 393/404 Test #209: mcscf1 ........................... Passed 0.78 sec; Start 212: mints1; 394/404 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 395/404 Test #308: pywrap-db3 ....................... Passed 0.71 sec; Start 215: mints4; 396/404 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 87: cepa1; 397/404 Test #364: options1 ......................... Passed 0.58 sec; 398/404 Test #208: matrix1 .......................... Passed 0.56 sec; 399/404 Test #175: docs-dft ......................... Passed 0.64 sec; 400/404 Test #216: mints5 ...........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:36211,interface,interface,36211,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['interface'],['interface']
Integrability,................ Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2528,wrap,wrapper,2528,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['wrap'],['wrapper']
Integrability,................ Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #11: cbs-delta-energy ................. Passed 341.48 sec; Start 29: cc14; 34/411 Test #26: cc13b ............................ Passed 204.38 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 209.71 sec; Start 31: cc16; 36/411 Test #13: cbs-xtpl-alpha ................... Passed 415.31 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 89.67 sec; Start 33: cc18; 38/411 Test #33: cc18 ............................. Passed 59.67 sec; Start 34: cc19; 39/411 Test #30: cc15 .............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2820,wrap,wrapper,2820,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['wrap'],['wrapper']
Integrability,................. Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b; 24/412 Test #23: cc11 ............................. Passed 25.37 sec; Start 28: cc13c; 25/412 Test #20: cbs-xtpl-wrapper ................. Passed 66.34 sec; Start 29: cc13d; 26/412 Test #26: cc13a ............................ Passed 329.40 sec; Start 30: cc14; 27/412 Test #27: cc13b ............................ Passed 52.22 sec; Start 31: cc15; 28/412 Test #196: fd-freq-gradient-large ........... Passed 362.66 sec; Start 32: cc16; 29/412 Test #28: cc13c .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:2043,wrap,wrapper,2043,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['wrap'],['wrapper']
Integrability,................. Passed 45.71 sec; Start 151: dfomp2p5-2; 81/411 Test #250: omp2-5 ........................... Passed 18.02 sec; Start 19: cbs-xtpl-wrapper; 82/411 Test #151: dfomp2p5-2 ....................... Passed 12.10 sec; Start 147: dfomp3-2; 83/411 Test #11: cbs-delta-energy ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed 17.75 sec; Start 313: rasscf-sp; 93/411 Test #17: cbs-xtpl-opt ..................... Passed 43.78 sec; Start 256: omp2p5-grad2; 94/411 Test #313: rasscf-sp ........................ Passed 6.08 sec; Start 46: cc30; 95/411 Test #280: opt-irc-1 ........................ Passed 59.45 sec; Start 297: pubchem1; 96/411 Test #256: omp2p5-grad2 ..................... Passed 10.51 sec; Start 57: cc40; 97/411 Test #100: ci-property ...................... Passed 45.85 sec; Start 59: cc42; 98/411 Test #46: cc30 ............................. Passed 20.77 sec; Start 261: omp3-5; 99/411 Test #57: cc40 ............................. Passed 11.83 sec; Start 2: adc2; 100/411 Test #389: python-pubchem ................... Passed 48.90 sec; Start 65: cc48; 101/411 Test #59: cc42 ............................. Passed 13.57 sec; Start 337: scf6; 102/411 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:8615,wrap,wrapper,8615,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['wrap'],['wrapper']
Integrability,.................. Passed 1.59 sec; Start 329: scf-guess-read1; 376/413 Test #355: tu1-h2o-energy ................... Passed 1.51 sec; Start 336: scf3; 377/413 Test #222: mints-helper ..................... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 sec; Start 313: rasci-h2o; 381/413 Test #332: scf-bs ........................... Passed 1.21 sec; Start 330: scf-upcast-custom-basis; 382/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passed 1.04 sec; Start 214: mints1; 390/413 Test #366: options1 ......................... Passed 0.66 sec; Start 177: docs-dft; 391/413 Test #300: pubchem2 ......................... Passed 1.76 sec; Start 211: mcscf1; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:36332,interface,interface,36332,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['interface'],['interface']
Integrability,.................. Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.41 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 226.61 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 38.66 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 49.77 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 289.64 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ........... Passed 293.60 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 34.00 sec; Start 33: cc18; 30/411 Test #32: cc17 ............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:2154,wrap,wrapper,2154,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['wrap'],['wrapper']
Integrability,................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed 1.52 sec; Start 175: docs-bases; 389/412 Test #388: python-energy .................... Passed 1.01 sec; Start 309: pywrap-db3; 390/412 Test #335: scf3 ............................. Passed 0.79 sec; Start 209: matrix1; 391/412 Test #212: mcscf3 ........................... Passed 0.75 sec; Start 216: mints4; 392/412 Test #210: mcscf1 ........................... Passed 0.78 sec; Start 176: docs-dft; 393/412 Test #399: json-v11-gradient ................ Passed 1.25 sec; Start 365: options1; 394/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.35 sec; Start 410: skeletonscf; 395/412 Test #240: numpy-array-interface ............ Passed 0.80 sec; Start 403: json-schema-1-throws; 396/412 Test #213: mints1 ........................... Passed 0.80 sec; Start 88: cepa1; 397/412 Test #383: psi4numpy-rhf .................... Passed 0.92 sec; 398/412 Test #310: pywrap-molecule .................. Passed 1.22 sec; 399/412 Test #175: docs-bases ....................... Passed 0.83 sec; 400/412 Test #209: matrix1 .......................... Passed 0.68 sec; 401/412 Test #217: mints5 ........................... Passed 1.06 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.77 sec; 403/412 Test #379: mints12 .......................... Passed 1.35 sec; 404/412 Test #216: mints4 ........................... Passed 0.71 sec; 405/412 Test #176: docs-dft ......................... Passed 0.65 sec; 406/412 Test #365: options1 ......................... Passed 0.65 sec; 407/412 Test #403: json-schema-1-throws ............. Passed 0.56 sec; 408/412 Test #410: skeletonscf .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:37200,interface,interface,37200,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['interface'],['interface']
Integrability,................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec; 398/412 Test #175: docs-bases ....................... Passed 0.78 sec; 399/412 Test #210: mcscf1 ........................... Passed 1.26 sec; 400/412 Test #397: python-memdfjk ................... Passed 1.51 sec; 401/412 Test #213: mints1 ........................... Passed 0.96 sec; 402/412 Test #209: matrix1 .......................... Passed 0.64 sec; 403/412 Test #216: m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36814,interface,interface,36814,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['interface'],['interface']
Integrability,................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 274.86 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 46.68 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 47.39 sec; Start 30: cc15; 27/411 Test #195: fd-freq-gradient-large ........... Passed 355.17 sec; Start 31: cc16; 28/411 Test #25: cc13a ............................ Passed 357.77 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 47.52 sec; Start 33: cc18; 30/411 Test #32: cc17 ............................. Passed 25.71 sec; Start 34: cc19; 31/411 Test #113: dcft7 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:2242,wrap,wrapper,2242,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['wrap'],['wrapper']
Integrability,.................... Passed 29.32 sec; Start 17: cbs-xtpl-opt; 70/413 Test #19: cbs-xtpl-nbody ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53; 85/413 Test #60: cc42 ............................. Passed 16.11 sec; Start 247: ocepa3; 86/413 Test #207: frac-traverse .................... Passed 224.00 sec; Start 109: dcft1; 87/413 Test #78: cc8 .............................. Passed 13.24 sec; Start 153: dfomp2p5-2; 88/413 Test #72: cc53 ............................. Passed 17.52 sec; Start 74: cc55; 89/413 Test #319: sapt3 ............................ Passed 75.92 sec; Start 149: dfomp3-2; 90/413 Test #246: ocepa2 ........................... Passed 38.94 sec; Start 66: cc48; 91/413 Test #247: ocepa3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:7758,wrap,wrapper,7758,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['wrap'],['wrapper']
Integrability,.................... Passed 29.92 sec; Start 145: dfomp2-grad2; 67/412 Test #44: cc28 ............................. Passed 70.63 sec; Start 17: cbs-xtpl-opt; 68/412 Test #280: opt14 ............................ Passed 86.25 sec; Start 250: omp2-4; 69/412 Test #81: cc8c ............................. Passed 32.21 sec; Start 62: cc44; 70/412 Test #116: dcft9 ............................ Passed 93.34 sec; Start 264: omp3-grad2; 71/412 Test #320: sapt5 ............................ Passed 76.19 sec; Start 205: frac-ip-fitting; 72/412 Test #206: frac-traverse .................... Passed 235.67 sec; Start 390: python-pubchem; 73/412 Test #145: dfomp2-grad2 ..................... Passed 55.39 sec; Start 168: dft-b3lyp; 74/412 Test #318: sapt3 ............................ Passed 82.32 sec; Start 2: adc2; 75/412 Test #261: omp3-4 ........................... Passed 72.66 sec; Start 150: dfomp3-grad2; 76/412 Test #231: mp2-module ....................... Passed 90.49 sec; Start 20: cbs-xtpl-wrapper; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 81.12 sec; Start 58: cc40; 78/412 Test #250: omp2-4 ........................... Passed 69.17 sec; Start 11: cbs-delta-energy; 79/412 Test #62: cc44 ............................. Passed 72.21 sec; Start 82: cc9; 80/412 Test #264: omp3-grad2 ....................... Passed 71.27 sec; Start 69: cc50; 81/412 Test #390: python-pubchem ................... Passed 64.71 sec; Start 57: cc4; 82/412 Test #2: adc2 ............................. Passed 46.23 sec; Start 245: ocepa2; 83/412 Test #205: frac-ip-fitting .................. Passed 73.37 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 68.76 sec; Start 78: cc8; 85/412 Test #17: cbs-xtpl-opt ..................... Passed 104.86 sec; Start 193: fd-freq-energy; 86/412 Test #150: dfomp3-grad2 ..................... Passed 85.43 sec; Start 298: pubchem1; 87/412 Test #20: cbs-xtpl-wrapper ................. Passed 80.35 sec; Start 80: cc8b; 88/412 Test #317,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:7468,wrap,wrapper,7468,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['wrap'],['wrapper']
Integrability,.................... Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 221.87 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 28.09 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 42.99 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 275.86 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ........... Passed 291.59 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 40.51 sec; Start 33: cc18; 30/411 Test #113: dcft7 ............................ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:2152,wrap,wrapper,2152,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['wrap'],['wrapper']
Integrability,"..................... Passed 1.23 sec; Start 209: mcscf1; 386/404 Test #214: mints3 ........................... Passed 1.05 sec; Start 382: psi4numpy-rhf; 387/404 Test #402: json-schema-1-throws ............. Passed 0.57 sec; Start 308: pywrap-db3; 388/404 Test #387: python-energy .................... Passed 0.81 sec; Start 239: numpy-array-interface; 389/404 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 364: options1; 390/404 Test #334: scf3 ............................. Passed 0.82 sec; Start 208: matrix1; 391/404 Test #211: mcscf3 ........................... Passed 0.80 sec; Start 175: docs-dft; 392/404 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 216: mints5; 393/404 Test #209: mcscf1 ........................... Passed 0.78 sec; Start 212: mints1; 394/404 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 395/404 Test #308: pywrap-db3 ....................... Passed 0.71 sec; Start 215: mints4; 396/404 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 87: cepa1; 397/404 Test #364: options1 ......................... Passed 0.58 sec; 398/404 Test #208: matrix1 .......................... Passed 0.56 sec; 399/404 Test #175: docs-dft ......................... Passed 0.64 sec; 400/404 Test #216: mints5 ........................... Passed 0.61 sec; 401/404 Test #212: mints1 ........................... Passed 0.59 sec; 402/404 Test #174: docs-bases ....................... Passed 0.52 sec; 403/404 Test #215: mints4 ........................... Passed 0.53 sec; 404/404 Test #87: cepa1 ............................ Passed 1.59 sec. 99% tests passed, 1 tests failed out of 404. Label Time Summary:; adc = 61.74 sec*proc (2 tests); autotest = 549.39 sec*proc (26 tests); cart = 6384.55 sec*proc (123 tests); cas = 21.60 sec*proc (1 test); casscf = 37.11 sec*proc (11 tests); cbs = 1326.42 sec*proc (10 tests); cc = 4788.05 sec*proc (65 tests); cdomp2 = 10.66 sec*proc (2 tests); cepa = 5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:36892,interface,interface,36892,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['interface'],['interface']
Integrability,..................... Passed 2.36 sec; Start 334: scf-occ; 363/413 Test #190: fci-tdm .......................... Passed 1.95 sec; Start 345: stability1; 364/413 Test #331: scf-guess-read2 .................. Passed 7.29 sec; Start 351: sapt-sf1; 365/413 Test #223: mints9 ........................... Passed 2.00 sec; Start 121: dfcasscf-sp; 366/413 Test #222: mints-helper ..................... Passed 1.96 sec; Start 347: dfep2-2; 367/413 Test #336: scf3 ............................. Passed 1.57 sec; Start 300: pubchem2; 368/413 Test #354: stability2 ....................... Passed 2.80 sec; Start 356: tu2-ch2-energy; 369/413 Test #335: scf2 ............................. Passed 3.39 sec; Start 290: psimrcc-ccsd_t-2; 370/413 Test #97: cisd-h2o-clpse ................... Passed 2.89 sec; Start 122: dfccd1; 371/413 Test #351: sapt-sf1 ......................... Passed 1.54 sec; Start 332: scf-bs; 372/413 Test #86: cepa0-grad1 ...................... Passed 4.82 sec; Start 241: numpy-array-interface; 373/413 Test #356: tu2-ch2-energy ................... Passed 1.07 sec; Start 218: mints5; 374/413 Test #347: dfep2-2 .......................... Passed 2.24 sec; Start 329: scf-guess-read1; 375/413 Test #300: pubchem2 ......................... Passed 1.45 sec; Start 366: options1; 376/413 Test #334: scf-occ .......................... Passed 3.01 sec; Start 217: mints4; 377/413 Test #241: numpy-array-interface ............ Passed 0.81 sec; Start 289: psimrcc-ccsd_t-1; 378/413 Test #332: scf-bs ........................... Passed 1.53 sec; Start 136: dfmp2-grad1; 379/413 Test #345: stability1 ....................... Passed 3.12 sec; Start 214: mints1; 380/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.93 sec; Start 6: ao-casscf-sp; 381/413 Test #218: mints5 ........................... Passed 0.97 sec; Start 120: dfcasscf-fzc-sp; 382/413 Test #366: options1 ......................... Passed 0.75 sec; Start 212: mcscf2; 383/413 Test #217: mints4 ........................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:35089,interface,interface,35089,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['interface'],['interface']
Integrability,....................... Passed 1.19 sec; Start 334: scf3; 377/411 Test #403: json-schema-1-gradient ........... Passed 1.46 sec; Start 349: sapt-sf1; 378/411 Test #408: skeletonmointegrals .............. Passed 1.35 sec; Start 309: pywrap-molecule; 379/411 Test #220: mints-helper ..................... Passed 1.32 sec; Start 396: python-memdfjk; 380/411 Test #298: pubchem2 ......................... Passed 2.43 sec; Start 354: tu2-ch2-energy; 381/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 216: mints5; 382/411 Test #353: tu1-h2o-energy ................... Passed 1.13 sec; Start 209: mcscf1; 383/411 Test #404: json-schema-1-properties ......... Passed 1.20 sec; Start 382: psi4numpy-rhf; 384/411 Test #293: psimrcc-pt2 ...................... Passed 1.09 sec; Start 212: mints1; 385/411 Test #411: skeletonwavefunction ............. Passed 1.06 sec; Start 211: mcscf3; 386/411 Test #214: mints3 ........................... Passed 1.15 sec; Start 239: numpy-array-interface; 387/411 Test #188: fci-tdm .......................... Passed 1.07 sec; Start 409: skeletonscf; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.01 sec; Start 174: docs-bases; 389/411 Test #410: skeletonsointegrals .............. Passed 1.37 sec; Start 175: docs-dft; 390/411 Test #334: scf3 ............................. Passed 1.13 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.14 sec; Start 215: mints4; 392/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 208: matrix1; 393/411 Test #354: tu2-ch2-energy ................... Passed 0.98 sec; Start 364: options1; 394/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 402: json-schema-1-throws; 395/411 Test #211: mcscf3 ........................... Passed 0.76 sec; Start 87: cepa1; 396/411 Test #309: pywrap-molecule .................. Passed 1.18 sec; 397/411 Test #216: mints5 ........................... Passed 1.01 sec; 398/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:36404,interface,interface,36404,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['interface'],['interface']
Integrability,......................... Passed 0.80 sec; Start 293: psimrcc-pt2; 385/411 Test #406: skeletonaointegrals .............. Passed 1.10 sec; Start 209: mcscf1; 386/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 309: pywrap-molecule; 387/411 Test #387: python-energy .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0.69 sec; Start 364: options1; 398/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 175: docs-dft; 399/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 402: json-schema-1-throws; 400/411 Test #212: mints1 ........................... Passed 0.55 sec; Start 174: docs-bases; 401/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 215: mints4; 402/411 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 208: matrix1; 403/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #175: docs-dft ......................... Passed 0.60 sec; 406/411 Test #4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:36934,interface,interface,36934,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['interface'],['interface']
Integrability,........................... Passed 69.60 sec; Start 108: dcft1; 65/412 Test #326: scf-bz2 .......................... Passed 138.38 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #108: dcft1 ............................ Passed 21.44 sec; Start 193: fd-freq-energy; 67/412 Test #182: fsapt-allterms ................... Passed 599.68 sec; Start 320: sapt5; 68/412 Test #19: cbs-xtpl-nbody ................... Passed 51.30 sec; Start 157: dfomp2p5-grad2; 69/412 Test #280: opt14 ............................ Passed 85.55 sec; Start 150: dfomp3-grad2; 70/412 Test #70: cc51 ............................. Passed 72.72 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 79.59 sec; Start 245: ocepa2; 72/412 Test #206: frac-traverse .................... Passed 233.30 sec; Start 261: omp3-4; 73/412 Test #318: sapt3 ............................ Passed 83.47 sec; Start 251: omp2-5; 74/412 Test #157: dfomp2p5-grad2 ................... Passed 32.79 sec; Start 20: cbs-xtpl-wrapper; 75/412 Test #150: dfomp3-grad2 ..................... Passed 42.64 sec; Start 62: cc44; 76/412 Test #193: fd-freq-energy ................... Passed 70.15 sec; Start 243: ocepa-grad2; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.91 sec; Start 205: frac-ip-fitting; 78/412 Test #320: sapt5 ............................ Passed 79.17 sec; Start 264: omp3-grad2; 79/412 Test #44: cc28 ............................. Passed 53.16 sec; Start 250: omp2-4; 80/412 Test #245: ocepa2 ........................... Passed 62.18 sec; Start 58: cc40; 81/412 Test #261: omp3-4 ........................... Passed 58.04 sec; Start 65: cc47; 82/412 Test #251: omp2-5 ........................... Passed 49.94 sec; Start 168: dft-b3lyp; 83/412 Test #26: cc13a ............................ Passed 327.85 sec; Start 69: cc50; 84/412 Test #243: ocepa-grad2 ...................... Passed 63.73 sec; Start 300: pywrap-alias; 85/412 Test #20: cbs-xtpl-wrapper ................. Passed 79.22 sec; Start 390: pyt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:7293,wrap,wrapper,7293,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['wrap'],['wrapper']
Integrability,........................... Passed 71.21 sec; Start 104: dcft-grad2; 65/411 Test #104: dcft-grad2 ....................... Passed 11.72 sec; Start 115: dcft9; 66/411 Test #74: cc5a ............................. Passed 36.60 sec; Start 292: psimrcc-fd-freq2; 67/411 Test #69: cc51 ............................. Passed 55.79 sec; Start 19: cbs-xtpl-wrapper; 68/411 Test #319: sapt5 ............................ Passed 62.74 sec; Start 144: dfomp2-grad2; 69/411 Test #115: dcft9 ............................ Passed 17.82 sec; Start 46: cc30; 70/411 Test #144: dfomp2-grad2 ..................... Passed 12.75 sec; Start 61: cc44; 71/411 Test #167: dft-b3lyp ........................ Passed 61.83 sec; Start 149: dfomp3-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 58.04 sec; Start 11: cbs-delta-energy; 73/411 Test #149: dfomp3-grad2 ..................... Passed 14.73 sec; Start 43: cc28; 74/411 Test #46: cc30 ............................. Passed 23.10 sec; Start 259: omp3-3; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 46.33 sec; Start 17: cbs-xtpl-opt; 76/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.91 sec; Start 100: ci-property; 77/411 Test #61: cc44 ............................. Passed 42.92 sec; Start 389: python-pubchem; 78/411 Test #43: cc28 ............................. Passed 33.97 sec; Start 159: dft-grad-meta; 79/411 Test #259: omp3-3 ........................... Passed 34.08 sec; Start 147: dfomp3-2; 80/411 Test #11: cbs-delta-energy ................. Passed 49.88 sec; Start 244: ocepa2; 81/411 Test #147: dfomp3-2 ......................... Passed 9.52 sec; Start 297: pubchem1; 82/411 Test #17: cbs-xtpl-opt ..................... Passed 44.69 sec; Start 170: dft1-alt; 83/411 Test #244: ocepa2 ........................... Passed 20.83 sec; Start 242: ocepa-grad2; 84/411 Test #100: ci-property ...................... Passed 45.67 sec; Start 153: dfomp2p5-grad2; 85/411 Test #389: python-pubchem ................... Passed 45.96 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:7201,wrap,wrapper,7201,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['wrap'],['wrapper']
Integrability,............................ Passed 12.46 sec; Start 104: dcft-grad2; 72/411 Test #153: dfomp2p5-grad2 ................... Passed 15.20 sec; Start 61: cc44; 73/411 Test #292: psimrcc-fd-freq2 ................. Passed 62.74 sec; Start 204: frac-ip-fitting; 74/411 Test #104: dcft-grad2 ....................... Passed 16.24 sec; Start 144: dfomp2-grad2; 75/411 Test #74: cc5a ............................. Passed 46.64 sec; Start 11: cbs-delta-energy; 76/411 Test #144: dfomp2-grad2 ..................... Passed 11.68 sec; Start 26: cc13b; 77/411 Test #167: dft-b3lyp ........................ Passed 64.40 sec; Start 244: ocepa2; 78/411 Test #26: cc13b ............................ Passed 16.81 sec; Start 250: omp2-5; 79/411 Test #317: sapt3 ............................ Passed 72.42 sec; Start 230: mp2-module; 80/411 Test #61: cc44 ............................. Passed 45.71 sec; Start 151: dfomp2p5-2; 81/411 Test #250: omp2-5 ........................... Passed 18.02 sec; Start 19: cbs-xtpl-wrapper; 82/411 Test #151: dfomp2p5-2 ....................... Passed 12.10 sec; Start 147: dfomp3-2; 83/411 Test #11: cbs-delta-energy ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:7738,wrap,wrapper,7738,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['wrap'],['wrapper']
Integrability,............................. Passed 41.32 sec; Start 230: mp2-module; 53/411 Test #100: ci-property ...................... Passed 53.35 sec; Start 219: mints-benchmark; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 17: cbs-xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test #273: opt7 ............................. Passed 91.44 sec; Start 206: ghosts; 69/411 Test #110: dcft4 ............................ Passed 800.05 sec; Start 312: rasci-ne; 70/411 Test #206: ghosts ........................... Passed 33.57 sec; Start 359: tu6-cp-ne2; 71/411 Test #312: rasci-ne ......................... Passed 35.28 sec; Start 11: cbs-delta-energy; 72/411 Test #47: cc31 ............................. Passed 436.66 sec; Start 323: sapt7; 73/411 Test #323: sapt7 ............................ Passed 36.88 sec; Start 76: cc7; 74/411 Test #38:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:6103,wrap,wrapper,6103,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['wrap'],['wrapper']
Integrability,".................................PASSED; 	Ne: PWPB95_PT2....................................................PASSED; 	Ne: PWPB95........................................................PASSED; 	Ne: DSD-BLYP_DFT..................................................PASSED; 	Ne: DSD-BLYP_PT2..................................................PASSED; 	Ne: DSD-BLYP......................................................PASSED; 	Ne: PBE0-DH DFT...................................................PASSED; 	Ne: PBE0-DH PT2...................................................PASSED; 	Ne: PBE0-DH.......................................................PASSED; 	PBE0-2: Water: computed value (-150.8272119) does not match (-152.6486355) to 6 digits.; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 109, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\p4util\util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	PBE0-2: Water: computed value (-150.8272119) does not match (-152.6486355) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). Start 367: dft-custom-hybrid; 22/24 Test #367: dft-custom-hybrid ................ Passed 46.21 sec; Start 368: dft-custom-mgga; 23/24 Test #368: dft-custom-mgga .................. Passed 244.44 sec; Start 369: dft-custom-gga; 24/24 Test #369: dft-custom-gga ...................***Failed 171.36 sec; 	Ne: BLYP..........................................................PASSED; 	Ne: SVWN..........................................................PASSED; 	Ne: PBE...........................................................PASSED; 	Ne: PW91..........................................................PASSED; 	Ne: MPWPW.........................................................PASSED; Error occurred in file: C:\Users\User\psi4.git\psi4\src\psi4\libpsi4util\process.cc on line: 112; Tra",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:4508,message,message,4508,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,1,['message'],['message']
Integrability,".888000000000 0.000000000000 0.000000000000; > H 2.169000000000 -2.147000000000 0.000000000000; > H 4.649000000000 -2.147000000000 0.000000000000; > ```; > ; > Running in c1 symmetry.; > ; > Nuclear repulsion = 697.113178296437809; > ; > Charge = 0; > Multiplicity = 1; > Electrons = 94; > Nalpha = 47; > Nbeta = 47; > ; > ==> Algorithm <==; > ; > SCF Algorithm Type is OUT_OF_CORE.; > DIIS enabled.; > MOM disabled.; > Fractional occupation disabled.; > Guess Type is CORE.; > Energy threshold = 1.00e-08; > Density threshold = 1.00e-10; > Integral threshold = 0.00e+00; > ; > ==> Primary Basis <==; > ; > Basis Set: CC-PVDZ; > Number of shells: 114; > Number of basis function: 246; > Number of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:6707,Wrap,Wrapper,6707,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Wrap'],['Wrapper']
Integrability,".mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2766,message,message,2766,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['message'],['message']
Integrability,"/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3591,rout,routine,3591,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6072,interface,interface,6072,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,['interface'],['interface']
Integrability,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:3377,rout,routine,3377,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['rout'],['routine']
Integrability,"0000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 5; Number of AO shells: 37; Number of SO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transfo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:7871,Wrap,Wrapper,7871,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Wrap'],['Wrapper']
Integrability,1 Test #371: dft-custom-dhdf .................. Passed 99.18 sec; Start 19: cbs-xtpl-wrapper; 78/411 Test #325: scf-bz2 .......................... Passed 123.80 sec; Start 81: cc9; 79/411 Test #280: opt-irc-1 ........................ Passed 105.80 sec; Start 56: cc4; 80/411 Test #151: dfomp2p5-2 ....................... Passed 32.00 sec; Start 279: opt14; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 Test #142: dfomp2-4 ......................... Passed 39.17 sec; Start 256: omp2p5-grad2; 90/411 Test #205: frac-traverse .................... Passed 218.91 sec; Start 317: sapt3; 91/411 Test #78: cc8a ............................. Passed 53.44 sec; Start 79: cc8b; 92/411 Test #279: opt14 ............................ Passed 79.82 sec; Start 67: cc4a; 93/411 Test #249: omp2-4 ........................... Passed 74.23 sec; Start 55: cc39; 94/411 Test #156: dfomp2p5-grad2 ................... Passed 77.67 sec; Start 68: cc50; 95/411 Test #278: opt13 ............................ Passed 729.83 sec; Start 319: sapt5; 96/411 Test #77: cc8 .............................. Passed 55.92 sec; Start 66: cc49; 97/411 Test #292: psimrcc-fd-freq2 ................. Passed 86.60 sec; Start 64: cc47; 98/411 Test #67: cc4a ............................. Passed 47.72 sec; Start 263: omp3-grad2; 99/411 Test #79: cc8b ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:8463,wrap,wrapper,8463,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['wrap'],['wrapper']
Integrability,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260131914:808,depend,depending,808,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914,2,['depend'],['depending']
Integrability,"1. Done.; 2. Good point, it could be called from other places.; 3. N/A anymore; 4. Sentence removed. I have taken the inspiration from the MRCC interface, which prints a warning like this. https://github.com/psi4/psi4/blob/4f7de4dca376b9c4afd2105898a98e06efcd7309/psi4/src/psi4/mrcc/mrcc.cc#L738",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068217023:144,interface,interface,144,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068217023,1,['interface'],['interface']
Integrability,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-149031508:2205,message,message,2205,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508,1,['message'],['message']
Integrability,15/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228/401 Test #130: dfmp2-3 .......................... Passed 16.36 sec; Start 131: dfmp2-4; 229/401 Test #90: cepa-module ...................... Passed 64.78 sec; Start 134: dfmp2-grad2; 230/401 Test #17: cbs-xtpl-opt ..................... Passed 72.86 sec; Start 135: dfmp2-grad3; 231/401 Test #135: dfmp2-grad3 ...................... Passed 5.13 sec; Start 136: dfmp2-grad4; 232/401 Test #96: cisd-opt-fd ...................... Passed 63.83 sec; Start 137: dfmp2-grad5; 233/401 Test #131: dfmp2-4 .......................... Passed 8.63 sec; Start 139: dfomp2-2; 234/401 Test #134: dfmp2-grad2 ...................... Passed 8.35 sec; Start 140: dfomp2-3; 235/401 Test #136: dfmp2-grad4 ...................... Passed 5.23 sec; Start 141: dfomp2-4; 236/401 Test #140: dfomp2-3 ......................... Passed 3.31 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:21134,wrap,wrapper,21134,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['wrap'],['wrapper']
Integrability,2.5) => /lib64/libc.so.6; 	/scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../.././libhdf5.so.10:; 		libdl.so.2 (GLIBC_2.2.5) => /lib64/libdl.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libpthread.so.0 (GLIBC_2.3.2) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.8) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; 	/scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../.././libhdf5_hl.so.10:; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; + conda-inspect linkages --show-files --groupby=dependency chemps2 dkh libefp erd gdma libint pcmsolver simint libxc psi4; file:///scratch/psilocaluser/conda-builds::chemps2-1.8.4-0; ----------------------------------------------------------. chemps2:; libchemps2.so.2 (lib/libchemps2.so.2) from bin/chemps2. psi4:; libchemps2.so.2 (lib/libchemps2.so.2) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::dkh-1.2-1; ----------------------------------------------------. psi4:; libdkh.so (lib/libdkh.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::erd-3.0.6-1; ------------------------------------------------------. psi4:; liberd.so (lib/liberd.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::gdma-2.2.6-3; -------------------------------------------------------. psi4:; libgdma.so (lib/libgdma.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::libefp-1.5b1-0; ---------------------------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:12805,depend,dependency,12805,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['depend'],['dependency']
Integrability,"25 -5.38996e-02 3.40988e-04 DIIS; > @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; > @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; > @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; > @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; > @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; > @DF-RHF iter 15: -535.97367316705004 -2.38416e-07 5.52742e-07 DIIS; > @DF-RHF iter 16: -535.97367321567344 -4.86234e-08 2.27016e-07 DIIS; > @DF-RHF iter 17: -535.97367322279683 -7.12339e-09 4.03379e-08 DIIS; > @DF-RHF iter 18: -535.97367322291711 -1.20281e-10 1.51493e-08 DIIS; > @DF-RHF iter 19: -535.97367322293508 -1.79625e-11 3.82698e-09 DIIS; > @DF-RHF iter 20: -535.97367322293599 -9.09495e-13 1.05449e-09 DIIS; > @DF-RHF iter 21: -535.97367322293462 1.36424e-12 2.43431e-10 DIIS; > @DF-RHF iter 22: -535.97367322293553 -9.09495e-13 9.68772e-11 DIIS; > ; > DF guess converged.; > ; > ==> Integral Setup <==; > ; > MINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 238922952 non-zero two-electron integrals.; > Stored in file 33.; > ; > ==> DiskJK: Disk-Based J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > Memory (MB): 3576; > Schwarz Cutoff: 1E-12; > ; > @RHF https://github.com/RHF iter 23: -535.97469002803746 -1.01681e-03; > 4.55914e-06 DIIS; > @RHF https://github.com/RHF iter 24: -535.97469062826895 -6.00231e-07; > 9.20453e-07 DIIS; > @RHF https://github.com/RHF iter 25: -535.97469065540940 -2.71405e-08; > 3.52409e-07 D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:9465,Wrap,Wrapper,9465,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Wrap'],['Wrapper']
Integrability,"2594 is not an option for adding to the test suite, as the test takes too long tor un. 2476 _may_ be. Per @loriab, that depends on increasing the AM in the auto-build, which depends on some L2 development from Valeev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2674#issuecomment-1213448481:120,depend,depends,120,https://psicode.org,https://github.com/psi4/psi4/issues/2674#issuecomment-1213448481,2,['depend'],['depends']
Integrability,"28 sec; Start 163: dft-b3lyp; 9/24 Test #163: dft-b3lyp ........................ Passed 164.98 sec; Start 164: dft1; 10/24 Test #164: dft1 ............................. Passed 414.86 sec; Start 165: dft-vv10; 11/24 Test #165: dft-vv10 ......................... Passed 80.01 sec; Start 166: dft1-alt; 12/24 Test #166: dft1-alt ......................... Passed 191.52 sec; Start 167: dft2; 13/24 Test #167: dft2 ............................. Passed 22.00 sec; Start 168: dft3; 14/24 Test #168: dft3 .............................***Failed 20.54 sec; 	Closed-shell wB97 Energy (PK).....................................PASSED; 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 42, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\p4util\util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). Start 169: dft-omega; 15/24 Test #169: dft-omega ........................ Passed 70.41 sec; Start 338: soscf-dft; 16/24 Test #338: soscf-dft ........................ Passed 88.82 sec; Start 345: dft-custom; 17/24 Test #345: dft-custom ....................... Passed 66.89 sec; Start 346: dft-reference; 18/24 Test #346: dft-reference .................... Passed 16.23 sec; Start 361: dft-smoke; 19/24 Test #361: dft-smoke ........................ Passed 64.78 sec; Start 364: dft-jk; 20/24 Test #364: dft-jk ........................... Passed 32.41 sec; Start 366: dft-custom-dhdf; 21/24 Test #366: dft-custom-dhdf ..................***Failed 193.71 sec; 	Ne: B2PLYP_DFT....................................................PASSED; 	Ne: B2PLYP_PT2..........",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:1898,message,message,1898,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,1,['message'],['message']
Integrability,2: omp2-5 ........................... Passed 67.36 sec; Start 282: opt-irc-1; 71/413 Test #151: dfomp3-grad2 ..................... Passed 66.98 sec; Start 17: cbs-xtpl-opt; 72/413 Test #47: cc30 ............................. Passed 68.93 sec; Start 265: omp3-grad2; 73/413 Test #244: ocepa-grad2 ...................... Passed 64.99 sec; Start 281: opt14; 74/413 Test #58: cc40 ............................. Passed 77.29 sec; Start 20: cbs-xtpl-wrapper; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 78.00 sec; Start 194: fd-freq-energy; 76/413 Test #327: scf-bz2 .......................... Passed 122.73 sec; Start 60: cc42; 77/413 Test #373: dft-custom-dhdf .................. Passed 91.90 sec; Start 246: ocepa2; 78/413 Test #282: opt-irc-1 ........................ Passed 84.38 sec; Start 319: sapt3; 79/413 Test #265: omp3-grad2 ....................... Passed 64.41 sec; Start 21: cc1; 80/413 Test #60: cc42 ............................. Passed 60.49 sec; Start 158: dfomp2p5-grad2; 81/413 Test #20: cbs-xtpl-wrapper ................. Passed 71.25 sec; Start 301: pywrap-alias; 82/413 Test #17: cbs-xtpl-opt ..................... Passed 84.79 sec; Start 294: psimrcc-fd-freq2; 83/413 Test #194: fd-freq-energy ................... Passed 71.76 sec; Start 321: sapt5; 84/413 Test #281: opt14 ............................ Passed 84.37 sec; Start 12: cbs-parser; 85/413 Test #246: ocepa2 ........................... Passed 62.00 sec; Start 64: cc46; 86/413 Test #207: frac-traverse .................... Passed 228.24 sec; Start 258: omp2p5-grad2; 87/413 Test #301: pywrap-alias ..................... Passed 54.99 sec; Start 74: cc55; 88/413 Test #319: sapt3 ............................ Passed 78.46 sec; Start 142: dfomp2-2; 89/413 Test #21: cc1 .............................. Passed 73.87 sec; Start 149: dfomp3-2; 90/413 Test #64: cc46 ............................. Passed 60.35 sec; Start 206: frac-ip-fitting; 91/413 Test #294: psimrcc-fd-freq2 ................. Passed 79.90 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:7867,wrap,wrapper,7867,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['wrap'],['wrapper']
Integrability,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,adapter,adapters,1283,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapter'],['adapters']
Integrability,"332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of SO shells: 14; Number of primitives: 30; Number of atomic orbitals: 55; Number of basis functions: 46. ```; Number of irreps: 8; Integral cutoff 0.00e+00; Number of functions per irrep: [ 11 3 3 3 2 8 8 8 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 68847 non-zero two-electron integrals.; Stored in file 33. Batch 1 pq = [ 0, 195] index = [ 0,19110]; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 34332; Schwarz Cutoff: 1E-12; ```. @RHF iter 8: -24.23681570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:5259,Wrap,Wrapper,5259,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Wrap'],['Wrapper']
Integrability,"36; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1064,interface,interfaces,1064,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,1,['interface'],['interfaces']
Integrability,"3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609`. $CC --version; `x86_64-conda_cos6-linux-gnu-cc (crosstool-NG fa8859cb) 7.2.0`. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:2319,depend,dependencies,2319,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,1,['depend'],['dependencies']
Integrability,57: dfomp2p5-grad2 ................... Passed 32.79 sec; Start 20: cbs-xtpl-wrapper; 75/412 Test #150: dfomp3-grad2 ..................... Passed 42.64 sec; Start 62: cc44; 76/412 Test #193: fd-freq-energy ................... Passed 70.15 sec; Start 243: ocepa-grad2; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.91 sec; Start 205: frac-ip-fitting; 78/412 Test #320: sapt5 ............................ Passed 79.17 sec; Start 264: omp3-grad2; 79/412 Test #44: cc28 ............................. Passed 53.16 sec; Start 250: omp2-4; 80/412 Test #245: ocepa2 ........................... Passed 62.18 sec; Start 58: cc40; 81/412 Test #261: omp3-4 ........................... Passed 58.04 sec; Start 65: cc47; 82/412 Test #251: omp2-5 ........................... Passed 49.94 sec; Start 168: dft-b3lyp; 83/412 Test #26: cc13a ............................ Passed 327.85 sec; Start 69: cc50; 84/412 Test #243: ocepa-grad2 ...................... Passed 63.73 sec; Start 300: pywrap-alias; 85/412 Test #20: cbs-xtpl-wrapper ................. Passed 79.22 sec; Start 390: python-pubchem; 86/412 Test #62: cc44 ............................. Passed 68.65 sec; Start 257: omp2p5-grad2; 87/412 Test #205: frac-ip-fitting .................. Passed 71.49 sec; Start 145: dfomp2-grad2; 88/412 Test #65: cc47 ............................. Passed 50.77 sec; Start 35: cc19; 89/412 Test #264: omp3-grad2 ....................... Passed 80.57 sec; Start 67: cc49; 90/412 Test #58: cc40 ............................. Passed 63.55 sec; Start 79: cc8a; 91/412 Test #250: omp2-4 ........................... Passed 85.98 sec; Start 152: dfomp2p5-2; 92/412 Test #114: dcft7 ............................ Passed 366.54 sec; Start 82: cc9; 93/412 Test #168: dft-b3lyp ........................ Passed 74.16 sec; Start 298: pubchem1; 94/412 Test #69: cc50 ............................. Passed 59.08 sec; Start 148: dfomp3-2; 95/412 Test #390: python-pubchem ................... Passed 72.12 sec; Start 141: dfomp2-2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:8242,wrap,wrapper,8242,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['wrap'],['wrapper']
Integrability,5a ............................. Passed 81.00 sec; Start 105: dcft-grad2; 70/412 Test #48: cc31 ............................. Passed 118.12 sec; Start 44: cc28; 71/412 Test #62: cc44 ............................. Passed 62.89 sec; Start 261: omp3-4; 72/412 Test #92: cepa-module ...................... Passed 94.63 sec; Start 257: omp2p5-grad2; 73/412 Test #27: cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-property; 77/412 Test #251: omp2-5 ........................... Passed 64.13 sec; Start 264: omp3-grad2; 78/412 Test #32: cc16 ............................. Passed 140.13 sec; Start 303: pywrap-cbs1; 79/412 Test #390: python-pubchem ................... Passed 63.68 sec; Start 145: dfomp2-grad2; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 71.38 sec; Start 231: mp2-module; 81/412 Test #47: cc30 ............................. Passed 73.41 sec; Start 171: dft1-alt; 82/412 Test #257: omp2p5-grad2 ..................... Passed 60.64 sec; Start 61: cc43; 83/412 Test #163: dft-grad-meta .................... Passed 53.44 sec; Start 193: fd-freq-energy; 84/412 Test #44: cc28 ............................. Passed 82.41 sec; Start 150: dfomp3-grad2; 85/412 Test #148: dfomp3-2 ......................... Passed 63.71 sec; Start 82: cc9; 86/412 Test #101: ci-property ...................... Passed 57.32 sec; Start 260: omp3-3; 87/412 Test #58: cc40 ............................. Passed 66.56 sec; Start 220: mints-benchmark; 88/412 Test #59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:7789,wrap,wrapper,7789,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['wrap'],['wrapper']
Integrability,6 sec; Start 229: mp2-grad2; 227/411 Test #226: mp2-1 ............................ Passed 12.01 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 7.55 sec; Start 231: mp2p5-grad1; 229/411 Test #145: dfomp2-grad3 ..................... Passed 427.26 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 4.31 sec; Start 233: mp3-grad1; 231/411 Test #183: isapt2 ........................... Passed 136.47 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 6.71 sec; Start 235: mp2-property; 233/411 Test #219: mints-benchmark .................. Passed 42.31 sec; Start 236: mpn-bh; 234/411 Test #232: mp2p5-grad2 ...................... Passed 9.73 sec; Start 237: nbody-he-cluster; 235/411 Test #204: frac-ip-fitting .................. Passed 73.18 sec; Start 238: nbody-intermediates; 236/411 Test #235: mp2-property ..................... Passed 4.78 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 240: ocepa-freq1; 238/411 Test #234: mp3-grad2 ........................ Passed 7.87 sec; Start 241: ocepa-grad1; 239/411 Test #236: mpn-bh ........................... Passed 5.55 sec; Start 242: ocepa-grad2; 240/411 Test #238: nbody-intermediates .............. Passed 28.11 sec; Start 243: ocepa1; 241/411 Test #241: ocepa-grad1 ...................... Passed 25.42 sec; Start 244: ocepa2; 242/411 Test #243: ocepa1 ........................... Passed 21.47 sec; Start 245: ocepa3; 243/411 Test #237: nbody-he-cluster ................. Passed 70.02 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 4.05 sec; Start 247: omp2-2; 245/411 Test #247: omp2-2 ........................... Passed 38.93 sec; Start 248: omp2-3; 246/411 Test #230: mp2-module ....................... Passed 128.49 sec; Start 249: omp2-4; 247/411 Test #245: ocepa3 ........................... Passed 70.91 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:21893,interface,interface,21893,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['interface'],['interface']
Integrability,"6.49 sec; Start 380: psi4numpy-rhf-gradient; 183/401 Test #115: ao-dfcasscf-sp ................... Passed 2.27 sec; Start 290: psimrcc-sp1; 184/401 Test #400: json-schema_0_gradient ........... Passed 1.81 sec; Start 101: decontract; 185/401 Test #376: cc-module, ....................... Passed 111.71 sec; Start 379: psi4numpy-rhf; 186/401 Test #393: python-memdfjk ................... Passed 1.80 sec; Start 205: mcscf1; 187/401 Test #349: tu2-ch2-energy ................... Passed 1.30 sec; Start 235: numpy-array-interface; 188/401 Test #326: scf-bs ........................... Passed 1.60 sec; Start 384: python-energy; 189/401 Test #330: scf3 ............................. Passed 1.38 sec; Start 204: matrix1; 190/401 Test #380: psi4numpy-rhf-gradient ........... Passed 1.41 sec; Start 359: options1; 191/401 Test #347: stability2 ....................... Passed 1.80 sec; Start 208: mints1; 192/401 Test #379: psi4numpy-rhf .................... Passed 0.87 sec; Start 284: psimrcc-ccsd_t-2; 193/401 Test #235: numpy-array-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Passed 0.78 sec; Start 9: castup2; 199/401 Test #359: options1 ......................... Passed 0.67 sec; Start 10: castup3; 200/401 Test #122: dfccsd1 .......................... Passed 3.17 sec; Start 12: cbs-parser; 201/401 Test #123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:18107,interface,interface,18107,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['interface'],['interface']
Integrability,69/412 Test #31: cc15 ............................. Passed 17.78 sec; Start 318: sapt3; 70/412 Test #28: cc13c ............................ Passed 24.56 sec; Start 145: dfomp2-grad2; 71/412 Test #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75 sec; Start 44: cc28; 87/412 Test #320: sapt5 ............................ Passed 77.11 sec; Start 62: cc44; 88/412 Test #20: cbs-xtpl-wrapper ................. Passed 58.85 sec; Start 300: pywrap-alias; 89/412 Test #257: omp2p5-grad2 ..................... Passed 29.36 sec; Start 205: frac-ip-fitting; 90/412 Test #245: ocepa2 ........................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:7552,wrap,wrapper,7552,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['wrap'],['wrapper']
Integrability,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2263,wrap,wrapper,2263,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,1,['wrap'],['wrapper']
Integrability,70: dft1 ............................. Passed 98.14 sec; Start 58: cc40; 64/413 Test #58: cc40 ............................. Passed 21.73 sec; Start 252: omp2-5; 65/413 Test #75: cc5a ............................. Passed 50.54 sec; Start 151: dfomp3-grad2; 66/413 Test #70: cc51 ............................. Passed 69.56 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 49.61 sec; Start 282: opt-irc-1; 68/413 Test #151: dfomp3-grad2 ..................... Passed 21.51 sec; Start 47: cc30; 69/413 Test #252: omp2-5 ........................... Passed 29.32 sec; Start 17: cbs-xtpl-opt; 70/413 Test #19: cbs-xtpl-nbody ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:7161,wrap,wrapper,7161,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['wrap'],['wrapper']
Integrability,76/412 Test #231: mp2-module ....................... Passed 90.49 sec; Start 20: cbs-xtpl-wrapper; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 81.12 sec; Start 58: cc40; 78/412 Test #250: omp2-4 ........................... Passed 69.17 sec; Start 11: cbs-delta-energy; 79/412 Test #62: cc44 ............................. Passed 72.21 sec; Start 82: cc9; 80/412 Test #264: omp3-grad2 ....................... Passed 71.27 sec; Start 69: cc50; 81/412 Test #390: python-pubchem ................... Passed 64.71 sec; Start 57: cc4; 82/412 Test #2: adc2 ............................. Passed 46.23 sec; Start 245: ocepa2; 83/412 Test #205: frac-ip-fitting .................. Passed 73.37 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 68.76 sec; Start 78: cc8; 85/412 Test #17: cbs-xtpl-opt ..................... Passed 104.86 sec; Start 193: fd-freq-energy; 86/412 Test #150: dfomp3-grad2 ..................... Passed 85.43 sec; Start 298: pubchem1; 87/412 Test #20: cbs-xtpl-wrapper ................. Passed 80.35 sec; Start 80: cc8b; 88/412 Test #317: sapt2 ............................ Passed 352.05 sec; Start 243: ocepa-grad2; 89/412 Test #58: cc40 ............................. Passed 75.15 sec; Start 60: cc42; 90/412 Test #82: cc9 .............................. Passed 62.16 sec; Start 108: dcft1; 91/412 Test #57: cc4 .............................. Passed 57.29 sec; Start 35: cc19; 92/412 Test #114: dcft7 ............................ Passed 393.99 sec; Start 66: cc48; 93/412 Test #69: cc50 ............................. Passed 73.08 sec; Start 101: ci-property; 94/412 Test #78: cc8 .............................. Passed 58.53 sec; Start 65: cc47; 95/412 Test #245: ocepa2 ........................... Passed 85.34 sec; Start 28: cc13c; 96/412 Test #251: omp2-5 ........................... Passed 85.48 sec; Start 67: cc49; 97/412 Test #80: cc8b ............................. Passed 50.08 sec; Start 55: cc38; 98/412 Test #298: pubchem1 .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:8401,wrap,wrapper,8401,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['wrap'],['wrapper']
Integrability,"8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1017,depend,dependency,1017,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['depend'],['dependency']
Integrability,8/413 Test #232: mp2-module ....................... Passed 103.88 sec; Start 26: cc13a; 79/413 Test #170: dft1 ............................. Passed 106.31 sec; Start 115: dcft7; 80/413 Test #153: dfomp2p5-2 ....................... Passed 59.14 sec; Start 207: frac-traverse; 81/413 Test #92: cepa-module ...................... Passed 187.69 sec; Start 318: sapt2; 82/413 Test #281: opt14 ............................ Passed 80.55 sec; Start 320: sapt4; 83/413 Test #109: dcft1 ............................ Passed 68.38 sec; Start 327: scf-bz2; 84/413 Test #258: omp2p5-grad2 ..................... Passed 64.16 sec; Start 265: omp3-grad2; 85/413 Test #144: dfomp2-4 ......................... Passed 62.74 sec; Start 142: dfomp2-2; 86/413 Test #67: cc49 ............................. Passed 54.95 sec; Start 83: cc9a; 87/413 Test #79: cc8a ............................. Passed 53.51 sec; Start 282: opt-irc-1; 88/413 Test #158: dfomp2p5-grad2 ................... Passed 80.48 sec; Start 20: cbs-xtpl-wrapper; 89/413 Test #81: cc8c ............................. Passed 52.58 sec; Start 17: cbs-xtpl-opt; 90/413 Test #21: cc1 .............................. Passed 86.44 sec; Start 78: cc8; 91/413 Test #82: cc9 .............................. Passed 67.08 sec; Start 34: cc18; 92/413 Test #142: dfomp2-2 ......................... Passed 51.07 sec; Start 319: sapt3; 93/413 Test #373: dft-custom-dhdf .................. Passed 90.03 sec; Start 321: sapt5; 94/413 Test #83: cc9a ............................. Passed 56.13 sec; Start 391: python-pubchem; 95/413 Test #265: omp3-grad2 ....................... Passed 78.67 sec; Start 194: fd-freq-energy; 96/413 Test #34: cc18 ............................. Passed 48.82 sec; Start 247: ocepa3; 97/413 Test #78: cc8 .............................. Passed 62.52 sec; Start 69: cc50; 98/413 Test #20: cbs-xtpl-wrapper ................. Passed 78.50 sec; Start 294: psimrcc-fd-freq2; 99/413 Test #282: opt-irc-1 ........................ Passed 94.89 sec; Start 50: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:8482,wrap,wrapper,8482,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['wrap'],['wrapper']
Integrability,"9, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-pack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1623,Message,Message,1623,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['Message'],['Message']
Integrability,: 0.017u 0.000s 0.007w 1 calls; | | | JK: J1 : 0.000u 0.000s 0.003w 3 calls; | | | JK: J2 : 0.017u 0.000s 0.003w 3 calls; | | JK: K : 0.183u 0.000s 0.116w 1 calls; | | | JK: K1 : 0.183u 0.000s 0.110w 6 calls; | | | JK: K2 : 0.000u 0.000s 0.005w 3 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; | JK: D : 0.000u 0.000s 0.001w 17 calls; | JK: USO2AO : 0.000u 0.000s 0.000w 17 calls; | JK: JK : 1.383u 0.000s 0.815w 17 calls; | | JK: J : 0.150u 0.000s 0.049w 17 calls; | | | JK: J1 : 0.017u 0.000s 0.024w 19 calls; | | | JK: J2 : 0.133u 0.000s 0.023w 19 calls; | | JK: K : 1.217u 0.000s 0.760w 17 calls; | | | JK: K1 : 1.133u 0.000s 0.723w 38 calls; | | | JK: K2 : 0.083u 0.000s 0.036w 19 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 17 calls; | RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; | | Properties : 20.333u 0.350s 12.087w 22336 calls; | | Functional : 7.050u 0.050s 4.517w 22336 calls; | | Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; | | V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; | DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; | | DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; | | DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; | DFH: transform() : 0.117u 0.017s 0.075w 1 calls; | | DFH: Total Workflow : 0.017u 0.000s 0.014w 4 calls; | | | DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; | | | | DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; | | | | DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; | | DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; | | DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; | | | DFH: Total Workflow : 0.017u 0.000s 0.007w 2 calls; | DF Integrals : 0.767u 0.083s 0.514w 1 calls; | W Integrals : 0.000u 0.000s 0.001w 1 calls; | Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; | Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. ***********************************************************; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:14133,Contract,Contraction,14133,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,3,['Contract'],"['Contraction', 'Contractions']"
Integrability,: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12; 154/415 Test #9: castup2 .......................... Passed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ................... Passed 141.24 sec; Start 39: cc22; 163/415 Test #17: cbs-xtpl-opt ..................... Passed 192.06 sec; Start 40: cc23; 164/415 Test #39: cc22 ............................. Passed 61.46 sec; Start 41: cc24; 165/415 Test #36: cc19 ............................. Passed 153.84 sec; Start 42: cc25; 166/415 Test #196: fd-freq-energy-large ............. Passed 970.47 sec; Start 43: cc26; 167/415 Test #29: cc13c ............................ Passed 319.30 sec; Start 44: cc27; 168/415 Test #27: cc13a ............................ Passed 864.99 sec; Start 46: cc29; 169/415 Test #33: cc16 ............................. Passed 369.56 sec; Start 47: cc3; 170/415 Test #13: cbs-xtpl-alpha ................... Passed 464.57 sec; Start 48: cc30; 171/415 Test #405: python-vibanalysis ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:15345,wrap,wrapper,15345,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['wrap'],['wrapper']
Integrability,: cc-module ........................ Passed 236.85 sec; Start 61: cc44; 68/411 Test #69: cc51 ............................. Passed 103.52 sec; Start 140: dfomp2-2; 69/411 Test #154: dft-grad-lr2 ..................... Passed 106.99 sec; Start 34: cc19; 70/411 Test #75: cc6 .............................. Passed 110.79 sec; Start 371: dft-custom-dhdf; 71/411 Test #65: cc48 ............................. Passed 95.69 sec; Start 280: opt-irc-1; 72/411 Test #168: dft1 ............................. Passed 124.66 sec; Start 230: mp2-module; 73/411 Test #140: dfomp2-2 ......................... Passed 58.63 sec; Start 261: omp3-5; 74/411 Test #34: cc19 ............................. Passed 72.40 sec; Start 259: omp3-3; 75/411 Test #61: cc44 ............................. Passed 86.68 sec; Start 242: ocepa-grad2; 76/411 Test #302: pywrap-cbs1 ...................... Passed 161.22 sec; Start 151: dfomp2p5-2; 77/411 Test #371: dft-custom-dhdf .................. Passed 99.18 sec; Start 19: cbs-xtpl-wrapper; 78/411 Test #325: scf-bz2 .......................... Passed 123.80 sec; Start 81: cc9; 79/411 Test #280: opt-irc-1 ........................ Passed 105.80 sec; Start 56: cc4; 80/411 Test #151: dfomp2p5-2 ....................... Passed 32.00 sec; Start 279: opt14; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:7528,wrap,wrapper,7528,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['wrap'],['wrapper']
Integrability,: fd-freq-energy-large ............. Passed 573.09 sec; Start 231: mp2-module; 56/412 Test #145: dfomp2-grad2 ..................... Passed 68.95 sec; Start 17: cbs-xtpl-opt; 57/412 Test #372: dft-custom-dhdf .................. Passed 105.99 sec; Start 76: cc6; 58/412 Test #260: omp3-3 ........................... Passed 88.45 sec; Start 318: sapt3; 59/412 Test #326: scf-bz2 .......................... Passed 141.14 sec; Start 70: cc51; 60/412 Test #182: fsapt-allterms ................... Passed 606.28 sec; Start 320: sapt5; 61/412 Test #281: opt-irc-1 ........................ Passed 101.38 sec; Start 262: omp3-5; 62/412 Test #206: frac-traverse .................... Passed 240.35 sec; Start 293: psimrcc-fd-freq2; 63/412 Test #280: opt14 ............................ Passed 89.39 sec; Start 250: omp2-4; 64/412 Test #76: cc6 .............................. Passed 91.93 sec; Start 193: fd-freq-energy; 65/412 Test #231: mp2-module ....................... Passed 98.50 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #318: sapt3 ............................ Passed 86.10 sec; Start 264: omp3-grad2; 67/412 Test #17: cbs-xtpl-opt ..................... Passed 106.20 sec; Start 257: omp2p5-grad2; 68/412 Test #262: omp3-5 ........................... Passed 82.61 sec; Start 205: frac-ip-fitting; 69/412 Test #320: sapt5 ............................ Passed 85.03 sec; Start 300: pywrap-alias; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... Passed 98.56 sec; Start 81: cc8c; 76/412 Test #300: pywrap-alias ..................... Passed 77.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:6488,wrap,wrapper,6488,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['wrap'],['wrapper']
Integrability,":. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1650,wrap,wrap,1650,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['wrap'],['wrap']
Integrability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2657,interface,interface,2657,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['interface'],['interface']
Integrability,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7847,depend,dependency,7847,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['depend'],['dependency']
Integrability,; 55/412 Test #114: dcft7 ............................ Passed 326.42 sec; Start 76: cc6; 56/412 Test #168: dft-b3lyp ........................ Passed 73.09 sec; Start 75: cc5a; 57/412 Test #11: cbs-delta-energy ................. Passed 115.53 sec; Start 92: cepa-module; 58/412 Test #18: cbs-xtpl-func .................... Passed 1080.73 sec; Start 31: cc15; 59/412 Test #279: opt13 ............................ Passed 828.21 sec; Start 17: cbs-xtpl-opt; 60/412 Test #320: sapt5 ............................ Passed 79.38 sec; Start 27: cc13b; 61/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.55 sec; Start 62: cc44; 62/412 Test #205: frac-ip-fitting .................. Passed 68.55 sec; Start 157: dfomp2p5-grad2; 63/412 Test #28: cc13c ............................ Passed 80.48 sec; Start 298: pubchem1; 64/412 Test #281: opt-irc-1 ........................ Passed 92.68 sec; Start 251: omp2-5; 65/412 Test #116: dcft9 ............................ Passed 80.09 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #31: cc15 ............................. Passed 63.11 sec; Start 390: python-pubchem; 67/412 Test #317: sapt2 ............................ Passed 375.81 sec; Start 47: cc30; 68/412 Test #76: cc6 .............................. Passed 78.72 sec; Start 59: cc41; 69/412 Test #75: cc5a ............................. Passed 81.00 sec; Start 105: dcft-grad2; 70/412 Test #48: cc31 ............................. Passed 118.12 sec; Start 44: cc28; 71/412 Test #62: cc44 ............................. Passed 62.89 sec; Start 261: omp3-4; 72/412 Test #92: cepa-module ...................... Passed 94.63 sec; Start 257: omp2p5-grad2; 73/412 Test #27: cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:6465,wrap,wrapper,6465,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['wrap'],['wrapper']
Integrability,; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.80 sec; Start 241: ocepa-grad1; 231/411 Test #219: mints-benchmark .................. Passed 43.72 sec; Start 242: ocepa-grad2; 232/411 Test #236: mpn-bh ........................... Passed 7.46 sec; Start 243: ocepa1; 233/411 Test #204: frac-ip-fitting .................. Passed 80.74 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 18.49 sec; Start 245: ocepa3; 235/411 Test #241: ocepa-grad1 ...................... Passed 28.23 sec; Start 246: omp2-1; 236/411 Test #183: isapt2 ........................... Passed 136.14 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 36.59 sec; Start 248: omp2-3; 238/411 Test #246: omp2-1 ........................... Passed 16.61 sec; Start 249: omp2-4; 239/411 Test #237: nbody-he-cluster ................. Passed 71.20 sec; Start 250: omp2-5; 240/411 Test #247: omp2-2 ........................... Passed 43.37 sec; Start 251: omp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:21423,interface,interface,21423,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['interface'],['interface']
Integrability,"= 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1607,message,message,1607,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['message'],['message']
Integrability,"> ""Maybe you're just observing noise because you haven't converged the equations fully tightly."". How can I converge the equations fully tightly? Which parameter do I need to modify?. ; > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems."". From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?. @JonathonMisiewicz . thx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-968637309:364,depend,dependent,364,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968637309,1,['depend'],['dependent']
Integrability,"> . Created new test cases in the same input file, i.e. doing non-hybrid/hybrid+DISP/hybrid+FIXED in the same test file. I think this is the way to go since it is what we did when adding in the hybrid feature. Warning messages added in documentation and SAPT(DFT) output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542:218,message,messages,218,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542,1,['message'],['messages']
Integrability,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:1028,interface,interface,1028,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,1,['interface'],['interface']
Integrability,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:849,wrap,wrapper,849,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,> ; > ; > Thank you all for the responses. It was the first time the terminal gave me non English response. I also did not know the trick with dmesg indicated by @TiborGY. Please note that the kernel log (dmesg) will only show the OOM-killer messages if the *entire computer* ran out of memory (as in RAM+swap).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234:242,message,messages,242,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234,1,['message'],['messages']
Integrability,"> ; > ; > This issue has been open for almost a month now. I'll deal with this in a week if it hasn't been taken by then.; > ; > I've plugged this as a good new developer issue in the HFS group, so we'll see if anything happens. I might have done it, but at the moment I cannot really invest the time to properly set up a dev env (especially all the numpy/BLAS/OMP dependency migraine), fix the issue, and send in a PR.; Sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-625366719:365,depend,dependency,365,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-625366719,1,['depend'],['dependency']
Integrability,"> > ""Maybe you're just observing noise because you haven't converged the equations fully tightly.""; > ; > How can I converge the equations fully tightly? Which parameter do I need to modify?. Set `d_convergence`. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number. . > > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems.""; > ; > From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?; > . I feel like you are not listening to me. I don't trust your ORCA and Psi4 comparisons, and it's perfectly reasonable for 1.3.2 and 1.4 to agree with each other but not 1.4.1, if both 1.3.2 and 1.4 had a bug. I do not trust that the results of 1.4 are more reasonable. Like I said before. Find the system where the energy changes the most between 1.4 and 1.4.1, tell us what the energies are, and tell us the system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-968823767:653,depend,dependent,653,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968823767,1,['depend'],['dependent']
Integrability,"> > @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > > ; > > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place.; > ; > @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already."". Looks like hacky code. I'll send a patch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633:107,interface,interface,107,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633,2,['interface'],['interface']
Integrability,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:370,rout,route,370,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,2,['rout'],['route']
Integrability,"> > @zachglick, thoughts? I strongly preferred your plan before, but it wasn't something I was going to insist on.; > ; > I'll drop a comment on this matter for for an extra perspective. The original plan is quite fine, and many good points were made regarding improvements to efficiency within the Incfock routine. However, the original plan proposed completes the unified Incfock formalism over two PRs, and the impression I get is that the standardization of the Incfock process is really happening in Step 2. The CompositeJK pilot implementation (i.e., the unification of DFJCOSK and DFJLinK + CompositeJK front end) really only needs Step 2 to proceed, then, while Step 1 of the proposed Incfock work (i.e., the improvement of the Incfock process itself) could likely be done independently from CompositeJK. Basically, my thought is that, by switching Steps 1 and 2 of the original proposed plan for Incfock, that would allow the second CompositeJK PR to be put into Psi4 more quickly and allow parallel development of CompositeJK and the JK Incfock formalism.; > ; > I am overall fine with either ordering for Incfock PR steps, but I figured I would at least bring this up. Thinking about this a little more, one may be able to do the Incfock development parallel to CompositeJK in the ordering suggested in Zach's original plan. Essentially, one would modify DFJLinK to use DFJCOSK's Incfock scheme, which gives the two a unified Incfock among themselves and would allow for continuation of CompositeJK. Then, the same Incfock used in DFJCOSK would be added to DirectJK. And finally, the Incfock could be added to the JK class. This adds an extra PR to the original plan (DFJLinK Incfock modification), but both maintains Zach's original PR ordering and allows for parallel development of CompositeJK with Incfock modifications. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1303661796:307,rout,routine,307,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1303661796,1,['rout'],['routine']
Integrability,"> > Hopefully psi4 will hit conda forge soon; > ; > Agreed. There's some conflicting dependency issues to work out beforehand. More specifically, #2537 is the next step, AFAIK. We'd love to work on this, but a few other things (SCF cleanup and a new feature, double-checking ECPs, and overdue maintenance of `dfocc`) are higher priority for Lori and I.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257:85,depend,dependency,85,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257,1,['depend'],['dependency']
Integrability,"> > I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users.; > ; > I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic.; > ; > It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect. OK, then let's go ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946:669,rout,route,669,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946,1,['rout'],['route']
Integrability,"> > I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go.; > ; > But that's sort of the point: Gram-Schmidt keeps the meaning of the orbitals, which is important if you're running e.g. CASSCF. Of course, you can always do the orthogonalization per subspace, e.g. doubly occupied, RAS I, RAS II, RAS III, inactive, but then you also have to take care of the cross-block overlaps. For CASSCF, we **have to** do per subspace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869314229:114,depend,dependent,114,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869314229,1,['depend'],['dependent']
Integrability,"> > This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code.; > ; > This also means that the density you'll get is likely symmetry-broken; does your code handle that? The multiplicities may also not be correct. Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791589519:466,rout,routine,466,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791589519,1,['rout'],['routine']
Integrability,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:377,interoperab,interoperable,377,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276,2,['interoperab'],['interoperable']
Integrability,"> @SinaMostafanejad Were you able to get this to work? I think the only way in which we could do this would be to write a wrapper code around these functions (similar to the **array_interface** on Matrix objects) so that we can correctly return the python values instead of updating them in place. Hi @dgasmith,. Unfortunately not. I had a lot in my plate last month because of my dissertation defense. I agree with you about this possibility as I have already discussed it with @mattwelborn and Sam although I am not aware of specifics you are referring to about the array_interface in Psi4. Since C extension in python is out of my comfort zone in programming, it might take me some time to work it out considering a few other tasks w/ priorities on my list, in case if you want me to do that. If so, please point me to the files and directions in Psi4 that I need to look into before I begin. Otherwise, please tell me how can I be of any help. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-643814110:122,wrap,wrapper,122,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-643814110,1,['wrap'],['wrapper']
Integrability,"> @davpoolechem , hooray approved!; > ; > 1. do you want to fix the conflict and rebase so CI passes or do you want me to do it in the GH GUI?; > ; > 2. I'm not considering a gauxc conda package a requirement to merge, but should we activate compiling it in an Azure lane to ensure in working order?. Fantastic! Happy to see it!. 1. I would indeed like to, yes.; 2. The Psi4/GauXC interface supports using internally-built instances of GauXC. At first thought, we should be able to add it to Azure using the internal GauXC build process, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2277887714:381,interface,interface,381,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2277887714,1,['interface'],['interface']
Integrability,"> @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > ; > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697,2,['interface'],['interface']
Integrability,"> @loriab Can we close this? I think this is wrapped up by now. Sure, go ahead. I think I was using it to track a snapshot of file, but it's outlived its usefulness. And certainly REMP is wrapped up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1540502506:45,wrap,wrapped,45,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1540502506,2,['wrap'],['wrapped']
Integrability,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:361,rout,route,361,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,2,['rout'],['route']
Integrability,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:222,contract,contracting,222,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265,2,['contract'],"['contracting', 'contracts']"
Integrability,"> @zachglick, thoughts? I strongly preferred your plan before, but it wasn't something I was going to insist on. I'll drop a comment on this matter for for an extra perspective. The original plan is quite fine, and many good points were made regarding improvements to efficiency within the Incfock routine. However, the original plan proposed completes the unified Incfock formalism over two PRs, and the impression I get is that the standardization of the Incfock process is really happening in Step 2. The CompositeJK pilot implementation (i.e., the unification of DFJCOSK and DFJLinK + CompositeJK front end) really only needs Step 2 to proceed, then, while Step 1 of the proposed Incfock work (i.e., the improvement of the Incfock process itself) could likely be done independently from CompositeJK. Basically, my thought is that, by switching Steps 1 and 2 of the original proposed plan for Incfock, that would allow the second CompositeJK PR to be put into Psi4 more quickly and allow parallel development of CompositeJK and the JK Incfock formalism. I am overall fine with either ordering for Incfock PR steps, but I figured I would at least bring this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1303625951:298,rout,routine,298,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1303625951,1,['rout'],['routine']
Integrability,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:370,message,message,370,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535,1,['message'],['message']
Integrability,"> AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This is correct. OpenBLAS used to spam `stderr` (i think) with a warning everytime you call a pthreaded BLAS inside an openmp region. I was expecting to see it for my test with the ""wrong"" openblas library, but maybe psi4 redirects it. Or i accidentally used USE_OPENMP=1 for both tests..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490:66,rout,routines,66,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490,1,['rout'],['routines']
Integrability,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:314,depend,depend,314,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664,1,['depend'],['depend']
Integrability,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:654,interface,interface,654,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358,1,['interface'],['interface']
Integrability,"> Also add it https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L77-L80 and https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L14-L20, please. then lgtm!. Done. I've made Flexiblas the first one to look for, since it's backend agnostic and can also be used to wrap MKL.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632:285,wrap,wrap,285,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632,1,['wrap'],['wrap']
Integrability,> Any error message on the crash?. No.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940098:12,message,message,12,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940098,1,['message'],['message']
Integrability,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:227,integrat,integration,227,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['integrat'],['integration']
Integrability,"> Can you expand a bit on ""not really header-only""? Checking the source code, I only see `hpp` files. Sure. If the armadillo runtime library is to be used, `src/wrapper.cpp` is compiled and; one can simply link against `armadillo`. However, this wrapper can also be switched off. In this case, one needs to link directly against BLAS and LAPACK. The [documentation](http://arma.sourceforge.net/faq.html) explains this in a little more detail in the _Linking_ section. I have never tried to use armadillo without the wrapper to be honest... I'll give it a try.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-445558835:161,wrap,wrapper,161,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-445558835,6,['wrap'],['wrapper']
Integrability,"> Can you provide a before-and-after example of what error messages look like?. Hmm, yes I reckon if I ran something with a ~50 MB ramdisk as the scratch drive, that should be a reliable way to trigger a write failure. My immediate-term schedule just got a lot busier, so I might not get around to doing this for a week or so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441:59,message,messages,59,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441,1,['message'],['messages']
Integrability,"> Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it.; > ; > All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc.; > ; > This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in [#2261 (comment)](https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277); > ; > In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified. All fair criticisms, and that clears it up. The code was originally pure C and later modified to fit (nominally) within a C++ framework, hence the structure of the variable declarations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467:176,Depend,Depending,176,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467,1,['Depend'],['Depending']
Integrability,"> Cool, this looks really neat! I was thinking this might take a bit to get in, but looks fairly integrated as is. Thanks! It's the first time I try to contribute to psi4, and I found it actually rather easy to; add my project given the online documentation :+1: . > IIRC Armadillo is header only which makes things significantly easier to interface too. I don't think the inclusion of the library for this extension will be an issue. Unfortunately, it is _not really_ header-only... Probably I'll switch to something header-only (like Eigen) if I find the time. Anyways, the inclusion of armadillo has not been a problem until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-445555668:97,integrat,integrated,97,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-445555668,2,"['integrat', 'interface']","['integrated', 'interface']"
Integrability,"> DESTDIR is always set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. You mean _you_ are setting `DESTDIR` as an environment variable, right? Whereas old psi used to use it explicitly (https://github.com/psi4/psi4/blob/1.2.x/external/upstream/libxc/CMakeLists.txt#L33), that string doesn't appear in the source now, and in an objdir, it only activates if the envvar is set, and I've tested with GNU Make that it isn't set by default. >> That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). > What does this mean?; > Every port uses DESTDIR to supply stage directory. It is super well tested. I meant environment variables capable of influencing the psi4 build system have not been exercised -- I've stuck with CMake variables. I was not acquainted with user use of DESTDIR, as `CMAKE_INSTALL_PREFIX` has worked fine for users and other ports like Fedora (https://src.fedoraproject.org/rpms/psi4/blob/rawhide/f/psi4.spec#_134). > psi4 build adds DESTDIR to its inner stage directory which causes this problem. When I run an install and set envvar DESTDIR, I do see the two dirs under it that are your original issue. I'm glad to finally understand how this comes about, and I can look into this eventually. For now, I'd suggest either using `CMAKE_INSTALL_PREFIX` or the subdirectory (one of two) from env DESTDIR; either looks to contain the full installation directory you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040:600,rout,routes,600,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040,1,['rout'],['routes']
Integrability,"> For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. Yeah, @susilehtola, I'm opening the bug here and in Fedora too, of course.; @loriab if I remember correctly, Boost is a dependency in Fedora ('s psi4), so it may be the case..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263452883:243,depend,dependency,243,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263452883,1,['depend'],['dependency']
Integrability,"> For the record, I'm not happy about dropping Py 3.7 support. The last time I tried to build Psi and Forte, using Py 3.7 was the only way I can get it to work. I can do some more investigation as to where the conflict is. oh, I hadn't heard that constraint. I wonder if it could be just a pinned dependency (e.g., hdf5) that could only be satisfied by chance with a 3.7 python. fwiw, the dropping 3.7 at this point is only a build-fewer-conda-packages consequence. if you change it back to `find_package(Python 3.7)`, 3.7 works fine. Let me know if I can run any tests/environments to help find out if this is a packages or actual language limitation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806:297,depend,dependency,297,https://psicode.org,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806,1,['depend'],['dependency']
Integrability,"> Given how difficult PSIO is to use for non-experts (which is anybody who is going to be using it nowadays), I'd rather keep thin but descriptive wrappers. Very well. The two functions in question are now preserved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2724#issuecomment-1257070240:147,wrap,wrappers,147,https://psicode.org,https://github.com/psi4/psi4/pull/2724#issuecomment-1257070240,1,['wrap'],['wrappers']
Integrability,"> Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though. Note that SAD hasn't been using those values in a long time; instead it runs spin-restricted calculations. Also, SAD isn't symmetry aware at the moment, which is a problem especially for transition metals and lanthanides and actinides where e.g. the s and d orbitals are very close in energy and the energy differences between different configurations are just eV. The proper way to do it is to impose symmetry, so that the occupations can be controlled. This is the way it is in PySCF; the ground states are from fully numerical calculations I did in https://journals.aps.org/pra/abstract/10.1103/PhysRevA.101.012516",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679:65,rout,routine,65,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679,1,['rout'],['routine']
Integrability,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:122,message,message,122,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092,4,['message'],"['message', 'messages']"
Integrability,"> Great!; > ; > If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default. That does not suffice. In addition to setting the grid with e.g. `mf.grids.atom_grid = (100,590)` you need to turn pruning off explicitly with `mf.grids.prune = None`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356:151,integrat,integration,151,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356,1,['integrat'],['integration']
Integrability,"> Have you tried with Python 3.11 yet?. update, I've built python 3.11 rc and numpy from source (first time ever). I did have to use the most recent v2.10.0 pb11. By turning off some diis (see below), I can get the variant on test tu1 to run through 6 SCF iterations (not to convergence) before segfaulting. major things still to investigate -- installing scipy, what lapack libraries for numpy is pip hiding from me, are the timer files closing cleanly when it throws the install-scipy-or-disable-accelerator message. and, of course, all this is on master, not the 1.3.2 of interest to you. . ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; set scf scf_initial_accelerator none; set diis off; energy('scf'). compare_values(-76.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357:510,message,message,510,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357,1,['message'],['message']
Integrability,"> Hi Yi,; > ; > Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:253,rout,routing,253,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,6,"['interface', 'rout']","['interface', 'routing']"
Integrability,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:934,message,messages,934,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054,8,['message'],['messages']
Integrability,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:151,depend,dependency,151,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,1,['depend'],['dependency']
Integrability,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343774871:194,depend,dependency,194,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871,1,['depend'],['dependency']
Integrability,> I do think we should try to get the changes into one psi4 release cycle. Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1256964070:101,message,message,101,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1256964070,1,['message'],['message']
Integrability,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:150,integrat,integration,150,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104,4,['integrat'],['integration']
Integrability,"> I finished about half of the review and then got confused about the ""big picture."" If you're only intending to support point charges, then what happens if a user passes in an external potential object with basis functions attached? I can't find a place in this code that limits the kind of external potentials that can be considered. And why are there lines of code to get and append basis functions from/to the external potential? If you don't intend to support basis function external potentials (and it isn't clear to me if you intend to or not), then there should be a user-friendly error message when a user tries this. And on the topic, what is the technical barrier to including basis function external potentials? Is there a reason why those are being excluded from this PR, if they are?; > ; > I'll need to re-review once changes are made, and this issue of basis function external potentials is clarified. Please see the updated description above. I removes unnecessary code to make this PR specifically for point charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855:595,message,message,595,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855,2,['message'],['message']
Integrability,"> I guess efpmultipolepotential.h and efpmultipolepotential.cc can also be nuked at this point?. Yes, these are gone now. I have some ideas to improve the `multipole_potential` integrals further (e.g., computing multiple sites at once, contracting over the multipole values, etc.), but I'll make another PR for that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-500405513:236,contract,contracting,236,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500405513,1,['contract'],['contracting']
Integrability,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:703,message,messages,703,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585,2,['message'],['messages']
Integrability,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:744,depend,depending,744,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,1,['depend'],['depending']
Integrability,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:23,message,message,23,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500,1,['message'],['message']
Integrability,"> I mostly like the PR now, but one naive question: why do we have a separate filling out of the ""intermediate contraction pointers"" and then +='ing those values to the actual J/K matrices? I understand that old code is doing this, but I want to understand why the codes are doing this. It is because writing to JK matrices inside deeply nested loops leads to frequent thread collisions, which can be offset by using the `#pragma omp atomic` directive. However, using `#pragma omp atomic` inside deep loops is ill-advised, since that directive hinders parallel efficiency. The solution to this problem is to give each thread its own temporary buffer to write to, and then flush those buffers into the actual JK matrices later on, in a shallower nested loop, with `#pragma omp atomic`. Hope this helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1046337116:111,contract,contraction,111,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046337116,1,['contract'],['contraction']
Integrability,"> I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339458114>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339460309:1102,contract,contraction,1102,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309,2,['contract'],"['contract', 'contraction']"
Integrability,"> I see that this PR passes without needing to update any tests. Do you think some QCFractal tests would be helpful to have, especially now that we have the distributed driver? I know psi4 has tests that use QCSchema, QCElemental, and QCEngine. Yeah, I think a QCFractal Snowflake test on each of findif, manybody, composite would good, provided solving the dependency env isn't too painful, since a database, etc. are needed. There's unlikely to be a conda pkg for the `next` qcf until September at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123:358,depend,dependency,358,https://psicode.org,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123,1,['depend'],['dependency']
Integrability,"> I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. No. Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:32,interface,interface,32,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,2,['interface'],['interface']
Integrability,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:862,depend,depending,862,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,4,['depend'],['depending']
Integrability,"> I think that requiring pairs of (Alpha, Beta) is the right interface. Another (more clean and less error-prone) option would be to only allow for custom operators in the AO basis...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168:61,interface,interface,61,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168,1,['interface'],['interface']
Integrability,"> I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users. I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic. It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060:653,rout,route,653,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060,1,['rout'],['route']
Integrability,"> I would _hope_ that there is no density on the CCSD wavefunction. there isn't unless you call `gradient` or `properties` generally, which is why I tend to do my own density/prop integral contractions rather than calling `oeprop` so I know what I'm getting. . > it would be good for us to put in a warning to encourage this. I definitely agree 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869245886:189,contract,contractions,189,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869245886,1,['contract'],['contractions']
Integrability,"> I would indeed like to, yes. 👍 . > The Psi4/GauXC interface supports using internally-built instances of GauXC. At first thought, we should be able to add it to Azure using the internal GauXC build process, right?. Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059:52,interface,interface,52,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059,1,['interface'],['interface']
Integrability,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:369,message,message,369,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293,1,['message'],['message']
Integrability,"> I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go. But that's sort of the point: Gram-Schmidt keeps the meaning of the orbitals, which is important if you're running e.g. CASSCF. Of course, you can always do the orthogonalization per subspace, e.g. doubly occupied, RAS I, RAS II, RAS III, inactive, but then you also have to take care of the cross-block overlaps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869305358:112,depend,dependent,112,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305358,1,['depend'],['dependent']
Integrability,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:204,interface,interface,204,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,1,['interface'],['interface']
Integrability,"> I'm confused about the perceived assumption that all integrals fit into memory. No such assumption is made. In fact, this code can be seen as an extension of Weigend's work to the case in which they _don't_ all fit in memory, and working with the assumption that integrals do _not_ fit in memory is the reason for many of the strange choices made in writing this code. @obrien951 My comment originates from the reason that like I said, it's hard to follow the code. There are **no comments** describing what the functions actually do. Also, if you look at when I posted the comment, it was 24 days ago, on the week before Thanksgiving, way before our lengthy discussion on Slack where it took several days and dozens of messages to understand that your algorithm is nothing else but RI-HF as presented by Weigend in the 2002 paper, with only the difference that in case it is not possible to fit even a single orbital vector in memory (the `(ui|A)` intermediates), you do some sort of blocking, but what kind, I do not know. These sorts of unclarities mean there should be a short, general description of what the code does in the header file. If it's RI-HF à la Weigend, a reference to the paper and a brief description on the differences is enough. At the moment, the function names are opaque. Some functions have unintelligible descriptions like `// Line 7 algorithm 8` (line and algorithm of what?!) and there are dozens of functions that don't have any kind of description.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-748421237:722,message,messages,722,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-748421237,1,['message'],['messages']
Integrability,> I'm having second thoughts about this PR now. Should we deprecate the old constructors first? This PR will require changes in Forte as well. options as I see them. I do think we should try to get the changes into one psi4 release cycle. * (n/c) leave convenience fns as-is; * (deprecate) leave convenience fns operable but add deprecation message; * (upgradehelper) leave convenience fn header in place but have it print a message with necessary changes; * (remove) remove convenience fn header and body,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1256461715:341,message,message,341,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1256461715,2,['message'],['message']
Integrability,"> I'm not sure how often `oeprop` really gets called directly in an input. There's a very good reason to call `oeprop` directly, thanks to Psi4Numpy: I'm prototyping an electronic structure method, I have its OPDM, and I want to get some properties from it. That said, the reason for calling `oeprop` in this case is much simpler. There's a section in the manual titled ""Evaluation of One-Electron Properties — oeprop()"", so a user who wanted to evaluate one-electron properties used `oeprop`. > the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals?. CCSD energy calls don't solved lambda equations. I would _hope_ that there is no density on the CCSD wavefunction, but I haven't checked. Still, I'm agreed with your bigger point: properties using built-in Psi methods should just go through `properties`. In my view, manual `oeprop` calls should be the province of people who custom-set the density, and it would be good for us to put in a warning to encourage this. I don't have strong feeling on what this distinction means for `psivars`. I think that's for Lori to weigh in on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869199979:673,contract,contract,673,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869199979,2,['contract'],['contract']
Integrability,"> I've started the review, but I'm confused by the original Ochsenfeld paper.; > ; > At the start of the algorithm, why do they say ""Loop over all mu in significant bra-shell pairs"" rather than ""Loop over all shells mu""? Every shell is in at least one significant pair, right?; > ; > I imagine this has to do with their reference to Ahlrichs prescreening and ""the significant shell pairs have been preselected by overlap criteria,"" but I don't follow the details. The shell prescreening for kets can be done over all shells, or over shells blocked by task (atom-pair). See the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" header. In my implementation, I did it over all shells prior to entering the task loop, but those two implementations are equivalent. I will refactor my code so that it conforms to the algorithm in the paper, for easier review and less confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618:612,contract,contraction,612,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618,1,['contract'],['contraction']
Integrability,"> I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself. I fuzzily remember being able to successfully run the tests with a version from a couple years ago, so 2020-22 era MRCC was OK I think, but I remember having to install the patches, otherwise neither Psi4 or Molpro would work with MRCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542,2,['interface'],['interface']
Integrability,"> Ideally, the list of functionals in Psi4 would depend on the version of libxc available. Not to be snarky, but when there are two upstream libxc-s that can build and are API compatible with Psi, I can probably arrange for varying functional lists. For present, I yearn for one. (I may be misunderstanding your point.) . > And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:49,depend,depend,49,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149716:61,depend,dependencies,61,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716,2,['depend'],"['depend', 'dependencies']"
Integrability,"> Instead, the parser should be developed to have a shorthand for exchange and correlation functionals. . Not sure I agree on this one. While such parsers are common in other codes, personally I think it's a wasted effort when one uses libxc - most folks who want ""non-standard"" combinations of exchanges and correlations know what they're doing, and they will be comfortable with the `dict`-based interface (if they aren't, it's a failure of the docs more than anything). Obviously, it doesn't hurt to have the common options (such as BLYP, SVWN, PW91, PBE...) pre-defined and checked for regressions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875:398,interface,interface,398,https://psicode.org,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875,1,['interface'],['interface']
Integrability,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:153,interface,interface,153,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698,5,['interface'],"['interface', 'interfaces']"
Integrability,> It appears that the wB97X-D3 is currently being built incorrectly. Yes. Part of the problem will be solved by https://github.com/psi4/psi4/issues/920. The other problem is that the current dashparam-dftd3 interface does not support setting a custom rs8 parameter for D3ZERO (rs8 is 1.0 except in Chai's wB97X-D3 re-fit where s8 is 1.0 and rs8 is fitted). Until above is solved the d3 dict entry should probably be commented out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-368139862:207,interface,interface,207,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-368139862,1,['interface'],['interface']
Integrability,"> It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving ; > downstream the permission to rely on both the object and all of its public members ; > being a stable API, not just a few functions. I think that is right, as well. When I said ""user-facing"", I meant the `ERISieve` functions that are explicitly enabled Python-side via PyBind, as defined through the `export_mints.cc` file. Deprecation as a whole is less my realm of expertise, however, so I'm not 100% if what I'm doing is even the ideal route regardless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435:535,rout,route,535,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435,1,['rout'],['route']
Integrability,"> It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow. That's what I do for the json molecule record – there's a list `real = [True, False, True, False, False, False]` and a separate `fragment_separators = [3]` that decouples what would be the following in psi. Ghosting types A & B are collapsed. . ```; molecule {; C; @C; C; --; C; C; C; }; extract_subsets(1, 2); ```. > As for a new Molecule function to ensure the user knows what they're going to get, are you referring specifically to a molecular_weight function or more generally a function to return either the mass or Z val as either zero or real depending on input?. I think I've settled on recommending changing the signature of `Molecule.Z()` and `Molecule.mass()` to take a required argument `bool zero_ghost`. The recompile will force consideration of which was wanted everywhere (incl. downstream). At the same time, I think leave `CoordEntry.Z()` and `CoordEntry.mass()` alone in their probably inconsistent state. Most of the `Z()` calls in Mol are probably to `CoordEntry.Z()` and have the gh=0 factored into the logic. Should definitely get consensus tomorrow before diving in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363503391:685,depend,depending,685,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363503391,1,['depend'],['depending']
Integrability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:96,Depend,Dependencies,96,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,7,"['Depend', 'depend', 'wrap']","['Dependencies', 'dependencies', 'depending', 'wrapped']"
Integrability,"> Just to confirm: these are almost all just removal of the C-based wrapper functions, correct?. Yes. As far as I can tell different modules seem to be using PSIO in slightly different ways. The newer modules tend to create their own PSIO object and then call its member functions, but older modules seem to be more reliant on global state. To satisfy this, there is a ""global PSIO object"", and some wrapper functions have been written that usually do the same thing as the corresponding PSIO member functions, except they are regular functions and they manipulate the ""global PSIO object"". This PR removes the unused ones.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2724#issuecomment-1265942890:68,wrap,wrapper,68,https://psicode.org,https://github.com/psi4/psi4/pull/2724#issuecomment-1265942890,2,['wrap'],['wrapper']
Integrability,"> Maybe it's a pybind11 issue?. Worth a try. Looks like we were at `v2.2.3` in that era: (2nd col of https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml#L103-L104). > Yup. And no changes to dependency lists either; no qcengine. aggh. > And yes, this is with Python 3.11 in Fedora rawhide. Can you dial Python down a bit? Psi 1.3 was only knowingly build for 3.6 and 3.7. --------. This long life of v1.3 is all because of Libint2 issues, right? Can L2 be vendored with (internal build distributed with) Psi4? Must it be static?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833:221,depend,dependency,221,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833,1,['depend'],['dependency']
Integrability,"> Maybe the ANO basis set family would suffer from this? While I do not use them, IIRC they are notorious for having an extremely high number of primitives, and for slowing many integral packages to a glacial pace. You don't even need to go to ANO; just take the cc sets for transition metals. I ran a simple benchmark [here](https://mattermodeling.stackexchange.com/questions/3794/which-software-is-good-with-generally-contracted-basis-sets) for Zn2 with the cc-pVDZ basis set. Zn and Zn2 ran in 19 and 216 seconds of wall time with Psi4, compared to 0.7 and 1.4 seconds with PySCF, respectively.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414:420,contract,contracted-basis-sets,420,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414,2,['contract'],['contracted-basis-sets']
Integrability,"> OK! So this PR goes to `master`. After it is merged, I will cherry pick and make a PR to `1.3.x`. Sounds good. Slight complication is that when I wrote the versioner.py script that computes our version (and integrates w/cmake), I had the misguided notion that all commits on a release branch were version increments (that is, your PR would turn into v1.3.1 or .2), so I'll have to unwind that scheme before any proper tag of a v1.3.1 w/your PR. Just FYI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492:209,integrat,integrates,209,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492,1,['integrat'],['integrates']
Integrability,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:119,interface,interface,119,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016,1,['interface'],['interface']
Integrability,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738003:127,depend,dependencies,127,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003,1,['depend'],['dependencies']
Integrability,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:1033,wrap,wrap,1033,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795,2,['wrap'],"['wrap', 'wrapper']"
Integrability,"> One thing that puzzles me right now is how to figure out center(s) involved in the MO indices in epsilon_a(). Core orbitals are delocalized between identical nuclei. To figure out which nuclei a core orbital corresponds to, you would have to have a suitable metric. This could be the square norm of the MO coefficient of predefined core functions. A more accessible way would be to first localize the orbitals, so that you get rid of the mixing between nuclei, and then it would be straightforward to calculate e.g. <r^2>. If you are asking how to do this by hand in a small system, and not in a general case, then that's pretty straightforward. Just look at the orbital coefficients. If you're using a contracted basis set, the contracted functions should be good approximations to the core orbitals. Thus, you should see a coefficient close to 1 in absolute value for the core function in the corresponding core orbital, if you only have one heavy atom. If you have more, then the amplitude will be divided among the nuclei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038:705,contract,contracted,705,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038,2,['contract'],['contracted']
Integrability,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:796,interface,interface,796,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,2,['interface'],['interface']
Integrability,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:26,message,message,26,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769,1,['message'],['message']
Integrability,"> Procedure torsiondrive is registered with QCEngine, but cannot be found. @ErikCVik you need `torsiondrive` in your env. I am on linux and here is a minimal set of packages to create a new environment, which worked for me.; ```; name: psi4_td; channels:; - psi4; - conda-forge; - defaults; dependencies:; - python =3.9; - qcengine; - qcelemental; - blas=*=*mkl; - libblas=*=*mkl; - matplotlib; - psi4; - dftd3; - gcp; - gau2grid >=2.0.7; - geometric; - torsiondrive; ```; You can copy it to a file and run `mamba env create -f file.yaml`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486191960:291,depend,dependencies,291,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486191960,1,['depend'],['dependencies']
Integrability,"> Reference values for PCM excitation energies can be found here. ~~I guess for the tests to work, the above stuff with `nonequilibrium` needs to be integrated first~~ 😅; Yes...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292:149,integrat,integrated,149,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292,1,['integrat'],['integrated']
Integrability,"> So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions.; > ; > Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; > ; > ```; > SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; > std::shared_ptr<BasisSet> bs3) {; > auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; > return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; > }; > ```; > ; > and it is also revealed in the Python interface, which means that you should be able to call it.; > ; > Hopefully someone else can tell how to fit all the pieces together. thanks for your pointers @susilehtola ! yes, i see this code now and this is a good start. so, what is left is for me to define a `psi4`-compatible `BasisSet` to represent the set of Gaussian auxiliary basis functions that I want (say the 60 different ones used by the paper). . it would be fantastic if anyone could give pointers on this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386:411,wrap,wrapper,411,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"> Sorry to keep making you write, but is the ""big picture"" view of nbody documented anywhere? I can't follow what energy_body_dict means, or why the value of one of its entries is coupled to whether the total energy is available. > I fear this is a case where there is a lot of ""developer was only coding to be comprehensible to themselves"" code debt. I confess to being lost in nbody, too. And some of the psivars set aren't as descriptive as I'd like (e.g., `2CP`. However, any changes to nbody make DDD especially painful to rebase. And I think a good time to rationalize and document the pieces are when we take the nbody communication dictionary DDD uses and formulate/propose a proper schema. I guess I'm ok leaving it inscrutable (and without binding contracts :-) until then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597:758,contract,contracts,758,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597,1,['contract'],['contracts']
Integrability,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:136,rout,routines,136,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154,3,"['inject', 'rout']","['injected', 'routines']"
Integrability,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:303,depend,depending,303,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540,1,['depend'],['depending']
Integrability,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:195,depend,dependent,195,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182,2,['depend'],['dependent']
Integrability,"> The ""correct"" solution is probably to replace PSIO with hdf5. I'd like to talk about that at PsiCon. Q5Cost ?; I have seen some evidence of Q5Cost support in the MRCC codebase, so that could maybe replace the currently very fragile MRCC interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725#issuecomment-1271996309:239,interface,interface,239,https://psicode.org,https://github.com/psi4/psi4/issues/2725#issuecomment-1271996309,1,['interface'],['interface']
Integrability,"> The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Are you using the latest psi4-dev package (.dev22)? That adds the `mpfr` and `eigen` deps to the build environment. I definitely acknowledge that the `Libint2Config.cmake` is not handling `find_dependency` right for eigen and mpfr (really, gmp) yet. I do have cmake edits for those locally, but I have not yet bent cmake to my will. So having the conda packages in place patches the problem. Does your system package have a `Eigen3Config.cmake`? Maybe expand CMAKE_MODULE_PATH?. > Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. All of Psi4 master is now running Libint2 -- any references to Libint1 or Libint1_t (a hack to allow both to coexist) are only waiting for removal. > (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.). Thanks for the reminder. I've just edited it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125:112,depend,depends,112,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125,2,['depend'],"['dependency', 'depends']"
Integrability,"> The authors' DM21 functional implementation has a PySCF interface, so you can already use PySCF to run calculations. Indeed! Our workflows use [QCEngine](https://github.com/MolSSI/QCEngine), which does not yet support PySCF. It should be relatively straightforward to add, however---I've opened an issue at https://github.com/MolSSI/QCEngine/issues/335 to discuss this possbility. > Hooking it up to Psi4 will be a much bigger task, since unlike PySCF, Psi4 doesn't handle density functionals in Python... DM21 can be used from C++: the README describes this [here](https://github.com/deepmind/deepmind-research/tree/master/density_functional_approximation_dm21#using-dm21-from-c).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2380#issuecomment-991996913:58,interface,interface,58,https://psicode.org,https://github.com/psi4/psi4/issues/2380#issuecomment-991996913,1,['interface'],['interface']
Integrability,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:29,message,messages,29,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432,2,['message'],"['message', 'messages']"
Integrability,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:566,rout,route,566,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567,18,['rout'],"['route', 'routes']"
Integrability,"> The conversion to traceless form can be done for any order of multipole, but I'm not really sure it's got a use case at this point. Quadrupoles in traceless form can be useful for force field definitions. Our CFMM code uses very high orders of multipoles, but they're converted to spherical harmonics to work with all the efficient machinery we've developed so that doesn't need the traceless definition. Max and I have traded Slack messages, and we're agreed on adding traceless quadrupoles so those still exist, but not to bother with the other multipoles for the time being. I'll add that to the PR hopefully today. I've been too busy fixing `ambit` to respond to PR feedback here at my usual pace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075186676:435,message,messages,435,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075186676,2,['message'],['messages']
Integrability,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:1205,message,messages,1205,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012,2,['message'],['messages']
Integrability,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238060504:346,INTERFACE,INTERFACE,346,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504,3,"['INTERFACE', 'depend']","['INTERFACE', 'dependency']"
Integrability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:245,interface,interfaces,245,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,5,['interface'],"['interface', 'interfaces']"
Integrability,"> This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX. Thanks! Yeah, this precedence is the big reason I named the SCF_TYPE for DFJLinK the way I did. > and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. . This is correct. I plan on adding a new SCF_TYPE naming scheme for CompositeJK in the next CompositeJK PR. > There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. This is also correct. It's basically a refactoring of the code to combine the DFCOSK DFJ with the old DirectJK LinK into a new, separate JK class. > No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder. Awesome, thanks! This dual implementation is something I plan on removing in the next CompositeJK PR, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994:563,wrap,wrappings,563,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994,1,['wrap'],['wrappings']
Integrability,"> This is awesome! Less code and faster, always nice to see. Thanks! 😊 ; I'll polish the code a little ~~and make the EFP driver code use the new routines.~~ ➡️ other PR. Another question: The current implementation (both the ""new"" and ""old"" field integral code) does not seem to make use of OpenMP parallelism. Is this correct or did I mess something up?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505032082:146,rout,routines,146,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505032082,1,['rout'],['routines']
Integrability,"> This is fantastic Max! I really like the generalized `MultipoleInt` class. I'm good with options (b) and (c). I think that `DipoleInt` and `QuadrupoleInt` classes which function as light wrappers around `MultipoleInt` are more user-friendly than requiring users to pluck the appropriate integrals out of the `MultipoleInt` return.; > ; > Have you done any performance comparisons between the new MD code and the old OS code? I don't know if one is expected to be faster than the other. It would be good to do some simple timings (maybe one low angmom system and one high angmom system?) before completely ditching the OS code. @maxscheurer If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935:189,wrap,wrappers,189,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935,2,['wrap'],['wrappers']
Integrability,"> Two comments about lines that weren't changed:; > ; > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1910-L1912); > ; > Lines 1910 to 1912 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > # Drop out for props and freqs ; > if ptype in [""properties"", ""frequency""]: ; > raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)) ; > ; > We shouldn't be dropping out for frequencies anymore. Fair point. I changed the raw 'frequency' function too, to be a true wrapper around 'hessian', that code is just a left-over. Changed. > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1940-L1944); > ; > Lines 1940 to 1944 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > if len(method_list) > 1: ; > cbs_kwargs['delta_wfn'] = method_list[1] ; > cbs_kwargs['delta_basis'] = basis_list[1] ; > if 'delta_scheme' in kwargs: ; > cbs_kwargs['delta_scheme'] = kwargs['delta_scheme'] ; > ; > It would be good to put a comment here explicitly saying that `_parse_cbs_gufunc_string` should enforce that `len(method_list)` can only be 1 or 2. The logic confused me for a few minutes, on first read. I'll edit the docs. The idea is that one usually only specifies one ""delta correction"" in a string, ie:; ```; mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz; ```; as opposed to trying to do two delta corrections in a ""method/basis"" syntax (which is not supported):; ```; hf/cc-pv[q5]z+D:mp2/cc-pv[tq]z+D2:ccsd(t)/cc-pvtz; ```; Folks that want to pile on the deltas can use the old interface (with scf, corl, delta and delta2 stages) or the cbs_metadata interface, which doesn't have a limit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793:614,wrap,wrapper,614,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"> Was there another message (appears in my email) that got deleted on GH?. Yes, I deleted it when I realized my criticism was totally false. I apologize for the confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232802:20,message,message,20,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232802,1,['message'],['message']
Integrability,"> We should use a more informative/tailored error message.; > ; > But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?. Ach so, I just found a method to calculate without this wfn,thanks!; btw,I'm looking forward to calculate analytical hessian with DFT for long time, having any plan?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664:50,message,message,50,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664,1,['message'],['message']
Integrability,> What happens if you use a tighter integration grid?. Thanks for your quick reply. I set it to a pretty large number (I have no experience in it) and got better results:. ```; set dft_spherical_points 1202; set dft_radial_points 150; ```. ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 6 x 3 . 1 2 3. 1 0.01761265286365 -0.03021731225771 -0.01636085243187; 2 -0.00198025542796 0.00069379354137 -0.01217743689404; 3 -0.00684467846030 0.00863180515130 0.01631841052017; 4 -0.00782888971966 0.00500566642863 0.00531395359842; 5 -0.00015059931846 0.01071543959728 0.00493669924504; 6 -0.00080880896432 0.00517347208476 0.00197251031653; ```. This seems to resolve the problem. XC:. ```; -XC Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.023415204354 -0.034617520267 0.016571065968; 2 0.004264668622 -0.082393045737 0.110542261946; 3 0.057056513665 -0.084998504340 -0.155592261007; 4 -0.165444201018 0.054818800402 -0.007755576608; 5 0.081555904871 0.141482887041 0.033036030615; 6 -0.000848669520 0.005710247436 0.003201763433; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075940978:36,integrat,integration,36,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075940978,1,['integrat'],['integration']
Integrability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:45,integrat,integration,45,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,2,['integrat'],['integration']
Integrability,"> What version of cmake do you use?. Personally, I use a near-latest. The Psi4 minimum is 3.15. We could go higher, but at least one of the dependencies doesn't want to go beyond 3.16 until Ubuntu does. If you happen to be thinking of FetchContent instead of ExternalProject, I'm not keen on a rewrite, and we do have a couple deps (python ones) that aren't under CMake control. In what way is the copy from `<builddir>/objdir/stage` to `CMAKE_INSTALL_PREFIX` going awry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655:140,depend,dependencies,140,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655,1,['depend'],['dependencies']
Integrability,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:155,integrat,integrating,155,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908,1,['integrat'],['integrating']
Integrability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:97,depend,dependence,97,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,2,['depend'],['dependence']
Integrability,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:407,depend,dependent,407,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737,2,['depend'],['dependent']
Integrability,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:371,message,messages,371,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,1,['message'],['messages']
Integrability,"> format changes and traceless quad are in the next PR? in that case, lgtm. They will be included in this PR, when I get back to it. Disregard the message about ""the next PR"" that still lingers on the Slack GH feed. I meant to post that to the `ambit` repo, which is getting most of my development time at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075271664:147,message,message,147,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075271664,1,['message'],['message']
Integrability,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:420,interface,interface,420,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:83,depend,dependency-targets,83,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845,6,"['depend', 'rout']","['dependency', 'dependency-targets', 'route']"
Integrability,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:296,depend,dependency,296,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648,1,['depend'],['dependency']
Integrability,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:41,integrat,integratorxx,41,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,2,['integrat'],['integratorxx']
Integrability,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:563,Integrat,Integration,563,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,1,['Integrat'],['Integration']
Integrability,"> would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?. What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4. I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1469841907:362,interoperab,interoperable,362,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1469841907,1,['interoperab'],['interoperable']
Integrability,">> I do think we should try to get the changes into one psi4 release cycle. > Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?. I think deprecation warnings (with code still functional) need to be in at least one release. So the code can be broken as soon as ~Dec (after 1.7.0 release). But what I was meaning to say with ""get the changes into one psi4 release cycle"" was let's aim to get all the immediate-breaks and/or notifications in before 1.7.0 so that downstream users have the info to do a single overhaul after 1.7.0. Keep pinging me if this doesn't make sense :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160:104,message,message,104,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160,1,['message'],['message']
Integrability,">> Was there another message (appears in my email) that got deleted on GH?. > Yes, I deleted it when I realized my criticism was totally false. I apologize for the confusion. Ok, no problem, thanks. I just keep losing things in email, and I remembered the suggetion sounded likely. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105#issuecomment-1859233247:21,message,message,21,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859233247,1,['message'],['message']
Integrability,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276211311:223,interface,interface,223,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311,4,"['depend', 'interface']","['depending', 'interface']"
Integrability,"@CDSherrill , good to hear as I quite agree. This is just what the dfmp2 module does presently for gradients: switches `scf_type` to `df` unless the user has reqested _not_ `df`, in which case it reveals its cause of death. I'm imitating this behavior now for the other mp2 gradient routes. My Q1 for Ugur was that a conv+df gradient was proceeding, and I wanted to confirm that failing it was the correct thing to do. The complication/confusion (it even caught me last night) is that although all scf calculations _run df by default_ (handled in the driver), the `scf_type` keyword _does not default to df_ (since there's a lot more post-scf than scf out there, it's easier to handle the latter as the exception), so setting solely `mp2_type df` in a `gradient('mp2')` leads to that conv+df case (even though someone knowing psi's df-philia might expect that to lead to df+df). But don't worry about that– for mp2, at least, I'll try all combinations and arrange that only good ones get through and that the advanced defaulting is handled right. By the way, back to energies, would you expect OCC's conventional ROHF mp2 energy to match DETCI's? It doesn't, and that's the only check remaining commented out in my great mp2 cross-module comparison (https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat#L191) OCC's df ROHF mp2 _does_ match DFMP2's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192928974:283,rout,routes,283,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192928974,1,['rout'],['routes']
Integrability,"@CDSherrill - I don't think the noise in the gradients is a problem. Psi3 routed all gradient computations through `cints`, which symmetrizes everything automagically in `src/bin/cints/Default_Deriv1/symmetrize_deriv1.cc`, which is called from `src/bin/cints/Default_Deriv1/deriv1.cc` . @JonathonMisiewicz - the fix that I put in for DF-MP2 doesn't symmetrize the individual components of the gradient. Only the total. I didn't bother with the components just because they're only really for debugging and aren't printed by default. I guess they probably should be symmetrized if they're printed out by a power user though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459002869:74,rout,routed,74,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459002869,1,['rout'],['routed']
Integrability,"@CDSherrill . [This](https://github.com/psi4/psi4/blob/1.2.x/psi4/src/psi4/libscf_solver/hf.cc#L631-L639) was the v1.2 behavior so print error msg or die, depending on settings. Previous scfitertopy behavior was always to throw generic ConvergenceError with msg and niter. Now, throw SCFConvergenceError with msg, niter, and wfn attached.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673:155,depend,depending,155,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673,1,['depend'],['depending']
Integrability,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260128691:254,depend,depending,254,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691,2,['depend'],['depending']
Integrability,@CDSherrill @edeprince3 could it be that that nvirt > ndocc is an assumption that's made in the contraction order? If nvirt < ndocc then it might be more efficient to contract first over the occupied orbitals?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339447402:96,contract,contraction,96,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339447402,2,['contract'],"['contract', 'contraction']"
Integrability,"@CDSherrill Here's what the caller needs:; * Store the alpha response density `Da_` on the wavefunction; * Store the beta response density `Db_` on the wavefunction; * Store the Lagrangian `Lagrangian_` on the wavefunction; * Store the ""metric density"" in `PSIF_AO_TPDM` for all relevant DF basis sets (lower triangular format); * Store the ""3-Center density"" in `PSIF_AO_TPDM` for all relevant DF basis sets (lower triangular format). The caller is not responsible for constructing any derivative integrals. The caller is not responsible for constructing an explicit TPDM (all derivative integrals for DF are two or three index, so an explicit TPDM is never needed). The caller is responsible for constructing the densities, as those are method dependent. _In the current implementation_, the caller is responsible for backtransforming all densities involving primary-basis orbitals to the AO basis. For the first three quantities, this is part of the wavefunction contract and requires one line of code. For the 3-Center density, I'm playing with the idea of moving the responsibility of back-transforming to the AO basis to this central code. Rob's code takes that approach. ...Now that I write this up, this would be good to mention in the code itself. I'll add it as a comment before this gets merged in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-756835485:746,depend,dependent,746,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-756835485,2,"['contract', 'depend']","['contract', 'dependent']"
Integrability,"@CDSherrill It depends on which SAPT computation. For SAPT0, it should be pretty straightforward as there is no intermediate reuse. If we go to higher SAPT order, it may require a little bit more work as I believe Ed's code is preparing integral files and writing them to disk at some point. In any case, it's probably the easiest way to implement a restart, yes.; @similt : Which SAPT level do you need ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-177299693:15,depend,depends,15,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177299693,1,['depend'],['depends']
Integrability,"@Harvey the immediate answer is you need to update your compiler; however; the repeated occurrence of this problem suggests it may be necessary to; revisit the decision to use C++11. @developers what versions of compilers are we willing to support? The; decision to start using C++11 limits us to Intel15 for full compliance (or; Intel13 for about 90% compliance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:832,wrap,wrap,832,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,2,['wrap'],['wrap']
Integrability,"@JonathonMisiewicz I would classify this as changing an interface. the wrapper will now push more properties into the `extra` slot of the return for a Schema run, rather than just throwing that information away (since the full wfn is not retrievable by schema). this adds flexibility to the interface w/ e.g. QCEngine and anything else using the wrapper, and also circumvents requiring the MolSSI to re-standardize the QCSchema for esoteric properties before we can return them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-919146009:56,interface,interface,56,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-919146009,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"@JonathonMisiewicz Thanks, that was a good point. I've modified the function somewhat - as opposed to messing with the read-in original contraction coefficients, I've simply disabled the `erd_normalize_shell` call for ECP's (presumably when `self.rpowers` is not just full of `None`'s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-375698856:136,contract,contraction,136,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-375698856,2,['contract'],['contraction']
Integrability,"@JonathonMisiewicz for completeness, at each R value, my CASSCF code is as follows. I change whether I want singlet, triplet, or quintet states by changing the number '1' in the c2_geometry section. I tried explicitly set S=0 in the detci module option, but did not change the results. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """"""; psi4.set_module_options('detci',{'num_roots': 24,'follow_root': 0,'NUM_DETS_PRINT': 40}); #'follow_root' is set to either 0 or 1, depending on the R value. casscf_energy = psi4.energy('casscf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-639202988:714,depend,depending,714,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202988,1,['depend'],['depending']
Integrability,"@JonathonMisiewicz looks like most things worked except one of the linux builds failed for an issue that I don't think is related to my patch:. ```CMake Error at /usr/local/share/cmake-3.24/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS Interpreter; NumPy) (found suitable version ""3.8.10"", minimum required is ""3.8""); ```. Not sure how to proceed here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317:239,message,message,239,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317,1,['message'],['message']
Integrability,"@JonathonMisiewicz sorry for in-complete PR, I have edited it to include a script that has crashed.; Yes, test_psi4_interface_minimal.py is part of custom code interfaced with Psi4 that I'm working on, but Psi4 was built without any mods to the source code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524623782:160,interface,interfaced,160,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524623782,1,['interface'],['interfaced']
Integrability,"@JonathonMisiewicz this sounds very nice! At an even higher level, what does it do, take a one- and two-PDM (in what format?) and then compute all the derivative integrals and contract them to get the gradient?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-756819458:176,contract,contract,176,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-756819458,1,['contract'],['contract']
Integrability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:309,synchroniz,synchronize,309,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,2,['synchroniz'],['synchronize']
Integrability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:103,message,message,103,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,2,['message'],['message']
Integrability,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:232,interface,interface,232,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['interface'],['interface']
Integrability,@SinaMostafanejad Were you able to get this to work? I think the only way in which we could do this would be to write a wrapper code around these functions (similar to the __array_interface__ on Matrix objects) so that we can correctly return the python values instead of updating them in place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-643793311:120,wrap,wrapper,120,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-643793311,1,['wrap'],['wrapper']
Integrability,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300777718:151,interface,interface,151,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718,6,"['interface', 'rout']","['interface', 'route']"
Integrability,"@andyj10224 I honestly have no idea. I've never even thought of doing an atom-based loop... I guess it's beneficial if you do generalized contractions, but Psi4 doesn't do those lol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992624092:138,contract,contractions,138,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992624092,1,['contract'],['contractions']
Integrability,"@andysim , reading https://github.com/psi4/psi4/pull/965#pullrequestreview-112407645 again, I think I may have misinterpreted it. I read it as: since the original pubchem interface, pubchem has started to send back symmetrized mols, so the symmetrization currently applied by libmints Mol upon ""I'm from pubchem"" trigger is no longer necessary. Reading again, I'm betting you mean: no one's doing the symmetrize step that pubchem inputs need. Still a piece missing, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382837750:171,interface,interface,171,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382837750,1,['interface'],['interface']
Integrability,"@andysim To be clear I meant the libefp_solver interface, still not quite sure what tokenizer is doing for you in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235354983:47,interface,interface,47,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235354983,2,['interface'],['interface']
Integrability,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235363935:596,rout,routing,596,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935,2,['rout'],['routing']
Integrability,"@andysim, any recollection of what system inspired the [brokensymmetry](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1180-L1189) routine?. All, am I right that castup and brokensymmetry that are currently in `def scf_helper` should ultimately end up in the smartsolver? And that scf_helper should ultimately make only one call to scf? That is, all attempts at control logic are moving to `procrouting/scf/` (andy trick 2.0 from c-side and castup from scf_helper).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-409789827:158,rout,routine,158,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-409789827,1,['rout'],['routine']
Integrability,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295521147:150,interface,interface,150,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147,1,['interface'],['interface']
Integrability,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757#issuecomment-349813447:87,contract,contract,87,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447,1,['contract'],['contract']
Integrability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:604,depend,dependencies,604,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,5,['depend'],['dependencies']
Integrability,"@bennybp, the coefficients array for the FCHK file has changed (see below) even with integrals_package libint. Key area is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/writer.cc#L788-L794), I'd think. Once this is fixed, I think these ERD PRs can go through. FYI, @andysim . ```; Contraction coefficients R N= 42						Contraction coefficients R N= 42; 5.20198307e-04 4.02334478e-03 2.07290833e-02 8.10823271e-02 2.36226352e-01		 |	 7.16680438e-01 1.33580012e+00 2.26507441e+00 3.42829563e+00 4.27751198e+00; 4.43518209e-01 3.58670589e-01 -8.34979724e-03 -1.97236012e-04 -1.53501070e-03		 |	 3.67381232e+00 1.41044798e+00 -6.30902038e-03 -2.71733278e-01 -5.09642498e-01; -7.95118391e-03 -3.21134529e-02 -1.00269643e-01 -2.34047112e-01 -3.01410928e-01		 |	 -8.68828733e-01 -1.35781019e+00 -1.81565094e+00 -1.93869191e+00 -1.18527822e+00; 1.03491965e+00 1.00000000e+00 1.00000000e+00 4.11634896e-02 2.57762836e-01		 |	 7.81974577e-01 1.52282703e+00 3.41176955e-01 3.43681595e+00 3.33255540e+00; 8.02419274e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 2.24812218e+00 6.58169745e-01 1.45551678e-01 4.34146067e+00 4.64226043e-01; 1.00000000e+00 2.54948632e-02 1.90362766e-01 8.52162022e-01 1.00000000e+00		 |	 2.22914576e+00 3.57943173e-01 6.45565254e-01 9.51885590e-01 4.31234313e-01; 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00 2.54948632e-02		 |	 1.81416938e-01 1.53238405e+00 3.06224305e-01 1.10187220e+00 3.57943173e-01; 1.90362766e-01 8.52162022e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 6.45565254e-01 9.51885590e-01 4.31234313e-01 1.81416938e-01 1.53238405e+00; 1.00000000e+00 1.00000000e+00								 |	 3.06224305e-01 1.10187220e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-277184410:306,Contract,Contraction,306,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277184410,2,['Contract'],['Contraction']
Integrability,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192816600:205,rout,routing,205,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600,1,['rout'],['routing']
Integrability,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192934321:71,rout,route,71,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321,4,['rout'],"['route', 'routinely']"
Integrability,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:398,synchroniz,synchronize,398,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['synchroniz'],['synchronize']
Integrability,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182596162:999,message,messages,999,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162,2,['message'],['messages']
Integrability,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266893399:363,wrap,wrapped,363,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399,1,['wrap'],['wrapped']
Integrability,@dgasmith I finally got the export working and tested it on the python side by contracting the exported integrals with the ao density and comparing against the already implemented and exported `dipole_grad()` function. How/where do you want me to implement a test for this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614:79,contract,contracting,79,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614,1,['contract'],['contracting']
Integrability,"@dgasmith I never did. I was playing with fixes, but those got stymied by direction dependent subgroups. Still, this is item number three on my hit list of bugs, and by far easier to fix than items one and two. I have a paper to prioritize, but I can hopefully include this as a bug fix between the feature freeze and 1.3 release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052#issuecomment-445554488:84,depend,dependent,84,https://psicode.org,https://github.com/psi4/psi4/issues/1052#issuecomment-445554488,1,['depend'],['dependent']
Integrability,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:136,depend,dependency,136,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896,2,"['depend', 'inject']","['dependency', 'inject']"
Integrability,"@dgasmith MSVC is not a must for building stuff on Windows. So far I have only had negative experiences with it, and I tend to use GCC on Windows as well. (MinGW-w64, in the form of TDM-GCC, sadly TDM-GCC seems abandoned, but as long as GCC 5.1.0 is OK, it is probably one of the easiest solutions). . At the moment I do not have time to look into this, but in general it should be doable, make and CMake does work on Windows, so as far as the C++/Fortran side is concerned I expect no issues that would be impossible to overcome. (I/O may or may not need some ifdefs and Windows specific code). I have no idea though how the python integration would work, maybe it would work relatively painlessly, maybe it would turn out to be a nightmare. The world of python dependencies and especially numpy/BLAS/LAPACK interactions can be a royal pain in the arse to work out, even on Linux, in my experience.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381751281:633,integrat,integration,633,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381751281,2,"['depend', 'integrat']","['dependencies', 'integration']"
Integrability,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818205:108,integrat,integration,108,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205,1,['integrat'],['integration']
Integrability,@dgasmith no idea; the problem is that since Psi4 has been picking up new dependencies left and right I haven't had the opportunity to update the Fedora package...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255#issuecomment-533645822:74,depend,dependencies,74,https://psicode.org,https://github.com/psi4/psi4/issues/1255#issuecomment-533645822,1,['depend'],['dependencies']
Integrability,"@dgasmith thats probably a better route to go, and by AO i take it you mean I should transform the opdm to the SO basis first?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-258952783:34,rout,route,34,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-258952783,1,['rout'],['route']
Integrability,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234664083:265,interface,interface,265,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:270,interface,interface,270,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['interface'],['interface']
Integrability,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:475,interface,interface,475,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088,1,['interface'],['interface']
Integrability,"@edeprince3 @jturney @loriab After playing with it I though the very simple Deriv ""binary"" call wrapper was a bit antagonistic to how we are pushing Psi. I removed this and exported the Deriv library so that python side you now do the following:; - Build a deriv object; - Tweak it; - Ask it to compute a gradient. It is a few more lines python side, but now you can have ultimate control over the deriv object in python as well as C++ without adding a bunch of global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/406#issuecomment-226802345:96,wrap,wrapper,96,https://psicode.org,https://github.com/psi4/psi4/pull/406#issuecomment-226802345,2,['wrap'],['wrapper']
Integrability,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:95,message,message,95,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,2,['message'],['message']
Integrability,"@evaleev, are you at all interested in accepting into your repository CMake as an alternate build system? We know from @susilehtola that Psi4 can run with libint1 from either your repo with GNUMake or our repo with CMake. Looking over the directory structures (which have un-synced over the years), I _think_ I could arrange CMake alongside your existing build system (CMake files and GNUMake files would just ignore each other) at the cost of a few extra files and a [directory](https://github.com/psi4/libint/tree/master/cmake). Then psi4/libint could be deleted and there would once again be only one source of Libint truth. So if you're interested in CMake now or one day, I'll give it a try and submit a PR. If not, that's fine, and I'll go the simple route and apply your relicensing to psi4/libint. FYI @jturney @andysim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298456904:757,rout,route,757,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298456904,2,['rout'],['route']
Integrability,"@fevangelista : I think you may not have received a notification from my previous message. I don't think the code is recomputing the PK integrals. @loriab, @fevangelista : I think that the same behaviour is observed with `df_scf_guess on` or `off` because the driver automatically sets it to `on` ? Is that possible ? In the hf.cc code, everything is supposed to be fine if `df_scf_guess` is `off`. If nobody is working on that yet I will get on it after lunch and submit a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189351737:82,message,message,82,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189351737,1,['message'],['message']
Integrability,"@fevangelista which OS X version are you on? Which compilers are you using? Which versions?; Could you post the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`?; The problem arises because the `host_writer` function is not defined inside the module, since it depends on the host program. Creating a shared library with undefined symbols is not a problem on Linux, but trips up the linker on OS X.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171439294:127,interface,interfaces,127,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171439294,2,"['depend', 'interface']","['depends', 'interfaces']"
Integrability,"@hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218 that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. . As for DFT_VV10_POSTSCF—it does make things faster by quite a bit, but when I move to nonstandard values of (b,c), it yields deviations ≥ 0.1 Hartree in energy calculations (e.g. using the above geometry with b = 0.5 and c unchanged, I go from -456.38 to -456.17 when I turn on DFT_VV10_POSTSCF).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054:103,interface,interface,103,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054,1,['interface'],['interface']
Integrability,"@hokru It will depend quite a bit on your eigensolver. MKL seem pretty stable, your milage may vary. @CDSherrill I think your latest work will fix most of the SCF `c1` symmetry issues as SCF is now always run with symmetry and then cast to `c1`. What I really dont like about this is that it's non-deterministic. You can wind up in either minima with no real control over which you land in. Some proposals is something like `scf_density_shake 0.0` where we add a bit of noise to the density to knock it out of any starting symmetry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349728151:15,depend,depend,15,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349728151,1,['depend'],['depend']
Integrability,"@hokru Mathematically speaking, you should never get a non-symmetric solution. But, as @dgasmith says, it depends on the math library, whether or not there is tiny numerical noise introduced, etc. Since the computer uses finite precision arithmetic, there is always a chance that noise messes up things. . I investigated this case a little today, since it captured my interest. What's going on is actually even more tricky than has been suggested so far. Normally, we don't like these symmetry-breaking solutions because they do bad things, like give unphysical dipole moments. For example, the symmetry-breaking UHF solution for NO3 radical gives very unequal charges for the O atoms [-0.0867 -0.3789 -0.3789] compared to the symmetric UHF solution [-0.2990 -0.2990 -0.2990]. I think most people would agree the asymmetric solution is just wrong, even though it has a lower energy [-278.774 819 vs -278.757 840] (https://doi.org/10.1016/S0009-2614(99)00206-7). . So, I looked at this 90 degrees twisted C2H4 example, expecting the lower-energy symmetry-broken solution to give an unphysical dipole moment. What I found surprised me. The problem here is that the ""symmetric solution"" that we've been discussing is actually a symmetry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert ar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:106,depend,depends,106,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['depend'],['depends']
Integrability,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:252,message,message,252,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670,1,['message'],['message']
Integrability,"@hokru, respective the memory estimate: I did some experiments and came up with a very rough estimate for the lower bound of a computation. I'll add a check and a warning in the next adcc release if the estimate is a substantial fraction of the main memory. Thanks for your suggestion in the first place. The respective change in adcc will be transparent to the interface needed for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921:362,interface,interface,362,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921,1,['interface'],['interface']
Integrability,"@hokru, thanks for the reference. It would seem based on that paper that we should:; - allow the `roos-ano-[dt]z` basis sets into CBS as well; - are the `pcseg-[0-4]` basis sets (double- to six-zeta, I believe) the segmented versions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:377,contract,contracted,377,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['contract'],['contracted']
Integrability,"@jgonthier We could return a `None` object in python, but with the way wavefunction passing works its probably best to return _something_. We could also return a blank wavefunction, but the SCF does have meaningful information. Its a hard call and part of the reason why we didnt solve it during the wavefunction_pass work. Any opinions are greatly appreciated!. The comments do need an overhaul. We would like the message to print only if `return_wfn=True`, but we have not yet figured out the mechanics to do that cleanly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184852147:415,message,message,415,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184852147,1,['message'],['message']
Integrability,"@jturney (and other developers who wish to weigh in) I'm not sure how to proceed with Ambit beyond what I have. As it stands now the Psi4 executable has a dependency on Ambit, but Ambit has a dependency on Psi4. As best as I can tell I think there are three options:; - Ambit gets absorbed into Psi4 proper; - Ambit drops its dependency on Psi4 and is compiled before Psi4; - Psi4 drops its dependency on Ambit and is compiled before Ambit (I think @dgasmith is working on dropping the main function so this would happen consequentially). The way it worked with the old build was along the lines of 1. If we continue to go through with 1 I don't think it makes sense to distribute Psi4 and Ambit separately anymore as they are too intimately linked. Furthermore, I was under the impression that we were purging MPI from Psi4 so I don't know about the viability of 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-233772597:155,depend,dependency,155,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-233772597,4,['depend'],['dependency']
Integrability,@jturney @andysim @psi-rking Does anyone object to reducing the tolerance here? Alternatively we can make a special case for ghost atoms. Although two centers so close will increase linear dependency issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189336384:189,depend,dependency,189,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189336384,1,['depend'],['dependency']
Integrability,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182953987:230,depend,depending,230,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987,4,['depend'],['depending']
Integrability,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:36,integrat,integration,36,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938,1,['integrat'],['integration']
Integrability,@jturney should've written this and called it JetPACK. I'm not sure there's a more central location; the libqt library (math routines from the original 'quantum trio') is about as central a math library as we have. I agree that avoiding duplication would be very good though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932:125,rout,routines,125,https://psicode.org,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932,1,['rout'],['routines']
Integrability,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:111,inject,injection,111,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,2,['inject'],['injection']
Integrability,"@loriab **TL;DR** Yes, the syntax is the same and is described [here](http://pcmsolver.readthedocs.org/en/latest/users/input.html). **Lengthy version**; The input to PCMSolver can work like this:; 1. Either you use the ""native"" format that is processed by the module's own Python script. This requires the user to provide an additional input file when submitting the calculation.; 2. Either you pass a `struct` with relevant input parameters when initializing the library from within the host. This allows using the host program native syntax. Of course, the host has to define the appropriate input sections. Since the module has to be interoperable with C/C++ and Fortran hosts, for the moment being (and the foreseeable future), the second strategy is limited to a subset of all possible options to the library.; With @andysim and @lothian we decided for a middle ground in Psi4: The additional input file is incorporated into a section in the Psi4 input that is extracted in the current directory so that PCMSolver's Python script can parse it. This would be strategy 1.5. All programs with an interface to PCMSolver can use Strategy 1 (DALTON, LSDALTON, DIRAC and a couple of others) Only DIRAC can use Strategy 2. Only Psi4 uses strategy 1.5: it was rather easy to implement, since everything runs through Python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171673504:637,interoperab,interoperable,637,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171673504,2,"['interface', 'interoperab']","['interface', 'interoperable']"
Integrability,"@loriab @fevangelista @kannon92 Yes, I have been working on building both static **and** shared libraries for the PCM module and that's the root of your troubles.; @loriab commit psi4/psi4@f798b4f1b should fix your problem.; @fevangelista what is the output of `nm interfaces/lib/libpcm.so | grep Getkw`? Are you doing a fresh build? I suspect the Makefiles generated by CMake might be stale and try to link against the static `libpcm.a` which doesn't have Getkw or Zlib linked in. You might try to clean up your cache or better still, re-run the setup script and re-build from scratch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170844312:265,interface,interfaces,265,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170844312,1,['interface'],['interfaces']
Integrability,"@loriab Ah, no. Was trying to do a `+d` basis example. Everything that I messed with seemed to work and since we rely heavily on the CBS wrapper this should mostly be syntactic sugar at this point. Let me know if you hit any issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/374#issuecomment-217934117:137,wrap,wrapper,137,https://psicode.org,https://github.com/psi4/psi4/pull/374#issuecomment-217934117,1,['wrap'],['wrapper']
Integrability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:301,message,message,301,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,2,['message'],['message']
Integrability,@loriab Can we close this? I think this is wrapped up by now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1540498326:43,wrap,wrapped,43,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1540498326,1,['wrap'],['wrapped']
Integrability,"@loriab FYI libxc 4.0.5 won't include the Python interface, that'll be left to 4.1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-384340524:49,interface,interface,49,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-384340524,1,['interface'],['interface']
Integrability,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:67,Bridg,Bridges,67,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['Bridg'],['Bridges']
Integrability,"@loriab I have integrated `psi4 --fulltest` on Azure, but the tests does not work in parallel:; ```; 2018-12-06T18:15:06.8235423Z =================================== ERRORS ====================================; 2018-12-06T18:15:06.8236398Z _______________ ERROR at teardown of test_deprecated_wfn_arrays _______________; 2018-12-06T18:15:06.8236914Z [gw0] win32 -- Python 3.6.6 C:\tools\miniconda3\python.exe; 2018-12-06T18:15:06.8237116Z ; 2018-12-06T18:15:06.8238150Z tp = <class 'PermissionError'>, value = None, tb = None; 2018-12-06T18:15:06.8238413Z ; 2018-12-06T18:15:06.8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:15,integrat,integrated,15,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['integrat'],['integrated']
Integrability,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:850,message,message,850,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,1,['message'],['message']
Integrability,"@loriab If the threading flag you mentioned refers to `USE_OPENMP=1`, then I am reasonably sure that is essential. As far as I understand, OpenBLAS is not stateless/thread-safe when compiled to use its native threading. So if there is an OMP parallel section in Psi4, and multiple Psi4 threads call BLAS/LAPACK subrutines at the same time, AND OpenBLAS is also doing those operations in parallel, then you get undefined behaviour. This is probably not going to be reliably mitigated by setting OpenBLAS to only use 1 thread at runtime, it may still cause UB.; AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with `USE_OPENMP=1`. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476:624,rout,routines,624,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476,1,['rout'],['routines']
Integrability,@loriab It is done. adcc 0.14.2 now has the new dependency pins as discussed in main.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598881163:48,depend,dependency,48,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598881163,1,['depend'],['dependency']
Integrability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:1608,message,message,1608,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,1,['message'],['message']
Integrability,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288529918:282,depend,depends,282,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918,1,['depend'],['depends']
Integrability,"@loriab Thanks, the GENBAS file was indeed missing from directory `/xstorage/tobias/bin/cfour/basis/`. After copying one into that directory, the input you provided now works on our cluster. I look forward to getting to know the Psi4/CFOUR route.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155600386:240,rout,route,240,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155600386,1,['rout'],['route']
Integrability,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263296772:76,message,message,76,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772,2,['message'],['message']
Integrability,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:66,interface,interface,66,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345,2,['interface'],['interface']
Integrability,"@loriab not yet, I think? Are there any more api changes that need to be included? I'm sure Miguel and Micael could be persuaded to make a stable release. However, Miguel is probably still working on porting the functionals into a new Maple interface, so I don't know how much sense it would be to release now, or how difficult it would be to cherrypick that stuff away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575:241,interface,interface,241,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575,1,['interface'],['interface']
Integrability,"@loriab one more note about AMD Ryzen performance: AVX is fully supported (except AVX-512), but internally the floating point units are only 128 bit wide, so any 256 bit wide AVX/AVX2 instructions are split in half to be executed. This means that for current Ryzen/EPYC chips, using AVX is unlikely to offer the significant performance benefit seen for Intel chips, unless it can alleviate some specific bottleneck. But AFAIK there is no separate ""AVX-mode"" like Intel, and running AVX code (i.e. complied for Haswell) is often harmless and does not cause a performance degradation. ; Really the only mayor weak points of Zen CPUs is memory latency and the communication latency between CCX-es (acts kinda like NUMA-on-a-chip). Especially EPYC CPUs are NUMA-like, you should even be able to toggle the NUMA mode in EFI/BIOS between full-on NUMA and try-to-act-like UMA. But really, core-to-core synchronization latency wise a single socket EPYC system acts more like a quad or octa socket, depending on how you look at it.; EPYC is great if you are looking into using multiple GPUs or NVMe drives, it has absolutely massive amounts of PCI-E lanes.; Hope this helps!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877:895,synchroniz,synchronization,895,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877,2,"['depend', 'synchroniz']","['depending', 'synchronization']"
Integrability,"@loriab the switching to Python 3.6 is intentional. I just copied scripts from Appveyor, where I had to pin Python version due to missing dependencies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441600563:138,depend,dependencies,138,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441600563,1,['depend'],['dependencies']
Integrability,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278176196:44,synchroniz,synchronization,44,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196,5,"['message', 'synchroniz']","['message', 'synchronization', 'synchronize']"
Integrability,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-213240900:177,message,message,177,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900,1,['message'],['message']
Integrability,"@loriab. I think `-DOpenMP_LIBRARY_DIRS` is a good solution. I just think that if the detection is not going to be truly automatic (i.e. combinations such as gcc + MKL, which is a very common free combination of software, is not properly detected) it probably should be more obvious to the user that such options _have_ to be passed to CMake. With that in mind, improving the error message suggesting to use `-DOpenMP_LIBRARY_DIRS` would be awesome. And thank you for your time by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052:382,message,message,382,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052,1,['message'],['message']
Integrability,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:284,contract,contractions,284,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,6,"['contract', 'depend']","['contractions', 'dependence']"
Integrability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:396,synchroniz,synchronize,396,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['synchroniz'],['synchronize']
Integrability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:298,synchroniz,synchronize,298,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,2,['synchroniz'],['synchronize']
Integrability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:416,synchroniz,synchronize,416,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['synchroniz'],['synchronize']
Integrability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:423,synchroniz,synchronize,423,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['synchroniz'],['synchronize']
Integrability,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1690,contract,contractXYZ,1690,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879,1,['contract'],['contractXYZ']
Integrability,"@psi-rking . Yup, `asarray()` is great, a product of DGAS' numpy interface. And so much handier for printing psi4.core.Matrix to screen, rather than just mat.print_out() to file. I haven't traced it fully recently, but I expect [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.cc#L111) is where mass changes get caught. In practical terms, the freq-isotope[12] test cases should cover the rotational_symmetry_number with some care. You're right that mass-symmetry-breaking in Molecule wasn't working at one time, though. I should probably spice up mints5 to check this thoroughly. Or were you concerned particularly with non-Abelian PG involving `n`? Or something else I've missed?. Hmm, I keep reading it as ""nwchem hessian"". Maybe time for a name change to just ""hessian"" with the weightedness in the docstring.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-344691586:65,interface,interface,65,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-344691586,1,['interface'],['interface']
Integrability,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203062097:188,message,message,188,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097,2,['message'],['message']
Integrability,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203471756:205,message,message,205,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756,1,['message'],['message']
Integrability,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:152,interface,interface,152,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957,1,['interface'],['interface']
Integrability,"@rmcgibbo thanks for the info - I wasn't aware of those fine details of dynamic loading. So it seems the input to the SVD call is subtly different then, if both paths end up in MKL routines. This is quite a mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311739442:181,rout,routines,181,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311739442,1,['rout'],['routines']
Integrability,"@rmcgibbo, that'd be excellent. I'll make my changes on an open PR that I'll tag you in so you can see them, even if you don't have time to chime in. The old Psi4 approach was to parse and store basis sets C++ side. Then the parsing and storage (GShell, ShellInfo and the like) got copied to Python, with greatly improved parsing / file handling. I'd like to now get rid of the resulting duplication by having only parsing / filesystem code in python, and handing some hardwired data structure to the C++ constructor for building / storage. Then, I think the basis set storage (unused, AFAIK) in Python should be nuked, as should the parsing stuff in C++. It should make the whole process less confusing, I hope. I also want to move the ECP basis set to a member of regular Basis sets; the janky setup right now was done by me, mostly to test the integrals. Now we have the right answer, it's time to clean things up -- especially the multiple return values in the python basis set construction routines. Any thoughts / suggestions you have are most welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-305336864:995,rout,routines,995,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305336864,1,['rout'],['routines']
Integrability,"@robashaw One thought I had while looking at this was: How hard would it be to put pugixml, the associated libecpint internal database reads, and the ecp files themselves behind a CMAKE keyword within libecpint? That way we might be able to keep the basis sets in one place instead of having a duplicated copy within libecpint, and also can ditch the pugixml dependency. I'm not sure this is a helpful functionality for other QM codes, or how much work it'd involve.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-804473180:359,depend,dependency,359,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-804473180,1,['depend'],['dependency']
Integrability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:404,integrat,integration,404,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,2,['integrat'],['integration']
Integrability,"@robertodr I am using the default compiler that ships with OS X El Capitan (`llvm-gcc`, and `llvm-g++`) version:. ```; Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1; Apple LLVM version 7.0.0 (clang-700.1.76); Target: x86_64-apple-darwin15.2.0; Thread model: posix; ```. For fortran I use `gfortran-4.9`:. ```; GNU Fortran (Homebrew gcc49 4.9.3 --with-fortran) 4.9.3; Copyright (C) 2015 Free Software Foundation, Inc.; ```. Here is the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`:. ```; if(APPLE); if(NOT DEFINED CMAKE_MACOSX_RPATH); set(CMAKE_MACOSX_RPATH ON); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171441011:523,interface,interfaces,523,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171441011,1,['interface'],['interfaces']
Integrability,"@robertodr I used the line you suggested. I guess that I should then specify; --toolset=intel-linux-cray as argument for the bootstrap script ?. The bootstrap script does not like that, it issues the error:. Unknown toolset: intel-linux-cray. You can specify the toolset as the argument, i.e.:; ./build.sh gcc. Toolsets supported by this script are:; acc, como, darwin, gcc, intel-darwin, intel-linux, kcc, kylix,; mipspro, mingw(msys), pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp. and I believe that if I specify --toolset=intel-linux, it then just uses icc instead of the proper CC wrapper on the Cray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-163044282:590,wrap,wrapper,590,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163044282,1,['wrap'],['wrapper']
Integrability,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059409:59,INTERFACE,INTERFACE,59,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409,3,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:1132,message,message,1132,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,2,['message'],['message']
Integrability,"@susilehtola it does, and we do plan to interface all available integrals. I also have plans to generalize the Erfc integrals to a form like `(a + b erf(omega r)/r` so we don't have to compute two sets of integrals for the range separated functionals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446:40,interface,interface,40,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446,1,['interface'],['interface']
Integrability,"@susilehtola: that's correct. I wrote my reply before I saw the second message from @AJStone, so I had assumed the basis itself is Cartesian. As long as the extra factors that I mentioned are folded into the backtransformation it *should* be fine. I'll keep digging around and let you know if I find anything. The spherical code should work for any angular momentum; it's only the Cartesians where there are subtleties to handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472053550:71,message,message,71,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472053550,1,['message'],['message']
Integrability,"@zachglick Nice job! Are you still working on this? How difficult would it be to wire it up with the Python interface, to expose PNOs and integrals in Python?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591:108,interface,interface,108,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591,1,['interface'],['interface']
Integrability,A `SyntaxError` in the traceback prints also the offending line before the exception message. That isn't caught.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639415988:85,message,message,85,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639415988,1,['message'],['message']
Integrability,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:157,inject,inject,157,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503,1,['inject'],['inject']
Integrability,"A couple of remarks:; - chemps2 v1.7 is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:896,interface,interface,896,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['interface'],['interface']
Integrability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:395,depend,dependency,395,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,2,['depend'],"['dependencies', 'dependency']"
Integrability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:268,interface,interface,268,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,2,['interface'],['interface']
Integrability,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29766453:248,rout,routine,248,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453,1,['rout'],['routine']
Integrability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:187,rout,routines,187,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,4,['rout'],['routines']
Integrability,"A warning message might be better. Or, if the main basis has ECPs, then the same ECP could be used in the small basis calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-449021614:10,message,message,10,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-449021614,1,['message'],['message']
Integrability,"AJ made this comment:. My implementation involved handling cases where the user sets a hf reference and calls a dft method. For example if the input is,. set reference rhf. energy('b3lyp). the reference option will be set to rks. The goal there was to keep the energy('method') interface user friendly. If/when psi4public/118 is implemented the smart-reference should be able to handle those conflicts and my checks for these conflicts can probably be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118#issuecomment-170147040:278,interface,interface,278,https://psicode.org,https://github.com/psi4/psi4/issues/118#issuecomment-170147040,1,['interface'],['interface']
Integrability,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5022,wrap,wrappers,5022,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,4,"['message', 'wrap']","['message', 'wrappers']"
Integrability,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133175539:394,message,message,394,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539,3,"['message', 'wrap']","['message', 'wrappers']"
Integrability,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173202821:220,depend,dependency,220,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821,2,['depend'],['dependency']
Integrability,"Adding breaking calls to exceptions, I suspect the proper `build/build_becke/build_treutler` functions are never called?!; At this point I don't know either what is going on. The file is too long and confusing, including the `hack` routines that survived.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-737505178:232,rout,routines,232,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-737505178,1,['rout'],['routines']
Integrability,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648#issuecomment-286957146:95,message,message,95,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146,2,['message'],['message']
Integrability,"Additional testing confirms that the error message I reported in my last message displays regardless of whether this fix is in place. This should be investigated in more detail later, but it's outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825:43,message,message,43,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825,2,['message'],['message']
Integrability,"Admittedly I can't support this (I see what Andy sees), but I think there are many cases where the coefficients change between optimized and unoptimized general contractions. Also, Distelli just doesn't acknowledge this PR. It's built others recently, so I don't know what its problem is. Can override again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307928747:161,contract,contractions,161,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307928747,1,['contract'],['contractions']
