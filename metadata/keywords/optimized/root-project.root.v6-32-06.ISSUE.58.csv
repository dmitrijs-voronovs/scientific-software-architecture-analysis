quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"> I tested a bit on my end, I guess the `llvm::StringRef` conversion errors are the following:; > ; > ```; > /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx: In function ‘std::__cxx11::string GetSharedLibImmediateDepsSlow(std::__cxx11::string, cling::Interpreter*, bool)’:; > /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:7119:25: error: ambiguous overload for ‘operator==’ (operand types are ‘llvm::StringRef’ and ‘const char [20]’); > if (SymName == ""_Jv_RegisterClasses"" ||; > ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TNamed.h:26,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDictionary.h:44,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDataType.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TInterpreter.h:25,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; > /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; > inline Bool_t operator==(const std::string_view &s1, const char *s2); > ^~~~~~~~; > In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; > from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; > from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; > /home/jhahnfel/ROOT/llvm13/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088544588:4,test,tested,4,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088544588,1,['test'],['tested']
Testability,"> I think almost everything is there now. I've tested it in both Ubuntu 20.04 LTS and Windows 10. Can we let @phsft-bot build it on other systems?. No, it is not, see my comments about the coordinates ... how do you define them ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-829931553:47,test,tested,47,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-829931553,1,['test'],['tested']
Testability,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142#issuecomment-1845235983:571,benchmark,benchmark,571,https://root.cern,https://github.com/root-project/root/pull/14142#issuecomment-1845235983,1,['benchmark'],['benchmark']
Testability,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used?; > ; > > Users do not use make project; > ; > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > ; > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-659503189:1058,test,test,1058,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-659503189,1,['test'],['test']
Testability,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619057225:398,test,test,398,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225,3,"['log', 'test']","['logic', 'test']"
Testability,"> I think my fix is actually could be right, can you check it please again?. Your fix simply removes usage of semi-standard pthread_setname_np function on linux.; It is not right solution in my mind. Unfortunately, I cannot test with clang8. ; With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv); {; return 0;; }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418737656:224,test,test,224,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418737656,2,['test'],['test']
Testability,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1823482567:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> I think the PR needs to also fixup the new `RNTupleModel, Clone` unit test. Done; I had to add `const` overloads for `RFieldBase::begin()` and `end()` in order to make range-based for loops works, let me know if that's ok or should be solved differently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16714#issuecomment-2424149303:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/16714#issuecomment-2424149303,1,['test'],['test']
Testability,"> I think the error is due to the fact that there is no VDT on Windows. Did you try without VDT on other platforms?. I don't think it's that. :thinking: `ROOTConfig.cmake` will not look for VDT in this PR's setup if VDT was not used in the build. I instead believe that I was just trying to set the `CMAKE_PREFIX_PATH` environment variable incorrectly in the Windows shell. Since Windows provides a few different shells, each of which comes with a slightly different formalism, in the end I reverted back to passing `CMAKE_PREFIX_PATH` as a cache variable to that test. On Linux that works. Hopefully it will work on Windows too. I tried to set up a build on Windows on my laptop, but when after about 20 minutes it was still failing in one of the externals, I just gave up. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1342794108:564,test,test,564,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1342794108,1,['test'],['test']
Testability,"> I think the test is actually good, except for `assert(longString[i] = checkString[i])`: It should be `==` and `assert` doesn't work interactively depending on the options ROOT was built with. I added a standalone gtest that I came up with independently... Yep, the `==` I had fixed already and forgot to edit the post. So probably the mistake was then using assert which I was checking interactively :) Thanks for clarifying!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-2023312172:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-2023312172,4,"['assert', 'test']","['assert', 'test']"
Testability,"> I think there is a pretty clear explanation where this comes from in the commit history. We could not load `gRandom`. That was with the very old dyld-based approach to loading symbols. This PR checks if the new approach has the same problem. Note that:; - We can still not reproduce the issue; - With this change, I got the following test failure on Windows (not tested in our CI):; ```; 988: Processing C:/Users/sftnight/git/master/tutorials/rcanvas/symlog.cxx...; 988: IncrementalExecutor::executeFunction: symbol '_imp_?gRandom@@3PAVTRandom@@A' unresolved while linking function '_GLOBAL__sub_I_cling_module_5'!; 988: You are probably missing the definition of _imp_?gRandom@@3PAVTRandom@@A; 988: Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330#issuecomment-1091405727:336,test,test,336,https://root.cern,https://github.com/root-project/root/pull/10330#issuecomment-1091405727,2,['test'],"['test', 'tested']"
Testability,"> I think there should be little failures since we switch already long ago to the ""just fail the test"" mode. But you never know :). There is a ton of tutorials that would fail that currently do not run, see #5938 . But I don't think this PR interferes with that, right @hageboeck ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654898523:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654898523,1,['test'],['test']
Testability,"> I think we should have some unit tests. Indeed, we also discussed those during the review. I'll squash the commits, add tests and open the PR for the final review",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10098#issuecomment-1082007083:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/10098#issuecomment-1082007083,2,['test'],['tests']
Testability,"> I think we want to test code in core/foundation which is the most restrictive place in ROOT - eg we can run with rootcling_stage1, etc. I think we can move the library there to avoid introducing incompatible changes.; > ; > Maybe we can avoid the new library situation and conditionally add the testing header/source files to an existing library, eg libFoundation?. That should be possible. What do you think @Axel-Naumann ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528#issuecomment-1009720710:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/9528#issuecomment-1009720710,2,['test'],"['test', 'testing']"
Testability,"> I took macphsft20 offline; macphsft23 should jump in. @Axel-Naumann hmm, `macphsft23` is even worse: `xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun` What do I have to do to get `macphsft20` back? :sweat_smile: I think I found enough commits to get (most of) the tests pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804875300:369,test,tests,369,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804875300,1,['test'],['tests']
Testability,"> I took the liberty to get the member names in line with the RooFit conventions. I also added tags to typeset the formulas as latex.; > ; > Currently, there are problems with the build system, so we will have to wait a bit for the final test. Thanks - and my apologies about the member names - I should have done that from the start, but it's hard to act against one's reflexes. Please let me know if there's anything else I should be doing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-490047636:238,test,test,238,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-490047636,1,['test'],['test']
Testability,"> I understand that backwards compatibility is a strong factor. Would it be possible to print a warning when the internal unit system is assumed when no unit is explicitly specified?. The difficulty is that the large unit-unaware GDML files may generate tons of such warnings, bloating the log files. Also, printing just a general warning once that the file contains unitless entities may pass unnoticed. What would you expect the behavior to be?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1329207975:290,log,log,290,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1329207975,1,['log'],['log']
Testability,> I updated the stack trace. Note that we verified that in the 'real' case neither TROOT::~TROOT nor TCling::~TCling have been run before the assert. We also verified that calling SetUnloaded for that class 'right before' the end/return of main have the same behavior. That confuses me. So we call explicitly from users code `SetUnloaded` when we have properly initialized TROOT and TCling?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462#issuecomment-620534291:142,assert,assert,142,https://root.cern,https://github.com/root-project/root/pull/5462#issuecomment-620534291,1,['assert'],['assert']
Testability,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm; b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm; c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm; d) generate only the pcm (renaming it rdict.pcm) ; e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435348431:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435348431,3,['test'],['test']
Testability,> I vote to add it in rootbench.git +1. I bet we will already see an improvement in the current benchmark?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6144#issuecomment-671243605:96,benchmark,benchmark,96,https://root.cern,https://github.com/root-project/root/pull/6144#issuecomment-671243605,1,['benchmark'],['benchmark']
Testability,"> I was reading the doc of the action _""It can backport [rebased and merged](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#rebase-and-merge-your-pull-request-commits) pull requests with a single commit and [squashed and merged](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-merges#squash-and-merge-your-pull-request-commits) pull requests.""_. Ah, ok, well. At that point if we want the bot to help us we should probably do 1 commit by PR for backports. Alternatively, we can implement our own logic - should be no more than 2-3 git commands...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14889#issuecomment-1983059044:602,log,logic,602,https://root.cern,https://github.com/root-project/root/issues/14889#issuecomment-1983059044,1,['log'],['logic']
Testability,"> I was thinking this is generic enough that we may want to use it in places that do not strictly depend from libTree. I guess if the need ever comes up we can (carefully!) consider making this particular globbing implementation available outside of `tree/`, but I'd be very conservative. How does RNTuple do globbing?. > I hope we already get a (very good?) degree of certainty by not breaking existing test cases. Do we have tests for edge cases in globbing or rarely-used features of the globbing syntax?. > the only place that remotely gives me a slight doubt is using std::sort instead of TList::Sort. I would keep `TList::Sort` to avoid unintended shuffling of things with weird characters or stuff like that. Otherwise you'd have to make sure that stuff like `01.root`, `001.root` and `0.root` get ordered the same way between the two. But why risking that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619095994:404,test,test,404,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619095994,2,['test'],"['test', 'tests']"
Testability,"> I will try to test locally first, then I will merge it. For CEF you find instructions in gui/cefdisplay/readme.md file; For qt5 I did not provide info, just install Qt5WebEngine and Qt5WebEngineWidgets libraries.; And configure with command:. cmake -Droot7=ON -Dcxx14=ON -Dcefweb=ON -Dqt5web=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-365925950:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-365925950,1,['test'],['test']
Testability,"> I would argue that typical cmake projects do not need to deal with this. Fair enough, other projects just leave the headers in the source directory.; But I don't understand the motivation for this change then. > it allows better navigation from compile output logs in IDEs and better editing of headers. Can you elaborate on why symlinking is better than copying in these regard? (e.g. why is your IDE trying to edit the headers in the build directory?) Again, just curious, my workflow does not rely on compilation logs for navigation so I never had this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656201185:262,log,logs,262,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656201185,2,['log'],['logs']
Testability,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987#issuecomment-2001954686:403,test,tests,403,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686,1,['test'],['tests']
Testability,> I'll go through the C++ source later... @bellenot and all other; It is really build test - I used very fancy forwarding of template declaration with 6 arguments.; Want to be sure that it works on all platforms.; On the meeting we should discuss how deep we want to refactor old code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2705#issuecomment-425104173:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/2705#issuecomment-425104173,1,['test'],['test']
Testability,"> I'm a little confused as the same tests seems to have been quoted as `passed` and `failed` in the same log. I struggle to find the exact definition of each test as well. I looked through the relevant files, but the structure is not clear to me. Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. > Also, last time when I spoke with @amadio about the future of ROOT, he said you guys discussed making sure people outside of CERN can contribute. Unfortunately, I had to use my CERN login to see the test logs. I also don't know how to replicate the tests in my environment. Do they depend on files hosted somewhere? Could you give me some docs to read so I can find my way around?. Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake.; Does the test pass locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968052222:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968052222,13,"['log', 'test']","['log', 'login', 'logs', 'test', 'tests']"
Testability,"> I'm hoping that #8204 will work - it does address the issue for me. Thx, I am in vacation this week but will test next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8180#issuecomment-844884758:111,test,test,111,https://root.cern,https://github.com/root-project/root/issues/8180#issuecomment-844884758,1,['test'],['test']
Testability,"> I'm not familiar with root's llvm merging strategy, how to fix above llvm-diff errors?. We need to have a tag in https://github.com/root-project/llvm-project/. I will take care of this, that's why I asked for the commit hashes :wink: . In the mean time, it would be great to get CMS testing on `ppc64le`. @smuzaffar can you help with that? Now that the LLVM upgrade is merged, I guess this should be a bit easier...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1864372469:285,test,testing,285,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1864372469,1,['test'],['testing']
Testability,"> I'm relatively sure it can be made work if we also pass `-DCLANG_DIR=${Clang_DIR}` in `interpreter/cling/tools/plugins/clad/CMakeLists.txt`, but I won't be working on things touching `interpreter/llvm/` until I can properly revert Clang patches again. So yeah, we can go ahead with this PR for now. Any news on this? Just tested this again with your llvm16 branch and it's still required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1659113144:324,test,tested,324,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1659113144,1,['test'],['tested']
Testability,"> I've figured out why the test fails on macOS. There, libz.so gets autoloaded,. Why does it get autoloaded 'only' on macOS? I.e. I don't see why it would be autoloaded on its own and so I am concerned another library is indirectly bringing it along ... i.e. we may (or may not) need to hide the libz symbol in that library too ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1636#issuecomment-366686614:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/1636#issuecomment-366686614,1,['test'],['test']
Testability,"> I've now run the test over 22000 times without getting the deadlock, so I think it's fixed. I am sure it is not. There is really no functional changes introduces by the commit, just a tad bit of timing difference that might make it harder to stumble upon it. Will write my guess on the deadlock cause and a possible solution in a few minutes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/583#issuecomment-302387640:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/583#issuecomment-302387640,1,['test'],['test']
Testability,"> IIUC the patch is not a fix, it's to expose the problem even without using asan.; > ; > I guess we need to update `TClassEdit::STLArgs` to support RVec, we forgot when moving it to the collection proxy mechanism. That's exactly right. I propose to leave the assert in place. It may get ugly if something like this gets forgotten again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7903#issuecomment-821333872:260,assert,assert,260,https://root.cern,https://github.com/root-project/root/issues/7903#issuecomment-821333872,1,['assert'],['assert']
Testability,"> IMHO it sends the wrong signal that nvc++ would be supported. I'm still not seeing the point of having build system support for a ""broken"" compiler (for our purposes). A fair point but I fail to see how it has an consequence for this PR. As is the master does not reject `nvc++` is just fails in some weird ways (that are fixed by this PR) and some weirder ways (bug in the compiler). . ie. *Not* merging this PR would *not* send the signal that `nvc++` is not supported, it would only make it harder to support it in the future and make it more annoying than it should be to try the next version (because then this PR needs to then be hand applied (if by some miracle the tester remembers or knows about this PR) or re-discovererd-and-re-implemented). The 'right' way to express the point you make is:; (a) merge the best possible version of this PR ; (b) explicitly warn or error out upon seeing a known broken version of `nvc++`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14370#issuecomment-1900419680:675,test,tester,675,https://root.cern,https://github.com/root-project/root/pull/14370#issuecomment-1900419680,1,['test'],['tester']
Testability,"> Idea of the PR - if exactly same code runs twice, created binary files should be identical. Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. and usually to ensure atomic file updates I would even prefer to not be forced to create ROOT files with the final file name but be able to create the file with a temporary name and then rename them in an atomic operation after finishing creation. How about just adding an optional name to the option?. ```; new TFile(""name.root?reproducible=somename"",""recreate""); ```. and then I can choose the name to be stored in the file or, if just `?reproducible` is present the normal behavior is kept?. Of course this could also be decoupled from the reproducible feature by having this in a different option. ```; new TFile(""name.root?reproducible&fname=somename"",""recreate""); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524219323:294,sandbox,sandbox,294,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524219323,1,['sandbox'],['sandbox']
Testability,"> Ideally you would backport the fix for root.git now. The change of roottest can stay in master and you can merge that once it's fixed / disabled on windows. Thanks!. Done, also directly pushed to `v6-26-00-patches` given that no test detected the failure anyhow. I'll wait for Jenkins to complete https://github.com/root-project/roottest/pull/808 before I merge that, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9691#issuecomment-1022213045:231,test,test,231,https://root.cern,https://github.com/root-project/root/pull/9691#issuecomment-1022213045,1,['test'],['test']
Testability,"> If it can be turned into a constexpr that would probably be better. Here are the numbers, after this PR + the diff; ```; diff --git a/core/base/inc/TString.h b/core/base/inc/TString.h; index 7710169876..8181dc2563 100644; --- a/core/base/inc/TString.h; +++ b/core/base/inc/TString.h; @@ -277,7 +277,7 @@ private:; public:; enum EStripType { kLeading = 0x1, kTrailing = 0x2, kBoth = 0x3 };; enum ECaseCompare { kExact, kIgnoreCase };; - static const Ssiz_t kNPOS = ::kNPOS;; + static constexpr Ssiz_t kNPOS = ::kNPOS;; ; TString(); // Null string; explicit TString(Ssiz_t ic); // Suggested capacity; diff --git a/core/base/src/TString.cxx b/core/base/src/TString.cxx; index 4087cdbb52..f6efde6a0a 100644; --- a/core/base/src/TString.cxx; +++ b/core/base/src/TString.cxx; @@ -54,12 +54,6 @@ as a TString, construct a TString from it, eg:; #include ""TVirtualMutex.h""; #include ""ThreadLocalStorage.h""; ; -// Definition of the TString static data member. Declaration (even with; -// initialization) in the class body *is not* definition according to C++; -// standard. The definition must be explicitly done in one TU for ODR use. See; -// https://en.cppreference.com/w/cpp/language/definition; -const Ssiz_t TString::kNPOS;; ```. ```; time python -c ""import ROOT;print(ROOT.gErrorIgnoreLevel);print(ROOT.kError)""; -1; 3000. real	0m0.805s; user	0m0.604s; sys	0m0.198s; ```; ```; nm -C $ROOTSYS/lib/*.so | grep TString::kNPOS | wc -l; 0; ```; ```; strace -z -f -o openat.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel);print(ROOT.kError)'; -1; 3000; grep openat openat.log | wc -l; 402; ```. So indeed, when this PR is merged we can make `TString::kNPOS` `constexpr` and remove also that symbol from `libCore.so` :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1868332728:1467,log,log,1467,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1868332728,2,['log'],['log']
Testability,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s; https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4; but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11146#issuecomment-1208052361:117,log,logic,117,https://root.cern,https://github.com/root-project/root/issues/11146#issuecomment-1208052361,1,['log'],['logic']
Testability,"> If possible, I think we should add a test where the inspector opens an ntuple with deferred columns in the second cluster. Yes, my plan was to address the inspector (+ tests) in a separate PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15698#issuecomment-2144408622:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/15698#issuecomment-2144408622,2,['test'],"['test', 'tests']"
Testability,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2052136735:275,test,test,275,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735,4,['test'],"['test', 'tests']"
Testability,"> If this PR is already in a satisfactory state for you, then I will test locally and once I'm done I will rebase and merge. What do you think?. Yes, please merge this PR.; This is now in state I want to have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-365924390:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-365924390,1,['test'],['test']
Testability,"> If this hypothesis is correct, it would mean that this patch wouldn't work on user-defined types either with only a templated move constructor... Interesting! This is something I can test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14426#issuecomment-1917742936:185,test,test,185,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917742936,1,['test'],['test']
Testability,"> If this is what you are after, I agree with this idea and I will add it to the unit testing suite of this PR. Yes, this is exactly the kind of example I was looking for. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2354113777:86,test,testing,86,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2354113777,1,['test'],['testing']
Testability,"> If this was mostly for unloading, then the test failures are telling us we might need this for something else. Maybe, maybe not: lookup performs unloading, and these tests' missing symbols are typical examples for templates instantiated during lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10696#issuecomment-1146253227:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/10696#issuecomment-1146253227,2,['test'],"['test', 'tests']"
Testability,"> In `TInterpreter::GetSharedLibDeps`, at some point we call `interp->getDynamicLibraryManager()->searchLibrariesForSymbol(""__libc_single_threaded@GLIBC_2.32"", /*searchSystem*/false)` and that returns `""/home/blue/ROOT/master/_build/roottest/root/dataframe/branchoverwrite""` in this broken usecase.; > ; > As `branchoverwrite` is a completely unrelated test, the linking of which actually breaks the ACLiC compilation of this macro, I guess we don't want to pick `""__libc_single_threaded@GLIBC_2.32""` from `""/home/blue/ROOT/master/_build/roottest/root/dataframe/branchoverwrite""`. Is the `branchoverwrite` the executable which runs the `TInterpreter::GetSharedLibDeps`? If that is not the case then for some reason, on Arch, the implementation thinks `branchoverwrite` is a shared object and not an executable..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-850530149:353,test,test,353,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-850530149,1,['test'],['test']
Testability,"> In addition this changes the value kUseCompiledDefault, could that be documented in the commit log?. Done!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4839#issuecomment-577620773:97,log,log,97,https://root.cern,https://github.com/root-project/root/pull/4839#issuecomment-577620773,1,['log'],['log']
Testability,"> In clang we finally have some bits to track the template sugar. If we want to remove this patch we should make sure we resugar the necessary types. I believe we will need to update to clang-16 or backport a bunch of patches. We currently have two approaches, I propose to leave https://github.com/root-project/root/commit/c6cfe7cbcde6fb4a74abb5b35b2bbd11953f8b7e in place. Can you give a test that will break by removing `HackForDefaultTemplateArg`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13072#issuecomment-1602886183:390,test,test,390,https://root.cern,https://github.com/root-project/root/pull/13072#issuecomment-1602886183,1,['test'],['test']
Testability,"> In fact, I have a project that uses C++20, and uses ROOT compiled with C++17,. We currently do not support this mixing of standard. > However, once the restriction of this preprocessor macro is resolved, the compilation could pass, and no related problems have been encountered for the time being. . This means that the example/test that have been run so far did not stress the interfaces that uses `std::span` (and/or your lucky that both version are similar enough). In practice, changing the test as this PR does introduces a ODR (one definition rule) violation: i.e. some of the code use one version of `std::span` and some of the code use a different version of `std::span`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1252819197:330,test,test,330,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1252819197,2,['test'],['test']
Testability,"> In ginclude/compiledata.h, I can see -std=c++2a correctly replacing -std=c++17 in both MAKEEXE and MAKESHAREDLIB. humm ... then it is weird. You can see the actual command line used by typing:; ```; .L test.cpp++kv; ```; (with the 'k' the temporary files are kept and you can try re-running the command line shown in the log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12747#issuecomment-1531439473:204,test,test,204,https://root.cern,https://github.com/root-project/root/issues/12747#issuecomment-1531439473,2,"['log', 'test']","['log', 'test']"
Testability,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-1818478493:47,test,test,47,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493,3,['test'],['test']
Testability,"> In practice, changing the test as this PR does introduces a ODR (one definition rule) violation: i.e. some of the code use one version of `std::span` and some of the code use a different version of `std::span`. Exactly, that's the tricky part of this issue. If no other means are used to avoid problems, and the compilation is successful, directly adding the same name to the std will potentially lead to many surprises. . If I understand correctly, the same is true for `std::string_view`. See `RStringView.hxx`:. ```C++; #if defined(R__HAS_STD_STRING_VIEW) || R__MSVC_LANG >= 201703L || __cplusplus >= 201703L. #include <string_view>. #else. # if defined(R__HAS_STD_EXPERIMENTAL_STRING_VIEW); # include <experimental/string_view>; # else; # include ""RWrap_libcpp_string_view.h""; # endif; ```. There is also a feature test macro. If someone uses C++17 and links to the ROOT compiled by C++14, they might encounter the same issue. I think it is a better practice to change a namespace (such as `cxx20::span`, `cxx17::string_view`, etc.) and provide the corresponding implicit conversion when the standard matches. In this way, users will not be disturbed to use normally, and these features are also available inside ROOT. The only symmetry break is in the API. Because the features exposed are not those of the standard library, users may need to manually convert them in some cases, so implicit conversion should be provided. . For example:. ```C++; #if __cplusplus >= 202002L; # include <span>; #endif. namespace cxx20 {. constexpr std::size_t dynamic_extent =; #if __cplusplus >= 202002L; std::dynamic_extent;; #else; /* something */;; #endif. template<class T, std::size_t Extent = dynamic_extent>; class span {. // ... here is the normal implementation. #if __cplusplus >= 202002L; public:; constexpr operator std::span<T, Extent>() noexcept;; constexpr span(const std::span<T, Extent>& other) noexcept;; constexpr span& operator=(const std::span<T, Extent>& other) noexcept;; #endif. // ... h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1253349273:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1253349273,2,['test'],['test']
Testability,"> In principle LGTM; is it possible to test this in our infrastructure, to make sure the warning pops up where we expect it and that the ""feature"" continues to work for the time being? After removing the instances from `roottest`, we would otherwise lack coverage... Is this test sufficient?. https://github.com/devajithvs/root/blob/master/core/metacling/test/TClingTests.cxx#L91. Or should the test go in `roottest` repository.?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1952137893:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1952137893,4,['test'],['test']
Testability,"> In the currently generated code, I don't see a reinterpret_cast... Is the error message in the commit message maybe copied from an intermediate try?. Indeed it was! I update the description and git log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11556#issuecomment-1329810173:200,log,log,200,https://root.cern,https://github.com/root-project/root/pull/11556#issuecomment-1329810173,1,['log'],['log']
Testability,"> Include files from the classes for which the dictionary is generated should not expect to have `using namespace std` defined in the global scope, I believe adding this statement before includes is wrong. I agree but if we proceed with the PR as is it will be a breaking change. My expectation is that there is a lot of code out there(since rootcint times) which we will be breaking. That is why I am in favor of a new option and slowly moving toward making it default. . > Could you tell me how can I run these tests locally? Are they in a separate repository?. You just need to clone root and specify `-Droottest=On`, Then compile it and type `ctest -jN`, if you want a particular test use the `-R` option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296#issuecomment-609417290:513,test,tests,513,https://root.cern,https://github.com/root-project/root/pull/5296#issuecomment-609417290,2,['test'],"['test', 'tests']"
Testability,> Is somebody working with priority on the test case so that we can merge this fix?. I attempted to create one but didn't succeed (https://github.com/root-project/root/pull/14887#issuecomment-1981644071) so I abandoned it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-2023159242:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-2023159242,1,['test'],['test']
Testability,"> Is that intentional?. @pcanal yes, that's an `EXPECT_THROW` in the test code",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552#issuecomment-1279118450:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/11552#issuecomment-1279118450,1,['test'],['test']
Testability,> Is there a corresponding roottest PR enabling/adding test for this?. Added a cling test for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15458#issuecomment-2104584643:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/15458#issuecomment-2104584643,2,['test'],['test']
Testability,> Is there a plan to introduce testing for this part?. There was no concrete plan. . One can try to emulate attack on RWebWindow communication without real http server.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15452#issuecomment-2107863360:31,test,testing,31,https://root.cern,https://github.com/root-project/root/pull/15452#issuecomment-2107863360,1,['test'],['testing']
Testability,> Is there any test cases I can run with?. Not specifically. Some of the code would be exercised by calling ::Fatal( ... ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97#issuecomment-149257440:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/97#issuecomment-149257440,1,['test'],['test']
Testability,> Is there possibility to disable automatic testing with gcc 4.8.x?. This is still used a lot. Isn't there a way to backport the external library to that version of gcc?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-351527582:44,test,testing,44,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-351527582,1,['test'],['testing']
Testability,> Is this WIP or ready for testing?. It is ready to go in if I manage to resolve the last issue in https://github.com/root-project/root/pull/5094#issuecomment-607082228,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628636323:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628636323,1,['test'],['testing']
Testability,"> Isn't it wrong? Testing floating point for equality is numerically unstable, isn't it?. Normal float representation is 1.2345e67; But in trivial cases (like 1 or 2 or 35) integer is much shorter. Yes, `value == std::nearbyint(value)` not always return true for real integer, but this should not be a problem. In such case one just gets value like ""5.0000001e1"". And such value absolutely ok - other side should not expect integer at this place anyway. This is just to save space in produced JSON string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/925#issuecomment-326642782:18,Test,Testing,18,https://root.cern,https://github.com/root-project/root/pull/925#issuecomment-326642782,1,['Test'],['Testing']
Testability,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413992581:315,assert,assert,315,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413992581,1,['assert'],['assert']
Testability,"> It does so only for the left-over elements when the collection shrinks. uhm why are leftover elements different from elements that are replaced? if some resource management logic has to be called when an element is removed, it might also have to be called when it is replaced?. EDIT: ah, I see now that #10520 basically covers this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8770#issuecomment-1117113278:175,log,logic,175,https://root.cern,https://github.com/root-project/root/pull/8770#issuecomment-1117113278,1,['log'],['logic']
Testability,"> It is a bit confusing, it is possible to run this code as standalone still? I would actually remove ; > everywhere this possibility (e.g remove -> find_package(ROOT REQUIRED) and etc.). I explained in Mattermost - `find_package(ROOT REQUIRED)` kept in two places while variables like `ROOT_vs_FOUND` or `ROOT_mathcore_FOUND` defined only after calling `ROOTConfigure.cmake`. One need to change a lot in `test/CMakeLists.txt` and `tutorials/CMakeLists.txt`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5577#issuecomment-625777738:406,test,test,406,https://root.cern,https://github.com/root-project/root/pull/5577#issuecomment-625777738,1,['test'],['test']
Testability,"> It is a bit weird that the change from 2 to 3 has such a large effect on the file size. Can you verify (through `TFile::Map(""forcomp"")`) that the change is strictly limited to the `StreamerInfo` record. Sure. Find attached the two ""forcomp""s of the two last files of execCheckClusterRange.; [new.log](https://github.com/root-project/root/files/14669633/new.log); [old.log](https://github.com/root-project/root/files/14669634/old.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2009990047:298,log,log,298,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2009990047,4,['log'],['log']
Testability,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10748#issuecomment-1159421157:12,log,logic,12,https://root.cern,https://github.com/root-project/root/issues/10748#issuecomment-1159421157,1,['log'],['logic']
Testability,> It looks like we should continue ahead with what Raphael has started . Are you talking about the code in this PR (which can't work as is -- as jenkins pointing out this PR breaks most of the test targeting (indirectly) the use of CallFunc for templated functions -- ) or something else?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/614#issuecomment-307026661:193,test,test,193,https://root.cern,https://github.com/root-project/root/pull/614#issuecomment-307026661,1,['test'],['test']
Testability,"> It removes the requirement for version 3.9. Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. > It worsens the error message in case json_fwd.h when it is required for recent versions. They were written based on feedback from upstream, so I would like to keep the detailed messages. `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. After LLVM upgrade we could completely skip usage of `json_fwd.h`. I hope it will happen before 6.28 release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230200939:189,test,testing,189,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230200939,1,['test'],['testing']
Testability,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1756967993:317,test,test,317,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1756967993,1,['test'],['test']
Testability,"> It seems to be reproducible via vanilla cppyy as shown below. . The example above isn't a proper leak check b/c the `range()` call will have Python cache integers, the first `obj.leak` call will compile a wrapper (loading all kinds of stuff the first time around) etc. Below is an actual test, which doesn't leak on ""vanilla cppyy"" although it may still be on the one included in ROOT as there are differences:. ```; import cppyy, gc, os, psutil. cppyy.cppdef(""""""; #include <string>; class foo {; public:; const std::string leak (std::size_t size) const {; std::string result;; result.reserve(size);; return result;; }; };; """"""). process = psutil.Process(os.getpid()). # warmup; obj = cppyy.gbl.foo(); for i in range(1000000):; s = obj.leak(2048). gc.collect(). last = process.memory_info().rss. for i in range(1000000):; s = obj.leak(2048). gc.collect(); assert last == process.memory_info().rss; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15703#issuecomment-2145734725:290,test,test,290,https://root.cern,https://github.com/root-project/root/issues/15703#issuecomment-2145734725,2,"['assert', 'test']","['assert', 'test']"
Testability,> It will be my honor to squash that last test failure tomorrow.; > ; > @vgvassilev do we need anything else before we merge? Should we have a pass over this PR's history to clean it?. We need to:; - [ ] Review the commit history;; - [ ] Update back the clang.git and llvm.git forks with the right set of changes we applied after we imported the code in ROOT; - [x] Fix the cmssw reported issue - I believe it is due to not properly rebased patch in clang.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326773688:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326773688,1,['test'],['test']
Testability,"> It would be good to have a test for this. May need a bit of work to only run with C++20 available... `// UNSUPPORTED: c++03, c++11, c++14, c++17` already works out of the box for the lit test. We will still need to check for the feature macro __cpp_lib_source_location to ensure the feature exist. EDIT: I was wrong about it working out of the box. The feature already exist for libcxx in llvm and we might have to duplicate the same. For now, a conditional check prevents the test from failing if the feature doesn't exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14218#issuecomment-1865931261:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/14218#issuecomment-1865931261,3,['test'],['test']
Testability,"> It would be nice to include a test of the operator. @lmoneta added the test for Leaky Relu, Kindly review the PR and suggest changes if needed. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10415#issuecomment-1111551637:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/10415#issuecomment-1111551637,2,['test'],['test']
Testability,> It would probably be good to add a test for this ... Problem with test - it must fail anyway. Just avoid invalid arguments in TString::Replace.; I will adjust commit soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6498#issuecomment-700715275:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/6498#issuecomment-700715275,2,['test'],['test']
Testability,"> It's at the end of the `testRooFuncWrapper` file where you can exclude specific tests: https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx; > ; > In the case of Windows, it's the `AddPdf` fit that fails, which is encoded in `param3`. So wee need:; > ; > ```c++; > INSTANTIATE_TEST_SUITE_P(RooFuncWrapper, FactoryTest,; > testing::Values(param1, param2,; > #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS); > param3,; > #endif; > param4, param5, param6, param7, param8, param8p1, param9, param10, param11,; > param12, param13),; > [](testing::TestParamInfo<FactoryTest::ParamType> const &paramInfo) {; > return paramInfo.param._name;; > });; > ```; > ; > By the way, this failure is maybe not even related to Clad, but could be because of different random numbers. I will follow up on this later after this PR. I do not understand the change but I've added it. Let's see what happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1939006181:26,test,testRooFuncWrapper,26,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1939006181,7,"['Test', 'test']","['TestParamInfo', 'test', 'testRooFuncWrapper', 'testing', 'tests']"
Testability,"> It's exactly the point of the test that the results should be the same bit-wise. I don't understand why you want this, I will comment on the other PR. > If you want green builds :green_apple: I suggest to disable this test on mac13arm with a comment. Yes, we should always have green builds, and in my opinion it's very unfortunate that we have known-failing tests on a significant platform for months.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12784#issuecomment-1538438094:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/12784#issuecomment-1538438094,3,['test'],"['test', 'tests']"
Testability,> It's guaranteed that tests excluded by this ROOT_runtime_cxxmodules_FOUND are temporary. Are temporary and will always be? I.e. also future usages of this exclusion mechanism will only ever exclude tests temporarily? So grepping for `ROOT_runtime_cxxmodules_FOUND` will only find tests that must be re-enabled? Good!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992#issuecomment-387662235:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/1992#issuecomment-387662235,3,['test'],['tests']
Testability,"> It's off intentionally because of what I wrote previously.; > ; > https://github.com/root-project/root/blob/498ac1dca5c1c30bc9fa3bc2ec722c33ebbd93a8/core/sanitizer/SanitizerSetup.cxx#L19-L23. Ah yes, I only checked `__lsan_options`... Regarding the test failures, I'm currently going through them one-by-one to create issues on GitHub.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1056659717:251,test,test,251,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1056659717,1,['test'],['test']
Testability,> It's probably the first time ever they get run with XGBoost 2.0 on any CI. It is the first time ever they are run! https://github.com/root-project/root/blob/e3aecd6e49fe19a323c1fcc56572eb99c6f1b46e/tmva/tmva/test/CMakeLists.txt#L34-L39,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15183#issuecomment-2046093422:210,test,test,210,https://root.cern,https://github.com/root-project/root/pull/15183#issuecomment-2046093422,1,['test'],['test']
Testability,"> Just curious: would it also work to have the build directory adjacent to the source directory, instead of below the git repository? Or does this interact poorly with IDEs?. I think that interacts poorly with keeping things in order in your filesystem: say you have a `projects/` directory with `myawesomeproject1/` and `myothersideproject/` inside, you don't want them both creating a `build` directory next to the sources. But at the same time for IDEs and tools to automatically pick up build artifacts (e.g. tests) you do want every project to use the same name for the build directory (ideally `build/` as per [pitchfork](https://api.csswg.org/bikeshed/?force=1&url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs)'s recommendations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12881#issuecomment-1563102438:513,test,tests,513,https://root.cern,https://github.com/root-project/root/pull/12881#issuecomment-1563102438,1,['test'],['tests']
Testability,"> LGTM !; > Thank you Vassil for fixing the issue with the R include files.; > Are we testing in the PR builds the R interface ?. IIRC we had a node with R enabled, however I'd not rely on that. After merging I will trigger the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8827#issuecomment-895901592:86,test,testing,86,https://root.cern,https://github.com/root-project/root/pull/8827#issuecomment-895901592,1,['test'],['testing']
Testability,"> LGTM but I think a test would be useful; ; Yes, it is https://github.com/root-project/roottest/pull/950",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12662#issuecomment-1510464426:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/12662#issuecomment-1510464426,1,['test'],['test']
Testability,"> LGTM for the RDF part.; > ; > Out of curiosity, can you share a link to the kind of errors you see?. ```; Start 878: tutorial-dataframe-df001_introduction-py. 878: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df001_introduction.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 878: Environment variables:; 878: ROOT_HIST=0; 878: Test timeout computed to be: 1500; 878: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 878: error code: -529697949; 878:; 878:; 1/16 Test #878: tutorial-dataframe-df001_introduction-py .................***Failed 5.63 sec; test 879; Start 879: tutorial-dataframe-df002_dataModel-py. 879: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df002_dataModel.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 879: Environment variables:; 879: ROOT_HIST=0; 879: Test timeout computed to be: 1500; 879: Error in <TChain::LoadTree>: Cannot find tree with name in file df002_dataModel_py.root; 879: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 879: error code: -529697949; 879:; 879:; 2/16 Test #879: tutorial-dataframe-df002_dataModel-py ....................***Failed Error regular expression found in output. Regex=[Error in] 8.04 sec; test 880; Start 880: tutorial-dataframe-df003_profiles-py. 880: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:166,Test,Test,166,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,5,"['Test', 'test']","['Test', 'test']"
Testability,"> LGTM if all tests pass. Thanks! This PR fixes the build, but then some tests are failing. Need more investigations. Still working on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15855#issuecomment-2168112742:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/15855#issuecomment-2168112742,2,['test'],['tests']
Testability,"> LGTM! 13 tests were fixed (from 37 to 24), but why -Dsoversion=Off should be off?. I was just playing around. No particular need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4758#issuecomment-573834193:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/4758#issuecomment-573834193,1,['test'],['tests']
Testability,"> LGTM! Do we also want to use this in case someone attempts to create a `std::unique_ptr` field of a cyclic class? Or is this already handled in some other way?. Thanks! Yep, the `unique_ptr` case is handled in the same way than the unit-tested vector case: `RFieldBase::Create` will construct the unique_ptr from a `RUniquePtrField` with an inner field of the actual type. And, if cyclic, fail on the construction of that inner type.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14874#issuecomment-1983009306:239,test,tested,239,https://root.cern,https://github.com/root-project/root/pull/14874#issuecomment-1983009306,1,['test'],['tested']
Testability,"> LGTM!. Thanks! By the way I have no idea how the cling-tests worked, so I just tried to copy what I saw in the lines above with the comment doing the ""CHECK"" I hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2053626453:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2053626453,1,['test'],['tests']
Testability,"> LGTM, I think we can merge -- I trust that you tested locally and it works. We'll merge the PR with the improved Vary test suite as soon as possible. Still waiting for the mac1015 node. Should I merge anyway? Everything else is green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10486#issuecomment-1113036144:49,test,tested,49,https://root.cern,https://github.com/root-project/root/pull/10486#issuecomment-1113036144,2,['test'],"['test', 'tested']"
Testability,"> LGTM, although I'd have hoped to get a test making sure we do not break it again... It runs fine on Ubuntu 18.04 and 20.04 with root 6.22 (I also tested it with root 6.20, both downloaded as binary tar-ball). The problem did not exist in earlier versions (the latest that I tested was, I think, 6.18). One of our students pointed out that it does not work anymore in newer versions. That was the best fix that I found, but I admit that the root-build system is a mystery to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6306#issuecomment-688316481:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/6306#issuecomment-688316481,3,['test'],"['test', 'tested']"
Testability,"> LGTM, but before merging it would be good to see all tests succeeding. Thanks for the review! It seems all check passed now :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15094#issuecomment-2036379202:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/15094#issuecomment-2036379202,1,['test'],['tests']
Testability,"> LGTM, in principle, though it's very hard to know from the code whether everything is fine. Would it be possible to have a test or is there no changed behaviour?. I understand the review is a bit hard if you are not familiar with the code. In the commit message I try to explain the reason of the change. As for the test, I added this:. https://github.com/root-project/roottest/pull/607. which reproduces what the commit is trying to fix (a proper match and invocation if the constructor has default arguments). The other tests seem to run fine. I also want to add a test for TGMainFrame once https://github.com/root-project/root/issues/6578 is fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6582#issuecomment-706109623:125,test,test,125,https://root.cern,https://github.com/root-project/root/pull/6582#issuecomment-706109623,4,['test'],"['test', 'tests']"
Testability,> LGTM. And it looks like this fixes also the LLVM 18 build... Or maybe not. Still testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16222#issuecomment-2286513186:83,test,testing,83,https://root.cern,https://github.com/root-project/root/pull/16222#issuecomment-2286513186,1,['test'],['testing']
Testability,> LGTM. Can we have a test for this? (might need #8771 to land first). Sure! (but it will have to wait until I'm back from vacations...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8772#issuecomment-889792374:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/8772#issuecomment-889792374,1,['test'],['test']
Testability,> LIBRARY_PATH. They don't. Just tested it. One of the reasons is certainly that TUnixSystem is not part of Clang.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1496182008:33,test,tested,33,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496182008,1,['test'],['tested']
Testability,"> Let's just take care of the CI issues before merging. @jblomer I think I fixed the `pyroot_import_load_libs` issue with 297a25b. That last build instead failed with a ""Cannot allocate memory"" failure, which I think comes from opening too many `urings` on the test node. I will see what the CI thinks about the changes in 0c49514. I'd like to avoid `test/RIoUring.cxx` becoming an unstable test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-679273847:261,test,test,261,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-679273847,3,['test'],['test']
Testability,"> Let's see if we can revive this PR. Thank you for taking up this work again. I'd forgotten about it and I don't think I'll finish it myself. As far as I remember, I stopped when I was writing the test that was required. In the few cases that I tested by hand, it seemed to work but it's not at all impossible for the code to be buggy, hence the need to check it thoroughly with tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5280#issuecomment-1801237636:198,test,test,198,https://root.cern,https://github.com/root-project/root/pull/5280#issuecomment-1801237636,3,['test'],"['test', 'tested', 'tests']"
Testability,"> Let's see what a test should look like: we'd need one side of the `==` from JIT, the other side needs to be compiled. So IIUC we can just call `gInterpreter->Calc(""TDataType::GetType(typeid(unsigned long long)"")` etc from interpreted code and see whether it works? That'd be a good test to have anyway ;-) Could you help with this, @hahnjo - `core/meta/test/` might be a good place for this?. I tried this, and it works on all platforms due to the quoted requirement that the `type_info` for the most basic types live in the runtime support library. It could only break if some platforms don't follow the ABI (do we care?) or we pass `class`es - which are not handled by `TDataType::GetType` anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-828999939:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-828999939,3,['test'],['test']
Testability,"> Let’s wait for this to land upstream. Is this a requirement? This is finally fixing test crashes with the most recent GCC and C++20, I'd rather have this in...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13859#issuecomment-1764416972:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/13859#issuecomment-1764416972,1,['test'],['test']
Testability,> Lgtm! Any chance for a test to capture this?. Done!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1030048765:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1030048765,1,['test'],['test']
Testability,"> Llvm9 is in master. Can someone check whether it helps?. With master (@ 5b06edd12572938cd83e45e07067c827cc0fc615) I get the same error it seems:. ```; $ export ROOT_INCLUDE_PATH=$(brew --prefix boost)/include; $ cat test.C; #include <boost/smart_ptr/shared_ptr.hpp>. void test() {}; $ root -q test.C; ------------------------------------------------------------------; | Welcome to ROOT 6.23/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Mar 03 2021, 00:17:00 |; | From heads/master@v6-23-01-RF-binSampling-1035-g5b06edd125 |; | With Apple clang version 12.0.0 (clang-1200.0.32.29) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. Processing test.C...; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:17:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/shared_count.hpp:26:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/sp_counted_base.hpp:40:; /usr/local/opt/boost/include/boost/smart_ptr/detail/sp_counted_base_gcc_atomic.hpp:65:30: error: expected parameter declarator; inline boost::uint_least32_t atomic_load( boost::uint_least32_t const * pw ); ^; /Users/alfaci/dklein/root/build_/etc/cling/lib/clang/9.0.1/include/stdatomic.h:120:55: note: expanded from macro 'atomic_load'; #define atomic_load(object) __c11_atomic_load(object, __ATOMIC_SEQ_CST); ^; <built-in>:16:26: note: expanded from here; #define __ATOMIC_SEQ_CST 5; ^; In file included from input_line_8:1:; In file included from /Users/alfaci/dklein/root/test.C:1:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/shared_ptr.hpp:17:; In file included from /usr/local/opt/boost/include/boost/smart_ptr/detail/shared_count.hpp:26:; In file included from /usr/local/opt/bo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6454#issuecomment-789316508:218,test,test,218,https://root.cern,https://github.com/root-project/root/issues/6454#issuecomment-789316508,5,['test'],['test']
Testability,"> Logically one do not require windows includes in cocoa. But probably @bellenot can give more comments as Windows expert. Indeed, cocoa and Windows are two different (and unrelated) platforms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-600638432:2,Log,Logically,2,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-600638432,1,['Log'],['Logically']
Testability,"> Long term: will super builds solve this?. Yes, because in a super build you don't have builtins, but a real installation of each project in sequence (more or less like what LCGCMake does now, but just for ROOT's dependencies and ROOT itself). Another alternative is to use `add_subdirectory()`, but not all projects support that. Google test and benchmark do, but CMake segfaults with other projects if they are added just with `add_subdirectory()`. https://blog.kitware.com/cmake-superbuilds-git-submodules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2727#issuecomment-426182221:339,test,test,339,https://root.cern,https://github.com/root-project/root/pull/2727#issuecomment-426182221,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> Looks good to me ! I agree with the implemented logic.; > ; > Maybe I have missed, and it is already there, but I think we should have an INFO message (also with gDebug=0), telling which type of library is loaded. If you set gDebug to 0 you will get the message from SystemLoad().",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7415#issuecomment-793964719:50,log,logic,50,https://root.cern,https://github.com/root-project/root/pull/7415#issuecomment-793964719,1,['log'],['logic']
Testability,"> Looks good to me!. Thanks for reviewing, @mxxo! During the first DAOS tests using the `ofi+tcp` provider, we measured over 2 GB/s for the default of 64 KiB pages (before it was ~200 MB/s). :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775#issuecomment-1163526251:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/10775#issuecomment-1163526251,1,['test'],['tests']
Testability,"> Looks like it's not quite ready. After patching up CPT to be able to build from custom repos and branches, I get a hard crash with just `#include <filesystem>`. Here's the repro:; > ; > ```; > ~/projects/third-party/cling-llvm13 took 16s at 21:38:01 ; > ❯ ./cling-build/cling-Arch\ Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling -std=c++17; > ; > ****************** CLING ******************; > * Type C++ code and press enter to run it *; > * Type .q to exit *; > *******************************************; > [cling]$ #include <filesystem>; > cling: /home/jeaye/projects/third-party/cling-llvm13/cling-build/cling-src/tools/cling/lib/Interpreter/Transaction.cpp:173: void cling::Transaction::forceAppend(DelayCallInfo): Assertion `oldDCI != DCI && ""Duplicates?!""' failed.; > #0 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fb34b; > #1 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17f8eac ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x17fabfe; > #2 0x000055e9492a6288 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x18491a8 ./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling 0x1848ed8; > #3 0x000055e9492a6288 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb288); > #4 0x000055e9492a634b (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fb34b); > #5 0x000055e9492a3eac gsignal (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17f8eac); > #6 0x000055e9492a5bfe abort (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x17fabfe); > #7 0x000055e9492f41a8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0x18491a8); > #8 0x000055e9492f3ed8 (./cling-build/cling-Arch Linux-rolling-x86_64-1.0~dev-8759abf/bin/cling+0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192249515:724,Assert,Assertion,724,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192249515,1,['Assert'],['Assertion']
Testability,> Looks like we have register something atexit (https://github.com/root-project/root/blame/master/core/base/src/TApplication.cxx#L162). Why TApplication does not rely on the regular gROOT's shutdown logic in TROOT.cxx?. Because TApplication are usually/often created after TROOT and we want to get the atexit at much at the tip of the chain (i.e. actually executed as early as possible).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-565419613:199,log,logic,199,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-565419613,1,['log'],['logic']
Testability,"> Many thanks! More unit tests are always a good thing!; > ; > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no?. I Will work on all the issues mentioned asap.; Thanks for your review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-614620021:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-614620021,2,['test'],['tests']
Testability,"> Many thanks! More unit tests are always a good thing!; > ; > For this particular one, I am not quite sure what it tests wrt. to RNTuple. If I understand correctly, it checks whether a newly created ROOT file uses 404 as its default compression settings, no?. hello, jblomer,; so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled?. Also, I am referring: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-619465032:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-619465032,3,['test'],"['test', 'tests']"
Testability,"> Maybe one of the atlas or CMS files should be checked. If one of the CMS files is stored uncompressed they have a different issue. I think hsimple.root is a fine test case for uncompressed data: reasonably small, close to analysis sample, not a huge amount of data (i.e. streamer info is a relevant fraction).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-391765689:164,test,test,164,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-391765689,1,['test'],['test']
Testability,"> Maybe the commit message could be more verbose about what was wrong before and how this patch fixes it. Fair enough, I will expand. > Also, should we have a test for the case this fixes?. Yes :) Can you add the test you case you had?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9750#issuecomment-1025151194:159,test,test,159,https://root.cern,https://github.com/root-project/root/pull/9750#issuecomment-1025151194,2,['test'],['test']
Testability,"> Maybe the logic in hadd was misguided by the parameter name. Indeed, way-back in 2011 the semantic of the compress parameter of `TFile::Open` was updated by that was not propagated to the name/doc of `hadd/TFileMerger`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14873#issuecomment-1974015531:12,log,logic,12,https://root.cern,https://github.com/root-project/root/pull/14873#issuecomment-1974015531,1,['log'],['logic']
Testability,"> Merging the PR, the test failures are unrelated (the ones regarding the tutorials seem to be triggered by some not-well-understood issue in TClass & friends, possibly regarding thread-safety, to be investigated). Unrelated or not, these will now fail in every PR. That's not good, it is still your responsibility to keep the builds green...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12485#issuecomment-1642095175:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12485#issuecomment-1642095175,1,['test'],['test']
Testability,"> Might work for Streamer(). Even for Streamer, the test is looking for a 'local' definition and thus inheritance is not a guaranteed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1837#issuecomment-380137802:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/1837#issuecomment-380137802,1,['test'],['test']
Testability,"> More practically speaking, anything in filed 0x05 is impossible to read for 3rd party libraries unless they have the C++ class definitions as well as the decoding streamer logic?. That is actually too strict of a statement. It is true for the PR in its current form, but the unsplit field is not considered finished yet. We will also add the streamer info so that everything remains self-described.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14728#issuecomment-2015284880:174,log,logic,174,https://root.cern,https://github.com/root-project/root/pull/14728#issuecomment-2015284880,1,['log'],['logic']
Testability,"> My suspicion is that the for the non-modules case we somehow fail to unload the definition of SiStripCluster. That is very likely (or more likely because 'moving memory around change the behavior), the unloading is only partially done. > PS: How the deserialization of the vtables of TMVA::IPruneTool makes the test succeeds is a complete mystery to me at the moment. I recommend that it is actually investigated and understood as this 'seeming random behavior' is likely to be 'use of undefined behavior in the code (somewhere)' or (less likely) the correct behavior but we are completely misunderstanding what's going on under the hood. > It seems to me that failure is the right behavior. It is not :) . I am sure we can agree that an 'undo X' should return the state to a point as if the last X cling related actions had not happened. I.e. the simplified example:. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. should actually have the same result (assuming no side effect for Marker::Marker) as. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; SiStripCluster obj;; ```. and it does not (when modules are turned on) ... possibly because the implicit AutoParse (that is triggered by the use of the symbol SiStripCluster) is no longer possible, in the module case, after the first execution (for example because the first execution of the AutoParse is switching some flag, like I already read this part of the pcm file, that is not 'reset'/'reverted' by the undo. > @pcanal, can you remember what exactly we were testing there?. It is testing both that in this setup the undo is not running into an infinite loop and that we correctly support an (implicit or explicit) AutoParse followed by undo followed by an implicit AutoParse. See the related commit:; ```; commit b6296198c2735101051daa33af89fe8ae641991e (fix_cms); Author: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-434478365:313,test,test,313,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-434478365,1,['test'],['test']
Testability,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2050660691:40,test,tests,40,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691,2,['test'],"['testing', 'tests']"
Testability,> Needs more test and tuning. Like what?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5863#issuecomment-646576018:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5863#issuecomment-646576018,1,['test'],['test']
Testability,"> New feature (as in, RooFit can now do something more than before) but no new test or changes in the docs is suspicious 😄. True, but writing a test that checks graphics output would consume too much time. Docs have actually improved. They are just not in function docstrings, but where they were before:; RooFit sends a message when this feature is invoked, and this message is much more informative now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5566#issuecomment-625240761:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/5566#issuecomment-625240761,2,['test'],['test']
Testability,> Nice change. I proposed a simplification. The tests seem to fail because the change does what it is supposed to do and the reference would need to be adapted. Thanks! We're on it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10928#issuecomment-1947918617:48,test,tests,48,https://root.cern,https://github.com/root-project/root/issues/10928#issuecomment-1947918617,1,['test'],['tests']
Testability,"> Nice try, but you have to be careful with schema evolution.; > ; > 1. Go back, write a class that uses those proxies to a file, commit the file to git, and implement a read test.; > ; > 2. Change the classes, and implement the proper typedefs, so no other code in RF has to be touched.; > ; > 3. Create schema evolution rules like those:; > https://github.com/root-project/root/blob/05d10d2127282c5ec11b1330763dc0b43a93a6df/roofit/roofitcore/inc/LinkDef.h#L185-L192. Hi @hageboeck, thanks for the review! The proper typedefs were already implemented, and now I also implemented schema evolution rules and implemented a read test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8728#issuecomment-1033824234:175,test,test,175,https://root.cern,https://github.com/root-project/root/pull/8728#issuecomment-1033824234,2,['test'],['test']
Testability,"> No luck. Are you able to reproduce the failure locally? If not, you can use something like:; ```; //check if element is a TRef or TRefArray; const bool originalTest = (strncmp(fTypeName.Data(),""TRef"",4) != 0);; TClass* const type = GetClassPointer();; const bool newTest = (!type || !(type->InheritsFrom(TRef::Class()) || type->InheritsFrom(TRefArray::Class()) || type->InheritsFrom(""TVirtualRefProxy"")); if (originalTest != newTest); 		Fatal(""GetExecID"", ""Problem with type %s original test %d, new test %d\n"", ; fTypeName.Data(), originalTest, newTest);; if (originalTest) return 0;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1989251733:489,test,test,489,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1989251733,2,['test'],['test']
Testability,"> No test was broken in the incrementals: perhaps we can give it a try in the nightlies?. I was hoping getting some feedback from @krasznaa before merging, but I guess we can merge and we'll see afterwards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14474#issuecomment-1923285964:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/14474#issuecomment-1923285964,1,['test'],['test']
Testability,"> No, I didn't, sorry. I just rebased an existing PR, I think at that time, it was tested with jenkins. See discussion here: [root-project/cling#174 (comment)](https://github.com/root-project/cling/pull/174#issuecomment-313743374). Ok, 7 years ago the tests were fine. Are they now? We should probably implement the feature request you mentioned earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16694#issuecomment-2418648683:83,test,tested,83,https://root.cern,https://github.com/root-project/root/pull/16694#issuecomment-2418648683,2,['test'],"['tested', 'tests']"
Testability,"> No, we don't see this in other RooFit PRs.; > ; > From the log, it seems that there is a problem when using RooFit from Python now:; > ; > And in the final test the whole run crashes, that's why in the comment on GitHub we don't see these test failures. I'm rerunning the build right now, and logged in into the mac node where it runs. It's a different node, and the tests seem to pass. Let's wait for the build to finish, but I would assume it's a problem with the node where it ran.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12536#issuecomment-1482615382:61,log,log,61,https://root.cern,https://github.com/root-project/root/pull/12536#issuecomment-1482615382,5,"['log', 'test']","['log', 'logged', 'test', 'tests']"
Testability,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12.; > ; > > Without a virtual environment, MacOS does not allow to pip packages; > ; > I'm very surprised about that - not even `pip --user` or whatever it's called?. Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6686#issuecomment-714496187:6,test,testing,6,https://root.cern,https://github.com/root-project/root/issues/6686#issuecomment-714496187,1,['test'],['testing']
Testability,> Note that the new test is still failing on Windows x86... 😞. @bellenot has it open in a debugger but needs some shared screen time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16373#issuecomment-2376302781:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/16373#issuecomment-2376302781,1,['test'],['test']
Testability,"> Note that this PR (?) seems to cause new errors in the new CI - we were at 0 test failures before, thanks to all your work!. I don't think that's my PR, you can also see it here: https://github.com/root-project/root/pull/13070#issuecomment-1603661635. Looking at the failures, it looks like the CI picks up an old version of `roottest` on Windows. At least the `return 0;` in `test_ROOT9975` was fixed months ago by https://github.com/root-project/roottest/commit/a905ea54cecbe1bb98c2350d06949ba6b8060af1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13072#issuecomment-1603964951:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/13072#issuecomment-1603964951,1,['test'],['test']
Testability,"> OK so you recommend to use `__cplusplus` instead of `__cpp_lib_three_way_comparison`?. I don't know yet, still trying. It seems to solve the one tutorial I debugged in `mac13arm`, but I'll need to test with more compilers to make sure it doesn't break elsewhere...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12525#issuecomment-1540482992:199,test,test,199,https://root.cern,https://github.com/root-project/root/pull/12525#issuecomment-1540482992,1,['test'],['test']
Testability,"> OK, I un-commented the safety check, I don't remember the reason why I disabled it in the first place. Thanks for this. > Please open a separate issue if needed with a macro to test for the random sequence. In principle, `gRandom->Rndm()` is used for sampling, which should produce the same sequence if not seeded elsewhere. Will do. This is low priority for us as we found some workaround in our test-chain, but the issue is kept open in our tracker with a long timeline and assigned to me, so probably the kind we dig out during the summer activity dip",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675#issuecomment-1968643689:179,test,test,179,https://root.cern,https://github.com/root-project/root/issues/14675#issuecomment-1968643689,2,['test'],"['test', 'test-chain']"
Testability,"> OK, there are errors already in LLVM/Clang, and as I said, there is no way I can test on ARM64, so there is not much I can do... Hi @bellenot, in fact, I am also using an amd64 machine, but I am doing cross-compilation, and the target architecture is arm64ec.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787#issuecomment-2238714635:83,test,test,83,https://root.cern,https://github.com/root-project/root/issues/11787#issuecomment-2238714635,1,['test'],['test']
Testability,"> OTOH I really don't understand the 10.14 failure - the node has numpy installed just fine at /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy. AFAICT it's not using the Frameworks Python, but `/usr/local/bin/python3`. Does this mean we need https://github.com/root-project/root/pull/6849/commits/6a7b54854118125258f0384c0478f1b4a4fb20a0? I'm going to test this directly on the node when I have time. Edit: Ah no, that goes the other way. So probably fine, we just need to install `numpy` for the right Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7635#issuecomment-804084669:388,test,test,388,https://root.cern,https://github.com/root-project/root/pull/7635#issuecomment-804084669,1,['test'],['test']
Testability,"> Ok I do not see changes compare to the last comments I did. I suggested you now modify the test example according to the new structure and try if it works. Okay, I will do it. Do I need to build root first? If yes, I am unsure if I structured LinkDef.h correctly. Is is done correctly?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-821033850:93,test,test,93,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-821033850,1,['test'],['test']
Testability,> Ok now it compiles but we get the following error in the new test; > ; > ```c++; > input_line_49:1:21: error: unknown type name 'ROOT_7459'; > int ROOT_7459 = 42; ROOT_7459++;; > ^; > input_line_49:1:30: error: expected unqualified-id; > int ROOT_7459 = 42; ROOT_7459++;; > ```. Somehow the parsing seems broken. We should probably try using `ProcessLine` instead of `Declare`... still a mystery why this fails only for the PCH based builds... EDIT: Parsing is broken because `Declare` does not support statements on the global scope but `ProcessLine` does. In addition it works in master because clang already supports statements on the global scope (thanks to clang-repl)...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894094024:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894094024,1,['test'],['test']
Testability,"> Ok, I see. In this case, you would not need to generate a lot of data, right? A more concise test would be to create an empty RNTuple, to add one value, and then to open it and check what's the compression setting. Yes, and I'm looking in https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_zip.cxx#L67. Also discussed my approach in previous comment, please tell me am I going right ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-620603698:95,test,test,95,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-620603698,2,['test'],['test']
Testability,"> Ok, for only running on 3G. Is it possible to cut this down even more by pre-filtering? Review coming soon. I would have to look in detail into the cuts, perhaps? At the end, I like that many filters we use since that's how you go from the generic samples to the results, meaning this is the content of the example :) Also it's very nice from the benchmarking point of view!. I tried to go down using even less events, but then the statistics are super bad and it does not look good anymore. Using the 5% of the initial 10fb^-1 is the bare minimum.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667116797:349,benchmark,benchmarking,349,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667116797,1,['benchmark'],['benchmarking']
Testability,"> Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred. You probably have compiled your code base with -fno-rtti (or exceptions) and you should pass that flag to cling as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193060626:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193060626,3,['test'],"['test', 'test-case']"
Testability,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1629035353:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353,1,['test'],['tests']
Testability,"> Ok, thanks for the clarification! May I ask which tests are failing because of this warning? Normally, a warning should not make the test fail, so I'm curious to know what is exactly going on there. This is a list of test that fail without this change:. 	239 - gtest-roofit-hs3-test-testHS3SimultaneousFit (Failed); 	249 - gtest-roofit-roofit-test-testRooCrystalBall (Failed); 	250 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	261 - gtest-roofit-roofitcore-test-testRooAddPdf (Failed); 	266 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	267 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	269 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	273 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	277 - gtest-roofit-roofitcore-test-testRooAbsReal (Failed); 	279 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	280 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	281 - gtest-roofit-roofitcore-test-testInterface (Failed); 	282 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	283 - gtest-roofit-roofitcore-test-testRooAbsL (Failed); 	287 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	290 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	292 - gtest-roofit-roofitcore-test-testSumW2Error (Failed); 	294 - gtest-roofit-roofitcore-test-testLikelihoodGradientJob (Failed); 	295 - gtest-roofit-roofitcore-test-testLikelihoodJob (Failed); 	298 - gtest-roofit-roostats-test-testSPlot (Failed). Here is an example failure:; ```; 331/1268 Test #292: gtest-roofit-roofitcore-test-testSumW2Error ...............................***Failed 0.58 sec; Running main() from /builddir/build/BUILD/googletest-1.14.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TChainParsing.RemoteGlob:TFile.ReadWithoutGlobalRegistrationNet:TFile.ReadWithoutGlobalRegistrationWeb:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test suite.; [----------] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1837156931:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1837156931,23,['test'],"['test', 'test-', 'test-testGlobalObservables', 'test-testInterface', 'test-testLikelihoodGradientJob', 'test-testLikelihoodJob', 'test-testLikelihoodSerial', 'test-testRooAbsL', 'test-testRooAbsPdf', 'test-testRooAbsReal', 'test-testRooAddPdf', 'test-testRooBinSamplingPdf', 'test-testRooCrystalBall', 'test-testRooJohnson', 'test-testRooProdPdf', 'test-testRooRealL', 'test-testRooSimultaneous', 'test-testRooWrapperPdf', 'test-testSPlot', 'test-testTestStatistics', 'tests']"
Testability,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-766744713:148,test,test,148,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-766744713,1,['test'],['test']
Testability,"> On windows:; > ; > ```; > ; > 11:06:03 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ; > 11:06:03 ParallelTest.cxx; > ; > 11:06:03 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; > ; > 11:06:03 PaulTest.cxx; > ; > 11:06:03 REveTreeTools.cxx; > ; > 11:06:03 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; > ; > ```. I mean on debian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-780829540:286,test,test,286,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-780829540,5,['test'],['test']
Testability,"> Once more: ... The test I sketched does not use `TDataType::GetType`, it is testing the assumption that `type_info's operator==` has been fixed (and will not be broken by new platforms). [Ultimate goal: be able to rely on that operator everywhere] [The test setup can also be used to test cross library GetType ... but I guess one library might be enough there].",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-831413518:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-831413518,4,['test'],"['test', 'testing']"
Testability,"> Once the tests are green, I think these changes should be merged asap. Yes, I opened it to expose the fix and the result of the debugging session. While I polish it to avoid interfering with existing tests, this can be already tested on SWAN by injecting the custom DistRDF Python package taken from this branch on the PYTHONPATH of the workers, so we will try to get some measurements soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094#issuecomment-2247088485:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2247088485,3,['test'],"['tested', 'tests']"
Testability,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1768951805:34,test,test,34,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768951805,4,['test'],"['test', 'tests']"
Testability,"> One should test with runtime_cxxmodules=OFF. Indeed, it's what I wrote in the PR description. I hoped that we had at least one build with that option. This means that currently there is no build with `runtime_cxxmodules=OFF` and we should understand if that's intended/desirable or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15749#issuecomment-2149032105:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/15749#issuecomment-2149032105,1,['test'],['test']
Testability,> Only for certain types and it's not exposed by TTreeReader. humm .. isn't it also the case for RNtuple (I guess maybe less so but still). Anyway there is an attempt of it see `tree/tree/test/BulkApi*`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11517#issuecomment-1435038376:188,test,test,188,https://root.cern,https://github.com/root-project/root/pull/11517#issuecomment-1435038376,1,['test'],['test']
Testability,"> Our test suite is driven via `ctest`, so whatever `ctest` thinks is ""the truth"" for what concerns that test run. If it cannot find those packages, then they are not there for all intents and purposes. In all other `ctest`-run Python tests it works just fine, because the importing the packages with `import` always works. It's just that in this test, the packages are checked for availability with the deprecated `pkg_resources.require()`. So what `ctest` thinks is the truth is inconsistent, hence my conclusion that the test is broken. But that doesn't matter anymore, since you suggest to completely remove the test :smile: Thanks for that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272#issuecomment-2067660264:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/15272#issuecomment-2067660264,6,['test'],"['test', 'tests']"
Testability,"> Phillipe just pushed last evening his read/write lock updates. I *only* pushed the implementation of the lock and **not** the usage thereof. As mentioned in the PR:. The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1 Replace gROOTMutex by a TRWMutexImp; 2 Add R__READLOCKGUARD; 3 Add a TListWithRWLock and THashListWithRWLock; 4 Use those in TROOT; 5 Remove current external locks for those ROOT lists (in particular the ListOfFiles); 6 Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock.; 7 Introduce scalability test on RecursiveRemove",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719#issuecomment-312222457:727,test,test,727,https://root.cern,https://github.com/root-project/root/pull/719#issuecomment-312222457,1,['test'],['test']
Testability,> Ping. What's the fate of this?. Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1408170465:199,test,test,199,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1408170465,1,['test'],['test']
Testability,> Please remove the `if (!entry)` test and associated warning.; > Please also change the signature of GetEvent. okay. But I did some internet research and couldn't find a way to check if no entry parameter was given by the user without also raising the error when the user enters 0 (since !entry == true if entry == 0),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-862535003:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-862535003,1,['test'],['test']
Testability,"> Pointing to what alternatives there are, if any, either through the legacy alias, or in > the body doc, would be additionally helpful. We cannot test the existence of an input variable in an alias therefore we cannot handle with the same alias the case where there is another solution and the case where there is not. I guess if there are possible alternatives they should be mentioned in the body of the class documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315#issuecomment-1237811047:147,test,test,147,https://root.cern,https://github.com/root-project/root/pull/11315#issuecomment-1237811047,1,['test'],['test']
Testability,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13692#issuecomment-1730113177:253,test,test,253,https://root.cern,https://github.com/root-project/root/pull/13692#issuecomment-1730113177,1,['test'],['test']
Testability,"> Probably it could be a solution. How one can get these required components in `ROOTConfig.cmake` macro?. As I wrote, I don't think it would be the way. But still, you get the values specified by the user in `ROOT_FIND_COMPONENTS`. https://cmake.org/cmake/help/latest/command/find_package.html#package-file-interface-variables. For instance we use that in another project of ours, to check if the user is asking for one of the optional components of the project. https://github.com/acts-project/vecmem/blob/main/cmake/vecmem-config.cmake.in#L38-L45. Note that this logic is figuring out if something that the user asked for exists at all. This machinery is not meant to figure out whether the user wants to actively use something that (always?) does exist.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14188#issuecomment-1845011209:566,log,logic,566,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845011209,1,['log'],['logic']
Testability,"> Probably this is just a style preference, but given that we might want to implement similar approaches for other tests, wouldn't it be cleaner to specify the dependency on the xml target from the `ROOT_ADD_TEST` call? imho it looks more sustainable with the perspective of wanting to disable tests that need specific targets of the build system. Not in this case, there is no C++ dependency that can be expressed in CMake. The test doesn't link against the XML library, but it uses an executable via `gSystem` that is only available when building ROOT with `xml=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675#issuecomment-2411277606:115,test,tests,115,https://root.cern,https://github.com/root-project/root/pull/16675#issuecomment-2411277606,3,['test'],"['test', 'tests']"
Testability,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634#issuecomment-1300054951:22,benchmark,benchmarks,22,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951,1,['benchmark'],['benchmarks']
Testability,"> Put the bare/exact original example rather than using gtest. My current iteration is the following; ```; // CMakeLists.txt; [...]; ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO); ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx; #include ""TDirectoryFile.h"". int main(); {; TDirectoryFile f{""f"", ""f""};; }; ```. Which still doesn't trigger the segfault when run as; ```; ctest -VV -R test-tdirectoryfile; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13692#issuecomment-1729888167:228,test,test-tdirectoryfile,228,https://root.cern,https://github.com/root-project/root/pull/13692#issuecomment-1729888167,2,['test'],['test-tdirectoryfile']
Testability,"> RBrowserDataCleanup derives from TObject, so it must have a ClassDef. Is it so? ; To my understanding, `ClassDef` required either for I/O and/or if class used with interpreter. ; Both is not required for `RBrowserDataCleanup`. . Seems to be problem caused by dictionary generation for transient member `std::unique_ptr<RBrowserDataCleanup>`.; I can very easily solve the problem - replacing `std::unique_ptr` by plain pointer. But this will not solve problem with dictionary - any user can have similar class layout and will face problem again. Forcing the user to provide dictionary for the class which does not appear in headers? It is not very logical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1637859746:649,log,logical,649,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637859746,1,['log'],['logical']
Testability,"> ROOT does not enforce any build-time Python dependencies (except for numpy) . Does it mean that they are optional requirement?. > The unittest is merely checking that our test suite will find the packages it needs for the optional, runtime dependencies that we want to test ourselves. Humm ... but then they become non-optional requirement for developer. It also means that we can not test the case where they are not installed ... and since we are not testing this configuration one could assume that the configuration is broken (until proven otherwise) ... i.e. those package are actually required ... and if they are required why are we not checking at build time?. i.e. I am still missing something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2050662999:173,test,test,173,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2050662999,4,['test'],"['test', 'testing']"
Testability,"> Rebased version of this PR, which already got approved:; > ; > * [Mention root.cern instead of root.cern.ch #6114](https://github.com/root-project/root/pull/6114). Nice, thanks!! Maybe it's even worth to add the check in the CI tests as already done in the web: https://github.com/root-project/web/blob/d1b74175cdcbb5d43a86c8de9293439396d07fe9/.github/workflows/continuous-integration-workflow.yml#L40",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14275#issuecomment-1864499314:230,test,tests,230,https://root.cern,https://github.com/root-project/root/pull/14275#issuecomment-1864499314,1,['test'],['tests']
Testability,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413919076:162,assert,assert,162,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413919076,1,['assert'],['assert']
Testability,"> Remove test/CodeUnloading/RunAgainstClangTestSuite; > .... clang/test/Sema/address-constant.c is a very arbitrary Clang test. I don't know when it was restricted to single test but the original intent was to apply; the load/unload to all the clang test to have as ""complete"" of a coverage as; possible:. ```; commit 2334a2089ecda6998bb0fbbc3e63bf027a52ddac; Add a test that loads every clang test and unloads it; ```. This test is probably better off being move to clang-repl.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2302848580:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2302848580,8,['test'],['test']
Testability,"> Requires that chrome is installed on all test machines. I don't want to *require* Chrome for ROOT, so the test (and ROOT) must survive also without. Would that be possible? Or is it already the case and I just misread your statement?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4855#issuecomment-578157459:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/4855#issuecomment-578157459,2,['test'],['test']
Testability,"> Runaway comment: I'm not sure whether it's the case here, but I remember seeing some usages of `R__ASSERT` in RNTuple that should have just been `assert`s (because they check for implementation bugs, not for well-formed inputs or similar).; > ; > Might have been addressed already. If so, sorry for the noise. Thanks for mentioning, @eguiraud! That's #10618 and can be addressed separately :wink:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13487#issuecomment-1683995383:148,assert,assert,148,https://root.cern,https://github.com/root-project/root/pull/13487#issuecomment-1683995383,1,['assert'],['assert']
Testability,"> See also https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case. It is unclear to me what is the weight of the behaviour described in the comment and in the commit message w.r.t. the logic of what we need to do at atexit time. From my understanding, the current behaviour (before this PR) is:; 1. Run TROOT::EndOfProcessCleanups; 2. Python gc destroys variables, thus triggering any destructors of the corresponding C++ objects; 3. Run *again* TROOT::EndOfProcessCleanups. This logic seems faulty to me. I ran the reproducer of the [original issue](https://sft.its.cern.ch/jira/browse/ROOT-10295) linked in the commit you linked and it runs smoothly after the changes of this PR. Copying here the reproducer for reference:; ```python; import ROOT. def create():; f = ROOT.TFile(""file.root"", ""RECREATE""); t = ROOT.TTree(""tree"", """"); return f, t; f, t = create(); ```. Admittedly, I have only tried with Python 3.10, I will see if I can also try with other Python 3 minor versions. But irrespective of this, I don't think `TROOT::EndOfProcessCleanups` should be called twice. I believe that if there is indeed a behaviour that requires some *Python atexit* handler, that should be written in another function, separate from EndOfProcessCleanups, and called accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155514143:262,log,logic,262,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155514143,2,['log'],['logic']
Testability,"> See command and If you could also add a test for this features (eg. a TTreeReader usage) that would be great. I realized there was already a test for using TTreeReader with the truncated datatypes, however it was not properly working and thereby unable to detect the problem since it stored the Float16_t / Double32_t data as regular Float_t / Double_t. The reason is that the used TTree::Branch method is unable to automatically detect the Float16_t / Double32_t datatype since like Float_t / Double_t they are typedefs of float / double which results in typeid(Float_t) = typeid(Float16_t) = typeid(float), same for the double types. For these reasons, the truncated datatypes always need to be specified via the leaflist. I changed the test accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008#issuecomment-921267934:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/9008#issuecomment-921267934,3,['test'],['test']
Testability,"> See comment. Also, I guess it builds and works out of the box, right? (didn't test it myself); > ; > > Regarding the README file, I have added your suggestion about the linkdef file. Would you add something else?; > ; > As a first version, I think it's okay as-is, but let's also see what @vepadulano and @pcanal think. Hi Javier,. I have added some comments in the writeTree.cpp about the final dot in the branch name. In addition, I have added 2 sentences to the README. Thank you for your patience.; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13205#issuecomment-1680561107:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/13205#issuecomment-1680561107,1,['test'],['test']
Testability,"> Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface.; > ; > What do you think @guitargeek ?. I agree, the variable management is probably the most intricate part of the RooFit HS3 code right now, and we should see how to improve it in one of the next PRs! I can also discuss this together with @yashnator who noticed the same problems when working on the pythonizations. For for this PR, let's merge it because it includes already quite a few developments. To your support of non-uniform binning, I added:. * merging `testHS3HistFactory` and `testHistFactory`, like this we test your non-uniform binning support for free; * correct global observables definition and import; * export all the HistFactory parameters (one of the things you noticed was not done and you told me on mattermost); * some improvements of the HistFactoryJSONTool",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13078#issuecomment-1608428520:763,test,testHistFactory,763,https://root.cern,https://github.com/root-project/root/pull/13078#issuecomment-1608428520,2,['test'],"['test', 'testHistFactory']"
Testability,"> Seems that this is more on an ATLAS internal issue. @fnechans and @krasznaa, please reopen this issue or open a new one, should you see this problem again and you conclude that it can be fixed on the ROOT side!. @guitargeek No this issue is independent of ATLAS (both me and Tadej tested this completely independent of ATLAS ecosystem. Can you please reopen the issue, I don't seem to have the permission.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12182#issuecomment-2047582660:283,test,tested,283,https://root.cern,https://github.com/root-project/root/issues/12182#issuecomment-2047582660,1,['test'],['tested']
Testability,> Seems to have passed all roottests?. The PR runs **only** a **subset** of the test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2412#issuecomment-410219946:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/2412#issuecomment-410219946,1,['test'],['test']
Testability,"> Seems to work except for `gtest_tree_dataframe_test_dataframe_vary` throwing exceptions. I think we'll have to keep this disabled for now. This was a communication failure on my side; what I meant is that we have to keep the test disabled, but the revert of disabling GlobalISel is probably fine / potentially even needed now to address failures in the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11946#issuecomment-1419351071:227,test,test,227,https://root.cern,https://github.com/root-project/root/pull/11946#issuecomment-1419351071,1,['test'],['test']
Testability,"> Should I revert the std::log changes so the compiler doesn't run out of heap space?. No, please just ignore this. Let's wait for the other platforms to arrive and then if the other builds are green, merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-824889681:27,log,log,27,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-824889681,1,['log'],['log']
Testability,"> Should be fixed. Isn't the test still running for the stdlib implementation? I don't see any `#ifdef` in it anymore?. OK for testing the test, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3432#issuecomment-463940853:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/3432#issuecomment-463940853,3,['test'],"['test', 'testing']"
Testability,"> Should the limit be lowered to `EnableExplicitMT()` (i.e. when called with the default argument)? If 32bit and > 8 cores, cap it at 8 threads? Else we run the risk of exhausting the address space again soon enough with some other test, or on some user's analysis... What do you think? Or is this the user's responsibility?. I have the strong opinion that it's the user's responsibility. Mainly because the limit of 8 threads is not necessarily a sane default, it depends on the program you execute concurrently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842#issuecomment-730185356:232,test,test,232,https://root.cern,https://github.com/root-project/root/pull/6842#issuecomment-730185356,1,['test'],['test']
Testability,"> Should this be reverted once https://github.com/root-project/root/issues/9137 is fixed?. Not really, what we expect is an error in that scenario, and the test that makes sure we error out in that scenario should be put in TTree/TChain, not RDF. RDF should not test scenarios that TTree/TChain does (or should) not support.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025#issuecomment-1382240153:156,test,test,156,https://root.cern,https://github.com/root-project/root/pull/12025#issuecomment-1382240153,2,['test'],['test']
Testability,> Should we add maybe also a tutorial similar to the degenerate coefficient test ?. I will convert the test into one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401#issuecomment-698161939:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/6401#issuecomment-698161939,2,['test'],['test']
Testability,"> Should we also propagate the value of TBranch::GetMakeClass from input branch to output branch?. That is a separate problem that indeed deserves testing (i.e. the memory layout is different, so yes the 2 branches needs to have the same mode and also it will introduce its own set of challenges/possible failures).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6094#issuecomment-665711574:147,test,testing,147,https://root.cern,https://github.com/root-project/root/pull/6094#issuecomment-665711574,1,['test'],['testing']
Testability,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787#issuecomment-1745141219:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1745141219,1,['test'],['tests']
Testability,"> Since for these tests an interpreted and a no interpreted version exists, flag as longtest only the non interpreted version. Since the compiled version is (presummably) faster than the interpreted version, should we do the reverse or do you think that testing the interpreted interface is also essential?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3426#issuecomment-463258018:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/3426#issuecomment-463258018,2,['test'],"['testing', 'tests']"
Testability,"> So I would go for folder `core/testsupport`, both library and namespace `ROOT::TestSupport`, and the header file moves from `ROOTUnitTestSupport.h` to `inc/ROOT/TestSupport.hxx`. This is *exactly* what I discussed with Axel in the mean time. Excellent that you think along the same lines. Working on it ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528#issuecomment-1009852840:33,test,testsupport,33,https://root.cern,https://github.com/root-project/root/pull/9528#issuecomment-1009852840,3,"['Test', 'test']","['TestSupport', 'testsupport']"
Testability,"> So far changing to a function and PARENT_SCOPING the gensrdict seems to work.; > . Yes, that's fine assuming the fixme I proposed. > I added the `IF(TARGET ...)` parts in the last push, this would let me do what I want without adding any additional option to the function. I am not sure about that not affecting existing uses of REFLEX_GENERATE_DICTIONARY. Good. I like this approach better. > ; > > Can't we make this call to target_sources(edm4hep PRIVATE edm4hep.cxx) internal to REFLEX_GENERATE_DICTIONARY, this way you won't need an extra switch and things are a little more consistent and controlled by the routine supposed to handle dictionary generation?; > ; > That `target_sources` call is not what made we want a new switch, though; > ; > I don't I understand which code should be re-used where from the link to ROOT_GENERATE_DICTIONARY. This is a major refactoring which I think we should do in the future. Genreflex (wrapped in cmake by REFLEX_GENERATE_DICTIONARY) and rootcling/rootcing (wrapped by ROOT_GENERATE_DICTIONARY) essentially are the same binary which takes different set of arguments. From build system perspective, we should not have two isolated routines doing dictionary generation. ROOT_GENERATE_DICTIONARY is better tested because it is the default way to generate the ROOT dictionaries. I can imagine that REFLEX_GENERATE_DICTIONARY is a tiny wrapper over ROOT_GENERATE_DICTIONARY or other helper function which just makes the genreflex specific build system requirements and translates them to the underlying rootcling...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-588207137:1249,test,tested,1249,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-588207137,1,['test'],['tested']
Testability,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3?. I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694#issuecomment-1739130259:44,test,tests,44,https://root.cern,https://github.com/root-project/root/issues/13694#issuecomment-1739130259,1,['test'],['tests']
Testability,"> So the master has no issue with libunwind but 6.28 has? I don’t think there have been changes in this area but can you bisect which commit “fixes” this issue?. Sorry, that's not the meaning I intended to convey! The `libunwind` problem is still present; it just didn't prevent a(n otherwise) successful build ([log attached](https://github.com/root-project/root/files/10546827/build-root-v6_29_00f2-c14-debug-x86_64.log)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1410364334:313,log,log,313,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1410364334,2,['log'],['log']
Testability,"> So this is actually a more general question: should we duplicate the cppyy tests as ROOT unit tests?. IMHO we should inherit cppyy's testing suite, upstreaming all ROOT's Python unit tests (that do not use specifically ROOT classes).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16133#issuecomment-2262230374:77,test,tests,77,https://root.cern,https://github.com/root-project/root/pull/16133#issuecomment-2262230374,4,['test'],"['testing', 'tests']"
Testability,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176#issuecomment-2271543583:576,log,log,576,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583,1,['log'],['log']
Testability,"> So, should we just add this logic directly into the top `CMakeLists.txt` file?. You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the; > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891#issuecomment-325343587:30,log,logic,30,https://root.cern,https://github.com/root-project/root/pull/891#issuecomment-325343587,1,['log'],['logic']
Testability,"> Some further debugging (but really just dumping notes from some experiments):; > ; > * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; > ; > ; > ```; > root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Even simpler, just trying to create an object of that template instantiation fails:; > ; > ; > ```; > root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`. I've been stumbling upon these before: this is not simple as it has some template parameter pack expansion as part of the class inheritance chain...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1419265262:486,Assert,Assertion,486,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419265262,2,['Assert'],['Assertion']
Testability,"> Sorry I meant grad2d . You do not need a README.md ... just two file TFeynman.cxx and TFeynman.h . Ah ok, I will move the folder and remove the README and the test.C files. An example is provided at the top of TFeynman.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-817817588:161,test,test,161,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-817817588,1,['test'],['test']
Testability,"> Sorry, now I understand your question, my bad. No, you cannot just use `R` if the printed attribute is meant to be valid C++ code - and that was (in the old days) one of the implicit goals. IIUC we need `ATTRDUMP` to escape the printed attribute. Sorry I didn't notice your reply and pushed another commit. So do you mean that we can't upstream the patch without breaking or changing nowadays tests in LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168787536:395,test,tests,395,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168787536,1,['test'],['tests']
Testability,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7057#issuecomment-762157521:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/7057#issuecomment-762157521,2,['test'],"['test', 'testTBBGlobalControl']"
Testability,"> Sure, and actually I am interested in having such kind of unit tests also in some custom pdfs I coded up and plan to push to Root if I have some free time.; > I first have to get the root master compiled on my MacBook to run the unit tests or are those tests something which runs in the CI? Or are those tests something which runs as macros?. The first two, actually. If you register the unit test in `roofit/roofit/test/CMakeLists.txt`, it will run with the CI. You can get a lot of inspiration from the existing tests on how to do that!; I also recommend to run them on your macbook by compiling yourself, as the turnaround time is *much* faster.; Run them either by compiling and directly starting the exectuables under `<buildDirectory>/roofit/roofit/tests/<executable>` or `ctest -R testName -V`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9539#issuecomment-1010925815:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/9539#issuecomment-1010925815,9,['test'],"['test', 'testName', 'tests']"
Testability,"> Suspicious, that all but linux jobs failed. I have tested locally on my linux machine a month ago, and it worked. To solve it, go to your fork on GitHub, master branch, click on Sync Fork. Then go to your terminal, git pull your master branch. Then checkout your branch add_point.; Call git rebase --interactive master. Finally, call git push -f add_point to end the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15232#issuecomment-2127023131:53,test,tested,53,https://root.cern,https://github.com/root-project/root/pull/15232#issuecomment-2127023131,1,['test'],['tested']
Testability,> TClassEdit was selected as class which does not have any effect. . humm ... so I don't understand why the test works without this PR but fail with this PR ... I am confused ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1042#issuecomment-331523717:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/1042#issuecomment-331523717,1,['test'],['test']
Testability,"> Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. My point is: why would we want to go back? AFAICT we already released ROOT with the requirement for 3.9. Did anybody complain?. > `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. For me, this isn't an argument for changing the error message for *the current version* and make it worse. > After LLVM upgrade we could completely skip usage of `json_fwd.h`. I still don't understand this. All discussions we had so far ended with agreeing that the LLVM upgrade will change nothing wrt the JSON library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230208129:145,test,testing,145,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230208129,1,['test'],['testing']
Testability,"> Test can't be ""tiny"". O really - there's no `TClassEdit` use that would reproduce a broken type name split? Yikes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6252#issuecomment-680949078:2,Test,Test,2,https://root.cern,https://github.com/root-project/root/pull/6252#issuecomment-680949078,1,['Test'],['Test']
Testability,"> Test tutorial-v7-ntuple-ntpl005_introspection failure; > ` what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user`. In any case, it is a bug that we don't fall back to blocking IO, but this can occur if user limits for locked memory are too low. What is the output of `ulimit -l`? On machines I have tested, the default user limit has to be adjusted (e.g. 16MB). Just out of curiosity, which kernel are you running?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823331170:2,Test,Test,2,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823331170,2,"['Test', 'test']","['Test', 'tested']"
Testability,> Tests are in roottest. Not the reproducer which gives the semantic reason why we skip deleted functions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6173#issuecomment-673461722:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/6173#issuecomment-673461722,1,['Test'],['Tests']
Testability,> Tests are then fixed in root-project/roottest#183. Wouldn't it be better to (also) have a backward compatibility layer (i.e. using statement for the old names)? In particular this would give currently user of the experimental interface a little time to update their scripts?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2055#issuecomment-391038331:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/2055#issuecomment-391038331,1,['Test'],['Tests']
Testability,> Tests don't test this part of code anyways. should they?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7247#issuecomment-781288458:2,Test,Tests,2,https://root.cern,https://github.com/root-project/root/pull/7247#issuecomment-781288458,2,"['Test', 'test']","['Tests', 'test']"
Testability,"> Thank you for adding the TThreadExecutor and the test; > I had only a small comment for the test program, otherwise we are ready to merge this PR; > ; > Thank you for the contribution. Hi, are you still in charge of this thing? Or anyone can help look at this thing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-427597378:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-427597378,2,['test'],['test']
Testability,"> Thank you for the PR. @stephanlachnit Is it completed and ready to be reviewed ?; > ; > The numbers in the doc, they are probably some and tags used in some past documentation of the Math libraries. I think they can be removed now since they are not used. . Ok thanks. I'll remove the numbers and rebase. Else the code is ready to be reviewed, I tested the changes locally and added unit tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8496#issuecomment-872537838:348,test,tested,348,https://root.cern,https://github.com/root-project/root/pull/8496#issuecomment-872537838,2,['test'],"['tested', 'tests']"
Testability,"> Thank you for the addition @ferdymercury ! I believe this is better than `std::tuple_cat` as it doesn't need the input arguments to be `tuples` and it already returns the formatted string. Can I ask you to provide a couple of tests for the new feature?. Thanks! I just wrote a couple of tests, but I am not very familiar with the GTest infrastructure, I usually use CTest. So I will need some guidance from you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13299#issuecomment-1723612261:228,test,tests,228,https://root.cern,https://github.com/root-project/root/pull/13299#issuecomment-1723612261,2,['test'],['tests']
Testability,"> Thank you for this improvement. It would be nice to have a test of broadcasting , for example using operator Add ?. I added some tests in this commit https://github.com/root-project/root/pull/11415/commits/3ddd5c51ebe5cef2a3b73220cb6e56539726e6bd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11415#issuecomment-1277262515:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/11415#issuecomment-1277262515,2,['test'],"['test', 'tests']"
Testability,"> Thank you for your fast reply. Streaming stl container in ROOT of standard types is easly done as doing for native ROOT objects.; > But I understand you have this preference, and since you are the class author we accept this. I will try to figure out how the streaming of STL containers is done, then I don't feel bad about using them, since they also have some advantages. > For SetNErrorDimensions I understand the use case to reduce the dimensionality before storing, but then it would not be better to have the capability to delete a full error dimension with a dedicated function ?. I also think that might be an even better solution. I will look into it. > I think before merging this PR it would be nice to have also two additional things:; > ; > * one tutorial showing the usage of the class; > ; > * a test program testing the basic functionality. This could be written for example in gtest and included in the hist/hist/test directory where we have other tests of new histogram classes. I will also look into this. I will probaly need some time to implement and test all the requested changes, especially since I have also some work to do for my PhD, but I see no severe problems at the moment. Thanks and all the best,; Simon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-558630837:813,test,test,813,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-558630837,5,['test'],"['test', 'testing', 'tests']"
Testability,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1719042201:746,test,tests,746,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201,2,"['Assert', 'test']","['Assertion', 'tests']"
Testability,"> Thank you so much for helping out, @langenbruch!; > ; > I have a few change requests. Also, is it possible to implement a unit test here? https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testTestStatistics.cxx. Thanks for the review @guitargeek , I implemented the requests. Please see attached the adapted tutorial rf611_weightedfits.C to demonstrate the extended functionality, which could also replace the existing one. I would prefer to not write any additional unit tests.; [rf611_weightedfits.tar.gz](https://github.com/root-project/root/files/14323844/rf611_weightedfits.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14751#issuecomment-1951345864:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/14751#issuecomment-1951345864,4,['test'],"['test', 'testTestStatistics', 'tests']"
Testability,"> Thanks - I bet there are many other missing and outdated particle properties. Do you have a suggestion how to fix ""everything""?. Hi @Axel-Naumann , One can parse the file https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt to update masses of some particles in a more automated way, but it does not cover other particle properties nor all particle masses (e.g. Xi_cc++ is missing). The page https://pdg.lbl.gov/2023/html/computer_read.html also mentions available APIs and SQLite files for accessing the full database. This could be the best way to systematically compare the two databases and update everything. This kind of access is provided for testing only though so might require manual check of the found differences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12968#issuecomment-1592966409:651,test,testing,651,https://root.cern,https://github.com/root-project/root/pull/12968#issuecomment-1592966409,1,['test'],['testing']
Testability,"> Thanks @JRS296 ! I'm not sure we need / want this, tbh: it's a really system specific implementation and it will have to be in a library that I'd like to replace anyway. And creating a test for it will be non-trivial :-) So I'd actually prefer to still with whatever the shell provides. Makes sense?; > ; > But yes _please_ contribute! You could start with imlpementing; > ; > ```c++; > static std::unique_ptr<TFile> OpenU(const char *name, Option_t *option = """",; > const char *ftitle = """", Int_t compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault,; > Int_t netopt = 0);; > ```; > ; > internally calling `TFile::Open` but returning a `unique_ptr`. The name is subject to discussion but we want this interface in any case. This would allow you to exercise the contribution procedure! I'd recommend a Linux docker container for improved build speed. Can I get a bit more context on what exactly this is implemented for? And where this interface is to be built out, as well as the functionality it serves. Thanks once again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13958#issuecomment-1782993206:187,test,test,187,https://root.cern,https://github.com/root-project/root/issues/13958#issuecomment-1782993206,1,['test'],['test']
Testability,"> Thanks @JRS296 ! We need to decide how to proceed; the name we choose will become part of ROOT's API and we need to keep it backward compatible from there on. We will come back to you hopefully tonight (@pcanal ). @Axel-Naumann Any updates on the naming convention to be used? Also, I'd like to know if there is a possibility for me adding some unit test cases for the newly implemented interface, thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1819517680:352,test,test,352,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1819517680,1,['test'],['test']
Testability,"> Thanks a lot! LGTM! Consider squashing on merge!. Actually I would prefer leaving the first commit because it ""just"" enables an existing test (that I happened to extend in the actual fix).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7100#issuecomment-768251646:139,test,test,139,https://root.cern,https://github.com/root-project/root/pull/7100#issuecomment-768251646,1,['test'],['test']
Testability,"> Thanks for hunting down solutions for these tests! For the first one, you could maybe mention that this is because of [8deb57c](https://github.com/root-project/root/commit/8deb57c04a5ceea96533d095092fcd4f71d1df94) (as far as I could find some time ago for #12454). Updated [commit](https://github.com/root-project/root/pull/12855/commits/cc4dcce381f19f3dd77133218920d2d6048842d8) message! Thanks for reviewing! :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855#issuecomment-1554771507:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/12855#issuecomment-1554771507,1,['test'],['tests']
Testability,"> Thanks for the patch, Advait!; > ; > My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta.; > ; > That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon.; > ; > I'll assign to @lmoneta. Ahh yes , I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8719#issuecomment-886482916:379,test,tests,379,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886482916,1,['test'],['tests']
Testability,"> Thanks for the report! What does [valgrind](https://root-forum.cern.ch/t/valgrind-and-root/28506) say?. [valgrind.log](https://github.com/root-project/root/files/7849240/valgrind.log) (edit: from `master`) - and interestingly, then it doesn't crash. Oh I hate memory corruption problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9543#issuecomment-1010275250:116,log,log,116,https://root.cern,https://github.com/root-project/root/issues/9543#issuecomment-1010275250,2,['log'],['log']
Testability,"> Thanks for the review! No, there is no unit test for this IO rule, but I tested it locally.; > ; > I don't think it's worth it to include a test for this simple IO rule, because such a test also always needs a file storing an object of the old class version, and I think it's not good to have too many binary files in the repository without strong reasons. Actually, if I may @guitargeek 🙂:; Some of the biggest grievances some users had in RF's ""dormant time"" was a non-functioning schema evolution, which prevented users from moving to a newer ROOT version. You lose these users, as they have to disconnect from ROOT's evolution. Therefore, I strongly suggest having schema evolution tests in master. These files only consume a few kB, and they will never be altered.; This becomes even more important if a specific class version was in use for a long time, because the number of workspaces in the wild will scale with the time that a class version was in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10909#issuecomment-1181856704:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/10909#issuecomment-1181856704,5,['test'],"['test', 'tested', 'tests']"
Testability,"> Thanks for the tip! Adding `-fno-rtti` to cling works, but only in the case where the function is defined inline in the header. When the function is defined in a separate TU which is linked into the host application, cling fails to find the symbol.; > ; > I've updated the test case here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Basically just moved `test::integer::to_string` into its own cpp file, which then brings the linker errors back when trying to call it from cling. That's probably the wrong place to discuss these things but is `src/object.cpp` linked to `./a.out`? What does `nm ./a.out | grep _ZTVN4test7integerE` say?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193179100:275,test,test,275,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193179100,3,['test'],"['test', 'test-case']"
Testability,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ?. I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3150#issuecomment-447861372:599,test,test,599,https://root.cern,https://github.com/root-project/root/pull/3150#issuecomment-447861372,1,['test'],['test']
Testability,"> Thanks for this improvement. You are welcome. > 1. A small unit test is added for this fix. Done. > 3. We promote the old JIRA item as a new GH issue specific to the residual issue. Ok for me, but I'd say the residual issue and the full one are more or less the same. If I call reader.SetEntry(0), then the first fix is not needed either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15929#issuecomment-2190989573:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/15929#issuecomment-2190989573,1,['test'],['test']
Testability,"> Thanks for this nice update. Would it be perhaps possible to add a test?. Not easily I think, because passing a `void` mapping function will still fail to compile, just with a nicer error message now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14694#issuecomment-1943313583:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/14694#issuecomment-1943313583,1,['test'],['test']
Testability,> Thanks for your work @vgvassilev ! Do you think it's possible to add a high level test of the code to check the original report of Alice is addressed?. The test I have is the minimal reproducer from this issue's test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14853#issuecomment-1971358469:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/14853#issuecomment-1971358469,3,['test'],['test']
Testability,"> Thanks, @bellenot!; > ; > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13004#issuecomment-1589159193:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/13004#issuecomment-1589159193,1,['test'],['test']
Testability,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?. Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13724#issuecomment-1736898626:261,benchmark,benchmarks,261,https://root.cern,https://github.com/root-project/root/pull/13724#issuecomment-1736898626,1,['benchmark'],['benchmarks']
Testability,"> That did not help. Even with the default set to ON, the CI tests are run with -Dbuiltin_gtest=Off, so they ignore the default. It seems that the test definition must be changed too. Where are the tests defined? rootspi? So for this to work in the CI testing it must be accompanied by a change in the definition of the CI tests to either call with -Dbuiltin_gtest=On (or at least not with an explicit -Dbuiltin_gtest=Off), or install the gtest-devel and gmock-devel packages in the test environment. Can someone give some pointers or help with the changes?. I think `builtin_gtest` should be added to the list of supported modules for different platforms in https://github.com/root-project/rootspi/blob/master/jenkins/root-build.cmake; (but only after this PR is merged)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10301#issuecomment-1091277933:61,test,tests,61,https://root.cern,https://github.com/root-project/root/pull/10301#issuecomment-1091277933,6,['test'],"['test', 'testing', 'tests']"
Testability,"> That looks correct diagnosis. Can we extend the lifetime of `clang::ExternalASTSource::Deserializing::~Deserializing` eg register a deserialization upon say `findScope` and then delay the odr hash checks after things were fully deserialized?. Very creative idea :sweat_smile: what we can do is create our own `Deserializing` RAII in `findScope` because `ASTReader::FinishedDeserializing` will only do ODR violation checking on the last matching call. However, this also skips a number of other actions. As a result, I end up with an assertion for a cast of `FunctionDecl` - probably because some internal state is not correctly updated. In general, this approach sounds like treating the symptoms instead of the underlying cause, no? If I look at the backtrace for https://github.com/root-project/root/issues/10291, `findScope` is not involved there... (but a `friend` decl is :thinking:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1403525168:535,assert,assertion,535,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1403525168,1,['assert'],['assertion']
Testability,"> That probably cured the symptoms not the underlying issue. If you stop with a debugger at the assert you will see the same thing being initialized twice I believe. Yeah, I did not expect this to be a proper fix. I'm not sure how to debug this though, can you give me some hint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1659934285:96,assert,assert,96,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1659934285,1,['assert'],['assert']
Testability,"> That would be commit https://github.com/root-project/root/commit/2a420c374054d51441c601d54d13a6d73fc8814e (maybe by accident), after commit https://github.com/root-project/root/commit/180be8392b9fae67a6d99cc5c35de3dde8aea71d noted that the ""test is a no-op in CMake"". No explanation, so I would also assume by accident. Conclusion: the test was never ""properly"" ported to CMake, Yikes :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2307559186:243,test,test,243,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2307559186,2,['test'],['test']
Testability,"> That would be the roottest repository, say in a new directory root/thisroot/. That's a good idea! Does the test machine have bash dash ksh zsh ... all installed or could they be added? So that several terms can be tested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11557#issuecomment-1281922502:109,test,test,109,https://root.cern,https://github.com/root-project/root/pull/11557#issuecomment-1281922502,2,['test'],"['test', 'tested']"
Testability,"> That's fair, but users who don't have either of them installed will get broken tests if they choose to run the tests. Well ... for what it is worth, I am one those users ... (and a minimal build would also be one of those users, wouldn't it be?). If the ROOT build configure successfully and build successfully, then ctest should be clean also. I.e. roottest failing because numba is not installed would, in my opinion, means that the cmake configure step of ROOT should fail if numba is not installed ... i.e. numba would become a hard dependency.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-650352555:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-650352555,2,['test'],['tests']
Testability,"> The 2nd windows build worked: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157161/console. There was apparently a problem with the build node, 267 tests failed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1277117636:177,test,tests,177,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1277117636,1,['test'],['tests']
Testability,"> The IsBatch() was logical. No it is not. IsBatch ""just"" mean that there is attached screen but the code is still dealing with pad and canvas and current canvases (for example to store them in pdf file or ROOT file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6469#issuecomment-704343689:20,log,logical,20,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704343689,1,['log'],['logical']
Testability,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache?. I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1721001471:239,assert,assertion,239,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1721001471,3,"['assert', 'test']","['assertion', 'test']"
Testability,"> The SmallClusters test, however, seems to still fail for [mac13 ARM64](https://github.com/root-project/root/actions/runs/5242483996/jobs/9465937397?pr=12990), but we'll see. Yes, this is unrelated - likely the iterators aren't actually invalidated by any implementation. I still wanted to fix it before further debugging, just in case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12990#issuecomment-1588630387:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/12990#issuecomment-1588630387,1,['test'],['test']
Testability,"> The alternative could be to have the decorator inspect the function signature and, if it does not have the second argument wrap it with something like. That's a very nice idea! Actually I already had a wrapper of the user pythonizor function (the wrapper does the filtering based on the class name), so it was easy to add the two ways of calling the pythonizor depending on its number of parameters. I also added an early check for the number of parameters of the pythonizor which happens when it is registered (I use `inspect` to get the number of positional arguments). I wrote some tests already so the only missing thing is a tutorial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128#issuecomment-964073687:587,test,tests,587,https://root.cern,https://github.com/root-project/root/pull/9128#issuecomment-964073687,1,['test'],['tests']
Testability,"> The change looks good to me, if the CI failures are understood/unrelated. Just for clarification, is there a way to test this specifically? Or it is easily visible but we don't have a Python 3.8 runner in the CI?. Hi, @hahnjo was able to reproduce this on python3.8. It should be more visible if we had a python3.8 runner, but this does not error out on newer python versions. The stack trace points to TCling not handling `void init_tuple_string_unsigned_long_(tuple<string,unsigned long>*& self, const unsigned long& _1 = 0, const string& _0 = string{}` which is an incorrectly constructed aggregate initialization constructor. I would prefer if this could be tested before merging if @hahnjo can apply this commit on his platform and confirm that `roottest-python-basic-datatype` and `roottest-python-cpp-cpp11` start to pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16548#issuecomment-2381246738:118,test,test,118,https://root.cern,https://github.com/root-project/root/pull/16548#issuecomment-2381246738,2,['test'],"['test', 'tested']"
Testability,"> The commit fixes a bug but it looks like we have no test for this case. This being TTree, I would warmly suggest a test is added for this case. Well ... that was of course useful ... as thinking about it more made it clear that there more similar cases. See https://github.com/root-project/roottest/pull/487",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-612209494:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-612209494,2,['test'],['test']
Testability,> The crash depends on the input file. I landed with one file and here is the log file which came from running valgrind. . Does the crash with valgrind have the same symptoms as the original problem (i.e. seg fault in `TStreamerInfoActions::VectorLooper::ReadCollectionBool`)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1466612723:78,log,log,78,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1466612723,1,['log'],['log']
Testability,"> The current logic in RDisplay relies on cling::printValue for printing the column elements,. We should short-circuit this for the numerical types. Furthermore, in principle, `Display(""numerical_column"")` should be doable without JITing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14511#issuecomment-1922102651:14,log,logic,14,https://root.cern,https://github.com/root-project/root/issues/14511#issuecomment-1922102651,1,['log'],['logic']
Testability,"> The error is ""real"":; > ; > ```; > Warning in <THnSparse::CreateHnAny>: Unknown Type of Histogram; > Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments.; > const int dim ( s->GetNdimensions() );; > ^; > ```; > ; > Could you have a look at `root -l -b test/stressHistogram.cxx`, please? That seems to fail after your change. It seems that THnSparse is not defined for Long64_t, only for Long_t. I'll create the L64_t version of it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-875602523:328,test,test,328,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-875602523,1,['test'],['test']
Testability,"> The error is concerning because it is in a test directly involving address calculation. The changes seems all very reasonable so it might actually be pre-existing (but have an 'arbitrary undefined' behavior). I'll take a look. OK, thanks @pcanal !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8013#issuecomment-828544291:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/8013#issuecomment-828544291,1,['test'],['test']
Testability,"> The fact that you use R__DEBUG_HERE signals to RLogger that it should only emit this if the verbosity is >= debug. @Axel-Naumann yes but to figure out whether verbosity (for the group) is >= debug, a ""raw"" `R__DEBUG_HERE` will take some locks and go through quite some logic won't it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-734245275:271,log,logic,271,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-734245275,1,['log'],['logic']
Testability,"> The failing test seems to trigger some llvm bug:; > ; > ```; > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; > ==22765== Memcheck, a memory error detector; > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; > ==22765== ; > ; > Processing assertSparseSelection.C...; > ==22765== Conditional ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250619567:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250619567,2,"['assert', 'test']","['assertSparseSelection', 'test']"
Testability,> The failure is [execCheckClusterRange](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/195807/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_execCheckClusterRange/) is surprising. Shall we do a binary diff to investigate?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1949904856:121,test,testReport,121,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1949904856,1,['test'],['testReport']
Testability,"> The feature was _meant_ to work, but was later dropped (unintentionally?) from llvm. For now, #8044 will do for us, until @hahnjo will re-introduce this feature upstream. Already works upstream: The generated header files are marked as out-of-date whenever I switch branches, but the logic prevents updating / touching the files when not including the VCS revision, so `ninja` notices that it doesn't actually need to rebuild anything:; ```; $ ninja -j1; [1/109] Generating VCSRevision.h; [2/33] Generating VCSVersion.inc; ```. I think the reason this doesn't work in ROOT is that we don't have https://github.com/llvm/llvm-project/commit/fb5fafb23cc2d8613f8be2487afe94d8594a88ce, so `interpreter/llvm/src/tools/clang/lib/Basic/VCSVersion.inc` currently still contains the information and must be touched upon every switch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8006#issuecomment-831097216:286,log,logic,286,https://root.cern,https://github.com/root-project/root/pull/8006#issuecomment-831097216,1,['log'],['logic']
Testability,"> The file has arrived on lcgpackages, with the following name and unchanged hash:; > ; > ```; > $ sha256sum xrootd-5.4.3.tar.gz; > 56a29c88232f2f384e151b148fcaaa8d8db5c5fdc4615193978c8f4f3a99663c xrootd-5.4.3.tar.gz; > ```. Thanks for the update @Axel-Naumann &mdash; missed this while traveling so just seeing it now. @bellenot Are the test failures expected? Or is this something to be concerned about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1154669571:338,test,test,338,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1154669571,1,['test'],['test']
Testability,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime?. These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700).; > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343755018:565,test,test,565,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343755018,4,['test'],['test']
Testability,"> The function here seems to well behave for the analytical integral only when `z=0,beta=0, lambda <-1 strictly` In the current master implementation some of the logics on the parameter and sigma,lambda interplay seems to be not implemented. Hi, I'm also trying to use the analytical integral and I think the problem is that currently the RMS is used as the sigma parameter, but for `z=0, beta=0, 0>lambda >-1` the RMS is infinity. In `Ipatia2`, the definition of `sigma` changes when `lambda` moves from (-oo,-1] to (-1,0). This actually could cause problems in the fit as the shape does not change smoothly. Similar behavior happens in the current version due to the definition change of `sigma` for `zeta->0` and `zeta=0`. The definition of `sigma` in the current version is inconsistent in the `evaluate()` function and `analyticalIntegral` function (though commented out). When `beta=0, zeta=0`, the analytical integral could work for `-1<lambda<0`, but the `sigma` is not the RMS. This need to be fixed either in the code, or in the documentation. I suggest to update the `analyticalIntegral` code to be consistent with `evaluate()`. So the RMS will be:; 1. `beta=0, zeta=0, lambda<-1`: non-standard student t pdf, RMS = sigma/sqrt(-2(lambda+1)); 2. `beta=0, zeta=0, 0>lambda>-1`: non-standard student t pdf, RMS is infinity; 3. `beta=0, zeta>0`: RMS = sigma; 4. other: RMS is complicated, as given in https://en.wikipedia.org/wiki/Generalised_hyperbolic_distribution. The user should use the pdf in two modes as the definition of `sigma` is different: 1) `zeta=0, lambda<0`; and 2) `zeta>0`. The analytical integral is provided for mode 1) when `beta=0`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7254#issuecomment-1169929120:162,log,logics,162,https://root.cern,https://github.com/root-project/root/issues/7254#issuecomment-1169929120,1,['log'],['logics']
Testability,"> The git log should be enhanced with the new 'procedure' for version update. That seems to be a weird place, I'd rather want to keep it at https://root.cern/for_developers/release_checklist/. > One seeming drawback is that it is now 'possible' to forget to update the version number when going through the branching and the tagging for new versions. How is that different than before, where `build/version_number` needed to be updated by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13620#issuecomment-1713700974:10,log,log,10,https://root.cern,https://github.com/root-project/root/pull/13620#issuecomment-1713700974,1,['log'],['log']
Testability,"> The idea (of having the stress test run both compiled and interpreted) was to ensure that the code worked in both environment (i.e. that the interpreter is working for the syntax used here) **and** to monitor the performance differential (arguably the later has not been followed through). Wouldn't you agree, though, that this was an issue in cint times, but not any more in cling times?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656544638:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656544638,1,['test'],['test']
Testability,> The intent of this patch is to fix the failing OSX tests with. Can you remind me why:; a) it only fails on the MacOS node?; b) it (seems to) not be reproduce-able on my own Mac?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618012121:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618012121,1,['test'],['tests']
Testability,"> The last three commits are for Cling's CUDA support. It still doesn't fully work on my machine, but the errors are the same as `master` with LLVM 9 (complains about not finding symbols from `libcudart.so` even though that has been loaded; could be related to the CUDA version?) _without_ assertions that I see tripping on `master`. Do we know which setup used to work for these tests? Maybe I'll have to install older versions of CUDA... That sounds pretty good! I remember @SimeonEhrig mentioning some issues when loading the cuda library. . PS: if the cuda test state is the same as it is in the master maybe we can go off hunting the root test failures and eventually come back to cuda after?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1093338608:290,assert,assertions,290,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1093338608,4,"['assert', 'test']","['assertions', 'test', 'tests']"
Testability,"> The motivation for this patch is that cling should not adjust itself to the PCHs of the client, pretty much the same way as clang. That seems to contradict the goal that a ROOT build should be relocatable. Let me retry to explain better:. ROOT is built on machine 1 with some flags, e.g. `-DMACOS_DEPLOYMENT_TARGET=13.1` (just making this up). Now we try to run this package on a different machine, where clang would (e.g. because of the Xcode version) set `-DMACOS_DEPLOYMENT_TARGET=13.2`. Before this used to work because the compiler config is taken from the PCH. This PR will break this case. Typical cases might be:; - not all compile time flags made it from the build of ROOT to ; - not all flags passed to rootcling when building the PCH are replicated by the Driver. You should be able to try by building ROOT with `CXXFLAGS=-Dfoo` and then running the resulting ROOT binary without. This works in master and should fail in your PR. This has been a real issue, seen with macOS and experiments, which triggered me to take the PCH compiler config as the source of truth, and not an unrelated config determined at runtime and potentially clashing with what we had when building the PCH. I believe several experiments currently still use ROOT build with a PCH due to issues with modules. As a way forward I propose:; - try the `CXXFLAGS` test I mention above; - check with your preferred experiment currently using PCH in production, to assert relocatability e.g. onto grid nodes. Either way I'd strongly recommend we merge this only after branching v6-28-00-patches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11922#issuecomment-1357340575:1344,test,test,1344,https://root.cern,https://github.com/root-project/root/pull/11922#issuecomment-1357340575,2,"['assert', 'test']","['assert', 'test']"
Testability,> The new scheme indeed seems like a reasonable solution. Thanks Philippe! I've uploaded a few tests. I'd like to have also @eguiraud 's opinion,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660#issuecomment-883374728:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/8660#issuecomment-883374728,1,['test'],['tests']
Testability,> The only thing is that stressGraphics has been changed.; > Does it run properly after this change ?. Yes it still works. All changes in stressGraphics and stressHistograms; were about mixing in logical operators bool and int types.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3887#issuecomment-498215670:196,log,logical,196,https://root.cern,https://github.com/root-project/root/pull/3887#issuecomment-498215670,1,['log'],['logical']
Testability,"> The point is, I don't think this logic is needed at all. ~RooAbsArg takes care of properly breaking all the client-server links, both uplinks and downlinks, for every object. I couldn't find a logical case where a crash would occur if the safeDeleteList logic were to be removed.; > ; > All RooFit tests pass after this patch. No problem for my heavy workspace manipulation worflows either. By now, I think that the breaking of the links came after this destructor magic. You might be right that this is not needed, any more. I suggest to put it in master and see if the address sanitizer build blows up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685#issuecomment-1021007687:35,log,logic,35,https://root.cern,https://github.com/root-project/root/pull/9685#issuecomment-1021007687,4,"['log', 'test']","['logic', 'logical', 'tests']"
Testability,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440329756:141,test,test,141,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440329756,1,['test'],['test']
Testability,"> The second one is a change in the interface of the MinimumBuilder base class. We run Minuit using > the MnMigrad class. Without this change, there is no way to change the print level in a particular; > instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder. When considering thread-safety, one of the conclusion is that in order to have a consistent system, const function **must** be thread-safe. So indeed all mutable ought to be either protected by a lock or made atomic. [Most of our code was written before this conclusion was reached and thus are not compliant but we ought to have new code following this correctly to avoid getting further in technical debt :) ]. Independently, it is **very** odd to have a 'Setter' to be const. What is the actual use case/code that is prevented by having this function non-const?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384991793:258,log,logical,258,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384991793,1,['log'],['logical']
Testability,"> The status bit check test seems a bit flaky as it also failed in the nightlies, albeit with a different problem (segfault, not error message). @amadio humm ... Odd ... I can't find any recent nightly showing the problem. Can you point me in the right direction? Also odd, *this* failure is a segfault and not an error message (aka I am confused by your message ;) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327879837:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327879837,1,['test'],['test']
Testability,"> The subtraction was never needed, this was a way to cast a pointer into an integer via a ptrdiff_t. I can elaborate on this, but I'm not sure this really adds value to archeological investigations that might ever come across this... This plausible albeit a bit odd (i.e. why didn't they do the straight cast in the first place? I find it more likely that there has been a change in the C++ standard (from 1994 to now :) ) that allows the straight cast to work ), I agree that it might not be helpful to dig any further. I would add the above fact/claim/opinion :) at the very least in the git log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9969#issuecomment-1061021450:595,log,log,595,https://root.cern,https://github.com/root-project/root/pull/9969#issuecomment-1061021450,1,['log'],['log']
Testability,"> The test failure on mac13 is not due to the changes of this PR. So some old svg tests (o) are failing because of a changed fill attribute:; - Original: fill=""#917f6e""; - Modified: fill=""#6f2da8"". The json tests (j) are failing because of differences in fOper. Do we need new reference files ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2326408720:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2326408720,3,['test'],"['test', 'tests']"
Testability,"> The tests that are added in this PR work with Cl, but there are still failures because of this:; > ; > * [Regression in support of functions with unknown definition vgvassilev/clad#890](https://github.com/vgvassilev/clad/issues/890); > ; > ; > It seems the numeric-diff fallback mode doesn't get that much test coverage in Clad, because many of the issues I opened there are related to it. Is it still supported? Should I try to absolutely avoid num diff fallback in the models?. This should work but we *should* avoid num diff fallback because it is slow and can introduce numerical instabilities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2107653275:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2107653275,2,['test'],"['test', 'tests']"
Testability,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090#issuecomment-832043953:422,test,test,422,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953,4,['test'],"['test', 'testProxiesAndCategories', 'testRooDataHist']"
Testability,"> The whole method could actually be folded in GetBulkEntries. Yes, I think so. There is only 2 differences between the two function and both could be handle with an if statement. I would prefer to finish/merge https://github.com/root-project/root/pull/6519 and then have a new PR (an extension of this one?) that ; * remove the check on DestructiveSerialization.; * Collapse the 2 functions into a single Impl functions; * Extend the test to cover the new known-to-work cases.; * Create a new issue on the still failing one (char); * Remove/Deprecate the GetDeserializeType functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6558#issuecomment-703954227:435,test,test,435,https://root.cern,https://github.com/root-project/root/pull/6558#issuecomment-703954227,1,['test'],['test']
Testability,"> There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling `TInterpreter::Declare` in this respect. This is likely related to the issues described by @jalopezg-git in [#12449 (comment)](https://github.com/root-project/root/pull/12449#issuecomment-1467860880) and can be fixed in a future PR. FYI, https://github.com/root-project/root/pull/13565 should fix the issues with unloading that I mentioned before in this PR! I still need to look at two test failures, but it's mostly there :slightly_smiling_face:!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1700934823:534,test,test,534,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1700934823,1,['test'],['test']
Testability,> There are still test errors and clang-format errors to handle. All errors are not related to PR.; clang-errors I will check,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1988607058:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1988607058,1,['test'],['test']
Testability,> There is actually a test for it: [root-project/roottest#562](https://github.com/root-project/roottest/pull/562) 😄. That's excellent!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6024#issuecomment-660167751:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/6024#issuecomment-660167751,1,['test'],['test']
Testability,"> There is no ""undefined"" value for an integer variable. The test failures are because with these changes we are printing errors that were not printed before. Ah ok",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861746872:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861746872,1,['test'],['test']
Testability,"> These dataframes are constructed from a `RRootDS` with `fileGlob = ""TRootTDS_input_*.root""` - _why_ do `RCsvDS_test_headers.cs` (note the missing `v`!), `specTestDescribe3.root` and `testDescribeDataset3.root` show up to the party?! Is this maybe causing the spurious dataframe test failures on Windows? @bellenot @eguiraud @pcanal. The fix is coming (thread safe `TWinNTSystem::OpenDirectory` and `TWinNTSystem::GetDirEntry`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1681738398:280,test,test,280,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1681738398,1,['test'],['test']
Testability,"> These new functionalities would really benefit from some tests if you can, to be added in https://github.com/root-project/roottest/tree/master/python/cmdLineUtils. test added :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14419#issuecomment-2047128584:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/14419#issuecomment-2047128584,2,['test'],"['test', 'tests']"
Testability,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!. It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107#issuecomment-1825822442:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/14107#issuecomment-1825822442,1,['test'],['test']
Testability,"> This behavior is a **very significant** departure from the existing behavior (where, because the libraries were added to the link line, the library were never reloaded).; > ; > Reloading arbitrary depend library is never a good idea since they (are likely to) include static object that may do things that are **essential** to do only once (initialization, connection to db).; > ; > Technically CompileMacro could (as it does elsewhere) first check if the library is loaded.; > ; > But still several questions:; > ; > 1. Why is libTree listed twice in the list of depend library?. The libTree.6.21.01.so libTree.so are the same library -- one is linked to the other (forgot which way it was). The dependent symbol scanner currently does not work well with symlinks. This PR fixes it: https://github.com/root-project/root/pull/4717. > ; > 2. When should gSystem->Load automatically reload a library, if ever?. If we decide that it won't ever reload (which I do not see issues with) then we should reimplement the calls to `gInterpreter->Load` as it translates them to `.L libName` which reloads. Alternatively, we could check if the library changed and only reload it if it changed. > ; > ; > @Axel-Naumann @vgvassilev opinions?; > ; > PS. Even-though the set of test would be fixed by updating gSystem->Load and/or CompileMacro, the PR is still likely necessary for the case where CompileMacro generates a pcm (and thus need to support reload) or the case where the user explicitly unload a library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618361118:1264,test,test,1264,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618361118,1,['test'],['test']
Testability,"> This button was not added by me, it was meant to be use ro test the code editor before the fileDialog was created. But i can remove it if you want. Just ""hide"" this button for the moment - it will be confusing to the people. > I will look into that but i don't think m or ui have such things. Please check. If there are no alternatives - I will add tnt lib to ROOT openui5 package",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4646#issuecomment-575603020:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/4646#issuecomment-575603020,1,['test'],['test']
Testability,"> This is (of course) the intent. Reading/writing to a variable across thread where there is no synchronization going on is C++ undefined behavior. A program with undefined behavior cannot be reasoned about as the compiler/CPU are not required to behave in a manner you expect. > Nonetheless, can you try the following patch to see if it helps:. Given the failure is 1 in 10^4-10^6 range, we have no good way to reproduce and therefore a patch to test isn't really likely to be conclusive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090#issuecomment-2027521011:447,test,test,447,https://root.cern,https://github.com/root-project/root/issues/15090#issuecomment-2027521011,1,['test'],['test']
Testability,"> This is just for testing. In this case make it a draft PR. Like this, it doesn't automatically ask for reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9367#issuecomment-984709564:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/9367#issuecomment-984709564,1,['test'],['testing']
Testability,"> This is the intended behavior for this macro, i.e. it cannot work as intended if the VecGeom converter cannot be instantiated. However, I can make it issue a warning instead, and do raytracing using the unconverted shape. Are you trying to test the failure mode or should we just not run the test if the build does not support it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315#issuecomment-1431712470:242,test,test,242,https://root.cern,https://github.com/root-project/root/pull/12315#issuecomment-1431712470,2,['test'],['test']
Testability,"> This means, that they remain open but zero bytes are served,; > (I'm getting data for some files but zero bytes for other files). Do you know if the xrootd routine just ""hang"" in that case or return with request to retry later? If they just hang there is not much I can see doing to detect the case unless there is an xrootd routine that detect/support this case that we could replace the current call with. (and we would need some help to update the xrootd plugin in ROOT to support and test this).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1253892312:490,test,test,490,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1253892312,1,['test'],['test']
Testability,"> This seems to be a generic feature and I think it is worth documenting a little more. I do not see a lot of tests. I believe we should add some be it only for documentation purposes of this PR. I'd be interested to see what is the exact transformation happening and why only the definitions are hidden. As requested, I have extended the Doxygen documentation. This PR does not include tests, though (to be added in a future PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-527495903:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-527495903,2,['test'],['tests']
Testability,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:; ```; Failed Tests (23): ; Clang :: AST/ast-dump-attr.cpp ; Clang :: AST/ast-dump-attr.m ; Clang :: AST/ast-dump-c-attr.c ; Clang :: AST/ast-dump-color.cpp ; Clang :: AST/ast-dump-wasm-attr-export.c ; Clang :: AST/ast-dump-wasm-attr-import.c ; Clang :: AST/ast-print-attr.c; Clang :: AST/attr-swift_attr.m; Clang :: AST/attr-swift_bridge.m; Clang :: AST/category-attribute.m; Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp; Clang :: AST/pragma-attribute-objc-subject-match-rules.m; Clang :: AST/pragma-multiple-attributes.cpp; Clang :: Misc/pragma-attribute-cxx.cpp; Clang :: Misc/pragma-attribute-objc.m; Clang :: Misc/pragma-attribute-strict-subjects.c; Clang :: OpenMP/assumes_codegen.cpp; Clang :: OpenMP/assumes_print.cpp; Clang :: OpenMP/assumes_template_print.cpp; Clang :: Sema/ast-print.c; Clang :: Sema/attr-availability-swift.c; Clang :: SemaCXX/cxx11-attr-print.cpp; Clang :: SemaTemplate/attributes.cpp; ```. A broken example like:; ```; /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input ; // CHECK: int fun_asm() asm(""test""); ; ^ ; <stdin>:3:46: note: scanning from here ; using C = int ((*))() __attribute__((cdecl)); ; ^ ; <stdin>:4:1: note: possible intended match here ; int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); ; ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168753106:92,test,test,92,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168753106,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1217534028:17,test,tested,17,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1217534028,1,['test'],['tested']
Testability,> This shouldn't compile with the current master? Draw() doesn't need GetOptions() anymore. I took version from last Friday.; I closing this PR.; New one will follow once I test it with newest code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1647#issuecomment-366710718:173,test,test,173,https://root.cern,https://github.com/root-project/root/pull/1647#issuecomment-366710718,1,['test'],['test']
Testability,"> This test is with uncompressed data already. However, the bottleneck is not the merging process. Merging can go as fast as the output disk can write, which is the fastest we can do. What I see in profiles is a lot of time being spent creating and destroying task arenas for `TTree::Fill()`, as well as a lot of calculations of the pool size for the arenas and lots of context switches. I think we should focus on these parts first. Fair enough ; I had misunderstood where the memory mentioned in ""the total amount of used memory is still high since tasks are accumulating large chunks of data into the"" was located (and it is on the 'client/producer' side rather than the 'writer-to-disk' side). > we reuse zlib dictionaries, so the whole file is a single stream. Not that I know off. They are limited to each TBuffer/TBasket. > Nevertheless, this is dealing with data generation, so there are no pre-defined clusters. Yes and the chunking of the generation is determining the clusters size . Smaller clusters size means smaller basket which means smaller compression ratio (usually), smaller baskets also means more baskets which means more meta data (always). Smaller clusters means that the default TTreeCache size when reading the file will be smaler which means higher number of individual reads which means lower performance (especially over high latency links). Of course this is a trade-off; the gain from reducing the memory during the writing may offset the above mentioned loss but this is often challenging since the files are (usually) write once read many times. > spent creating and destroying task arenas for `TTree::Fill()`, as well as a lot of calculations of the pool size for the arenas and lots of context switches. This is a bit surprising. The TTree is supposed to be re-using as much as possible the memory chunk (both the compression buffer and the TBuffer) as much as possible. Maybe we are creating too many TTree objects and we could re-use some of them or maybe the re-u",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3385#issuecomment-461138586:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/3385#issuecomment-461138586,1,['test'],['test']
Testability,> This unfortunately (sigh) fixes the error in the test. This indicates a bug in the code (that is supposed to make support for unique_ptr 'transparent').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1640536926:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1640536926,1,['test'],['test']
Testability,> This unfortunately (sigh) fixes the error in the test. This is expected. I using such design pattern often. Seems to be problem is when creating `TClass` instance. ; There is difference in handling for `T *` and `unique_ptr<T>` transient members.; I can imagine that `TClass` tries to get full dictionary for the class when seeing member `unique_ptr<T>`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1639855962:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1639855962,1,['test'],['test']
Testability,> This will most probably not work on Windows. Why do you think so?; I test it at least from windows command line - it was starting firefox in headless mode.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2660#issuecomment-423511759:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/2660#issuecomment-423511759,1,['test'],['test']
Testability,"> Those cases could occur, but I think it is probably a misuse of the API. I have updated the test cases to include that. Let me know what you think; otherwise, as you said, we could just remove that possible per-column vector write optimization. That's a nice way to test it! Still, for reasons of maintainability I'd be more in favor of removing the per-column vector write optimization. It's quite some code that is most likely never executed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775#issuecomment-1169652245:94,test,test,94,https://root.cern,https://github.com/root-project/root/pull/10775#issuecomment-1169652245,2,['test'],['test']
Testability,> Those logs/failures are ancient. The bot is currently not triggering new runs of jenkins (and/or not showing it in the PRs). Just changed a bit the tolerance. The associated roottest PR jenkins now succeeds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2041158064:8,log,logs,8,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2041158064,1,['log'],['logs']
Testability,"> Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):; > ; > 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup.; > 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no?; > 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?. 1. Yes I'm not entirely happy with this myself. 2. Current settings require approval every time; ![2023-02-02_09-22](https://user-images.githubusercontent.com/82065181/216270131-1a4086bf-190e-4296-a14a-fa2afa5cfb11.jpg). 3. PR builds first builds the target branch, i.e. master (if changed since last upload), then uploads the build of the target branch (if changed and if release branch), **then** rebases and rebuilds and uploads artifacts to test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1413340461:787,test,tests,787,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1413340461,2,['test'],"['test', 'tests']"
Testability,"> To do so we need an additional public API:; GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:; * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does.; * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases.; * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:; * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion; * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-817863318:654,log,logical,654,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817863318,1,['log'],['logical']
Testability,> Unfortunately that's not the case. Developments in cling are quite coupled to the tests -- for example PR #5884 is blocked due to such failures. My experience is that those stress tests are actually quite useful when making changes to core of ROOT. PS: If they are slow we can think how to make them run faster.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656639961:84,test,tests,84,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656639961,2,['test'],['tests']
Testability,"> Unfortunately the reproducer is not fixed by this patch, see the following (which can become the seed for a test to be added to the PR). Thanks! What I was suggesting with this fix is to enforce that all TH1F converge towards a maximum value of 16,777,216, and describe it well in the description. Your picture looks like the TH1F does exactly that. Maybe it worked already like that without the patch, but just by chance, whereas now we are defining / enforcing that behavior. Now... another story is why TTree::Draw still uses TH1F. Maybe to open in a separate issue.; The issue https://github.com/root-project/root/issues/6671 shows that RDataFrame uses instead a correct TH1D which 'reveals' that the TTree.Draw example was reaching the TH1F overflow. Another option would not to add any explicit checks in the code and just state in the documentation that whenever you see something close to 16e6 with TH1F, distrust and use TH1D instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271#issuecomment-2045737882:110,test,test,110,https://root.cern,https://github.com/root-project/root/pull/14271#issuecomment-2045737882,1,['test'],['test']
Testability,"> Using the same file in multiple tests is never good, they might run concurrently. You are right, I changed the filename in the latest commit :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-896015112:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-896015112,1,['test'],['tests']
Testability,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1721014397:40,test,test,40,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1721014397,2,['test'],['test']
Testability,"> Very likely you still want ClassDefInline(RBrowserDataCleanup, 0) to disable IO. I guess this is what requires the default constructor?. Ah yes, I turned `0` to `1` while testing the other changes. Reverting back to `0` and keeping the rest of the diff as it is, I get again the usual error and no extra errors; ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:29:44 2023; 1548: @@ -14,5 +14,9 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; ```. So no actual improvement brought by this change it seems",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638479994:173,test,testing,173,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638479994,2,"['log', 'test']","['log', 'testing']"
Testability,"> WOW! Nice catch!. It's not black magic. Both of them failed in a PR, and then it was pretty obvious that they are the same test. :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6192#issuecomment-673995354:125,test,test,125,https://root.cern,https://github.com/root-project/root/pull/6192#issuecomment-673995354,1,['test'],['test']
Testability,"> Wait, actually there is no existing `tmva-cudnn` build option in [RootBuildOptions.cmake](https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake).... So `-Dtmva-cudnn=On ` in your reproducer is ""illegal"" as far as I can tell, hence your issue. Even if it is, why do we have two variables which have to be kept in sync to do one job? And if you look at the ROOT build options, `tmva-cudnn` very much looks like a logical extension of `tmva-cpu, tmva-gpu, tmva-pymva, ...`, so I guess it's logical that I got confused when I looked into CMake how to enable it. It seems that my mistake also tricked you. 🙂 ; And even if it was ""illegal"", why does ROOT configure correctly, and fails only when you build?. That's why I'm proposing to remove `cudnn`, and only go with `tmva-cudnn`. Let's make this an official build option, fail fast when it's not supported, and keep it off when it's not needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16715#issuecomment-2435518243:445,log,logical,445,https://root.cern,https://github.com/root-project/root/issues/16715#issuecomment-2435518243,2,['log'],['logical']
Testability,"> Was this followed up on? It's not a critical issue but the extra warnings are still annoying. I agree, and this is followed up in this PR, being tested now: https://github.com/root-project/root/pull/16550",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14132#issuecomment-2380555584:147,test,tested,147,https://root.cern,https://github.com/root-project/root/issues/14132#issuecomment-2380555584,1,['test'],['tested']
Testability,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes.; > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-766892905:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-766892905,2,['test'],"['test', 'tests']"
Testability,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1717037288:533,log,logarithmic,533,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288,1,['log'],['logarithmic']
Testability,"> We have tests for IsDataContainer in tree/dataframe/test/dataframe_utils.cxx, you could add an additional test to cover RVec<bool>. done!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5961#issuecomment-654998021:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/5961#issuecomment-654998021,3,['test'],"['test', 'tests']"
Testability,"> We just have to watch out that `${TBB_INCLUDE_DIRS}` is never `$ROOTSYS/include` else we will not see any warning from any of ROOT's headers... But IIUC this is currently external or if builtin in `ginclude/`, so all good. Thanks for the review and for the comment. So should I add a test or not?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9067#issuecomment-934112246:286,test,test,286,https://root.cern,https://github.com/root-project/root/pull/9067#issuecomment-934112246,1,['test'],['test']
Testability,"> We might want to task CMS to test this one, just to check if it fixes #13429... @hahnjo let's wait until we merge the latest ROOT update in https://github.com/cms-sw/cmsdist/pull/8650 (hopefully in a couple of hours) and I will start the testing. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1680750267:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1680750267,2,['test'],"['test', 'testing']"
Testability,"> We set fName to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. Currently file name stored as before.; If one creating file in other directory or with other name - it is already not exactly same code.; I guess, one can resolve this problem by writing proper test scripts. Idea of the PR - if exactly same code runs twice, created binary files should be identical.; To achieve this, default values for TKey/TDirectory time stamps and UUID are stored.; Because of this some ROOT features will not work for such files - one will not be able read TRef's correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524215736:318,test,test,318,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524215736,1,['test'],['test']
Testability,"> We should probably be extra explicit and provide an empty `__all__` list attribute in our `__init__.py`. This is already done in in the ROOT facade constructor. Indeed, one can move it directly to `__init__.py`, but now that you raised that point: why do you think an explicit `__all__` is better than not having this attribute at all?. > In principle, we could also raise an exception every time a user tries `from ROOT import *`. That would be nice! Do you know how to do this? Google didn't give an easy solution :(. > (beware that we have this in our own test suite, so we _will_ see errors). I don't think we have it, or do we? I only see it in this test suite where it is deactivated for Python 3:; https://github.com/root-project/roottest/blob/master/python/regression/PyROOT_regressiontests.py#L188",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14588#issuecomment-1926944206:561,test,test,561,https://root.cern,https://github.com/root-project/root/pull/14588#issuecomment-1926944206,2,['test'],['test']
Testability,"> We should probably try using ProcessLine instead of Declare. Seems like an easy test, let me try that :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894113472:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894113472,1,['test'],['test']
Testability,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-1980364814:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814,2,['test'],['test']
Testability,"> We try to keep ROOT platform independent, this isn't helping :-/ I'll merge this as a stop-gap solution, but I'd like you @ferdymercury and @pcanal to consider reverting this feature. I am not sure I have seen any discussion on motivation, and why the use of e.g. tbb isn't a more appropriate solution. Hi, the discussion is here: https://root-forum.cern.ch/t/performance-effects-in-a-root-based-data-acquisition/45519/3, I am developing a 40Gbps DAQ system where readout performance is critical to not lose data. Depending on which CPU the DAQ thread is located, the readout is fast enough to not lose any data. That's why setting CPU affinity was proposed. Without it, some readouts were not fast enough to catch up with the data rate. I do not know about TBB, thus not sure if it would be better or worse. In any case, I am not a thread expert, so if there is a better solution, I would be happy to try it instead of the current attempt with CPU affinity. Just as a side note, for my application, I do not need highly parallel tasks, I just need two threads (one for the GUI, one for the DAQ). If I do not set the affinity, Linux puts them both on the same CPU and thus the DAQ readout performance is reduced. (That being said, it's true that this feature could be expanded to Windows and MacOS, however I do not have any of these OS to test it.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8563#issuecomment-870438974:1342,test,test,1342,https://root.cern,https://github.com/root-project/root/pull/8563#issuecomment-870438974,1,['test'],['test']
Testability,"> We understand why `roottest-python-basic-basic` fails on fedora38 and, if possible, fix the problem. I believe this is not related to this PR, some of the Python tests fail from time to time on Fedora 38 and Fedora 39. I suspect there are still GC-related issues with Python 3.11 and 3.12 that were never fully understood...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1870259041:164,test,tests,164,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1870259041,1,['test'],['tests']
Testability,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too?. The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`).; I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-759590333:276,test,test,276,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-759590333,1,['test'],['test']
Testability,"> We're already adding `-fno-semantic-interposition` since commit [e564c8a](https://github.com/root-project/root/commit/e564c8a04feb2b6fa18a2f429d8fb5a103825a34) / PR #8204 which I _think_ should already set the visibility such that LLVM symbols are hidden from other libraries. Did you recently test a `master` build or 6.24/02?. Interesting. From my understanding of g++ document, this flag with accidentally solves the problem if the compiler optimize the code by in-lining it but it is not guarranted. In addition it can create confusing situations where the problem disappears as soon as you try to debug it using the debugged version of the code. That said, we are in a confusing situation, as I'm not able to reproduce the problem as soon as I recompile ROOT. Nevertheless, I recompiled many time ROOT last week, and then the problem was systematic. It could be that it is due to the ROOT code version I used. The problem is there for LCG100 which used ROOT 6.24/00, but not for `/cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.24.02/x86_64-centos7-gcc48-opt/`. So it would confirm that `-fno-semantic-interposition` has solved the problem if it has happened between the two versions. Nevertheless, as I wrote before, in my understanding, it's accidental and won't be as reliable as the -Bsymbolic option. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-885033654:296,test,test,296,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885033654,1,['test'],['test']
Testability,"> Well ... for what it is worth, I am one those users ... (and a minimal build would also be one of those users, wouldn't it be?). I agree (hence this PR), but I think I have found a solution (@Axel-Naumann). Look at this:; ```; ctest -R df026; Test project /home/shageboe/root-archNative-clang; Start 797: tutorial-dataframe-df026_AsNumpyArrays-py; 1/1 Test #797: tutorial-dataframe-df026_AsNumpyArrays-py ...***Not Run (Disabled) 0.00 sec; No tests were found!!!; ```; CMake's `DISABLED` property can be used already in 3.9, and disabled tests are listed, but don't run.; Apparently, they are even reported to cdash. I'm curious now how jenkins handles them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-651134600:245,Test,Test,245,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-651134600,4,"['Test', 'test']","['Test', 'tests']"
Testability,"> Well yes, the final commit history of this PR will show the implementation, tests, tutorials separately in different commits. All commits then can have Stephan and Julia as co-authors (or at the very least the commits that involve the implementation of the feature). Sounds good?. Sounds perfect, indeed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13210#issuecomment-1630478178:78,test,tests,78,https://root.cern,https://github.com/root-project/root/pull/13210#issuecomment-1630478178,1,['test'],['tests']
Testability,"> Well, in some cases, the GUI layout is wrong. Do you want me to take screenshots?. No but a short descriptions of the elements used and/or the kind of situation would be helpful. > Form my own purpose, I want to test on a machine with dual screens once I can access it (and I'll remove it once tested). Can you add a comment along this line next to the code? (This would prevent somebody else from (proposing to) removing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663608298:214,test,test,214,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663608298,2,['test'],"['test', 'tested']"
Testability,"> Well, wouldn't that issue a spurrious/wrong warning in the following case (i.e the normal usage):; > ; > ```; > for(Long64_t entry = 0; entry < tree->GetEntriesFast(); ++entry); > {; > tree->GetEntry(entry);; > }; > ```; > ; > [Slightly related question, did you run any of the test after successfully compiling?]. Actually I had some trouble compiling in my usual manor. But when I tried to compile upstream/master it also failed so the failure didn't seem to originate from my chnages. I wasnt sure what to do so I was hoping I could see what phsft-bot has to say before I do anything. This is how I build: (Ubuntu 20.04 LTS). ```; mkdir rootbuild rootinstall ; cd rootbuild; cmake -DCMAKE_INSTALL_PREFIX=../rootinstall/ ../root/; cmake --build . -- -j4; cd bin; source thisroot.sh; root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861658671:280,test,test,280,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861658671,1,['test'],['test']
Testability,"> Well, wouldn't that issue a spurrious/wrong warning in the following case (i.e the normal usage):; > ; > ```; > for(Long64_t entry = 0; entry < tree->GetEntriesFast(); ++entry); > {; > tree->GetEntry(entry);; > }; > ```; > ; > [Slightly related question, did you run any of the test after successfully compiling?]. But here the user would be providing a value for `entry` that is 0. The warning would only trigger if entry is not provided at all, i.e. `!entry` is true.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861660138:280,test,test,280,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861660138,1,['test'],['test']
Testability,> What about the file `hsimpleF.root` ? (`roottest_root_io_filemerger_simplef_default_compr_level9](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/199042/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simplef_default_compr_level9/)`. Find below. [new.log](https://github.com/root-project/root/files/14693213/new.log); [old.log](https://github.com/root-project/root/files/14693214/old.log),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15021#issuecomment-2011793603:180,test,testReport,180,https://root.cern,https://github.com/root-project/root/pull/15021#issuecomment-2011793603,5,"['log', 'test']","['log', 'testReport']"
Testability,"> What about the loop in getLogProbabilities()?. It used to work. Either your compiler is too anxious about it or this commit d72f241f792 broke it or you don't have VDT activated such that the `std::log` is used. If this is moved over to the mini library, it's not so critical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7032#issuecomment-773942657:199,log,log,199,https://root.cern,https://github.com/root-project/root/issues/7032#issuecomment-773942657,1,['log'],['log']
Testability,"> What do you think?. I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13794#issuecomment-1747210950:203,log,logic,203,https://root.cern,https://github.com/root-project/root/pull/13794#issuecomment-1747210950,1,['log'],['logic']
Testability,"> What does the build error message say? I can't read it. ```; 12:53:51 MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; 12:53:51 Creating library C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.lib and object C:/build/workspace/root-pullrequests-build/build/core/base/test/Release/CoreBaseTests.exp; 12:53:51 C:\build\workspace\root-pullrequests-build\build\core\base\test\Release\CoreBaseTests.exe : fatal error LNK1169: one or more multiply defined symbols found [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-779835777:317,test,test,317,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-779835777,5,['test'],['test']
Testability,"> What is root-io-pcm? Do you mean rdict.pcm?. Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435211605:184,test,test,184,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435211605,1,['test'],['test']
Testability,"> What is stopping us from adding them and close this item for good?. That the CI will probably become red, because it would enable the GNN tests that were never run on the CI before. But we can work around this by also always disabling the tests:; https://github.com/root-project/root/pull/15512. Once that PR is merged, we can close this issue, and I'll open a new one to remind the TMVA guys to re-enable the GNN tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14553#issuecomment-2111247254:140,test,tests,140,https://root.cern,https://github.com/root-project/root/issues/14553#issuecomment-2111247254,3,['test'],['tests']
Testability,"> What is this error in readTotemNtuple? eyes. It's always been there, the file contains classes that are not known to ROOT and opening it triggers complaints from TClass. The test in roottest always expected them, but during the first execution https://github.com/root-project/roottest/pull/995 . In the sibling PR I am removing the warning from the `.ref` file because since for this PR I use `RIgnoreErrorLevelRAII` there shouldn't be any output to stderr. And in fact on my workstation the test passes correctly, but somehow jenkins doesn't agree with me... Btw, note that this kind of warning is very common, it's enough to have some dataset with classes coming from an external library (e.g. CMSSW) that is not loaded during the execution of the RDF program",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1658748624:176,test,test,176,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1658748624,2,['test'],['test']
Testability,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex.; > ; > Thoughts?. I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:; https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:; https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13771#issuecomment-2121660162:516,test,tested,516,https://root.cern,https://github.com/root-project/root/pull/13771#issuecomment-2121660162,2,['test'],"['test', 'tested']"
Testability,"> What would your advice be on how to best check and test this?. I do not have good solution for you.; As I mention - even when default palette is used in ROOT, there is no guarantee that default palette is exactly the same as default palette in JSROOT. . Probably, one could create special C++ class, which represent all palette colors in more compact way - list of TColor objects has a lot of unused information. > I was going to do this in the ConvertToJSONGraphics method, which would replace the respective python methods. My argument - TBufferJSON is not a proper place for such function. You should put it in separate sources, related to iPython graphics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760#issuecomment-316024788:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/760#issuecomment-316024788,1,['test'],['test']
Testability,"> What’s the state of cling’s test suite?. I can answer: failing since [Thu Feb 25 2022](https://lcgapp-services.cern.ch/root-jenkins/view/cling/job/cling-generic-build/3113/), i.e. *almost* a year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12218#issuecomment-1415945499:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/12218#issuecomment-1415945499,1,['test'],['test']
Testability,"> Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. Sorry, I meant that I could not find the test definition in the source. Maybe I'm not looking in the right place. Also, the test in question is quoted two times in the log, once successful and one unsuccessful. In any case, I do know something is going on and wanted to have a look, but because of the above, I'm not sure where and how. > Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake. Does the test pass locally?. Alright, I will have a look. > I wanted to have a look at where the crash happens, but all commits are now squashed into one. Do you have a version where the commits are separated as the first time when you put up the PR? (...); > ROOT's clang-format file will therefore introduce a lot of indentation changes, which makes the diffs hard to read. Unfortunately, not. I rebased and force-pushed. But for what it's worth, I think the function in question is rewritten to such an extent that old history before clang-format will not help much. But you can easily use a text editor to switch back to the original indentation. Bear in mind that the original code did not use a consistent indentation - some lines used spaces, others tabs, and the size was different in all places. On top of that, lots of the code was improperly spaced where statements belonging to loops or if's were indented shorter than the scope. In any case, I will try next week to see what's going on ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968158801:36,log,logs,36,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968158801,8,"['log', 'test']","['log', 'login', 'logs', 'test', 'tests']"
Testability,"> Why do these builds say that your branch is gone? Should we just restart the Jenkins builds?. I don't know, it's about `roottest` as far as I could tell from the logs. We might restart - or have there been recent changes to the Jenkins scripts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12724#issuecomment-1525971267:164,log,logs,164,https://root.cern,https://github.com/root-project/root/pull/12724#issuecomment-1525971267,1,['log'],['logs']
Testability,"> Why the change in roofitcore and bindings?; > ; > Also go to ""Files changed"" tab and revise the comments on testTMath.cxx, they are marked as resolved by mistake.; > ; > Thanks a lot!. Thank you for commenting. I am not sure what happened, but I think that the changes occured accidentally when merging from updated master branch. Those changes have been removed and I accepted the changes to the to testTMath.cxx. I noticed that there is one suggestion on TMath.h (https://github.com/root-project/root/pull/15100/files#r1563955528) and I am not whether it has been implemented to the code. I am having an issue trying to resolve this suggestion. For some reason it does not disappear from the files changed tab, and after trying to accept suggestion multiple times, it get added to the code multiple times. So I ended up with something like this. ```C++; template <typename T>; T *TMath::Gradient(Long64_t n, T *f, double h); {; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; if (!f) {; ::Error(""TMath::Gradient"", ""Input parameter f is empty."");; return nullptr;; } else if (n < 2) {; ::Error(""TMath::Gradient"", ""Input parameter n=%lld is smaller than 2."", n);; return nullptr;; }; Long64_t i = 1;; ```. I removed the redundant if statements and the suggestion still shows up in the files changed tab. I am not sure what to do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15100#issuecomment-2104598022:110,test,testTMath,110,https://root.cern,https://github.com/root-project/root/pull/15100#issuecomment-2104598022,2,['test'],['testTMath']
Testability,"> Why we cannot have the test directory use the common ROOT configuration?. Good question, I don't understand why it is like that. I think it grew a bit chaotically, actually the `test` in included in the main CMakeLists via `ROOT_ADD_TEST_SUBDIRECTORY`:; https://github.com/root-project/root/blob/master/CMakeLists.txt#L443. So I was wrong, apparently it is included in the main configuration, but then is tries to find the ROOT package itself, which doesn't make sense as Sergey notes:; https://github.com/root-project/root/blob/master/test/CMakeLists.txt#L16. What happens if you do that, especially when you already have ROOT on your system? Maybe the situation can be improved by not doing `find_package(ROOT)`. But since the tests are not relevant to users, it's not so important to improve this. Anyway, since you don't have a strong opinion, I'll go ahead and merge this. Thanks! It's just so much easier for RooFit development if all the C++ code is in the `roofit` directory :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15490#issuecomment-2113616304:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/15490#issuecomment-2113616304,4,['test'],"['test', 'tests']"
Testability,"> With output variable you mean adding PARENT_SCOPE, or something else? This doesn't seem to require fixes in root test; > ... but; > So I make REFLEX_.. a function and then simply do ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` I get this error:; > ; > ```; > CMake Error at /home/sailer/software/buildroot/RootMacros.cmake:183 (add_custom_command):; > add_custom_command Wrong syntax. A TARGET or OUTPUT must be specified.; > Call Stack (most recent call first):; > /home/sailer/software/roottest/cmake/modules/RoottestMacros.cmake:349 (REFLEX_GENERATE_DICTIONARY); > /home/sailer/software/roottest/root/meta/dictSelection/CMakeLists.txt:1 (ROOTTEST_GENERATE_REFLEX_DICTIONARY); > ```; > ; > If I keep the first `set(gensrcdict...)` and add this ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` after the `add_custom_command` call I at least don't get any obvious cmake errors I can connect with these changes. I imagined that we will have the setting with PARENT_SCOPE and on the roottest side we will have an extra variable which we use onward. > ; > Could you trigger the CI, please? I would like to know if these changes are at least working. Done. > ; > To not have USES, one would check if `${dictionary}` is a target or not (I don't think this was a requirement before?) and then do what was done with the list given to USES before.; > This can potentially affect existing uses of REFLEX_GENERATE_DICTIONARY; > ; > ```cmake; > IF(TARGET ${dictionary}); > LIST(APPEND include_dirs $<TARGET_PROPERTY:${dictionary},INCLUDE_DIRECTORIES>); > LIST(APPEND definitions $<TARGET_PROPERTY:${dictionary},COMPILE_DEFINITIONS>); > ENDIF(); > ```; > ; > ```cmake; > IF(TARGET ${dictionary}); > target_sources(${dictionary} PRIVATE ${gensrcdict}); > ENDIF(); > ```. That seems to be the pattern used for the `ROOT_GENERATE_DICTIONARY` analog [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L526). It would be great if we can reuse some code there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587581863:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587581863,1,['test'],['test']
Testability,"> With the new commit following vgvassilevs suggestion, the test passes, so not sure if I should continue in this direction?. No need. As Vassil suggested the original change had unintended consequences (that are of course gone with the latest commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1986443558:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1986443558,1,['test'],['test']
Testability,"> With this change, I hope to be able to reproduce the failures of `test_stressroofit_batchmode_cpu` on Windows 10 in the CI, such that I can test possible solutions. BTW, that is most probably happening only on 32 bit architectures. Or increase the `constexpr unsigned int nstats` to a much larger value than 5000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754#issuecomment-1155292684:142,test,test,142,https://root.cern,https://github.com/root-project/root/pull/10754#issuecomment-1155292684,1,['test'],['test']
Testability,"> Would it be acceptable to follow this change for v6.30 and up?. From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:; https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13; and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1828463249:556,log,logo,556,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1828463249,1,['log'],['logo']
Testability,"> Would it be helpful to repeat the test with debug symbols enabled for cling (and ROOT)?. ok, I am re-running cmssw tests with ROOT/cling debug",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2329324795:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2329324795,2,['test'],"['test', 'tests']"
Testability,"> Would it be possible to create the libraries from the main thread only, before starting the ""worker"" threads?; > P.S.: Currently all libraries have the same function - is that fine?. Sure, I added another test that creates one shared library per thread before starting execution. Each shared library contains different code (same function body but the function name is changed). Each thread then `Load`s/`Unload`s its own different library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348#issuecomment-1659062317:207,test,test,207,https://root.cern,https://github.com/root-project/root/pull/13348#issuecomment-1659062317,1,['test'],['test']
Testability,"> Would it be useful to add one, for example, if possible, a mock of the code of CMS that exposed the bug?. Not really. The related problem (missing list of function in some rare runs) is not explicitly understood. This particular problem was discovered by ""visual"" inspection and thus does not have any good reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15113#issuecomment-2052634277:61,mock,mock,61,https://root.cern,https://github.com/root-project/root/pull/15113#issuecomment-2052634277,1,['mock'],['mock']
Testability,"> Wouldn't that reduce the cluster size and hence decrease compression ratio and likely overall read performance of the produced files?. According to @Axel-Naumann, we reuse zlib dictionaries, so the whole file is a single stream, which means that this shouldn't be a problem. Nevertheless, this is dealing with data generation, so there are no pre-defined clusters. > We may also want to speed up the merging process (if I am remembering correctly the current bottleneck is likely the uncompression and unstreaming of the input TTree, if we could find a way to avoid having to do that ... maybe 'just' not compressing the TTree in the TMemFile might help [yes at the cost of memory but ...]). This test is with uncompressed data already. However, the bottleneck is not the merging process. Merging can go as fast as the output disk can write, which is the fastest we can do. What I see in profiles is a lot of time being spent creating and destroying task arenas for `TTree::Fill()`, as well as a lot of calculations of the pool size for the arenas and lots of context switches. I think we should focus on these parts first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3385#issuecomment-461133086:699,test,test,699,https://root.cern,https://github.com/root-project/root/pull/3385#issuecomment-461133086,1,['test'],['test']
Testability,"> Wouldn't you agree, though, that this was an issue in cint times, but not any more in cling times?. Not because there **are** differences, most intentional (and few not) between cling and a compiler. (To the extreme, if we were to disable one of the test, that would be the compiled one :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656826014:252,test,test,252,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656826014,1,['test'],['test']
Testability,"> Wow, this looks worse than my original patch. But it shows these errors are build time errors instead of runtime errors. It is slightly odd to me. Yes, it fails during ROOT's build but already in a stage where we are running some built tools to build our modules. This involves loading modules of dependent libraries, so it will trigger the template specialization loading logic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1972843020:375,log,logic,375,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972843020,1,['log'],['logic']
Testability,"> Yep, but do I see whether this happened in the PR builds?. Yes, you just need to check that the `pyz` tests ran, then you are sure it is an experimental PyROOT build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3429#issuecomment-463628557:104,test,tests,104,https://root.cern,https://github.com/root-project/root/pull/3429#issuecomment-463628557,1,['test'],['tests']
Testability,"> Yes :) Can you add the test you case you had?. That needed valgrind to detect anything. @pcanal can we use `TStreamerInfo::ls()` or something to validate the layout? Like this (output corresponds to `master`)?; ```; root [0] TClass::GetClass(""std::map<int, std::set<float>>"")->GetStreamerInfo()->ls(). StreamerInfo for class: map<int,set<float> >, version=6, checksum=0xbe69c367; map<int,set<float> > This offset= 0 type=300 ,stl=4, ctype=61, <pair<int,set<float> >> Used to call the proper TStreamerInfo case; i= 0, This type=300, offset= 0, len=1, method=0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9750#issuecomment-1025720410:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/9750#issuecomment-1025720410,1,['test'],['test']
Testability,"> Yes I approved, with a small question about the test. Could you confirm it's checking for identity with the expected title string and not matching of some sort?. `StrEq` is the one. It has not been used until now in any other tests. That's why I did not find it immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14288#issuecomment-1884550457:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/14288#issuecomment-1884550457,2,['test'],"['test', 'tests']"
Testability,"> Yes I guess 0 should be allowed. Have you run a small test to check if it works ?. I'm just compiling the branch now, will get back to you once I have results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3949#issuecomment-501186794:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/3949#issuecomment-501186794,1,['test'],['test']
Testability,> Yes let's expose to users and we see how this fares. If we run into problems we make it less visible (e.g. only for notebooks). I think that is not the best approach. My general worry is that we are turning by default a feature which messes up with the lookup tables with no tests to improve the less used feature of unloading. I would propose to make this feature configurable and enable it only for ROOT through TCling to gather some usage experience.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532584411:277,test,tests,277,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532584411,1,['test'],['tests']
Testability,"> Yes, I agree that we should now focus on the remaining test failures, both in Cling and ROOT. For the ""file name too long"" when building with GCC, I've posted #10387 (we'll have to rebase this PR afterwards and change a number of the new `.str()` calls).; > ; > I also started looking into the slow JIT for RDF, and I noticed that it's completely hanging when ROOT is built with C++17. The stack trace of a stuck `./tree/dataframe/test/dataframe_interface --gtest_filter=RDataFrameInterface.GetFilterNamesFromNode` is; > ; > ```; > #0 0x00007ffff697681d in __lll_lock_wait () from /lib64/libpthread.so.0; > #1 0x00007ffff696fac9 in pthread_mutex_lock () from /lib64/libpthread.so.0; > #2 0x00007fffefd8e953 in __gthread_mutex_lock (__mutex=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux/bits/gthr-default.h:748; > #3 std::mutex::lock (this=0x8eb600) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:103; > #4 std::unique_lock<std::mutex>::lock (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:267; > #5 std::unique_lock<std::mutex>::unique_lock (__m=..., this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/std_mutex.h:197; > #6 llvm::orc::ExecutionSession::OL_applyQueryPhase1 (this=this@entry=0xbcb8b0, IPLS=std::unique_ptr<llvm::orc::InProgressLookupState> = {...}, Err=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2295; > #7 0x00007fffefd8c8ec in llvm::orc::ExecutionSession::lookup(llvm::orc::LookupKind, std::vector<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags>, std::allocator<std::pair<llvm::orc::JITDylib*, llvm::orc::JITDylibLookupFlags> > > const&, llvm::orc::SymbolLookupSet, llvm::orc::SymbolState, llvm::unique_function<void (llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr, llvm::JITEvaluatedSymbol, llvm::De",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,2,['test'],['test']
Testability,"> Yes, as expected many tests are failing now, so we have to decide on a strategy here: Do we want to fix all issues first or merge this one first to make it easier to debug things?. I'd merge it as well. The build will be red for weeks or months, but the shifter should have a look and ping people every once in a while.; Given that it only runs during the night, you could even log in to the node and play with the last nightly build if you cannot reproduce the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005#issuecomment-1057799612:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10005#issuecomment-1057799612,2,"['log', 'test']","['log', 'tests']"
Testability,"> Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!; > ; > Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; > ; > ```; > That should fix a recent nightly failure with gcc11 avoiding to require; > module ""bits/ranges_base.h"" in C++20 context.; > ```; > ; > does not call out; > ; > * that it's during dictionary generation; > ; > * that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); > ; > * that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430019305:313,log,log,313,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305,2,['log'],['log']
Testability,"> Yes, but realistically the exact same code can be run on different machines in different directories. It shouldn't make a difference whether I run something in /home/username/ or in /tmp/tmpdir_q4qw3/sandbox. Just do not use absolute path name when creating file. If you are using constructor:; ```; new TFile(""name.root?reproducible"",""recreate""); ```; `name.root` will be stored in file header.; And it can be reproduced on all nodes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524224760:202,sandbox,sandbox,202,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524224760,1,['sandbox'],['sandbox']
Testability,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-1864488370:405,test,test,405,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-1864488370,1,['test'],['test']
Testability,"> Yes, it appears `XRootDConfig.cmake` is broken in the latest version 5.6.3; I opened [xrootd/xrootd#2142](https://github.com/xrootd/xrootd/pull/2142) to fix it, then we need a new release and an update in EPEL. Or maybe we can apply the fix on top of 5.6.3 already? @ellert. I have created an update for EPEL (xrootd-5.6.3-3) with this fix and a few others.; https://bodhi.fedoraproject.org/updates/?packages=xrootd; It is currently submitted to EPEL testing. If karma is provided by those who can, it will be pushed to stable faster. Without karma the default time in testing is 7 dats.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1840315991:453,test,testing,453,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1840315991,2,['test'],['testing']
Testability,"> Yes, it's true that this class (or formerly two classes) are not covered by unit tests yet (and have never been). But I have some user workflows that I found using this class, and soon after fixing some remaining problems with that workflow I will make unit test out of it. As a proposal for the future, maybe change the order: Refactorings are always safer if there are tests exercising the code paths that are changed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12767#issuecomment-1535978068:83,test,tests,83,https://root.cern,https://github.com/root-project/root/pull/12767#issuecomment-1535978068,3,['test'],"['test', 'tests']"
Testability,"> You have to expand the glob to an actual list of files. Yes, I agree. This highlights a concrete use case for moving the globbing logic of `TChain` out of class. *It shouldn't be hard to do*:tm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1608173549:132,log,logic,132,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1608173549,1,['log'],['logic']
Testability,"> You should have seen this already with 6.30 though. Is there an explanation why 6.30 did not trigger the error?. Just to comment about 6.30: we didn't look at this release apart from to do a compilation test, so indeed, most likely the issue is there as well as per your expectation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15964#issuecomment-2203170942:205,test,test,205,https://root.cern,https://github.com/root-project/root/issues/15964#issuecomment-2203170942,1,['test'],['test']
Testability,"> [ regarding `roottest_root_meta_dictSelection_execAtlasTest2_WILL_FAIL` ]; > ; > However, the test was expected to fail on Windows, but it passed (?) @bellenot. Yes, in progress: https://github.com/root-project/roottest/pull/963",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12785#issuecomment-1538277256:96,test,test,96,https://root.cern,https://github.com/root-project/root/pull/12785#issuecomment-1538277256,1,['test'],['test']
Testability,"> [...] plus `tutorial-roofit-rf408_RDataFrameToRooFit-py` (see #10016), which I find a bit surprising since the stack trace pointed somewhere else... But I'll double-check, maybe we were unlucky enough to completely trip the AddressSanitizer over. Okay, that was a fluke. The test is still failing, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007#issuecomment-1057884893:277,test,test,277,https://root.cern,https://github.com/root-project/root/issues/10007#issuecomment-1057884893,1,['test'],['test']
Testability,"> [01bb696](https://github.com/root-project/root/commit/01bb6965557fcc63d5d2e535b89f57e025922731) hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was `9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). I think `nbuffers >= 1` in all cases, so we should always have 9 additional bytes beyond what we tell `R__zipMultipleAlgorithm`. > This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). Yes, we have to operate under that assumption. > This patch needs to be backported to as many older releases as possible as it can lead to a memory over-write even in the case of TTree (the compression is being given a memory area smaller than it is and unless the compression algorithm stops before it has over-inflated the object by 28+9 bytes, it might still happens). Yes, I think the compression algorithms stop at the buffer sizes we give them. Unless I'm missing something, this means only RNTuple was affected by this and TTree was fine because of the slightly larger buffers? For now, I've opened backports for 6.30 (https://github.com/root-project/root/pull/14624), 6.28 (https://github.com/root-project/root/pull/14625), and 6.26 (https://github.com/root-project/root/pull/14626). If we find that TTree is also affected, we can (and have to) open more backports. > A a side note, the extra size given by TKey and TBaskets probably should be removed (delta understanding why there was a +8 ""in case object is placed in a deleted gap"". Ok, we can try (in `master`). We have to be careful though, I don't want to introduce more memory errors for writing TTrees...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14523#issuecomment-1933568756:337,test,test,337,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1933568756,1,['test'],['test']
Testability,> [100%] Built target hsimple; > filter.cxx:74:10: fatal error: 'unistd.h' file not found; > #include <unistd.h>; > ^~~~~~~~~~; > [100%] Built target PreparationPyz; > 1 error generated. @couet I tried building with mac12 and I cannot reproduce the error you see.; See the CI log: https://github.com/root-project/root/actions/runs/8877537165/job/24371327147?pr=15314; The documentation is built correctly (aside from the fact that 'graphviz-dot' is missing). Could it be something related to mac14 vs mac12 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2082617753:276,log,log,276,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2082617753,1,['log'],['log']
Testability,> [cling] Disable many DynamicLibraryManager test on macOS . Should we open an issue to port (and/or fix) those tests (or a subset at least) to MacOS?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2293955516:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2293955516,2,['test'],"['test', 'tests']"
Testability,> [enable on] (potentially all) . We need to make sure that we still test the environment the users will actually use (i.e `dev=OFF` on each PR).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2168189602:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2168189602,1,['test'],['test']
Testability,> [tcling] Use the autoload raii autoload object in RegisterModule. NFC . Could you extend the commit log to explain why the change is NFC (despite some of the call being 'conditional' in the old code and not in the new code).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3769#issuecomment-489451947:102,log,log,102,https://root.cern,https://github.com/root-project/root/pull/3769#issuecomment-489451947,1,['log'],['log']
Testability,"> `-Dimt=OFF -Dbuiltin_tbb=OFF`. I tried to add the 2 options you said, you can check the below steps, it still failed. The result look the same as the original error of this issue.; 1. `cmake -G ""Visual Studio 17 2022"" -A ARM64EC -DCMAKE_SYSTEM_VERSION=10.0.22621.0 -Dtesting=ON -Droottest=ON -Droofit=off -Dimt=OFF -Dbuiltin_tbb=OFF ..` ; 2. `msbuild /m /p:Platform=ARM64EC /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild`. error message:; `C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\Microsoft.CppCommon.targets(254,5): error MSB8066: Custom build for 'C:\gitP\root-project\root\build_arm64ec\CMakeFiles\c47203b562f7dfc78de28a6cb0d4e391\Options.inc.rule;C:\gitP\root-project\root\build_arm64ec\CMakeFiles\ef6b5551e87d9b29a1350db42d169b36\ClangDriverOptions.rule;C:\gitP\root-project\root\interpreter\llvm-project\clang\include\clang\Driver\CMakeLists.txt' exited with code -1073741819.`. detailed logs:; [ROOT_Setup_arm64ec.log](https://github.com/user-attachments/files/16309437/ROOT_Setup_arm64ec.log); [ROOT_build_arm64ec.log](https://github.com/user-attachments/files/16309436/ROOT_build_arm64ec.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11787#issuecomment-2238657100:945,log,logs,945,https://root.cern,https://github.com/root-project/root/issues/11787#issuecomment-2238657100,5,['log'],"['log', 'logs']"
Testability,"> ```; > +Warningin<TClassTable::Add>:classROOT::Detail::TTypedIter<TBaseClass>alreadyinTClassTable; > +Warningin<TClassTable::Add>:classROOT::Detail::TTypedIter<TEnumConstant>alreadyinTClassTable; > ```; > ; > The template ROOT::Detail::TTypedIter uses ClassDefInline and the registration of the class (i.e. the call to TClassTable::Add) is triggered by via a function static variable initialization. What these messages indicates (and we see that on Windows also) is that the ""function static variable"" are initialized multiple time.; > ; > Setting a breakpoint on TClassTable::Add with the condition `cname[0] == 'R' && cname[6] == 'D' && cname[24]=='<' && cname[32] == 'E'` will tell you exactly when/why this happens (on Windows, multiple library have identical copies of the functions and they are not ""de-duplicated"" by the linker (i.e. both copies are brought in independently). GDB did not stop there but I can see we have the same symbol in libCore.so and libTree.so (both are weak). These failures might have something to do with the 3 remaining failing tests in cling standalone (@Axel-Naumann is looking into them). Thanks for investigating!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-703223267:1065,test,tests,1065,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-703223267,1,['test'],['tests']
Testability,"> ```; > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:340: fun:_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE; > /opt/root_src/bindings/pyroot/cppyy/cppyy/etc/valgrind-cppyy-cling.supp:350: fun:_ZN4llvm13FPPassManager16doInitializationERNS_6ModuleE; > ```. This is not `llvm13` as a version number, but is a mangled C++ name. > ```; > /opt/root_src/bindings/pyroot/pythonizations/test/CMakeLists.txt:116: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/cmake/modules/RootBuildOptions.cmake:188:ROOT_BUILD_OPTION(llvm13_broken_tests OFF ""Enable broken tests with LLVM 13 on Windows""); > /opt/root_src/cmake/modules/SetUpWindows.cmake:48: if(llvm13_broken_tests); > /opt/root_src/core/thread/test/CMakeLists.txt:15:if(NOT MSVC OR CMAKE_SIZEOF_VOID_P EQUAL 8 OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:138:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:169: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:178:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:242: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/test/CMakeLists.txt:252:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/tmva/tmva/test/CMakeLists.txt:30: if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/tree/ntuple/v7/test/CMakeLists.txt:40:if(NOT MSVC OR llvm13_broken_tests); > /opt/root_src/tutorials/CMakeLists.txt:409:if(MSVC AND NOT llvm13_broken_tests); > /opt/root_src/cmake/modules/SetUpWindows.cmake:49: set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DR__ENABLE_LLVM13_BROKEN_TESTS""); > ```. I argue that this is correct: These tests were broken as part of the upgrade to LLVM 13. They need to be reviewed, fixed (or checked that they are fixed by the upgrade to LLVM 16), and re-enabled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14210#issuecomment-1852160718:414,test,test,414,https://root.cern,https://github.com/root-project/root/issues/14210#issuecomment-1852160718,11,['test'],"['test', 'tests']"
Testability,"> `clingtest` exports many more symbols from `libCling`, for testing purposes (see the code in `interpreter/CMakeLists.txt`). This means our (patched) LLVM and Clang will interfere with other LLVM installations used by dependent libraries. IIRC this can make tests fail!. We will build that version of ROOT only to run clingtest, right? We still will test ROOT the regular way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957#issuecomment-2116926053:61,test,testing,61,https://root.cern,https://github.com/root-project/root/issues/6957#issuecomment-2116926053,3,['test'],"['test', 'testing', 'tests']"
Testability,"> a meta-question might be whether we should veto these tutorials on all but the fastest of our testing platforms, i don't know how many more multi-thread multi-minute tutorials we can add before nightlies and incrementals become noticeably slower. If you label them `longtest`, they are skipped on a lot of machines. The `multicore` e.g. will run them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-667198665:96,test,testing,96,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-667198665,1,['test'],['testing']
Testability,"> add a ""show timestamp"" option flag to RLogManager, on by default. . It will need to be off by default in roottest (to avoid log file comparison headaches).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6931#issuecomment-740838762:126,log,log,126,https://root.cern,https://github.com/root-project/root/issues/6931#issuecomment-740838762,1,['log'],['log']
Testability,> also we expect this solves cxxmodules ABI incompatibility failing tests. Why would this 'solve' ABI incompatibility? (Wouldn't avoiding a search only 'reduce' the risk the case where a real incompatibility (that needs addressed) is stumbled upon?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1821#issuecomment-378956389:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/1821#issuecomment-378956389,1,['test'],['tests']
Testability,"> although the (pre-existing) behavior seems to be broken/unexpected in case of a tree in directory ""root"" . (Unfortunately) this is not surprising, I bet we never tested that case (but rather mostly tested the TChain case)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10186#issuecomment-1075404663:164,test,tested,164,https://root.cern,https://github.com/root-project/root/pull/10186#issuecomment-1075404663,2,['test'],['tested']
Testability,"> always defining R__LESS_INCLUDES (or, better, removing all the code in the #else parts). By the way, do you know why this define exists? Is there some compiler/platform where compilation breaks if it's not defined?. Per the commit log:; ```; When -Ddev=ON specified, R__LESS_INCLUDES is defined; It will be used to reduce includes which are exposed to the public.; While such changes can have side-effects on user code,; option is off by default.; ```. i.e. the changes of which header files are included where is a code-wise backward incompatible change (that has only light to zero actual benefit to the user), so we want to thread carefully in introducing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2174030643:233,log,log,233,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2174030643,1,['log'],['log']
Testability,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends; - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD; - Remove fgRwLock; - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co); - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code?. [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-610506869:593,test,test,593,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-610506869,4,"['Test', 'test']","['Test', 'test']"
Testability,"> apparently this revealed issues in a couple of tests [here](https://github.com/root-project/root/pull/13460#issuecomment-1679272277). Yes indeed, asking @bellenot for help, I assume it has to do with modules vs rootmap files: The failure in `histhistdrawv7testUnit` looks really scary, `Seq/NoROOTExtension.Read/0` could potentially be solved by renaming the class. I guess it's the first time that these (C++17) tests run on Windows in such fixed environment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1680053538:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1680053538,2,['test'],['tests']
Testability,"> applying this patch, tests below in LLVM failed. Sure, because they check the spelling of the attribute which the patch changes for a good reason. > So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?. Why do you propose to use `R`? If I'm not mistaken you didn't address [my comment](https://github.com/root-project/root/pull/10830#issuecomment-1168354018) on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168769018:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168769018,1,['test'],['tests']
Testability,"> are the failed test related to my patch?. No, sorry about that - please ignore them. > Is there something else you want me to change, otherwise could you accept it?. I'd like @pcanal to have the final say here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099#issuecomment-599422327:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/5099#issuecomment-599422327,1,['test'],['test']
Testability,> but Mac 12 and Mac 13 are still not happy!. Tests on macs failing due to network problems downloading ROOT files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800#issuecomment-1961086920:46,Test,Tests,46,https://root.cern,https://github.com/root-project/root/pull/14800#issuecomment-1961086920,1,['Test'],['Tests']
Testability,"> by gSystem->Load. Calling dlopen and dlsim do the same job. Note that the 2 are not completely functionally equivalent. TSystem::Load does 2 additional things:. (a) Load any dependent libraries (as provided by a rootmap files); (b) Check that the version of ROOT used to build the library is the same as the version of ROOT running. (a) is necessary in the case the user is not using explicit linking for their own library. (b) is 'nice' to have to avoid having to debug 'bad' builds. If neither of those features are needed, it ought to be explain why in at least the commit log. Also, it seems that the code may have changed but the commit log has not yet been changed (as the code does not use dlopen or dlsym, at least not directly but seem to use functions from DynamicLibraryManager). > Segfaults in runtime_cxxmodules nightly was caused by recursive "".x"" handling by gSystem->Load. Why is this seen only in the cxxmodule case? . Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394462603:578,log,log,578,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394462603,2,['log'],['log']
Testability,> cannot seem to log on the ubuntu node. Which one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1367141544:17,log,log,17,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1367141544,1,['log'],['log']
Testability,> cmake -GNinja -DCMAKE_BUILD_TYPE=Debug '-DCMAKE_IGNORE_PATH=/usr/local/lib;/usr/local/include;/usr/local/bin' -DCMAKE_INSTALL_PREFIX=/scratch/greenc/test-products/root/v6_26_04b/Linux64bit+3.10-2.17-c14-p3912-debug -Dall:BOOL=OFF -Dasan:BOOL=OFF -Dasserts:BOOL=ON -Dccache:BOOL=OFF -Dclingtest:BOOL=OFF -Dcoverage:BOOL=OFF -Dcxxmodules:BOOL=OFF -Ddev:BOOL=OFF -Ddistcc:BOOL=OFF -Dexceptions:BOOL=ON -Dfail-on-missing:BOOL=ON -Dfortran:BOOL=OFF -Dgminimal:BOOL=ON -Dgnuinstall:BOOL=OFF -Dmemory_termination:BOOL=OFF -Dmemstat:BOOL=OFF -Dminimal:BOOL=OFF -Drootbench:BOOL=OFF -Droottest:BOOL=OFF -Drpath:BOOL=OFF -Druntime_cxxmodules:BOOL=ON -Dshared:BOOL=ON -Dsoversion:BOOL=ON -Dtest_distrd_pyspark:BOOL=OFF -Dtest_distrd_dask:BOOL=OFF -Dtesting:BOOL=OFF -DLLVM_BUILD_TYPE=Debug -DLLVM_ENABLE_ASSERTIONS:BOOL=ON -Dbuiltin_afterimage:BOOL=OFF -Dbuiltin_cfitsio:BOOL=OFF -Dbuiltin_clang:BOOL=ON -Dbuiltin_cling:BOOL=ON -Dbuiltin_cppzmq:BOOL=OFF -Dbuiltin_davix:BOOL=OFF -Dbuiltin_fftw3:BOOL=OFF -Dbuiltin_freetype:BOOL=OFF -Dbuiltin_ftgl:BOOL=OFF -Dbuiltin_gl2ps:BOOL=OFF -Dbuiltin_glew:BOOL=OFF -Dbuiltin_gsl:BOOL=OFF -Dbuiltin_llvm:BOOL=ON -Dbuiltin_lz4:BOOL=OFF -Dbuiltin_lzma:BOOL=OFF -Dbuiltin_nlohmannjson:BOOL=ON -Dbuiltin_openssl:BOOL=OFF -Dbuiltin_openui5:BOOL=ON -Dbuiltin_pcre:BOOL=OFF -Dbuiltin_tbb:BOOL=OFF -Dbuiltin_unuran:BOOL=OFF -Dbuiltin_vc:BOOL=OFF -Dbuiltin_vdt:BOOL=OFF -Dbuiltin_veccore:BOOL=OFF -Dbuiltin_xrootd:BOOL=OFF -Dbuiltin_xxhash:BOOL=OFF -Dbuiltin_zeromq:BOOL=OFF -Dbuiltin_zlib:BOOL=OFF -Dbuiltin_zstd:BOOL=OFF -DXROOTD_ROOT_DIR=/products/xrootd/v5_4_3a/Linux64bit+3.10-2.17-c14-p3912-debug -Dalien:BOOL=OFF -Darrow:BOOL=OFF -Dasimage:BOOL=ON -Dcefweb:BOOL=OFF -Dclad:BOOL=ON -Dcuda:BOOL=OFF -Dcudnn:BOOL=OFF -Ddaos:BOOL=OFF -Ddataframe:BOOL=ON -Ddavix:BOOL=OFF -Ddcache:BOOL=OFF -Dfcgi:BOOL=OFF -Dfftw3:BOOL=ON -Dfitsio:BOOL=OFF -Dgdml:BOOL=ON -Dgfal:BOOL=OFF -Dgsl_shared:BOOL=ON -Dgviz:BOOL=OFF -Dhttp:BOOL=ON -Dimt:BOOL=ON -Djemalloc:BOOL=OFF -Dmathmore:BOOL=ON -D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1407366966:151,test,test-products,151,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1407366966,1,['test'],['test-products']
Testability,> cms tests passed for production arch (el8_amd64_gcc12) and powerpc. Thanks! And I understand correctly it solves some problems that were there on ppc64le before?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1867511207:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1867511207,1,['test'],['tests']
Testability,> cmssw PR tests look good : [cms-sw#172 (comment)](https://github.com/cms-sw/root/pull/172#issuecomment-1217329810). Thanks a lot @smuzaffar!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850#issuecomment-1217589201:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/10850#issuecomment-1217589201,1,['test'],['tests']
Testability,> cmssw [tests](https://github.com/cms-sw/root/pull/207#issuecomment-2263816398) look good. Thanks Shahzad!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16150#issuecomment-2263887941:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/16150#issuecomment-2263887941,1,['test'],['tests']
Testability,"> cmssw tests also failed due to missing gtest requirement. I guess we can use the builtin gtest?. The cmake cited above only gets called with testing=ON, so this is broken even with builtin gtest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396357797:8,test,tests,8,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396357797,2,['test'],"['testing', 'tests']"
Testability,"> const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""n#line 1 ""DataFormatsBTauReco_xr dictionary payload""nn#ifndef CMS_DICT_IMPLn #define CMS_DICT_IMPL 1n#endifn#ifndef _REENTRANTn #define _REENTRANT 1n#endifn#ifndef GNUSOURCEn #define GNUSOURCE 1n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""..., topLevel=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6423; #30 0x00002b4bd37833f1 in TCling::AutoParse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6508; #31 0x00002b4bd376ab6b in TClingLookupHelper__AutoParse (cname=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:21478,test,tests,21478,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863174237:117,test,test,117,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237,1,['test'],['test']
Testability,"> does this warrant a test?. Yes definitely, I already modified the available tests to check the filelist. I can also add a new one to check a filelist with more than one file in it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8637#issuecomment-877254446:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/8637#issuecomment-877254446,2,['test'],"['test', 'tests']"
Testability,"> enabling -Werror everywhere except llvm-facing parts. We don't want `-Werror` by default because there will always be weird platforms that we cannot test, and future compilers may enable other warnings but we don't want to prevent them from building an older release of ROOT. FWIW LLVM sources should explicitly opt out of `-Werror` in our setup. The only place this doesn't work are some ROOT files including Clang headers - I don't have a good idea what to do about that case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173288191:151,test,test,151,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173288191,1,['test'],['test']
Testability,"> for CMS tests, build directory is not available at runtime. . Aren't the header files available? Aren't you setting ROOT_INCLUDE_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139560146:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139560146,1,['test'],['tests']
Testability,"> has to do with these issues?. Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design?. It is testing a ""natural"" control flow for a REPL:; ```; First Load a bunch of stuff that, in this case, include a forward declaration. Second do:; if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet); load the definition for the entity.; ```; (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: ; https://sft.its.cern.ch/jira/browse/ROOT-7462; and detailed analyis:; https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README; ; So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1756311089:180,test,test,180,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1756311089,7,['test'],"['test', 'testing']"
Testability,> here is the log file which came from running valgrind. I don't find this; could you attach it at https://github.com/root-project/root/issues/12370 please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1465680668:14,log,log,14,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1465680668,1,['log'],['log']
Testability,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). ; Binary compare shows no difference.; Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-525010216:127,test,testing,127,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-525010216,1,['test'],['testing']
Testability,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l; 10165751; vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l; 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1625422950:58,log,log,58,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1625422950,3,['log'],['log']
Testability,"> https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84694/testReport/projectroot.roottest.python/regression/roottest_python_regression_regression/. This should be solved now, waiting for the next builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5643#issuecomment-638749180:81,test,testReport,81,https://root.cern,https://github.com/root-project/root/pull/5643#issuecomment-638749180,1,['test'],['testReport']
Testability,> https://www.qt.io/download-open-source and when installing unselect all except for qtcreator. There are also offline installers that don't require login. I have done the procedure mentioned here. It create a Qt folder in my home directory with QtCreator inside. But `qhelpgenerator` does not show... seems not really straightforward,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-902720563:149,log,login,149,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-902720563,1,['log'],['login']
Testability,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not?. This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it?. I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759717852:177,test,test,177,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759717852,1,['test'],['test']
Testability,"> if I run with ctest --output-on-failure -R roottest-root-dataframe then tests pass. See my comment in the other issue: I did not manage to reproduce the problem outside of ctest and without running multiple tests concurrently -- it also seems that one of the tests ""has"" to be roottest-root-dataframe-test_snapshot_manytasks. > I guess some test dependencies may be missing?. why would a missing dependency make the test _pass_ if it's run alone and fail if it's run together with others?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823937084:74,test,tests,74,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823937084,5,['test'],"['test', 'tests']"
Testability,"> if it is easy to backport this to root 6.26 then I can test it. Hi @smuzaffar, we will not be backporting to ROOT 6.26 which is based on LLVM 9.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940719689:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940719689,1,['test'],['test']
Testability,> if it is easy to backport this to root 6.26 then I can test it. How difficult is to move to 6.30?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1940748828:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1940748828,1,['test'],['test']
Testability,> if some platforms don't follow the ABI. The Itanium ABI? Windows doesn't implement that. And in principle we shouldn't break support for other ABIs either. So this test is needed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-829001991:166,test,test,166,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-829001991,1,['test'],['test']
Testability,> in gdb make sure to do catch throw before running. indeed :). @smuzaffar I want to rebuild ROOT in debug mode (to eventually test the fixes). Which commit and repository was used in that build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815268064:127,test,test,127,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815268064,1,['test'],['test']
Testability,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RDFHelpers.hxx>; #include <memory>; #include <TTreeReader.h>; #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {; public:; using Result_t = int;. private:; std::shared_ptr<Result_t> fValue;; int &fTestVal;. public:; static constexpr int fgRefVal = 42;; SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}; SimpleActionHelper(SimpleActionHelper &&) = default;; SimpleActionHelper(const SimpleActionHelper &) = delete;; std::shared_ptr<int> GetResultPtr() const { return fValue; }; void Initialize() {}; void InitTask(TTreeReader *, unsigned int) {}; template <typename... ColumnTypes>; void Exec(unsigned int, ColumnTypes...); {; }; void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }; std::string GetActionName() { return ""SimpleAction""; }; };. int main(); {; auto exceptionThrower = [](ULong64_t ievt) {; if (ievt == 4) {; throw std::invalid_argument(""Time to throw."");; }; return int(0);; };. int testVal = 123;; std::cout << ""Testing value "" << testVal << std::endl;; SimpleActionHelper helper(testVal);; auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});; auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{; valRes.GetValue();; } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;; }; ```; Then. ```; ./repro_628.out ; Testing value 123; RDataFrame::Run: event loop was interrupted; Testing value 123; ```; ```; ./repro_danilo_patch.out ; Testing value 123; RDataFrame::Run: event loop was interrupted; Testing value 42; ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707964693:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707964693,13,"['Test', 'test']","['Testing', 'test', 'testVal']"
Testability,"> is RDataFrame['s test] ready for it?. I have opened PRs that fix the test for master, 6.22 and 6.20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6258#issuecomment-691173178:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/6258#issuecomment-691173178,2,['test'],['test']
Testability,"> is now used instead (see also adc78fa). Avoid using commit hash in commit log (*) (especially since we use rebase) as they are not stable, in particular if/when the commit is back ported. At the very least, I recommend adding (or using instead) the title of the commit in question.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9478#issuecomment-998909863:76,log,log,76,https://root.cern,https://github.com/root-project/root/pull/9478#issuecomment-998909863,1,['log'],['log']
Testability,> jalopezg-git. Thanks for the review. I will address the issues and add test cases in `interpreter/cling/test/` .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265#issuecomment-1397202437:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/11265#issuecomment-1397202437,2,['test'],['test']
Testability,"> let see what if te test will pass. Yes. ; Typically when Jenkins build fails, I have to add new commit to let run builds again - otherwise after `phsft-bot build` message builds aborted very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4151#issuecomment-524287296:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/4151#issuecomment-524287296,1,['test'],['test']
Testability,> let's preload TMVA/TreePlayer/Graf to fix all failing tests that are related to this feature/bug with modules enabled.; > ... This commit can be dropped if we solve on of those problems:. Obviously the removal of this preload is a necessary precursor to making the use of module the default. Do we have a mechanism to 'not' forget to remove it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697#issuecomment-370562114:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/1697#issuecomment-370562114,1,['test'],['tests']
Testability,"> macro fails if `${ROOTSYS}/test` is not in the include path.. games.C seems to do that already in my case, see below:; ```. /opt/root_bld/tutorials/gui $ root -l; root [0] .include; root [1] Int_t st1 = gSystem->Load(""$(ROOTSYS)/test/Aclock"");; root [2] st1; (int) 0; root [3] Int_t st2 = gSystem->Load(""$(ROOTSYS)/test/Hello"");; root [4] Int_t st3 = gSystem->Load(""$(ROOTSYS)/test/Tetris"");; root [5] st2; (int) 0; root [6] st3; (int) 0; root [7] .include; (...); /opt/root_bld/test/; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778230588:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778230588,5,['test'],['test']
Testability,"> now with that config it tries to compile two files from the prev commit which are including tbb/tbb_config.h. That is what happens if I only test CMake configuration, but not the build itself. I'm working on a proper fix, hopefully I can find a header that can be included in all versions of TBB (otherwise we have a chicken-and-egg problem which header to include for finding out the version...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8239#issuecomment-849364317:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/8239#issuecomment-849364317,1,['test'],['test']
Testability,"> ok fair enough. This looks good then. Did you also test going through the `TMethodCall` interfaces?. I think `TMethodCall` uses the TClingCallFunc interface, and if I am not mistaken, it was addressed by this PR: https://github.com/root-project/root/pull/9244.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1511954479:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1511954479,1,['test'],['test']
Testability,> only on Mac ? ok I will check TSVG. The tests are only enabled on Mac,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328299908:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328299908,1,['test'],['tests']
Testability,"> please also add an example with the new signature to the docs of `Sum`, maybe actually using `PtEtaPhiMVector`s since it's 1. really cool and 2. gives users an idea of the possibilities smile. Updated the documentation.; Rearranged the commits to separate the code and test changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8903#issuecomment-907023558:271,test,test,271,https://root.cern,https://github.com/root-project/root/pull/8903#issuecomment-907023558,1,['test'],['test']
Testability,> projectroot.core.meta.test.gtest_core_meta_test_testStatusBitsChecker. The Error message are intentional and it would be an improvement to add a check that they are present.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-640717480:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-640717480,1,['test'],['test']
Testability,"> projectroot.roofit.roofit.test.gtest_roofit_roofit_test_testRooExponential. ```; C:\build\workspace\root-pullrequests-build\root\test\unit_testing_support\ROOTUnitTestSupport.cxx(70): error: Failed; Received unexpected diagnostic of severity 2000 at 'TStreamerInfo::CompareContent' reading 'The following data member of; the on-file layout version 1 of class 'RooSTLRefCountList<RooAbsArg>' differs from ; the in-memory layout version 1:; vector<unsigned long> _refCount; //; vs; vector<unsigned int> _refCount; //'.; ```. The problem stems wrong:; ```; std::vector<std::size_t> _refCount;; ```; where ROOT does not (yet) make the std:*_t type opaque and thus sees different types on different platforms (and `long` is stored with 64 bits, `int` is stored with 32 bits, so here the 2 schema are indeed different). . Using `unsigned long` instead of `std::size_t` should solve the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9374#issuecomment-985770700:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/9374#issuecomment-985770700,2,['test'],['test']
Testability,> projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_datasetspec. This one has been addressed by https://github.com/root-project/root/pull/12025.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12027#issuecomment-1383608515:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/12027#issuecomment-1383608515,1,['test'],['test']
Testability,"> rebase on current master. Sure. > get a list of exact upstream commit hashes that we can apply to https://github.com/root-project/llvm-project/. Will do. Must be noted, some commits are not cherry-picked cleanly. > get a CMSSW test on PowerPC64 (the above test is for x86!). Can you elaborate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1849648331:229,test,test,229,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1849648331,2,['test'],['test']
Testability,"> report your tree's entries back, and I will then - at some point in the near future - let you know your global offset. @Axel-Naumann on second thought this is quite complicated...at the point one task (which e.g. might be processing tree `#4`) might require to know the number of entries in tree `#1`, `#2` and `#3` there is no guarantee that the corresponding tasks are even running. > doing it only if the rdfentry_ column is actually requested in the application. I don't think that at the moment RDF has any logic that ""reflects"" at a global level on which columns are used, but I guess we could add something ad-hoc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1412394952:514,log,logic,514,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1412394952,1,['log'],['logic']
Testability,"> reuse https://root.cern.ch/doc/master/namespacecling.html#func-members in `to_string`?. To expand a bit on what @Axel-Naumann said:; If you call a C++ function on a dead pointer, gdb will get a signal while executing, and add the stack trace of the call on the top of the current stack trace. It might even start calling another function when trying to pretty-print another object, so the stack trace will get longer.; Instead, if you re-implement member lookup in gdb, gdb will either tell you that it cannot access the memory at the given address or it throws a python exception. In both cases, pretty-printing stops without cluttering the stack trace. @Axel-Naumann:; - Is there a way to have a debug build? I would like to see the test succeed.; - I will try to disable it during release builds before proceeding.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633#issuecomment-479916770:737,test,test,737,https://root.cern,https://github.com/root-project/root/pull/3633#issuecomment-479916770,1,['test'],['test']
Testability,"> run it within ctest. I get the following result when running ctest clingtest-check-cling, but I see no sign that the test under question is being run?. [clingtest.txt](https://github.com/root-project/root/files/14982001/clingtest.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9272#issuecomment-2057328854:119,test,test,119,https://root.cern,https://github.com/root-project/root/pull/9272#issuecomment-2057328854,1,['test'],['test']
Testability,> should we move that to roottest and remove it from ROOT?. I'd rather; - move the tests needing `rmkdepend` from Makefiles to CMake; - then remove `rmkdepend`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2683#issuecomment-424764666:83,test,tests,83,https://root.cern,https://github.com/root-project/root/pull/2683#issuecomment-424764666,1,['test'],['tests']
Testability,"> since the result is wrong without this patch, we may want to add a test. Added test, but it needs revision from your side as I am not fully sure whether it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15071#issuecomment-2024991815:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/15071#issuecomment-2024991815,2,['test'],['test']
Testability,> so I have to first fill the file with data and compress(using RNTupleZip) it and then compare it with the original size when it was initially filled?. I'm still a bit puzzled. Can you please describe which functionality or property of RNTuple you'd like to test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-619909953:259,test,test,259,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-619909953,1,['test'],['test']
Testability,> so it's only wasting CPU cycles. The idea (of having the stress test run both compiled and interpreted) was to ensure that the code worked in both environment (i.e. that the interpreter is working for the syntax used here) **and** to monitor the performance differential (arguably the later has not been followed through).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019#issuecomment-656417348:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/6019#issuecomment-656417348,1,['test'],['test']
Testability,"> sure @vgvassilev, do you mean a example file in the repo or just an example in the PR message?. It'd be best to have an example test with a fixture. Maybe convert an already existing test to a fixture if appropriate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8722#issuecomment-885097815:130,test,test,130,https://root.cern,https://github.com/root-project/root/pull/8722#issuecomment-885097815,2,['test'],['test']
Testability,"> thanks for the backport, I have started CMSSW tests here https://github.com/cms-sw/root/pull/195. Hi @smuzaffar , thanks for your promptness! We discovered there was a small wrinkle preventing proper compilation in 6.30, I have uploaded an updated commit which should work properly literally a few minutes ago. ~~I just wanted to make sure that the PR on CMSSW takes this latest version of the commits~~. EDIT: I checked on the linked CMSSW PR and it seems the right version of the commit was picked, so should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1893863363:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1893863363,1,['test'],['tests']
Testability,"> thanks, I added the gGL check also. But checking fGLDevice is also potentially useful, right?. Well I am not sure. If you have a use case for that did you test it ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8190#issuecomment-844092139:157,test,test,157,https://root.cern,https://github.com/root-project/root/pull/8190#issuecomment-844092139,1,['test'],['test']
Testability,> that we only include the missing headers . I do not see (from just the patch) this behavior. I see inclusion of all (and only) the input headers. I do not see the 'gather the set of missing header' part. > Some tests are failing with modules such with redefinition errors. Why is reincluding the same header twice leading to errors? Is there a missing code guard somewhere?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1335#issuecomment-344609847:213,test,tests,213,https://root.cern,https://github.com/root-project/root/pull/1335#issuecomment-344609847,1,['test'],['tests']
Testability,"> the 'size' variable is greater than 'maxsize'. . In principle, it is wrong set of arguments. `maxisze` is intend to be allocated memory size. ; But now I add check for such situation. > The old error-prone implementation worked at all my tests :). It was by chance. With old code if one call `SetNull(0)` and then `SetInt(0,0)` was causing segmentation violation. If I understand correct, all other tests fine for you.; If yes, I will merge changes in master. Do you need these fixes in older branches - like 6.22 or 6.20?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-774525353:240,test,tests,240,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774525353,2,['test'],['tests']
Testability,"> the experiments are not trying to parse the output of `.class` / `.Class` in any case. Agreed, I'd expect only our tests to notice format changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10350#issuecomment-1108417298:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/10350#issuecomment-1108417298,1,['test'],['tests']
Testability,"> the function TClass::GetClassInfo() is used routinely outside of the global interpreter lock, e.g. This is (of course) the intent. > because TObject::TestBit is not thread safe. Even-though this is accurate, it is unlikely to be the issue. At least the `kLoading` bit will only be set in the constructor and thus wont change after the user is able to use the `TClass` object. The other possibility is that some other bit setting leads to a weird interaction where the dirty memory is misread, but I also find it unlikely. Nonetheless, can you try the following patch to see if it helps:; ```; diff --git a/core/meta/inc/TClass.h b/core/meta/inc/TClass.h; index 2c94343377..c68eec6bbc 100644; --- a/core/meta/inc/TClass.h; +++ b/core/meta/inc/TClass.h; @@ -429,7 +429,7 @@ public:; ROOT::DesFunc_t GetDestructor() const;; ROOT::DelArrFunc_t GetDeleteArray() const;; ClassInfo_t *GetClassInfo() const {; - if (fCanLoadClassInfo && !TestBit(kLoading)); + if (fCanLoadClassInfo); LoadClassInfo();; return fClassInfo;; }; diff --git a/core/meta/src/TClass.cxx b/core/meta/src/TClass.cxx; index 06ef48c017..6e0475a4c1 100644; --- a/core/meta/src/TClass.cxx; +++ b/core/meta/src/TClass.cxx; @@ -5827,7 +5827,7 @@ void TClass::LoadClassInfo() const; ; // Return if another thread already loaded the info; // while we were waiting for the lock; - if (!fCanLoadClassInfo); + if (!fCanLoadClassInfo || TestBit(kLoading)); return;; ; bool autoParse = !gInterpreter->IsAutoParsingSuspended();; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090#issuecomment-2027369620:152,Test,TestBit,152,https://root.cern,https://github.com/root-project/root/issues/15090#issuecomment-2027369620,3,['Test'],['TestBit']
Testability,"> the remaining tests that still fail are [...] which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. Yes, see https://github.com/root-project/root/issues/12455 on Axel and Vassil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855#issuecomment-1554695866:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/12855#issuecomment-1554695866,1,['test'],['tests']
Testability,> those should be ignored in the description... We really want you to install numba if you want to test ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436#issuecomment-993508758:99,test,test,99,https://root.cern,https://github.com/root-project/root/issues/9436#issuecomment-993508758,1,['test'],['test']
Testability,"> turning by default a feature which messes up with the lookup tables. How does it mess things up?. > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532585952:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532585952,1,['test'],['tests']
Testability,"> value->GetAsDouble(); > > Which is: -1.9812626051377354e-49; > > [ FAILED ] CladDerivator.erf2 (18 ms); > > [ RUN ] CladDerivator.erfc1; > > [ OK ] CladDerivator.erfc1 (10 ms); > > [ RUN ] CladDerivator.erfc2; > > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; > > 0.83021499484118955; > > value->GetAsDouble(); > > Which is: 1.9812626051377354e-49; > > [ FAILED ] CladDerivator.erfc2 (13 ms); > > ```; > ; > @arora-vidushi, here is some more debug output from the windows machine:; > ; > ```; > C:\Users\vvdebug\source\repos\root\out>C:\Users\vvdebug\source\repos\root\out\math\mathcore\test\Debug\CladDerivatorTests.exe --gtest_filter=""CladDerivator.logx6""; > Running main() from C:\Users\vvdebug\source\repos\root\out\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; > Note: Google Test filter = CladDerivator.logx6; > [==========] Running 1 test from 1 test suite.; > [----------] Global test environment set-up.; > [----------] 1 test from CladDerivator; > [ RUN ] CladDerivator.logx6; > (const char *) ""double l6_d2arg0(double x) {; > double _d_x = 1;; > double _d__d_x = 0;; > double _d_x0 = 1;; > clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > _t0 = Log10_pushforward_pushforward(x, _d_x0, _d_x, _d__d_x);; > ValueAndPushforward<double, double> _d__t0 = _t0.pushforward;; > ValueAndPushforward<double, double> _t00 = _t0.value;; > return _d__t0.pushforward;; > }; > ""; > (clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > (*)(double, double, double, double)) Function @0xf1a02d0; > clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > Log10_pushforward_pushforward(double x, double d_x, double _d_x, double _d_d_x) {; > ValueAndPushforward<double, double> _t0 = clad::custom_derivatives::TMath::Log10_pushforward(x, _d_x);; > clad:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1402636544:2247,test,test,2247,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1402636544,1,['test'],['test']
Testability,> we need a unix platform with clang10. On my machine I test with `-Dcxxmodules=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang`. But I have no idea if Jenkins has node with appropriate configuration,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618848281:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618848281,1,['test'],['test']
Testability,"> we only need to make sure that we never have statements spanning more than one line. we control the generation of that code, so that should not happen/tests will break noisily and we can fix them if it happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328#issuecomment-977875623:153,test,tests,153,https://root.cern,https://github.com/root-project/root/pull/9328#issuecomment-977875623,1,['test'],['tests']
Testability,"> well unless we really still have:; > ; > > which creates as TTimer that is somehow lost during the TObjLink creation.; > ; > do we?. Well, that's what I suspect based on the Helgrind log, because Printf creates a TThreadTimer and then it's racing with NewLink:. ![image](https://user-images.githubusercontent.com/10653970/124826897-abb70c80-df75-11eb-9811-3696dbe32965.png). (Side note: the NewLink function appears also in several places in valgrind-root.supp, so that a related memory leak might be hidden.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875923579:185,log,log,185,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875923579,1,['log'],['log']
Testability,> what I want to hear from you is whether the change in log channel name is okay for you:. Fine with me,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-738846611:56,log,log,56,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-738846611,1,['log'],['log']
Testability,"> what I want to hear from you is whether the change in log channel name is okay for you:. Yes, one can change names as you propose. Up to now they was used for error messages, where source of problem can be seen anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-738841251:56,log,log,56,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-738841251,1,['log'],['log']
Testability,> what tests would you like to see?. At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6960#issuecomment-747600325:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/6960#issuecomment-747600325,2,['test'],['tests']
Testability,"> will try to report the repr issue separately. Thanks for investing your time here, much appreciated! I still want to debug this test failure here, so please leave this open independently of the progress you're making on the ATLAS side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1547262445:130,test,test,130,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1547262445,1,['test'],['test']
Testability,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713606991:320,test,test,320,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713606991,2,['test'],['test']
Testability,"> 🤔 Just to understand, is it a known real leak or a false positive?. It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-1814808988:1051,test,tests,1051,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1814808988,2,['test'],['tests']
Testability,">, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py') at remote 0x7faec0f08c10>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), co=0x7faec0dc55b0, tstate=0xbea650) at Python/pythonrun.c:1221; #17 run_mod (mod=<optimized out>, filename=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564100129:30979,test,test,30979,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564100129,1,['test'],['test']
Testability,">, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py') at remote 0x7faec0f08c10>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faec0ef4860>, '__file__': '/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', '__cached__': None, 'ROOT': <ROOTFacade(__name__='ROOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), start=0x101, filename='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', fp=0xc827e0) at Python/pythonru",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564100129:35558,test,test,35558,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564100129,1,['test'],['test']
Testability,">. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target; - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled; - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined; - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:; - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS); - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries); - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:; ```cmake; ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx; $<TARGET_OBJECTS:Clib>; $<TARGET_OBJECTS:ClingUtils>; $<TARGET_OBJECTS:Dictgen>; $<TARGET_OBJECTS:Foundation_Stage1>; LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}; NOINSTALL); ```; I link against the `Clib` object library, but ignores any target properties like for example this line:; ```cmake; # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152; if(libbsd); target_link_libraries(Clib PUBLIC LIBBSD::libbsd); endif(); ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #12152.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12154:1973,test,tested,1973,https://root.cern,https://github.com/root-project/root/pull/12154,1,['test'],['tested']
Testability,">0.004), x,y=( 4.7875, 4.5633)	ref: y= 4.673. [Nearest point from ref: j=37	x,y=( 4.7875, 4.673) ]	range=12.699; RooCurve::isIdentical[ 38] Y tolerance exceeded ( 0.0092771>0.004), x,y=( 4.83, 5.1366)	ref: y= 5.2544. [Nearest point from ref: j=38	x,y=( 4.83, 5.2544) ]	range=12.699; RooCurve::isIdentical[ 39] Y tolerance exceeded ( 0.010568>0.004), x,y=( 4.915, 6.3583)	ref: y= 6.4925. [Nearest point from ref: j=39	x,y=( 4.915, 6.4925) ]	range=12.699; RooCurve::isIdentical[ 40] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooCurve::isIdentical[ 41] Y tolerance exceeded ( 0.011872>0.004), x,y=( 5, 7.6719)	ref: y= 7.8227. [Nearest point from ref: j=40	x,y=( 5, 7.8227) ]	range=12.699; RooUnitTest ERROR: comparison of object RooCurve::nll_Norm[sigma_g2] fails comparison with counterpart in reference RooPlot rf605_plot2; Test 41 : Profile Likelihood operator............................FAILED; Test 42 : NLL error handling.....................................OK; Test 43 : Fit Result functionality...............................OK; Test 44 : Chi^2 fit to X-Y dataset...............................OK; Test 45 : Efficiency operator p.d.f. 1D..........................OK; Test 46 : Efficiency operator p.d.f. 2D..........................OK; Test 47 : Efficiency product operator p.d.f......................OK; Test 48 : Amplitude sum operator p.d.f...........................OK; Test 49 : Linear morph operator p.d.f............................OK; Test 50 : Histogram based p.d.f.s................................OK; Test 51 : Kernel estimation p.d.f.s..............................OK; Test 52 : B Physics p.d.f.s......................................OK; Test 53 : Automated MC studies...................................OK; Test 54 : MC Study with chi^2 calculator.........................OK; Test 55 : MC Study with param rand. and Z calc...................OK; Test 56 : MC Studies with aux. obs. constrain",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:11117,Test,Test,11117,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,1,['Test'],['Test']
Testability,">; > and XROOTD seems to have built successfully, but there seems to be some other errors. The configure step said that the ROOT version is 6-27-01. [build_out.log](https://github.com/root-project/root/files/8626646/build.log) [build_err.log](https://github.com/root-project/root/files/8626647/build_err.log). @eguiraud seems similar to https://root-forum.cern.ch/t/error-for-installing-root-source-in-ubuntu-22-04/49803/21",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10518#issuecomment-1117901009:160,log,log,160,https://root.cern,https://github.com/root-project/root/issues/10518#issuecomment-1117901009,4,['log'],['log']
Testability,">> Also it is just contrary to TPad::Add(). > Not enough reason for me to make a new public method just to provide some vague simmetry. It is. One creates canvas, store image, remove and delete temporary object, create next image or let canvas running.; We did not have such interface up to now - therefore we did not provide such demos. Now it can be possible. >> TPad::AddFirst is not used by this PR, but can appear later. > Again from this description everything sounds internal to ROOT only and not something the user should care about. . No, it can be very well used in tutorials. Manipulating primitives order was not easy before. With such few methods it will be easy. . > Fine, not too big of an issue I guess, still Register or Adopt sound better but that is probably just my own opinion. I prefer to stay in `ROOT6`/`TList` logic and naming used there. `TPad` is just list of primitives and can be considered so in tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15822#issuecomment-2162878879:835,log,logic,835,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162878879,1,['log'],['logic']
Testability,">It does not work if I specify sources directly in the ROOT_LINKER_LIBRARY.; Seems to be, ROOT compiler options are not applied for '*.cpp' files. That's odd. Ok, let's keep the object libraries then. If this PR is already in a satisfactory state for you, then I will test locally and once I'm done I will rebase and merge. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-365923832:268,test,test,268,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-365923832,1,['test'],['test']
Testability,">SetMarkerStyle(20);; 	g->Draw(""AP"");; 	// h->Draw(""HIST"");; 	c->Print(""test.png"");. return 0;; }; ```; compiling:; * g++ -std=c++11 -fPIC --shared -o inc.so inc.cxx; * g++ -std=c++11 -o test test.cxx inc.so `root-config --libs --glibs --cflags` && ./test; ; result:; ```; ======= Backtrace: =========; /lib64/libc.so.6(+0x80f87)[0x7fd6589a6f87]; /lib64/libc.so.6(+0x8155e)[0x7fd6589a755e]; /lib64/libfreetype.so.6(+0x3ea1c)[0x7fd65771ea1c]; /lib64/libfreetype.so.6(+0x3fa02)[0x7fd65771fa02]; /lib64/libfreetype.so.6(+0x1fd4c)[0x7fd6576ffd4c]; /lib64/libfreetype.so.6(FT_Done_Face+0xa1)[0x7fd6576ffe51]; /root/6.08.00/lib/libGraf.so.6.08(_ZN3TTF7CleanupEv+0x5e)[0x7fd65bb62a7e]; /lib64/libc.so.6(__cxa_finalize+0x9a)[0x7fd65896000a]; /root/6.08.00/lib/libGraf.so.6.08(+0x638a3)[0x7fd65baef8a3]; ======= Memory map: ========; 00400000-0040b000 r-xp 00000000 00:2e 3242707291 /work/test/test; 0060a000-0060b000 r--p 0000a000 00:2e 3242707291 /work/test/test; 0060b000-0060c000 rw-p 0000b000 00:2e 3242707291 /work/test/test; 01644000-02e78000 rw-p 00000000 00:00 0 [heap]; 7fd638000000-7fd638021000 rw-p 00000000 00:00 0 ; 7fd638021000-7fd63c000000 ---p 00000000 00:00 0 ; 7fd63ffc8000-7fd6400c3000 r--p 00000000 00:32 432514122 /root/6.08.00/fonts/FreeSans.otf; 7fd6400c3000-7fd640142000 r-xp 00000000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640142000-7fd640342000 ---p 0007f000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640342000-7fd640344000 r--p 0007f000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640344000-7fd640346000 rw-p 00081000 00:32 432291140 /root/6.08.00/lib/libHistPainter.so.6.08.00; 7fd640346000-7fd640347000 rw-p 00000000 00:00 0 ; 7fd640742000-7fd640744000 r-xp 00000000 08:02 80985 /usr/lib64/libXau.so.6.0.0; 7fd640744000-7fd640944000 ---p 00002000 08:02 80985 /usr/lib64/libXau.so.6.0.0; 7fd640944000-7fd640945000 r--p 00002000 08:02 80985 /usr/lib64/libXau.so.6.0.0; 7fd640945000-7fd640946000 rw-p 00003000 08:02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256:1799,test,test,1799,https://root.cern,https://github.com/root-project/root/issues/8256,6,['test'],['test']
Testability,"?? () from /lib/x86_64-linux-gnu/libc.so.6; [229504:internal-dpl-aod-reader]: #2 0x00007fe1969d55bc in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x89e2a0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/unix/src/TUnixSystem.cxx:2120; [229504:internal-dpl-aod-reader]: #3 TUnixSystem::StackTrace (this=0x89e2a0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/unix/src/TUnixSystem.cxx:2411; [229504:internal-dpl-aod-reader]: #4 0x00007fe1968ab27a in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=0x3ab1bb0 ""fExtraBasket == nullptr && \""fExtraBasket should have been set to nullptr by GetFreshBasket\"" violated at line 1523 of `/mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-""...) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/base/src/TErrorDefaultHandler.cxx:174; [229504:internal-dpl-aod-reader]: #5 0x00007fe196962149 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fe198af8752 """", fmt=0x7fff2c9644d0 ""\021\001"", ap=0x7fff2c9644c0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/ubuntu2004_x86-64/GCC-Toolchain/v10.2.0-alice2-1/include/c++/10.2.0/bits/basic_string.h:186; [229504:internal-dpl-aod-reader]: #6 0x00007fe196962b68 in Fatal (location=location; [229504:internal-dpl-aod-reader]: entry=0x7fe198af8752 """", fmt=<optimized out>) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/foundation/src/TError.cxx:249; [229504:internal-dpl-aod-reader]: #7 0x00007fe198a575a2 in TBranch::GetBulkEntries (this=0x15b3670, entr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-913117485:1209,sandbox,sandbox,1209,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-913117485,2,['sandbox'],['sandbox']
Testability,?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5860-ROOT-performance-centos7-multicore-default&date=2020-06-12).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_dataframe_df102_NanoAODDimuonAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_dataframe_df102_NanoAODDimuonAnalysis/); - [projectroot.runtutorials.tutorial_dataframe_df101_h1Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); - [projectroot.runtutorials.tutorial_tmva_tmva103_Application](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/runtutorials/tutorial_tmva_tmva103_Application/); - [projectroot.test.test_stressroofit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/test/test_stressroofit/); - [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/test/test_stressIOPlugins_xroot/); - [projectroot.test.test_stressroofit_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot/test/test_stressroofit_interpreted/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treeprocessormt_remotefiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86621/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860#issuecomment-643211031:1295,test,testReport,1295,https://root.cern,https://github.com/root-project/root/pull/5860#issuecomment-643211031,13,['test'],"['test', 'testReport']"
Testability,"@ namespace cling {; // Enable incremental processing, which prevents the preprocessor destroying; // the lexer on EOF token.; PP.enableIncrementalProcessing();; -; - m_LookupHelper.reset(new LookupHelper(new Parser(PP, SemaRef,; - /*SkipFunctionBodies*/false,; - /*isTemp*/true), this));; + Parser* TempParser = new Parser(PP, SemaRef,/*SkipFunctionBodies*/false,/*isTemp*/true);; + TempParser->Initialize();; + m_LookupHelper.reset(new LookupHelper(TempParser, this));; if (!m_LookupHelper); return;; ; diff --git a/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp b/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; index f3d7ec83d3..bbb2c21268 100644; --- a/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/Parse/Parser.cpp; @@ -452,10 +452,11 @@ Parser::~Parser() {; ///; void Parser::Initialize() {; // Create the translation unit scope. Install it as the current scope.; + if (!IsTemporary) {; assert(getCurScope() == nullptr && ""A scope is already active?"");; EnterScope(Scope::DeclScope);; Actions.ActOnTranslationUnitScope(getCurScope());; -; + }; // Initialization for Objective-C context sensitive keywords recognition.; // Referenced in Parser::ParseObjCTypeQualifierList.; if (getLangOpts().ObjC) {; @@ -535,10 +536,12 @@ void Parser::Initialize() {; Ident_module = PP.getIdentifierInfo(""module"");; }; ; + if (!IsTemporary) {; Actions.Initialize();; ; // Prime the lexer look-ahead.; ConsumeToken();; + }; }; ; void Parser::LateTemplateParserCleanupCallback(void *P) {; ```. I think the JIT is really overwriting the stack:; ```; ==20514== Invalid read of size 1; ==20514== at 0x4500198: TUrl::SetUrl(char const*, bool) (TUrl.cxx:115); ==20514== by 0x44FFDD7: TUrl::TUrl(char const*, bool) (TUrl.cxx:78); ==20514== by 0x44D635F: TSystem::FindHelper(char const*, void*) (TSystem.cxx:760); ==20514== by 0x46853BF: TUnixSystem::AccessPathName(char const*, EAccessMode) (TUnixSystem.cxx:1532); ==20514== by 0x1BDF028F: ???; ==20514=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-980788230:1367,assert,assert,1367,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-980788230,1,['assert'],['assert']
Testability,"@; #include ""TBufferJSON.h""; #include ""TEnv.h""; ; +#include ""TObject.h""; +; #include <algorithm>; #include <regex>; ; @@ -42,15 +44,15 @@ namespace Experimental {; ; class RBrowserDataCleanup : public TObject {; ; - RBrowserData &fData;; + RBrowserData *fData{nullptr}; //!; ; public:; - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}; + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}; + RBrowserDataCleanup() {} // Needed by ClassDefInline; ; - void RecursiveRemove(TObject *obj) override; - {; - fData.RemoveFromCache(obj);; - }; + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }; +; + ClassDefInline(RBrowserDataCleanup, 1);; };; }; }; @@ -67,7 +69,7 @@ public:; ; RBrowserData::RBrowserData(); {; - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);; + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);; R__LOCKGUARD(gROOTMutex);; gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());; }. ```. And the test gives even more errors then before:. ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023; 1548: @@ -14,5 +14,29 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine.; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization routine.; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638467226:1289,test,test,1289,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638467226,1,['test'],['test']
Testability,"@AdvaitDhingra can you provide a complete reproducer? Here is what I get with your `CMakeLists.txt` alone:; ```; C:\Users\bellenot\rootdev\AdvaitDhingra>cmake .; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.17763.; -- The C compiler identification is MSVC 19.24.28319.0; -- The CXX compiler identification is MSVC 19.24.28319.0; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Error at C:/Users/bellenot/build/release/RootMacros.cmake:442 (message):; Cannot find header Event.h to generate dictionary G__Event for. Did you; forget to set the INCLUDE_DIRECTORIES property for the current directory?; Call Stack (most recent call first):; CMakeLists.txt:7 (ROOT_GENERATE_DICTIONARY). -- Configuring incomplete, errors occurred!; See also ""C:/Users/bellenot/rootdev/AdvaitDhingra/CMakeFiles/CMakeOutput.log"".; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982#issuecomment-825601966:1728,log,log,1728,https://root.cern,https://github.com/root-project/root/issues/7982#issuecomment-825601966,1,['log'],['log']
Testability,"@AdvaitDhingra you can also compile ROOT locally and test your changes, instructions are at https://root.cern/install/build_from_source/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-777632928:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-777632928,1,['test'],['test']
Testability,"@ArifAhmed1995 I think you need to focus on making your code compile as the very first thing, because if it doesn't compile we cannot merge it. As I mentioned above, please test both with VecCore+Vc enabled and disabled on your local system. Since you had pushed more changes, I wanted to check if the problems were sorted out, but I see that they are not. I was waiting for at least the compilation to work before adding extra comments, but I will add comments now in any case. Some comments may be repeated from what we have already discussed on mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-405236310:173,test,test,173,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-405236310,1,['test'],['test']
Testability,"@Axel-Naumann , I have started a PR test here https://github.com/cms-sw/root/pull/157 . It will take few hours before we have the results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8449#issuecomment-862514950:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/8449#issuecomment-862514950,1,['test'],['test']
Testability,"@Axel-Naumann , can you please re-start the tests. Due to Jenkins' upgrade the last run was aborted",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5887#issuecomment-646485164:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/5887#issuecomment-646485164,1,['test'],['tests']
Testability,"@Axel-Naumann , for CMS tests, build directory is not available at runtime. Most of the times build and runtime jenkins jobs run on different machines. Also at build time cmssw external packages ( including `root`) are built on local disk and deployed on /cvmfs for runtime tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1139460820:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1139460820,2,['test'],['tests']
Testability,"@Axel-Naumann , looks like some latest development in v6.24 branch has fixed the hanging issue. I have tested https://github.com/root-project/root/commit/126c9c8627560f1169d60634aaf4d733568c8ccc (without #7767) and this time cmssw build was successful. We get runtime errors now, see the details here https://github.com/cms-sw/cmsdist/pull/6777#issuecomment-811478743 . You can find the crash log https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-a7de73/13897/runTheMatrix-results/135.4_ZEE_13+ZEEFS_13+HARVESTUP15FS+MINIAODMCUP15FS/step3_ZEE_13+ZEEFS_13+HARVESTUP15FS+MINIAODMCUP15FS.log. With your changes in #7767 ( on top of https://github.com/root-project/root/commit/126c9c8627560f1169d60634aaf4d733568c8ccc ) , things look in much better state. PR tests ( https://github.com/cms-sw/root/pull/153#issuecomment-811570082 ) show no build or run time errors. But we do see some comparison differences for our reconstruction code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-811653152:103,test,tested,103,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-811653152,4,"['log', 'test']","['log', 'tested', 'tests']"
Testability,"@Axel-Naumann , root v.6.24 branch is still broken for us. Testing root commit 0ae9f99 ( which is tip of v6.24 patches branch) generated multiple runtime errors [a] for us. @makortel @Dr15Jones is it something CMSSW related or root is causing this ?; Testing eda45838695204139e372d712b1d72c9d5370160 + https://github.com/cms-sw/root/pull/155/files looks good though [b] . Only difference is the addition commit https://github.com/root-project/root/commit/3480394c02a6335d271f95fcf160274811091155 , do you think 3480394c02a6335d271f95fcf160274811091155 might be causing these crashes?. [a] https://github.com/cms-sw/cmsdist/pull/6787#issuecomment-814302828; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-efd635/14020/addOnTests/pat1/cmsRun__data_cmsbld_jenkins_workspace_ib-run-pr-addon_CMSSW_11_3_ROOT624_X_2021-04-05-2300_src_PhysicsTools_PatAlgos_test_IntegrationTest_cfg.py.log. ```; cmsRun: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_11_3_ROOT624_X_2021-04-05-2300/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. ```. [b] https://github.com/cms-sw/root/pull/155#issuecomment-812869144",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814343554:59,Test,Testing,59,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814343554,5,"['Assert', 'Test', 'log', 'test']","['Assertion', 'Testing', 'log', 'tests']"
Testability,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13653#issuecomment-1750041376:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/13653#issuecomment-1750041376,1,['test'],['tests']
Testability,"@Axel-Naumann , v6.24 fix looks good for CMS . All tests passed https://github.com/cms-sw/root/pull/155#issuecomment-812869144",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-812888256:51,test,tests,51,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-812888256,1,['test'],['tests']
Testability,"@Axel-Naumann , which shell are you currently using, and **nproc** is a GNU core utility which is available default in every Linux distro and shell. If it's not running on your shell I assume you are using a non-Linux machine. ; In mac it's alternative is **sysctl -n hw.logicalcpu**, and in windows, it's **echo %NUMBER_OF_PROCESSORS%**",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5079#issuecomment-597554483:271,log,logicalcpu,271,https://root.cern,https://github.com/root-project/root/pull/5079#issuecomment-597554483,1,['log'],['logicalcpu']
Testability,"@Axel-Naumann , yes, for github actions, it makes sense to fail for every thing which should not happen either it is build or test failure.; My recommendation for not marking the job failed was for Jenkins type CI where a job failure should mean infrastructure issues which Jenkin's admins (or CI test developers) should look in to. Every other failure should be reported to the code developers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307#issuecomment-1543409404:126,test,test,126,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1543409404,2,['test'],['test']
Testability,"@Axel-Naumann . I implement most of your comments. There are two open questions.; 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. ; 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2487#issuecomment-415785518:107,log,logic,107,https://root.cern,https://github.com/root-project/root/pull/2487#issuecomment-415785518,1,['log'],['logic']
Testability,"@Axel-Naumann . One can build ROOT with xrootd 5, by many tests are failing afterwards.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-825652269:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-825652269,1,['test'],['tests']
Testability,"@Axel-Naumann 10.14 has 11.3.1, 10.15 has 12.4, and 11 has 12.4 as well. . @vgvassilev Just get bump-root-6.24.00 from git@github.com:chenrui333/homebrew-core.git somehow, I would use the GitHub command line app `gh`, but you can use vanilla git instead if you wish. I've pushed a build that should have useful logs; 10.14 I'm building with runtime modules off, 10.15+ with runtime modules on. So we'll have one of each possible outcome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-834487544:311,log,logs,311,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-834487544,1,['log'],['logs']
Testability,"@Axel-Naumann : I have rebuilt ROOT from scratch and attempted my above test case with; ```; LD_PRELOAD=/usr/lib64/libgandiva.so ./test; ```; which still gives me the same error:; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; : CommandLine Error: Option 'version' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; ```; Perhaps preloading individual LLVM libraries works, but with gandiva it certainly doesn't.; So unfortunately this patch is insufficient to solve my problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-570193874:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-570193874,2,['test'],['test']
Testability,"@Axel-Naumann : I think this patch is correct in any case, since the symbols should be hidden.; Unfortunately, it is not enough to solve our problem. My test case from #4668 still yields:; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; : CommandLine Error: Option 'version' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; ```; - The first line `LLVM SYMBOLS ARE EXPOSED....` is because the check in core/base/src/TROOT.cxx is not disabled, so this this is irrelevant. In fact, if your patch would work, this check should be removed.; - The second error `... inconsistency in registered....` however is the same problem we saw before, with the 2 LLVM instances clashing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-565367712:153,test,test,153,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-565367712,1,['test'],['test']
Testability,@Axel-Naumann ; Can you merge it before branching for 6.14; It passes root-test now,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1927#issuecomment-384955997:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/1927#issuecomment-384955997,1,['test'],['test']
Testability,@Axel-Naumann ; Do you understand why it fails with many python tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2652#issuecomment-423443397:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/2652#issuecomment-423443397,1,['test'],['tests']
Testability,@Axel-Naumann ; I tested but calling IsLibraryLoaded from IsLoaded didn't work because they are both taking `R__LOCKGUARD(gInterpreterMutex)` and it fails root_aclic_misc_assertROOT7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2128#issuecomment-394353100:18,test,tested,18,https://root.cern,https://github.com/root-project/root/pull/2128#issuecomment-394353100,1,['test'],['tested']
Testability,"@Axel-Naumann ; I think you wanted to comment to #1824 ? Comments are anyway welcome, but I'm cherry-picking commits from other prs which fix failing tests to here to see if they actually fix on server with allmodules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814#issuecomment-381993075:150,test,tests,150,https://root.cern,https://github.com/root-project/root/pull/1814#issuecomment-381993075,1,['test'],['tests']
Testability,"@Axel-Naumann ; ```cmake; if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU"" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 5 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6); # gcc 5 has a bug in that it fails to put its internal -lgcc into the right place when linking.; # We need it to check cpu flags in src/InitUtils.cxx; # Here, we add an explicit link instruction according to the workaround posted here:; # https://bugs.launchpad.net/ubuntu/+source/gcc-5/+bug/1568899; target_link_libraries(RooFitCore PRIVATE -lgcc_s -lgcc); endif(); ```; This is the code in `roofit/roofitcore/CMakeLists.txt` So the linker error is solved if we run this `target_link_libraries` in this machine. I could not run the tests in the machine because `roottest` was `OFF` and when I tried to switch it on I got this error ; ```sh; Failed to find Python module pytest: Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'pytest'; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find py_pytest (missing: PY_PYTEST); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /mnt/build/ws/BUILDTYPE/Release/LABEL/ROOT-fedora29/V/master/roottest/cmake/modules/RoottestMacros.cmake:1124 (find_package_handle_standard_args); /mnt/build/ws/BUILDTYPE/Release/LABEL/ROOT-fedora29/V/master/roottest/python/CMakeLists.txt:8 (find_python_module); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6855#issuecomment-732021171:702,test,tests,702,https://root.cern,https://github.com/root-project/root/issues/6855#issuecomment-732021171,1,['test'],['tests']
Testability,"@Axel-Naumann @amadio ROOTConfig.cmake looks now like this: https://gist.github.com/oshadura/43e0d5de7b25673ab646475c6d9189b8. [oksana@oksana-dellxps builds]$ grep -R ROOT_BINARY_DIR .; ../builds/ROOTConfig.cmake:set(ROOT_BINARY_DIR /home/oksana/CERN_sources/root-cxxmodules/builds/bin); ../builds/CMakeCache.txt:ROOT_BINARY_DIR:STATIC=/home/oksana/CERN_sources/root-cxxmodules/builds. [oksana@oksana-dellxps builds]$ grep -R ROOT_BIN_DIR .; ./ROOTConfig.cmake:set(ROOT_BIN_DIR /home/oksana/CERN_sources/root-cxxmodules/builds/bin); ./ROOTConfig.cmake:# Deprecated value, please don't use it and use ROOT_BIN_DIR instead.; ./ROOTConfig.cmake: find_program(ROOT_${_cpt}_CMD ${_cpt} HINTS ${ROOT_BIN_DIR}); ./test/CMakeLists.txt: set(ROOT_root_CMD ${ROOT_BIN_DIR}/root.exe); ./CMakeCache.txt:ROOT_BIN_DIR:INTERNAL=/home/oksana/CERN_sources/root-cxxmodules/builds/bin; ./installtree/ROOTConfig.cmake:get_filename_component(ROOT_BIN_DIR ""${_thisdir}/../bin"" ABSOLUTE); ./installtree/ROOTConfig.cmake: find_program(ROOT_${_cpt}_CMD ${_cpt} HINTS ${ROOT_BIN_DIR})",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-501662472:707,test,test,707,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-501662472,1,['test'],['test']
Testability,"@Axel-Naumann @bellenot I think I know why `mac11.0/cxx17` is failing.; I see it is requested in list of `all modules` that `pyroot3` should be enabled, while Python3 is not available/installed on machine: ; ```AXEL: all modules = alien;arrow;asimage;asserts;builtin_afterimage;builtin_cfitsio;builtin_davix;builtin_fftw3;builtin_freetype;builtin_ftgl;builtin_gl2ps;builtin_glew;builtin_gsl;builtin_lz4;builtin_lzma;builtin_nlohmannjson;builtin_openssl;builtin_openui5;builtin_pcre;builtin_tbb;builtin_unuran;builtin_vc;builtin_vdt;builtin_veccore;builtin_xrootd;builtin_xxhash;builtin_zlib;builtin_zstd;cefweb;clad;cocoa;cuda;cudnn;daos;dataframe;davix;dcache;dev;distcc;fcgi;fftw3;fitsio;fortran;gdml;gfal;gsl_shared;gviz;http;imt;libcxx;mathmore;minuit2;mlp;monalisa;mpi;mysql;odbc;opengl;oracle;pgsql;pyroot;pyroot2;pyroot3;pyroot_legacy;pythia6;pythia6_nolink;pythia8;qt5web;r;roofit;shadowpw;spectrum;sqlite;ssl;test_distrdf_pyspark;tmva;tmva-cpu;tmva-gpu;tmva-pymva;tmva-rmva;tmva-```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8336#issuecomment-870516897:251,assert,asserts,251,https://root.cern,https://github.com/root-project/root/pull/8336#issuecomment-870516897,1,['assert'],['asserts']
Testability,"@Axel-Naumann @bellenot I'm not familiar enough with the test suite to know if these failed tests are relevant. From looking at [`tutorials/rcanvas/df105.py`](https://github.com/root-project/root/blob/d6104649df2fea76793a4b3d59d9d8dc63130167/tutorials/rcanvas/df105.py), and that you approved this PR, I assume no, but I thought I'd ask if there's anything else that you need me to look at.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10025#issuecomment-1059836360:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/10025#issuecomment-1059836360,2,['test'],"['test', 'tests']"
Testability,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-825474655:44,test,tests,44,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655,3,"['Test', 'log', 'test']","['Test', 'log', 'tests']"
Testability,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14052#issuecomment-1817005601:91,log,log,91,https://root.cern,https://github.com/root-project/root/pull/14052#issuecomment-1817005601,1,['log'],['log']
Testability,@Axel-Naumann @pcanal Can we be sure that this does not break something? Can someone follow the full logic behind this member?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2362#issuecomment-407751760:101,log,logic,101,https://root.cern,https://github.com/root-project/root/pull/2362#issuecomment-407751760,1,['log'],['logic']
Testability,"@Axel-Naumann @pcanal here we go, although I'm 99% sure that we're already exercising the code paths from various other ROOT IO tests, but more can certainly never hurt :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-829917210:128,test,tests,128,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-829917210,1,['test'],['tests']
Testability,@Axel-Naumann @vgvassilev @amadio @pcanal can you help please to review this PR? (@vgvassilev thanks for doing it already). I will test this PR now with cxxmodules and PCH and let you know if there are any problems.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-603727173:131,test,test,131,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-603727173,1,['test'],['test']
Testability,"@Axel-Naumann As of 2 years ago, it was not working on linux between the JIT and the compiled code. Our test suites may or may not be exercising this, debugging it is hard. If the the C++ standard now says ""typeinfo must work across all compilation unit"" then we are good from that standard on. If not ... well absence of test failures says either we are not testing it either it is fixed. The ""extra"" requirement is because it is ""hard"" to debug (very not obviously related failure, you will first get side-tracked thinking there is some subtle (because valgrind might not complain) memory usage issue).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-812100227:104,test,test,104,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-812100227,3,['test'],"['test', 'testing']"
Testability,@Axel-Naumann Could you please take a final look and merge? I believe this PR fixes [ROOT-8244](https://sft.its.cern.ch/jira/browse/ROOT-8244). I tested with `make` on KNL with 256 threads and on a dual-socket Xeon machine (72 threads) and don't see race conditions anymore. @Teemperor Thanks for fixing this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/752#issuecomment-314714989:146,test,tested,146,https://root.cern,https://github.com/root-project/root/pull/752#issuecomment-314714989,1,['test'],['tested']
Testability,"@Axel-Naumann Hi, it seems I got very similar errors as yesterday. Here is the information.; [build_err.log](https://github.com/root-project/root/files/11328201/build_err.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1522648822:104,log,log,104,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1522648822,2,['log'],['log']
Testability,"@Axel-Naumann I am not able to write a sfinae-friendly version of `CallableTraits`. As far as I understand, your proposed usage would be the following:. ```c++; template<typename T, std::size_t N> ; void foo(std::array<T,N> a) { return; }; ; template<typename F, typename R = typename CallableTraits<F>::ret_type> ; void foo(F f) { return; } ; ; int main() { ; foo(std::array<int,1>{1}); // overload #2 is SFINAE'd out; foo([]() { return std::array<int,1>{1}; }); // overload #1 does not apply ; return 0; ; } ; ```. The self-contained snippet [attached](https://github.com/root-project/root/files/1082588/testcallabletraits.txt) was my playground to try and make this work, with no success. In principle I would like to have an empty `CallableTraits` as the most generic object, and then partially specialise for the types `T` that have `T::operator()`, but afaik it's not possible to partially specialise on properties of a type. The second idea was writing two mutually exclusive (SFINAE-wise) `template<typename T> CallableTraits`, an empty one for all types without `operator()`, and the usual one for types with `operator()`, but I don't know how to write a SFINAE expression that answers the question ""does T have operator()?"" with a boolean. It's very possible that this would be trivial with concepts. Any suggestion is super welcome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/636#issuecomment-309220250:606,test,testcallabletraits,606,https://root.cern,https://github.com/root-project/root/pull/636#issuecomment-309220250,1,['test'],['testcallabletraits']
Testability,"@Axel-Naumann I am not sure I'm using the right spell to disable the failing test case on M1, please let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9991#issuecomment-1055190034:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/9991#issuecomment-1055190034,1,['test'],['test']
Testability,"@Axel-Naumann I am testing it on Mac OS X as well now (last time, to be sure my PR will fix problem)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5238#issuecomment-605117936:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/5238#issuecomment-605117936,1,['test'],['testing']
Testability,"@Axel-Naumann I can reproduce failures on my machine...; Here is quick reproducer:; https://github.com/root-project/root/blob/master/tree/treeplayer/test/treeprocmt/treeprocessormt_remotefiles.cxx#L13-L15; ```; root [1] auto fname = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root"";; root [2] auto f = std::unique_ptr<TFile>(TFile::Open(fname));; root [3] f; (std::unique_ptr<TFile, std::default_delete<TFile> > &) std::unique_ptr -> nullptr; root [4]; ```; broken xrootd version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-845206796:149,test,test,149,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-845206796,1,['test'],['test']
Testability,"@Axel-Naumann I discussed the changes with @lmoneta . If the tests are green, this PR is ready to go!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3867#issuecomment-496927419:61,test,tests,61,https://root.cern,https://github.com/root-project/root/pull/3867#issuecomment-496927419,1,['test'],['tests']
Testability,@Axel-Naumann I tested your fix with my CUDA system. The segmentation error is gone and all tests passes. Thanks for fixing it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7433#issuecomment-800217829:16,test,tested,16,https://root.cern,https://github.com/root-project/root/issues/7433#issuecomment-800217829,2,['test'],"['tested', 'tests']"
Testability,@Axel-Naumann I thought everything was ok but then it tells me that these tests fail. Do you know why?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8613#issuecomment-878895895:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/8613#issuecomment-878895895,1,['test'],['tests']
Testability,@Axel-Naumann I updated the commit log to reflect that Cling's issue template is based off of ROOT's issue template.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7815#issuecomment-820437182:35,log,log,35,https://root.cern,https://github.com/root-project/root/pull/7815#issuecomment-820437182,1,['log'],['log']
Testability,"@Axel-Naumann I will merge after refactoring the tests then. One topic that I am not addressing in the PR is what should happen if the user gets an iterator, possibly uses it, then loads a new entry and tries to keep using the old iterator.; We could document that iterators on a certain entry are to be considered invalidated when the entry is switched, but _actually_ invalidating the iterators would be a bit cumbersome (and beyond the scope of this PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259#issuecomment-342938316:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/1259#issuecomment-342938316,1,['test'],['tests']
Testability,"@Axel-Naumann I've updated the patch to use `TUrl` and always redirect. I updated the code comment and release notes to match. The way to disable the redirection then will be to set `TFile.CrossProtocolRedirects` to `0` in `rootrc`. Now the behavior should be consistent between plain `TFile::Open` calls and `TChain`. @pcanal I tried moving the code after line 4057 and using `expandedUrl` but it started showing errors like this when using `TChain`:; ```; Error in <TNetXNGFile::Open>: [ERROR] Server responded with an error: [3001] Required argument not present; ```. So I moved it back where it was before and use only the input `url` to `TFile::Open` as is. I tested that this now works both for plain `TFile::Open` calls as well as with `TChain` and the redirection always happens as long as the file being opened is on EOS. The problem was that the `exapandedUrl` sometimes contained only the base EOS management URL, which broke it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1310051645:665,test,tested,665,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1310051645,1,['test'],['tested']
Testability,"@Axel-Naumann Just to make sure: is anything required of me right now or will you review and diagnose the problems yourself when you have the time? If the former, would you please inform me how to get a CERN account which seems to be mandatory in order to access the build logs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9288#issuecomment-972831538:273,log,logs,273,https://root.cern,https://github.com/root-project/root/pull/9288#issuecomment-972831538,1,['log'],['logs']
Testability,"@Axel-Naumann Many thanks for the detailed and friendly reply! :+1: . > Do you have a proposal for the latter? We can add a new boolean constructor argument, `failOnUnknownArgs = false` which we set to `true` in ROOT. Indeed, I believe the additional constructor argument is best. ; The only other solution which comes to mind (if it would not be possible to add a parameter) would be to (once more) use magic numbers for the `numOptions` parameter (similar to how `TApplication` ignores `argc` and `argv` if `numOptions==-1`), but that is certainly not a design pattern leading to modern, readable code, so better not spread it more ;-). ; `failOnUnknownArgs` sounds like a great choice of name, it clarifies the intent clearly. . > It would be wonderful to have that as unit test in `core/rint/test` [...]. It seems this does already exist, and has a unit test checking that errors are producted by `TRint` if unrecognitzed options are encountered ;-). Still, it seems I lack sufficient experience with `gtest`, since I don't understand why (for example) `TRint` with unsupported arguments does not `Terminate()` the test — so it's unclear to me how to write a test checking that it does not actually try to `Terminate()` when provided with a to-be-added `failOnUnknownArgs = false`. . In pseudo-steps, I think possible changes / additions to the existing test in `core/rint/test/TRintTests.cxx` to cover the use case as completely as possible could be:; 1. The existing test should be changed to set `failOnUnknownArgs = true` (after that is implemented). ; 2. A second test could be added, not setting `failOnUnknownArgs` (i.e. the default of `false` is used). This test then needs to check that no `stderr` is produced, and `Terminate()` is not called (here I'm unsure how to do these with `gtest`). ; 3. A third test could try to do the following, for complete coverage of the use case:; i. Create a `TRint (let's name it `myApp for simplicity here)`, passing in supported and unsupported option",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1064634456:777,test,test,777,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1064634456,3,['test'],['test']
Testability,@Axel-Naumann The failure on ROOT-ubuntu16/nortcxxmod don't seem related to this PR but rather to the llvm 9 update:; ```; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for testobject.h; requested to autoload type TestObj; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for testobjectderived.h; requested to autoload type TestObjDerived; ```; and similar.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-786308076:210,test,testobject,210,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-786308076,4,"['Test', 'test']","['TestObj', 'TestObjDerived', 'testobject', 'testobjectderived']"
Testability,@Axel-Naumann The first assert should be safe because we directly dereference the pointer one line later. We can also add a `if(Modules) {}` around the other code to double-check.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1036#issuecomment-331438950:24,assert,assert,24,https://root.cern,https://github.com/root-project/root/pull/1036#issuecomment-331438950,1,['assert'],['assert']
Testability,@Axel-Naumann The test failure seems both random and unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9764#issuecomment-1026392407:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/9764#issuecomment-1026392407,1,['test'],['test']
Testability,@Axel-Naumann This is great news ! Thank you for this insight.; I would be happy to test it as soon as it is released (or available),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13352#issuecomment-1660303040:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1660303040,1,['test'],['test']
Testability,@Axel-Naumann We reduced the testing matrix to 8 jobs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6720#issuecomment-720109651:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/6720#issuecomment-720109651,1,['test'],['testing']
Testability,"@Axel-Naumann Well, @pcanal disagrees. Philippe wants to just add `fCanLoadClassInfo = kFALSE;` right after [line 1413 of TClass.cxx](https://github.com/root-project/root/blob/master/core/meta/src/TClass.cxx#L1413), so that the calls to `LoadClassInfo()` which are guarded by `if (fCanLoadClassInfo)` are never made. However, I am not sure this change is safe yet. That said, we surely need to fix this problem (given the difference seen in VTune), and I will keep working on a solution and will probably open a new pull request with either this change or similar changes after enough testing to ensure that everything is ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-310631782:585,test,testing,585,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-310631782,1,['test'],['testing']
Testability,"@Axel-Naumann You said this very nicely. That's basically my questions ;); Or also: How shall we treat such dependencies in tutorial consistently? In tests, we agreed on ""just import and fail"". Here, we still have the option. (Although, we still want to return a non-zero value for the test coverage. That's no question!)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397#issuecomment-616461627:150,test,tests,150,https://root.cern,https://github.com/root-project/root/pull/5397#issuecomment-616461627,2,['test'],"['test', 'tests']"
Testability,"@Axel-Naumann after tests failed in unrelated place, I've rebased and push-forced into this branch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/463#issuecomment-289422519:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/463#issuecomment-289422519,1,['test'],['tests']
Testability,@Axel-Naumann and I came up with a location where the new header should live in: `test/unit_testing_support`. Let us know if you can think of a better place to put it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-629078504:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-629078504,1,['test'],['test']
Testability,"@Axel-Naumann by `This error is currently causing some developments for the LHCb experiment to be on stand-by` I just wanted to point out that this is a problem affecting the software developments of one of the LHC experiments (just in case you increase the priority of them rather than of other general issues). I also agree that the most straight-forward solution to us is changing the names of those functions. However, I have been always surprised that the ROOT interpreter includes the ""dangerous"" `using namespace std;` line, and I wonder if there is a way to avoid that (like via an instruction that can be passed to the interpreter). An important note is that the example above does not entirely reproduce the error that we see. We have run into a situation where `root -l -q test.cpp+` compiles and runs fine (also with `g++`) but `root -l -q test.cpp` doesn't, even in the situation where we include the line `using namespace std;`. I am currently struggling to create a more accurate minimal working example.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858441493:784,test,test,784,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858441493,2,['test'],['test']
Testability,"@Axel-Naumann do you know what means next on ROOT-fedora27/noimt:; `09:35:57 From https://github.com/oshadura/root; 09:35:57 * [new branch] alfonso-zst-final -> oshadura-alfonso-zst-final; 09:35:57 Auto packing the repository in background for optimum performance.; 09:35:57 See ""git help gc"" for manual housekeeping.; 09:35:57 error: The last gc run reported the following. Please correct the root cause; 09:35:57 and remove .git/gc.log.; 09:35:57 Automatic cleanup will not be performed until the file is removed.; 09:35:57 ; 09:35:57 warning: There are too many unreachable loose objects; run 'git prune' to remove them.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-540964530:434,log,log,434,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-540964530,1,['log'],['log']
Testability,"@Axel-Naumann thank you for configuring `liburing`, it looks like the tests ran and passed :) ; http://cdash.cern.ch/testDetails.php?test=2001040&build=11437. I am not sure about the python failures, and think the compiler warnings are maybe from using a newer gcc?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-668746900:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-668746900,3,['test'],"['test', 'testDetails', 'tests']"
Testability,"@Axel-Naumann thanks a lot for debugging! My suspicions were correct, I am building now debug ROOT build and will send PR as soon as possible...Interesting why we didn't catch it in any of the tests...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8155#issuecomment-843800754:193,test,tests,193,https://root.cern,https://github.com/root-project/root/issues/8155#issuecomment-843800754,1,['test'],['tests']
Testability,"@Axel-Naumann thanks having a look at this. . This is new code, so I guess so far we have just been lucky that we haven't created a similar conflict. . While a bit annoying, I think you are right. The most pragmatic workaround will be for us to rename that function. . If you don't mind, I've 2 follow-up questions on this.; - When first trying to debug this, I was having a hard time figuring out what is actually feed to cling. ; Is there a flag I can add to `root -l test.cpp` or `.x test.cpp` to spit out the preprocessed C++? . - What's the reason for the `using namespace std`? Is it possible to disable that for specific calls to root?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858406581:470,test,test,470,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858406581,2,['test'],['test']
Testability,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807#issuecomment-320092642:18,assert,assert,18,https://root.cern,https://github.com/root-project/root/pull/807#issuecomment-320092642,1,['assert'],['assert']
Testability,"@Axel-Naumann the tests on `fedora32` look good, and all the other linux nodes ""failed successfully"" during the configuration search :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-669936949:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-669936949,1,['test'],['tests']
Testability,"@Axel-Naumann yes, she has integrated and tested the changes in her local ROOT. She is now looking at how to deal with several overloads of the same method (I pointed her to `TClass::GetListOfMethodOverloads`). @vgvassilev sure: https://github.com/root-project/roottest/pull/354",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4098#issuecomment-512833634:42,test,tested,42,https://root.cern,https://github.com/root-project/root/pull/4098#issuecomment-512833634,1,['test'],['tested']
Testability,"@Axel-Naumann yes, testing is one of the motivations, in particular continuous testing to prevent future regressions (now we can check against an external implementation, instead of just copying the current values and declaring them ""known-good""). The other reason, and why I think this might provide benefit for users, is performance: The original RANLUX implementation by James (at least its implementation in GSL) needs 40 seconds to sum 1 million numbers at luxury level 3, `gsl_rng_ranlux389` (luxury level 4) takes a bit more than 1 minute. The same sequence takes less than 8 seconds with `RanluxppCompatEngineJamesP[34]`, respectively (due to the LCG, you don't even pay for higher decorrelation!).; The difference is even larger for `std::ranlux48` (used directly, not through `std::uniform_real_distribution` which eats up more than one number per iteration): 2m55s compared to 12 seconds with `RanluxppCompatEngineStdRanlux48`. And because we can generate the same sequence, switching the generator won't change the output of a simulation / analysis / ... (only the interface is slightly different). Plus the users get the possibility to skip in the very same sequence without generating the intermediate numbers. Now we could argue that all users should switch to `RanluxppEngine2048`, which on top of that provides better seeding and even higher decorrelation. On the other hand, the implementations above have been around for some time now and are so widely available (`std::ranlux{24,48}` comes with any C++ compiler) that they will remain used...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8383#issuecomment-857732772:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/8383#issuecomment-857732772,2,['test'],['testing']
Testability,"@Axel-Naumann, @pcanal, it is debatable if should make `projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_cppcompleter_doctest` work. In [TTabCom](https://github.com/root-project/root/blob/master/core/rint/src/TTabCom.cxx#L458) we explicitly request to iterate over the currently available names. With GMI on if we write `TH1<tab>` we will get TH1{C,D,F,I,K,S} (and not TH1Editor from gui/ged) because `TH1` caused loading of Hist.pcm. If we type `TH<tab>` we will get {THashList,THashTable,THashTableIter}. I am leaning towards fixing the reference file... Do you see another way out?. EDIT1: The same holds of making `projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_rdataframe_asnumpy` work as it does call `gInterpreter->Declare(""TLorentzVector v;"")` where the `TCling::Declare` [promises](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L2936-L2961) that interface to behave as ""a compiler"" -- turning the GMI intentionally off...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-640116570:675,test,test,675,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-640116570,1,['test'],['test']
Testability,"@Axel-Naumann, I tested and it finally works! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1051#issuecomment-331895692:17,test,tested,17,https://root.cern,https://github.com/root-project/root/pull/1051#issuecomment-331895692,1,['test'],['tested']
Testability,"@Axel-Naumann, do we have on any Jenkins nodes OCCI installed?; Is it tested by chance while I only can prove on my single platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7465#issuecomment-796753032:70,test,tested,70,https://root.cern,https://github.com/root-project/root/pull/7465#issuecomment-796753032,1,['test'],['tested']
Testability,"@Axel-Naumann, do you remember the use case or the test we had where this fix helps? Our current understanding is that it is not needed anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11076#issuecomment-1200472596:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/11076#issuecomment-1200472596,1,['test'],['test']
Testability,"@Axel-Naumann, looking at the build logs, it seems to me that there is a problem with the CI system: ""No space left on device"". Could you have a look at it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1509#issuecomment-357617029:36,log,logs,36,https://root.cern,https://github.com/root-project/root/pull/1509#issuecomment-357617029,1,['log'],['logs']
Testability,"@Axel-Naumann, seems that the test is not fixed by this patch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2716#issuecomment-425703573:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/2716#issuecomment-425703573,1,['test'],['test']
Testability,"@Axel-Naumann, we did experiment with this when developing the PR. So the performance should be better. We have two options here: a) test it on the same setup as the initial bug (eg afs); b) close the issue as resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7774#issuecomment-931943063:133,test,test,133,https://root.cern,https://github.com/root-project/root/issues/7774#issuecomment-931943063,1,['test'],['test']
Testability,@ChristianTackeGSI Thanks! And my question about test mas mostly for @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-801042926:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801042926,1,['test'],['test']
Testability,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-809579803:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-809579803,1,['test'],['test']
Testability,"@ChuanqiXu9, this looks good on our side. Performance is also within the same ballpark. If I run `/usr/bin/time -v root.exe -l -b -q tutorials/hsimple.C ` I get:. | | master | this pr | this PR w/o [ChuanqiXu9@2467fe7](https://github.com/ChuanqiXu9/root/commit/2467fe73721150e3b70bc17cb36e03507257c6e5); |--------|----------|:-------------:|------:|; user time: | 0.53s | 0.50s| 0.49s |; |rss: | 309436 | 310196 | 310192|. It is surprising that we lose 1MB somewhere between D41416 and your changes... @smuzaffar, can you test this PR against cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1980589145:522,test,test,522,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1980589145,1,['test'],['test']
Testability,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!!; I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. ; Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. ; There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-720398708:69,log,logging,69,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720398708,1,['log'],['logging']
Testability,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085#issuecomment-769661458:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/7085#issuecomment-769661458,1,['test'],['tests']
Testability,"@HadrienG2 Thank you very much for the very valuable contributions. A small improvement; in general we try to avoid ""merge commit"" whenever possible. (i.e. here the 2 commit should probably have been squashed before merging and/or the log of the 2nd commit be updated to reflect its purpose).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4707#issuecomment-567645257:235,log,log,235,https://root.cern,https://github.com/root-project/root/pull/4707#issuecomment-567645257,1,['log'],['log']
Testability,"@JavierCVilla , very nice. I agree with @bluehood - once this is tested, it can be merged immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2062#issuecomment-391126641:65,test,tested,65,https://root.cern,https://github.com/root-project/root/pull/2062#issuecomment-391126641,1,['test'],['tested']
Testability,"@LadaOndris : So that's a SWAN issue in that case. I am not a SWAN expert. . In SWAN, Is there any log window showing the ROOT error messages?. @etejedor : to you have an idea ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438501382:99,log,log,99,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438501382,1,['log'],['log']
Testability,"@MarkusFrankATcernch I'm checking this today, I'm still seeing mixes of different features in some commits. Ideally, the different commits will treat completely different features, and a test should be present where possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11868#issuecomment-1346307985:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/11868#issuecomment-1346307985,1,['test'],['test']
Testability,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11115#issuecomment-1206115515:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/11115#issuecomment-1206115515,1,['test'],['test']
Testability,"@MrCarroll we decided to clarify the meaning of this build option further by calling it `test_distrdf_pyspark`. Indeed, checking that pyspark is installed on the system and its dependencies are met at configuration time is needed only if it is foreseen that this feature will be actually used, e.g. when running the respective tests. In general, not all users will be interested in running distributed RDataFrame computations through pyspark, and for those who will the pyspark dependencies will be optional and only needed at runtime, not configuration time (i.e. what happens for a user of pyspark normally). The option is now OFF by default, could you please let me know if your builds run succesfully with this patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7413#issuecomment-793876470:327,test,tests,327,https://root.cern,https://github.com/root-project/root/pull/7413#issuecomment-793876470,1,['test'],['tests']
Testability,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707#issuecomment-719575323:294,test,testing,294,https://root.cern,https://github.com/root-project/root/pull/6707#issuecomment-719575323,1,['test'],['testing']
Testability,"@SimeonEhrig, I do not have a proper cuda device to test it -- but could you test cling (with llvm9) and cuda. I want to make sure that I did not forget anything during this migration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-775706862:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-775706862,2,['test'],['test']
Testability,"@VanyaBelyaev I can't reproduce with latest dev3, does it still fail for you?. I use this `CMakeLists.txt` on lxplus, after sourcing latest dev3:. ```; cmake_minimum_required(VERSION 3.16). project(TestProject). find_package(ROOT 6 CONFIG REQUIRED ); find_package(Python3 3.6.9 COMPONENTS Interpreter Development NumPy); ```. and the output I get for Python3 is:. ```; -- Found Python3: /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-opt/bin/python3.9 (found suitable version ""3.9.6"", minimum required is ""3.6.9"") found components: Interpreter Development NumPy Development.Module Development.Embed ; ```. There was maybe some temporary problem with the NumPy installation in dev3?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8942#issuecomment-914281135:198,Test,TestProject,198,https://root.cern,https://github.com/root-project/root/issues/8942#issuecomment-914281135,1,['Test'],['TestProject']
Testability,"@aandvalenzuela @smuzaffar if you have some cycles, can you test this change with CMSSW on AArch64? This should align the configurations with x86_64 to also enable `runtime_cxxmodules` by default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16401#issuecomment-2406939093:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/16401#issuecomment-2406939093,1,['test'],['test']
Testability,@aandvalenzuela can you interpret the results we got from your tests for us? Is this PR good to go from cmssw standpoint?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1624861569:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1624861569,1,['test'],['tests']
Testability,@aaronj0 @guitargeek can we do something about this? The tests are still failing for me :anguished:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2378480817:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2378480817,1,['test'],['tests']
Testability,"@agheata : Is this a new feature? If yes, is it urgent for 6.18? Also: wouldn't it be nicer to also have a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3781#issuecomment-490204712:107,test,test,107,https://root.cern,https://github.com/root-project/root/pull/3781#issuecomment-490204712,1,['test'],['test']
Testability,@agheata ; I am a bit hesitant to have one TGeoManager with materials created with different systems of units.... Concerning the comparison:; if PDG == TROOTMaterial and PDG == TGeant4Material then also: TROOTMaterial == TGeant4Material. Clearly both tests must succeed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198041487:251,test,tests,251,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198041487,1,['test'],['tests']
Testability,@agheata we have been able to test the path in 6.24 and everything seemed fine indeed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1246769298:30,test,test,30,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1246769298,1,['test'],['test']
Testability,"@albert-github ; That's a nice idea, and could be something to think about. I think we will anyway to build the whole documentation every night because:; - the various modules refer to each other a lot,; - we want to run all the code available in the doc. We have test suites to validate de software but the documentation is surely an extra one.; - now it takes ""only"" a night so it is still doable to build it daily. If at some point the building becomes unmanageable the approach you suggest might be a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-888362590:264,test,test,264,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888362590,1,['test'],['test']
Testability,@alja Can you confirm that all your tests working now?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4433#issuecomment-536095739:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/4433#issuecomment-536095739,1,['test'],['tests']
Testability,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. ; With the current master, I don't have the PCH dependency and I have : ; ```; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```; with your PR I have instead: ; ```; sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'; fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found; Segmentation fault (core dumped); ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1403728768:17,test,tested,17,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1403728768,5,['test'],"['test', 'tested']"
Testability,@amadio - something still seems to be busted in Jenkins. ```; -- TEST COMMAND -- ; cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils; /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root; -- BEGIN TEST OUTPUT --; shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory; dir; fot; hprof; hpx; hpxpy; ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-411130269:65,TEST,TEST,65,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-411130269,2,['TEST'],['TEST']
Testability,"@amadio . I have problem with roottest. I think, it has to do with new structure of cmake files. ; Here is output of cmake. ````; [shell] cmake /d/roottest (05.07. 12:23:42) !396 ; -- The C compiler identification is GNU 8.1.1; -- The CXX compiler identification is GNU 8.1.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for bitness: Found 64 bit architecture.; -- Found PythonInterp: /usr/bin/python3.6 (found version ""3.6.5"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found version ""2.7.15"") ; -- Scanning subdirectories for tests...; CMake Error at cmake/modules/RootCTestMacros.cmake:134 (ROOT_SHOW_OPTIONS):; Unknown CMake command ""ROOT_SHOW_OPTIONS"".; Call Stack (most recent call first):; root/meta/CMakeLists.txt:16 (ROOTTEST_ADD_TEST). -- Configuring incomplete, errors occurred!; See also ""/d/build/roottest/CMakeFiles/CMakeOutput.log"". ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2280#issuecomment-402678002:1013,test,tests,1013,https://root.cern,https://github.com/root-project/root/pull/2280#issuecomment-402678002,2,"['log', 'test']","['log', 'tests']"
Testability,@amadio ; As idea: ; Can we provide build option which enables maximal-available c++ standard and root7 when at least c++14 is there? Or simply enable root7 an all platforms where it make sense? ; Otherwise it always a chalenge to test root7 features on Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3831#issuecomment-493590447:231,test,test,231,https://root.cern,https://github.com/root-project/root/pull/3831#issuecomment-493590447,1,['test'],['test']
Testability,"@amadio Bertrand helped me to fix Windows side (thanks a lot @bellenot ), tests are finally passing and `root -l -e '#include <Math/CladDerivator.h>` works both in build dir and install dir. I think it is good to go!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3337#issuecomment-460328644:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/3337#issuecomment-460328644,1,['test'],['tests']
Testability,"@amadio I am getting next errors:. -- TEST COMMAND -- ; cd /mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray; /usr/bin/timeout -s USR2 270s /usr/bin/root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gROOT->SetMacroPath(""/mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -q -l -b /mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray/aclicModelWrite.C+; -- BEGIN TEST OUTPUT --; /usr/bin/timeout: failed to run command /usr/bin/root.exe: No such file or directory. ===============================. I am confused, it is because you uninstalled root binaries at fedora node?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502695412:38,TEST,TEST,38,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502695412,2,['TEST'],['TEST']
Testability,"@amadio I cannot reproduce locally and valgrind does not complain. A `Snapshot` test that snapshots 33 tiny files and subsequently deletes them timed out. It could be a vm with a network fs and an overloaded bandwidth?. The failures on 32bits are more worrying to me, but again hard to reproduce",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-397609468:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-397609468,1,['test'],['test']
Testability,"@amadio I finally got the `Vc` issue resolved. That took the bulk of time for the last two days. Now that it's set up correctly, there won't be such delays anymore. The most recent commit compiles with both `veccore=ON` or `OFF`. However, when I run `ctest -j4 -R math`, `testVectorizedTMath` does not run.; Is there some other file I need to edit other than `mathcore/test/CMakeLists.txt` for it to run ?; The test directly above that(in `CMakeLists.txt`) namely, `testGradientFittingUnit` executes fine.; ```; 47/111 Test #56: gtest-math-mathcore-test-GradientFittingUnit ....... Passed 161.63 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400992129:272,test,testVectorizedTMath,272,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400992129,6,"['Test', 'test']","['Test', 'test', 'test-GradientFittingUnit', 'testGradientFittingUnit', 'testVectorizedTMath']"
Testability,@amadio I hadn't seen it but I'll keep the test running for a while :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-397582268:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-397582268,1,['test'],['test']
Testability,"@amadio I know there is mac, but seems most of builds were failing with warnings ;( :; ```; /cvmfs/sft.cern.ch/lcg/releases/R/3.2.5-c8cca/x86_64-mac1012-clang90-opt/lib/R/include/R.h:40:10: warning: non-portable path to file '<RConfig.h>'; specified path differs in case from file name on disk [-Wnonportable-include-path]; ```; I cleaned my log accidentally.; It means build was ok?right? just warnings..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527#issuecomment-359038581:342,log,log,342,https://root.cern,https://github.com/root-project/root/pull/1527#issuecomment-359038581,1,['log'],['log']
Testability,"@amadio I see that the Windows 10 build is failing. Unfortunately I am being denied access to the page due to lack of proper credentials. Can you please post the link to error log here, if it's not much trouble ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-453330275:176,log,log,176,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-453330275,1,['log'],['log']
Testability,"@amadio My plan was to cherrypick if the test on 6.10 branch was successful. Some of the fixes are identical, some are different and you have few more I didn't see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/626#issuecomment-307420078:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/626#issuecomment-307420078,1,['test'],['test']
Testability,"@amadio Okay, I think it's been resolved now. I'm going through [rootbench](https://github.com/root-project/rootbench) and beginning to write the code for the benchmarks. At first glance there doesn't seem to be benchmarks for the scalar `TMath` functions. I guess they should be added as well including the vectorized ones. Am I right in thinking this ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-422575742:159,benchmark,benchmarks,159,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-422575742,2,['benchmark'],['benchmarks']
Testability,"@amadio Rebased. There was no content from previous PRs in here, but I understand the confusion. To clarify the now rebased ~6~ 8 commits:. - 8cc7dbb adds constructors to KahanSum that are necessary for serializing them and sending over a ZMQ socket.; - 2c35731 fixes up the zmq header installation, which was still being installed, so this is indeed a fixup of previous PRs.; - 359b585 is an optimization of part of MultiProcess. It isn't strictly necessary, but improves performance (I tried it out while trying to fix the bug in this PR), and it was something I wanted to do for a while already, so decided to keep it in.; - ee89d0c turns off building MultiProcess by default, as requested by you, @amadio.; - 84ac86e fixes a few remaining copyright/license headers that were introduced in #8700.; - 38c6de9 fixes some include dir variables in MultiProcess and RooFitZMQ.; - ~78aac0b~ 568ffdf is about building `MultiProcess` on Windows (includes @amadio's earlier review suggestion).; - ~5ab91be 0e21b70~ 1c5084f finally is what this PR is really about: adding the MP-based TestStatistics calculator classes and a README.md file with usage instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349#issuecomment-984509014:1078,Test,TestStatistics,1078,https://root.cern,https://github.com/root-project/root/pull/9349#issuecomment-984509014,1,['Test'],['TestStatistics']
Testability,@amadio Should I continue to add more functions or write the benchmarks for the ones now ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-422266504:61,benchmark,benchmarks,61,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-422266504,1,['benchmark'],['benchmarks']
Testability,"@amadio Thanks!. I have delved a bit into the recent changes, and I think it's this one:; https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833; `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. ; For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:; https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake; and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1815217164:368,log,logo,368,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1815217164,1,['log'],['logo']
Testability,"@amadio ah yes I remember those. look at line 242 of the cxx file. If the calculation of negative log likelihood failes, because the walk got out of bounds it sets the value very high so the algorithm turns away from this point. Minuit needed this error but in a MCMC minimizer it does not matter if it gets out of bounds. I forgot about that problem, the error messages are unnecessary. Thats why they are turned off at line 243. Sorry just turning off the error message was not a good idea, beginners error. Do you have a better idea how to solve that problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349219350:98,log,log,98,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349219350,1,['log'],['log']
Testability,@amadio basically I fixed a typo...added a little comment to the commit log.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4066#issuecomment-510083373:72,log,log,72,https://root.cern,https://github.com/root-project/root/pull/4066#issuecomment-510083373,1,['log'],['log']
Testability,"@amadio sorry, I lost your message and yes, I tested it works fine (even in case of root7)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3409#issuecomment-482631192:46,test,tested,46,https://root.cern,https://github.com/root-project/root/pull/3409#issuecomment-482631192,1,['test'],['tested']
Testability,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/767#issuecomment-316916733:73,test,tests,73,https://root.cern,https://github.com/root-project/root/pull/767#issuecomment-316916733,1,['test'],['tests']
Testability,"@amadio, I don't think that's true. It is my impression that the merge request is built against the latest master (something the build log output supports). So rebuilding a PR _does_ potentially build different code each time. (To clarify, the initial build failure was in `math/vecops/CMakeFiles/VecOps.dir/G__VecOps.cxx.o`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-385715531:135,log,log,135,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-385715531,1,['log'],['log']
Testability,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3279#issuecomment-455464750:195,test,tests,195,https://root.cern,https://github.com/root-project/root/pull/3279#issuecomment-455464750,5,['test'],"['test', 'tests']"
Testability,"@amadio, what tests are you running for MPI?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371482922:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371482922,1,['test'],['tests']
Testability,@amadio: sure for google test if this does not imply re-writing the entire exec but just reformulating the equality with tolerance.; @mato: with my comment I just wanted to remark that we may loose sensitivity on deviations deriving from factors different from the architecture on x86_64 builds. The 10 epsilons threshold in general is ok for physics performance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/498#issuecomment-293288109:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/498#issuecomment-293288109,1,['test'],['test']
Testability,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14077#issuecomment-1866781542:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/14077#issuecomment-1866781542,1,['test'],['test']
Testability,"@andresailer reports; ```; ...; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/TrackerPulseIOImpl.h; requested to autoload type IOIMPL::TrackerPulseIOImpl; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/TrackerRawDataIOImpl.h; requested to autoload type IOIMPL::TrackerRawDataIOImpl; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState:; Missing FileEntry for include/IOIMPL/VertexIOImpl.h; requested to autoload type IOIMPL::VertexIOImpl; Error in <TInterpreter::AutoParse>: Error parsing payload code for class EVENT::LCEvent with content:. #line 1 ""EVENT dictionary payload""; ...; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class EVENT::LCEvent is available even though it has a TClass initialization routine.; ```; and more, http://cdash.cern.ch/testDetails.php?test=16531307&build=211395 from `Test: LCIO_pyLCIO_import_test (Passed)` (cough cough) - this might be pre-existing before the llvm13 upgrade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11921#issuecomment-1357852969:1197,test,testDetails,1197,https://root.cern,https://github.com/root-project/root/pull/11921#issuecomment-1357852969,3,"['Test', 'test']","['Test', 'test', 'testDetails']"
Testability,"@andresailer, could you test this pr: https://github.com/root-project/root/pull/15043",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2017625791:24,test,test,24,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2017625791,1,['test'],['test']
Testability,"@andresailer, it looks like we have externally built Vc and we do not pass in the location of its header files. IIRC, we had the same issue for the cuda builds and we solved it by passing the include path in the env variable `ROOT_INCLUDE_PATH`. For example, something like that fixes the crash for me: `ROOT_INCLUDE_PATH=/build/sailer/testReprRoot/testLcgcmake/install/dev3/Vc/1.4.2/x86_64-centos7-gcc10-dbg/include/ root.exe -l -b -q `. In order to move forward this issue needs to be fixed on the LCG side. I am cc-ing @peremato as we did such a fix some time ago for the ROOT CUDA builds. I bet he knows where to add it as he already did it once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1025259524:336,test,testReprRoot,336,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1025259524,2,['test'],"['testLcgcmake', 'testReprRoot']"
Testability,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6684#issuecomment-713688119:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713688119,2,['test'],['test']
Testability,@arizzi Thanks for this patch!; Could you also add a test for this here https://github.com/root-project/root/blob/master/math/vecops/test/vecops_rvec.cxx ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14915#issuecomment-1985287781:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/14915#issuecomment-1985287781,2,['test'],['test']
Testability,"@arpi-r, I reverted your changes before https://root.cern.ch/gitweb/?p=root.git;a=commitdiff;h=2b8011b3e44fdf2463f8c57cc5d799f95704c2da since we found that on nighty builds where was enabled -Dr=ON, tests were failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3635#issuecomment-480166357:199,test,tests,199,https://root.cern,https://github.com/root-project/root/pull/3635#issuecomment-480166357,1,['test'],['tests']
Testability,"@arthur-tsang thanks for your contribution, perhaps you want to re-base to resolve the conflicts and we can test your PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/846#issuecomment-321295362:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/846#issuecomment-321295362,1,['test'],['test']
Testability,"@ashlaban, could we rebase this PR and test it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/53#issuecomment-292241793:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/53#issuecomment-292241793,1,['test'],['test']
Testability,"@axel, yes they will always go through the RootTestDriver.cmake because is using ROOT_ADD_TEST(...). The need to define LD_LIBRARY_PATH and PATH comes from dynamically loaded libraries and not to load the test executable. The test executable has the RPATH pointing to build tree. See for example:; ```; $ objdump -x math/mathcore/test/testSpecFuncErf | grep RPATH; RPATH /mnt/build/jenkins/workspace/root-nightly-master-imt/BUILDTYPE/Release/COMPILER/gcc49/LABEL/slc6/build/lib; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/451#issuecomment-292150207:205,test,test,205,https://root.cern,https://github.com/root-project/root/pull/451#issuecomment-292150207,4,['test'],"['test', 'testSpecFuncErf']"
Testability,"@axmat The test is still failing. It works fine on my machine, so maybe it is due to an old protobuf version installed on that machine. I will investigate it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8847#issuecomment-984697187:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/8847#issuecomment-984697187,1,['test'],['test']
Testability,@bastianbeischer Could you please rebase and push again so we can run Jenkins and test this? Thank you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1083#issuecomment-333819707:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/1083#issuecomment-333819707,1,['test'],['test']
Testability,"@bbockelm ; 1. I move signal handling from TSystem to a new class called TSigHandling and use gSigHandling as a global signal handling object in ROOT.; 2. To comply with some function calls like ""gSystem->ResetSignals()"". I move old ResetSignals() to the new class so TUnixSystem::ResetSignals() just call gSigHandling->ResetSignals(). I could also go over all such function calls and replace them with gSigHandling->(functions) if necessary.; 2. I replace old unsafe functions in signal handlers with thread-safe ones.; 3. I only implement StackTrace functions for SIGBUS, SIGSEGV, SIGILL. Other signals are still using default StackTrace functions. kSigAlarm and kSigChild are ignored for my current implementation. Do we need to change other signal handlers?; 4. @pcanal I have some problem with running roottest. I asked a question here:; https://github.com/root-mirror/root/pull/84; Could you take a look at it and I will write test case this patch also.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/133:933,test,test,933,https://root.cern,https://github.com/root-project/root/pull/133,1,['test'],['test']
Testability,"@bbockelm @pcanal This patch copies the code of signal handling in CMSSW. It avoids async-unsafe functions in signal handler functions. . For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97:322,test,test,322,https://root.cern,https://github.com/root-project/root/pull/97,2,['test'],['test']
Testability,"@bbockelm Before we can merge this, we need to test with both builtin and external lz4, since ROOT is currently broken with the latter (not caught by PR tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/926#issuecomment-326909464:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/926#issuecomment-326909464,2,['test'],"['test', 'tests']"
Testability,@bbockelm Could you please check the errors reported by Jenkins? The test failure does seem to be caused by the changes in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/657#issuecomment-317667694:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/657#issuecomment-317667694,1,['test'],['test']
Testability,@bbockelm I accidentally deleted my previous work last night. But good news is I figured out the issue I was facing when I try to reproduce my work today.; Now everything is working. I uploaded roottest repo in my github and generated the unit test as a commit. My current test simply follows the sample code in https://sft.its.cern.ch/jira/browse/ROOT-7588.; Let me know if something is not correct.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-174810100:244,test,test,244,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-174810100,2,['test'],['test']
Testability,"@bbockelm I am submitting a new pull request for signal handling:; 1. I move signal handling from TSystem to a new class called TSigHandling and use gSigHandling as a global signal handling object in ROOT.; 2. To comply with some function calls like ""gSystem->ResetSignals()"". I move old ResetSignals() to the new class so TUnixSystem::ResetSignals() just call gSigHandling->ResetSignals(). I could also go over all gSystem->(functions) and replace them with gSigHandling->(functions) if necessary.; 3. I replace old unsafe functions in signal handlers with thread-safe ones.; 4. I only implement StackTrace functions for SIGBUS, SIGSEGV, SIGILL. Other signals are still using default StackTrace functions. kSigAlarm and kSigChild are ignored for my current implementation. Do we need to change other signal handlers?; 5. @pcanal I have some problem with running roottest. I asked a question here:; #84; Could you take a look at it and I will write test case this patch also.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134:949,test,test,949,https://root.cern,https://github.com/root-project/root/pull/134,1,['test'],['test']
Testability,"@bbockelm This test is failing because of your change in the way TBufferFile reallocation functions are passed— you added the ability to pass a pointer to state so that the reallocation function can effectively have an argument. Perhaps this interface could be made backward-compatible by naming the new function pointer type the same as the old one (i.e. without the word ""state"" in its typedef name) and the arguments could take `nullptr` as a default argument for the state. That way, the test could pass without modification. Otherwise, it could pass by a minor change in the test. Then we'd find out what the next bug is. If there is one, of course. :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943#issuecomment-329146428:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/943#issuecomment-329146428,3,['test'],['test']
Testability,@bbockelm could you have a look at the two tree cache tests that are failing for this one? Thanks,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/240#issuecomment-366967341:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/240#issuecomment-366967341,1,['test'],['tests']
Testability,"@bbockelm please, try to be explicit in the git log so that later (much later) we can avoid looking at commit (to find a problem) ... ""addressing review comment"" does not give (our later selves) any clue of what is the nature of the change. [The only exception to that rule are 'white space' only change that have no functional side-effect]. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/590#issuecomment-304139907:48,log,log,48,https://root.cern,https://github.com/root-project/root/pull/590#issuecomment-304139907,1,['log'],['log']
Testability,"@bbockelm we can start to review PR.. I cant reproduce failures on ROOT-performance-centos7-multicore/default both as separate build on node and or even in build directory, I suspect it could be a problem of ""very"" parallel builds (-j56). I will test and let you know..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-503461511:246,test,test,246,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-503461511,1,['test'],['test']
Testability,"@bbockelm, it looks like your question was snowed under by our bot. You could look at io/io/test/. It is just adding a file. A test I recently added could be found [here](https://github.com/root-project/root/pull/688/commits/8b5b63e2bc6d118486e4dcdc6e3cdbc974adde76)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-316739105:92,test,test,92,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-316739105,2,['test'],['test']
Testability,@behrenhoff Could you please rebase this branch on top of master so that we can test again it before merging? I think I will leave the commits as they are and pick them one by one as they are reviewed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-369193396:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-369193396,1,['test'],['test']
Testability,"@behrenhoff I will merge the commits in more manageable pieces since commits across many files (although logically a good thing) make it difficult to backport things to earlier branches (e.g., from master to v6-12-00-patches). You will, of course, be kept as the author of the changes, I will just rebase and split the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-363414943:105,log,logically,105,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-363414943,1,['log'],['logically']
Testability,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures?. [a]; ```; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13793#issuecomment-1771483502:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/13793#issuecomment-1771483502,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"@bellenot . Actually, it is non-documented functionality. ; And by chance I test it now - when migrating all existing JS code to support future JSROOT v6.; I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6695#issuecomment-714575090:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/6695#issuecomment-714575090,3,['test'],"['test', 'tests']"
Testability,@bellenot ; yes:. -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime.; -- And then fallback to: 'c++'; -- clad=OFF; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872175065:394,Test,Test,394,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872175065,3,['Test'],['Test']
Testability,"@bellenot Do you have any idea why the ""result"" is a nullptr in my test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15071#issuecomment-2025183323:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/15071#issuecomment-2025183323,1,['test'],['test']
Testability,@bellenot I am looking the logs for windows build and it looks like it stuck? (no changes from 10 morning?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8104#issuecomment-833427640:27,log,logs,27,https://root.cern,https://github.com/root-project/root/pull/8104#issuecomment-833427640,1,['log'],['logs']
Testability,@bellenot I do not understand the failures in the tests. But I am sure has nothing to do with the actual proposed changes. Can this be merged to be ready for tonight's LCG builds?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13946#issuecomment-1781299879:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/13946#issuecomment-1781299879,1,['test'],['tests']
Testability,@bellenot If you want to check the first windows run output: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157152/console. I can not find the test output anywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1276757277:169,test,test,169,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1276757277,1,['test'],['test']
Testability,"@bellenot Is this ready to be merged? The tests failures are fixed on master now, and are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1088#issuecomment-333820231:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/1088#issuecomment-333820231,1,['test'],['tests']
Testability,"@bellenot It is a new tests, the feature it tests is ""urgent"", I suppose the fix might be something like:; ```; set(LINUX_CMAKE_CURRENT_SOURCE dos2unixFileName(${CMAKE_CURRENT_SOURCE_DIR})); set(RootExternalIncludes -e "".include ${LINUX_CMAKE_CURRENT_SOURCE}/mwe/include""); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014570964:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014570964,2,['test'],['tests']
Testability,"@bellenot The new test code contains an include path injection which on Windows ends up being:; ```; ... root.exe ... -e '.include C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/include' ....; ```; which comes from the CMake list:; ```; set(RootExternalIncludes -e "".include ${CMAKE_CURRENT_SOURCE_DIR}/mwe/include""); ```; but it does not work on Windows (it works on Linux); ```; rocessing C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/combined.cxx+(0)...; Info in <TWinNTSystem::ACLiC>: creating shared library C:/build/workspace/root-pullrequests-build/build/roottest/root/io/issue-7754/combined_cxx.dll; In file included from input_line_9:6:; In file included from C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/combined.cxx:2:; C:/build/workspace/root-pullrequests-build/roottest/root/io/issue-7754/mwe/src/SpectrometerChannelID.cc:7:10: fatal error: 'SpectrometerChannelID.hh' file not found; #include ""SpectrometerChannelID.hh""; ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014551071:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014551071,1,['test'],['test']
Testability,"@bellenot The windows failure is due:; ```; 23:43:52 CustomBuild:; 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt; 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date.; 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap; 23:43:52 In file included from input_line_1:1:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:; 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:; 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]; 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer.; 23:43:52 ^; 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362; 23:43:52 Exit code 0xc0000409; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2391#issuecomment-409023585:1660,Assert,Assertion,1660,https://root.cern,https://github.com/root-project/root/pull/2391#issuecomment-409023585,1,['Assert'],['Assertion']
Testability,@bellenot What were you testing through the use of Pythia6?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823#issuecomment-2040373869:24,test,testing,24,https://root.cern,https://github.com/root-project/root/pull/14823#issuecomment-2040373869,1,['test'],['testing']
Testability,@bellenot can you have a quick look? The failure on Windows is due to un-related tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11788#issuecomment-1330229156:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/11788#issuecomment-1330229156,1,['test'],['tests']
Testability,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6970#issuecomment-749410153:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/6970#issuecomment-749410153,1,['test'],['test']
Testability,@bellenot not sure if your four lines of code triggering the assertion could become now part of roottest. thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8126#issuecomment-1812298138:61,assert,assertion,61,https://root.cern,https://github.com/root-project/root/issues/8126#issuecomment-1812298138,1,['assert'],['assertion']
Testability,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508#issuecomment-2112196842:782,test,test,782,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842,1,['test'],['test']
Testability,"@bencouturier I've ported this fix to 6.24 (see PR #11303) and noticed other changes not yet backported, so I've put in sync the TGeoMaterial.cxx file from the master to this branch. I've tested it locally and it seems to work properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1234387605:188,test,tested,188,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1234387605,1,['test'],['tested']
Testability,"@bendavid just fyi, #7898 by @Axel-Naumann should fix these test failures, it's a bug in cling. We should be able to merge this PR then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-822391931:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-822391931,1,['test'],['test']
Testability,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```; TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");; ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608#issuecomment-421982623:299,test,test,299,https://root.cern,https://github.com/root-project/root/pull/2608#issuecomment-421982623,1,['test'],['test']
Testability,@bluehood @dpiparo Just added two tests to `$ROOTSYS/tree/dataframe/test/dataframe_ranges.cxx` instead of `$ROOTSYS/tree/dataframe/test/dataframe_simple.cxx` to avoid running `Range` with implicit multi-threading.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2062#issuecomment-391268541:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/2062#issuecomment-391268541,3,['test'],"['test', 'tests']"
Testability,"@bluehood Ah, okay, no problem. I'm currently adding a test to check that both trees get written, but no, I don't know how to check printed errors. Is a test necessary for such a case? A quick check indicates that this PR only affects the printed error statement, not the saved output.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585259930:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585259930,2,['test'],['test']
Testability,"@bluehood I added tests, as requested. There is currently no test for the multithreading case, however, due to a bug reported [here](https://root-forum.cern.ch/t/snapshot-fails-to-update-ttree-if-multithreading-enabled/37961). Once that is resolved, I can add in the MT test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-585985905:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-585985905,3,['test'],"['test', 'tests']"
Testability,"@bluehood I've added an extra test with some `return`s as part of branch names, etc. However, supporting something like `Define(""x2"", ""x*x // return hahahaha"")` cannot be supported unless we strip comments from what the user provides prior to doing the regex match. I'd say let it be for now. Sane people should add actual comments to their code *outside* the call to `Define()` rather than inside the string.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1103#issuecomment-333875742:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/1103#issuecomment-333875742,1,['test'],['test']
Testability,"@bluehood One might want to overwrite for aesthetic reasons (so that the file is not polluted with outdated cycles) or to save a little memory:; ```python; In [1]: import ROOT. In [2]: df = ROOT.RDataFrame(10).Define('e', 'rdfentry_'). In [3]: df.Snapshot('tUpdate', 'fUpdate.root'); Out[3]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a564e9fe0>. In [4]: snapopts = ROOT.RDF.RSnapshotOptions(). In [5]: snapopts.fMode = 'UPDATE'. In [6]: df.Snapshot('tUpdate', 'fUpdate.root', '', snapopts) # update without overwriting; Out[6]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a574a3c80>. In [7]: df.Snapshot('tOverwrite', 'fOverwrite.root'); Out[7]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a576822d0>. In [8]: snapopts.fOverwrite = True. In [9]: df.Snapshot('tOverwrite', 'fOverwrite.root', '', snapopts) # update and overwrite; Out[9]: <ROOT.ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x7f9a58142590>; ```; ```bash; $ ls -l f*root; -rw-r--r-- 1 michael staff 5.9K Feb 13 11:20 fOverwrite.root; -rw-r--r-- 1 michael staff 6.0K Feb 13 11:19 fUpdate.root; ```; Test coming soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4965#issuecomment-585845236:1295,Test,Test,1295,https://root.cern,https://github.com/root-project/root/pull/4965#issuecomment-585845236,1,['Test'],['Test']
Testability,@bluehood Renamed to StdDev and added more tests for corner cases,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2269#issuecomment-401386300:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2269#issuecomment-401386300,1,['test'],['tests']
Testability,"@bluehood Yes, as soon as #2514 is merged I'll add the specific test for Display, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2515#issuecomment-415737205:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/2515#issuecomment-415737205,1,['test'],['test']
Testability,"@bluehood perhaps one test with multiple input files, that exercises the hierarchical task spawning?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143#issuecomment-394742206:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/2143#issuecomment-394742206,1,['test'],['test']
Testability,"@bluehood test added , let's wait for the builds and merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1863#issuecomment-382017922:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/1863#issuecomment-382017922,1,['test'],['test']
Testability,"@cdeil , #1680 was merged; you should be able to extract Minuit trivially now (I don't think packages have been produced yet, though). Look at [math/minuit2/README.md](https://github.com/root-project/root/blob/master/math/minuit2/README.md) and [math/minuit2/DEVELOP.md](https://github.com/root-project/root/blob/master/math/minuit2/DEVELOP.md). If you'd like to use setuptools instead of cmake, see https://github.com/GooFit/GooFit/blob/master/python/Minuit2/setup.py (not continuously tested, may need some modifications). @lmoneta, @amadio do you think it would be a good idea to at least merge 2f320cd ? That's a logical error (the whole file is only about 30 lines). The other change may be okay, but I'm not really sure you couldn't get around it with a const cast in user code, and making a non-mutex/atomic mutable doesn't seem to be ideal to me; but it would be fairly ""safe"". If it needs to be done here, what about making it an atomic then it would be logically correct to make it mutable. https://github.com/root-project/root/blob/9791bc8896da09284c273378fd0054a48732bc22/math/minuit2/src/MinimumBuilder.cxx#L12-L25",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384403343:487,test,tested,487,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384403343,3,"['log', 'test']","['logical', 'logically', 'tested']"
Testability,@cgleggett could you please post a CMake configuration log? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6368#issuecomment-694094893:55,log,log,55,https://root.cern,https://github.com/root-project/root/issues/6368#issuecomment-694094893,1,['log'],['log']
Testability,"@chissg I see in logs: ; ```; [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::AMultB(int, int, int, double const*, double const*, double*)':; [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x30): undefined reference to `cblas_dgemm'; [2020-12-15T08:57:43.694Z] /usr/bin/ld: CMakeFiles/MathMore.dir/src/cblas.cxx.o: in function `ROOT::Math::Blas::ATMultB(int, int, int, double const*, double const*, double*)':; [2020-12-15T08:57:43.694Z] cblas.cxx:(.text+0x70): undefined reference to `cblas_dgemm'; [2020-12-15T08:57:43.694Z] collect2: error: ld returned 1 exit status; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6950#issuecomment-745150420:17,log,logs,17,https://root.cern,https://github.com/root-project/root/pull/6950#issuecomment-745150420,1,['log'],['logs']
Testability,"@chrisburr . Hi, Chris. Thank you!. What do you mean the PR is untested? You mean you didn't run the tests before publishing it? Or Do you mean there's no test covering this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1379#issuecomment-349960342:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/1379#issuecomment-349960342,2,['test'],"['test', 'tests']"
Testability,"@chrisburr Did you build ROOT this time to test the fix? Believe me, It's easier to find the problems if you test it locally. You get the complete errors, we both save time and resources and you're not letting our cold machines crush your hope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1379#issuecomment-349968443:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/1379#issuecomment-349968443,2,['test'],['test']
Testability,@cjones051073 thanks for adding a test!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394#issuecomment-286095216:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/394#issuecomment-286095216,1,['test'],['test']
Testability,"@cjones051073, it seems the build is failing with test failures. I've made some changes and you should be able to see the output of the failures on the next build. @phsft-bot build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394#issuecomment-286113389:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/394#issuecomment-286113389,1,['test'],['test']
Testability,"@cjones051073, thanks for doing the clang-format. Could you point me to the 'test application' you mentioned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394#issuecomment-285876646:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/394#issuecomment-285876646,1,['test'],['test']
Testability,"@couet ,. I think I could fix the problem in CMake but I need more testing. Hope I can finish the tests today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16523#issuecomment-2376799940:67,test,testing,67,https://root.cern,https://github.com/root-project/root/issues/16523#issuecomment-2376799940,2,['test'],"['testing', 'tests']"
Testability,"@couet . I add testing for fixed `GetMinimum()` / `GetMaximum()` methods of `THStack`. I also add tutorial which shows ""pads"" draw option and how it can be used on ""pre-divided"" canvas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15931#issuecomment-2190958818:15,test,testing,15,https://root.cern,https://github.com/root-project/root/pull/15931#issuecomment-2190958818,1,['test'],['testing']
Testability,@couet . This PR introduces new colors. ; TWebCanvas always transfer list of existing colors to the client - and coded it in compact form into `fOper` field of some JSON object. Thats why it changes. > So some old svg tests (o) are failing because of a changed fill attribute:. This need to be investigated. Most probably some of new colors overrides already existing one and therefore fill attributes of some drawing changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328113076:218,test,tests,218,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328113076,1,['test'],['tests']
Testability,@couet ; In the CMake build log I see:; ```; -- Checking internet connectivity...; -- Yes; ```. does this mean an internet connection is required? (would not be nice when just building the documentation).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887573949:28,log,log,28,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887573949,1,['log'],['log']
Testability,"@couet @ferdymercury how did you test `games.C`? it seems to be broken on both Linux and Windows. And your commit doesn't fix anything and the `games.C` macro fails if `${ROOTSYS}/test` is not in the include path..; And note that after fixing the build system, the key press work just fine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778219512:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778219512,2,['test'],['test']
Testability,@couet I think it's ready for first tests on your end (though not ready to be merged yet).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1075460634:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1075460634,1,['test'],['tests']
Testability,"@couet Sorry, but how do you set up a development environment to do the tests?. I try to set up a Debian environment (from a VM) for build but have encountered dependency conflict. Is there something like a CMSENV to use on LXPLUS? Or should I create a CentOS VM and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518#issuecomment-1074734670:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/9518#issuecomment-1074734670,1,['test'],['tests']
Testability,"@couet could you please revert this commit? It's good that we have a test for this problem, we should keep it :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8492#issuecomment-865021695:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/8492#issuecomment-865021695,1,['test'],['test']
Testability,"@couet rerunning PR tests because they will now pick up your new roottest branch making everything pass, ideally!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9472#issuecomment-1007247553:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/9472#issuecomment-1007247553,1,['test'],['tests']
Testability,"@couet you can merge at your convenience as far as I am concerned.; @ellert thanks for the changes you proposed. I have a curiosity: did you encounter any other failure related to dimensions on disk, especially with IO tests, with Fedora 41?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15735#issuecomment-2165518812:219,test,tests,219,https://root.cern,https://github.com/root-project/root/pull/15735#issuecomment-2165518812,1,['test'],['tests']
Testability,"@couet,. that is more or less the solution I came up with. For me a similar fix with the same logic solved the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16523#issuecomment-2377082849:94,log,logic,94,https://root.cern,https://github.com/root-project/root/issues/16523#issuecomment-2377082849,1,['log'],['logic']
Testability,"@dan131riley For the record, you should consider adding here and/or the commit log, the longer explanation of the mechanism of the problem that you sent by email. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1769#issuecomment-374727132:79,log,log,79,https://root.cern,https://github.com/root-project/root/pull/1769#issuecomment-374727132,1,['log'],['log']
Testability,"@daritter you are right, to access jenkins you need some credentials. On the other hand, you can always look at CDASH: http://cdash.cern.ch/index.php?project=ROOT as the line above testifies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/421#issuecomment-286480521:181,test,testifies,181,https://root.cern,https://github.com/root-project/root/pull/421#issuecomment-286480521,1,['test'],['testifies']
Testability,"@davidlange6, can we pick up this PR in the CXXMODULES IB and test if we bring down memory footprint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1178840502:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1178840502,1,['test'],['test']
Testability,@davidlt Could you please rebase and push so that we can test against latest master? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/591#issuecomment-317647828:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/591#issuecomment-317647828,1,['test'],['test']
Testability,"@davidlt, it is in the log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/522#issuecomment-296629226:23,log,log,23,https://root.cern,https://github.com/root-project/root/pull/522#issuecomment-296629226,1,['log'],['log']
Testability,@davidrohr the test that this PR removes does *not* test whether the llvm used by libCling has symbols visible or hidden. That's a different tests that we currently don't have (and that I don't believe we need but I might be wrong).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4736#issuecomment-572070165:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/4736#issuecomment-572070165,3,['test'],"['test', 'tests']"
Testability,"@dciangot I forgot to ask, I will not be able to access the file in your mini reproducer?; (I am going to try to test it @ UNL but I wanted to ask anyway); ```;  │  ~/C/root-rntuple/builds │   bearer-tokens ?1  root -l https://212.189.205.141:31094//W.root  ✔ │ 4m 29s  │ 16:08:36 . root [0]; Attaching file https://212.189.205.141:31094//W.root as _file0...; Error in <TWebFile::GetHead>: https://212.189.205.141:31094//W.root?: Forbidden (403); Error in <TWebFile::GetFromWeb10>: https://212.189.205.141:31094//W.root?: Forbidden (403); (TFile *) nullptr; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776812312:113,test,test,113,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776812312,1,['test'],['test']
Testability,"@dciangot I opened a new PR https://github.com/root-project/root/pull/7068 (if you will have a chance to test it, please let me know if it works in your env)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-775033324:105,test,test,105,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-775033324,1,['test'],['test']
Testability,@devajithvs can you try enabling the test in `roottest` that was conditional on the fix: https://github.com/root-project/roottest/pull/1118 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15458#issuecomment-2376659546:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/15458#issuecomment-2376659546,1,['test'],['test']
Testability,"@dpiparo , thanks for the backport. CMSSW tests via https://github.com/cms-sw/root/pull/195 for this change look good. I just have opened https://github.com/cms-sw/cmsdist/pull/8949 to integrate latest v6-30-00-patches changes in to CMSSW 14.0.X",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1896205278:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1896205278,1,['test'],['tests']
Testability,"@dpiparo - doing a build with CMSSW will be extremely hard until CMSSW has at least a test-release based on ROOT 6.08 (and, even then, no guarantees the reco application would work). Best I can do currently is (a) this improves straightforward examples, (b) CMSSW blocking on `FlushBaskets` remains the top contributor to thread stalls, and (c) the stalls go away if we switch the tree to a faster compression algorithm (such as `zlib`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/277#issuecomment-252258511:86,test,test-release,86,https://root.cern,https://github.com/root-project/root/pull/277#issuecomment-252258511,1,['test'],['test-release']
Testability,"@dpiparo - is it possible to pull up the logs? Unfortunately, the error message says simply the error message is in a different log file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/590#issuecomment-304902488:41,log,logs,41,https://root.cern,https://github.com/root-project/root/pull/590#issuecomment-304902488,2,['log'],"['log', 'logs']"
Testability,@dpiparo ; Event benchmark is similar as before. I have not test CMSSW yet since I do not know a correct version of file need to test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-337007981:17,benchmark,benchmark,17,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-337007981,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"@dpiparo @bbockelm ,. Hi Danilo,. Based on current cache replacement policy, the cache will be invalidated (set fIsTransferred to kFALSE) immediately once the first event miss occurs. In my current implementation, each task monitors fIsTransferred and return immediately without doing actual unzipping work. But we still need to create tasks corresponding to the number of baskets. I am wondering if we should add task_group.cancel() function into TTaskGroup interface? In that case, the main thread only needs to cancel all tasks once the cache is invalid. . With event simulation benchmark, I did not see too much difference between task_group wait and cancel. But I guess it could be more efficient once the number of baskets in cache buffer becomes larger.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-335903089:582,benchmark,benchmark,582,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-335903089,1,['benchmark'],['benchmark']
Testability,"@dpiparo @bluehood Do we need such a thing? It would be super convenient in the analysis workflow because often a bunch of files are laying around in a directory, which you need to put all together into RDF:. ```bash; $ ls -l testdir/; a.root; b.root; c.root; ```. ```cpp; RDataFrame df(""tree"", CreateFilelist(""testdir""));; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2523:226,test,testdir,226,https://root.cern,https://github.com/root-project/root/pull/2523,2,['test'],['testdir']
Testability,"@dpiparo @bluehood From my side this is ready for review. I think it makes sense to have remote reading of files in a possible follow-up PR. Please let me know if you think it makes sense to add an integration test to roottest. In this case, how would I deal with the fact that this datasource depends on the sqlite availability?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-406598298:210,test,test,210,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-406598298,1,['test'],['test']
Testability,"@dpiparo @bluehood To summarize: We need to agree on the interface of `Take[Indices,First,Last]` vs `Take` with overloads and figuring out the asserts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2351#issuecomment-409117535:143,assert,asserts,143,https://root.cern,https://github.com/root-project/root/pull/2351#issuecomment-409117535,1,['assert'],['asserts']
Testability,"@dpiparo @hahnjo No amount of changes to the https://github.com/root-project/root/blob/master/.github/workflows/test-result-comment.yml seem to do literally anything on this PR, I even changed the name of the job and that is not reflected, I don't know what to outside merging this PR as it is (removing the debug commits ofc)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14613#issuecomment-1932088999:112,test,test-result-comment,112,https://root.cern,https://github.com/root-project/root/pull/14613#issuecomment-1932088999,1,['test'],['test-result-comment']
Testability,"@dpiparo @vgvassilev ; I've added the test to `Regression.C`. Would you please take a look?. Below is result of the test when this patch is _not_ applied. ```; FAIL: Cling :: Prompt/ValuePrinter/Regression.C (10 of 11); ******************** TEST 'Cling :: Prompt/ValuePrinter/Regression.C' FAILED ********************; Script:; --; : 'RUN: at line 9'; cat /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/cling --nologo -I/Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/tools/clang/include -Xclang -verify 2>&1 | /Users/yonggyulee/Documents/GitHub/root/my-build/interpreter/llvm-project/llvm/bin/FileCheck /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C; --; Exit Code: 1. Command Output (stderr):; --; /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C:206:11: error: CHECK: expected string not found in input; // CHECK: { 0, 1, 2, 3, 4 }; ^; <stdin>:35:28: note: scanning from here; (PR180::Foo &) @0x10cf6f060; ^; <stdin>:40:114: note: possible intended match here; File /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h Line 0: in instantiation of function template specialization 'cling::collectionPrinterInternal::printValue_impl<PR14968::non_common_range>' requested here; ^. Input file: <stdin>; Check file: /Users/yonggyulee/Documents/GitHub/root/interpreter/cling/test/Prompt/ValuePrinter/Regression.C. -dump-input=help explains the following input dump. Input was:; <<<<<<; .; .; .; 30: Using raw input ; 31: Not using raw input ; 32: (WithUnnamed::Y &) @0x10cf5b000 ; 33: (WithUnnamed::Y &) @0x10cf61000 ; 34: (X) @0x600000f337a0 ; 35: (PR180::Foo &) @0x10cf6f060 ; check:206'0 X error: no match found; 36: (PR14968::non_common_range) ERROR in cling's callPrintValue(): missing v",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14968#issuecomment-2012609888:38,test,test,38,https://root.cern,https://github.com/root-project/root/pull/14968#issuecomment-2012609888,6,"['TEST', 'test']","['TEST', 'test']"
Testability,@dpiparo Added test in f8fccd52ffcfc059aa5a664404e04c77d15abc99,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2269#issuecomment-401727093:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/2269#issuecomment-401727093,1,['test'],['test']
Testability,"@dpiparo I fixed the conflicts. There should be a test already, copy-cat from `datasource_csv.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371497635:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371497635,1,['test'],['test']
Testability,"@dpiparo I tested this changes on failing architectures, and it shows right behavior for filemerger test (I can send you screenshot)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328911713:11,test,tested,11,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328911713,2,['test'],"['test', 'tested']"
Testability,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3242#issuecomment-453761892:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/3242#issuecomment-453761892,2,['test'],"['test', 'tests']"
Testability,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319763124:306,test,testing,306,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319763124,1,['test'],['testing']
Testability,@dpiparo Please merge if you still think this should go in. Jenkins tests passed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2252#issuecomment-424084961:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/2252#issuecomment-424084961,1,['test'],['tests']
Testability,@dpiparo Surely I can add some new tests and a tutorial. I just wanted to put the code here so it could be reviewed and tested with the current tests. I will add the remaining changes and tests soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/965#issuecomment-328139010:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/965#issuecomment-328139010,4,['test'],"['tested', 'tests']"
Testability,"@dpiparo Thank you for merging. Let's keep track of that failing test, however. It runs on my machine, but there may be an actual problem there due to the different environment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/562#issuecomment-300497255:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/562#issuecomment-300497255,1,['test'],['test']
Testability,"@dpiparo That makes sense. Most of the tests that are running for a long time are stress tests, or tests that tests some function under an extensive amount of configurations. Generating or setting up some example case is also a big performance hog on the tests. I think the trade-off for reducing the test time would be to reduce the comprehensiveness of some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/408#issuecomment-285633703:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/408#issuecomment-285633703,7,['test'],"['test', 'tests']"
Testability,"@dpiparo They are Vc warnings. The first one jumps in test-veccore, which I didn't touch, so I'm not sure I can do anything there... @amadio?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1004#issuecomment-330068881:54,test,test-veccore,54,https://root.cern,https://github.com/root-project/root/pull/1004#issuecomment-330068881,1,['test'],['test-veccore']
Testability,"@dpiparo absolutely right! Nice test!; But, if to build ROOT with Optimized build and try exactly the same example, we have next output:; ```; oksana@oksana-ThinkPad-E470:~/CERN_sources/root-opt/builds$ cat ../../test.C ; #ifdef __FAST_MATH__; aaaa; #endif; =========; root [1] .X ../../test.C ; root [2] ; ```; Could it be connected to llvm/clang/cling interpreter? It is actually mentioned in clang code: https://github.com/root-project/root/blob/dc9a26819b6549b51b7bd380be61235edde8f21f/interpreter/llvm/src/tools/clang/lib/Driver/ToolChains/Clang.cpp#L2403; It makes sense then because for linux+clang fast math build, the flags are: ; ```; ""-O3 -ffast-math ..""; ````; and it work fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-329006796:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-329006796,3,['test'],['test']
Testability,@dpiparo can you review it? It fails again on Windows only (this time more test failing); I checked and the new tutorial runs successfully on the other platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14844#issuecomment-1999750888:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/14844#issuecomment-1999750888,1,['test'],['test']
Testability,"@dpiparo exactly, I tested with the reproducer in the issue with 6.32.06 and the file saving function is back, this might have been fixed in previous version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16550#issuecomment-2380666298:20,test,tested,20,https://root.cern,https://github.com/root-project/root/pull/16550#issuecomment-2380666298,1,['test'],['tested']
Testability,"@dpiparo in filemerger test I am using R__FAST_MATH(```__FAST_MATH__```), to separate tolerances for fast math and normal builds, in case of clang builds everything works fine, but in case of gcc builds it never detect fast-math build, and as a result filemerger test is failing. I rechecked and the reason is that -Ofast is actually for gcc doesn't define ```__FAST_MATH__``` but only -ffast-math.; After this fix filemerger test is working properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328879766:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328879766,3,['test'],['test']
Testability,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3153#issuecomment-446283516:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/3153#issuecomment-446283516,1,['test'],['tests']
Testability,"@dpiparo sure. The problem reported was numerical reproducibility between machines, so we probably want a test with a ref file I guess",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-390228823:106,test,test,106,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-390228823,1,['test'],['test']
Testability,"@dpiparo we are tunning PR with modules, tests which failed in your PR is actually passing in master, please don't mind about them!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2669#issuecomment-424009706:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/2669#issuecomment-424009706,1,['test'],['tests']
Testability,@dpiparo we did correct other cases similar to this one in other tests with @martinmine. Comparing floating point numbers for equality has to be avoided.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/498#issuecomment-293282786:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/498#issuecomment-293282786,1,['test'],['tests']
Testability,"@dpiparo what would be a good test for the feature? It's hard to ""prove"" that different threads pass different slots",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/982#issuecomment-329256468:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/982#issuecomment-329256468,1,['test'],['test']
Testability,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319727864:107,test,testing,107,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319727864,2,['test'],"['tested', 'testing']"
Testability,"@dpiparo, Fedora 39 is end-of-life in less than a month: https://endoflife.date/fedora. Do we really want to disable the test on all platforms just for that? Personally, I would rather remove Fedora 39, and maybe add Fedora 41 in a few weeks when it comes out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16684#issuecomment-2415215523:121,test,test,121,https://root.cern,https://github.com/root-project/root/pull/16684#issuecomment-2415215523,1,['test'],['test']
Testability,"@dpiparo, I am against this PR switching OFF all tmva, because one or two tests fail intermittently for some weird and understood issue of new version of tensorflow or pytorch with old macOS version. It would be wiser first to install older versions on these mac nodes, and then if we observe still the failures I would switching off the failing tests, but not all tmva and even not pymva, if the other tests work fine. This will avoid to put us in a risky situation of releasing versions without testing them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15099#issuecomment-2028794682:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/15099#issuecomment-2028794682,4,['test'],"['testing', 'tests']"
Testability,"@dpiparo, not if I have changes in MyBranch and I want to test them, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/599#issuecomment-308348119:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/599#issuecomment-308348119,1,['test'],['test']
Testability,"@eguiraud , cmssw test passed, so feel free to integrate it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8449#issuecomment-863522919:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/8449#issuecomment-863522919,1,['test'],['test']
Testability,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536#issuecomment-623958983:375,test,test,375,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983,4,['test'],"['test', 'testDetails', 'tests']"
Testability,"@eguiraud @pcanal if you think this new extended `RFriendInfo` is the right way to go, I will also change the TTreeProcessorMT behaviour when reconstructing friend trees/chains accordingly and will fix the broken tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-817648039:213,test,tests,213,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-817648039,1,['test'],['tests']
Testability,"@eguiraud @vepadulano What do you think about `GetDataSourceInfo`? Look here at the test of the linked PR:. ```cpp; TEST(RDataFrameInterface, GetDataSourceInfo); {; // trivial/empty datasource; ROOT::RDataFrame df1(1);; EXPECT_EQ(df1.GetDataSourceInfo(), ""trivial datasource"");. // ttree/tchain datasource; TTree tree(""tree"", ""tree"");; ROOT::RDataFrame df2(tree);; EXPECT_EQ(df2.GetDataSourceInfo(), ""TTree datasource"");. // others with an actual fDataSource, like csv; auto df3 = ROOT::RDF::MakeCsvDataFrame(""RCsvDS_test_headers.csv"");; EXPECT_EQ(df3.GetDataSourceInfo(), ""RCsv"");; }; ```. Open for discussion is the info returned for the trivial/empty datasource and the TTree/TChain datasource. All others should be tracked by the respective datasources, see the CSV one in the test. And ofc the name of the function is TBD :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7828#issuecomment-817800833:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/7828#issuecomment-817800833,3,"['TEST', 'test']","['TEST', 'test']"
Testability,@eguiraud Can you propose a PR that add RVec and add an assert?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7903#issuecomment-821346370:56,assert,assert,56,https://root.cern,https://github.com/root-project/root/issues/7903#issuecomment-821346370,1,['assert'],['assert']
Testability,@eguiraud Does that test fail in other circumstances?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6404#issuecomment-696672543:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/6404#issuecomment-696672543,1,['test'],['test']
Testability,@eguiraud Here only `testActionHelpers` failed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7473#issuecomment-796862681:21,test,testActionHelpers,21,https://root.cern,https://github.com/root-project/root/pull/7473#issuecomment-796862681,1,['test'],['testActionHelpers']
Testability,@eguiraud In https://github.com/root-project/root/blob/master/tree/dataframe/test/dataframe_nodes.cxx#L76-L79 did you specifically want that warning to be displayed in stdout and not stderr?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-629068384:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-629068384,1,['test'],['test']
Testability,"@eguiraud In my built, this patch is a workaround for the segfault discussed above:. ```patch; diff --git a/math/vecops/inc/ROOT/RVec.hxx b/math/vecops/inc/ROOT/RVec.hxx; index d9adca8..5900743 100644; --- a/math/vecops/inc/ROOT/RVec.hxx; +++ b/math/vecops/inc/ROOT/RVec.hxx; @@ -414,17 +414,6 @@ public:; /// Return a pointer to the vector's buffer, even if empty().; const_pointer data() const { return const_pointer(begin()); }. - reference operator[](size_type idx); - {; - assert(idx < size());; - return begin()[idx];; - }; - const_reference operator[](size_type idx) const; - {; - assert(idx < size());; - return begin()[idx];; - }; -; reference front(); {; assert(!empty());; @@ -1266,7 +1255,21 @@ public:; return *this;; }. - using SmallVectorTemplateCommon<T>::operator[];; + using reference = typename SmallVectorTemplateCommon<T>::reference;; + using const_reference = typename SmallVectorTemplateCommon<T>::const_reference;; + using size_type = typename SmallVectorTemplateCommon<T>::size_type;; + using SmallVectorTemplateCommon<T>::begin;; +; + reference operator[](size_type idx); + {; + assert(idx < size());; + return begin()[idx];; + }; + const_reference operator[](size_type idx) const; + {; + assert(idx < size());; + return begin()[idx];; + }. template <typename V, typename = std::enable_if<std::is_convertible<V, bool>::value>>; RVec operator[](const RVec<V> &conds) const; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-805945230:478,assert,assert,478,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-805945230,5,['assert'],['assert']
Testability,@eguiraud Is the issues in projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_interface pre-existing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6342#issuecomment-692162782:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/6342#issuecomment-692162782,1,['test'],['test']
Testability,"@eguiraud It finally compiled without error after using `g++` instead of `gcc`. ```; g++ -g -O1 $(root-config --libs --cflags) -o xAna_monoZ_preselect.o xAna_monoZ_preselect.C; ./xAna_monoZ_preselect.o ""../../../infiles_NCUGlobal/infiles_signal_Mx2-150_Mv-500_Mx1-1_ctau-1/NCUGlobalTuples_13.root"" ""testOutSignal.root""; ```. [massif.out.433729.txt](https://github.com/root-project/root/files/7423308/massif.out.433729.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087#issuecomment-952544605:299,test,testOutSignal,299,https://root.cern,https://github.com/root-project/root/issues/9087#issuecomment-952544605,1,['test'],['testOutSignal']
Testability,"@eguiraud Looks like an issue with the test. The expected typename is the normalized one, `ROOT::VecOps::RVec<std::int32_t>`. Could you adjust the test and rebase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621#issuecomment-1140881978:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/10621#issuecomment-1140881978,2,['test'],['test']
Testability,@eguiraud Oops! That's a typo in `vecops_rvec.cxx`. Sorry for that.; Is there a way to run the tests locally so that I can test it before pushing up the changes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8903#issuecomment-907154577:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/8903#issuecomment-907154577,2,['test'],"['test', 'tests']"
Testability,"@eguiraud Thank you for your detailed response!. I currently create some TDirectories representing different stages of seloctions, and write histograms into it. For some reason, I would like to have TTree output also in some of the stages, and for that I need to use the `Snapshot` method. The way I had thought of (haven't tested yet, sorry) would be creating all the directories first and close the file, snapshotting to that file (not sure if the sub-directory could be, specified), and then open it for histogram writing. I have little knowledge about multi-threading, and was just (naïvely) looking for an RDataFrame anology of creating a TTree inside a TDirectory. It simply seemed strange to have to close the file and reopen. If feasible, it would be great if the (official) way to create a snapshot and to store into a certain sub-directory of a TFile, along with the multi-threading consideration, could be documented, so that users switching from the imperative pattern would be easier to understand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9225#issuecomment-958037006:324,test,tested,324,https://root.cern,https://github.com/root-project/root/issues/9225#issuecomment-958037006,1,['test'],['tested']
Testability,@eguiraud Thanks for taking a look! There is no specific reason for these checks. I went through the list and tried to select what makes sense. Please suggest changes to the list as you see fit. As for the tests: it would be nice to exclude the Google stuff from clang-tidy but keep our code under scrutiny. Not sure if this can be done though.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8773#issuecomment-891015870:206,test,tests,206,https://root.cern,https://github.com/root-project/root/pull/8773#issuecomment-891015870,1,['test'],['tests']
Testability,"@eguiraud Then I'll drop the corresponding test and example code, and use something else (e.g. vector of `std::string`, `std::pair`, `int`, etc.) instead.; It should build afterward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9286#issuecomment-970656016:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/9286#issuecomment-970656016,1,['test'],['test']
Testability,"@eguiraud Why I submit too many PRs, I see very often errors like here:; https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/110020/console; And `gtest-roofit-RDataFrameHelpers-test-testActionHelpers` appears very often",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7469#issuecomment-796749033:198,test,test-testActionHelpers,198,https://root.cern,https://github.com/root-project/root/pull/7469#issuecomment-796749033,1,['test'],['test-testActionHelpers']
Testability,"@eguiraud You couldn't see any error in the PR build on Windows, the tests are not yet enabled. It's what I'm trying to fix. 😉",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5612#issuecomment-628193079:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628193079,1,['test'],['tests']
Testability,"@eguiraud You're right, of course, there were a few more spots to fix. It actually helped to make the code more robust for future changes of the sqlite3 library. Note that now there is a single, well-localized `ifdef` to prevent the use of `sqlite3_errstr` on sqlite3 < 3.7.15. I tested this on CentOS 6 with devtoolset 8. As @Axel-Naumann pointed out, there are cling-related issues (occurred when running unit tests) but the issues around `SQliteDS` are resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5882#issuecomment-645246286:280,test,tested,280,https://root.cern,https://github.com/root-project/root/pull/5882#issuecomment-645246286,2,['test'],"['tested', 'tests']"
Testability,@eguiraud thanks for the inputs. I modified the previous commit and now the PR is ready for review. More tests were added (including one for remote globbing that we didn't test before). I will add documentation to the function once we agree on the rest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1633988428:105,test,tests,105,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1633988428,2,['test'],"['test', 'tests']"
Testability,@eguiraud there is something else needed to be backported to fix failing tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5505#issuecomment-622344760:73,test,tests,73,https://root.cern,https://github.com/root-project/root/pull/5505#issuecomment-622344760,1,['test'],['tests']
Testability,"@eguiraud this is another idea I had to work around the problem of long functions mixing `std::string_view` and `new`. In my preliminary tests, this improves performance in general (less heap allocations) so it might be worth it in addition to #9328. If that makes sense, I'd like to investigate `std::initializer_list` instead of arrays with a dummy element, but this seems to work for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329#issuecomment-977843229:137,test,tests,137,https://root.cern,https://github.com/root-project/root/pull/9329#issuecomment-977843229,1,['test'],['tests']
Testability,@eguiraud this should solve the issue with the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5406#issuecomment-616828678:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/5406#issuecomment-616828678,1,['test'],['tests']
Testability,@eguiraud would you mind trying your test-script with the current patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14271#issuecomment-1864333402:37,test,test-script,37,https://root.cern,https://github.com/root-project/root/pull/14271#issuecomment-1864333402,1,['test'],['test-script']
Testability,"@eguiraud, could you test https://github.com/root-project/root/pull/9404 on your setup?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-990170586:21,test,test,21,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-990170586,1,['test'],['test']
Testability,"@eguiraud, thanks for the detailed analysis. Unfortunately this works as designed and I am not sure if we can fix that behavior in a way that is reasonable when running the tests while keeping it working for the rest. If the issue is just for the test suite, I'd propose slitting these tests into subfolders.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7366#issuecomment-849872614:173,test,tests,173,https://root.cern,https://github.com/root-project/root/issues/7366#issuecomment-849872614,3,['test'],"['test', 'tests']"
Testability,"@ellert #11457 hopefully adds the missing piece to fix the remaining test failures. I observed those failures had to do with cases when internal memory management of ROOT played a role (mostly trees belonging to files being garbage collected). Setting the flags of the type of the object being nonified seems to fix those failures. If you have some time, please double check on your side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10799#issuecomment-1260855212:69,test,test,69,https://root.cern,https://github.com/root-project/root/issues/10799#issuecomment-1260855212,1,['test'],['test']
Testability,@ellert I am working on the merge. Several things have already been done as part of the master so there was (as expected) several merge conflict. I pick resolutions that can be seen at: https://github.com/pcanal/root/tree/ellert-test-fixes . Can you please verify that they are complete/correct for you?. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/155#issuecomment-231848451:229,test,test-fixes,229,https://root.cern,https://github.com/root-project/root/pull/155#issuecomment-231848451,1,['test'],['test-fixes']
Testability,"@ellert It is strange that the uring warning appears only in this unit test. Other unit tests use uring, too, and I would expect all of them to report uring issues consistently. Could you give me the full printout of the failed unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1088357349:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1088357349,3,['test'],"['test', 'tests']"
Testability,"@ellert again, testing on AArch64 would be greatly appreciated! I made sure that the flag makes it to the relevant places (and emits a warning on x86), but I don't think I have an AArch64 system around for easy verification...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12353#issuecomment-1436592205:15,test,testing,15,https://root.cern,https://github.com/root-project/root/pull/12353#issuecomment-1436592205,1,['test'],['testing']
Testability,"@ellert for me looks good, even though sadly we can't test it in CI! I remember that on aarch we had insignificant file size increase. Can I ask you please to add better explanation in commit (for the history) why tolerance was increased (e.g because of aach64 and ppc64le).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4025#issuecomment-507644748:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/4025#issuecomment-507644748,1,['test'],['test']
Testability,"@ellert is proposing changes for both old and new PyROOT, so we will need to test it with both (and with a Python3.8 build too). For the Cppyy-related changes, I would prefer to first check with @wlav and see if we can merge them into Cppyy master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5158#issuecomment-599448870:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/5158#issuecomment-599448870,1,['test'],['test']
Testability,"@ellert quick update: We found a PPC64 node to test, and I can reproduce the problem (`malloc(): invalid next size (unsorted)` at the end of a `Debug` build). I will continue to investigate next week. If you want, you could already submit https://github.com/ellert/root/commit/a71528ca1d5af631d49251ad9525f9d6a875ce7d as a PR, even though it doesn't fix the full problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-846080899:47,test,test,47,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-846080899,1,['test'],['test']
Testability,"@ellert thanks for the report, I'll need to see if I can get access to a AArch64 system to test. In the meantime, could you see if the symbols appear in the executables or one of the shared libraries? Then they would be in the process and Cling *should* automatically find them...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12294#issuecomment-1429274004:91,test,test,91,https://root.cern,https://github.com/root-project/root/issues/12294#issuecomment-1429274004,1,['test'],['test']
Testability,@enirolf Strange that changes in webgui has effect on ntuple PRs. ROOT source code by 95% do not pass clang-format test - especially header files.; Therefore I often ignore this warning during PRs - otherwise header files formatting will be confusing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15313#issuecomment-2074982491:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/15313#issuecomment-2074982491,1,['test'],['test']
Testability,"@etejedor @dpiparo I changed a test-case to use a different input file for the friend and the main TTree.; If I'm not mistaken, it turns out that we never read the friend in this case, we always read the main tree. If it's true, this is a big fat bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1773#issuecomment-375593136:31,test,test-case,31,https://root.cern,https://github.com/root-project/root/pull/1773#issuecomment-375593136,1,['test'],['test-case']
Testability,@etejedor @pcanal @bbockelm . I think this branch is lack of performance test among different alternatives as discussed in https://sft.its.cern.ch/jira/browse/ROOT-5073. Do we still want to work on that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/136#issuecomment-367157411:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/136#issuecomment-367157411,1,['test'],['test']
Testability,"@etejedor I took out the commit that assumed entries in `TEntryList` are always ordered, I will open a separate PR with only that commit where we can discuss that particular issue. I also added a commit that moves back the retrieval of the tree name to `TTreeView` construction time, so we still error out early even if the actual `TChain` construction is now done later, at processing time. AFAIK the PR is ready to merge if tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2116#issuecomment-394286698:426,test,tests,426,https://root.cern,https://github.com/root-project/root/pull/2116#issuecomment-394286698,1,['test'],['tests']
Testability,"@etejedor I will add a test with multiple files.; I propose to do the refactoring that moves the `TTreeView` members into `TTreeProcessorMT` to avoid duplication in another PR, as the changes would be quite big (working on it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143#issuecomment-394779115:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/2143#issuecomment-394779115,1,['test'],['test']
Testability,@etejedor This seems to fix the problem with attaching a property to the class definition. I do not understand why we get an `bad argument to internal function` if we skip the proxy function ... Edit: These are the test failures: http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=604404,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3170:215,test,test,215,https://root.cern,https://github.com/root-project/root/pull/3170,1,['test'],['test']
Testability,@etejedor We still want/need these tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5361#issuecomment-683612350:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/5361#issuecomment-683612350,1,['test'],['tests']
Testability,@etejedor added comments about the pythonization of `TNamed` and `TObject` to the test. i'll do a PR build to check the code again and merge afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2266#issuecomment-405901021:82,test,test,82,https://root.cern,https://github.com/root-project/root/pull/2266#issuecomment-405901021,1,['test'],['test']
Testability,"@etejedor and me finally figured out what's the difference between the builds: The problem only arises if building with C++14 which pulls in `ROOT/RNotFn.hxx`, defining `std::Detail`. Because of the implicit `using namespace std;` this ends up conflicting with `namespace Detail` defined in the `root` prompt. FWIW here's the full `backtrace` from a Debug build (which gives less information by default compared to Release because of `assert`s?!):; ```; #0 0x00007ffff648c37f in raise () from /lib64/libc.so.6; #1 0x00007ffff6476db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff6476c89 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff6484a76 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffec1c4bb1 in llvm::isa_impl_cl<clang::TagType, clang::Type const*>::doit (Val=0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:105; #5 0x00007fffec1c296e in llvm::isa_impl_wrap<clang::TagType, clang::Type const*, clang::Type const*>::doit (Val=@0x7fffffffaa08: 0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:132; #6 0x00007fffec1bf2ff in llvm::isa_impl_wrap<clang::TagType, clang::Type const* const, clang::Type const*>::doit (Val=@0x7fffffffaa48: 0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:123; #7 0x00007fffec1ba2ee in llvm::isa<clang::TagType, clang::Type const*> (Val=@0x7fffffffaa48: 0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:143; #8 0x00007fffec1b56b5 in llvm::dyn_cast<clang::TagType, clang::Type const> (Val=0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/include/llvm/Support/Casting.h:343; #9 0x00007fffec44dae0 in clang::Type::getAs<clang::TagType> (this=0x0) at /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:6858; #10 0x00007fffec46bf1c in TClingClassInfo::Init (this=0x1933310, tag=...) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingClassInfo.cxx:775; #11 0x00007f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-900036214:435,assert,assert,435,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-900036214,1,['assert'],['assert']
Testability,"@etejedor from my side, this PR is ready to go! Any further tests desired in the unit-test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-396483165:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-396483165,2,['test'],"['test', 'tests']"
Testability,"@etejedor thanks for taking a look!. 1. correct. making concurrent usage of different RDFs from different threads safe is the topic of the recently created [ROOT-10694](https://sft.its.cern.ch/jira/browse/ROOT-10694); 2. avoiding re-jitting across computation graphs needs #5356 , but the general machinery is exercised by current tests (demonstrated by the current test failures) and tutorials (results I showed in the PPP were on df104, df105, df106). What kind of test would you like to see? (i.e. what should it test exactly?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329#issuecomment-615292186:331,test,tests,331,https://root.cern,https://github.com/root-project/root/pull/5329#issuecomment-615292186,4,['test'],"['test', 'tests']"
Testability,"@ferdymercury @vvolkl . Thank you for your responses!; I followed the advice and built with version 6.30.04 and the master branch. Unfortunately, the results were the same. Attached are the build logs.; [spack-build-out_root-6.30.04.txt](https://github.com/root-project/root/files/14356955/spack-build-out_root-6.30.04.txt); [spack-build-out_root-master.txt](https://github.com/root-project/root/files/14356957/spack-build-out_root-master.txt). Check the cmake configuration and modify [tree/dataframe/test/CMakeLists.txt](https://github.com/root-project/root/blob/master/tree/dataframe/test/CMakeLists.txt#L47) as follows:; ```diff; --- a/tree/dataframe/test/CMakeLists.txt; +++ b/tree/dataframe/test/CMakeLists.txt; @@ -45,6 +45,7 @@; endif(). ROOT_ADD_GTEST(dataframe_datasetspec dataframe_datasetspec.cxx LIBRARIES ROOTDataFrame); +target_include_directories(dataframe_datasetspec BEFORE PRIVATE ${CMAKE_SOURCE_DIR}/builtins/); ROOT_ADD_GTEST(dataframe_display dataframe_display.cxx LIBRARIES ROOTDataFrame); ROOT_ADD_GTEST(dataframe_ranges dataframe_ranges.cxx LIBRARIES ROOTDataFrame); ROOT_ADD_GTEST(dataframe_leaves dataframe_leaves.cxx LIBRARIES ROOTDataFrame); ```. `BEFORE` and `PRIVATE` refer to other descriptions but do not understand their meaning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769#issuecomment-1956212761:196,log,logs,196,https://root.cern,https://github.com/root-project/root/issues/14769#issuecomment-1956212761,5,"['log', 'test']","['logs', 'test']"
Testability,"@ferdymercury Thanks for this contribution! Test failures are unrelated, so let's merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7237#issuecomment-785852474:44,Test,Test,44,https://root.cern,https://github.com/root-project/root/pull/7237#issuecomment-785852474,1,['Test'],['Test']
Testability,"@ferdymercury is that library already used in ROOT? Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables).; Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2244858400:245,log,logic,245,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244858400,1,['log'],['logic']
Testability,"@ferdymercury is this new mechanism, using cmake, ready to replace the current Makefile technique? if yes how to test it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160#issuecomment-2058386337:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/15160#issuecomment-2058386337,1,['test'],['test']
Testability,"@ferdymercury thanks for the links. I fully agree with Axel's proposal of trying to make all ROOT binaries consistent in their argument parsing and make them POSIX (while keeping the legacy `-long` options valid but hidden). Having never used it, I don't have a strong opinion on the CLI11 library yet. On one hand it seems well maintained and tested on all platforms, which is great, and being header-only certainly makes it convenient to use. On the other hand it's quite big and I wonder if we need enough features from it as to justify its size. . In any case I think we should revive the topic and understand if there were any blockers to it or if it was simply not picked up by anyone in the past 3 years.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2245114452:344,test,tested,344,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2245114452,1,['test'],['tested']
Testability,"@ferdymercury à propos `roottest-root-hist-h2root`: I think this was clarified by the last round of tests. We see a failure on the GPU platform, which is known and unrelated to your changes. If you agree, I would proceed with the merge of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773#issuecomment-2446062781:100,test,tests,100,https://root.cern,https://github.com/root-project/root/pull/16773#issuecomment-2446062781,1,['test'],['tests']
Testability,"@ferdymercury, it seems that in the first case it was a debug build while the second was a release build. However, looking at https://github.com/root-project/cling/blob/master/lib/Interpreter/DynamicLookup.cpp#L764-L766, I'm not sure that the assertion is useful, given that it seems to be safe to exit the function if the `CompoundLiteralExpr` node was not built. @vgvassilev, any preferences? Should I remove the `assert()`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8389#issuecomment-948793224:243,assert,assertion,243,https://root.cern,https://github.com/root-project/root/issues/8389#issuecomment-948793224,2,['assert'],"['assert', 'assertion']"
Testability,"@ferdymercury, the test failure on alma8 is real",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16570#issuecomment-2393371037:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/16570#issuecomment-2393371037,1,['test'],['test']
Testability,"@flagarde apologies for not making progress with this in a reasonable time. Would you be able to address the conflict by rebasing? We will then re-run the tests to see what the CMake error is. It might just be a CMake too old; we have bumped the required CMake version to 3.16 in the meantime, so that might have fixed itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8941#issuecomment-1007260850:155,test,tests,155,https://root.cern,https://github.com/root-project/root/pull/8941#issuecomment-1007260850,1,['test'],['tests']
Testability,@fylux what about clang-formatting? Can you add please as a separate commit? Logs are here https://travis-ci.org/root-project/root/jobs/553883729,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-508376676:77,Log,Logs,77,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-508376676,1,['Log'],['Logs']
Testability,@gargvaibhav64 Please check the failing tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3584#issuecomment-486767616:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/3584#issuecomment-486767616,1,['test'],['tests']
Testability,"@georgtroska I cannot reproduce the problem (i.e. it compiles fine on CentOS and Windows). Could you try to add `message(STATUS ""clad = ${clad}"")` in `core/metacling/src/CMakeLists.txt`, at line 93, as shown below:; ```; # We need to paste the content of the cling plugins disabling link symbol optimizations.; set(CLING_PLUGIN_LINK_LIBS); message(STATUS ""clad = ${clad}""); if (clad); ```; and type `cmake .` in the build directory? You should see something like:; ```; -- [...]; -- And then fallback to: 'c++'; -- clad = OFF; -- Performing Test found_stdstringview; -- [...]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872164716:541,Test,Test,541,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872164716,1,['Test'],['Test']
Testability,"@georgtroska I updated the PR with a slightly different test for clad, and added a protection for the linker (even if I don't understand why it still tries to link with `clad=OFF`...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872203301:56,test,test,56,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872203301,1,['test'],['test']
Testability,@gganis Could you check why the test are failing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4888#issuecomment-579895834:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/4888#issuecomment-579895834,1,['test'],['test']
Testability,"@gganis Do we have somewhere tests for the name parsing? I couldn't find them. Also, we probably want to add tests for the parsing with options or queries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4949:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/4949,2,['test'],['tests']
Testability,"@goi42 ah #4649 was merged some time ago, I see! I got it confused with #4965, sorry!. So this can go in, but I would like to have a test for the fixed usecase. I don't know how to check that `TFile` printed an Error, do you by chance? I'll ask around :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964#issuecomment-585258137:133,test,test,133,https://root.cern,https://github.com/root-project/root/pull/4964#issuecomment-585258137,1,['test'],['test']
Testability,"@grimmmyshini no, still red in the nightlies (if anything, it got more likely), for example https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/ and https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12arm,SPEC=default,V=master/lastCompletedBuild/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/. AddressSanitizer still shows the same problem as last week: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testRooFuncWrapper/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12529#issuecomment-1493862565:232,test,testReport,232,https://root.cern,https://github.com/root-project/root/pull/12529#issuecomment-1493862565,6,['test'],"['test', 'testReport']"
Testability,"@guitargeek , I am trying to test the latest root master changes and notice that cmssw code https://github.com/cms-sw/cmssw/blob/master/PhysicsTools/Utilities/src/SideBandSubtraction.cc#L415 fails due to this change. Should I update cmssw to use something like the following now?; ```; fit_result = ModelPDF->fitTo(*Data, RooCmdArg(""r"", 0));; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9747#issuecomment-1031162829:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/9747#issuecomment-1031162829,1,['test'],['test']
Testability,"@guitargeek , cmssw tests via https://github.com/cms-sw/root/pull/205",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507#issuecomment-2000458697:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2000458697,1,['test'],['tests']
Testability,"@guitargeek , latest root master does not build. We get build errors like [a]. Looks like https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooAbsCollection.h#L411-L418 also need cleanup ( note that note master is [6.35](https://github.com/root-project/root/commit/f1edc0f1b26a9ef675c035ba9160a17be2ad69dc) now); ```; In file included from input_line_10:17:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsAnaConvPdf.h:20:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsPdf.h:19:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsReal.h:20:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooArgList.h:19:; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc12/lcg/root/6.33.01-18142fcd273e00e213ed1bd6cacf55cc/build/include/RooAbsCollection.h:417:2: error: ""Please remove this unneeded code.""; #error ""Please remove this unneeded code.""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16821#issuecomment-2458990554:443,test,tests,443,https://root.cern,https://github.com/root-project/root/pull/16821#issuecomment-2458990554,10,['test'],"['testBuildDir', 'tests']"
Testability,"@guitargeek @grimmmyshini any progress on this problem? The test is now failing on many platforms in the nightly builds, and also sometimes in PR builds, I think...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12529#issuecomment-1493838548:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/12529#issuecomment-1493838548,1,['test'],['test']
Testability,@guitargeek Applied all requested review suggestions and rebased into 4 more compact logical commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966#issuecomment-1194204867:85,log,logical,85,https://root.cern,https://github.com/root-project/root/pull/10966#issuecomment-1194204867,1,['log'],['logical']
Testability,"@guitargeek I think these windows issues should be resolved with my most recent commit, at least I ensured that compilation without MultiProcessing enabled gives no errors or warnings. I cannot fully test a windows compilation since I have no windows machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791#issuecomment-1345665219:200,test,test,200,https://root.cern,https://github.com/root-project/root/pull/11791#issuecomment-1345665219,1,['test'],['test']
Testability,"@guitargeek If the class *had* supported I/O before, the situation would be even worse: In general; - You would need to write an instance of the class to a file, and save this file somewhere in the test suite (best achieved by checking out ROOT before all the changes).; - You would need to write a schema evolution rule to convert old data members to new ones (not in this case, since removing).; - You would need to add a test that reads back the old class instance, and tests that the new (in-memory) version is in a consistent state. No harm done here, since you can just revert the one line, but please double check that none of the other PRs destroy I/O capabilities of RooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8569#issuecomment-878853266:198,test,test,198,https://root.cern,https://github.com/root-project/root/pull/8569#issuecomment-878853266,3,['test'],"['test', 'tests']"
Testability,@guitargeek Maybe commit a comment on how to create the reference file above the test. Sorry that I didn't do that already.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090#issuecomment-832016284:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832016284,1,['test'],['test']
Testability,@guitargeek Nevermind. I just realized that I can still see the problem when running some of the test :(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733#issuecomment-2274296567:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2274296567,1,['test'],['test']
Testability,@guitargeek PR for pythonization and test for RooAbsReal::plotOn() Pythonization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7723:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/7723,1,['test'],['test']
Testability,"@guitargeek Thanks for looking into this. I don't see any fixes for this issue, it would require to ""duplicate"" the definition in the class'es ""main"" translation unit, and there are quite a few definitions to go through. Here is an MRE with c++11, but should be identical for c++14:; ```; # root-config --version; 6.24/06; # root.exe --version; ROOT Version: 6.24/06; Built for linuxx8664gcc on Sep 02 2021, 14:20:23; From tags/v6-24-06@v6-24-06; # g++ --version; g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11); Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. # cat test.cxx ; #include <vector>; #include <TChain.h>. int func() {; std::vector<long long> v;; v.push_back(TChain::kBigNumber); // fail; v.push_back(TChain::kBigNumber - 1); // fine; return v.size();; }; # g++ -O0 -std=c++11 `root-config --cflags --libs` test.cxx -o test; /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o: In function `_start':; (.text+0x20): undefined reference to `main'; /tmp/ccxkwRYF.o: In function `func()':; test.cxx:(.text+0x1a): undefined reference to `TChain::kBigNumber'; collect2: error: ld returned 1 exit status; ```. I don't mind if this gets closed with wontfix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9422#issuecomment-991995228:717,test,test,717,https://root.cern,https://github.com/root-project/root/issues/9422#issuecomment-991995228,4,['test'],['test']
Testability,"@guitargeek The build failed in a strange way. Did jenkins build branch `[cling_cmd_history_config](https://github.com/jiangyilism/root/tree/cling_cmd_history_config)` of this pull request? From https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/153465/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/ and https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/153465/ , It built root master branch cdd1bdf3b46 . Which does not contain my branch/commits . And the failing test [roottest_python_distrdf_spark_test_all](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/153465/testReport/projectroot.roottest.python.distrdf/spark/roottest_python_distrdf_spark_test_all/) . seems related to several distrdf changes in master branch recently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1235246485:275,test,testReport,275,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1235246485,3,['test'],"['test', 'testReport']"
Testability,@guitargeek Waiting for test build on mac-beta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16359#issuecomment-2326154917:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/16359#issuecomment-2326154917,1,['test'],['test']
Testability,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202#issuecomment-2091419386:421,test,tests,421,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386,2,"['log', 'test']","['logic', 'tests']"
Testability,@guitargeek can you please take care of `testLikelihoodJob`? That one is failing on `mac13arm/cxx17` since forever...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12832#issuecomment-1637457812:41,test,testLikelihoodJob,41,https://root.cern,https://github.com/root-project/root/issues/12832#issuecomment-1637457812,1,['test'],['testLikelihoodJob']
Testability,"@guitargeek great work! :tada:. There are still two failing tests (`gtest-roofit-roostats-test-testSPlot` and `tutorial-roofit-rf110_normintegration-py`) with the same initial symptoms that this issue was about, a `heap-use-after-free` in `RooAbsCollection::empty()`. Do you want me to open a new issue for the two? (`tutorial-roofit-rf104_classfactory-py` seems to fail for other reasons, not sure...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10009#issuecomment-1218164394:60,test,tests,60,https://root.cern,https://github.com/root-project/root/issues/10009#issuecomment-1218164394,2,['test'],"['test-testSPlot', 'tests']"
Testability,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11221#issuecomment-1222045554:89,test,test-testSPlot,89,https://root.cern,https://github.com/root-project/root/issues/11221#issuecomment-1222045554,1,['test'],['test-testSPlot']
Testability,"@guitargeek it seems this generates several segfaults, basically on all plarforms, but only for some tests: do you manage to make sense of those?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15310#issuecomment-2448305785:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/15310#issuecomment-2448305785,1,['test'],['tests']
Testability,"@guitargeek too much time passed and I cannot restart the builds. Do you feel like rebasing so to trigger the tests and then, if satisfied, merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10470#issuecomment-2076545854:110,test,tests,110,https://root.cern,https://github.com/root-project/root/pull/10470#issuecomment-2076545854,1,['test'],['tests']
Testability,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11228#issuecomment-1265166506:268,test,test,268,https://root.cern,https://github.com/root-project/root/pull/11228#issuecomment-1265166506,1,['test'],['test']
Testability,"@guitargeek, can you remind me which was the test case that we had disabled on Windows and we found out that it mostly works now? I thought it was `testRooFuncWrapper.cxx` but I could not find any windows-related ifdefs...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654#issuecomment-1937836211:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/14654#issuecomment-1937836211,2,['test'],"['test', 'testRooFuncWrapper']"
Testability,"@gwmyers sorry for the late reply and thank you so much for this contribution :smile: ! I agree with the implementation, I took the liberty of modifying locally your changes also including a test. I would like to push them to your branch to update this PR if you are okay with it, let me know :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15476#issuecomment-2135501212:191,test,test,191,https://root.cern,https://github.com/root-project/root/pull/15476#issuecomment-2135501212,1,['test'],['test']
Testability,"@hageboeck Ok, here:. ```; /usr/bin/cmake3 -DCMAKE_CXX_FLAGS_RELEASE=""foo"" /path/to/src. ...; -- Compiler flags for CMAKE_CXX_FLAGS_RELEASE are not set to ROOT's default values because the variable was explicitely set.; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platform: linux; -- ROOT Compiler: GNU 4.8.5; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = 'foo'); -- Compiler Flags: -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread foo; ...; ```. I've updated the PR. Does this look good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-822487104:234,Test,Test,234,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-822487104,2,['Test'],['Test']
Testability,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6172#issuecomment-675412995:101,test,test,101,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995,1,['test'],['test']
Testability,@hageboeck do you know if these failures are something expected in projectroot.test.test_stressroostats_minuit2:; ```RooUnitTest ERROR: comparison of value 2.32635 fails comparison with reference 2.408916; Test 34 : HypoTestCalculator Significance - Simultaneous Pdf - Frequentist - Ratio-Of-Profiled-Likelihoods ............. FAILED; RooUnitTest ERROR: comparison of value 2.40892 fails comparison with reference 2.512144; Test 35 : HypoTestCalculator Significance - Simultaneous Pdf - Frequentist - Profile-Likelihood-One-Sided-Discovery .... FAILED```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6059#issuecomment-666214454:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/6059#issuecomment-666214454,3,"['Test', 'test']","['Test', 'test']"
Testability,@hageboeck new and improved logic that should fix the test failures -- can you take a look again please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5356#issuecomment-619967582:28,log,logic,28,https://root.cern,https://github.com/root-project/root/pull/5356#issuecomment-619967582,2,"['log', 'test']","['logic', 'test']"
Testability,@hageboeck retesting since Jenkins logs are gone :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-666235299:35,log,logs,35,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-666235299,1,['log'],['logs']
Testability,"@hageboeck the number of tasks is fixed, it depends on the number of clusters in the dataset. If the thread-pool size during the event loop is smaller than the number of slots RDF prepared, a bit of space and time is wasted but no harm is done, the extra slots are unused. If the thread-pool size during the event loop is larger than the number of slots RDF prepared, builds with asserts will fire an assertion, builds without asserts will incur in undefined behavior (most likely a crash: `pop_back` will be called on an empty `std::deque`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5292#issuecomment-609700306:380,assert,asserts,380,https://root.cern,https://github.com/root-project/root/pull/5292#issuecomment-609700306,3,['assert'],"['assertion', 'asserts']"
Testability,"@hahnjo , I have opened https://github.com/cms-sw/root/pull/192 and will start testing it once ppc64le Integration Build (IB) based on ROOT master is available ( hopefully tomorrow morning)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1865265443:79,test,testing,79,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1865265443,1,['test'],['testing']
Testability,"@hahnjo , what do you get when run the following cmmands on lxplus8; ```; > ssh lxplus8; > export SITECONFIG_PATH=/cvmfs/cms-ib.cern.ch/SITECONF/local; > cd /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-20-2300; > eval `scram run -sh`; > cd /tmp/`whoami`; > cmsRun $CMSSW_BASE/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; ```; normally it should read the input file from `root://eoscms.cern.ch//eos/cms/store/user/cmsbuild/`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429#issuecomment-1686034460:344,test,test,344,https://root.cern,https://github.com/root-project/root/issues/13429#issuecomment-1686034460,1,['test'],['test']
Testability,"@hahnjo - could you, please trigger the tests? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692#issuecomment-1944120342:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/14692#issuecomment-1944120342,1,['test'],['tests']
Testability,@hahnjo @devajithvs @vgvassilev I can enable these tests for 2-3 platforms in master: what do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957#issuecomment-2076563483:51,test,tests,51,https://root.cern,https://github.com/root-project/root/issues/6957#issuecomment-2076563483,1,['test'],['tests']
Testability,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1585584886:214,test,tested,214,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886,4,['test'],"['test', 'tested', 'tests']"
Testability,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2379654469:608,test,tests,608,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469,1,['test'],['tests']
Testability,"@hahnjo Sure I can. It's 6.28.04 with the relevant patches https://github.com/NixOS/nixpkgs/pull/215187. Will be reproducible with:; ```; nix-build https://github.com/NixOS/nixpkgs/archive/refs/heads/pr/root_6_28_00.tar.gz -A root; ```; Failures can be found on CI.; * for macOS: https://github.com/NixOS/nixpkgs/pull/215187/checks?check_run_id=15806349613; * for Linux: https://logs.ofborg.org/?key=nixos/nixpkgs.215187&attempt_id=3eee831f-5f43-4913-977c-a8086a7838a5; Latter comes with a different set of linker errors:; ```; [ 70%] Linking CXX executable src/rootcling_stage1; /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `getOptimizationLevel(llvm::opt::ArgList&, clang::InputKind, clang::DiagnosticsEngine&) [clone .isra.0]':; (.text._ZL20getOptimizationLevelRN4llvm3opt7ArgListEN5clang9InputKindERNS3_17DiagnosticsEngineE.isra.0+0xd4): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)'; /nix/store/fm1xq4f3g48k1mmwl6qg9jc3ipgfsk1x-binutils-2.40/bin/ld: /nix/store/pgilbyz1iq5szq9cvqr8hqy811cqc1n5-clang-ROOT-patches-13-lib/lib/libclangFrontend.a(CompilerInvocation.cpp.o): in function `clang::CompilerInvocation::ParseLangArgs(clang::LangOptions&, llvm::opt::ArgList&, clang::InputKind, llvm::Triple const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, clang::DiagnosticsEngine&) [clone .localalias]':; (.text._ZN5clang18CompilerInvocation13ParseLangArgsERNS_11LangOptionsERN4llvm3opt7ArgListENS_9InputKindERKNS3_6TripleERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EERNS_17DiagnosticsEngineE+0x9d): undefined reference to `clang::getLastArgIntValue(llvm::opt::ArgList c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1674281649:379,log,logs,379,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1674281649,1,['log'],['logs']
Testability,"@hahnjo Thanks for the comment! I can move it there, but do I really need to derive from TRandomEngine? The parent methods are for double Rndm(), which does not seem very useful to me.; This generator is a binary register generator, so rather a quite different structure, and it is not intended to be used as a normal generator, but rather as a test scenario or helper math functions for electronics testing. It also is inherently templated, etc. It returns an array rather than just a number Rndm(). See https://github.com/root-project/root/pull/8798/files#diff-2e848ceefaff2e24c9b2970fb86a8da1d3d00603fc4f48f920421e603198fab2. Wrt tests, I will 'copy' the mentioned tutorial as 'test' once it's clear where this class should go. Thanks for the review!! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8798#issuecomment-2078772470:345,test,test,345,https://root.cern,https://github.com/root-project/root/pull/8798#issuecomment-2078772470,4,['test'],"['test', 'testing', 'tests']"
Testability,"@hahnjo `countIncludePaths` is fine to fail with `-Dclingtest=On` - that's exactly what we're trying to catch with this test :-) We could filter a bit (better), maybe? In the end what we want to catch with this test is CMake changes (e.g. during upgrade) or rootcling changes that inject a load of irrelevant / wrong `-I`s. We had an instance of that in the past.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8204#issuecomment-845925405:120,test,test,120,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-845925405,2,['test'],['test']
Testability,"@hahnjo for `vector<char>` it's all fine, there is actually a test for it [here](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/test/stl_vector.py#L18) and it succeeds, meaning that our pythonization for `std::vector` runs fine. The fact that `value_type` for `vector<char>` in Python is the Python string `""char""` is due to another pythonization injected by cppyy itself [here](https://github.com/root-project/root/blob/07932d78211d0ac5fdb198ac2260c35530cb9647/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx#L1159). Simple test:. ```python; >>> import ROOT; >>> a = ROOT.std.vector['char'].value_type; >>> a; 'char'; >>> type(a); <class 'str'>; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11592#issuecomment-1282453903:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/11592#issuecomment-1282453903,3,['test'],['test']
Testability,"@hahnjo hm that's an interesting clue, but then I still don't fully understand why `RooFit::TestStatistics::RooUnbinnedL` would give a different answer, because it also just calls `RooAbsPdf::extendedTerm`, so it should still get the exact same result... Or is the problem that the FMA operation on the different parts of the sum (the likelihood is calculated over multiple event ranges in the test that is failing, which are summed afterwards) has higher rounding errors on non-x86 so that in the end the result indeed differs?. Or, even more problematically, could such FMA operations also cause similar rounding errors on x86 so that EXPECT_EQ indeed becomes impossible (and I just got lucky with the current parameters on x86)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1544370239:92,Test,TestStatistics,92,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1544370239,2,"['Test', 'test']","['TestStatistics', 'test']"
Testability,@hahnjo thanks a lot for fix! (and thanks to @mrodozov for reporting and testing!),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8239#issuecomment-849566479:73,test,testing,73,https://root.cern,https://github.com/root-project/root/pull/8239#issuecomment-849566479,1,['test'],['testing']
Testability,"@hahnjo that's fair; but I suppose we still wanna enable it on all our main tested platforms, at least for the CI nodes.; I tried adding appending `-Wno-error` to the CMakeLists of some directories (like `interpreter`), but it didn't really work (I guess `-Werror` gets added after it so it suppresses the other flag) and even if it did it looks sketchy. Not sure what's the best way to approach this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2173375106:76,test,tested,76,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2173375106,1,['test'],['tested']
Testability,"@hahnjo there is no stack trace unfortunately, just the assertion failure message. Were you able to reproduce yourself? I can reproduce on both my laptop and desktop machines, Ubuntu and CentOS7 with master, but not e.g. on lxplus. As for the use of `isa_and_nonnull`, @Axel-Naumann can better comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899293659:56,assert,assertion,56,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899293659,1,['assert'],['assertion']
Testability,"@hahnjo, looks like the test failures in #13139 that were fixed by this commit are gone. Any idea why?. @smuzaffar, can we test this PR for cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14777#issuecomment-1954936179:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/14777#issuecomment-1954936179,2,['test'],['test']
Testability,"@hahnjo, thanks for working on this! Could you share some more information about the test failures? . Just like you, I am quite puzzled why that fixes any tests... The only reason that I can think of is we did not properly reverted https://github.com/vgvassilev/clang/commit/fce26074d415c33196632442e344b5c43efba6e2 which does not seem the case... Can you remove the fixup patch to see current failures?. PS: Maybe somehow clad picks up old headers/libraries?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-824616694:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-824616694,2,['test'],"['test', 'tests']"
Testability,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218522298:20,test,test,20,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218522298,2,['test'],['test']
Testability,"@hahnjo; > I'm not sure if it's a good idea to disguise FreeBSD as Linux by including SetUpLinux, did you evaluate creating a separate SetUpBSD or something like that?. indeed I have thought about it, but laziness took over at this stage since fbsd is apparently similar enough for a first try. I'll separate it out. > Tests should pass on Linux. It's possible that there is some common problem that makes multiple / many tests fail. Probably needs to be looked at in more detail. luckily most tests seem to pass on linux with my branch. The failed ones I think are related to whatever I did not want to install (dependency-wise); On FreeBSD the situation might be very similar since I keep a pretty minimal system. A couple do have me worried though, like the threading stuff and there is a number of std container/wrapper streaming tests that fail (e.g. roottest-root-io-cpp11Containers-forwardList) plus some more IO related stuff, I suspect some different conventions in the linking chain, who knows, a root internals expert might find the issue much faster than I can.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1587190402:319,Test,Tests,319,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1587190402,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"@hahnjo; I think the issue is maybe that this test uses:. ```; static UInt_t id = 0;; TTree *data = new TTree(name, name);; data->Branch(""EventNumber"", &id, ""EventNumber/I"");; ```. but later:. ```; Float_t fevNum;; fReader.AddSpectator(""EventNumber"", &fevNum);; tree->SetBranchAddress(""EventNumber"", &fevNum);; ```. In contrast, TestCrossValidationIntVar seems to correctly use two variables to properly read the tree and spectate:. ```; Int_t uid;; Float_t fid;; reader.AddSpectator(""EventNumber"", &fid);; tree->SetBranchAddress(""EventNumber"", &uid);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010#issuecomment-2079405188:46,test,test,46,https://root.cern,https://github.com/root-project/root/issues/10010#issuecomment-2079405188,2,"['Test', 'test']","['TestCrossValidationIntVar', 'test']"
Testability,@henryiii Have you tried using the code after the patch? I remember seeing extra test failures with this patch compared to what we currently have (https://github.com/root-project/root/pull/1689#issuecomment-380143670).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1843#issuecomment-387644314:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/1843#issuecomment-387644314,1,['test'],['test']
Testability,"@henryiii I was about to merge this locally, but when I tested it, I realized that the changes introduced here (porting to use C bindings for MPI, but not only) actually breaks more tests. I think we will have rework the changes and separate the move to C bindings from other functional changes that are currently in the same commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371473009:56,test,tested,56,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371473009,2,['test'],"['tested', 'tests']"
Testability,"@henryiii If you configure ROOT with `-Dtesting=ON -Droottest=ON`, then you can run the tests with `ctest -R minuit2`, but it may also be important to run `ctest -R roostats` (or all tests, really, since some mathcore tests also use Minuit2). However, to see the failures, just the Minuit2 tests are enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-371488120:88,test,tests,88,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-371488120,4,['test'],['tests']
Testability,"@ianna, this is the implicit conversion from a tuple of arguments: https://github.com/wlav/CPyCppyy/commit/eec92e53af6e8eb0c89fe27332cdc23179059bb7. It is only accepted for C++ functions that are temporaries (const ref, by value, move), whereas returning a proxy object directly works in all cases except moves. In principle I could make both work in all cases, but this seems to be more logical, especially since methods could be overloaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12580#issuecomment-1492017964:388,log,logical,388,https://root.cern,https://github.com/root-project/root/pull/12580#issuecomment-1492017964,1,['log'],['logical']
Testability,"@iarspider Did your tests indicate that this is a regression introduced by that commit specifically, or that this issue was simply not there yet at the time of that commit and it could be any commit since then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1983530703:20,test,tests,20,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1983530703,1,['test'],['tests']
Testability,"@ikabadzhov i won't merge this for now. When you have time please check the difference between master, master + this patch and any alternative version you come up with on a dedicated micro-benchmark.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9378#issuecomment-986022674:189,benchmark,benchmark,189,https://root.cern,https://github.com/root-project/root/pull/9378#issuecomment-986022674,1,['benchmark'],['benchmark']
Testability,@imaxoi rebase on master to get rid of the `dataframe_misc` test failure,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2313#issuecomment-412067083:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/2313#issuecomment-412067083,1,['test'],['test']
Testability,"@imaxoi windows fails with these kind of errors (can you access the jenkins logs?):; ```; 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\ALL_BUILD.vcxproj"" (default target) (1) ->; 14:28:11 ""C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj"" (default target) (390) ->; 14:28:11 C:\build\workspace\root-pullrequests-build\build\include\ROOT/RDFInterfaceUtils.hxx(305): error C2466: cannot allocate an array of constant size 0 [C:\build\workspace\root-pullrequests-build\build\tree\dataframe\test\dataframe_vecops.vcxproj]; ```. Can you please check what it does not like at `RDFInterfaceUtils.hxx:305`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2259#issuecomment-401342291:76,log,logs,76,https://root.cern,https://github.com/root-project/root/pull/2259#issuecomment-401342291,3,"['log', 'test']","['logs', 'test']"
Testability,"@jalopezg-git much better, but still not good enough:; ```; C:\root-dev\build\x86\debug_test\tree\ntuple\v7\test>Debug\ntuple_basics.exe; Running main() from C:\root-dev\build\x86\debug_test\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; [==========] Running 18 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.ReconstructModel; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RNTupleSerialize.cxx:1397 in class ROOT::Experimental::RResult<void> __cdecl ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void *,unsigned int,class ROOT::Experimental::RNTupleDescriptorBuilder &)>: Pre-release format version: RC 1; [ OK ] RNTuple.ReconstructModel (3018 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning C:\root-dev\git\debug\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __thiscall ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13452#issuecomment-1678063438:108,test,test,108,https://root.cern,https://github.com/root-project/root/pull/13452#issuecomment-1678063438,5,['test'],"['test', 'tests']"
Testability,"@jalopezg-r00t I have rebased on top of your changes. (Thanks for the improvements!). Would you mind taking a look? I am not sure on the new logic of replaceCollaborationDiagrams, I have added it as a final-step, but it's not finding it. Also, in my previous version, I had parallelized makeCollaborationDiagrams.sh, see https://github.com/root-project/root/blob/9e1f918b5c0b6eee4ff22155e1f2bdaaf3172bb6/documentation/doxygen/makelibs.sh. I do not see something similar when you call bash makeCollaborationDiagrams without -j. Is this because that step is taken care later by replace? Or could my parallelization be backported into your new script?. Cheers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1180920156:141,log,logic,141,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1180920156,1,['log'],['logic']
Testability,"@jalopezg-r00t I obviously tried with master 😉 ; ```; root [0] int test[]={2,4,6,8,10};; root [1] test[4]; (int) 2; root [2] test[4]=20;; root [3] test[4]; (int) 20; root [4] test[0]; (int) 20; root [5] test; (int [5]) { 20, 4, 6, 8, 10 }; root [6]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9809#issuecomment-1068057569:67,test,test,67,https://root.cern,https://github.com/root-project/root/issues/9809#issuecomment-1068057569,6,['test'],['test']
Testability,"@jalopezg-r00t I'll have to make several tests, `TerminalDisplayWin` is very sensitive to this kind of change, and it might create many side effects...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10078#issuecomment-1062196190:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/10078#issuecomment-1062196190,1,['test'],['tests']
Testability,"@jblomer , we are trying to test latest root master changes in [CMSSW](https://github.com/cms-sw/cmsdist/pull/8973) and our build failed with errors like [a]. Looks like this change is causing cmssw to fail. I guess we need to update cmssw to use `model.GetDefaultEntry()->GetPtr<T>(name)` instead of `model.Get<T>(name)` ... right? What about `addField<T>()` calls?. We also want same cmssw code to work for ROOT 6.26 and above. So should we add some `#if ROOT_VERSION_CODE >= ROOT_VERSION(6,31,0)` blocks ?. [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6f60ec/37085/build-logs/PhysicsTools/NanoAOD/log.html; ```; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/TriggerOutputFields.cc:126:38: error: 'class ROOT::Experimental::RNTupleModel' has no member named 'Get'; 126 | const auto* existing_field = model.Get<bool>(name);; | ^~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/TriggerOutputFields.cc:126:42: error: expected primary-expression before 'bool'; 126 | const auto* existing_field = model.Get<bool>(name);; | ^~~~; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc: In member function 'void NanoAODRNTupleOutputModule::CommonEventFields::createFields(ROOT::Experimental::RNTupleModel&)':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc:77:28: error: expected primary-expression before '>' token; 77 | model.AddField<UInt_t>(""run"", &m_run);; | ^; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_14_0_ROOT6_X_2024-01-28-2300/src/PhysicsTools/NanoAOD/plugins/rntuple/NanoAODRNTupleOutputModule.cc:77:30: error: left operand of comma operator has no effect [-Werror=unused-value]; 77 | model.A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14454#issuecomment-1914756475:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/14454#issuecomment-1914756475,4,"['log', 'test']","['log', 'logs', 'test', 'tests']"
Testability,"@jblomer : I added few tests equivalent to the Davix tests (sorry for the lack creativity) and I also took the liberty and modified `root://eospublic.cern.ch//eos/root-eos/xrootd.test` so it is in line with `http://root.cern.ch/files/davix.test`. ```; ctest -I 164,165; Test project /home/simonm/git/root-my/buildtmp; Start 164: gtest-net-davix-test-RRawFileDavix; 1/2 Test #164: gtest-net-davix-test-RRawFileDavix ..... Passed 0.20 sec; Start 165: gtest-net-netxng-test-RRawFileNetXNG; 2/2 Test #165: gtest-net-netxng-test-RRawFileNetXNG ... Passed 0.05 sec; ```. However running the full test suite yielded some failures:. ```; 99% tests passed, 18 tests failed out of 2101. Label Time Summary:; cling = 69.10 sec; longtest = 1541.18 sec; matrix = 0.22 sec; multithreaded = 206.29 sec; python_runtime_deps = 27.45 sec; regression = 68.69 sec; roottest = 69.32 sec; tutorial = 1559.92 sec. Total Test time (real) = 5594.32 sec. The following tests FAILED:; 	 3 - pyunittests-pyroot-dependency-versions (Failed); 	 56 - pyunittests-pyroot-numbadeclare (Failed); 	 57 - test-import-numba (Failed); 	918 - tutorial-dataframe-df026_AsNumpyArrays-py (Failed); 	920 - test-import-pandas (Failed); 	961 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Failed); 	962 - test-import-numba (Failed); 	1219 - roottest-python-JupyROOT-cppcompleter_doctest (Failed); 	1220 - roottest-python-JupyROOT-handlers_doctest (Failed); 	1221 - roottest-python-JupyROOT-utils_doctest (Failed); 	1222 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1223 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1224 - roottest-python-JupyROOT-thread_local_notebook (Failed); 	1225 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 	1226 - roottest-python-JupyROOT-tpython_notebook (Failed); 	1227 - roottest-python-JupyROOT-Cpp_IMT_Canvas_notebook (Failed); 	1444 - roottest-root-html-runMakeIndex (Failed); 	1627 - roottest-root-meta-execTypedefList-auto (Failed); ```. I don't think it's related to the P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-948823698:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-948823698,15,"['Test', 'test']","['Test', 'test', 'test-RRawFileDavix', 'test-RRawFileNetXNG', 'tests']"
Testability,"@jblomer : thanks a lot for your comments, I will address them shortly!; ; >One thing I'd like to discuss before merging is how we can unit test the code. If there is a stable, publicly available XRootD >service with test data, we can use the RRawFileDavix unit test as a blueprint. Otherwise, given that we have access to the xrootd >library, perhaps we can spawn a simple ad-hoc server in another thread. Well, I think one nice thing that we could do is to have an XRootD server with an HTTP plugin exporting same files with both root and HTTP protocols. Then we could simply run all the tests you currently have for the `RRawFileDavix` also for `RRawFileNetXNG`. If you have some stress tests we could even use them to benchmark the two protocols.; Could we use `root.cern.ch` to do this? Otherwise, I can create a small testing service, I would need to see what machine I can get.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-922713482:140,test,test,140,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-922713482,7,"['benchmark', 'test']","['benchmark', 'test', 'testing', 'tests']"
Testability,"@jblomer @bellenot . `arc4random_buf()` looks like preferable method to get cryptographic random numbers and on newer Linux it provided with `<stdlib.h>`.; But on Mac or Ubuntu or alma it is not a case. ; On some platforms (including Mac) one can use `libbsd` - but again not always.; And finally there is `read_random` function. . Seems to be, one need to test all them one after another with `CHECK_CXX_SOURCE_COMPILES` to be able use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1985724668:357,test,test,357,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1985724668,1,['test'],['test']
Testability,"@jblomer I added logging in 1916d13c83. Logged errors look like: ; ```text; [ RUN ] RIoUring.IsAvailable; io_uring is not available; Error initializing io_uring: Invalid argument; At:; ROOT::Internal::RIoUring::RIoUring(size_t) [/home/max/projects/rootdev/root/io/io/inc/ROOT/RIoUring.hxx:31]; ```. I ran into a weird error when I was messing around making the `io_uring_queue_init` fail with crazy ring sizes like 10000 where any other `io_uring_queue_init` calls (even from separate processes!) failed. It's possible there's a leak on our end, but am I pretty sure this is actually a resolved issue on the `liburing` side (https://github.com/axboe/liburing/issues/157). I am running an affected version (5.7.1) so that could be an explanation. I will keep an eye out for this in the future in case it's indeed my fault.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-664636722:17,log,logging,17,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-664636722,2,"['Log', 'log']","['Logged', 'logging']"
Testability,@jblomer the failure at https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/145821/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_ntuple/ seems real -- we get a different type name for mac 11..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621#issuecomment-1135499768:104,test,testReport,104,https://root.cern,https://github.com/root-project/root/pull/10621#issuecomment-1135499768,2,['test'],"['test', 'testReport']"
Testability,"@jblomer, I thought I'd see if you had any comments about the approach before going ahead and splitting the rest. The idea is for tests to include the new convenience header `ntuple_test.hxx` and then we add a new line in the CMake file. I am not super experienced with CMake, so if there's an issue with including possibly extraneous libraries for each test file I can change it. . The tests are nicely structured, so I think I'll be able to script something for the grunt work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619:130,test,tests,130,https://root.cern,https://github.com/root-project/root/pull/5619,3,['test'],"['test', 'tests']"
Testability,"@jblomer. > My suggestion would be: own header, Internal namespace. ok, left as is. > and a free factory method in the Internal namespace. With https://github.com/root-project/root/pull/14521, we get `ROOT::Experimental::Internal::CreateRNTupleWriter` - is that sufficient? (I'll need to update the test one that PR is merged). @pcanal. > This is related but different from writing into the file `/dev/null` :). Indeed, `RPageNullSink` avoids the bookkeeping overhead to maintain column ranges and build descriptors (as well as their serialization).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14502#issuecomment-1923386097:299,test,test,299,https://root.cern,https://github.com/root-project/root/pull/14502#issuecomment-1923386097,1,['test'],['test']
Testability,"@jiangyilism, thanks for your patch! Looks reasonable approach to me. Can you add some tests for it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1251393324:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1251393324,1,['test'],['tests']
Testability,"@jknedlik: the tests are failing because the new constructor is ambiguous: you should set the 'lurl' as in my example, as second argument, without default:; `; TNetXNGFile(const char *url, const char *lurl, Option_t *mode="""", const char *title="""",Int_t compress=1, Int_t netopt=0, Bool_t parallelopen=kFALSE);; `; otherwise the two constructors are indistinguishable when called at run time.; (My suggestion for two constructors addressed a link time problem, when default values are ignored, making code expecting the old signature to fail linking).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2751#issuecomment-466987840:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/2751#issuecomment-466987840,1,['test'],['tests']
Testability,"@junaire tests *should* be clean in CI builds, as you can see for this PR. Any failures are introduced by the code changes, possibly due to exposing other issues (as was the case here, leading to this fix). And it's not only some obscure platforms, but both macOS and two of the three Linux platforms. But we should discuss this on the PR itself, not here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1273026077:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1273026077,1,['test'],['tests']
Testability,"@junaire, can you test if this solves also your problems?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272333121:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272333121,1,['test'],['test']
Testability,"@kamahori Jenkins results of tests are not available for people without CERN account, I am sorry for this. Windows failure is not connected with your test, but is actually infrastructure configuration issue (you need to fork https://github.com/root-project/roottest and it will be gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-593975063:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-593975063,2,['test'],"['test', 'tests']"
Testability,"@kamahori no worries about test failures, it is unrelated to your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-603096683:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-603096683,1,['test'],['test']
Testability,"@karies: Thanks a lot, and sorry for the long turn-around on my side. Note that I also added https://github.com/root-mirror/roottest/pull/6 to test this feature to some limited extend; let me know if anything else needs to be done there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/212#issuecomment-261899539:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/212#issuecomment-261899539,1,['test'],['test']
Testability,@kft I updated the tests to reproduced the issues you reported and everything match your description ... except that I see a success for 'char'. How does it fail for you?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-852418652:19,test,tests,19,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-852418652,1,['test'],['tests']
Testability,"@kgertsenberger ; As you can see, I merged your PR and fix several compiler warnings afterwards - see #4017 ; If you can implement methods for other plugins - it would be grate. ; Even better if one could provide testing in roottest - one could use SQLite, which is very simple to handle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3961#issuecomment-507209448:213,test,testing,213,https://root.cern,https://github.com/root-project/root/pull/3961#issuecomment-507209448,1,['test'],['testing']
Testability,@kgertsenberger ; Can you test https://github.com/root-project/root/pull/7134; It also includes two other bugfixes.; Please try statement with binary and without binary data - if it still works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-773455484:26,test,test,26,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-773455484,1,['test'],['test']
Testability,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:; ```diff; diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx; index 2a127888a2..9deb3af147 100644; --- a/graf3d/eve7/inc/ROOT/REveElement.hxx; +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx; @@ -16,26 +16,13 @@; #include <ROOT/REveVector.hxx>; #include <ROOT/REveProjectionBases.hxx>; ; +#include <nlohmann/json_fwd.hpp>; +; #include <map>; #include <memory>; ; class TGeoMatrix;; ; -namespace nlohmann {; -template<typename T, typename SFINAE>; -struct adl_serializer;; -; -template <template <typename U, typename V, typename... Args> class ObjectType,; - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,; - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,; - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,; - class BinaryType>; -class basic_json;; -; -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,; - adl_serializer, std::vector<std::uint8_t>>;; -} // namespace nlohmann; -; namespace ROOT {; namespace Experimental {; ; ```; (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218189751:1390,test,tested,1390,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218189751,1,['test'],['tested']
Testability,@krasznaa see https://github.com/root-project/root/blob/master/test/CMakeLists.txt#L409-L445,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1342284321:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1342284321,1,['test'],['test']
Testability,"@ktf @dpiparo The only problem left is a problem with the test itself. When prefetching is enabled requires more than 2Gb of memory and thus fails on 32 bit platforms. I.e @ktf you can use the PR as-is if need be, it shall be merge soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2406192965:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406192965,1,['test'],['test']
Testability,@ktf Can you test the additional commit that I pushed here? This is another API breaking change (new function).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2402197392:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2402197392,1,['test'],['test']
Testability,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2488#issuecomment-413924715:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/2488#issuecomment-413924715,1,['test'],['test']
Testability,"@ktf That's fine. As I said, my comments were to be taken only as suggestions. Hopefully we will get Arrow in the externals soon to be able to test and merge. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-375313056:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-375313056,1,['test'],['test']
Testability,@ktf The only lingering question is whether the char support works (see earlier comment). So closing for the moment but feel free to reopen once you get a chance to test this. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-859662900:165,test,test,165,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-859662900,1,['test'],['test']
Testability,@ktf do you think you could have a look at this? Can we do without including a header from `testing/`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13516#issuecomment-1689929484:92,test,testing,92,https://root.cern,https://github.com/root-project/root/issues/13516#issuecomment-1689929484,1,['test'],['testing']
Testability,"@ktf the `gtest-roofit-roofitcore-test-testLikelihoodJob` test [timed out](https://github.com/root-project/root/runs/30517916480), but I guess it's unrelated...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16505#issuecomment-2373255228:34,test,test-testLikelihoodJob,34,https://root.cern,https://github.com/root-project/root/pull/16505#issuecomment-2373255228,2,['test'],"['test', 'test-testLikelihoodJob']"
Testability,"@ktf this fails quite horribly in CI:; ```; TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.; ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1750151823:258,Assert,Assertion,258,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1750151823,1,['Assert'],['Assertion']
Testability,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```; Grab the image:; $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready; Then:; ; ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin refs/pull/13808/head:reduce-memory-usage; git checkout reduce-memory-usage; git rebase master; ); (; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; ); (; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L; ); (; cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'; ); (; cd '/github/home/ROOT-CI/build'; ctest --output-on-failure --parallel 16 --output-junit TestResults.xml; )```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1791153635:1325,Test,TestResults,1325,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1791153635,1,['Test'],['TestResults']
Testability,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1788545068:53,assert,asserts,53,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1788545068,2,['assert'],"['assertions', 'asserts']"
Testability,"@ktf,. ```; cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'; [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'; [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'; [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'; [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'; [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'; [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'; [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'; [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'; [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'; [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'; [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'; [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'; [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'; ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1598833198:43,log,log,43,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1598833198,1,['log'],['log']
Testability,@linev ; I have made a test example in https://github.com/alja/EveWebApp running macro collection_proxies_test.C. The file dialog will be used in FireworksWeb to open a data file and save/reload the configuration file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8333#issuecomment-854900524:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/8333#issuecomment-854900524,1,['test'],['test']
Testability,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it..; ```; -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml; ```; So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):; ```; [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test; civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]; (void)pthread_setname_np(pthread_self(), threadName);; ^; 1 warning generated.; example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]; int main(int argc, char **argv); ^; example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]; int main(int argc, char **argv); ^; 2 warnings generated. ```. We will investigate why and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418769386:244,test,testing,244,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418769386,1,['test'],['testing']
Testability,@linev @couet how is the process to fix those tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16372#issuecomment-2331994920:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/16372#issuecomment-2331994920,1,['test'],['tests']
Testability,"@linev @osschar ; I have also changed REveRenderData to store index buffer as unsigned integer. That required change in 9 files. I made test in event_demo.C, calorimeters.C, and geom_cms.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6074#issuecomment-664660003:136,test,test,136,https://root.cern,https://github.com/root-project/root/pull/6074#issuecomment-664660003,1,['test'],['test']
Testability,"@linev I am testing this and will likely merge it today. One thing I noticed is that if I have the regular Qt4 options turned on, the build fails. Is that expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1623#issuecomment-367607887:12,test,testing,12,https://root.cern,https://github.com/root-project/root/pull/1623#issuecomment-367607887,1,['test'],['testing']
Testability,@linev I am testing your PR locally and let you know! Thanks a lot!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618864509:12,test,testing,12,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618864509,1,['test'],['testing']
Testability,@linev I found out by testing that multiple connections are possible if I use session key and require auth key is disabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14779#issuecomment-1969627701:22,test,testing,22,https://root.cern,https://github.com/root-project/root/pull/14779#issuecomment-1969627701,1,['test'],['testing']
Testability,"@linev I wanted to test the changes I made to QtGSI, but I will merge this now and port the examples later. I don't think that there is any problem with the code. Sorry for taking this long.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1663#issuecomment-369579025:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/1663#issuecomment-369579025,1,['test'],['test']
Testability,"@linev PR looks good for me (I think there could be improvements but we can do them afterwords very carefully). I really afraid that this PR is very big, and if we will need to revert something it will be almost impossible. Can it go in ""a smaller pieces""? Other thing can you try to build with full test suite?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-606726418:300,test,test,300,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-606726418,1,['test'],['test']
Testability,@linev Please check.; The changes and testing have been done based on FireworksWeb event display.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15382#issuecomment-2083610317:38,test,testing,38,https://root.cern,https://github.com/root-project/root/pull/15382#issuecomment-2083610317,1,['test'],['testing']
Testability,"@linev Please check; I have tested the changes by checking memory consumption in an automatic loop.; Note, client removal of EveElements is not recursive. The server makes track of all removed ids and streams them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8571#issuecomment-870917716:28,test,tested,28,https://root.cern,https://github.com/root-project/root/pull/8571#issuecomment-870917716,1,['test'],['tested']
Testability,@linev Please look at PR.; This PR contains change for rendering of digits. The only commit it is not related to it is https://github.com/root-project/root/pull/14912/commits/8687719dcb3cf6b0d62147063d6b4d369ca8be17. I have added here a utility function to enable remote multiple connections. It is not used anywhere except in my local test macros.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14912#issuecomment-1984167095:336,test,test,336,https://root.cern,https://github.com/root-project/root/pull/14912#issuecomment-1984167095,1,['test'],['test']
Testability,"@linev Please review. I have tested macro event_demo.C, boxset.C, lineset.C together with collection_proxies.C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6656#issuecomment-710576703:29,test,tested,29,https://root.cern,https://github.com/root-project/root/pull/6656#issuecomment-710576703,1,['test'],['tested']
Testability,"@linev Thanks, but it's already done ^^; I am actually testing my rebase, and will push soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4548#issuecomment-542787781:55,test,testing,55,https://root.cern,https://github.com/root-project/root/pull/4548#issuecomment-542787781,1,['test'],['testing']
Testability,"@linev Thanks, the correction is in the branch now. I did not noticed it because I made a test with only two stacks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6807#issuecomment-726989152:90,test,test,90,https://root.cern,https://github.com/root-project/root/pull/6807#issuecomment-726989152,1,['test'],['test']
Testability,@linev congratulations for coming up with this fantastic test - we would not have found this issue with out it!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12789#issuecomment-1540005927:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/12789#issuecomment-1540005927,1,['test'],['test']
Testability,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651#issuecomment-1923314212:24,test,test,24,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923314212,1,['test'],['test']
Testability,@linev could you also add a test along the lines of #13503 please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13559#issuecomment-1697326960:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/13559#issuecomment-1697326960,1,['test'],['test']
Testability,@linev it's detecting the warnings in the pull request description. the PR description is dumped in the build log.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316#issuecomment-852964550:110,log,log,110,https://root.cern,https://github.com/root-project/root/pull/8316#issuecomment-852964550,1,['log'],['log']
Testability,@linev: [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/71688/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/) indicates that at least on more change is needed in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-599254002:158,test,testReport,158,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-599254002,1,['test'],['testReport']
Testability,"@lmoneta , if the tests pass, do you think we are ready to merge the PR (and backport the changes to 6.32)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15078#issuecomment-2036452635:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/15078#issuecomment-2036452635,1,['test'],['tests']
Testability,"@lmoneta , we are [testing](https://github.com/cms-sw/cmsdist/pull/7911) latest [root changes in cmssw](https://github.com/root-project/root/compare/f1e8d0c17d...4c13caa0ac) and we are getting error [a] in `ROOT::Fit::Fitter` code. Could it be related to change in this PR? Note that root master commit f1e8d0c17d works fine. . By the way, the CMSSW code which calls `Fitter::FitFCN` is https://github.com/cms-sw/cmssw/blob/6d2f66057131baacc2fcbdd203588c41c885b42c/RecoPPS/ProtonReconstruction/src/ProtonReconstructionAlgorithm.cc#L269-L281. FYI @[iarspider](https://github.com/iarspider). [a]; ```; #0 0x00002aac70829ae1 in poll () from /lib64/libc.so.6; #1 0x00002aac78b8872f in full_read.constprop () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #2 0x00002aac78b890bc in edm::service::InitRootHandlers::stacktraceFromThread() () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 0x00002aac78b8ba0b in sig_dostack_then_abort () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #4 <signal handler called>; #5 __cxxabiv1::(anonymous namespace)::adjust_pointer<void> (offset=<error reading variable: Cannot access memory at address 0xfffffffffffffff0>, base=0x7ffc4c62b5b0) at ../../../../libstdc++-v3/libsupc++/tinfo.h:65; #6 __cxxabiv1::__dynamic_cast (src_ptr=0x7ffc4c62b5b0, src_type=0x2aac6e5a6df0 <typeinfo for ROOT::Math::IBaseFunctionMultiDimTempl<double>>, dst_type=0x2aac6e5a69f0 <typeinfo for ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData>>, src2dst=0) at ../../../../libstdc++-v3/libsupc++/dyncast.cc:55; #7 0x00002aac6e40b2d0 in ROOT::Fit::Fitter::GetDataFromFCN<ROOT::Fit::BasicFCN<ROOT::Math::IB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10650#issuecomment-1149048876:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/10650#issuecomment-1149048876,1,['test'],['testing']
Testability,@lmoneta : Is there a unit test to which I can add a check for the new method. Please let me know what you think.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/464#issuecomment-289400945:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/464#issuecomment-289400945,1,['test'],['test']
Testability,@lmoneta @kjvbrt it seems to me we are very near to the fix: what is missing to make these tests succeed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14702#issuecomment-1968323629:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/14702#issuecomment-1968323629,1,['test'],['tests']
Testability,"@lmoneta @oshadura hi, let me know whether I can help you test the PR thoroughly. I'd understand that rebasing could make it easier, depending of the additional tools / testbeds you'd like to use for the testing phase.; I believe [libcmaes](https://github.com/beniz/libcmaes) is sound, so it should really be about the integration into ROOT structures and framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507#issuecomment-376036974:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/507#issuecomment-376036974,3,['test'],"['test', 'testbeds', 'testing']"
Testability,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2441#issuecomment-410548934:160,test,testing,160,https://root.cern,https://github.com/root-project/root/pull/2441#issuecomment-410548934,1,['test'],['testing']
Testability,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2440#issuecomment-410543401:159,test,testing,159,https://root.cern,https://github.com/root-project/root/pull/2440#issuecomment-410543401,1,['test'],['testing']
Testability,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2441#issuecomment-411796242:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/2441#issuecomment-411796242,1,['test'],['tests']
Testability,"@lmoneta Also there are several source files in MathCore, where `R__HAS_MATHMORE` tested and some MathMore includes are used. Once you merge PR - I will try to build my `source_includes` branch again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418#issuecomment-617210588:82,test,tested,82,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617210588,1,['test'],['tested']
Testability,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-724727949:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-724727949,2,['test'],['tests']
Testability,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-723105789:66,log,logging,66,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-723105789,2,"['log', 'test']","['logging', 'tests']"
Testability,"@lmoneta Hi, sorry I just had a very busy month last month.; Could I ask what improvement should I do about the test program?; I will start right away.; Again, sorry for taking so long to come back to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-422611103:112,test,test,112,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-422611103,1,['test'],['test']
Testability,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085#issuecomment-770029370:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/7085#issuecomment-770029370,3,['test'],"['test', 'tests']"
Testability,@lmoneta I am using your branch to test with the cmake command:; ```; '/mnt/build/lcgsoft/releases/cmake-3.15.7-Linux-x86_64/bin/cmake' '-DCMAKE_BUILD_TYPE=Release' '-DCMAKE_INSTALL_PREFIX=/build/lcgsoft/releases/dev4cuda/ROOT/fix_cuda14/x86_64-centos7-gcc8-opt' '-Dpython=ON' '-Dpython3=ON' '-Dpython_version=3' '-Dbuiltin_lz4=ON' '-Dbuiltin_pcre=ON' '-Dbuiltin_xxhash=ON' '-Dbuiltin_ftgl=ON' '-Dbuiltin_afterimage=ON' '-Dbuiltin_glew=ON' '-Dbuiltin_unuran=ON' '-Dbuiltin_zstd=ON' '-Dcintex=ON' '-Dcuda=ON' '-Dtmva-gpu=ON' '-DCMAKE_CUDA_STANDARD=14' '-Ddavix=ON' '-Dexceptions=ON' '-Dexplicitlink=ON' '-Dfftw3=ON' '-Dgdml=ON' '-Dgsl_shared=ON' '-Dhttp=ON' '-Dgenvector=ON' '-Dvc=ON' '-Dmathmore=ON' '-Dminuit2=ON' '-Dmysql=ON' '-Dopengl=ON' '-Dpgsql=OFF' '-Dpythia6=OFF' '-Dpythia8=OFF' '-Dreflex=ON' '-Dr=OFF' '-Droofit=ON' '-Dssl=ON' '-Dunuran=ON' '-Dfortran=ON' '-Dxft=ON' '-Dxml=ON' '-Dxrootd=ON' '-Dzlib=ON' '-DCINTMAXSTRUCT=36000' '-DCINTMAXTYPEDEF=36000' '-DCINTLONGLINE=4096' '-Dfail-on-missing=ON' '-Dfitsio=ON' '-Doracle=OFF' '-Dgfal=OFF' '-DCMAKE_CXX_STANDARD=17' '-Ddcache=ON' '-Dgfal=ON' '-DGFAL_DIR=/build/lcgsoft/releases/dev4cuda/Grid/gfal/1.13.0-0/x86_64-centos7-gcc8-opt' '-DSRM_IFCE_DIR=/build/lcgsoft/releases/dev4cuda/Grid/srm-ifce/1.13.0-0/x86_64-centos7-gcc8-opt' '-Doracle=ON' '-DORACLE_HOME=/build/lcgsoft/releases/dev4cuda/oracle/19.3.0.0.0/x86_64-centos7-gcc8-opt' '-GUnix Makefiles' '/build/lcgsoft/root'; ```; And I am getting the following error:; ```; -- Configuring done; CMake Error at cmake/modules/RootMacros.cmake:894 (add_library):; CUDA_STANDARD is set to invalid value '17'; Call Stack (most recent call first):; cmake/modules/RootMacros.cmake:1295 (ROOT_LINKER_LIBRARY); tmva/tmva/CMakeLists.txt:53 (ROOT_STANDARD_LIBRARY_PACKAGE). -- Generating done; ```; Any idea?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5598#issuecomment-627358751:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/5598#issuecomment-627358751,1,['test'],['test']
Testability,@lmoneta I cannot see the link to the log ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40#issuecomment-64234473:38,log,log,38,https://root.cern,https://github.com/root-project/root/pull/40#issuecomment-64234473,1,['log'],['log']
Testability,"@lmoneta I have checked `test-RooFit-MultiProcess-Messenger` on infinite repeat on multiple machines and also on CI, it should be bug free now, so I need a bit more information. What setup are you running on? What is the output of the test before it hangs? Did you check out the branch clean (because I rebased / force pushed everything yesterday, so just a pull may not have fast-forwarded the branch)?. I will remove the Linkdef files. Indeed, the `res` directories are to prevent users from including the MP headers. I may need to do some magic in the next PR where they will need to be included in user facing headers again, but we'll cross that bridge when we get there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979100033:25,test,test-RooFit-MultiProcess-Messenger,25,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979100033,2,['test'],"['test', 'test-RooFit-MultiProcess-Messenger']"
Testability,"@lmoneta I have removed all the second derivative and step size code. As you suspected, it was all unnecessary. Looking back at my logs, it seems I just forgot to clean them up after introducing ExternalInternalGradientCalculator. This, together with the `long double` precision upgrade of the parameter transformation classes, allows for perfect bitwise floating point replication of the gradient calculation outside of Minuit. Thanks for the thorough review!. I also took care of the copyright lines and fixed some additional layout issues. Ready for a final review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8369#issuecomment-866827796:131,log,logs,131,https://root.cern,https://github.com/root-project/root/pull/8369#issuecomment-866827796,1,['log'],['logs']
Testability,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-721069405:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-721069405,2,"['log', 'test']","['logging', 'tests']"
Testability,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-720057247:27,log,log,27,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720057247,2,"['log', 'test']","['log', 'test']"
Testability,@lmoneta I removed the Linkdef files. Do you have more information on the Messenger test hanging?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979147928:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979147928,1,['test'],['test']
Testability,"@lmoneta I've implemented the conditional tests for the keras method. As well, this commit fixes the py2/py3 compatibility issue for the `find_python_module` function in `RootNewMacros.cmake` (simply a py2-only print statement buried in the code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253523265:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253523265,1,['test'],['tests']
Testability,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-739034972:22,log,logging,22,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-739034972,2,"['assert', 'log']","['assert', 'logging']"
Testability,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-717627738:44,log,logging,44,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-717627738,3,"['Log', 'log']","['Log', 'logging']"
Testability,"@lmoneta There are several tests in mathcore, which are using SpecFunc.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418#issuecomment-617200291:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617200291,1,['test'],['tests']
Testability,"@lmoneta There is only `Makefile` for unuran tests. Seems to be, they are not frequently tested. At least some of them not possible to compile. Probably, one should provide `CMakeLists.txt` file for them and add them to other ROOT tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5751#issuecomment-637296291:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/5751#issuecomment-637296291,3,['test'],"['tested', 'tests']"
Testability,@lmoneta This fixes the snapshot test on 32bits. Can you approve the merging into v6.14 patches? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2163#issuecomment-395468220:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/2163#issuecomment-395468220,1,['test'],['test']
Testability,"@lmoneta all finally compiles and is C++11 compatible - templated lambdas are only from C++14, so I had to improvise. Please have a look at anything I might have missed and you should be able to compile and test for yourself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-663171577:207,test,test,207,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-663171577,1,['test'],['test']
Testability,@lmoneta and I agreed that testing the interpreted version gives more coverage (testing feature X + interpreter) than the compiled one (testing only feature X). The execution times are very similar.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3426#issuecomment-463672689:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/3426#issuecomment-463672689,3,['test'],['testing']
Testability,"@lmoneta as discussed yesterday this is just the dump of our tanh approximation. I leave it up to you to decide how to do vectorisation. As seen between the ifndef statements, the vector unit is already used for a single evaluation of tanh (it is implemented as a fraction and numerator and denominator are calculated in parallel in the vector unit). I recon if one needs to do multiple tanh evaluations at the same time, one might want to swap between horizontal and vertical vectorisation. In the original, the if( x is large) tests were kept in UNLIKELY statements, I didn't follow up if this was because typical inputs in our use case are known, or because tanh is generally evaluated for small inputs …",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1044:529,test,tests,529,https://root.cern,https://github.com/root-project/root/pull/1044,1,['test'],['tests']
Testability,"@lmoneta as you suggested, the last patch lets cmake download both eigen3 and libcmaes, installs them locally within ROOT build repo and uses them to compile and run ROOT:. ```; cmake ../ -Dall=on -Dtesting=on -Dlibcmaes=on; ```. now does not require pkg-config, though uses pkg-config and an existing build of libcmaes if one is detected. The patch has been tested with and without CMA-ES support. Let me know how it goes and what is the next issue (if any :) ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40#issuecomment-64083303:359,test,tested,359,https://root.cern,https://github.com/root-project/root/pull/40#issuecomment-64083303,1,['test'],['tested']
Testability,"@lmoneta because then it makes mathcode 'depend' on RooFit per se. For integration test like this, you should consider putting them in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2016#issuecomment-389191423:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/2016#issuecomment-389191423,1,['test'],['test']
Testability,@lmoneta can I do something to fix this test ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7193#issuecomment-788723085:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/7193#issuecomment-788723085,1,['test'],['test']
Testability,"@lmoneta can correct me if I'm wrong, but I think you can just copy `hist/hist/test/test_TH1.cxx` and create `hist/hist/test/test_TH2.cxx`. Alternatively, out-of-source tests are kept at https://github.com/root-project/roottest/tree/master/root/hist",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9481#issuecomment-1005075691:79,test,test,79,https://root.cern,https://github.com/root-project/root/pull/9481#issuecomment-1005075691,3,['test'],"['test', 'tests']"
Testability,"@lmoneta cool, thanks - initial work is done, I will test - in the meantime, it would be awesome if you check my math and naming interpretations of parameters, cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-661969172:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-661969172,1,['test'],['test']
Testability,@lmoneta could you provide an answer to @beniz about how to test this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507#issuecomment-384556150:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/507#issuecomment-384556150,2,['test'],['test']
Testability,"@lmoneta for future commits, can you please leave an empty line between the subject (first line) and the commit description (starting in line 3)? Having text in the second line makes `git log --oneline` horrible to read because git thinks that the entire commit message is the subject...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9307#issuecomment-977850247:188,log,log,188,https://root.cern,https://github.com/root-project/root/pull/9307#issuecomment-977850247,1,['log'],['log']
Testability,"@lmoneta friendly ping :) I don't the think the failing test are connected to the PR, but I can't see the logs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8496#issuecomment-881678640:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/8496#issuecomment-881678640,2,"['log', 'test']","['logs', 'test']"
Testability,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:; ```c++; if (w != 0 && bincontent + w == bincontent); Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-791443564:112,test,test,112,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-791443564,1,['test'],['test']
Testability,"@lmoneta if you've got a test script or something, I can test once I finish. We have CUDA11 and cuDNN 8 on Arch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-661952582:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-661952582,2,['test'],['test']
Testability,"@lmoneta indeed, it looks like `-Droofit_multiprocess=OFF`, `-Dbuiltin_zeromq=OFF` and `-Dbuiltin_cppzmq=OFF` are used, at least on the mac11.0/cxx17 build log. Is there somewhere we can change this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-943650523:156,log,log,156,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-943650523,1,['log'],['log']
Testability,"@lmoneta is going to check where this is tested, and then see whether the new code is a viable replacement. A possible issue could be `TMath::Sin(pol0)` or similar nastiness, where the argument (possibly `fun.GetBody()`?) isn't valid C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1821#issuecomment-389148301:41,test,tested,41,https://root.cern,https://github.com/root-project/root/pull/1821#issuecomment-389148301,1,['test'],['tested']
Testability,@lmoneta test added: I confirmed it fails for master and works with this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7098#issuecomment-770754973:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/7098#issuecomment-770754973,1,['test'],['test']
Testability,"@lmoneta testing as we speak, give me 2 hours",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-671306766:9,test,testing,9,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-671306766,1,['test'],['testing']
Testability,"@lmoneta the logic is a bit different now and it needed to be re-implemented, as cudnn no longer provides equivalent helper algos, nor does it have those enums for preference. I have implemented a backwards compatible solution and reduced some branch complexity. Have a look here - https://github.com/root-project/root/pull/6058/files#diff-5bdcb6011937edc2089e7a0de3c8d62fR343-R400",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-662478612:13,log,logic,13,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-662478612,1,['log'],['logic']
Testability,"@lmoneta, shouldn't we link the whole archive of libVc.a into MathCore? We see some failures such as:; ```; root.exe -q -l -b test/testGenVectorVc.cxx . Processing test/testGenVectorVc.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general14signMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::SSE::c_general::signMaskDouble; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_13SSE9c_general13absMaskDoubleE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::SSE::c_general::absMaskDouble; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4Vc_16Common10AllBitsSetE' unresolved while linking function '_GLOBAL__sub_I_cling_module_9'!; You are probably missing the definition of Vc_1::Common::AllBitsSet; Maybe you need to load the corresponding shared library?; warning: Failed to call `testGenVectorVc()` to execute the macro.; Add this function or rename the macro. Falling back to `.L`.; ```. Where: ; ```; nm externals/usr/local/lib/libVc.a | grep _ZN4Vc_13SSE9c_general14signMaskDoubleE; 0000000000000580 R _ZN4Vc_13SSE9c_general14signMaskDoubleE; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-890588377:126,test,test,126,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-890588377,5,['test'],"['test', 'testGenVectorVc']"
Testability,"@lmoneta, this is ok to merge! (No test failures related to TMVA, this is true also for slc6/gcc49.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-386228851:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-386228851,1,['test'],['test']
Testability,"@lmoneta, what tests would be required before merging is ok?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3254#issuecomment-479962797:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/3254#issuecomment-479962797,1,['test'],['tests']
Testability,"@manolismih Can you please rebase, so we could run tests on CI? Thanks a lot!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4440#issuecomment-669056736:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/4440#issuecomment-669056736,1,['test'],['tests']
Testability,"@mario-krueger Thank you this catch! The errors are expected as they are (indirectly) suppose to catch change in the write of histograms; I will address them. However we did not catch this issue. Could you add a test (for example, how you discovered this). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7857#issuecomment-819068105:212,test,test,212,https://root.cern,https://github.com/root-project/root/pull/7857#issuecomment-819068105,1,['test'],['test']
Testability,@marsupial The test projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make is likely related to recent change in cling related to unload. Could you take a look? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/628#issuecomment-307440745:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/628#issuecomment-307440745,1,['test'],['test']
Testability,"@martinmine, could we run all tests with gtest- prefix as part of the PR builds?. @xvallspl looks good to me!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/486#issuecomment-292465464:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/486#issuecomment-292465464,1,['test'],['tests']
Testability,"@maxgalli `readFcc` fails because `writeFcc` fails. I have no idea what's causing the failure in `writeFcc`, but I assume it's safe to say it's not these changes since the test failed in the exact same way in another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5083#issuecomment-603158050:172,test,test,172,https://root.cern,https://github.com/root-project/root/pull/5083#issuecomment-603158050,1,['test'],['test']
Testability,"@mkrzewic @eamjensen could you maybe give this a short test on FreeBSD? I hope that a ""vanilla"" configuration of ROOT should now succeed, without specifying any `LLVM_TARGETS_TO_BUILD`. Closes #14075",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14115:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/14115,1,['test'],['test']
Testability,"@mkrzewic great work! I haven't looked at the changes in detail yet, just at the commits from a high level; for the first one in particular, it would be great to split this into smaller logical pieces. For example, the linking of the `crypt` library looks fairly self-contained. I'm not sure if it's a good idea to disguise FreeBSD as Linux by including `SetUpLinux`, did you evaluate creating a separate `SetUpBSD` or something like that?. > the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert. Looking at `interpreter/llvm/src/tools/clang/lib/Basic/Targets/OSTargets.h`, it indeed seems to not define `_REENTRANT`. I agree that it needs a separate look, probably not critical for the first support. > actually a lot more tests fail - what is the general state of the test results on the master branch?. Tests should pass on Linux. It's possible that there is some common problem that makes multiple / many tests fail. Probably needs to be looked at in more detail.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1587040920:186,log,logical,186,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1587040920,6,"['Test', 'log', 'test']","['Tests', 'logical', 'test', 'tests']"
Testability,@mkrzewic thanks for testing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14115#issuecomment-1827915981:21,test,testing,21,https://root.cern,https://github.com/root-project/root/pull/14115#issuecomment-1827915981,1,['test'],['testing']
Testability,@mlassnig it is not related; it's a pre-existing failure. Sorry about that. The tests are green wrt this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352#issuecomment-346401064:80,test,tests,80,https://root.cern,https://github.com/root-project/root/pull/1352#issuecomment-346401064,1,['test'],['tests']
Testability,"@msneubauer ran some tests on OSX 13 and it seems this issue is fixed. Thanks a lot, Mark! Here is what he ran:. ```; cat test_exceptions.C; void test_exceptions() {; try {; std::cout << ""got here\n"";; throw 1;; } catch (...) { }; }; wirelessprv-10-193-242-21:tmp msn$ root.exe -l -b -q -e '.x test_exceptions.C'. got here; ```. This is based on a source build of the root_v6.26.06.source.tar.gz tarball. cc: @hahnjo, @lhames",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-1302531033:21,test,tests,21,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1302531033,1,['test'],['tests']
Testability,@myself @vgvassilev @Teemperor I just realize that the nature of the PR completely changed (to match the direction I was pushing) so at this point (i.e. adding cmake flag to allow testing) I think this is good to go. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-324712290:180,test,testing,180,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-324712290,1,['test'],['testing']
Testability,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466#issuecomment-624594499:181,test,tests,181,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499,1,['test'],['tests']
Testability,"@odahme Here is a sample of the error output (that are many more of these lines in the full output).; The test failed on all Mac nodes. ```; Processing /Volumes/MacintoshHD2/ec/build/workspace/root-nightly-master-cxx14root7/BUILDTYPE/Release/COMPILER/native/LABEL/mac1012/root/tutorials/roofit/rf611_RooMCMarkovChainexample.C... [NON-XML-CHAR-0x1B][1mRooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby[NON-XML-CHAR-0x1B][0m ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349216512:106,test,test,106,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349216512,3,"['log', 'test']","['logEvalError', 'test']"
Testability,"@olifre I digged a bit more and discovered that as the units were gradually introduced, the interface was not the same from the beginning. So the initial version switching to G4 units by default was v6-19-02 (backported also to v6-18-02) and there the interface to change the unit back to CGS was:; ```; TGeoUnit::setUnitType(TGeoUnit::kTGeoUnits);; ```; The system allowing to set the default unit via TGeoManager was introduced in v6-23-02 (and backported to v6-22-08) and was the same until v6-25-01:; ```; TGeoManager::LockDefaultUnits(false);; TGeoManager::SetDefaultUnits(TGeoManager::kRootUnits);; TGeoManager::LockDefaultUnits(true);; ```; So your logic will work for sure only starting from v6-23-02 included (6-23-01 seems to have the initial style)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9383#issuecomment-988638453:656,log,logic,656,https://root.cern,https://github.com/root-project/root/issues/9383#issuecomment-988638453,1,['log'],['logic']
Testability,"@oshadura , we don't need to rebase this one now. We need first to test well this PR first. ; After that, then we could rebase it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507#issuecomment-375695470:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/507#issuecomment-375695470,1,['test'],['test']
Testability,"@oshadura . There are also [real failures](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/116051/console) produced by new `root-webgui-ping` test, but I do not see any error output :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901#issuecomment-829095490:167,test,test,167,https://root.cern,https://github.com/root-project/root/pull/7901#issuecomment-829095490,1,['test'],['test']
Testability,"@oshadura @Axel-Naumann ; Dear Mentors,; Here's my pull request for the issue https://github.com/root-project/root/issues/6635.; Can you please review this. Please excuse any instances where the timeout parameter has been added unnecessarily as it wasn't clear to me how to test this. Since the desired interval for `TIMEOUT` hadn't been mentioned, I have added it as 600 s.; I'll fix any incorrect changes as soon as review comments and suggestions are added. I will squash the commits after the review. Thanks in advance !",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7136:274,test,test,274,https://root.cern,https://github.com/root-project/root/pull/7136,1,['test'],['test']
Testability,@oshadura @lmoneta Do we understand why the MathCore test fail here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-393168984:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-393168984,1,['test'],['test']
Testability,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb.; I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629#issuecomment-422490016:61,test,testing,61,https://root.cern,https://github.com/root-project/root/pull/2629#issuecomment-422490016,1,['test'],['testing']
Testability,@oshadura Finally I found a way to use everywhere `target_include_directories` - there is special flag in rootcling which I forgot to specify.; Now in all places `target_include_directories` specified.; Once all tests pass - we can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-609713006:212,test,tests,212,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-609713006,1,['test'],['tests']
Testability,"@oshadura How can I get the path to the `requirements.txt` in the test? `ROOTSYS` does not really help because it points to the build dir, I would need the path to the source dir.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-616957161:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-616957161,1,['test'],['test']
Testability,"@oshadura Well, then I would have to **really** download a file (that's the only way to get `0` as return code) and then delete it if it is successful. I can do it that way if you prefer (that was my first approach) but I find it a bit too restrictive IMHO...; That was:; ```; #---Try to download a file to check internet connection-----------------------------------------; file(DOWNLOAD https://root.cern/files/test.txt ${CMAKE_CURRENT_BINARY_DIR}/test.txt; TIMEOUT 100 STATUS DOWNLOAD_STATUS; ); # Get the status code from the download status; list(GET DOWNLOAD_STATUS 0 STATUS_CODE); # Check if download was successful.; if(${STATUS_CODE} EQUAL 0); # success: remove the file and reset the NO_CONNECTION flag; file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/test.txt); set(NO_CONNECTION FALSE); else(); # failure: set the NO_CONNECTION flag; set(NO_CONNECTION TRUE); endif(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8520#issuecomment-866934563:413,test,test,413,https://root.cern,https://github.com/root-project/root/pull/8520#issuecomment-866934563,3,['test'],['test']
Testability,"@oshadura Yes, I am testing it locally and will merge by hand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1977#issuecomment-386846566:20,test,testing,20,https://root.cern,https://github.com/root-project/root/pull/1977#issuecomment-386846566,1,['test'],['testing']
Testability,@oshadura note that no PR build is testing installation of ROOT afaik,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6054#issuecomment-666239089:35,test,testing,35,https://root.cern,https://github.com/root-project/root/pull/6054#issuecomment-666239089,1,['test'],['testing']
Testability,"@oshadura please let us know of any build system requirements / recommendations you have here, e.g. where to do this config test and how to convey the result (""need -lgcc"") to the linker invocation of `libRooFitCore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6855#issuecomment-731733091:124,test,test,124,https://root.cern,https://github.com/root-project/root/issues/6855#issuecomment-731733091,1,['test'],['test']
Testability,"@oshadura please see my comment, we wrote at the same time. Ok for your request to test on slc6 (please @maxgalli )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5248#issuecomment-605948515:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/5248#issuecomment-605948515,1,['test'],['test']
Testability,"@oshadura that was the first test I didi actually, and it's working perfectly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776821099:29,test,test,29,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776821099,1,['test'],['test']
Testability,"@oshadura yes, the following minimal reproducer runs in 13 seconds on my workstation with built-in LZMA, and in 6 with LZMA installed from system packages. 75% of the runtime is spent in `R__zipLZMA` in the slow case, 48% in the fast case. This patch fixes that runtime difference. (EDIT: plus from the [build log](https://github.com/root-project/root/files/5049830/LZMA-build-out.log) of built-in LZMA you can see no optimization flags are added at the moment). ```cpp; // write_lzma.cpp; #include <ROOT/RDataFrame.hxx> ; #include <TStopwatch.h> ; #include <iostream> ; ; int main() { ; ROOT::RDF::RSnapshotOptions opts; ; opts.fCompressionAlgorithm = ROOT::kLZMA; ; opts.fCompressionLevel = 6; ; opts.fLazy = true; ; auto trigger = ROOT::RDataFrame(50000000).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""}, opts); ; TStopwatch s; ; s.Start(); ; *trigger; ; s.Stop(); ; std::cout << s.RealTime() << std::endl; ; return 0; ; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6144#issuecomment-671236231:310,log,log,310,https://root.cern,https://github.com/root-project/root/pull/6144#issuecomment-671236231,2,['log'],['log']
Testability,"@osschar the problem that it will not work... Having TGLIncludes.h (with #include <GL/glew.h>) make RGL depends on GLEW, and then as a consequence, I need to put graf3d\ftgl (FTGL) depends on RGL. Having this is creating circular dependency:. ```; CMake Error: The inter-target dependency graph contains the following strongly connected component (cycle):; ""FTGL"" of type SHARED_LIBRARY; depends on ""RGL"" (weak); ""RGL"" of type SHARED_LIBRARY; depends on ""FTGL"" (weak); At least one of these targets is not a STATIC_LIBRARY. Cyclic dependencies are allowed only among static libraries.; CMake Generate step failed. Build files cannot be regenerated correctly.; make: *** [Makefile:9096: cmake_check_build_system] Error 1; ```. Why it was not visible before because TGLIncludes.h were copied in ${CMAKE_BINARY_DIR}/include/ where it was picked up by whatever ROOT library you were building before. To achieve better modularity this could be fixed, in a way, I am proposing in this PR. -------------------------------------------------------------------------------------; Here is a test PR I opened to show you an error for your proposal: https://github.com/root-project/root/pull/4786; ```; C:\build\workspace\root-pullrequests-build\build\include\TGLIncludes.h(21,10): fatal error C1083: Cannot open include file: 'GL/glew.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\graf3d\ftgl\FTGL.vcxproj]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-585676794:1080,test,test,1080,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-585676794,1,['test'],['test']
Testability,"@pcanal ""file:"" was prepended for local files. Now the 'tree' related tests on my machine are all successful. Let's see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4888#issuecomment-579904263:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/4888#issuecomment-579904263,1,['test'],['tests']
Testability,"@pcanal & @Axel-Naumann, I left in all tests ROOT::kZLIB, ROOT::LZMA and etc, to show that user code will not be broken...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-440737839:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-440737839,1,['test'],['tests']
Testability,"@pcanal , I am testing cms root master branch ( https://github.com/cms-sw/root/commits/cms/master/03d7710 ) without the revert of ofending commit (https://github.com/cms-sw/root/commit/f9834e30eaa01b5b8921e69bfe40681092303895 ) , once it is available then hopefully I will be able to provide you the instructions for reproducer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-964896282:15,test,testing,15,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-964896282,1,['test'],['testing']
Testability,"@pcanal , I am trying to test latest root v6-22 patches branch and we also get same failures there https://github.com/cms-sw/cmsdist/pull/6790#issuecomment-814504953",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-814603818:25,test,test,25,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-814603818,1,['test'],['test']
Testability,"@pcanal , this change is still part of root master and v6-26 branch and it causes runtime failures in cmssw [a]. Is there any plan to revert this for root master and v6-26 branches too?. [a] https://cmssdt.cern.ch/SDT/cgi-bin/logreader/slc7_amd64_gcc10/CMSSW_12_3_ROOT626_X_2022-01-11-0800/pyRelValMatrixLogs/run/134.807_RunDoubleEGPrpt2015C+RunDoubleEGPrpt2015C+HLTDR2_25ns+RECODR2_25nsreHLT_HIPM+HARVESTDR2/step2_RunDoubleEGPrpt2015C+RunDoubleEGPrpt2015C+HLTDR2_25ns+RECODR2_25nsreHLT_HIPM+HARVESTDR2.log#/; ```; cmsRun: /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/997e45a2cab6f1aa8d23229a1e263b28/opt/cmssw/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. A fatal system signal has occurred: abort signal; The following is the call stack containing the origin of the signal. Tue Jan 11 18:56:50 CET 2022; Thread 10 (Thread 0x2b61c6c00700 (LWP 19510) ""cmsRun""):; #0 0x00002b6177e159fd in nanosleep () from /lib64/libc.so.6; #1 0x00002b6177e15894 in sleep () from /lib64/libc.so.6; #2 0x00002b617d88eca0 in sig_pause_for_stacktrace () from /cvmfs/cms-ib.cern.ch/nweek-02715/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/lib/slc7_amd64_gcc10/pluginFWCoreServicesPlugins.so; #3 <signal handler called>; #4 0x00002b61752e3570 in check_match () from /lib64/ld-linux-x86-64.so.2; #5 0x00002b61752e3dbb in do_lookup_x () from /lib64/ld-linux-x86-64.so.2; #6 0x00002b61752e409f in _dl_lookup_symbol_x () from /lib64/ld-linux-x86-64.so.2; #7 0x00002b61752e8dee in _dl_fixup () from /lib64/ld-linux-x86-64.so.2; #8 0x00002b61752f09ea in _dl_runtime_resolve_xsave () from /lib64/ld-linux-x86-64.so.2; #9 0x00002b61754a9961 in edm::WaitingTaskList::reset() () from /cvmfs/cms-ib.cern.ch/nweek-02715/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT626_X_2022-01-11-0800/lib/slc7_amd64_gcc10/libFWCoreConcurrency.so; #10 0x00002b61757aa998 in edm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7837#issuecomment-1010312773:226,log,logreader,226,https://root.cern,https://github.com/root-project/root/pull/7837#issuecomment-1010312773,3,"['Assert', 'log']","['Assertion', 'log', 'logreader']"
Testability,"@pcanal , this now has fixed the failing HLT tests in cmssw.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10280#issuecomment-1084140980:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/10280#issuecomment-1084140980,1,['test'],['tests']
Testability,"@pcanal , you can reproduce the error by doing the following on cmsdev20-25 VMs. This is based on root master (build in debug mode). ```; cd /build/pcanal; /cvmfs/cms-ci.cern.ch/week1/cms-sw/cmsdist/6788/14005/install.sh; cd CMSSW_11_3_ROOT6_X_2021-04-05-2300; eval `scram run -sh`; export CMS_PATH=/cvmfs/cms-ib.cern.ch; xrdcp root://eoscms.cern.ch//eos/cms/store/user/cmsbuild/store/relval/CMSSW_9_2_2/RelValProdTTbar_13/AODSIM/91X_mcRun2_asymptotic_v3-v1/10000/EEB99F74-DA4D-E711-A41C-0025905A48F2.root .; cp $CMSSW_BASE/src/PhysicsTools/PatAlgos/test/IntegrationTest_cfg.py .; sed -i -e ""s|= *filesRelValProdTTbarAODSIM|= cms.untracked.vstring('file://$CMSSW_BASE/EEB99F74-DA4D-E711-A41C-0025905A48F2.root')|"" IntegrationTest_cfg.py; cmsRun IntegrationTest_cfg.py. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815052660:550,test,test,550,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815052660,1,['test'],['test']
Testability,"@pcanal , you can run the following to reproduce the error https://github.com/root-project/root/issues/7718#issuecomment-814425870. ```; # in cmssw area; cp $CMSSW_BASE/src/TopQuarkAnalysis/TopTools/test/ttJetPartonMatch_cfg.py .; sed -i -e ""s|(relValTTbar)|('file:///afs/cern.ch/user/c/cmsbuild/public/EEB99F74-DA4D-E711-A41C-0025905A48F2.root')|"" ttJetPartonMatch_cfg.py; cmsRun ttJetPartonMatch_cfg.py; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815212145:199,test,test,199,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815212145,1,['test'],['test']
Testability,"@pcanal - From the last update of @pseyfert (see https://github.com/pseyfert/root-compression/blob/master/test/summary.txt), the LZ4 read speed was 7.2X faster versus zlib-1. As I suspected, we're hitting the fact that decompression speed is not a huge part of the overall read workflow. Hence, I think the impact here is going to be more noticeable as we increase deserialization speed. @pseyfert - if it's not possible to post the file, could you rebuild your ROOT with the `LZ4-HC` algorithm that @zzxuanyuan used in this PR and then check the filesize? I want to see how `LZ4-HC`'s compression ratio compares with ZLIB-1 for this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-170923248:106,test,test,106,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-170923248,1,['test'],['test']
Testability,@pcanal - I believe I have addressed all review comments. I cannot reproduce the failure of `roottest-root-core-execStatusBitsCheck`; it's possible the fact I switched to an `enum class` avoids the underlying bug in that test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327899842:221,test,test,221,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327899842,1,['test'],['test']
Testability,"@pcanal - I rebased this on master, hopefully making the tests and such more relevant. I believe I addressed your review comments. Seems to have also kicked off the CI tests successfully; I'll likely have a few `clang-format` items to fix up from those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/240#issuecomment-320780665:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/240#issuecomment-320780665,2,['test'],['tests']
Testability,@pcanal - I think I got all the review items from the latest round completed. Let's see how the unit tests go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-333727006:101,test,tests,101,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-333727006,1,['test'],['tests']
Testability,@pcanal - I'm rehabbing this request. I see we aimed to have a unit test and release notes added. Will try to get that over the next few days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-410419025:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-410419025,1,['test'],['test']
Testability,@pcanal - could the failing unit test possibly be related to this? I didn't think file sizes were sensitive to comments in the headers.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-429048950:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-429048950,1,['test'],['test']
Testability,@pcanal - for the failing unit test: why didn't it utilize the corresponding PR in roottest?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2775#issuecomment-428998157:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/2775#issuecomment-428998157,1,['test'],['test']
Testability,"@pcanal - release notes updated. I tried to reproduce the above test failure locally, but was unable to. Do you recognize it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-328403186:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-328403186,1,['test'],['test']
Testability,@pcanal - we're testing this in CMS. Will let you know if it went well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/70#issuecomment-120192027:16,test,testing,16,https://root.cern,https://github.com/root-project/root/pull/70#issuecomment-120192027,1,['test'],['testing']
Testability,"@pcanal - what's up with Jenkins?; - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?); - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-327802920:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-327802920,1,['test'],['tests']
Testability,"@pcanal . > Really?; > Or is it just the ""renaming rules"" that solves the problem?. Positive! I tested by removing the renaming rule.; The typedef is `using RooRealProxy = RooTemplateProxy<RooAbsReal>;`. I use this so old classes can keep using `RooRealProxy`, although this is now a specific instance of a template. When reading, if you use for the LinkDef.h:; ```; #pragma link C++ class RooTemplateProxy<RooAbsReal>+; //What it actually is now; ```; You get; ```; Warning in <TStreamerInfo::CompareContent>: The following data member of; the on-file layout version 1 of class 'RooExponential' differs from ; the in-memory layout version 1:; RooRealProxy x; //; vs; RooTemplateProxy<RooAbsReal> x; //; ```; for *all* old classes in RooFit. However, with; ```; #pragma link C++ class RooRealProxy+; // == RooTemplateProxy<RooAbsReal>; ```; all old classes can remain as they are. Thinking about it, I now came to the conclusion that the schema evolution problem I mentioned to Philippe about two weeks ago is exactly the same problem. The solution is just to mention the ""right"" typedef in LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536#issuecomment-623954433:96,test,tested,96,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623954433,1,['test'],['tested']
Testability,@pcanal . I add testing for TF1/TF2/TF3 Save() / GetSave() methods.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13949#issuecomment-1781385097:16,test,testing,16,https://root.cern,https://github.com/root-project/root/pull/13949#issuecomment-1781385097,1,['test'],['testing']
Testability,"@pcanal . I rebase PR and add commit for TList::RecursiveRemove(). ; I guess, it was logical error trying call recursive remove for object itself",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13506#issuecomment-1688309097:85,log,logical,85,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1688309097,1,['log'],['logical']
Testability,"@pcanal . I replace all C++ macros by templated methods.; At least, it should produce smaller binary - some template methods can be reused.; I also create correspondent tests ; https://github.com/root-project/roottest/pull/118. And why building is failed - have no idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-352064145:169,test,tests,169,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-352064145,1,['test'],['tests']
Testability,"@pcanal . My finding - on that test machine `c->GetCurrentFile()->IsOnHeap()` returns false.; As result - such file is not destroyed when calling `gROOT->GetListOfFiles()->Delete()`.; ; Actually, it happens already with TDirectoryFile. Just doing:; ```; root [0] auto d = new TDirectoryFile(); (TDirectoryFile *) @0x7ffee3869998; root [1] d->IsOnHeap(); (bool) false; ```; At the same time, creating with some arguments:; ```; root [5] auto ddd = new TDirectoryFile(""aa"",""bb"", ""TDirectoryFile"", nullptr);; root [6] ddd->IsOnHeap(); (bool) true; ```; Seems to be, following construction with c++17 makes problem for TObject::IsOnHeap() detection:; ```; TDirectoryFile() = default;; ```; If I provide dummy implementation - IsOnHeap() works properly.; I will add appropriate commit, but such problem should be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4305#issuecomment-526528035:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/4305#issuecomment-526528035,1,['test'],['test']
Testability,@pcanal . Question about roottest.; Is there possibility to disable automatic testing with gcc 4.8.x?; TBufferJSON::FromJSON() always returns **nullptr** on this platform.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-351526529:78,test,testing,78,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-351526529,1,['test'],['testing']
Testability,@pcanal : isn't this failure http://cdash.cern.ch/testDetails.php?test=64373639&build=651127 telling us that the test actually never worked correctly?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3746#issuecomment-487732368:50,test,testDetails,50,https://root.cern,https://github.com/root-project/root/pull/3746#issuecomment-487732368,3,['test'],"['test', 'testDetails']"
Testability,"@pcanal ; > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it?. Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest?. The test suite commit is now here, for your reference:; https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test; (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-814352043:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-814352043,3,['test'],['test']
Testability,"@pcanal ; > This code is for the (very rare this days) case where a TBranch is stored in a different file than its TTree.; I.e. in your use case is; fDirectory != fTree->GetDirectory(); triggered?. Yes!; ```; (gdb) print fDirectory; $3 = (TDirectoryFile *) 0x10af350; (gdb) print fDirectory->GetName(); $5 = 0x10af369 ""test.root"". (gdb) print fTree->GetDirectory(); $4 = (TROOT *) 0x7ffff3fb46a8 <ROOT::Internal::GetROOT1()::alloc>; (gdb) print fTree->GetDirectory()->GetName(); $6 = 0x7ffff3fb46c1 <ROOT::Internal::GetROOT1()::alloc+25> ""root""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6452#issuecomment-699044425:319,test,test,319,https://root.cern,https://github.com/root-project/root/pull/6452#issuecomment-699044425,1,['test'],['test']
Testability,@pcanal ; Could you tell us which io test you have in mind which can benefit ROOT from having rdict?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440604193:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440604193,1,['test'],['test']
Testability,"@pcanal ; Hi Philippe, this failure is not only with modules. Just moving function definition of IPruneTool causes cmsUnload test failure with master, which can be seen in https://github.com/root-project/root/pull/2848 or https://github.com/root-project/root/commit/258d5c41f042dc260adfd24d5d51906a9c326236. This is very weird. Cling is failing to correctly unload AutoParse regardless of whether it has modules or not. I also thought that Cling was only partially removing transaction for AutoParse, but actually AutoParse was stored in one transaction so it wasn't a problem. I think the problem is that Cling is removing ""Names"" of SiStripCluster when unloading AutoParse (which is kind of expected) but then it complains that it doesn't know SiStripCluster even if libStrip.so is loaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435040825:125,test,test,125,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435040825,1,['test'],['test']
Testability,@pcanal ; I will add special testing into `roottest` once PR merged into master; Basic functionality does not changed - just less checks are performed while json decoding,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3837#issuecomment-493991588:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/3837#issuecomment-493991588,1,['test'],['testing']
Testability,"@pcanal ; One could have used TNamed: I did not think about that. That might not have been enough though: see my comment below.; About the speedup: it is indeed not due to the different container! If there is a difference in runtime between the two, it is undetectable. The difference comes from the fact that the graph built with TDF nodes is sophisticated and the same columns end up being inputs of Filters and Defines. As a result a single column, even holding a long-ish array, ends up being read many times. Given that the proxy is not re-used, deserialisation happened N times, with the associated overhead.; @Axel-Naumann ; About the crashes: I am surprised about so many crashes - checked the TDF tests on ubu16 before creating the PR and only the dataframe_friends test failed. I think that one is understood. The problem is that the same proxy is used for branches with the same name even if they come from two different trees which are friends. To solve this case, a possible solution would consist in hashing (with a map or an unordered_set, to be seen) not only the branch name but also some info about the tree to distinguish the two cases.; About the other crashes, working on those to understand where they are coming from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1768#issuecomment-374724166:706,test,tests,706,https://root.cern,https://github.com/root-project/root/pull/1768#issuecomment-374724166,2,['test'],"['test', 'tests']"
Testability,"@pcanal @Axel-Naumann I think I am ready here, TMVA and Windows failure is not connected with changes in this PR. C++ modules has a random failure of projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make. Failure of filemerger test on centos7/clang39 is only reproducible with clang 3.9 (I tried with Yuka to reproduce using clang 7.0.0, we didn't see failure.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889#issuecomment-435137819:242,test,test,242,https://root.cern,https://github.com/root-project/root/pull/2889#issuecomment-435137819,1,['test'],['test']
Testability,"@pcanal @Axel-Naumann The idea was to explicitly take out the relatively complicated conversion step from the tutorials in order to not drive away users. So I think we don't want to add this as another tutorial. Regarding testing, I also don't think this code would test anything specific that is not covered by other tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6096#issuecomment-666366483:222,test,testing,222,https://root.cern,https://github.com/root-project/root/pull/6096#issuecomment-666366483,3,['test'],"['test', 'testing', 'tests']"
Testability,"@pcanal @Axel-Naumann it seems this patch gets rid of an error message we were testing for...?. ```; -- BEGIN OUTDIFF OUTPUT --; --- /home/sftnight/build/workspace/root-pullrequests-build/roottest/root/meta/expressiveErrorMessages.ref	Wed Apr 29 11:19:38 2020; +++ /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/expressiveErrorMessages.log	Thu May 14 11:20:57 2020; @@ -1,7 +1,4 @@; ; -expressiveErrorMessagesdictionarypayload:--:--:error:unknowntypename'bla'; -bla; -^; expressiveErrorMessagesdictionarypayload:--:--:error:expectedunqualified-id; classBexprMsg{};; ^. -- END OUTDIFF OUTPUT --; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5615#issuecomment-628576879:79,test,testing,79,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628576879,2,"['log', 'test']","['log', 'testing']"
Testability,"@pcanal @bbockelm . This pull request fix the bug here https://sft.its.cern.ch/jira/browse/ROOT-8468. The fist error is due to the dangling pointer. ""buffer"" never gets to be allocated in the function GetUnzipBuffer. The second error is deallocating the memory ""ptr"" point to. Therefore, fUnzipChunks[idxtounzip] becomes null pointer. It should work now. To test the parallel unzipping, simply random generate events and read them. /PATH/TO/TEST/eventexe 1000 6 99 1 1000 (generate 1000 events with zlib); /PATH/TO/TEST/eventexe 1000 6 99 20 1000 (unzip and read 1000 events in sequential manner); /PATH/TO/TEST/eventexe 1000 6 99 21 1000 (unzip and read 1000 events in parallel)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/319:358,test,test,358,https://root.cern,https://github.com/root-project/root/pull/319,4,"['TEST', 'test']","['TEST', 'test']"
Testability,"@pcanal @bbockelm ; I think this patch is ready. I run through all unit tests. In addition, I switch TBuffer in MainEvent.cxx between little endian and big endian and dump all events in both cases. They look the same. The lines of code in following link is to determine if there is byte count TBuffer I discussed with Brian this morning. I left some comments above it.; https://github.com/zzxuanyuan/root/blob/byteswap/io/io/src/TBufferFile.cxx#L3237",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/136#issuecomment-217067405:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/136#issuecomment-217067405,1,['test'],['tests']
Testability,"@pcanal @bbockelm ; The failed test cases seem to be transient failures that were shown as ""Time Out"".; I re-run all the failed tests on my desktop and all of them passed except this one:. [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt]. It is still shown as ""Time Out"" on my desktop. I also tried this particular test with latest upstream root. It can't pass either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-365101355:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-365101355,3,['test'],"['test', 'tests']"
Testability,@pcanal @smuzaffar ; My tests for creating s valid edm::Handle on the sample file are now successful using CMSSW_12_3_X_2022-02-10-1100_FWLITE.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-1039363931:24,test,tests,24,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-1039363931,1,['test'],['tests']
Testability,"@pcanal A second test was added for a different type of scenario (see the commit description). On my local tests, the changes in this PR already cover also the second scenario.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15588#issuecomment-2137338968:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/15588#issuecomment-2137338968,2,['test'],"['test', 'tests']"
Testability,@pcanal After some discussion with @bellenot we decided to disable the tests on windows for now. Tests on other platforms are passing. Could you give your opinion on these changes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302#issuecomment-1693510512:71,test,tests,71,https://root.cern,https://github.com/root-project/root/pull/13302#issuecomment-1693510512,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"@pcanal As discussed, the estimator for the compressed cluster size is [now](https://github.com/jblomer/root/pull/8703/commits/806637b8a130e4a5a6b599a0b134e9ea0097aae7) the average compression ratio of all so-far written clusters. I also [added](https://github.com/jblomer/root/pull/8703/commits/5a023346d66b58f4c38044544239b71c7856e0b1) a stub checklist for the future RNTuple validation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8703#issuecomment-922457940:340,stub,stub,340,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-922457940,1,['stub'],['stub']
Testability,"@pcanal Could you please take a look at this test? http://cdash.cern.ch/testDetails.php?test=26224986&build=367429 It could be failing because of my commit, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-310338118:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-310338118,3,['test'],"['test', 'testDetails']"
Testability,"@pcanal For instance. ```json; {; ""vpx"": [0.208788, -1.70924, 0.955477, 0.162738, 1.77392, -0.243316, -0.857411, 0.714772, 1.05418, -0.153219, -0.366184]; }; ```. ```json; {; ""B_FlightDistance"": 14.4299,; ""B_VertexChi2"": 10.295,; ""H1_PX"": -318.158,; ""H1_PY"": -6407.68,; ""H1_PZ"": 152900,; ""H1_ProbK"": 0.0667207,; ""H1_ProbPi"": 0.685733,; ""H1_Charge"": 1,; ""H1_IPChi2"": 21.3981,; ""H1_isMuon"": 0,; ""H2_PX"": 382.38,; ""H2_PY"": 114.052,; ""H2_PZ"": 6374.15,; ""H2_ProbK"": 0.142381,; ""H2_ProbPi"": 0.906743,; ""H2_Charge"": -1,; ""H2_IPChi2"": 351.338,; ""H2_isMuon"": 0,; ""H3_PX"": -1151.69,; ""H3_PY"": -2406.64,; ""H3_PZ"": 33660.3,; ""H3_ProbK"": 0.946793,; ""H3_ProbPi"": 0.0687876,; ""H3_Charge"": -1,; ""H3_IPChi2"": 587.399,; ""H3_isMuon"": 0; }; ```. ```json; {; ""Muon_pt"": [3.59005, 4.19566],; ""Muon_eta"": [-2.13241, -2.19689],; ""Muon_phi"": [-2.98745, 0.425593],; ""Muon_mass"": [0.105658, 0.105658],; ""Muon_charge"": [-1, -1],; ""nMuon"": 2,; ""run"": 167674,; ""luminosityBlock"": 209; }; ```. There are more examples in `ntpl001_staff.C` and `ntpl002_vector.C` tutorials and in the `ntuple_print` unit test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4847#issuecomment-578721665:1072,test,test,1072,https://root.cern,https://github.com/root-project/root/pull/4847#issuecomment-578721665,1,['test'],['test']
Testability,"@pcanal How should we proceed?; Is it goes in right direction?; If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`?; Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-597828998:125,test,testio,125,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-597828998,1,['test'],['testio']
Testability,"@pcanal I am also not sure how the deadlock comes about, but looking at it with gdb, I noticed that the writing thread was waiting on the condition variable, while the main thread was waiting to join the writing thread. The change I introduced breaks out of the loop immediately, so it cannot reach the wait again once the nullptr is injected. I've now run the test over 22000 times without getting the deadlock, so I think it's fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/583#issuecomment-302386104:361,test,test,361,https://root.cern,https://github.com/root-project/root/pull/583#issuecomment-302386104,1,['test'],['test']
Testability,"@pcanal I am writing roottest for this patch. . ```; SET(THESCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/parseCin.sh); SET(THEINPUTFILE ${CMAKE_CURRENT_SOURCE_DIR}/test.csv). ROOTTEST_GENERATE_EXECUTABLE(readFromCin readFromCin.cxx LIBRARIES Core Hist RIO Net Graf Graf3d Gpad Tree Rint Postscript Matrix Physics MathCore Thread MultiProc). ROOTTEST_ADD_TEST(roottest-root-tree-readcin-readFromCin; COMMAND readFromCin test.csv; OUTREF test.ref; DEPENDS ${GENERATE_EXECUTABLE_TEST}). ROOTTEST_ADD_TEST(roottest-root-tree-readcin-parseCin; COMMAND ${THESCRIPT}; OUTREF test.ref ). ROOTTEST_ADD_TESTDIRS(); ```. where parseCin.sh is one line bash script. ```; cat test.csv | ./readFromCin; ```. When I run the test case, these two command always generate empty file. test.csv never been parsed in as an argument. How should I parse a argument? I tried MACRO_ARGS but that did not work. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-170621419:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-170621419,7,['test'],['test']
Testability,@pcanal I assume the addition of those 3 new gtests in tree/dataframe/test/dataframe_interface.cxx is the result of a conflict resolution when backporting. The correct resolution is to leave the tests out (and therefore also the patch to one of the tests that the backported commit would add).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6342#issuecomment-692687765:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/6342#issuecomment-692687765,3,['test'],"['test', 'tests']"
Testability,"@pcanal I changed the key for the `dirtodelete` map to include all 3 arguments: parent, name and pathname, as I think it's the only reliable way to know whether we're talking about the same directory or not.; The benchmarks remain basically the same as before and the tests are passing, so I think this could be a good solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16518#issuecomment-2396463160:213,benchmark,benchmarks,213,https://root.cern,https://github.com/root-project/root/pull/16518#issuecomment-2396463160,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,@pcanal I found a specific use case as example and updated the commit log,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6077#issuecomment-663569582:70,log,log,70,https://root.cern,https://github.com/root-project/root/pull/6077#issuecomment-663569582,1,['log'],['log']
Testability,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-455217648:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-455217648,2,['test'],['test']
Testability,"@pcanal I found the problem. It seems that the calls to type->InheritsFrom does some autoloading behind the scenes that leads later to the crash in the tests. Even if originalTest and newTest always yield the same result, the newTest is non-const and thus affects those handful of tests. So not sure how to circumvent this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1991482725:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1991482725,2,['test'],['tests']
Testability,"@pcanal I had been running the master branch for tests and builds all this time, and not my patch branch; that's why its been failing the Jekyll build 😅; It should be ready now. My apologies for the repeated reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1805669398:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1805669398,1,['test'],['tests']
Testability,"@pcanal I have PR with tests https://github.com/root-project/roottest/pull/135, I tested locally with zlib and lz4 (there are still no references for lzma, but I think to add them later, if it will be needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/750#issuecomment-371747316:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/750#issuecomment-371747316,2,['test'],"['tested', 'tests']"
Testability,"@pcanal I saw the `ClingLoadUnloadFile.ConcurrentLoadUnloadOneLibPerThread` test failing on the new CI for this PR, on fedora38 and alma8; could you check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13451#issuecomment-1685044018:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/13451#issuecomment-1685044018,1,['test'],['test']
Testability,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1803962285:10,test,tested,10,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285,3,"['benchmark', 'test']","['benchmark', 'test', 'tested']"
Testability,@pcanal I think you backported too much? the test case that fails in dataframe_interface is a regression test introduced in later versions,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6342#issuecomment-692218371:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/6342#issuecomment-692218371,2,['test'],['test']
Testability,@pcanal I trying to verify that happens with failing test `root-tree-chain`.; From the log messages I see that following macro is failing:. https://github.com/root-project/roottest/blob/master/root/tree/chain/execCleanup.C. On mac1014/cxx17 platform I can reproduce behaviour and see file destructor does not call after `gROOT->GetListOfFiles()->Delete()` call.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4305#issuecomment-526497965:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/4305#issuecomment-526497965,2,"['log', 'test']","['log', 'test']"
Testability,"@pcanal I was running valgrind on `dataframe_snapshot` to find out what caused that crashed and I got this (but not in the test case that crashed on 32bit):; ```valgrind; ==29487== Conditional jump or move depends on uninitialised value(s); ==29487== at 0x8970A6F: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x8971162: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x8966F33: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x896A8C5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x896A9F5: ??? (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x896AAD2: lzma_stream_encoder (in /lib/x86_64-linux-gnu/liblzma.so.5.2.2); ==29487== by 0x6B4FAF0: R__zipLZMA (ZipLZMA.c:57); ==29487== by 0x6B559C8: R__zipMultipleAlgorithm (RZip.cxx:95); ==29487== by 0x518802D: TBasket::WriteBuffer() (TBasket.cxx:1099); ==29487== by 0x51931FF: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*)::{lambda()#1}::operator()() const (TBranch.cxx:2792); ==29487== by 0x51936AB: TBranch::WriteBasketImpl(TBasket*, int, ROOT::Internal::TBranchIMTHelper*) (TBranch.cxx:2842); ==29487== by 0x51949F0: TBranch::WriteBasket(TBasket*, int) (TBranch.h:139); ==29487==; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182#issuecomment-396379682:123,test,test,123,https://root.cern,https://github.com/root-project/root/pull/2182#issuecomment-396379682,1,['test'],['test']
Testability,"@pcanal I wrote a testing program on my own. For compression, it basically reads the root file given in your ticket and compress all the trees in it and write out to another file. For decompression, it simply iterates all entries in the compressed file. I used TStopWatch to measure the performance. I did not use TTreePerfStats in my program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-142029158:18,test,testing,18,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-142029158,1,['test'],['testing']
Testability,"@pcanal I'd be okay with adjusting [roottest/root/meta/tclass/execState.C](https://github.com/root-project/roottest/blob/master/root/meta/tclass/execState.C) as follows:; ```diff; int execState() {; int result = 0;; ; - gROOT->ProcessLine(""class Event;"");; + gROOT->Declare(""class Event;"");; TClass *c = TClass::GetClass(""Event""); ; if (TClass::kForwardDeclared != c->GetState()) {; Error(""execState"",""State is %d instead of %d (TClass::kForwardDeclared)"",; ```; which should ""fix"" the test failure. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1027759510:486,test,test,486,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1027759510,1,['test'],['test']
Testability,@pcanal I'll send you the full log by mail and I'll try the; `if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);`; solution,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1132#issuecomment-334197434:31,log,log,31,https://root.cern,https://github.com/root-project/root/pull/1132#issuecomment-334197434,1,['log'],['log']
Testability,"@pcanal I've added the requested tests. However, it is failing with the error; ```text; ***Failed Error regular expression found in output. Regex=[FAILED|Error in] 30.74 sec; ```; I'm not sure what's causing this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4649#issuecomment-560429042:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/4649#issuecomment-560429042,1,['test'],['tests']
Testability,"@pcanal I've benchmarked 'throw_cast' (let me call it this way) vs. TClass::DynamicCast. Yes, exceptions are kinda slow (40 times slower, to be precise). Ok, if you have own RTTI, there is no reason not to use it. But, newertheles, I think original code should be rewritten a bit. There are some flaws and rough edges.; E.g. too much indirection (virtual methods, returning pointer to `PtrBase`), `TDirectory` claims to have shared ownership, but `PtrBase` doesn't reflect this in its interface. `GetPointer`, returning raw pointer (user might catch it into smart ptr and then bad things will happen). Some inconsistences in types (somewhere they are modified with `ToContentType_t<T>`, somewhere there is raw `T`). And so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/200#issuecomment-233646031:13,benchmark,benchmarked,13,https://root.cern,https://github.com/root-project/root/pull/200#issuecomment-233646031,1,['benchmark'],['benchmarked']
Testability,@pcanal I've verified that the additional commit corrects the compilation error in the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1706#issuecomment-371241426:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/1706#issuecomment-371241426,1,['test'],['tests']
Testability,@pcanal IIRC you suggest a while ago that we should add a test for this.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15722:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/15722,1,['test'],['test']
Testability,"@pcanal Indeed, this still breaks my (more elaborate) integration tests...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2402101784:66,test,tests,66,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2402101784,1,['test'],['tests']
Testability,"@pcanal Redmine is behind a login wall. Could you paste the core of the bug report in this issue, too?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8428#issuecomment-875383767:28,log,login,28,https://root.cern,https://github.com/root-project/root/issues/8428#issuecomment-875383767,1,['log'],['login']
Testability,"@pcanal Successfully tested changes locally, ready for review 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1803201756:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1803201756,1,['test'],['tested']
Testability,"@pcanal The TClass test above started failing since your merge. Could you please take a look?; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/BUILDTYPE=Release,COMPILER=native,LABEL=ubuntu16/1517",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1321#issuecomment-345203063:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/1321#issuecomment-345203063,1,['test'],['test']
Testability,"@pcanal The implementation is, logically speaking, exactly the same (see `TBufferFile.cxx:Read/WriteDouble32`. ; The main difference is design-wise, for the fact that RNTuple's quantization is:; - not bound to the type of the variable (you can quantize any `float` or `double`, not just a `Double32_t`; - not statically chosen (you can set the value range and the bit width at runtime rather than deciding once and for all via the variable comments). We can discuss in more details, but in my opinion those are the two main points of difference. The implementation itself is trivial and it's akin to `Read/WriteFastArrayDouble32` (but slightly more performant in principle, as it doesn't have to check the min/max/scale factor for each element - they are all the same within a call to Pack/Unpack). . As a last divergence point, `Double32_t` silently clamps the values that fall our of range, while Real32Quant will throw in that situation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16390#issuecomment-2360136674:31,log,logically,31,https://root.cern,https://github.com/root-project/root/pull/16390#issuecomment-2360136674,1,['log'],['logically']
Testability,"@pcanal The status bit check test seems a bit flaky as it also failed in the [nightlies](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=394075), albeit with a different problem (segfault, not error message).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959#issuecomment-327865024:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/959#issuecomment-327865024,1,['test'],['test']
Testability,@pcanal There is other warning in https://github.com/root-project/root/blob/master/tree/tree/src/TBranchElement.cxx#L5913; ```; if (TestBit(kDoNotProcess|kAddressSet)) ; ```; It mixtures test of bits from different enum.; One could split it by `TestBit(kDoNotProcess) || TestBit(kAddressSet)`; Also logically one could better call `TestBits` and cast to UInt_t like ; ```; if (TestBits((UInt_t) kDoNotProcess|kAddressSet)) ; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13145#issuecomment-1615039632:132,Test,TestBit,132,https://root.cern,https://github.com/root-project/root/pull/13145#issuecomment-1615039632,7,"['Test', 'log', 'test']","['TestBit', 'TestBits', 'logically', 'test']"
Testability,@pcanal This is just a documentatioon update. Can you please decide to merge or not ? ; It is clear the test failures have nothing to do with the PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-458600001:104,test,test,104,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-458600001,1,['test'],['test']
Testability,"@pcanal This isn't really work in progress, I just wanted to test that the build would pass. Actually, if you think this commit is ok, we can merge this now, but please let me merge it myself locally, otherwise the GPG signature on the commit is lost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/908#issuecomment-325997446:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/908#issuecomment-325997446,1,['test'],['test']
Testability,"@pcanal Tutorials and tests were added, passing on all platforms (windows failure is about the file used in the tutorial being stuck by another process). Let me know what you think, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2345272455:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2345272455,1,['test'],['tests']
Testability,"@pcanal Well, OK, fine, I'll try. But what is the purpose of this test anyway? (seriously)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2910#issuecomment-435490377:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/2910#issuecomment-435490377,1,['test'],['test']
Testability,"@pcanal Well, it might have never worked that way, I'll have to debug it. If it's urgent, feel free to disable those tests on Windows until I have time to debug it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585#issuecomment-1014565377:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/9585#issuecomment-1014565377,1,['test'],['tests']
Testability,"@pcanal Well, the testing time went down to 11 minutes, skipping the spurious rebuild (re-linking), and we keep the `--repeat until-pass` flag anyway, so to me the benefit is greater than the potential inconsistent builds...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16744#issuecomment-2438231683:18,test,testing,18,https://root.cern,https://github.com/root-project/root/pull/16744#issuecomment-2438231683,1,['test'],['testing']
Testability,@pcanal What's that thing about not excluding tests? Should that be our new default? Why isn't this the default?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5316#issuecomment-611060593:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/5316#issuecomment-611060593,1,['test'],['tests']
Testability,"@pcanal Yes, the problem is there even in the test `io/io/test/testTBufferMerger`. It's not related to TDF, but it's in the code for TBufferMerger itself. The ownership of the TTrees is unclear to me, and somehow they are destroyed more than once (or their files). I'm going to close this pull request and continue to investigate the problem. I will open a new pull request when I'm convinced the problem is fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/568#issuecomment-301059767:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/568#issuecomment-301059767,3,['test'],"['test', 'testTBufferMerger']"
Testability,@pcanal added logs; [clad-configure-err.log](https://github.com/root-project/root/files/14114750/clad-configure-err.log); [clad-configure-out.log](https://github.com/root-project/root/files/14114751/clad-configure-out.log),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492#issuecomment-1919517114:14,log,logs,14,https://root.cern,https://github.com/root-project/root/issues/14492#issuecomment-1919517114,5,['log'],"['log', 'logs']"
Testability,@pcanal asked if you can rename file from TTree.cxx to testTTreeCompression.cxx or something similar not to confuse with actual TTree.cxx sources. I will add couple of comments to fix small typos.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-600577939:55,test,testTTreeCompression,55,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-600577939,1,['test'],['testTTreeCompression']
Testability,@pcanal can we have a test for this? This sounds pretty terrible to get wrong...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13463#issuecomment-1680765547:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/13463#issuecomment-1680765547,1,['test'],['test']
Testability,@pcanal could you restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2281#issuecomment-402749857:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/2281#issuecomment-402749857,1,['test'],['tests']
Testability,"@pcanal does it make sense to also add a test in `roottest` against issue #9017? If not, I trust you (that this patch fixes the issue) ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021#issuecomment-925233035:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/9021#issuecomment-925233035,1,['test'],['test']
Testability,@pcanal failure of projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_snapshot is unrelated comparing to my changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541685290:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541685290,1,['test'],['test']
Testability,@pcanal gtest added: b872271ba. Multicore test failure above is unrelated to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4671#issuecomment-576257330:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/4671#issuecomment-576257330,1,['test'],['test']
Testability,"@pcanal if that proves feasible, wouldn't it be beneficial to enable some of the flags everywhere instead of having them opt-in? Namely:; - enabling -Werror everywhere except llvm-facing parts; - using lld when possible (of course we still want to keep building with the default linker to test it works - but maybe it should be the exception rather than the rule); - always defining R__LESS_INCLUDES (or, better, removing all the code in the `#else` parts). By the way, do you know why this define exists? Is there some compiler/platform where compilation breaks if it's not defined?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853#issuecomment-2172692915:289,test,test,289,https://root.cern,https://github.com/root-project/root/pull/15853#issuecomment-2172692915,1,['test'],['test']
Testability,"@pcanal indeed _with the patch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**; ```; 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] ; 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] ; 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] ; 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] ; ```. **Patched TTreeReader**; ```; 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch; 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]; 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] ; 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]; 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; ```. **Master TTreeReader**; ```; 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455224174:139,benchmark,benchmark,139,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455224174,1,['benchmark'],['benchmark']
Testability,@pcanal it can be that this PR fixes some if not all of the tests that have been introduced in #5603 and that are failing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5721#issuecomment-637360913:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/5721#issuecomment-637360913,1,['test'],['tests']
Testability,"@pcanal it looks like `roottest_root_meta_tclass_issue_6840_emulatePairsTest` fails on `ROOT-debian10-i386-cxx14-Release`:; ```; -- TEST COMMAND -- ; cd /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/tclass/issue-6840; /usr/bin/timeout -s USR2 270s ./emulatePairs; -- BEGIN TEST OUTPUT --; Contains 2; Contains 1; ==> Dumping object at: 0xbf8a7458, class=Contains. Warning in <TStreamerInfo::Build>: Contains: pair<unsigned char,short> has no streamer or dictionary, data member ""fShort"" will not be saved; fShort ->ffffffffbf; fShort.first 1 ; fShort.second 2 ; fSameAs ->ffffffffbf; fSameAs.first 3 Emulation; fSameAs.second ->ffffffffbfEmulation; fSameAs.second.fValue 4 ; ======> EVENT:0; pair. = (Contains*)0xbf8a7458; pair.fShort.first = 49; pair.fShort.second = 2; pair.fSameAs.first = 51; pair.fSameAs.second.fValue = 4; size of pair<char, SameAsShort>: 4; 1; 2; 3; 4; size of pair<char, SameAsShort>: 4; ==> Dumping object at: 0xbf8a7204, class=pair<SameAsShort,short>. first ->ffffffffbfEmulation; first.fValue 11 ; second 12 Emulation; ======> EVENT:0; pair. = (pair<SameAsShort,short>*)0xbf8a7204; pair.first.fValue = 11; pair.second = 12. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/sftnight/build/workspace/root-pullrequests-build/roottest/root/meta/tclass/issue-6840/emulatePairs.ref	Tue Apr 6 21:19:08 2021; +++ /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/meta/tclass/issue-6840/emulatePairsTest.log	Wed Apr 7 11:46:41 2021; @@ -8,7 +8,7 @@; fShort.second2; fSameAspointervalue; fSameAs.first3Emulation; -fSameAs.secondpointervalueEmulation; +fSameAs.secondpointervaluemulation; fSameAs.second.fValue4; ======>EVENT:0; pair.=(Contains*)pointervalue; @@ -24,7 +24,7 @@; sizeofpair<char,SameAsShort>:4; ==>Dumpingobjectat:pointervalue,class=pair<SameAsShort,short>; ; -firstpointervalueEmulation; +firstpointervaluemulation; first.fValue11; second12Emulation; ======>EVENT:0. -- END OUTDIFF OUTPUT --; CMak",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7778#issuecomment-814891055:132,TEST,TEST,132,https://root.cern,https://github.com/root-project/root/pull/7778#issuecomment-814891055,2,['TEST'],['TEST']
Testability,"@pcanal no-no, I know, I just wanted to test on Jenkins and fix merge conflict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/750#issuecomment-332816701:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/750#issuecomment-332816701,1,['test'],['test']
Testability,@pcanal thanks for sharing the history of this. What do we do now? Keep the old files as markers that we still need to port these tests to cling/CMake?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-460535784:130,test,tests,130,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-460535784,1,['test'],['tests']
Testability,"@pcanal this `root_io_filemerger_simple_lz4_compr_level1` test often fails on 6.22, is it something to be worried about?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5846#issuecomment-642179531:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/5846#issuecomment-642179531,1,['test'],['test']
Testability,@pcanal what do you think? Shall I just drop the second commit and forget about derived classes? setting load to kTRUE would make many more tests failing. The only other thing I can think of is to unload after load...; Or to modify the failing test .ref,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1992117429:140,test,tests,140,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1992117429,2,['test'],"['test', 'tests']"
Testability,"@pcanal yes, I left a `TODO` in the comments in this PR that suggests exactly that.; It's not super straightforward because we need to add logic that calls `TTree::Branch` the first time and `SetBranchAddress` subsequent times, per worker thread. edit: so I would first go back to a working `Snapshot`, then add tests that ensure we don't break it again ( #1086 ) and then go on with this last refactoring.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1085#issuecomment-333403070:139,log,logic,139,https://root.cern,https://github.com/root-project/root/pull/1085#issuecomment-333403070,2,"['log', 'test']","['logic', 'tests']"
Testability,"@pcanal yes, but @peremato wanted me to leave the old file there for legacy purpose. However, what would make more sense now then is to disable the test from being executed on the CI builds. Any thoughts on this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/586#issuecomment-303076962:148,test,test,148,https://root.cern,https://github.com/root-project/root/pull/586#issuecomment-303076962,1,['test'],['test']
Testability,"@pcanal, @ferdymercury, this PR caused a regression in a unit test that I see in other PRs, e.g.:; https://github.com/root-project/root/pull/15173",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14818#issuecomment-2043988487:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/14818#issuecomment-2043988487,1,['test'],['test']
Testability,"@pcanal, I am attaching a standalone example of the bug. It can be reproduced with clang and libstd++ 62 (on bot lcgapp-slc6-x86-64-29). You will find the command in test.sh in [reproducer.zip](https://github.com/root-project/root/files/1412573/reproducer.zip).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1226#issuecomment-339139185:166,test,test,166,https://root.cern,https://github.com/root-project/root/pull/1226#issuecomment-339139185,1,['test'],['test']
Testability,"@pcanal, I have changed PR to now mess around with the library type any more. I was just worried by these artifacts:; ```; [4.0K] root_install/lib/TestSupport/; └── [4.0K] objects-RelWithDebInfo; └── [4.0K] TestSupport; └── [4.0K] src; └── [435K] TestSupport.cxx.o. 4 directories, 1 file; ```; The subdirectory with the `RelWithDebInfo` made me worried that this library can't be used in dependent projects that use a different build type. But this turned out to be wrong: even if I build my depended project as `Release`, I can use `ROOT_ADD_GTEST` successfully without warnings about missing test support!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16568#issuecomment-2390992175:147,Test,TestSupport,147,https://root.cern,https://github.com/root-project/root/pull/16568#issuecomment-2390992175,4,"['Test', 'test']","['TestSupport', 'test']"
Testability,"@pcanal, Something broke in roottest (things that don't run in the PR), but I don't remember the test names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1700#issuecomment-371167681:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/1700#issuecomment-371167681,1,['test'],['test']
Testability,"@pcanal, could you please address the clang-format complaints?. I am building and testing locally, but before merging, I'd like the checks to be green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343439485:82,test,testing,82,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343439485,1,['test'],['testing']
Testability,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863121010:126,test,test,126,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010,1,['test'],['test']
Testability,"@pcanal, git blame shows that you are the one with most recent knowledge about cling/test/Autoloading/AutoForwarding.C. Independent on this PR, when we build with -Dclingtest=On that test fails. I think it could be a valid regression happened because we do not really test that part of the code in cling standalone. Could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1211#issuecomment-338156028:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/1211#issuecomment-338156028,3,['test'],['test']
Testability,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>; <details>. ```; ctest -R .*callfunc.* ; Test project /build/vvassilev/root-callfunc-master/release; Start 1829: roottest-root-meta-callfunc-assertUnload-auto; 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec; Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto; 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec; Start 1831: roottest-root-meta-callfunc-execResolveAt-auto; 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec; Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto; 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec; Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto; 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* ; Test project /build/vvassilev/root-callfunc-master/release; Start 2217: roottest-root-treeformula-array-make; 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec; Start 2218: roottest-root-treeformula-casting-make; 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec; Start 2219: roottest-root-treeformula-clones-make; 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec; Start 2220: roottest-root-treeformula-depth-make; 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1252723800:190,test,tests,190,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1252723800,12,"['Test', 'assert', 'benchmark', 'test']","['Test', 'assertUnload-auto', 'assertUnloadHelper-auto', 'benchmarks', 'tested', 'tests']"
Testability,"@pcanal, please check the commit log, I think that's good to go.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1431049853:33,log,log,33,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1431049853,1,['log'],['log']
Testability,"@pcanal, regarding your requirements:; * I've already run `clang-format` on my laptop. If the CI version behaves differently, I am of course happy to fix further stuff.; * The documentation is on par with `TCsvDS`, given I copied most of it from there. I am happy to improve it further in a subsequent PR.; * The tests are on par with `datasource_csv`, given I simply adapted it to my case. I will of course add more as I experiment more with it myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371615688:313,test,tests,313,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371615688,1,['test'],['tests']
Testability,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-460264298:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-460264298,1,['test'],['test']
Testability,"@pcanal, this patch is not checking existence of header files - see the original description of the PR. This patch was intended to check if a file was modified or not... So cms is a test case of this IMO. I am not sure what you are after here. IIRC, this patch was developed to cover some failures in both cms and root. None of them exist anymore it seems. Are you proposing to continue keeping this patch? If so, the cost of keeping such technical debt is we will have slow llvm upgrades.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1151381723:182,test,test,182,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1151381723,1,['test'],['test']
Testability,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-470414609:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-470414609,1,['test'],['tests']
Testability,"@pcanal, yes I think I got it, in these tests are checked the sizes of ROOT files. I am working on fixes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2078#issuecomment-393171359:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/2078#issuecomment-393171359,1,['test'],['tests']
Testability,"@pcanal, yes the improvement from using TBB with TReentrantRWLock for gCoreMutex is only 7% in this case, but actually the use of RW locks instead of always write locks in ```TBufferFile::ReadClassBuffer``` is a much bigger improvement (and the comparisons I was showing for the RWLock variants was always on top of this). For a smaller test with only 9.7M events in 19 input files (instead of 513M events in 1000 input files), using; 256 threads and ```ROOT.TTreeProcessorMT.SetMaxTasksPerFilePerWorker(1)``` the numbers are:. ```; Baseline:; Percent of CPU this job got: 397%; Elapsed (wall clock) time (h:mm:ss or m:ss): 24:56.08. + Use read-write locks in TBufferFile::ReadClassBuffer; Percent of CPU this job got: 3971%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.81. + TBBUnique for gCoreMutex; Percent of CPU this job got: 4765%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:16.00; ```. So the use of RW locks in ```TBufferFile::ReadClassBuffer``` is a factor 80 improvement and the improvement of the RWLock with TBB is another 10%",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-749949244:337,test,test,337,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-749949244,1,['test'],['test']
Testability,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-948203246:182,test,test,182,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246,4,['test'],"['test', 'test-bname-for']"
Testability,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-324655539:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-324655539,1,['test'],['tests']
Testability,"@peremato Could you please let us know what is your opinion? I think that if the update passes the tests, it shouldn't be a problem to merge this in. @davidlt It would still be interesting to try to upstream the patches to the official library instead of relying on a patched version. Do you think that would be too difficult?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/663#issuecomment-317685649:99,test,tests,99,https://root.cern,https://github.com/root-project/root/pull/663#issuecomment-317685649,1,['test'],['tests']
Testability,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/767#issuecomment-316768500:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/767#issuecomment-316768500,3,['test'],"['test', 'tested', 'testing']"
Testability,@petrstepanov : Thank you for the contribution that now is merged!; I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. ; Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10780#issuecomment-1192647873:191,log,log,191,https://root.cern,https://github.com/root-project/root/pull/10780#issuecomment-1192647873,1,['log'],['log']
Testability,@phsft-bot Nice bot! Anyone can test it.; I just put a missing part in.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3427#issuecomment-463499239:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/3427#issuecomment-463499239,1,['test'],['test']
Testability,@phsft-bot build (ne more round of tests now that `pcepsft10` is fixed),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8609#issuecomment-874707487:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/8609#issuecomment-874707487,1,['test'],['tests']
Testability,"@phsft-bot build (the tests succeeded before, this is just a final check)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11435#issuecomment-1260704427:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/11435#issuecomment-1260704427,1,['test'],['tests']
Testability,"@phsft-bot build just on ROOT-performance-centos7-multicore/default. Updated the failing test roottest:#509, so just checking on one machine if that worked.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5599#issuecomment-627306786:89,test,test,89,https://root.cern,https://github.com/root-project/root/pull/5599#issuecomment-627306786,1,['test'],['test']
Testability,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=On. because that test failure was due to a stale old file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404#issuecomment-464078538:102,test,test,102,https://root.cern,https://github.com/root-project/root/pull/3404#issuecomment-464078538,1,['test'],['test']
Testability,"@phsft-bot build just on ROOT-ubuntu18.04/nortcxxmod. (as far as I can tell from inspecting the logs of the other platforms, they actually built and tested fine...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11468#issuecomment-1266612335:96,log,logs,96,https://root.cern,https://github.com/root-project/root/pull/11468#issuecomment-1266612335,2,"['log', 'test']","['logs', 'tested']"
Testability,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435035350:46,test,testKalman,46,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435035350,1,['test'],['testKalman']
Testability,"@phsft-bot build just on mac11.0/cxx17. I think the errored build above timed out before. I'm not sure what happened with the ROOT-debian10-i386/cxx14 build. The build itself was successful, or so it says at the end of the full log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694#issuecomment-905268545:228,log,log,228,https://root.cern,https://github.com/root-project/root/pull/8694#issuecomment-905268545,1,['log'],['log']
Testability,@phsft-bot build just on mac11.0/default because I changed your config and want to test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-733763719:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-733763719,1,['test'],['test']
Testability,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/879#issuecomment-324628541:104,test,testing,104,https://root.cern,https://github.com/root-project/root/pull/879#issuecomment-324628541,1,['test'],['testing']
Testability,"@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On. I am testing unrelated to this PR improvement to cdash. @gargvaibhav64, unfortunately we should take the longer route:; >In longer terms we want to backport llvm-project/clang@bd5ee58 from D51910 where we can specify the platform. We should add two modules in each libc and std modulemaps -- one that requires unix and another that requires windows. I can try doing this now and you should probably move your changes once we have it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5284#issuecomment-609021436:82,test,testing,82,https://root.cern,https://github.com/root-project/root/pull/5284#issuecomment-609021436,1,['test'],['testing']
Testability,@phsft-bot build please now that the test has been fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3768#issuecomment-499803889:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/3768#issuecomment-499803889,1,['test'],['test']
Testability,@phsft-bot build to pick up the new test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13532#issuecomment-1692277975:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/13532#issuecomment-1692277975,1,['test'],['test']
Testability,@phsft-bot build with flags -DCMAKE_INSTALL_PREFIX=/test-root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2388#issuecomment-410264748:52,test,test-root,52,https://root.cern,https://github.com/root-project/root/pull/2388#issuecomment-410264748,1,['test'],['test-root']
Testability,@phsft-bot build with flags -Dclingtest=On now that I've fixed the cling tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/745#issuecomment-342592079:73,test,tests,73,https://root.cern,https://github.com/root-project/root/pull/745#issuecomment-342592079,1,['test'],['tests']
Testability,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/761#issuecomment-315052796:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/761#issuecomment-315052796,1,['test'],['test']
Testability,@phsft-bot build with flags -Dmemory_termination=ON. The few changes I did should make rootcling pass and we can run tests. Let's see if it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-325136210:117,test,tests,117,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-325136210,1,['test'],['tests']
Testability,@phsft-bot build!. @divserge could we add a regression test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/452#issuecomment-292241000:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/452#issuecomment-292241000,1,['test'],['test']
Testability,"@phsft-bot build!. @jiangyilism, thanks for you PR, can you add some tests for the new functionality under `cling/test`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1229991577:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1229991577,2,['test'],"['test', 'tests']"
Testability,"@phsft-bot build!. @pseyfert, I was wondering can we create a gtest testing that part? This is good for test coverage and documentation purposes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/121#issuecomment-305766688:68,test,testing,68,https://root.cern,https://github.com/root-project/root/pull/121#issuecomment-305766688,2,['test'],"['test', 'testing']"
Testability,"@phsft-bot build!. @satyarth934, it seems you found your way around this. The idea of the diff is that you can apply it without having clang format. You just open the log file in plain text copy the diff, store it on your machine and apply it with git apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/441#issuecomment-288350601:167,log,log,167,https://root.cern,https://github.com/root-project/root/pull/441#issuecomment-288350601,1,['log'],['log']
Testability,"@phsft-bot build!. @sawenzel, this looks good. You can add a unit test under math//genvector/test/testGenVector.cxx and test/testGenVectorVc.cxx. The latter should probably be moved in the folder of the former. About unit tests: #451 introduces a gtest in tree. It will land soon but I don't think this PR should wait for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/464#issuecomment-289429769:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/464#issuecomment-289429769,6,['test'],"['test', 'testGenVector', 'testGenVectorVc', 'tests']"
Testability,"@phsft-bot build!. @yamaguchi1024, why projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_root fails?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-396483274:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-396483274,1,['test'],['test']
Testability,@phsft-bot build!. As part of upstreaming this patch we want to add a test case. This PR is just to check if something is failing in ROOT to help us with the testcase.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826#issuecomment-1166320454:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/10826#issuecomment-1166320454,2,['test'],"['test', 'testcase']"
Testability,"@phsft-bot build!. Could you update the commit message to something like:; ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5223#issuecomment-604382871:229,log,logic,229,https://root.cern,https://github.com/root-project/root/pull/5223#issuecomment-604382871,1,['log'],['logic']
Testability,@phsft-bot build!. Testing the new roottest branch checkout...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2432#issuecomment-425662796:19,Test,Testing,19,https://root.cern,https://github.com/root-project/root/pull/2432#issuecomment-425662796,1,['Test'],['Testing']
Testability,@phsft-bot build!. Thanks for the updated test Chris!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394#issuecomment-286546439:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/394#issuecomment-286546439,1,['test'],['test']
Testability,"@phsft-bot build. I think new generators should go via `ROOT::Math::TRandomEngine`, not another `TRandomXYZ`, right @lmoneta? Also would be good to have some tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8798#issuecomment-900917227:158,test,tests,158,https://root.cern,https://github.com/root-project/root/pull/8798#issuecomment-900917227,1,['test'],['tests']
Testability,"@phsft-bot build. Let's see if the tests are still passing and then merge the PR, which @bellenot already approved. I like the idea of making the timeout configurable :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886#issuecomment-1808868564:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/10886#issuecomment-1808868564,1,['test'],['tests']
Testability,"@phsft-bot build; I can't see any test failures on the dashboard, let's run it again and see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8176#issuecomment-841681475:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/8176#issuecomment-841681475,1,['test'],['test']
Testability,"@pzhristov @ktf If time is of the essence, the PR could in now. Ideally, however, a few things should be included (as part of this PR or a subsequent PR):; * review of the clang-format suggestion; * adding doc for each functions and members in doxygen format; * adding tests either in root.git or roottest.git",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371608424:269,test,tests,269,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371608424,1,['test'],['tests']
Testability,@rdisipio do you have still by chance the ROOT file example from your post https://root-forum.cern.ch/t/ttree-getentrywithindex-error-due-to-cast-long-int-t/28316? That we could convert into a test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2002483047:193,test,test,193,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2002483047,1,['test'],['test']
Testability,@rdschaffer : could you create a VM with an Atlas cert where I could run a test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757847578:75,test,test,75,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757847578,1,['test'],['test']
Testability,@rdschaffer : have you tried comparing the full list of shared libs for a failed and successful job? Are there any differences at all? (unfortunately the links to the logs seem to be expired),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-749194685:167,log,logs,167,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-749194685,1,['log'],['logs']
Testability,"@rlalik sorry for such late reply... (I think I just lost it in my to-do list). I think your fix totally make sense for me (cc: @vgvassilev ). Could you please open PR with the proposed changes, we could see if the test suite will be 'green'?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6777#issuecomment-754622314:215,test,test,215,https://root.cern,https://github.com/root-project/root/issues/6777#issuecomment-754622314,1,['test'],['test']
Testability,"@rquaglia90 this is great!. If you have the time, could you add a test of analytic vs numeric integral? It should be sufficient to copy-paste the Johnson test code, and run it for a few parameter points (not many needed) from here:; https://github.com/root-project/root/blob/7b8424497d2c6e5494f8de225c1e2b315a01e6d3/roofit/roofit/test/testRooJohnson.cxx#L101-L182. **EDIT:**; This is doing a similar thing, but it's easier:; https://github.com/root-project/root/blob/master/roofit/roofit/test/testRooBernstein.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9539#issuecomment-1010213645:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/9539#issuecomment-1010213645,6,['test'],"['test', 'testRooBernstein', 'testRooJohnson']"
Testability,@sawenzel Could you also add a (summarized) version of the 'complementary info' in the commit log and/or code-comments?; Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/482#issuecomment-292183960:94,log,log,94,https://root.cern,https://github.com/root-project/root/pull/482#issuecomment-292183960,1,['log'],['log']
Testability,"@sawenzel I get your point about thread safety, and agree that even the previous version was thread-unsafe, so I will deal with this later. The current version introduces a rather large critical section in `TGeoParallelWorld::InitSafetyVoxel` that blocks all concurrent threads even if they want to update the cache of different voxels, I would have pushed that lock a bit below where the update of the cache actually happens. But since this does not run in MT mode this is not critical now. Could you also do clang-formatting using ROOT style for the `bvh` part only (The entirety of TGeo is not yet formatted, but we will do it at some point), however the new files should be formatted. I looked and the internal thread pool is actually used for building the BVH in parallel, which is cool, but there may still be some unused headers, such as `sphere.h` - could you cross-check that and remove whatever is not needed?. The compilation errors on Mac are unrelated to your PR. Still, the compilation on alma8 with gcc8.5 fails, although it should not because the standard is set correctly to C++17 and the header <numeric> is included. ; ```; Error: /github/home/ROOT-CI/src/geom/geom/inc/bvh/v2/vec.h:99:17: error: ‘transform_reduce’ is not a member of ‘std’; ```; So @dpiparo what do we do about this since the `gcc` compliance with C++17 is known to be stable only starting with the gcc9 series? Why do we still test gcc8.5 with C++17?. I'll do also some more testing on my side for your PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2360336308:1415,test,test,1415,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2360336308,2,['test'],"['test', 'testing']"
Testability,"@sawenzel, cool. Could you wait to merge the gtest PR #451, and convert the example program into a unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/482#issuecomment-292133442:104,test,test,104,https://root.cern,https://github.com/root-project/root/pull/482#issuecomment-292133442,1,['test'],['test']
Testability,"@sawenzel, you can get the diff (by clicking on view raw log) and apply it or run `git-clang-format --commit 473bb4504c382d706deeeb96ea666dfa61222baa --binary ${which clang-format}`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/464#issuecomment-289802226:57,log,log,57,https://root.cern,https://github.com/root-project/root/pull/464#issuecomment-289802226,1,['log'],['log']
Testability,"@serval2412 Would you mind rebasing and pushing, so we can test with latest master? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435#issuecomment-361200766:59,test,test,59,https://root.cern,https://github.com/root-project/root/pull/1435#issuecomment-361200766,1,['test'],['test']
Testability,"@simonmichal Great, thanks! We are still working on getting that test file up on an XRootD endpoint. Will let you know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-941001842:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-941001842,1,['test'],['test']
Testability,@simonmichal There is now `root://eospublic.cern.ch//eos/root-eos/xrootd.test`. You can use it to implement unit tests along the line of the `RRawFileDavix` implementation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-941068698:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-941068698,2,['test'],"['test', 'tests']"
Testability,"@simonmichal so I guess it's not the libraries. What else can we do to debug this?. > I can upload the files of these two logs, if it would help. What's preventing this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757680222:122,log,logs,122,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757680222,1,['log'],['logs']
Testability,"@simonspa from a quick check, performance has improved but the issue isn't resolved; probing the 16 threads shows that almost all threads now instead lock the global ROOT mutex when in the TObject destructor:; ```; #0 0x00007ffff0de186c in __lll_lock_wait () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0; #1 0x00007ffff0ddab65 in pthread_mutex_lock () from /nix/store/27x7pinqdsl9f3rpbm8bsszd9fhwq266-glibc-2.27/lib/libpthread.so.0; #2 0x00007ffff18b445e in ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::ReadLock() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libThread.so; #3 0x00007ffff4c4d66d in ROOT::TReadLockGuard::TReadLockGuard(ROOT::TVirtualRWMutex*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so; #4 0x00007ffff4c4422e in TROOT::RecursiveRemove(TObject*) () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so; #5 0x00007ffff4cfc24c in TObject::~TObject() () from /nix/store/0wmj1ywknywy8kkbrd343iy17h97j54l-root-6.16/lib/libCore.so; ```. ---. This happens during message destruction, which I don't think is mimicked in `root-test`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2381#issuecomment-408680078:1166,test,test,1166,https://root.cern,https://github.com/root-project/root/pull/2381#issuecomment-408680078,1,['test'],['test']
Testability,"@smuzaffar I am still doing something odd. I get:; ```; Begin processing the 1st record. Run 1, Event 2, LumiSection 1 on stream 0 at 07-Apr-2021 21:41:09.524 CEST; cmsRun: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_11_3_ROOT6_X_2021-04-05-2300/src/FWCore/Concurrency/src/WaitingTaskList.cc:57: void edm::WaitingTaskList::reset(): Assertion `m_head == nullptr' failed. Thread 1 ""cmsRun"" received signal SIGABRT, Aborted.; 0x00007ffff4ae33d7 in raise () from /lib64/libc.so.6; (gdb) bt; #0 0x00007ffff4ae33d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff4ae4ac8 in abort () from /lib64/libc.so.6; #2 0x00007ffff4adc1a6 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff4adc252 in __assert_fail () from /lib64/libc.so.6; #4 0x00007ffff7e8fd19 in edm::WaitingTaskList::reset() () from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreConcurrency.so; #5 0x00007ffff7ce3cbb in edm::Worker::reset() () from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #6 0x00007ffff7ce2664 in edm::WorkerManager::resetAll() () from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #7 0x00007ffff7be8df0 in edm::StreamSchedule::processOneStreamAsync<edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2> >(edm::WaitingTaskHolder, edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2>::TransitionInfoType&, edm::ServiceToken const&, bool)::{lambda()#2}::operator()() (); from /build/pcanal/CMSSW_11_3_ROOT6_X_2021-04-05-2300/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #8 0x00007ffff7be9124 in tbb::internal::function_task<edm::StreamSchedule::processOneStreamAsync<edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2> >(edm::WaitingTaskHolder, edm::OccurrenceTraits<edm::LuminosityBlockPrincipal, (edm::BranchActionType)2>::TransitionInfoType&, edm::ServiceToken const&, bool)::{lambda()#3}>::exe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-815176998:214,test,tests,214,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-815176998,2,"['Assert', 'test']","['Assertion', 'tests']"
Testability,"@smuzaffar is there a chance you can test https://github.com/root-project/root/commit/f7adbd2b04e62a0660245d43f3d411367a8ebebc or later, from v6-28-00-patches? That should fix this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771#issuecomment-1536241915:37,test,test,37,https://root.cern,https://github.com/root-project/root/issues/12771#issuecomment-1536241915,1,['test'],['test']
Testability,"@smuzaffar, I see the tests were rejected on the cmssw side but can you help us understand if something was missing on the ppc64 backend side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1779520018:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1779520018,1,['test'],['tests']
Testability,"@smuzaffar, can you apply this PR in cmssw and see if something breaks?. @Axel-Naumann, could you give us a hand here. Do you remember the context of this patch and can you help writing a testcase?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826#issuecomment-1166450107:188,test,testcase,188,https://root.cern,https://github.com/root-project/root/pull/10826#issuecomment-1166450107,1,['test'],['testcase']
Testability,"@smuzaffar, can you rerun testing of this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2332294846:26,test,testing,26,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2332294846,1,['test'],['testing']
Testability,"@smuzaffar, can you test this PR in cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1229944464:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1229944464,1,['test'],['test']
Testability,"@smuzaffar, can you test this PR on whole cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1135959304:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1135959304,1,['test'],['test']
Testability,"@smuzaffar, can you test this PR within cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13181#issuecomment-1621746306:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/13181#issuecomment-1621746306,1,['test'],['test']
Testability,"@smuzaffar, can you test with cmssw the current state of this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1143531451:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1143531451,1,['test'],['test']
Testability,"@smuzaffar, could we test that PR on cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16150#issuecomment-2262729839:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/16150#issuecomment-2262729839,1,['test'],['test']
Testability,"@smuzaffar, could you test this PR for CMSSW as it would likely end up in v6-26 and is in the core of ROOT name resolution mechanism. cc: @davidlange6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1016179176:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1016179176,1,['test'],['test']
Testability,"@smuzaffar, the jenkins link does not open for me. Can you attach the log here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-986093406:70,log,log,70,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-986093406,1,['log'],['log']
Testability,"@smuzaffar, we will probably start moving towards more upstream llvm parts in Cling. These PRs need to be tested on cmssw because of relocation and pcms. Can you test this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374#issuecomment-2082370049:106,test,tested,106,https://root.cern,https://github.com/root-project/root/pull/15374#issuecomment-2082370049,2,['test'],"['test', 'tested']"
Testability,"@spacelg then there is nothing we can do for the time being. We'll have to wait until the compiler is available for testing. Please ping us when it is available, so we can fix the issue before the public release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336#issuecomment-2154260248:116,test,testing,116,https://root.cern,https://github.com/root-project/root/issues/15336#issuecomment-2154260248,1,['test'],['testing']
Testability,"@srimanob thanks a lot for the details!; I can confirm that #16232 fixes the issue with the reproducers you gave. However, despite it being green on our CI, [one test for cmssw](https://github.com/root-project/root/pull/16232#issuecomment-2299822796) has a failure most likely related to the change.; Unfortunately I have not been able to reproduce the crash and it is blocking us from merging the fix; do you think you could help us come up with a reproducer that we can more easily debug? I believe that once we fix that crash we can finally merge this fix.; Thanks again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7955#issuecomment-2328081119:162,test,test,162,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-2328081119,1,['test'],['test']
Testability,"@steffen-AEI what is your use case for the `pbuilder` sandbox? As mentioned before, ROOT seems to generally work on Ubuntu 22.04 and we (as the ROOT team) cannot support all possible configuration and sandbox possibilities out there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1169577022:54,sandbox,sandbox,54,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1169577022,2,['sandbox'],['sandbox']
Testability,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7802#issuecomment-822528404:97,log,logged,97,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404,1,['log'],['logged']
Testability,"@stwunsch ; Is it possible to change prettyprint test from; ```; self.assertEqual(""Name: TObject Title: Basic ROOT object"", x.__str__()); to ; self.assertEqual(""(TObject &) Name: TObject Title: Basic ROOT object\n"", x.__str__()); ```; for this change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-397811291:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-397811291,3,"['assert', 'test']","['assertEqual', 'test']"
Testability,"@stwunsch @lmoneta I added the GPU implementation for those operations and both the CPU and GPU tests are passing. Can you review and trigger the build?. The update operations tests are as follows,. ![update operations](https://user-images.githubusercontent.com/20338345/42968360-a6829aec-8bc0-11e8-8a21-a16e1874e975.jpg). ![update operations tests](https://user-images.githubusercontent.com/20338345/42968421-ce8c34ee-8bc0-11e8-8964-8b1175e93af1.jpg)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2315#issuecomment-406401682:96,test,tests,96,https://root.cern,https://github.com/root-project/root/pull/2315#issuecomment-406401682,3,['test'],['tests']
Testability,"@stwunsch @maxgalli please have a look, there is also a test for this here: https://github.com/root-project/roottest/pull/486 . @maxgalli please review especially the changes related to multi-python in both commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5334#issuecomment-611432376:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/5334#issuecomment-611432376,1,['test'],['test']
Testability,"@stwunsch I added the tests you mentioned, thanks!. * redefining a redefined column is just fine, it just redefines it again; * redefining columns with the same name in different branches is just fine, as with Defines; * aliasing a Redefined column just works, it's the same as aliasing a Defined column. > Does the original name stay in the list of column names returned by GetColumnNames?. I don't understand the question, the name is always the same and it appears in the output of `GetColumnNames` before and after the redefinition. > Are there other interaction points for the redefined cols? Like the `GetColumnType` op?. I added a test to assert that `GetColumnType` picks up the type of the redefinition rather than the original type. It didn't if the column came from a TTree branch! Now it does. Everything else should work exactly the same as for normal Defines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7384#issuecomment-795450802:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/7384#issuecomment-795450802,3,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,"@stwunsch I am currently waiting on @oshadura on a way to repeat the test, on @eguiraud to react to my reaction, on a review approval and I still have to deal with a warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-692048972:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-692048972,1,['test'],['test']
Testability,"@stwunsch I checked build in Jenkins, it is green (test are still running)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6779#issuecomment-724095429:51,test,test,51,https://root.cern,https://github.com/root-project/root/issues/6779#issuecomment-724095429,1,['test'],['test']
Testability,"@stwunsch I didn't see tutorials running in Jenkins logs, so I will start full build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5108#issuecomment-599428318:52,log,logs,52,https://root.cern,https://github.com/root-project/root/pull/5108#issuecomment-599428318,1,['log'],['logs']
Testability,"@stwunsch Puh, I don't know... Are you using the latest version of TensorBoard? I have tested it on Ubuntu 16.04.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1353#issuecomment-350016291:87,test,tested,87,https://root.cern,https://github.com/root-project/root/pull/1353#issuecomment-350016291,1,['test'],['tested']
Testability,"@stwunsch as discussed, my opinion is that the previous message was user-friendlier than an actual python runtime error, and to increase test coverage it should be enough to change `exit()` to `exit(1)`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397#issuecomment-616458823:137,test,test,137,https://root.cern,https://github.com/root-project/root/pull/5397#issuecomment-616458823,1,['test'],['test']
Testability,@stwunsch merging now so that @amadio can benchmark this using the nightly builds (and because the InvariantMass test passes and I see `InvariantMass` go from 24% to 8% of the runtime with these changes). Please let me know if I should change anything!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4153#issuecomment-518400412:42,benchmark,benchmark,42,https://root.cern,https://github.com/root-project/root/pull/4153#issuecomment-518400412,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"@stwunsch test: of course, albeit it was failing rarely for me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-686719525:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-686719525,1,['test'],['test']
Testability,@stwunsch this pythonisation looks great. Is there a way in which we can test it too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2497#issuecomment-414920963:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/2497#issuecomment-414920963,1,['test'],['test']
Testability,"@sudo-panda @vgvassilev FYI after these changes rootbench (https://github.com/root-project/rootbench) is not compiling anymore:; ```; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx: In function ‘void BM_TFormulaPerf(benchmark::State&, const char*, F&&, bool)’:. /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx:30:13: error: ‘GradientStorage’ is not a member of ‘TFormula’; TFormula::GradientStorage result(Npar);; ^~~~~~~~~~~~~~~. /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/rootbench/root/hist/hist/TFormulaGradientBenchmarks.cxx:38:19: error: ‘result’ was not declared in this scope; eval(h, f, x, result.data());; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8371#issuecomment-903671179:164,benchmark,benchmark,164,https://root.cern,https://github.com/root-project/root/pull/8371#issuecomment-903671179,4,['benchmark'],['benchmark']
Testability,"@surya2191997 can you please include test cases for the forward, backward pass and other functional TCs required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6091#issuecomment-665102654:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/6091#issuecomment-665102654,1,['test'],['test']
Testability,"@vepadulano , Looks like `python3 -c 'import ROOT;print(ROOT.kError);` is still loading all shared libs. I am testing locally to see which symbol is causing this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14261#issuecomment-1863067950:110,test,testing,110,https://root.cern,https://github.com/root-project/root/pull/14261#issuecomment-1863067950,1,['test'],['testing']
Testability,"@vepadulano - FYI, I can confirm that the issue is still present in the latest maser branch built with Python 3.12. However, I cannot reproduce a `SystemError` running the test case with pytest. I'm closing the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602#issuecomment-1941465245:172,test,test,172,https://root.cern,https://github.com/root-project/root/issues/11602#issuecomment-1941465245,1,['test'],['test']
Testability,"@vepadulano - I think, now all the tests should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692#issuecomment-1944055171:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/14692#issuecomment-1944055171,1,['test'],['tests']
Testability,@vepadulano - the RDF Display tests will fail to compare the strings with floats due to different precision between `std::to_string` and `cling::printValue`. I'll leave it to you to decide what you want to do: either update the tests or change the precision when floats are converted to a string.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14692#issuecomment-1943607432:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/14692#issuecomment-1943607432,2,['test'],['tests']
Testability,@vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14676:181,test,tested,181,https://root.cern,https://github.com/root-project/root/pull/14676,2,['test'],"['test-norootextension', 'tested']"
Testability,@vepadulano . We do not have detailed graphics tests.; Currently only stressGraphics is used to say that code is not crashing and produce png image is of approximate size.; We need to create test like in jsroot. See https://github.com/linev/jsroot-test; It is set of SVG files which I regenerate every time when jsroot code changes.; And there I can track any single graphical primitive change.; ; Similar should be done for ROOT graphics as well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14382#issuecomment-1898768063:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/14382#issuecomment-1898768063,3,['test'],"['test', 'tests']"
Testability,@vepadulano . We do not have testing which can detect title change of the painted axis.; This need to be implemented in roottest. ; There will be student starting in April which will do exactly this - for new web graphics.; Once it is there - we could also provide similar functionality for classical graphics.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14500#issuecomment-1920757715:29,test,testing,29,https://root.cern,https://github.com/root-project/root/pull/14500#issuecomment-1920757715,1,['test'],['testing']
Testability,"@vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent.; When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:; `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree; - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```; const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;; host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;; ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```; Int_t fMemAvailable; // available RAM in MB; Int_t fMemCached; // cached RAM in MB; Int_t fMemBuffer; // buffer RAM in MB; Int_t fMemShared; // shared RAM in MB; Int_t fSwapCached; // cached swap in MB; Int_t fSReclaimable // slab that might be reclaimed; ```. Results:. ```; ➜ ROOT free -h; total used free shared buff/cache available; Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi; Swap: 7.6Gi 2.1Gi 5.5Gi; ```. ```; ➜ ROOT root -l; root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);; root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;; 23877 2786 7562; root [2] ; ```; Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14695:1917,test,tested,1917,https://root.cern,https://github.com/root-project/root/pull/14695,1,['test'],['tested']
Testability,"@vepadulano @eguiraud Same story here, what do you think about `GetDataSetInfo`? See the test here:. ```cpp; TEST(RDataFrameInterface, GetDataSetInfo); {; // trivial/empty datasource; ROOT::RDataFrame df1a(1);; EXPECT_EQ(df1a.GetDataSetInfo(), ""1 empty row"");. ROOT::RDataFrame df1b(2);; EXPECT_EQ(df1b.GetDataSetInfo(), ""2 empty rows"");. // ttree/tchain datasource; TTree tree(""some name"", ""some title"");; ROOT::RDataFrame df2(tree);; EXPECT_EQ(df2.GetDataSetInfo(), ""some name"");. // others with an actual fDataSource, like csv; auto df3 = ROOT::RDF::MakeCsvDataFrame(""RCsvDS_test_headers.csv"");; EXPECT_EQ(df3.GetDataSetInfo(), ""not available"");; }; ```. What about the name `GetDataSetInfo`, note the capitalising! What should we return for an `fDataSource`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7829#issuecomment-817817954:89,test,test,89,https://root.cern,https://github.com/root-project/root/issues/7829#issuecomment-817817954,2,"['TEST', 'test']","['TEST', 'test']"
Testability,@vepadulano Can you check why this seemingly straightforward change is making some test fail?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11412#issuecomment-2103302287:83,test,test,83,https://root.cern,https://github.com/root-project/root/pull/11412#issuecomment-2103302287,1,['test'],['test']
Testability,@vepadulano Do we have xrootd server permanently running with test file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13559#issuecomment-1697332420:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/13559#issuecomment-1697332420,1,['test'],['test']
Testability,"@vepadulano I forgot if this problem was reproducible on any Mac? On my Mac:; ```;  │  ~/CERN_/root-rntuple/builds │   builtin-xrootd-5.1.0 ?1  ctest -R test-stressIOPlugins-xroot  ✔ │ 16:54:58 ; Test project /Users/oshadura/CERN_sources/root-rntuple/builds; Start 216: test-stressIOPlugins-xroot; 1/1 Test #216: test-stressIOPlugins-xroot ....... Passed 7.80 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 7.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-790721333:158,test,test-stressIOPlugins-xroot,158,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-790721333,8,"['Test', 'test']","['Test', 'test-stressIOPlugins-xroot', 'tests']"
Testability,"@vepadulano My teste went perfectly well, i.e. all broken applications I could get my hands on work again, including tiny labclass codes relying on {{TRint}} and the full analysis framework I once maintained most of my time. ; So indeed I think this can be closed, many thanks for the quick implementation of the fix and tests! :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1068326624:15,test,teste,15,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1068326624,2,['test'],"['teste', 'tests']"
Testability,"@vepadulano That looks great, many thanks! ; I see the tests don't explicitly test that `TRint` does not call `Terminate()` due to an error, but probably there's no easy way to do so. . I've right now pulled the patch and am recompiling my 6.26.00 installation with it, and will subsequently test several interactive programs (used in lab classes, an analysis framework on top of ROOT, and in some CLI tools) against it and report back. Hope to finish this either late today or tomorrow. From the code changes alone, I don't see what could go wrong — but better test ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1068044140:55,test,tests,55,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1068044140,4,['test'],"['test', 'tests']"
Testability,@vepadulano everything should be fixed now. I tested on Windows and it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12912#issuecomment-1571590020:46,test,tested,46,https://root.cern,https://github.com/root-project/root/pull/12912#issuecomment-1571590020,1,['test'],['tested']
Testability,@vepadulano the last commit adds a test and a fix for Tommaso's issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10699#issuecomment-1146087582:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/10699#issuecomment-1146087582,1,['test'],['test']
Testability,@vepadulano the test failures look real,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720595438:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720595438,1,['test'],['test']
Testability,"@vepadulano, @lmoneta, sorry for the ping.; I see that some of the tests fail, but as far as I can tell the failures are not related to this PR.; Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1790968724:67,test,tests,67,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1790968724,2,['test'],['tests']
Testability,"@vepadulano, can you run your tests again. With the current changes we support `constexpr` and it should be fast as we do not even try to look for the symbols but we evaluate the initializer instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1866945314:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1866945314,1,['test'],['tests']
Testability,"@vepadulano, there is already a test in upstream cpycppyy: https://github.com/wlav/cppyy/commit/25398e665d157eb7ede8b3f81e18a5ab7c0da555. That's why I didn't add a unit test. So this is actually a more general question: should we duplicate the cppyy tests as ROOT unit tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16133#issuecomment-2262025019:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/16133#issuecomment-2262025019,4,['test'],"['test', 'tests']"
Testability,"@vgvassilev ""convert the example program into a unit test?""; This is a performance test and the gain is relative to without the inlining, how do you invision this applied into a (stable) unit test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/482#issuecomment-292138331:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/482#issuecomment-292138331,3,['test'],['test']
Testability,"@vgvassilev , @aandvalenzuela has already started the [tests for aarch64](https://github.com/cms-sw/root/pull/209#issuecomment-2331962555) and looks like latest change has fixed the root build (tests are now building cmssw)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2332305469:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2332305469,2,['test'],['tests']
Testability,"@vgvassilev , CMS tests [passed](https://github.com/cms-sw/root/pull/188#issuecomment-1782229736) this time. CMSSW build step was failing as `rootcling` failed to build dictionary[a] for one of our package ( with boost headers). Anyway, [patching boost](https://github.com/cms-externals/boost/pull/6) fixed the build issue. . [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-0e3c07/35428/build-logs/CondFormats/RunInfo/log.html; ```; >> Building LCG reflex dict from header file src/CondFormats/RunInfo/src/classes.h; In file included from input_line_7:57:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_13_3_ROOT6_X_2023-10-25-2300/src/CondFormats/RunInfo/src/headers.h:1:; In file included from cmssw/src/CondFormats/RunInfo/interface/RunNumber.h:4:; In file included from cmssw/src/CondFormats/Serialization/interface/Serializable.h:18:; In file included from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/vector.hpp:26:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/nvp.hpp:35:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/split_free.hpp:22:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/serialization.hpp:14:; In file included from .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/serialization/strong_typedef.hpp:28:; .../boost/1.80.0-826a207b8543c52970cb1f72d50f068c/include/boost/type_traits/has_nothrow_assign.hpp:65:7: warning: builtin __has_nothrow_assign is deprecated; use __is_nothrow_assignable instead [-Wdeprecated-builtins]; BOOST_HAS_NOTHROW_ASSIGN(T); ....; ....; In file included from input_line_7:57:; In file included from cmssw/src/CondFormats/RunInfo/src/headers.h:1:; In file included from cmssw/src/CondFormats/RunInfo/inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1782483745:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1782483745,6,"['log', 'test']","['log', 'logs', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , CMSSW tests started via https://github.com/cms-sw/root/pull/194",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321#issuecomment-1884917219:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/14321#issuecomment-1884917219,1,['test'],['tests']
Testability,"@vgvassilev , I also tested this for our CXXMODULE IBs and most of relvals failed with errors like. https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-d3a1b7/21842/runTheMatrix-results/8.0_BeamHalo+BeamHalo+DIGICOS+RECOCOS+ALCABH+HARVESTCOS/step1_BeamHalo+BeamHalo+DIGICOS+RECOCOS+ALCABH+HARVESTCOS.log; ```; ----- Begin Fatal Exception 21-Jan-2022 04:35:59 CET-----------------------; An exception of category 'DictionaryNotFound' occurred while; [0] Constructing the EventProcessor; [1] Constructing module: class=BeamHaloProducer label='generator'; [2] Calling ProductRegistryHelper::addToRegistry, checking dictionaries for produced types; Exception Message:; No data dictionary found for the following classes:. map<string,ULong64_t>. Most likely each dictionary was never generated, but it may; be that it was generated in the wrong package. Please add; (or move) the specification '<class name=""whatever""/>' to; the appropriate classes_def.xml file along with any other; information needed there. For example, if this class has any; transient members, you need to specify them in classes_def.xml.; Also include the class header in classes.h. A type listed above might or might not be the same as a; type declared by a producer module with the function 'produces'.; Instead it might be the type of a data member, base class,; wrapped type, or other object needed by a produced type. Below; is some additional information which lists the types declared; to be produced by a producer module that are associated with; the types whose dictionaries were not found:. edm::HepMCProduct. ----- End Fatal Exception -------------------------------------------------; ```. this is a different error than what we get in out CXXMODULE IBs https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/raw/slc7_amd64_gcc10/CMSSW_12_3_CXXMODULE_X_2022-01-19-2300/pyRelValMatrixLogs/run/135.1_TTbar_13+TTbarFS_13+HARVESTUP15FS+MINIAODMCUP15FS/step3_TTbar_13+TTbarFS_13+HARVESTUP15FS+MINIAODMCUP15FS.log ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1018294322:21,test,tested,21,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1018294322,3,"['log', 'test']","['log', 'tested']"
Testability,"@vgvassilev , I am testing this change ( along with https://github.com/root-project/root/commit/fb3367fa03e1c8b639e9591b93f6ac5226a80fed ) here https://github.com/cms-sw/root/pull/160/files but root still failed to build for ppc64le ; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-facf87/20984/lcg/root/6.24.07-0d11bea31b2c034ddd6b4c7737d8a373/log",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-986033714:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-986033714,2,"['log', 'test']","['log', 'testing']"
Testability,"@vgvassilev , I can start the cmssw tests now, can you please resolve the conflicts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1153129624:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1153129624,1,['test'],['tests']
Testability,"@vgvassilev , I don't understand this problem.; Mathcore should not depend on Vc, we should not add Vc as a static library.; There is maybe some dependency only in the test programs, but in that case we can link then Vc statically when building the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8788#issuecomment-997930774:168,test,test,168,https://root.cern,https://github.com/root-project/root/pull/8788#issuecomment-997930774,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev , I have started the tests here https://github.com/cms-sw/root/pull/163",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9884#issuecomment-1041275786:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/9884#issuecomment-1041275786,1,['test'],['tests']
Testability,"@vgvassilev , I have started the tests here https://github.com/cms-sw/root/pull/165",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10193#issuecomment-1074889910:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/10193#issuecomment-1074889910,1,['test'],['tests']
Testability,"@vgvassilev , I have started the tests here https://github.com/cms-sw/root/pull/185",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1665256213:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1665256213,1,['test'],['tests']
Testability,"@vgvassilev , `-DLLVM_BUILD_TYPE=Debug` did not help much. It failed again with the same error ( see https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25499/external/py3-hepdata-lib/0.8.1-23017aefcaec1f6e033b49c0652b0cd2/log )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154889634:251,log,log,251,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154889634,1,['log'],['log']
Testability,"@vgvassilev , as @makortel mentioned above , you can do something like the following on lxplus to reproduce this build failure ; ```; #Login to lxplus and start cmssw-el8 container; > ssh lxplus; > cd cd /tmp/$(whoami); > source /cvmfs/cms.cern.ch/cmsset_default.sh; > cmssw-el8; # Create CMSSW area using PR artefacts; > /cvmfs/cms-ci.cern.ch/week1/cms-sw/root/208/41293/install.sh; > cd CMSSW_14_2_ROOT6_X_2024-09-03-2300/; > cmsenv; #Build root dict; > scram b -v -j 10 tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.cc; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332023914:135,Log,Login,135,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332023914,1,['Log'],['Login']
Testability,"@vgvassilev , cms tests failed. Looks like hepdata-lib package, see the build error [here](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-57f21d/29184/external/py3-hepdata-lib/0.10.1-d5a65a50fc66bb6ceb2097b9bc30c480/log); ```; Processing ./v0.10.1.tar.gz; Preparing metadata (setup.py): started; Running command python setup.py egg_info; input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/build/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module _Builtin_intrinsics; Failed to load module std; Failed to load module libc; python3: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.27.01-36c89006db8bc49d9c575f40a5e4973c/root-6.27.01/core/metacling/sr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1324017853:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1324017853,8,"['log', 'test']","['log', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , cms tests passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10245#issuecomment-1082247173:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/10245#issuecomment-1082247173,1,['test'],['tests']
Testability,"@vgvassilev , cmssw [tests looks good](https://github.com/cms-sw/root/pull/206#issuecomment-2083540349). A unit test failure is not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15374#issuecomment-2083704174:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/15374#issuecomment-2083704174,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev , cmssw build failed during dictionaries generation [a]. I think this mostly happens when cuda code is envolved. [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8fe9c7/41033/build-logs/DataFormats/VertexSoA/log.html; ```; 0.	Program arguments: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/lcg/root/6.33.01-a252d5032aa4f9a2fc7dcaab3fac8b9f/bin/rootcling -reflex -f tmp/el8_amd64_gcc12/src/DataFormats/VertexSoA/src/DataFormatsVertexSoA/a/DataFormatsVertexSoA_xr.cc -inlineInputHeader -failOnWarnings -rmf tmp/el8_amd64_gcc12/src/DataFormats/VertexSoA/src/DataFormatsVertexSoA/a/DataFormatsVertexSoA_xr.rootmap -rml libDataFormatsVertexSoA.so -m DataFormatsCommon_xr_rdict.pcm -m DataFormatsProvenance_xr_rdict.pcm -DALPAKA_DEFAULT_HOST_MEMORY_ALIGNMENT=128 -DALPAKA_DISABLE_VENDOR_RNG -DCMS_DICT_IMPL -D_REENTRANT -DGNUSOURCE -D__STRICT_ANSI__ -DGNU_GCC -D_GNU_SOURCE -DTBB_USE_GLIBCXX_VERSION=120301 -DTBB_SUPPRESS_DEPRECATED_MESSAGES -DTBB_PREVIEW_RESUMABLE_TASKS=1 -DTBB_PREVIEW_TASK_GROUP_EXTENSIONS=1 -DBOOST_SPIRIT_THREADSAFE -DPHOENIX_THREADSAFE -DBOOST_MATH_DISABLE_STD_FPCLASSIFY -DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DCMSSW_GIT_HASH=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -DPROJECT_NAME=\""CMSSW\"" -DPROJECT_VERSION=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -Isrc -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/alpaka/1.1.0-84e4d58fde852e6641ccc23881ba7b1f/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/pcre/8.43-e34796d17981e9b6d174328c69446455/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-7ac88d918a6883d593abc133ee0eb2e9/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/bz2lib/1.0.6-d065ccd79984efc6d4660f410e4c81de/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2299822796:221,log,logs,221,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2299822796,4,"['log', 'test']","['log', 'logs', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , cmssw full release tests ( https://github.com/cms-sw/root/pull/169#issuecomment-1136649688 ) looks good. The unit test failing is nit related to root change ( it has been failing for cmssw for a while now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1136804413:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1136804413,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev , cmssw tests are failing but not due to this change but due to https://github.com/cms-sw/cmsdist/pull/8928#issuecomment-1885124568",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321#issuecomment-1885125616:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/14321#issuecomment-1885125616,1,['test'],['tests']
Testability,"@vgvassilev , cmssw tests are now running for https://github.com/cms-sw/root/pull/172",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850#issuecomment-1216596690:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/10850#issuecomment-1216596690,1,['test'],['tests']
Testability,"@vgvassilev , cmssw tests are runing via https://github.com/cms-sw/root/pull/208 now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2295885146:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2295885146,1,['test'],['tests']
Testability,"@vgvassilev , cmssw tests for latest root master + this change are now running via https://github.com/cms-sw/cmsdist/pull/7558",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1017484401:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1017484401,1,['test'],['tests']
Testability,"@vgvassilev , is it worth to add a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2977#issuecomment-439033985:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/2977#issuecomment-439033985,1,['test'],['test']
Testability,"@vgvassilev , please open a PR for cms-sw/root branch cmscxx/master/daff082e92 (which is based on root coomit daff082e92 + changes needed for cxxmodules). Once we have the PR then we can test and integrate it in CXXMODULE IBs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4331#issuecomment-527766672:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/4331#issuecomment-527766672,1,['test'],['test']
Testability,"@vgvassilev , testing it https://github.com/cms-sw/root/pull/169",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1136021523:14,test,testing,14,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1136021523,1,['test'],['testing']
Testability,"@vgvassilev , this failed to build for cmssw externals e.g. `hepdata-lib` failed to build with [error](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-6342e6/25491/external/py3-hepdata-lib/0.8.1-ec986c2493f655785ae2df5c3741f2df/log); ```; + pip3 install --no-clean --no-deps --no-index --no-build-isolation --no-cache-dir --disable-pip-version-check --user -v hepdata_lib-0.8.1.tar.gz; Using pip 22.0.4 from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/py3-pip/22.0.4-84448601ef6fb03288e044db5008fd92/lib/python3.9/site-packages/pip (python 3.9); Processing ./hepdata_lib-0.8.1.tar.gz; Preparing metadata (setup.py): started; Running command python setup.py egg_info; input_line_1:1:2: fatal error: module 'libc' in AST file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/std.pcm' found in a different module map file (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/etc/cling/libc.modulemap) than when the importing AST file was built (/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/build/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; <<< cling interactive line includer >>>: fatal error: module file '/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/lcg/root/6.27.01-fcb9eae806144b267f209fdf3fa8dc2e/lib/libc.pcm' is out of date and needs to be rebuilt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1154135015:253,log,log,253,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1154135015,7,"['log', 'test']","['log', 'testBuildDir', 'tests']"
Testability,"@vgvassilev , this looks good ( I have tested it here https://github.com/cms-sw/cmsdist/pull/7445 ) . Can you please back port it to v6.24 branch too?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-988190564:39,test,tested,39,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-988190564,1,['test'],['tested']
Testability,"@vgvassilev , this looks good. CMSSW PR tests worked fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10193#issuecomment-1075983950:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/10193#issuecomment-1075983950,1,['test'],['tests']
Testability,"@vgvassilev , though PR tests for https://github.com/cms-sw/root/pull/163 passed ( may be because it was a partial/incremental build of cmssw) but all tests in CMSSW IBs are failing with errors like ; ```; Error in <TCling::LoadPCM>: ROOT PCM /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT6_X_2022-02-20-0000/bin/slc7_amd64_gcc10/libNet_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/lcg/root/6.27.01-41fc432df04c8b3cb067f93c7cebe91f/lib/libASImageGui_rdict.pcm; ...; ...; terminate called after throwing an instance of 'edm::Exception'; what(): An exception of category 'FatalRootError' occurred.; Additional Info:; [a] Fatal Root Error: @SUB=TCling::LoadPCM; ROOT PCM /cvmfs/cms-ib.cern.ch/nweek-02721/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_3_ROOT6_X_2022-02-20-0000/bin/slc7_amd64_gcc10/libPhysics_rdict.pcm file does not exist; ```. see the full log here https://cmssdt.cern.ch/SDT/cgi-bin/logreader/slc7_amd64_gcc10/CMSSW_12_3_ROOT6_X_2022-02-20-0000/pyRelValMatrixLogs/run/4.24_WMuSkim2011A+WMuSkim2011A+HLTDSKIM+RECODR1reHLT+HARVESTDR1reHLT/step2_WMuSkim2011A+WMuSkim2011A+HLTDSKIM+RECODR1reHLT+HARVESTDR1reHLT.log#/ . Somehow `cling` is looking for root pcm files under the CMSSW/bin/arch directory ( this is the directory from where the `cmsRun` executable was picked up)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9884#issuecomment-1046310352:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/9884#issuecomment-1046310352,5,"['log', 'test']","['log', 'logreader', 'tests']"
Testability,"@vgvassilev , we have integrated this in CMSSW ROOT6 IBs and every things looks good. We also see some improvement on the memory usage (on avg 20MB less RSS used during our tests.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1796#issuecomment-380451623:173,test,tests,173,https://root.cern,https://github.com/root-project/root/pull/1796#issuecomment-380451623,1,['test'],['tests']
Testability,"@vgvassilev , you can use `cmsdev40 to cmsdev45` nodes for testing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2332316114:59,test,testing,59,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2332316114,1,['test'],['testing']
Testability,@vgvassilev - I added this patch for tonight's cmssw modules IB for a test...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1180288358:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1180288358,1,['test'],['test']
Testability,"@vgvassilev - yes, I think this would solve your issue as the `.gitmodules` in the branch would refer to the particular testing branch you referenced. Can I bump this ticket? I just wasted 5 minutes figuring out that I had `roottest` and `root` on mis-matching branches :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/599#issuecomment-308056116:120,test,testing,120,https://root.cern,https://github.com/root-project/root/pull/599#issuecomment-308056116,1,['test'],['testing']
Testability,"@vgvassilev . > Could you also now try running clingtest as part of the regular ROOT testing procedure? I believe (with minor adjustments) it will work. Sure, but this PR makes this neither easier nor more difficult, nor should it have any other effect :-) We probably want a new build flavor, to make sure that things work both with and without cling-test. I.e. enable cling-test only on some builds. Which ones - one Fedora, one Mac? And I agree we should have this PR tested with cling-test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8204#issuecomment-844076379:85,test,testing,85,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844076379,5,['test'],"['test', 'tested', 'testing']"
Testability,"@vgvassilev . User CPU time, 2nd run of all tests:. test | opt | non-opt; -----|-----|--------; stressGeometry.cxx | 20.10 | 19.36; stressHistogram.cxx | 16.52 | 15.89; stressGraphics.cxx | 57.68 | 16.13. stressGraphics generates code that's full of virtual function calls. This used to explode; a factor 4 is still terrible but given that this is on the ""awkward"" side of our legacy code likely a price we need to pay.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9301#issuecomment-970007970:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/9301#issuecomment-970007970,2,['test'],"['test', 'tests']"
Testability,@vgvassilev : Which file? If I apply clang-format on the unit test ... the whole file is changed (not just my part). Same for Transform3D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/464#issuecomment-289800609:62,test,test,62,https://root.cern,https://github.com/root-project/root/pull/464#issuecomment-289800609,1,['test'],['test']
Testability,"@vgvassilev @Axel-Naumann Report: no-one called `ASTWriter::getSubmoduleID()`, but I did get the following output:; ```ConsoleSession; FAILED: core/G__Core.cxx lib/Core.pcm /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/core/G__Core.cxx /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/lib/Core.pcm ; cd /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/core && /scratch/greenc/test-products/cmake/v3_24_1/Linux64bit+3.10-2.17/bin/cmake -E env LD_LIBRARY_PATH=/scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/lib:/scratch/greenc/test-products/xrootd/v5_4_3b/Linux64bit+3.10-2.17-c14-p3913-debug/lib:/scratch/greenc/test-products/tbb/v2021_7_0/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib64:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/pythia/v6_4_28u/Linux64bit+3.10-2.17-c14-debug/lib:/scratch/greenc/test-products/postgresql/v14_5/Linux64bit+3.10-2.17-p3913/lib:/scratch/greenc/test-products/openblas/v0_3_21/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/python/v3_9_13/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/sqlite/v3_39_02_00/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/libxml2/v2_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/gsl/v2_7/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib/x86_64-unknown-linux-gnu:/scratch/greenc/test-products/fftw/v3_3_10/Linux64bit+3.10-2.17/lib: /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/core/rootcling_stage1/src/rootcling_stage1 -v4 -f G__Core.cxx -cxxmodule -s /scratch/greenc/test-products/root/v6_27_99f1/build/Linux64bit+3.10-2.17-c14-p3913-debug/lib/libCore.so -excludePath /s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377607040:189,test,test-products,189,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377607040,10,['test'],['test-products']
Testability,"@vgvassilev @Axel-Naumann This tutorial is broken on master due to:. ```; python: path/to/root/interpreter/llvm/src/lib/IR/Value.cpp:800: void llvm::ValueHandleBase::RemoveFromUseList(): Assertion `getValPtr() && getValPtr()->HasValueHandle && ""Pointer doesn't have a use list!""' failed.; ```. Same than we see in the conda channel on mattermost, I guess. Sry, I was confused. It was the pyroot channel. I'll ask again there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5175#issuecomment-601660312:187,Assert,Assertion,187,https://root.cern,https://github.com/root-project/root/pull/5175#issuecomment-601660312,1,['Assert'],['Assertion']
Testability,"@vgvassilev @Axel-Naumann any clue why this is failing this test? The only outside visible change should be that you now no longer can `do getASTConsumer()` and then cast it to the custom consumer type, but I don't see any point where we do this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/988#issuecomment-329248364:60,test,test,60,https://root.cern,https://github.com/root-project/root/pull/988#issuecomment-329248364,1,['test'],['test']
Testability,@vgvassilev @Axel-Naumann what do we do with this one ? ; Can the failing tests be fixed ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1306#issuecomment-458597174:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/1306#issuecomment-458597174,1,['test'],['tests']
Testability,"@vgvassilev @davidlange6 , this does not merge any more which causes CXXMODULE CMSSW IBs to fail ( as we use it to patch module IBs) https://cmssdt.cern.ch/SDT/jenkins-artifacts/build-any-ib/CMSSW_11_3_CXXMODULE_X_2021-02-22-1100/slc7_amd64_gcc900/105574/lcg/root/6.23.01-7767a664fb8cb9cd43d25b3eb5127fea/log",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-783458823:305,log,log,305,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-783458823,1,['log'],['log']
Testability,"@vgvassilev @martinmine How to see the list of failing test? When I click on details, I am brought to the pipeline page and then clicking ""pipeline step"" shows only successes (see https://phsft-jenkins.cern.ch/job/root-pullrequests-handler/51/flowGraphTable/) ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/542#issuecomment-300001868:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/542#issuecomment-300001868,1,['test'],['test']
Testability,"@vgvassilev Can you explain me, why the test cases failed? https://github.com/root-project/root/pull/10593#issuecomment-1128002967. Is it, because the code becomes slower (regression) or is there a bug, which I don't see?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1129005566:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1129005566,1,['test'],['test']
Testability,@vgvassilev Do we actually have any tests that checks that things still work if the files used to produce the pcm (or the pch) are gone and/or not longer accessible? (i.e. the test framework would have to explicitly hides/move/removes some files to achieve this).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1138843195:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1138843195,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev FYI I'm pretty busy over the next couple of weeks, if you can test before I fix the coding conventions, please do. It'd be best to fix major issues first. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507#issuecomment-297338362:74,test,test,74,https://root.cern,https://github.com/root-project/root/pull/507#issuecomment-297338362,1,['test'],['test']
Testability,@vgvassilev FYI:; ```; cd /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/core && /scratch/greenc/test-products/cmake/v3_23_2/Linux64bit+3.10-2.17/bin/cmake -E env LD_LIBRARY_PATH=/scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/lib:/products/xrootd/v5_4_3a/Linux64bit+3.10-2.17-c14-p3912-debug/lib:/scratch/greenc/test-products/tbb/v2021_5_0b/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib64:/scratch/greenc/test-products/gcc/v12_1_0/Linux64bit+3.10-2.17/lib:/products/pythia/v6_4_28u/Linux64bit+3.10-2.17-c14-debug/lib:/scratch/greenc/test-products/postgresql/v14_4/Linux64bit+3.10-2.17-p3912/lib:/products/openblas/v0_3_20c/Linux64bit+3.10-2.17-c14/lib:/scratch/greenc/test-products/python/v3_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/sqlite/v3_38_05_00/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/libxml2/v2_9_12/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/gsl/v2_7/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib:/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/lib/x86_64-unknown-linux-gnu:/scratch/greenc/test-products/fftw/v3_3_10/Linux64bit+3.10-2.17/lib: /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/lib/libCore.so -excludePath /scratch/greenc/test-products/root/v6_26_04b/source/root-6.26.04 -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/ginclude -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/externals -excludePath /scratch/greenc/test-products/root/v6_26_04b/build/Linux64bit+3.10-2.17-c14-p3912-debug/builtins -writeEmptyRootPCM -m _Built,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1192995322:42,test,test-products,42,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1192995322,10,['test'],['test-products']
Testability,"@vgvassilev I already have a patch, it's currently running on my clang CI instance. I'll open a review once it passes the tests. See: https://teemperor.de/ccir/git:FixVFSinCI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/910#issuecomment-326302267:122,test,tests,122,https://root.cern,https://github.com/root-project/root/pull/910#issuecomment-326302267,1,['test'],['tests']
Testability,"@vgvassilev I am looking into the commit itself (which by the way had already been commit and reverted once). **However** my questions is really about **jenkins**. I.e. this failure is seen in the incremental builds (https://phsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/466/testReport/projectroot/test/test_stresshistogram/) ... and so my questions (to try to improve the process/infrastructure) is why it was not seen in the build made from the PR (i.e. is stressHistogram not run? did the build not finish? or something else?). thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/526#issuecomment-299033419:330,test,testReport,330,https://root.cern,https://github.com/root-project/root/pull/526#issuecomment-299033419,2,['test'],"['test', 'testReport']"
Testability,@vgvassilev I had sent you instruction to access ppc64le machine. Were you able connect and test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979434914:92,test,test,92,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979434914,1,['test'],['test']
Testability,"@vgvassilev I have no idea how to test it. The CUDA mode is the only situation, which I found, where the function is called with an unresolved path. Does ROOT support unit tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1127905170:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1127905170,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction.; * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager).; * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1717257305:108,test,test,108,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717257305,3,['test'],"['test', 'testing', 'tests']"
Testability,"@vgvassilev I have uploaded a [snapshot image](https://hub.docker.com/layers/greenc/root_10861/build-snapshot/images/sha256-cde089095090f5cd9785cfcc2f2df341b24437b0868d7014b51efb8d3d7ab5ca?context=repo). The shell history will show exactly what was done, and the relevant build log is `/scratch/build-root-v6-28-00-patches-c14-p3913-debug`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1402618462:278,log,log,278,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1402618462,1,['log'],['log']
Testability,@vgvassilev I put the output of a first run /afs/cern.ch/work/p/pseyfert/public/iwyu.log It's quite big (and i didn't even build all components) and also involves parts I don't dare to touch (llvm). I'll clean up my changes to the cmake files and factorise the suggestions a bit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/123#issuecomment-302633596:85,log,log,85,https://root.cern,https://github.com/root-project/root/pull/123#issuecomment-302633596,1,['log'],['log']
Testability,"@vgvassilev I see ` In case an identifier is defined in both (eg TMVA::Event and X::Event), the GMI will take priority and load the TMVA module without later allowing the system to look for other candidates.`. Could you explicit in the commit log why an unrelated fully qualified name (`TMVA::Event`) takes precedence over another fully qualified name (`X::Event`) and why this is usually not an issue (i.e. Is there any other cases (other than module vs rootmap) where this could lead to problems?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1014508200:243,log,log,243,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1014508200,1,['log'],['log']
Testability,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11137#issuecomment-1208594790:14,test,tested,14,https://root.cern,https://github.com/root-project/root/pull/11137#issuecomment-1208594790,1,['test'],['tested']
Testability,@vgvassilev I will add test case to roottest!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1174#issuecomment-335806731:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/1174#issuecomment-335806731,1,['test'],['test']
Testability,"@vgvassilev I'd prefer to first get a status update from say CMS and LHCb: they need to have a green build *now*, such that we can confirm that this reversed patch doesn't break them. I *think* this one was (also) visible in LHCb. Could you contact Marco and DavidA to assert that they get a green build with the master?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/682#issuecomment-311758393:269,assert,assert,269,https://root.cern,https://github.com/root-project/root/pull/682#issuecomment-311758393,1,['assert'],['assert']
Testability,"@vgvassilev It seems that the changes in this PR provide the same performance as the current master (after the two hotfixes), while supporting leaving the `k*` constants in `TError.h` as `constexpr` so without producing a symbol in `libCore.so`. For `TString::kNPOS` I guess we want to leave the commit there since it was anyway a real fix to a bug. Another problem which is still present in both the current master and even after this PR is that the number of file operations is still quite high, i.e.; ```; 532 newfstatat(3, ; 29 newfstatat(4, ; 10141 newfstatat(AT_FDCWD, ; 546 openat(AT_FDCWD, ; 843 readlink(; ```. which are exactly the same whether current master or this patch. Consider that many of those `newfstatat` calls are spurious and I'm trying to understand where they come from. Take the following as an example; ```; newfstatat(AT_FDCWD, ""/home/vpadulan/programs/rootproject/rootbuild/reduce-symbol-search-release/gui/sessionviewer/input_line_11"", 0x7ffde442f050, 0) = -1 ENOENT (No such file or directory); ```. Note the presence of the `rootbuild` directory, which is the path where I store the ROOT build artifacts, even though I am using ROOT from the install directory. I thought it was something in the machinery of `(T)cling` but so far my tests haven't brought me to any conclusion. Another suspicion is that the path to the build directory is hardcoded somehow in the `.pcm` or in the AST and doesn't get converted to the install directory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1867410890:1265,test,tests,1265,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1867410890,1,['test'],['tests']
Testability,@vgvassilev LGTM so I am testing it and we merge it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5903#issuecomment-666224921:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/5903#issuecomment-666224921,1,['test'],['testing']
Testability,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430326540:421,log,log,421,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540,1,['log'],['log']
Testability,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-471684777:265,test,test,265,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-471684777,1,['test'],['test']
Testability,"@vgvassilev No, we still get the same errors. New build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30647/build.log). > For local testing, you can use /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/8312/30647/install.sh to create a dev area with all the needed externals and cmssw changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1432060211:56,log,log,56,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1432060211,3,"['log', 'test']","['log', 'testing']"
Testability,@vgvassilev Of course - the test is older than the patch :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/940#issuecomment-327080833:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/940#issuecomment-327080833,1,['test'],['test']
Testability,"@vgvassilev Seems to be, new errors in roottest appears after this PR?; [Like this one](https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6173/testReport/projectroot.roottest.root.meta.rootcling-modules/module-dep-order/roottest_root_meta_rootcling_modules_module_dep_order_cxxmodules_implicit_build_error/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5613#issuecomment-631384298:170,test,testReport,170,https://root.cern,https://github.com/root-project/root/pull/5613#issuecomment-631384298,1,['test'],['testReport']
Testability,"@vgvassilev Sorry, I thought it was fixed as the build passed so I didn't dive into the console logs of it. Anyhow, as far as I understand, the only issue it complains about is that `root/math/mathcore/test/stress/TestHelper.cxx:33:20` is never reached, which I find unreasonable. Do you think this could be a false flag, or something I should look more into?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/594#issuecomment-304904199:96,log,logs,96,https://root.cern,https://github.com/root-project/root/pull/594#issuecomment-304904199,3,"['Test', 'log', 'test']","['TestHelper', 'logs', 'test']"
Testability,@vgvassilev Test is added. Please help resume github pipeline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1268422584:12,Test,Test,12,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1268422584,1,['Test'],['Test']
Testability,@vgvassilev Thanks for investigation! I am testing if it is fixing a problem for zlib 1.2.11!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1189#issuecomment-336869142:43,test,testing,43,https://root.cern,https://github.com/root-project/root/pull/1189#issuecomment-336869142,1,['test'],['testing']
Testability,"@vgvassilev Thanks for review.; To split it on logical PRs will create a mess - there are ~10-20 missing dependencies, wrong includes, wrong sub-class usages. It will be a lot of work. I really appreciate if we can merge it as is and probably face few minor issues in next days. It will be much more productive",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5181#issuecomment-603731782:47,log,logical,47,https://root.cern,https://github.com/root-project/root/pull/5181#issuecomment-603731782,1,['log'],['logical']
Testability,@vgvassilev The fix for the CUDA support is ready and all CUDA tests passes. You can find it here: https://github.com/SimeonEhrig/root/commit/b683be20d3e8f08ad6bb8f484bdb2a978a8450cc. It is on the branch [fixCUDAllvm13](https://github.com/SimeonEhrig/root/tree/fixCUDAllvm13) in my root fork.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1196606010:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1196606010,1,['test'],['tests']
Testability,@vgvassilev The installation with LLVM Debug is there now; ```; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3debug/latest/x86_64-el9-gcc13-dbg/setup.sh; $ grep LLVM /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3debug/Sun/ROOT/HEAD/x86_64-el9-gcc13-dbg/logs/ROOT-HEAD-configure.log; -- Building LLVM in 'Debug' mode.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2016721218:260,log,logs,260,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2016721218,2,['log'],"['log', 'logs']"
Testability,@vgvassilev The test now passes on all platforms. Let me know what you think about the commit and if we can merge this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1895295017:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1895295017,1,['test'],['test']
Testability,@vgvassilev What as the purpose of test/CodeUnloading/RunAgainstClangTestSuite ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258#issuecomment-2293947052:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/16258#issuecomment-2293947052,1,['test'],['test']
Testability,"@vgvassilev as I wrote on Mattermost, this change was particularly written to address Jun's problem. `roottest-root-html-runMakeIndex` is a separate thing that needs addressing anyhow; it's only now visible because all the other failures are gone. FWIW I don't agree that the workarounds (hacks) introduced in https://github.com/root-project/root/pull/10910 are a good way to go, as shown by the many failing tests. The scope of the changes is too big and there are valid reasons to do something with `Decl`s currently being defined, as evidenced by the many failing tests. Adding more conditions will eventually only lead to internally inconsistent states...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514#issuecomment-1272983808:409,test,tests,409,https://root.cern,https://github.com/root-project/root/pull/11514#issuecomment-1272983808,2,['test'],['tests']
Testability,"@vgvassilev can you make that a PR / ready to review when it's passing the tests, please? And for our CI infra's occupancy and energy consumption / global warming it actually helps if you could just run roottest on your machine before submitting a PR, at least for non-trivial changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850#issuecomment-1170218382:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/10850#issuecomment-1170218382,1,['test'],['tests']
Testability,"@vgvassilev do we need this open, are there followups to the failing tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1896037872:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1896037872,1,['test'],['tests']
Testability,"@vgvassilev do you know why the roottest branch from https://github.com/root-project/roottest/pull/235 is not picked up here? Extract from the log:; ```; Checking out Revision 2a4cfad9b3bfb6d868786869689740f643166317 (origin/master); > git config core.sparsecheckout # timeout=10; > git checkout -f 2a4cfad9b3bfb6d868786869689740f643166317; > git branch -a -v --no-abbrev # timeout=10; > git branch -D master # timeout=10; > git checkout -b master 2a4cfad9b3bfb6d868786869689740f643166317; Commit message: ""Adding dependency for slavedict generation on masterdict""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2775#issuecomment-429016900:143,log,log,143,https://root.cern,https://github.com/root-project/root/pull/2775#issuecomment-429016900,1,['log'],['log']
Testability,@vgvassilev great idea. I think triggering the tests only if something in that dir changes is perfectly possible. Do you have some starting point which can be taken as example to build a GH workflow to run on the ROOT infra?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14972#issuecomment-1998002993:47,test,tests,47,https://root.cern,https://github.com/root-project/root/issues/14972#issuecomment-1998002993,1,['test'],['tests']
Testability,"@vgvassilev how did you address the comment https://github.com/root-project/root/pull/1787#pullrequestreview-106971834 by @pcanal:; > Please make sure that this does not hide a missing feature in GetFullyQualifiedType which is supposed to already have built-in the full qualification. I am collecting a set of tests (failures) of the clang version of `GetFullyQualifiedName`. Adding ""your cases"" to that list might be a way of addressing Philippe's comment. Do you have such test cases?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1787#issuecomment-383011266:310,test,tests,310,https://root.cern,https://github.com/root-project/root/pull/1787#issuecomment-383011266,2,['test'],"['test', 'tests']"
Testability,@vgvassilev nice job. The benchmark I have creating hundreds of histos relying on jitting takes w/o this patch 12s and 3s w/ it. For me the code good to be merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1211#issuecomment-338157762:26,benchmark,benchmark,26,https://root.cern,https://github.com/root-project/root/pull/1211#issuecomment-338157762,1,['benchmark'],['benchmark']
Testability,"@vgvassilev not sure what you expect here - gdb doesn't print `StringRef` etc, so maybe a 2 line patch that prints this before asserting would be more constructive?. I've lowered this to ""default priority"" because it likely affects only current libc++ - and that's a very rare environment. We cannot block 6.26/06 because of this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1195579174:127,assert,asserting,127,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1195579174,1,['assert'],['asserting']
Testability,"@vgvassilev on macOS the tests are *also* failing due to; ```; ld: unknown option: --disable-new-dtags; ```; You wrote that test; could you have a look, please, or let me know what you want me to do to fix this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1057731028:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1057731028,2,['test'],"['test', 'tests']"
Testability,"@vgvassilev so indeed, adding `-D__CUDACC__` to the rootcling invocations works as well, but that makes more changes and as I said, one has to tell users to add it in their scripts as well. Maybe @Axel-Naumann has an opinion on this?; Oh and I see that I would have to fix CTest & roottest as well...; ```; 85% tests passed, 267 tests failed out of 1779; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6143#issuecomment-671251069:311,test,tests,311,https://root.cern,https://github.com/root-project/root/pull/6143#issuecomment-671251069,2,['test'],['tests']
Testability,"@vgvassilev sure: `gtest-math-mathcore-test-CladDerivatorTests` crashes with an illegal instruction somewhere in the JITed code, while `gtest-hist-hist-test-TFormulaGradientTests` shows:; ```; 105: Running main() from /home/jhahnfel/ROOT/build/googletest-prefix/src/googletest/googletest/src/gtest_main.cc; 105: [==========] Running 7 tests from 1 test suite.; 105: [----------] Global test environment set-up.; 105: [----------] 7 tests from TFormulaGradientPar; 105: [ RUN ] TFormulaGradientPar.Sanity; 105: /home/jhahnfel/ROOT/src/hist/hist/test/TFormulaGradientTests.cxx:34: Failure; 105: Expected equality of these values:; 105: x[0] * std::cos(30); 105: Which is: 0.15425146; 105: result[0]; 105: Which is: 0; 105: [ FAILED ] TFormulaGradientPar.Sanity (134 ms); 105: [ RUN ] TFormulaGradientPar.ResultUpsize; 105: /home/jhahnfel/ROOT/src/hist/hist/test/TFormulaGradientTests.cxx:52: Failure; 105: Expected equality of these values:; 105: std::cos(30); 105: Which is: 0.15425146; 105: result[1]; 105: Which is: 0; 105: [ FAILED ] TFormulaGradientPar.ResultUpsize (6 ms); 105: [ RUN ] TFormulaGradientPar.ResultDownsize; 105: /home/jhahnfel/ROOT/src/hist/hist/test/TFormulaGradientTests.cxx:69: Failure; 105: Expected equality of these values:; 105: std::cos(60); 105: Which is: -0.95241296; 105: result[0]; 105: Which is: 0; 105: [ FAILED ] TFormulaGradientPar.ResultDownsize (6 ms); 105: [ RUN ] TFormulaGradientPar.GausCrossCheck; 105: [ OK ] TFormulaGradientPar.GausCrossCheck (6 ms); 105: [ RUN ] TFormulaGradientPar.BreitWignerCrossCheck; 105: [ OK ] TFormulaGradientPar.BreitWignerCrossCheck (6 ms); 105: [ RUN ] TFormulaGradientPar.BreitWignerCrossCheckAccuracyDemo; 105: [ OK ] TFormulaGradientPar.BreitWignerCrossCheckAccuracyDemo (0 ms); 105: [ RUN ] TFormulaGradientPar.GetGradFormula; 105: [ OK ] TFormulaGradientPar.GetGradFormula (1 ms); 105: [----------] 7 tests from TFormulaGradientPar (159 ms total); 105:; 105: [----------] Global test environment tear-down; 105: [==========]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-824624007:39,test,test-CladDerivatorTests,39,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-824624007,8,['test'],"['test', 'test-CladDerivatorTests', 'test-TFormulaGradientTests', 'tests']"
Testability,@vgvassilev testing now via https://github.com/cms-sw/root/pull/177,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1323907056:12,test,testing,12,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1323907056,1,['test'],['testing']
Testability,@vgvassilev thanks for the reminder. @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-814321474:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-814321474,1,['test'],['test']
Testability,@vgvassilev what do we do with this? It fixes a couple of issues in current master's cling-test even if not all of them. I'd prefer to see this in master before we merge the llvm upgrade to start from a state with less cling test failures...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1122801114:91,test,test,91,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1122801114,2,['test'],['test']
Testability,"@vgvassilev yes I have lists of tests from @pcanal, I will check numbers..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440949922:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440949922,1,['test'],['tests']
Testability,"@vgvassilev yes, and I recently implemented the same in Cling: df0905c499a541eaac3be63c0455a07946022983. @ellert any chance you can test a fix interactively before we commit? The above commit probably doesn't apply cleanly, I will prepare a backport for `v6-28-00-patches`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12293#issuecomment-1429256652:132,test,test,132,https://root.cern,https://github.com/root-project/root/issues/12293#issuecomment-1429256652,1,['test'],['test']
Testability,"@vgvassilev, here is the PR so solve the LLVM library conflicts when interfacing ROOT with Julia. I've limited the change to the interpreter package. I have 25 out of the 2140 tests that fail. It's likely to be due to my local environment. If it can easily be tested with the jenkins system, it will be faster that me trying to investigate the test failures. . Note. The parallel compilation is not working properly, independently of my changes: it fails many times and need to be restarted or build some package in single process mode. Is it a know problem ?. # This Pull request:. ## Changes or fixes:. Adds -Bsymbolic linker option for libCling.so in order get the symbols resolved internally; ; This is expected to solve conflicts when interfacing with other software using LLVM, like Julia. See https://github.com/JuliaHEP/ROOT.jl/issues/17#issuecomment-882719292. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717:176,test,tests,176,https://root.cern,https://github.com/root-project/root/pull/8717,4,['test'],"['test', 'tested', 'tests']"
Testability,@victoriaporter58 Can you resolve the conflict in tree/ntuple/v7/test/CMakeLists.txt ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13434#issuecomment-1673542952:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/13434#issuecomment-1673542952,1,['test'],['test']
Testability,"@wdconinc now loading this file produces:; ```; root [0] TGeoManager::Import(""HCAL_Chimney_Sector_Half_Plate.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: HCAL_Chimney_Sector_Half_Plate.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Warning in <TGDMLParse::GDMLReadFile>: Found 2 GDML entities missing explicit units, while the default units are currently ROOT units [cm, deg]. This can cause unexpected behaviour with respect to the GDML schema. To remove this warning, either use explicit units or call the static method TGeoManager::SetDefaultUnits(kG4Units) before importing the GDML file HCAL_Chimney_Sector_Half_Plate.gdml ; ...; ```; Let me know if OK with you or if you want to do further local tests with #11801",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1330758792:777,test,tests,777,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1330758792,1,['test'],['tests']
Testability,"@xkzl @dpiparo . MacOS 15 has two versions/branches (don't ask me why). 15.0 and 15.1. We have these two versions available on our build machines. I just built the master head version of ROOT on both of them and I have tested TBrowser with both the Cocoa Version ( option `-web=off`) and the web version (without the web off):. On both versions with both options, **all is fine** on our build machines (macphsft34 for 15.0 and macphsft35 for 15.1).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16428#issuecomment-2351582939:219,test,tested,219,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2351582939,1,['test'],['tested']
Testability,@xvallspl I wonder if a test can be adequate here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-390134531:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-390134531,1,['test'],['test']
Testability,@xvallspl It looks like my command to build with SIMD enabled above didn't work. Could you please test and report back?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-318397324:98,test,test,98,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-318397324,1,['test'],['test']
Testability,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3242#issuecomment-453584838:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/3242#issuecomment-453584838,2,['test'],"['test', 'tests']"
Testability,@yamaguchi1024 On the previous attempt what test/functionality failed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1726#issuecomment-372695338:44,test,test,44,https://root.cern,https://github.com/root-project/root/pull/1726#issuecomment-372695338,1,['test'],['test']
Testability,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:; ```; {; gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");; auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");; TTree *tree = nullptr; f->GetObject(""Events"", tree);; for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);; }; ```; Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-441271394:226,test,test,226,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-441271394,1,['test'],['test']
Testability,"@yashguptatech thanks for your contribution - @lmoneta will have a look. Could you please in the meantime update your commits? Feel free to use `commit --amend` in the future; `rebase -i` now to squash the commits, and please consider rephrasing the commit log such that it explains what the commit does. See e.g. [a random commit](https://github.com/root-project/root/commit/1c02f16b5530a4eb5e439907b3284b325ea700db) or most other commits in ROOT :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12633#issuecomment-1750228921:257,log,log,257,https://root.cern,https://github.com/root-project/root/pull/12633#issuecomment-1750228921,1,['log'],['log']
Testability,"@zzxuanyuan , sure. Before diving in the API upgrade, let's be sure the 3% is gone and start with the thread implementation of the parallel decompression and its tests. Upgrading your solid work will be then straightforward!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-330769112:162,test,tests,162,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-330769112,1,['test'],['tests']
Testability,"@zzxuanyuan - can you post the above info in a tabular format?. Also, can you repeat the tests using the file @pcanal posted in the other ticket?. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-137208038:89,test,tests,89,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-137208038,1,['test'],['tests']
Testability,"@zzxuanyuan 5. Note that for the test you made for #84, we had to apply a few fixes to the CMakeLists.txt to make it more general.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134#issuecomment-178017915:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/134#issuecomment-178017915,1,['test'],['test']
Testability,"@zzxuanyuan I ran a production test job for 18 different compression settings - zlib from level 1 to 9 and lzma from level 1 to 9, each time the same events. Size is the size of the output file in Byte. I ran through valgrind/callgrind and the cycles are the number of cycles spent in the R__zipMultipleAlgorithm function (and functions called from there). The spike in the lzma curve is something i haven't understood yet I want to crosscheck it running over a different set of events (possibly more, though then it gets annoying in space requirements of the output and in the time the tests take). Not included in the numbers in neither test/summary.txt nor the plot is the RAM usage of a production job (just running tcmalloc with heap profiling and reporting the peak usage. this comes probably with large overhead because i report the memory usage of the full process, not only the compression); (was a different job than the one from which the filesize and cycle counts come). zlib:x 237 MB; lzma:1 239 MB; lzma:2 241 MB; lzma:3 262 MB; lzma:4 276 MB; lzma:5 322 MB; lzma:6 322 MB; lzma:7 411 MB; lzma:8 600 MB; lzma:9 904 MB. please also look at [this file](https://github.com/pseyfert/root-compression/blob/master/test/summary.txt) for the analyst root file where i not only report numbers for writing, but also for reading (though it seems the last column seems buggy).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-166231386:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-166231386,4,['test'],"['test', 'tests']"
Testability,A [related PR](https://github.com/root-project/roottest/pull/74) in roottest adds a test for this case.; The fix will be backported to v6.10.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/919:84,test,test,84,https://root.cern,https://github.com/root-project/root/pull/919,1,['test'],['test']
Testability,A `http://root.cern.ch/files/test.txt` is still needed (see https://github.com/root-project/root/blob/master/tree/dataframe/test/datasource_csv.cxx#L16) @eguiraud ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9226#issuecomment-958851123:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/9226#issuecomment-958851123,2,['test'],['test']
Testability,A bunch of improvements to distributed module:; 1. Add all sources to the `py_compile` command in cmake; 2. Use postponed evaluation for type hints and avoid implicit import ROOT; 3. Test that `import DistRDF` has no side-effects: no implicit importing of ROOT and no implicit change of environment variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11241:183,Test,Test,183,https://root.cern,https://github.com/root-project/root/pull/11241,1,['Test'],['Test']
Testability,A few failing tests so far:; ```; 2:pyunittests-distrdf-unit-test-friendinfo; 3:pyunittests-distrdf-unit-test-headnode; 8:pyunittests-distrdf-unit-test-ranges; 10:pyunittests-distrdf-unit-backend-test-dist; 11:pyunittests-distrdf-unit-backend-test-graph-caching; 1192:tutorial-dataframe-df007_snapshot-py; 1385:tutorial-tmva-TMVA_CNN_Classification-py; 1386:tutorial-tmva-TMVA_Higgs_Classification-py; 1670:roottest-python-distrdf-backends-test_all; ```; @lmoneta @vepadulano,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15393#issuecomment-2088849267:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/15393#issuecomment-2088849267,6,['test'],"['test-dist', 'test-friendinfo', 'test-graph-caching', 'test-headnode', 'test-ranges', 'tests']"
Testability,"A few fixes concerning the AsNumpy functionality, related to the iteration of a `vector<string>` and the use of stl strings as keys of Python dictionaries. This should fix the AsNumpy test failure here:; https://github.com/root-project/root/pull/5036#issuecomment-588256573",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5048:184,test,test,184,https://root.cern,https://github.com/root-project/root/pull/5048,1,['test'],['test']
Testability,"A few more changes were needed, also touching a couple of tests in roottest, so I opened another PR to follow up this one. Let's see what the CI has to say over there :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15476#issuecomment-2136997328:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/15476#issuecomment-2136997328,1,['test'],['tests']
Testability,"A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed; 2. Where is the break-even for the dense representation vs. the sparse representation; 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes; - Fill levels 0%, 10%, 50%, 90%, 100%; - Using sparse, dense, modified dense representation; - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12842:778,test,tests,778,https://root.cern,https://github.com/root-project/root/issues/12842,1,['test'],['tests']
Testability,"A full stack trace with 256 threads is; [rootnetlockdebug.txt](https://github.com/root-project/root/files/9834797/rootnetlockdebug.txt); attached; (this run was also done with forcing SetEnablePrefetching(true) as suggested by @pcanal elsewhere for testing but this didn't affect performance much, so probably the lock contention is orthogonal)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1286318016:249,test,testing,249,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1286318016,1,['test'],['testing']
Testability,"A general comment, if possible it would be better if we could avoid the commits ""Merge branch 'master' into install-test"" if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-255673652:116,test,test,116,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-255673652,1,['test'],['test']
Testability,"A google test has been added in `$ROOTSYS/core/foundation/test`. `roottest_dataframe_functiontraits` has been broken by moving the meta utils away from TDataFrame, and is removed by PR n.48 in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/636#issuecomment-307891299:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/636#issuecomment-307891299,2,['test'],['test']
Testability,A google test is on the way,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/636#issuecomment-307853788:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/636#issuecomment-307853788,1,['test'],['test']
Testability,"A lot of code but mainly due to the tests and pythonizations. Main place to focus on is `TMVA/RTensor.hxx`. In the following examples of the implemented features:. C++ example:. ```cpp; using namespace TMVA::Experimental;; RTensor<float> x({2, 3}); // container with shape (2, 3); x(0,0) = 1; // set element (0,0) to 1; cout << x(0, 0) << endl; // read element (0,0); // Returns:; // 1; cout << x << endl;; // Returns:; // { { 1, 0, 0 } { 0, 0, 0 } }; ```. Python example:. ```python; import ROOT; x = ROOT.TMVA.Experimental.RTensor(""float"")((2, 3)) # container with shape (2, 3); x[0,0] = 1 # set element (0,0); print(x[0,0]) # read element (0,0); # Returns:; # 1; print(x); # Returns:; # { { 1, 0, 0 } { 0, 0, 0 } }; ```. Memory adoption capability:. ```cpp; using namespace TMVA::Experimental;; float data[6] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3}); // adopt memory with given shape; cout << x << endl;; // Returns:; // { { 1, 2, 3 } { 4, 5, 6 } }; ```. Column-major and row-major memory ordering:. ```cpp; using namespace TMVA::Experimental;; float data[6] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3}, MemoryOrder::RowMajor);; cout << x << endl;; // Returns:; // { { 1, 2, 3 } { 4, 5, 6 } }; RTensor<float> x(data, {2, 3}, MemoryOrder::ColumnMajor);; cout << x << endl;; // Returns:; // { { 1, 3, 5 } { 2, 4, 6 } }; ```. RTensor to numpy conversion:. ```python; import ROOT; data = ROOT.std.vector(""float"")((1, 2, 3, 4, 5, 6)); x = ROOT.TMVA.Experimental.RTensor(""float"")(data.data(), (2, 3)); print(x); # Returns:; # { { 1, 2, 3 } { 4, 5, 6 } }. import numpy; y = numpy.asarray(x); print(y); # Returns:; # [[1, 2, 3],; # [4, 5, 6]]; ```. Missing features:. - [ ] STL iterator interface; - [ ] `ExpandDim` and `Squeeze` methods (shape manipulation); - [ ] `Apply` method (element manipulation, similar to STL iterator); - [ ] `ROOT.AsTensor` method (`numpy.array` to `RTensor` conversion)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2593:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/2593,1,['test'],['tests']
Testability,"A minor detail was missing from the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; ```; Result excerpt:. > Info in TCanvas::Print: eps file dataset/plots/TrainingHistory.eps has been created; > Info in TCanvas::Print: file dataset/plots/TrainingHistory.png has been created; . Previously read:. > Info in TCanvas::Print: eps file dataset/plots/.eps has been created; > Info in TCanvas::Print: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4934:250,Test,Test,250,https://root.cern,https://github.com/root-project/root/pull/4934,1,['Test'],['Test']
Testability,"A minor detail was missing the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; ```. Result excerpt:. > Info in <TCanvas::Print>: eps file dataset/plots/TrainingHistory.eps has been created; > Info in <TCanvas::Print>: file dataset/plots/TrainingHistory.png has been created. Previously read:; > Info in <TCanvas::Print>: eps file dataset/plots/.eps has been created; > Info in <TCanvas::Print>: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4932:245,Test,Test,245,https://root.cern,https://github.com/root-project/root/pull/4932,1,['Test'],['Test']
Testability,"A new class DFDescription is introduced.; It has 2 member strings, corresponding to the brief and the full description.; It allows more interactive output of these strings. RInterface::Describe now returns a DFDescription object.; As brief description is the output from RInterface::DescribeDataset.; As full description is the remaining code from RInterface::Describe.; Moreover, RInterface::DescribeDataset is now a private method. RDFDescription has the following methods:; * AsString(bool) -> returning brief/full description as a string; * Print(bool) -> printing the content of AsString(bool); * overloaded<< -> returns ostream corresponding to AsString(shortFormat=false); * printValue -> returns string corresponding to AsString(shortFomat=false); * __repr__ pythonization -> assigning __repr__ to AsString(shortFormat=false). Tests and Tutorials were adapted correspondingly. This PR fixes #8893",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9597:835,Test,Tests,835,https://root.cern,https://github.com/root-project/root/pull/9597,2,['Test'],['Tests']
Testability,"A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12036:339,test,test,339,https://root.cern,https://github.com/root-project/root/pull/12036,3,['test'],"['test', 'tested']"
Testability,"A number of test failures have to be fixed in the experimental PyROOT builds:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/8/. This PR temporarily disables those failing tests for the experimental PyROOT builds, and they will be re-enabled progressively as they are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3255:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/3255,2,['test'],"['test', 'tests']"
Testability,"A number of test failures have to be fixed in the experimental PyROOT builds:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/9/. This PR temporarily flags those tests as ""will fail"" for the experimental PyROOT builds, and they will be restored progressively as they are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3260:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/3260,2,['test'],"['test', 'tests']"
Testability,"A previous commit dropped the use of PyROOT_PyUnicode_AsStringChecked, which in Py2 corresponds to PyString_AsString, which accepts unicode objects. This PR should fix this test failure seen in the nightlies:; http://cdash.cern.ch/testSummary.php?project=1&name=roottest-python-JupyROOT-simpleCppMagic_notebook&date=2019-09-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4372:173,test,test,173,https://root.cern,https://github.com/root-project/root/pull/4372,2,['test'],"['test', 'testSummary']"
Testability,"A proof that the problem exists before this PR is:; ```; cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Dbuiltin_clang=""On"" -Dbuiltin_gsl=""On"" -Dbuiltin_llvm=""On"" -Dpython=""On"" -Droottest=""On"" -Druntime_cxxmodules=""On"" -Dx11=""Off"" /home/performance-test/src_master ; -- ROOT default compression algorithm: zlib; -- Found GCC. Major version 7, minor version 4; -- Found a 64bit system; -- Found GNU compiler collection; -- ROOT Platform: linux; -- ROOT Architecture: linuxx8664gcc; -- Build Type: Debug; -- Compiler Flags: -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; -- Looking for ZLib; -- Looking for Freetype; -- Looking for LZMA; -- Found LZMA includes at /usr/include; -- Found LZMA library at /usr/lib/x86_64-linux-gnu/liblzma.so; -- Building AfterImage library included in ROOT itself; -- Looking for GSL; -- Downloading and building GSL version 2.1; -- Looking for python; -- Enabled support for: builtin_afterimage builtin_clang builtin_ftgl builtin_glew builtin_gsl builtin_llvm builtin_lz4 builtin_openssl builtin_pcre builtin_tbb builtin_vdt builtin_xxhash clad exceptions explicitlink gdml http imt mathmore mlp python roofit runtime_cxxmodules shared ssl tmva spectrum vdt; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- SysLibs: rt;dl;tinfo;-lpthread;/usr/lib/x86_64-linux-gnu/libz.so; -- Targeting X86; -- Clang version: 5.0.0; -- Cling version (from VERSION file): ROOT_0.6~dev; -- Cling will look for C++ headers in '/usr/include/c++/7:/usr/include/x86_64-linux-gnu/c++/7:/usr/include/c++/7/backward' at runtime.; -- And then fallback to: 'x86_64-linux-gnu-g++-7'; Recording the git rev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502686211:297,test,test,297,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502686211,1,['test'],['test']
Testability,"A recent refactoring in RDF introduced an incompatibility with gcc; 7.5.0: clang and that gcc version disagree on the address of the; std::map argument passed to InitColumnReaders.; RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct; address, but InitColumnReaders<...>, the _compiled_ callee, sees a; different address. For reasons known only to gcc 7.5.0, ~~moving the first function; argument to the last position~~ reducing the number of function; arguments (by aggregating some of them in a helper struct) resolves; the ABI incompatibility.; Valgrind could see an access to invalid memory before, and it does; not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6231:753,test,testReport,753,https://root.cern,https://github.com/root-project/root/pull/6231,2,['test'],"['test', 'testReport']"
Testability,A roottest branch has been created to address the failing test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7843#issuecomment-818389980:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/7843#issuecomment-818389980,1,['test'],['test']
Testability,"A similar warning is also provoked in the simpler case below, so it's not only related to STL stuff:. ```cpp; #include ""TFile.h"". class TestBase {};. class Test : public TestBase {};. void testio() {. Test t;. TFile *fout = TFile::Open(""test.root"", ""RECREATE"");. fout->WriteObjectAny(&t, TClass::GetClass<Test>(), ""t"");; }; ```. ```; root -l testio.cpp ; root [0] ; Processing testio.cpp...; Warning in <TStreamerInfo::Build>: Test: base class TestBase has no streamer or dictionary it will not be saved; root [1] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371#issuecomment-997463726:136,Test,TestBase,136,https://root.cern,https://github.com/root-project/root/issues/9371#issuecomment-997463726,11,"['Test', 'test']","['Test', 'TestBase', 'test', 'testio']"
Testability,"A steady memory increase when iteratively calling RooAbsPdf::fitTo was reported in the forum:; https://root-forum.cern.ch/t/roofit-memory-increase-per-fitto-iteration/44726. It can be reproduced with this C++ code:. ```C++; #include ""RooFitResult.h""; #include ""RooDataSet.h""; #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooPlot.h""; #include ""RooMsgService.h"". #include ""TRandom3.h""; #include ""TSystem.h"". void test() {. using namespace std;. RooRealVar x(""x"",""x"",-10,10);; RooDataSet d(""d"",""d"",RooArgSet(x));; RooRealVar s(""s"",""s"",1,1,10);; RooRealVar m(""m"",""m"",0,-10,10);; RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);; RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){; x.setVal(gRandom->Gaus(0,1));; d.add(x);; }. RooMsgService::instance().getStream(1).removeTopic(RooFit::Minimization);. ProcInfo_t pinfo;; int startMemResident;; int endMemResident;; int niters=1000000;; RooArgSet input=RooArgSet(x);; for (Int_t i=0; i<niters; i++) {; std::unique_ptr<RooFitResult> roo_result{; g.fitTo(d,RooFit::PrintLevel(-1),RooFit::Save(),; RooFit::Minos(true),RooFit::BatchMode(true),RooFit::Save()); };; x.setVal(0);; g.getVal(input);. gSystem->GetProcInfo(&pinfo);; if(i % 100 == 0) {; std::cout << i << "" memory usage "" << pinfo.fMemResident; << "" "" << pinfo.fMemVirtual << std::endl;; }; if (i==0); startMemResident=pinfo.fMemResident;; if (i==(niters-1)); endMemResident=pinfo.fMemResident;; }. int deltaMem=endMemResident-startMemResident;; double avgMem=(double)deltaMem/niters;; cout << endl << ""Memory increase = "" << deltaMem << endl;; cout << ""Avg increase per iteration = "" << avgMem << endl;; }; ```. The increase can be completely eliminated by not using the memory pool for RooDataSet. It is remarkable that the memory pool itself doesn't seem to be the problem. In fact, one can replace `RooDataSet::operator new` and `RooDataSet::operator delete` such that the memory pool is still active, but we don't use the addresses it gives us and pretend to deallocate immediately a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8323:427,test,test,427,https://root.cern,https://github.com/root-project/root/issues/8323,1,['test'],['test']
Testability,"A stripped down version of the header that segfaults:; ```; // test.h; #include ""LoKi/Particles.h"". using EQUALTO = LoKi::EqualToValue<const LHCb::Particle*>;; const auto TRTYPE = LoKi::Particles::TrackType{};. // Remove ANY of the lines below and the segfault disappears.; const auto ISDOWN = EQUALTO{TRTYPE, LHCb::Track::Types::Downstream};; const auto ISLONG = EQUALTO{TRTYPE, LHCb::Track::Types::Long};; const auto MUONBDT_CATBOOST = LoKi::Particles::MuonMVA2{};; const auto ISMUONPID = LoKi::Particles::IsMuon{};; const auto ISMUONLOOSE = LoKi::Particles::IsMuonLoose{};; const auto ISMUONTIGHT = LoKi::Particles::IsMuonTight{};; const auto ISUP = EQUALTO{TRTYPE, LHCb::Track::Types::Upstream};; const auto KEY = LoKi::Particles::Key{};; const auto M = LoKi::Particles::Mass{};; const auto LV01 = LoKi::Particles::DecayAngle{1};; const auto LV02 = LoKi::Particles::DecayAngle{2};; const auto LV03 = LoKi::Particles::DecayAngle{3};; const auto LV04 = LoKi::Particles::DecayAngle{4};; const auto M0 = LoKi::Particles::Mass{};; const auto M1 = LoKi::Particles::InvariantMass{1};; const auto M12 = LoKi::Particles::InvariantMass{1, 2};; const auto M13 = LoKi::Particles::InvariantMass{1, 3};; const auto M14 = LoKi::Particles::InvariantMass{1, 4};; const auto M2 = LoKi::Particles::InvariantMass{2};; const auto M23 = LoKi::Particles::InvariantMass{2, 3};; const auto M24 = LoKi::Particles::InvariantMass{2, 4};; const auto M34 = LoKi::Particles::InvariantMass{3, 4};; const auto MM = LoKi::Particles::MeasuredMass{};; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2115300347:63,test,test,63,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2115300347,1,['test'],['test']
Testability,"A surprisingly related problem appeared sporadically in Jenkins CI builds after the patch to avoid re-jitting distributed RDataFrame tasks. See for example https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186294/testReport/projectroot.roottest.python.distrdf/dask/roottest_python_distrdf_dask_test_all/ . Here is a copy-paste of the failure for when the CI log will be deleted. ```python; **=================================== FAILURES ===================================; _______________ TestDefinePerSample.test_definepersample_simple ________________. self = <check_definepersample.TestDefinePerSample object at 0x139017700>; connection = <Client: 'tcp://127.0.0.1:58532' processes=2 threads=2, memory=4.00 GiB>. def test_definepersample_simple(self, connection):; """"""; Test DefinePerSample operation on three samples using a predefined; string of operations.; """"""; ; df = Dask.RDataFrame(self.maintreename, self.filenames, daskclient=connection); ; # Associate a number to each sample; definepersample_code = """"""; if(rdfsampleinfo_.Contains(\""{}\"")) return 1;; else if (rdfsampleinfo_.Contains(\""{}\"")) return 2;; else if (rdfsampleinfo_.Contains(\""{}\"")) return 3;; else return 0;; """""".format(*self.samples); ; df1 = df.DefinePerSample(""sampleid"", definepersample_code); ; # Filter by the sample number. Each filtered dataframe should contain; # 10 entries, equal to the number of entries per sample; samplescounts = [df1.Filter(""sampleid == {}"".format(id)).Count() for id in [1, 2, 3]]; ; for count in samplescounts:; > assert count.GetValue() == 10; E AssertionError. ../../../../../roottest/python/distrdf/dask/check_definepersample.py:62: AssertionError; ---------------------------- Captured stderr setup -----------------------------; RDataFrame::Run: event loop was interrupted; 2023-09-30 20:12:08,054 - distributed.worker - WARNING - Compute Failed; Key: dask_mapper-2d1d1d8c-3a72-43e4-9753-d94b58f79b62; Function: execute_task; args: ((<function DaskBackend.dask",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12043#issuecomment-1744864978:236,test,testReport,236,https://root.cern,https://github.com/root-project/root/issues/12043#issuecomment-1744864978,5,"['Test', 'log', 'test']","['Test', 'TestDefinePerSample', 'log', 'testReport']"
Testability,"A test is still missing, I'll add it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3683:2,test,test,2,https://root.cern,https://github.com/root-project/root/pull/3683,1,['test'],['test']
Testability,A test known to be problematic hit us. I restarted the build since I believe it's unrelated to the nice changes proposed in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16243#issuecomment-2290778006:2,test,test,2,https://root.cern,https://github.com/root-project/root/pull/16243#issuecomment-2290778006,1,['test'],['test']
Testability,A unit test based to check that this is done correctly was also; implemented. Closes #10473.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10495:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/10495,1,['test'],['test']
Testability,A/DNN/GeneralLayer.h:489:31: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:33:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:37:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:41:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:73:16: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:132:48: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:33:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:37:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] ; - ../root/tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx:41:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare] . And 14 more. ### Failing tests:; - [projectroot.tmva.tmva.test.DNN.TMVA_DNN_Minimization_Cpu](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21146/testReport/projectroot.tmva.tmva.test/DNN/TMVA_DNN_Minimization_Cpu/); - [projectroot.tmva.tmva.test.DNN.CNN.TMVA_DNN_CNN_rotWeights](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21146/testReport/projectroot.tmva.tmva.test.DNN/CNN/TMVA_DNN_CNN_rotWeights/); - [projectroot.tmva.tmva.test.DNN.CNN.TMVA_DNN_CNN_rotWeights_CPU](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21146/testReport/projectroot.tmva.tmva.test.DNN/CNN/TMVA_DNN_CNN_rotWeights_CPU/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1826#issuecomment-379303659:1672,test,tests,1672,https://root.cern,https://github.com/root-project/root/pull/1826#issuecomment-379303659,10,['test'],"['test', 'testReport', 'tests']"
Testability,A/RFunction.hxx:82:68: warning: unused parameter ‘epsilon’ [-Wunused-parameter] ; - [2023-04-26T17:20:57.747Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:82:84: warning: unused parameter ‘stashType’ [-Wunused-parameter] ; - [2023-04-26T17:20:57.747Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:82:114: warning: unused parameter ‘nameX’ [-Wunused-parameter] ; - [2023-04-26T17:20:57.747Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:83:56: warning: unused parameter ‘nameScale’ [-Wunused-parameter] ; - [2023-04-26T17:20:57.747Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:83:86: warning: unused parameter ‘nameB’ [-Wunused-parameter] ; - [2023-04-26T17:20:57.747Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:83:112: warning: unused parameter ‘nameY’ [-Wunused-parameter] ; - [2023-04-26T17:20:58.541Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:82:56: warning: unused parameter ‘axis’ [-Wunused-parameter] ; - [2023-04-26T17:20:58.541Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:82:68: warning: unused parameter ‘epsilon’ [-Wunused-parameter] ; - [2023-04-26T17:20:58.541Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/RFunction.hxx:82:84: warning: unused parameter ‘stashType’ [-Wunused-parameter] . And 11 more. ### Failing tests:; - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_pyz_sofie_gnn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173342/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_pyz_sofie_gnn/); - [projectroot.test.test_stressgraphics_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173342/testReport/projectroot/test/test_stressgraphics_interpreted/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208#issuecomment-1523819331:2063,test,tests,2063,https://root.cern,https://github.com/root-project/root/pull/11208#issuecomment-1523819331,7,['test'],"['test', 'testReport', 'tests']"
Testability,"ABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:2301; #4 0x00007f2a62a79d6b in TUnixSystem::DispatchSignals (this=0x1225750, sig=kSigSegmentationViolation) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:3539; #5 0x00007f2a62a721e9 in SigHandler (sig=kSigSegmentationViolation) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:395; #6 0x00007f2a62a79cb9 in sighandler (sig=11) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/core/unix/src/TUnixSystem.cxx:3516; #7 <signal handler called>; #8 0x00007f2a622f1846 in TMVA::DecisionTreeNode::GetSeparationGain (this=0x12cc2a0) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT-6.06.02-build/include/TMVA/DecisionTreeNode.h:268; #9 0x00007f2a622ef5d8 in TMVA::DecisionTreeNode::Print (this=0x12cc2a0, os=...) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/tmva/tmva/src/DecisionTreeNode.cxx:217; #10 0x00007f2a62116d89 in TMVA::operator<< (os=..., node=0x12cc2a0) at /var/build/jenkins/workspace/lcg_release/BUILDTYPE/Debug/COMPILER/gcc49/LABEL/slc6-physical/build/projects/ROOT-6.06.02/src/ROOT/6.06.02/tmva/tmva/src/Node.cxx:142; #11 0x000000000040955f in main (argc=3, argv=0x7ffd9f1b3de8) at /home/jmitrevs/work/AtlasOffline-rel_5/source/simpleStudy/util/TestExe.cxx:112; ===========================================================; ```. ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14569:2891,Test,TestExe,2891,https://root.cern,https://github.com/root-project/root/issues/14569,1,['Test'],['TestExe']
Testability,"ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works; C->cd();; Double_t w=20, h=20, xl=0, yb=20;; TBox* o=new TBox();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; c->PlaceBox(o,w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f16b818a46c in __libc_waitpid (pid=29363, stat_loc=stat_loc; entry=0x7ffeea3c7360, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f16b8107f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f16bb30b5dc in TUnixSystem::StackTrace (this=0x19fb980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007f16bb30e06a in TUnixSystem::DispatchSignals (this=0x19fb980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6428#issuecomment-698590998:2224,test,test,2224,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998,1,['test'],['test']
Testability,"ADOW - Success; -- Performing Test C_FLAG_WCAST_ALIGN; -- Performing Test C_FLAG_WCAST_ALIGN - Success; -- Performing Test CXX_FLAG_WCAST_ALIGN; -- Performing Test CXX_FLAG_WCAST_ALIGN - Success; -- Performing Test C_FLAG_WCAST_QUAL; -- Performing Test C_FLAG_WCAST_QUAL - Success; -- Performing Test CXX_FLAG_WCAST_QUAL; -- Performing Test CXX_FLAG_WCAST_QUAL - Success; -- Performing Test C_FLAG_WSTRICT_PROTOTYPES; -- Performing Test C_FLAG_WSTRICT_PROTOTYPES - Success; -- Building AfterImage library included in ROOT itself; -- Looking for XROOTD; -- Found Xrootd version num: 5.5.4 (setting -DROOTXRDVERS=500050004); -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- libXrdClient not found: use built-in; -- include_dirs: /home/ubuntu/temp/install/include/xrootd;/home/ubuntu/git/root/proof/xrdinc; -- libraries: /home/ubuntu/temp/install/lib/libXrdUtils.so;/home/ubuntu/temp/install/lib/libXrdCl.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Found LibXml2: /usr/lib/x86_64-linux-gnu/libxml2.so (found version ""2.9.10""); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.10"", minimum required is ""3.0"") found components: Interpreter; -- Linker detection: GNU ld; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1504751163:4412,Test,Test,4412,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1504751163,2,['Test'],['Test']
Testability,"ADT/DenseMap.h:375:13: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct llvm::detail::DenseMapPair&lt;const clang::Type*, const clang::Type*&gt;’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:309:11: warning: ‘void* memcpy(void*, const void*, size_t)’ writing to an object of type ‘struct std::pair&lt;void*, long unsigned int&gt;’ with no trivial copy-assignment; use copy-assignment or copy-initialization instead [-Wclass-memaccess] . And 65 more. ### Failing tests:; - [projectroot.roottest.python.cling.roottest_python_cling_api](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48927/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); - [projectroot.roottest.python.cling.roottest_python_cling_class](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48927/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); - [projectroot.roottest.root.html.roottest_root_html_runMakeIndex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48927/testReport/projectroot.roottest.root/html/roottest_root_html_runMakeIndex/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_aclicDataMemberSelection](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48927/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_aclicDataMemberSelection/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48927/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.evolution.version5.roottest_root_meta_evolution_version5_execNestedColl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48927/testReport/projectroot.roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-440752881:4208,test,testReport,4208,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-440752881,1,['test'],['testReport']
Testability,ARDED_AVAILABILITY_NEW; -- Performing Test CXX_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW - Failed; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG - Success; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Per,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4011,Test,Test,4011,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Test'],['Test']
Testability,"AST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:1834:7; #34 0x00000000040e16ad clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:1888:31; #35 0x0000000008afe5da clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:2088:49; #36 0x0000000008af9c5a clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:1792:17; #37 0x0000000008afa308 clang::Preprocessor::HandleDirective(clang::Token&) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:1094:14; #38 0x0000000008abe5f3 clang::Lexer::LexTokenInternal(clang::Token&, bool) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:4013:7; #39 0x0000000008abac44 clang::Lexer::Lex(clang::Token&) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3228:8; #40 0x0000000008b4686f clang::Preprocessor::Lex(clang::Token&) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/Preprocessor.cpp:931:21; #41 0x00000000043ce55a cla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377607040:34676,test,test-products,34676,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377607040,1,['test'],['test-products']
Testability,"AST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:1834:7; #72 0x00000000040e16ad clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Frontend/CompilerInstance.cpp:1888:31; #73 0x0000000008afe5da clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:2088:49; #74 0x0000000008af9c5a clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:1792:17; #75 0x0000000008afc7e9 clang::Preprocessor::HandleIncludeNextDirective(clang::SourceLocation, clang::Token&) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:2414:3; #76 0x0000000008afa45d clang::Preprocessor::HandleDirective(clang::Token&) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/PPDirectives.cpp:1121:14; #77 0x0000000008abe5f3 clang::Lexer::LexTokenInternal(clang::Token&, bool) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:4013:7; #78 0x0000000008abac44 clang::Lexer::Lex(clang::Token&) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/tools/clang/lib/Le",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377607040:44674,test,test-products,44674,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377607040,1,['test'],['test-products']
Testability,"AULT_HOST_MEMORY_ALIGNMENT=128 -DALPAKA_DISABLE_VENDOR_RNG -DCMS_DICT_IMPL -D_REENTRANT -DGNUSOURCE -D__STRICT_ANSI__ -DGNU_GCC -D_GNU_SOURCE -DTBB_USE_GLIBCXX_VERSION=120301 -DTBB_SUPPRESS_DEPRECATED_MESSAGES -DTBB_PREVIEW_RESUMABLE_TASKS=1 -DTBB_PREVIEW_TASK_GROUP_EXTENSIONS=1 -DBOOST_SPIRIT_THREADSAFE -DPHOENIX_THREADSAFE -DBOOST_MATH_DISABLE_STD_FPCLASSIFY -DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DCMSSW_GIT_HASH=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -DPROJECT_NAME=\""CMSSW\"" -DPROJECT_VERSION=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -Isrc -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/alpaka/1.1.0-84e4d58fde852e6641ccc23881ba7b1f/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/pcre/8.43-e34796d17981e9b6d174328c69446455/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-7ac88d918a6883d593abc133ee0eb2e9/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/bz2lib/1.0.6-d065ccd79984efc6d4660f410e4c81de/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/libuuid/2.34-27ce4c3579b5b1de2808ea9c4cd8ed29/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/lcg/root/6.33.01-a252d5032aa4f9a2fc7dcaab3fac8b9f/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/tbb/v2021.9.0-2391c941213c757dc9a1835b31681235/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/xz/5.2.5-6f3f49b07db84e10c9be594a1176c114/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/zlib/1.2.11-1a082fc322b0051b504cc023f21df178/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/eigen/3bb6a48d8c171cf20b5f8e48bfb4e424fbd4f79e-39786ff94f8aa2f543922cad720e1b32/include -I/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2299822796:1814,test,tests,1814,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2299822796,2,['test'],"['testBuildDir', 'tests']"
Testability,"AULT_HOST_MEMORY_ALIGNMENT=128 -DALPAKA_DISABLE_VENDOR_RNG -DCMS_DICT_IMPL -D_REENTRANT -DGNUSOURCE -D__STRICT_ANSI__ -DGNU_GCC -D_GNU_SOURCE -DTBB_USE_GLIBCXX_VERSION=120301 -DTBB_SUPPRESS_DEPRECATED_MESSAGES -DTBB_PREVIEW_RESUMABLE_TASKS=1 -DTBB_PREVIEW_TASK_GROUP_EXTENSIONS=1 -DBOOST_SPIRIT_THREADSAFE -DPHOENIX_THREADSAFE -DBOOST_MATH_DISABLE_STD_FPCLASSIFY -DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DCMSSW_GIT_HASH=\""CMSSW_14_2_ROOT6_X_2024-09-03-2300\"" -DPROJECT_NAME=\""CMSSW\"" -DPROJECT_VERSION=\""CMSSW_14_2_ROOT6_X_2024-09-03-2300\"" -Isrc -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/alpaka/1.1.0-4d4f1220bfca9be4c4149ab758d15463/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/pcre/8.43-e34796d17981e9b6d174328c69446455/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-7ac88d918a6883d593abc133ee0eb2e9/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/bz2lib/1.0.6-d065ccd79984efc6d4660f410e4c81de/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/cuda/12.4.1-fc5cb0e72dba64b6abbf00089f3a044c/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/libuuid/2.34-27ce4c3579b5b1de2808ea9c4cd8ed29/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/tbb/v2021.9.0-2391c941213c757dc9a1835b31681235/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/xz/5.2.5-6f3f49b07db84e10c9be594a1176c114/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/zlib/1.2.11-1a082fc322b0051b504cc023f21df178/include -I/data/cmsbld/jenkins/workspace/ib-ru",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2331366418:2074,test,tests,2074,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2331366418,2,['test'],"['testBuildDir', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-debian10-i386/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-ROOT-debian10-i386-cxx14&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77542/console).; ### Failing tests:; - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_rvec](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77542/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_rvec/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617073931:360,test,tests,360,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617073931,4,['test'],"['test', 'testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-fedora29/python3.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-ROOT-fedora29-python3&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77544/console).; ### Failing tests:; - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_simpleCppMagic_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77544/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_simpleCppMagic_notebook/); - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_rvec](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77544/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_rvec/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617130250:354,test,tests,354,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617130250,5,['test'],"['test', 'testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-fedora30/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-ROOT-fedora30-cxx14&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77545/console).; ### Failing tests:; - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_rvec](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77545/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_rvec/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617078959:350,test,tests,350,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617078959,4,['test'],"['test', 'testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-fedora31/noimt.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-ROOT-fedora31-noimt&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77546/console).; ### Failing tests:; - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_rvec](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77546/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_rvec/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617031660:350,test,tests,350,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617031660,4,['test'],"['test', 'testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-fedora31/noimt.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-ROOT-fedora31-noimt&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77578/console).; ### Warnings:; - [2020-04-21T09:20:03.480Z] /build/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter ‘nDim’ [-Wunused-parameter],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617064953:438,test,test,438,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617064953,2,['test'],"['test', 'testTFoam']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-performance-centos7-multicore/default.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-ROOT-performance-centos7-multicore-default&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77543/console).; ### Failing tests:; - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_rvec](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77543/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_rvec/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617045741:396,test,tests,396,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617045741,4,['test'],"['test', 'testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-performance-centos7-multicore/default.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-ROOT-performance-centos7-multicore-default&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77575/console).; ### Warnings:; - [2020-04-21T09:50:35.548Z] /data/sftnight/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:10: warning: unused parameter ‘nDim’ [-Wunused-parameter],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617082277:492,test,test,492,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617082277,2,['test'],"['test', 'testTFoam']"
Testability,AXEL DEBUG: null workspace; Build failed on ROOT-ubuntu16/nortcxxmod.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-ROOT-ubuntu16-nortcxxmod&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77547/console).; ### Failing tests:; - [projectroot.bindings.pyroot_experimental.pythonizations.test.pyunittests_pyroot_pyz_rvec](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77547/testReport/projectroot.bindings.pyroot_experimental.pythonizations/test/pyunittests_pyroot_pyz_rvec/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617051373:360,test,tests,360,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617051373,4,['test'],"['test', 'testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5360-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5360#issuecomment-617094622:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/5360#issuecomment-617094622,4,['test'],"['testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617046782:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617046782,4,['test'],"['testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5411#issuecomment-617073790:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790,4,['test'],"['testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617073738:449,test,test,449,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738,6,['test'],"['test', 'testReport', 'testTFoam', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617160440:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440,4,['test'],"['testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5413#issuecomment-617085149:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149,4,['test'],"['testReport', 'tests']"
Testability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5415#issuecomment-617102090:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090,4,['test'],"['testReport', 'tests']"
Testability,About debian looks like users can get higher cmake version from `stable-bpo` and `testing` repos (?): https://tracker.debian.org/pkg/cmake; @Axel-Naumann what do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8336#issuecomment-854535118:82,test,testing,82,https://root.cern,https://github.com/root-project/root/pull/8336#issuecomment-854535118,1,['test'],['testing']
Testability,"About the failing tests, they now fail because they check for `kEntryNotFound` after an event loop finishes normally. In `TTreeReaderBasic.ZeroEntryRange` and `TTreeReaderBasic.InvertedEntryRange` the following logic is present (the comments also come from the current test code):. ```cpp; // Read beyond end:; EXPECT_FALSE(tr.Next());; // As the TTree only has up to entry 19, 20 is kEntryNotFound:; EXPECT_EQ(TTreeReader::kEntryNotFound, tr.GetEntryStatus());; ```. Similarly, `TTreeReaderBasic.EntryListBeyondEnd` expects `kEntryNotFound` after the last `r.Next()` when a `TEntryList` is present. Also in that case, I would argue `kEntryBeyondEnd` would be more correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8747#issuecomment-887570955:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/8747#issuecomment-887570955,3,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"About. > it would be nice to exclude the Google stuff from clang-tidy but keep our code under scrutiny. Not sure if this can be done though. I think at least in some cases clang-tidy can only complain about problems in template code if it sees the template instantiations in the tests, imho that's a strong argument for running clang-tidy on the tests too -- but of course we don't care about issues in googletest's macros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8773#issuecomment-895042367:279,test,tests,279,https://root.cern,https://github.com/root-project/root/pull/8773#issuecomment-895042367,2,['test'],['tests']
Testability,"According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025:142,test,test,142,https://root.cern,https://github.com/root-project/root/pull/12025,1,['test'],['test']
Testability,"According to my benchmarks with gcc 8.1, it brings ~3% performance improvement in the serialization of floats.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2089:16,benchmark,benchmarks,16,https://root.cern,https://github.com/root-project/root/pull/2089,1,['benchmark'],['benchmarks']
Testability,"According to my benchmarks, speeds up filling into a ramdisk without compression by 5% - 10%.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2134:16,benchmark,benchmarks,16,https://root.cern,https://github.com/root-project/root/pull/2134,1,['benchmark'],['benchmarks']
Testability,"According to the [documentation](https://en.cppreference.com/w/cpp/container/list/merge), the lists need to be sorted before merging them. This fixes a `Debug Assertion Failed! Expression sequence not ordered` error on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13262:159,Assert,Assertion,159,https://root.cern,https://github.com/root-project/root/pull/13262,1,['Assert'],['Assertion']
Testability,"According to the console logs the tests did not execute successfully, partly because of dynamic linking errors with libAsan. . Moreover, a lot of these tests seem to be old and abandonned due to the deprecation of `cint`. Any suggestions about what to do next? @bellenot @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8921:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8921,3,"['log', 'test']","['logs', 'tests']"
Testability,"According to the console logs the tests did not execute successfully, probably because of a badly setup dependency on libEvent. ### How it could be improved; Tests should be remade using CMake with a proper Event generation library and then tested for correctness against libasan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8909:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8909,4,"['Test', 'log', 'test']","['Tests', 'logs', 'tested', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The large number of tests present should be translated to CMake and then their correctness tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8920:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8920,4,"['log', 'test']","['logs', 'test', 'tested', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The tests should be implemented in CMake rather than calling `make cleantest`. After that their corectness can be verified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8906:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8906,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The tests should be implemented in CMake then have their corectness verified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8911:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8911,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . ### How it could be improved; The tests should be translated into CMake code and their corectness then verified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8905:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8905,30,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, the test crashed on execute due to bad linkage to asan functions. . Also, perf contains a lot of old tests than seemingly never got run. There is a discussion about this ongoing at https://github.com/root-project/roottest/pull/732 ; any idea @bellenot @pcanal ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8910:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8910,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"According to the console logs, this looks like a real failure. . `AddressSanitizer: heap-buffer-overflow`. libAsan seems to have detected a real error in the code. ### How it could be improved; The tests should be translated into CMake code and then the error(s) should be adressed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8917:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8917,2,"['log', 'test']","['logs', 'tests']"
Testability,"According to the console logs, this looks like a real failure. However the tests should first be translated into CMake so that they work with ASAN enabled and then tested for corectness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8922:25,log,logs,25,https://root.cern,https://github.com/root-project/root/issues/8922,3,"['log', 'test']","['logs', 'tested', 'tests']"
Testability,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1591391063:17,log,log,17,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1591391063,1,['log'],['log']
Testability,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):; ```; Failing Tests (11):; Cling :: CodeGeneration/Statics.C; Cling :: CodeGeneration/Symbols.C; Cling :: CodeGeneration/TLSVars.C; Cling :: CodeUnloading/PCH/VTablesClingPCH.C; Cling :: Driver/Gnu.C; Cling :: Lookup/data.C; Cling :: Lookup/func.C; Cling :: NullDeref/MethodCalls.C; Cling :: Prompt/OutputRedirect.C; Cling :: Prompt/ValuePrinter/Regression.C; Cling :: Utils/Transform.C; ; Expected Passes : 109; Expected Failures : 12; Unsupported Tests : 1; Unexpected Failures: 11; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/745#issuecomment-313337599:148,test,test,148,https://root.cern,https://github.com/root-project/root/pull/745#issuecomment-313337599,3,"['Test', 'test']","['Tests', 'test']"
Testability,ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z ; - [2023-03-30T09:26:15.195Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:373:23: warning: inline variables are only available with -std=c++1z or -std=gnu++1z . And 49 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_regression_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_stringfiltercolumn/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_ctors](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_ctors/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_reduce](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_reduce/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/171681/testReport/projectroo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12572#issuecomment-1490040073:3050,test,testReport,3050,https://root.cern,https://github.com/root-project/root/pull/12572#issuecomment-1490040073,1,['test'],['testReport']
Testability,Activate DS in MT mode and test its basic functionalites,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1041:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/1041,1,['test'],['test']
Testability,"Actually I got to admit I have no idea why there are tests failing on ROOT-ubuntu16/nortcxxmod.; Acccording to the error message this seems to be related to the function TGraph::AllocateArrays which I did not touch at all, so this might be an unrelated issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4698#issuecomment-566533676:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/4698#issuecomment-566533676,1,['test'],['tests']
Testability,"Actually I realized that the currently used ROC curve and AUC computation algorithms are quite inefficient. It is possible to recalculate sensitivity and specificity incrementally for each new threshold in O(1) given all elements of the test set are sorted in the order of increasing probability. This gives a total linear time in the number of elements for the entire curve, not just for one threshold. ; Implementing it is rather straightforward and I'd gladly do it, if it's OK with you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/454#issuecomment-293865639:237,test,test,237,https://root.cern,https://github.com/root-project/root/pull/454#issuecomment-293865639,1,['test'],['test']
Testability,"Actually a friend was testing this and found a bug where when trying to remove branches, all entries are removed. Fixing.... Sorry for the noise. . -L",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/150#issuecomment-205287651:22,test,testing,22,https://root.cern,https://github.com/root-project/root/pull/150#issuecomment-205287651,1,['test'],['testing']
Testability,"Actually before opening this issue, I did indeed build ROOT with it. I'm not sure, how to test if it is working but running `ldd libRHTTP.so` shows, that it got linked against proper library; ```; libssl.so.3 => .../sw/slc7_x86-64/AliEn-Runtime/v2.19-le-local3/lib/libssl.so.3; ```; I'm not sure, that this needs to be fixed ASAP, maybe after `civetweb` will have support for OpenSSL 3.1 but I wanted for early adopters see that such problem with build exists and how to bypass it in the time being.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12766#issuecomment-1536280429:90,test,test,90,https://root.cern,https://github.com/root-project/root/issues/12766#issuecomment-1536280429,1,['test'],['test']
Testability,"Actually it worked for you because you centred the X title. In the previous macro, remove the X title centring and go to log scale in Y and you will get the problem you discovered. So that's not a regression. The bug fix simply revealed a problem (?) which was hidden by the bug generated by the X title centring. To make it short, with a ROOT version without the patch, try:; ```; {; auto c1 = new TCanvas(""c1"",""multigraph"",700,500);; c1->SetGrid();; auto *mg = new TMultiGraph();; std::vector<double> x1;; std::vector<double> sig1;; std::vector<double> sig2;; for (double E=1e-4;E<2e7;E*=1.1) {; x1.push_back(E);; sig1.push_back(10*pow(E,-0.1));; sig2.push_back(15*pow(E,-0.15));; }; auto g1 = new TGraph(x1.size(), x1.data(), sig1.data());; mg->Add(g1);; auto g2 = new TGraph(x1.size(), x1.data(), sig2.data());; mg->Add(g2);; mg->SetTitle(""; E (eV);#sigma (b)"");; mg->Draw(""AL"");; gPad->Update();; c1->SetLogy();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011#issuecomment-957859532:121,log,log,121,https://root.cern,https://github.com/root-project/root/issues/9011#issuecomment-957859532,1,['log'],['log']
Testability,Actually my apologies ... changing the default seems to warrant its own commit so that it is clearly marked/seen in short git logs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4839#issuecomment-577677791:126,log,logs,126,https://root.cern,https://github.com/root-project/root/pull/4839#issuecomment-577677791,1,['log'],['logs']
Testability,"Actually the issue seems stranger than expected. At the moment, I can not reproduce the problem. Asan blames the; ```; #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx; ```; for calling operator delete but for some reason that (and only that) line is missing the line number. So my best guess for the line in question in never run in any of my tests. Furthermore ASAN blame the line: `hist/hist/G__Hist.cxx:15989` for the creation of the `TClass` object but this line is toward the end of the line and hence likely to be related to a `TClass` for one of the STL collection which should not be deleted. Finally ASAN thinks that both the deletion and creation are done via the same thread thus are less likely to be due to a race condition. Would be possible to get the following set of information:; * What is at line `hist/hist/G__Hist.cxx:15989`; * Confirm that the mystery line in TClass.cxx is the delete at line 1589 (on my copy of TCLass.cxx):; ```; if (oldcl) {. oldcl->ReplaceWith(this);; delete oldcl;; ```; * Rerun the test with ASAN and a single thread by using the following patch:; ```; diff --git a/root/meta/race-12552/exec_dlopenrace.C b/root/meta/race-12552/exec_dlopenrace.C; index 946d8d0b7c..1c3c8ac5b4 100644; --- a/root/meta/race-12552/exec_dlopenrace.C; +++ b/root/meta/race-12552/exec_dlopenrace.C; @@ -40,8 +40,8 @@ int exec_dlopenrace(); ROOT::EnableThreadSafety();; constexpr auto iter = 10000;; std::thread openlib{repeatopen, iter};; - std::thread lookup{repeatlookup, iter};; +// std::thread lookup{repeatlookup, iter};; openlib.join();; - lookup.join();; +// lookup.join();; return 0;; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715#issuecomment-1553774228:542,test,tests,542,https://root.cern,https://github.com/root-project/root/issues/12715#issuecomment-1553774228,2,['test'],"['test', 'tests']"
Testability,Actually we need to do the reverse and insert this test in ctest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-454889918:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-454889918,1,['test'],['test']
Testability,"Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. . Either way, it seems that the issue is that the transaction unloader is not unloading enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1757981554:159,test,test,159,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1757981554,1,['test'],['test']
Testability,"Actually, I agree. In particular because we haven't using the defaults in these files for years and it just came up due to our assert fiasco. But you see, it's going to be a larger surgery to remove the `SetUp*.cmake` files and it may change the behaviour of the build system. And stuff will just break if we don't use the build in our CI. That's why I'm hesitant to touch too much of these internals. @oshadura @Axel-Naumann Now it's your turn to dive into this and state your opinion :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-823021814:127,assert,assert,127,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-823021814,1,['assert'],['assert']
Testability,"Actually, I tested only the token in the environment variable. In fact, trying out the token-in-file way, I get this error (*), any idea @oshadura ?. (*); [root@0cfc7b46c606 ~]# echo ""$MY_TOKEN"" > /tmp/bt_u`id -u`; [root@0cfc7b46c606 ~]# root -l https://212.189.205.141:31094//W.root; *** Error in `/usr/local/bin/root.exe': free(): corrupted unsorted chunks: 0x0000000002141130 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81299)[0x7fb90c775299]; /lib64/libc.so.6(fclose+0x177)[0x7fb90c7621b7]; /usr/local/lib/libRDAVIX.so(_Z15findTokenInFileRKSsRSs+0xa4)[0x7fb9001205b4]; /usr/local/lib/libRDAVIX.so(_Z13DiscoverTokenv+0x2f2)[0x7fb900123d82]; /usr/local/lib/libRDAVIX.so(_ZN18TDavixFileInternal11parseConfigEv+0x14a)[0x7fb90012426a]; /usr/local/lib/libRDAVIX.so(_ZN18TDavixFileInternal4initEv+0xa9)[0x7fb9001256a9]; /usr/local/lib/libRDAVIX.so(_ZN12TDavixSystemC1Ev+0xe2)[0x7fb900128b62]; [0x7fb90dfab07e]; /usr/local/lib/libCling.so(+0x54406a)[0x7fb9088f006a]; /usr/local/lib/libCling.so(+0x544f68)[0x7fb9088f0f68]; /usr/local/lib/libCling.so(+0x54505b)[0x7fb9088f105b]; /usr/local/lib/libCore.so(_ZN11TMethodCall7ExecuteEPvRl+0x50)[0x7fb90d7a4be0]; /usr/local/lib/libCore.so(_ZN7TSystem10FindHelperEPKcPv+0x4df)[0x7fb90d70a58f]; /usr/local/lib/libCore.so(_ZN11TUnixSystem11GetPathInfoEPKcR10FileStat_t+0x13)[0x7fb90d7dda33]; /usr/local/lib/libCore.so(_ZN7TSystem11GetPathInfoEPKcPlPxS2_S2_+0x8c)[0x7fb90d70083c]; /usr/local/lib/libCore.so(_ZN12TApplication10GetOptionsEPiPPc+0x115a)[0x7fb90d6a127a]; /usr/local/lib/libCore.so(_ZN12TApplicationC1EPKcPiPPcPvi+0x299)[0x7fb90d6a19a9]; /usr/local/lib/libRint.so(_ZN5TRintC1EPKcPiPPcPvib+0x21)[0x7fb90dc24951]; /usr/local/bin/root.exe[0x4008ac]; /lib64/libc.so.6(__libc_start_main+0xf5)[0x7fb90c716555]; /usr/local/bin/root.exe[0x400918]; ======= Memory map: ========; 00400000-00401000 r-xp 00000000 fd:01 347746 /usr/local/bin/root.exe; 00600000-00601000 r--p 00000000 fd:01 347746 /usr/local/bin/root.exe; 00601000-00602000 rw-p 00001000 f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802#issuecomment-776756405:12,test,tested,12,https://root.cern,https://github.com/root-project/root/issues/6802#issuecomment-776756405,1,['test'],['tested']
Testability,"Actually, I think your fix it better because it similiar to all other builtins in SearchInstalledSoftware.cmake. I will test it and merge after!Thank you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5525#issuecomment-623089228:120,test,test,120,https://root.cern,https://github.com/root-project/root/pull/5525#issuecomment-623089228,1,['test'],['test']
Testability,"Actually, before merging, let's rerun the tests once more, I see that there might be a compilation problem on Windows based on the last comment from Jenkins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13210#issuecomment-1658057692:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/13210#issuecomment-1658057692,1,['test'],['tests']
Testability,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14061#issuecomment-1813248212:222,test,tests,222,https://root.cern,https://github.com/root-project/root/issues/14061#issuecomment-1813248212,1,['test'],['tests']
Testability,"Actually, it's probably not a good idea to introduce this progress bar, because it will break the logging to files, which is done a lot in batch jobs. Hence, I close this PR, which is superseded by another PR:; * https://github.com/root-project/root/pull/14309",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10509#issuecomment-1881730104:98,log,logging,98,https://root.cern,https://github.com/root-project/root/pull/10509#issuecomment-1881730104,1,['log'],['logging']
Testability,"Actually, the first few times this built, the workaround was still there. So it has been tested with this line. > Yeah I don't think we even allow the SDKROOT env to be set in the superenv anymore",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-843556973:89,test,tested,89,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-843556973,1,['test'],['tested']
Testability,Adapt tests to work with zlib-ng,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14295:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/14295,1,['test'],['tests']
Testability,Add 'MSVCCompat' flag and set 'ThreadsafeStatics = 0' (this fixes crash when running line.cxx and text.cxx root7 tests in interpreted mode),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4503:113,test,tests,113,https://root.cern,https://github.com/root-project/root/pull/4503,1,['test'],['tests']
Testability,Add IO benchmarks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1062:7,benchmark,benchmarks,7,https://root.cern,https://github.com/root-project/root/pull/1062,1,['benchmark'],['benchmarks']
Testability,Add PyMVA method PyKeras and enable PyMVA specific unit-tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/280,1,['test'],['tests']
Testability,Add RooFit::MultiProcess and TestStatistics to release notes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9375:29,Test,TestStatistics,29,https://root.cern,https://github.com/root-project/root/pull/9375,1,['Test'],['TestStatistics']
Testability,Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally; - [x ] updated the docs (if necessary). This PR fixes #13075,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14732:118,test,tested,118,https://root.cern,https://github.com/root-project/root/pull/14732,1,['test'],['tested']
Testability,"Add [2,3]"" << std::endl;; range.AddRange(2,3);; ; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert((range(0,0).first == 0));; assert(range(0,0).second == 5);. std::cout << ""range [0,5] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [-1,6]"" << std::endl;; range.AddRange(-1,6);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -1);; assert(range(0,0).second == 6);; std::cout << ""range [-1,6] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [-2,4]"" << std::endl;; range.AddRange(-2,4);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 6);; std::cout << ""range [-2,6] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [5,7]"" << std::endl;; range.AddRange(5,7);; assert(range.Size() == 1);; std::cout << ""Size = 1 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 7);; std::cout << ""range [-2,7] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. std::cout << ""Add [20,25]"" << std::endl;; range.AddRange(20,25);; assert(range.Size() == 2);; std::cout << ""Size = 2 = "" << range.Size() << std::endl;. assert(range(0,0).first == -2);; assert(range(0,0).second == 7);; std::cout << ""range [-2,7] = ["" << range(0,0).first << "","" << range(0,0).second << ""]"" << std::endl;. assert(range(0,1).first == 20);; assert(range(0,1).second == 25);; std::cout << ""range [20,25] = ["" << range(0,1).first << "","" << range(0,1).second << ""]"" << std::endl;. std::cout << ""Add [24,26]"" << std::endl;; range.AddRange(24,26);; assert(range.Size() == 2);; std::cout << ""Size = 2 = "" << range.Size() << std::endl;; assert(range(0,1).first == 20);; assert(range(0,1).second == 26);; std::cout << ""range [20,26] = ["" << ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10101#issuecomment-1080761923:1422,assert,assert,1422,https://root.cern,https://github.com/root-project/root/pull/10101#issuecomment-1080761923,1,['assert'],['assert']
Testability,Add a better test coverage (together with infrastructure) testing Bearer tokens for ROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8216:13,test,test,13,https://root.cern,https://github.com/root-project/root/issues/8216,2,['test'],"['test', 'testing']"
Testability,"Add a couple of unit tests for two pythonizations:; - Access a TTree branch as an attribute; - Make a TTree iterable. Both of them test different types of branches, which is especially relevant in the first test. The fact that the pythonization of `SetBranchAddress` is still not present in PyROOT experimental prevents the second test from testing more branch types (i.e. those that require a reference to a pointer); this is not an issue anyway since the code of the TTree-iterable pythonization is tested in its entirety by the current cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2449:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/2449,6,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,Add a diagnostics if the pch/pcm is out of date before asserting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4466:55,assert,asserting,55,https://root.cern,https://github.com/root-project/root/pull/4466,1,['assert'],['asserting']
Testability,Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/641:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/641,1,['test'],['tests']
Testability,"Add a new interface to RooFit, which uses a `RunContext` object to store data. This allows for passing data around between nodes of the computation graph without having to alter class members.; Some residual altering of class members remains, so the interface is not thread safe. It, however, solves the problem of not being able to compute an integral, the likelihoods of entries in a dataset + possibly some other set of x-values while another computation is running. This is the key to solving things like ROOT-3874 or faster integrators. In this PR, the interface is never used. Uses + tests will come in later PRs, but I couldn't dump 30 commits in one PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6615:590,test,tests,590,https://root.cern,https://github.com/root-project/root/pull/6615,1,['test'],['tests']
Testability,"Add a new page source and sink that use S3 as the backing store. Davix; is used as the S3 interface. The implementation is nearly identical; to the DAOS backend and there is a lot of duplicated code. ```cpp; std::string s3Uri(""s3://$(S3_BUCKET).$(S3_HOST)"");; {; auto model = RNTupleModel::Create();; auto pt = model->MakeField<float>(""pt"");; auto vec = model->MakeField<std::vector<int>>(""vec"");; // create a new RNTuple named `my_ntuple`; // -- objects are written to /bucket/my_ntuple/; auto writer = RNTupleWriter::Recreate(std::move(model), ""my_ntuple"", s3Uri);; for (int i = 0; i < 100; i++) {; *pt = 42.0;; *vec = {1, 2, 3};; writer->Fill();; }; }. // opens the RNTuple at the path /bucket/my_ntuple/; auto ntuple = RNTupleReader::Open(""my_ntuple"", s3Uri);; ```; results in the following objects stored in the bucket:; ```shell; my_ntuple/0 # page 0, 1, ... ; my_ntuple/1; my_ntuple/18446744073709551613 # footer; my_ntuple/18446744073709551614 # header; my_ntuple/18446744073709551615 # anchor; my_ntuple/2; ```; Like the current DAOS backend, one object is allocated for every page,; plus three for the header, footer, and anchor. Performance will not be; very good yet as only a single request at a time is issued. Pages are issued keys sequentially from 0, like the DAOS backend. There; are three reserved keys:; * anchor: u64(-1); * header: u64(-2); * footer: u64(-3). S3 access is controlled using the (ROOT & Davix-compatible) envvars:; * S3_REGION; * S3_SECRET_KEY; * S3_ACCESS_KEY. Perhaps these should be changed to the official AWS envvars. Todo:; - [ ] re-add cluster caching functionality to `PopulatePageFromCluster`; - [ ] implement `LoadCluster`; - [ ] test mocks; - [ ] test with real RNTuples; - [ ] issue concurrent requests to S3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8525:1676,test,test,1676,https://root.cern,https://github.com/root-project/root/pull/8525,3,"['mock', 'test']","['mocks', 'test']"
Testability,"Add a number of functions that could replace the way user interacts with the C++ elements of the distributed, fully pythonic RDF analysis, so that this is more natural and clear as well as less error prone compared to the previous method. ; The new functions are: ; - DeclareHeaders; - DeclareSharedLibs ; - DeclareFiles ; - DeclareCppCode. The functions work with both Spark and Dask backends. . The tests are introduced in roottest PR: https://github.com/root-project/roottest/pull/1177",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16309:401,test,tests,401,https://root.cern,https://github.com/root-project/root/pull/16309,1,['test'],['tests']
Testability,Add a test for TH2Poly:Add,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4252:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/4252,1,['test'],['test']
Testability,Add a test for v7/TText,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1703:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/1703,1,['test'],['test']
Testability,Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4879:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/4879,2,"['log', 'test']","['logic', 'test']"
Testability,Add a unit test that checks RNTuple serialization/deserialization of classes using empty base optimization. ## Checklist:; - [X] tested changes locally. This PR fixes #10323.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10481:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/10481,2,['test'],"['test', 'tested']"
Testability,Add all STL vector pythonizations to RVec. ~Possibly needs further unit-tests.~ Added further unit-tests. This ~should fix~ fixes the failing iterating over RVecs in Python on mac machines. Made selection of appropriate pythonizations more fool proof (`RVec<RVec<T>>` was treated similar to `RVec<T>` due to lazy string magic). Thanks @amadio!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2495:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/2495,2,['test'],['tests']
Testability,"Add an extra multi-value keyword to the ROOT_ADD_TEST function which; will just be passed as-is to the cmake set_tests_properties function.; This can be used to pass any of the properties described at; https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#test-properties .; In the future, some of the properties which are now manually added (e.g.; ENVIRONMENT) could be removed from this function and just passed through; the standard PROPERTIES parameter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10194:269,test,test-properties,269,https://root.cern,https://github.com/root-project/root/pull/10194,1,['test'],['test-properties']
Testability,Add assertion to ensure that page_size is a power of two,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4165:4,assert,assertion,4,https://root.cern,https://github.com/root-project/root/pull/4165,1,['assert'],['assertion']
Testability,Add back excluded tests for C++ modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5268:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/5268,1,['test'],['tests']
Testability,"Add bold header to TrainAllmethods, TestAllMethods and EvaluateAllMethods",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/273:36,Test,TestAllMethods,36,https://root.cern,https://github.com/root-project/root/pull/273,1,['Test'],['TestAllMethods']
Testability,Add change with no effect to test infrastructure (not meant for merging),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1535:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/1535,4,['test'],['test']
Testability,"Add diagnostic counts, suuuper nice for tests!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1662:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/1662,1,['test'],['tests']
Testability,"Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:; This routine returns now an unsigned 64 bit integer; For large values, larger than 1.84e+19, we print an error message; advising to use the Trandom::PoissonD for such large values,; and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #6927",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14668:328,test,tested,328,https://root.cern,https://github.com/root-project/root/pull/14668,1,['test'],['tested']
Testability,Add google benchmark,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/688:11,benchmark,benchmark,11,https://root.cern,https://github.com/root-project/root/pull/688,1,['benchmark'],['benchmark']
Testability,"Add methods TBufferMerger::GetQueueSize() and TBufferMerger::RegisterCallback() to alow user; to control the rate at which data is pushed into the merging queue. In our test, we use the callback; function to launch tasks asynchronously whenever a buffer is done processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1001:169,test,test,169,https://root.cern,https://github.com/root-project/root/pull/1001,1,['test'],['test']
Testability,Add missing call to `ReleasePage()` to free memory used for all the buffered pages after the vector write case (call to `CommitSealedPageV()`).; This fixes an unfortunate memory leak we introduced in https://github.com/root-project/root/pull/10775. Thanks @glmiotto!. ## Checklist:; - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12298:289,test,tested,289,https://root.cern,https://github.com/root-project/root/pull/12298,1,['test'],['tested']
Testability,Add missing include to metacling test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12216:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/12216,1,['test'],['test']
Testability,Add missing includes in RootShower test v6.22,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5746:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/5746,1,['test'],['test']
Testability,"Add more functionality to new batch interface, notably; - The direct retrieval of spans from datasets / data histograms.; - Code that uses the new interface in RooNLLVar for testing. For the moment protected by an `#ifdef ROOFIT_NEW_BATCH_INTEFACE`.; - An implementation of a batch computation for the RooProdPdf. @phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DROOFIT_NEW_BATCH_INTERFACE",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6650:174,test,testing,174,https://root.cern,https://github.com/root-project/root/pull/6650,1,['test'],['testing']
Testability,"Add null checks to some important high-level RNTuple APIs. In general, they are not the most complicated errors but it would be nice to be completely segfault free. e.g.; ```cpp; auto model = RNTupleModel::Create();; model->AddField(nullptr);; ```. Before: ; ```; *** Break *** segmentation violation; ```; After: ; ```; C++ exception with description ""null field; At:; void ROOT::Experimental::RNTupleModel::AddField(std::unique_ptr<ROOT::Experimental::Detail::RFieldBase>) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RNTupleModel.cxx:56]; "" thrown in the test body.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7751:565,test,test,565,https://root.cern,https://github.com/root-project/root/pull/7751,1,['test'],['test']
Testability,"Add possibility to execute ROOT gtest tests number of times, stopping…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6354:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/6354,1,['test'],['tests']
Testability,"Add range checks to `RNTupleView`'s indexing operators. Before this change out of bounds accesses were being caught by an internal assert (in `RPageStorageFile::PopulatePage`); ```cpp; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", path);; ntuple->Fill();; ntuple->Fill();; // ntuple has 2 entries; }; auto ntuple = RNTupleReader::Open(""myNTuple"", path);; auto viewPt = ntuple->GetView<float>(""pt"");; std::cout << viewPt(2); // attempt to access the pt field at offset 2 ; ```. Before:; ```; Fatal: clusterId != kInvalidDescriptorId violated at line 400 of `/home/max/projects/rootdev/root/tree/ntuple/v7/src/RPageStorageFile.cxx'; aborting; ```. The assert location:; https://github.com/root-project/root/blob/a4b812bad84be0986ee416bbd65cf44527b92404/tree/ntuple/v7/src/RPageStorageFile.cxx#L391-L400. After this change we throw an exception like:; ```; index 2 out of bounds for field 'pt' with 2 elements; ```. This also required a change to `RFieldBase::GetNElements` to handle a few field corner cases: ; * before columns are generated; * class fields (which do not have a principal column)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7784:131,assert,assert,131,https://root.cern,https://github.com/root-project/root/pull/7784,2,['assert'],['assert']
Testability,Add regression test for ROOT-10574.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5031:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/5031,1,['test'],['test']
Testability,"Add support for a new `Offset(""bin"")` command argument to create NLL.; With this new offset mode, the NLL is offsetted by the likelihood for a; template histogram model based on the obersved data. This can; drastically improve numeric stability, because the offsetting is done; for each bin. This results in per-bin values that are all in the same; order of magnitude, which reduces precision loss in the sum. So far, it is only supported in the old test statistics when do do the; fit with a `RooDataHist` with the old test statistics.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11939:450,test,test,450,https://root.cern,https://github.com/root-project/root/pull/11939,2,['test'],['test']
Testability,Add support for gtest if testing is enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/451:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/451,1,['test'],['testing']
Testability,Add tabcompletion test similar to the one in JupyROOT/helpers/cppcompleter.py,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6011:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/6011,1,['test'],['test']
Testability,Add test coverage to codecov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13390:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/13390,1,['test'],['test']
Testability,Add test coverage using codecov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13391:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/13391,1,['test'],['test']
Testability,Add test for MixMax random generators,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1594:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/1594,1,['test'],['test']
Testability,Add testing for TNetXNGFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13562:4,test,testing,4,https://root.cern,https://github.com/root-project/root/pull/13562,1,['test'],['testing']
Testability,Add the RooFit related libraries if RooFit feature is installed.; Tested and tested with a cmake build and a main that creates RooRealVar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/978:66,Test,Tested,66,https://root.cern,https://github.com/root-project/root/pull/978,2,"['Test', 'test']","['Tested', 'tested']"
Testability,Add the new operator developed by Aaradhya Saxena. This PR extends #8882 and updates to the new Session class of Sofie. ; It includes also the test for Batch normalization operator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9307:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/9307,1,['test'],['test']
Testability,Add the possibility to get the parameter values for each function; evaluation during the minimization. This is useful to get a consistent; minimization path for benchmarking.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10609:161,benchmark,benchmarking,161,https://root.cern,https://github.com/root-project/root/pull/10609,1,['benchmark'],['benchmarking']
Testability,"Add the possibility to use ratios as yield parameters in SPlot.; Also update the documentation of SPlot, and add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5592:115,test,test,115,https://root.cern,https://github.com/root-project/root/pull/5592,1,['test'],['test']
Testability,"Add tree inference backend using jitted evaluation of the forest. Preliminary benchmarks look promising and show a clear improvement due to the jitting (100 trees, depth 3, 100k events):. ```; XGB: 2.30692 microsec/event; BranchlessForest: 0.962279 microsec/event; BranchlessJittedForest: 0.67292 microsec/event; ```. WIP: Still needs some error-handling and doxygen markup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4476:78,benchmark,benchmarks,78,https://root.cern,https://github.com/root-project/root/pull/4476,1,['benchmark'],['benchmarks']
Testability,Add unit tests for TQObject as an example for further reference.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/451:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/451,1,['test'],['tests']
Testability,"Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:; This PR avoids lookups and parsing in some cases.; One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:; This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it.; In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally; - [v ] updated the docs (if necessary). This PR fixes #9029",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341:759,test,tested,759,https://root.cern,https://github.com/root-project/root/pull/13341,1,['test'],['tested']
Testability,Added 'test-periodic-build' test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1495:7,test,test-periodic-build,7,https://root.cern,https://github.com/root-project/root/pull/1495,2,['test'],"['test', 'test-periodic-build']"
Testability,"Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4684:60,log,logical,60,https://root.cern,https://github.com/root-project/root/pull/4684,1,['log'],['logical']
Testability,Added a new test for checking that the issue is fixed!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9513#issuecomment-1024058930:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/9513#issuecomment-1024058930,1,['test'],['test']
Testability,"Added a test, will merge if green",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5346#issuecomment-612138912:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/5346#issuecomment-612138912,1,['test'],['test']
Testability,"Added an initial integration and test on how Automatic Differentiation (AD) can be implemented in RooFit. Currently, one can print the code of simple RF models they make with already supported classes. These simple models can also be evaluated through the generated code. This commit does not implement gradient calculation through clad. This pull request defines the necessary interfaces to support AD for RooFit classes; it also defines the functions that build the code required for AD and a wrapper class that wraps the JIT-ed function. . Also moved some of the `BatchModeHelpers` functions and classes to the header so that the `ADModeHelpers` can use them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/11773,1,['test'],['test']
Testability,"Added backwards-compatibility test in roottest, will wait for the CI to run.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15880#issuecomment-2182977880:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/15880#issuecomment-2182977880,1,['test'],['test']
Testability,Added commit message and rebased. Will merge if tests pass,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-896034813:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-896034813,1,['test'],['tests']
Testability,Added methods GetInfo and GetClassName to TestStatistics likelihood classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043:42,Test,TestStatistics,42,https://root.cern,https://github.com/root-project/root/pull/10043,1,['Test'],['TestStatistics']
Testability,Added missing `#include <string>` that was causing the CodeUnloading/DeclShadowing.C test to fail.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6958:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/6958,1,['test'],['test']
Testability,"Added more tests as suggested by @dpiparo , tutorial will come in a different PR. Will merge if jenkins aggress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2295#issuecomment-403199759:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/2295#issuecomment-403199759,1,['test'],['tests']
Testability,"Added numpy array interface for; - `TVec`; - `TVector`; - `TMatrix`; - `std::vector`. and data types; - `float`; - `double`; - `int` (only `TVec` and `std::vector`); - `long` (only `TVec` and `std::vector`); - `unsigned int` (only `TVec` and `std::vector`); - `unsigned long` (only `TVec` and `std::vector`). WIP:; - ~~Which classes to be added?~~; - ~~Which data types?~~; - ~~What about the `numpy` dependence of the unittest?~~ I asked for numpy to activate the test.; - ~~Segfault for `TMatrixT(""int"")` and `TVectorT(""int"")`?~~ Not a problem of this PR.; - ~~Check endianess during compile-time?~~ Checked for `R__BYTESWAP` with pre-compiler.; - ~~What about histogram classes?~~ Not possible to maintain same return structure than `numpy.hist` solely by tweaking the array interface (that was the actual idea); - ~~What about the unsigned types?~~ Done for `std::vector` and `TVec`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1753:465,test,test,465,https://root.cern,https://github.com/root-project/root/pull/1753,1,['test'],['test']
Testability,"Added resetting state logic in the TColor class that uses a flag to check for changes in the palette such that the Jupyter notebook cells will cause the list of TColors to be streamed independently of other cells, only if they are needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/868:22,log,logic,22,https://root.cern,https://github.com/root-project/root/pull/868,1,['log'],['logic']
Testability,Added some brief information about the function of GetUxmax etc. This helps clarify its return value when the axis is set to log. Some of this was mentioned on the [ROOT forum](https://root-forum.cern.ch/t/tpolyline3d-with-log-scale/26115/9) with @couet.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/960:125,log,log,125,https://root.cern,https://github.com/root-project/root/pull/960,2,['log'],"['log', 'log-scale']"
Testability,"Added support for tesselated, ellipsoid, hyperboloid and cut tube in the ROOT to VecGeom converter. Added the macro tutorials/geom/tessellatedNav.C importing and raytracing a tessellated solid. # This Pull request:; Completes solid conversion to VecGeom support. ## Changes or fixes:; Adding the macro tutorials/geom/tessellatedNav.C. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11271",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12315:356,test,tested,356,https://root.cern,https://github.com/root-project/root/pull/12315,1,['test'],['tested']
Testability,"Added support for the VecGeom library as external package (-Dvecgeom). Creating new library libConverterVG within geom module. This contains the conversion interface for ROOT shapes into vecgeom ones, activated using the plugin mechanism from ROOT. Included also the class TGeoVGShape bridging TGeoShape methods to either VecGeom solid (navigation) or existing ROOT shape (visualisation and the rest). The conversion can be done once a ROOT geometry is in memory using:; TVirtualGeoConverter::Instance()->ConvertGeometry(); Once this is done, all TGeo functionality and tests can be accessed as for a standard TGeo geometry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/156:570,test,tests,570,https://root.cern,https://github.com/root-project/root/pull/156,2,['test'],['tests']
Testability,Added test coverage badge,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/548:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/548,1,['test'],['test']
Testability,"Added tests for the C++ mechanisms, and attempt at fixing the ubuntu18 failure (see last commit) with a much more simplified approach w.r.t. https://github.com/root-project/root/pull/12981, which should not be needed anymore (let's see what the CI thinks).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1585596942:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1585596942,1,['test'],['tests']
Testability,Added tests for the ROOT module,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4048#issuecomment-509235341:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/4048#issuecomment-509235341,1,['test'],['tests']
Testability,Added tests for this feature in commit bb3a1273054d14e46451c1f8592b9063d12372fc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2259#issuecomment-402402797:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/2259#issuecomment-402402797,1,['test'],['tests']
Testability,Added tests on the distributed RDF side too. @eguiraud this is now ready for review again,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1589082737:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1589082737,1,['test'],['tests']
Testability,Added testsuite for the Unix part.; It works on Linux. I hope it works on other Unix-like OSes. (rebased),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-803899801:6,test,testsuite,6,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-803899801,1,['test'],['testsuite']
Testability,"Added the PR description to the commit message, but the test passed. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028#issuecomment-330916611:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/1028#issuecomment-330916611,1,['test'],['test']
Testability,Added the Test for the compression algorithm for RNTuple as a GSoC evaluation task.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179:10,Test,Test,10,https://root.cern,https://github.com/root-project/root/pull/5179,1,['Test'],['Test']
Testability,Added the pythia[6|8] tutorials as tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/886:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/886,1,['test'],['tests']
Testability,Added whitespace for testing Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/339:21,test,testing,21,https://root.cern,https://github.com/root-project/root/pull/339,1,['test'],['testing']
Testability,"Added: https://github.com/wlav/CPyCppyy/commit/a02ceeb4c07a16fe084b8f23e979cb19b9347a05 . For convenience, it defaults to `PySequence_Check()` for non-cppyy objects. Note that as the ""TODO"" in that method says, it's possible to further refine `Sequence_Check` by verifying that the `operator[]()` takes and int-like argument and/or that the class defines a `__len__` of sorts. However, `PySequence_Check` doesn't do any of that either, so I've punted on that for now, but I can add if desired. The method does not check for `__iter__` as `PySequence_GetItem()` would fail for otherwise iterable containers (such as `std::list`). Here are some tests showing how I envisage this to work: https://github.com/wlav/cppyy/commit/2ebeacb9aa977497d9dffc8032302f3fc6d418ec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2061918944:643,test,tests,643,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2061918944,1,['test'],['tests']
Testability,"Adding `gROOT->GetListOfFiles()->Print();` calls supports my claims. Before creating the `RooDataSet` the output of the `Print()` is; ```; Collection name='Files', class='TList', size=1; TFile: name=test.root, title=output_file, option=CREATE; ```; after; ```; Collection name='Files', class='TList', size=0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6408#issuecomment-696728733:199,test,test,199,https://root.cern,https://github.com/root-project/root/issues/6408#issuecomment-696728733,1,['test'],['test']
Testability,"Adding a point that @pcanal mentioned during yesterday's meeting: As far as I understood, this only happens after some other libraries have been loaded? I tested `.L libceleritas_root.so` as the first action in a fresh `root` REPL, what else did you execute before that to make the error appear?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1088326588:155,test,tested,155,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1088326588,1,['test'],['tested']
Testability,Adding a sibling PR in roottest to also test the case of a single TTree and a single friend TTree,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10244#issuecomment-1080678258:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/10244#issuecomment-1080678258,1,['test'],['test']
Testability,"Adding an `static_assert` helps a but on the complier error report but it does not stop from trying different instantiations.; ```; In module 'Imt':; /Users/mato/Development/root/builddir/include/ROOT/TExecutor.hxx:240:4: error: static assertion failed due to requirement 'std::is_invocable_v<(lambda at /Users/mato/Development/root/reproducer2.C:5:18), std::vector<int, std::allocator<int> > >': redfunc does not have the correct signature; static_assert(std::is_invocable_v<R, std::vector<InvokeResult_t<F,INTEGER>>>, ""redfunc does not have the correct signature"");; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /Users/mato/Development/root/reproducer2.C:12:15: note: in instantiation of function template specialization 'ROOT::Internal::TExecutor::MapReduce<(lambda at /Users/mato/Development/root/reproducer2.C:8:21), unsigned long, (lambda at /Users/mato/Development/root/reproducer2.C:5:18), void>' requested here; auto n = ex.MapReduce(printRange, ROOT::TSeq<std::size_t>(0, nChunk), reducer, nChunk);; ^; In module 'Imt':; /Users/mato/Development/root/builddir/include/ROOT/TExecutor.hxx:244:11: error: no matching member function for call to 'Reduce'; return Reduce(Map(func, args), redfunc);; ^~~~~~; /Users/mato/Development/root/builddir/include/ROOT/TExecutorCRTP.hxx:151:36: note: candidate template ignored: substitution failure [with T = int, R = (lambda at /Users/mato/Development/root/reproducer2.C:5:18)]: no matching function for call to object of type '(lambda at /Users/mato/Development/root/reproducer2.C:5:18)'; template<class T, class R> auto Reduce(const std::vector<T> &objs, R redfunc) -> decltype(redfunc(objs));; ^ ~~~~~~~; /Users/mato/Development/root/builddir/include/ROOT/TExecutorCRTP.hxx:150:25: note: candidate function not viable: requires single argument 'mergeObjs', but 2 arguments were provided; template<class T> T* Reduce(const std::vector<T*> &mergeObjs);; ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7871#issuecomment-1943749347:236,assert,assertion,236,https://root.cern,https://github.com/root-project/root/issues/7871#issuecomment-1943749347,1,['assert'],['assertion']
Testability,Adding code generation and AD support for the final class in upstream RooFit that is used in the CMS Higgs discovery workspace: the RooBernstein. Also:. * fix missing variable warning in `RooCBShape.cxx`. * fix AD support for RooLandau by using code that clad can digest. * implement test for RooLandau fits with AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491:284,test,test,284,https://root.cern,https://github.com/root-project/root/pull/15491,1,['test'],['test']
Testability,"Adding some clarification:; In the old days, CTest did not have the notion of ""before running this test, build the following"". So Pere resorted to ""before running this test, run that test (which isn't actually a test but builds stuff but details)"". Given that we haven't migrated to the new CTest pre-test commands we cannot run the tests in random order. Once we do this PR will be a great test that we did our job correctly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4029#issuecomment-508056607:99,test,test,99,https://root.cern,https://github.com/root-project/root/pull/4029#issuecomment-508056607,7,['test'],"['test', 'tests']"
Testability,"Adding support for generation of multiclass 1 vs. all ROC curve plots. I also have two files for testing the binary and multiclass code paths, but am unsure of where to put these if anywhere. They are 2 standalone cxx files to generate data, train classifiers, draw the roc curves and succeeds if they do not crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/380:97,test,testing,97,https://root.cern,https://github.com/root-project/root/pull/380,1,['test'],['testing']
Testability,"Adding the bin width in the TH1::ComputeIntegral method, to handle histograms with non-uniform binning. # This Pull request:. ## Changes or fixes:. Modified the TH1::ComputeIntegral method, used in the TH1::GetRandom method, by multiplying the ""y"" variable (bin content) by the bin width. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). Not yet, since this has to be discussed with the ROOT developers. It has to be understood what a ""random extraction from a histogram"" should represent. This PR fixes 9530",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9538:310,test,tested,310,https://root.cern,https://github.com/root-project/root/pull/9538,1,['test'],['tested']
Testability,Additional fixes/test following #1144,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1169:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/1169,1,['test'],['test']
Testability,"Address a number of AddressSanitizer failures with Python tests, due to the way we need to preload the ASan runtime and our configuration. If I count correctly (there were a number of failures introduced last night, so I don't have a proper baseline), this fixes 7 tests:; * `pyunittests-pyroot-import-load-libs`; * `tutorial-roofit-rf104_classfactory-py`; * `roottest-python-JupyROOT-simpleCppMagic_notebook`; * `roottest-python-JupyROOT-thread_local_notebook`; * `roottest-python-JupyROOT-ROOT_kernel_notebook`; * `roottest-python-basic-basic`; * `roottest-python-regression-regression`. Moreover, `tutorial-rcanvas-df104-py` will show a proper AdressSanitizer failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11621:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/11621,2,['test'],['tests']
Testability,"Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found?. Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12695:284,test,testReport,284,https://root.cern,https://github.com/root-project/root/pull/12695,1,['test'],['testReport']
Testability,"Addressed the comment of @amadio, test failures in PyROOT experimental are unrelated. This is ready to be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3854#issuecomment-495200126:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/3854#issuecomment-495200126,1,['test'],['test']
Testability,"Addresses https://github.com/root-project/root/issues/13848 Thanks, Eddy!. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13956:140,test,tested,140,https://root.cern,https://github.com/root-project/root/pull/13956,1,['test'],['tested']
Testability,"Addresses several bugs on big-endian architecture, some in the testing code only, some in the actual code. Tested manually on Power8/EL7. Also tested that RNTuple data written on little-endian can be read on big-endian and vice versa. Fixes #12426",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15651:63,test,testing,63,https://root.cern,https://github.com/root-project/root/pull/15651,3,"['Test', 'test']","['Tested', 'tested', 'testing']"
Testability,Adds TBB-based counter types for global read-write locks and use one by default when TBB is available. This gives a 7% speedup in a medium sized test filling histograms from CMS NanoAOD with RDF and 256 threads. This implements the last part of the improvements originally discussed in https://github.com/root-project/root/pull/6919,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260:145,test,test,145,https://root.cern,https://github.com/root-project/root/pull/7260,1,['test'],['test']
Testability,Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14678:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/14678,1,['test'],['test']
Testability,"Adds an exhaustive table of the possible column representations of fundamental types to the specification. The PR also adds the `double` --> `Real16` representation. For integers, we need to decide which representations we allow. We currently only support reading/writing integers to columns of the same width. Read-only support for the column of the other signedness. Except for `std::int64_t`, which can also read from 32 bit columns. This was meant as a test for such conversions. Completing the integer column representation is for a follow-up PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15805:457,test,test,457,https://root.cern,https://github.com/root-project/root/pull/15805,1,['test'],['test']
Testability,"Adds some `RNTupleReader` usage examples. I think a nice goal is that every method has at least one example. Each example should be self-contained and easily copy-pastable for users to tweak as required. Doc example structure:; ```cpp; ~~~ {.cpp}; #include <ROOT/RNTuple.hxx> // all required ROOT headers are included; using ROOT::Experimental::RNTupleReader; // using decls to make the code more readable. #include <iostream> // any other headers. // int main () { implied; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; // } implied; ~~~; ```. To make sure the examples compile and work, I have been writing each in a test repo: https://github.com/mxxo/rntuple-doctests before adding them to the right location. Rendered examples: ; ![image](https://user-images.githubusercontent.com/40000585/121554761-6c31ea80-c9e0-11eb-8540-ab35724d9de3.png); ![image](https://user-images.githubusercontent.com/40000585/121554975-9683a800-c9e0-11eb-8e9a-5320b814bbde.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8404:711,test,test,711,https://root.cern,https://github.com/root-project/root/pull/8404,1,['test'],['test']
Testability,"Adds support for sending RDataFrame computations to a distributed Dask cluster. This looks like. ```python; import ROOT; from dask.distributed import Client; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; client = Client(""SCHEDULER_ADDRESS""); df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D(""x""); ```. Missing pieces:; - [ ] The current way to release the GIL in the mapper function of the `Base` backend assumes the first result of the list is a `RResultPtr` in order to be able to set the `__release_gil__` attribute on its `GetValue` function. I.e. this doesn't work for all operations, such as `AsNumpy` or `Snapshot` that do not return a `RResultPtr`; - [ ] Tutorial; - [ ] Tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9086:923,Test,Tests,923,https://root.cern,https://github.com/root-project/root/pull/9086,1,['Test'],['Tests']
Testability,"Adds the `RClusterCache` I/O scheduler that, similar to `TTreeCache`, preloads upcoming data ranges based on the current request. The RClusterCache synchronously provides a certain cluster and, upon that request, asynchronously preloads the next cluster(s) in an I/O thread. The actual logic of populating a cluster for a particular set of active columns is handled by the page storage. The file page storage linearizes and coalesces requests and requests the corresponding byte range requests in bulks (using `RRawFile::ReadV`). Currently the cluster cache of packed and compressed pages is on the heap. In the future, another descendant of `RCluster` can implement mmap() memory management instead. Also left for future work is the use of concurrent streams in `LoadCluster()`. - [x] Add I/O metrics and show how to print them in a tutorial; - [x] Support changing active columns during the lifetime of an ntuple reader; - [x] Gracefully handle a change of active columns when cluster where already loaded",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377:286,log,logic,286,https://root.cern,https://github.com/root-project/root/pull/5377,1,['log'],['logic']
Testability,Adjust allowed test difference for 32-bit ix86,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2273:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/2273,1,['test'],['test']
Testability,Adjust asserts.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5569:7,assert,asserts,7,https://root.cern,https://github.com/root-project/root/pull/5569,1,['assert'],['asserts']
Testability,Adjust commit message which I think caused a false positive on windows because of this string: `test/ntuple_storage_daos.cxx:5:33: error:`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8172#issuecomment-840572493:96,test,test,96,https://root.cern,https://github.com/root-project/root/pull/8172#issuecomment-840572493,1,['test'],['test']
Testability,"Adjust test for failures on aarch64, ppc64le and s390x",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14164:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/14164,1,['test'],['test']
Testability,Adjust tests for s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8826:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/8826,1,['test'],['tests']
Testability,"Adjust the spec.json file used for the test accordingly. Note that RDataFrame does not error out if a number beyond the last entry available is specified, it just interrupts the event loop early. This issue is; tracked at #13800.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13801:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/13801,1,['test'],['test']
Testability,Adresses most issues from #7426. * Check nullptr in proposed places; * Mark `// NOLINT` when return static members ; * Use references in several loops like `for (auto &entry : arr)`; * Fix potential logic error in `TStreamerElement::GetSequenceType`; * Use std::vector<std::string> for tokens in `TDataMember::ExtractOptionsFromComment`; * Use static std::string in `TCling::TypeName` instead of self-maintained char buffer; * Fix potential leak when calling `TClass::AdoptMemberStreamer`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7444:199,log,logic,199,https://root.cern,https://github.com/root-project/root/pull/7444,1,['log'],['logic']
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-buffer-overflow`:; * `gtest-tree-ntuple-v7-test-ntuple-basics`; * `gtest-tree-ntuple-v7-test-ntuple-rdf`; * `gtest-tree-ntuple-v7-test-ntuple-view`; * `gtest-tree-ntuple-v7-test-ntuple-show`. Stack trace (for the first test) is:; ```; 393: WRITE of size 4 at 0x6020000d2a50 thread T0 ; 393: #0 0x7efdd569f028 in ROOT::Experimental::RClusterSize::RClusterSize() /home/jhahnfel/ROOT/src/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:61:21; 393: #1 0x7efdd4d41a7f in ROOT::Experimental::Detail::RFieldValue::RFieldValue<ROOT::Experimental::RClusterSize>(ROOT::Experimental::Detail::RColumnElementBase const&, ROOT::Experimental::Detail::RFieldBase*, ROOT::Experimental::RClusterSize*) /home/jhahnfel/ROOT/src/tree/ntuple/v7/inc/ROOT/RFieldValue.hxx:75:19; 393: #2 0x7efdd4d259d1 in ROOT::Experimental::RCollectionField::GenerateValue(void*) /home/jhahnfel/ROOT/src/tree/ntuple/v7/inc/ROOT/RField.hxx:519:14; 393: #3 0x7efdd4cec7d8 in ROOT::Experimental::Detail::RFieldBase::GenerateValue() /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:268:11; 393: #4 0x7efdd4e101b2 in ROOT::Experimental::RNTupleModel::Clone() const /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RNTupleModel.cxx:74:49. [...]. 393: 0x6020000d2a51 is located 0 bytes to the right of 1-byte region [0x6020000d2a50,0x6020000d2a51); 393: allocated by thread T0 here:; 393: #0 0x557ff8 in malloc (/home/jhahnfel/ROOT/build-clang-asan-debug/tree/ntuple/v7/test/ntuple_basics+0x557ff8); 393: #1 0x7efdd4cec70b in ROOT::Experimental::Detail::RFieldBase::GenerateValue() /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:266:18; 393: #2 0x7efdd4e101b2 in ROOT::Experimental::RNTupleModel::Clone() const /home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RNTupleModel.cxx:74:49; ```. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10011:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10011,9,['test'],"['test', 'test-ntuple-basics', 'test-ntuple-rdf', 'test-ntuple-show', 'test-ntuple-view', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free` or `stack-use-after-return`:; * `gtest-roofit-roofitcore-test-testRooFitDriver` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testRooAbsPdf` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testTestStatistics` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testLikelihoodSerial` (`heap-use-after-free`); * ~`gtest-roofit-roofit-test-testRooPoisson` (`stack-use-after-return`)~; * `gtest-roofit-roofitcore-test-testSumW2Error` (`heap-use-after-free`); * `gtest-roofit-roostats-test-testSPlot` (`heap-use-after-free`); * ~`test-stressroofit` (`heap-use-after-free`)~; * ~`test-stressroofit-interpreted` (`heap-use-after-free`)~; * `tutorial-roofit-rf611_weightedfits` (`heap-use-after-free`); * ~`tutorial-roofit-rf705_linearmorph` (`stack-use-after-return`)~; * ~`tutorial-roofit-rf705_linearmorph-py` (`stack-use-after-return`)~; * `gtest-roottest-root-roofitstats-vectorisedPDFs-*` (`heap-use-after-free`). The top of the stack trace (for the first failing test) is:; ```; 229: WRITE of size 8 at 0x61d000a37370 thread T0; 229: #0 0x7f5aa5163db3 in RooAbsArg::setDataToken(unsigned long) /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:720:53; 229: #1 0x7f5aa5163db3 in ROOT::Experimental::NodeInfo::~NodeInfo() /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooFitDriver.cxx:100:15; 229: #2 0x7f5aa515d8f7 in void std::_Destroy<ROOT::Experimental::NodeInfo>(ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:98:19 ; 229: #3 0x7f5aa515d8f7 in void std::_Destroy_aux<false>::__destroy<ROOT::Experimental::NodeInfo*>(ROOT::Experimental::NodeInfo*, ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:108:6 ; 229: #4 0x7f5aa515d8f7 in void std::_Destroy<ROOT::Experimental::NodeInfo*>(ROOT::Experimental::NodeInfo*, ROOT::Experimental::NodeInfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10009:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10009,10,['test'],"['test-', 'test-stressroofit', 'test-stressroofit-interpreted', 'test-testLikelihoodSerial', 'test-testRooAbsPdf', 'test-testRooFitDriver', 'test-testRooPoisson', 'test-testSPlot', 'test-testTestStatistics', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free`:; * `gtest-tree-tree-test-testBulkApiMultiple`; * `gtest-tree-tree-test-testBulkApiVarLength`; * `gtest-tree-tree-test-testBulkApiSillyStruct`. Stack trace (for the first test) is:; ```; 418: READ of size 8 at 0x61700002eec8 thread T0; 418: #0 0x7f1c674bd713 in TTree::GetNotify() const /home/jhahnfel/ROOT/src/tree/tree/inc/TTree.h:499:55; 418: #1 0x7f1c674bac5d in void TNotifyLinkBase::RemoveLink<TTree>(TTree&) /home/jhahnfel/ROOT/src/core/base/inc/TNotifyLink.h:69:20; 418: #2 0x7f1c6765ac7d in TTreeReader::~TTreeReader() /home/jhahnfel/ROOT/src/tree/treeplayer/src/TTreeReader.cxx:252:15; 418: #3 0x535611 in BulkApiMultipleTest_stdRead_Test::TestBody() /home/jhahnfel/ROOT/src/tree/tree/test/BulkApiMultiple.cxx:309:1. [...]. 418: 0x61700002eec8 is located 328 bytes inside of 712-byte region [0x61700002ed80,0x61700002f048); 418: freed by thread T0 here:; 418: #0 0x531948 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan-debug/tree/tree/test/testBulkApiMultiple+0x531948); 418: #1 0x7f1c61f3a364 in TStorage::ObjectDealloc(void*) /home/jhahnfel/ROOT/src/core/base/src/TStorage.cxx:362:4; 418: #2 0x7f1c61ede2e8 in TObject::operator delete(void*) /home/jhahnfel/ROOT/src/core/base/src/TObject.cxx:1001:7; 418: #3 0x7f1c66f99411 in TTree::~TTree() /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:921:1; 418: #4 0x7f1c6202bb62 in TCollection::GarbageCollect(TObject*) /home/jhahnfel/ROOT/src/core/cont/src/TCollection.cxx:736:4; 418: #5 0x7f1c620480aa in TList::Delete(char const*) /home/jhahnfel/ROOT/src/core/cont/src/TList.cxx:537:13; 418: #6 0x7f1c6203423b in THashList::Delete(char const*) /home/jhahnfel/ROOT/src/core/cont/src/THashList.cxx:215:14; 418: #7 0x7f1c6312616e in TDirectoryFile::Close(char const*) /home/jhahnfel/ROOT/src/io/io/src/TDirectoryFile.cxx:572:27; 418: #8 0x7f1c6317a52b in TFile::Close(char const*) /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:942:20; 418: #9 0x7f1c6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10012:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10012,9,"['Test', 'test']","['TestBody', 'test', 'test-testBulkApiMultiple', 'test-testBulkApiSillyStruct', 'test-testBulkApiVarLength', 'testBulkApiMultiple', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free`:; * `pyunittests-pyroot-pyz-rdataframe-makenumpy`; * `pyunittests-pyroot-numbadeclare`; * `gtest-tree-dataframe-test-dataframe-friends`; * `gtest-tree-dataframe-test-dataframe-cache`; * `gtest-tree-dataframe-test-dataframe-simple`; * `gtest-tree-dataframe-test-dataframe-snapshot`; * `gtest-tree-dataframe-test-datasource-more`; * `gtest-tree-dataframe-test-datasource-trivial`; * `gtest-tree-dataframe-test-dataframe-concurrency` (`RJittedDefine`); * `pyunittests-dataframe-misc` (`RJittedDefine`); * `pyunittests-dataframe-histograms` (`RJittedDefine`); * `pyunittests-dataframe-cache`; * `pyunittests-dataframe-merge-results`; * `tutorial-dataframe-df019_Cache`; * `tutorial-tmva-tmva003_RReader`; * `tutorial-dataframe-df000_simple-py` (`RJittedDefine`); * `tutorial-dataframe-df002_dataModel-py` (`RJittedDefine`); * `tutorial-dataframe-df003_profiles-py`; * `tutorial-dataframe-df007_snapshot-py` (`RJittedDefine`); * `tutorial-dataframe-df010_trivialDataSource-py` (`RJittedDefine`); * `tutorial-dataframe-df014_CSVDataSource-py` (`RJittedDefine`); * `tutorial-dataframe-df016_vecOps-py` (`RJittedDefine`); * `tutorial-dataframe-df017_vecOpsHEP-py` (`RJittedDefine`); * `tutorial-dataframe-df019_Cache-py`; * `tutorial-dataframe-df021_createTGraph-py` (`RJittedDefine`); * `tutorial-dataframe-df024_Display-py`; * `tutorial-dataframe-df031_Stats-py` (`RJittedDefine`); * `tutorial-dataframe-df103_NanoAODHiggsAnalysis-py` (`RJittedDefine`); * `tutorial-dataframe-df105_WBosonAnalysis-py` (`RJittedDefine`); * `tutorial-dataframe-df106_HiggsToFourLeptons-py` (`RJittedDefine`); * `tutorial-dataframe-df107_SingleTopAnalysis-py` (`RJittedDefine`); * `tutorial-pyroot-pyroot004_NumbaDeclare-py` (`RJittedDefine`); * `tutorial-rcanvas-df105-py` (`RJittedDefine`); ; According to the stack traces, `~RDefineBase` / `~RJittedDefine` calls `RLoopManager::Deregister` on an already freed `RLoopManager`. Note: There may",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10007,8,['test'],"['test-dataframe-cache', 'test-dataframe-concurrency', 'test-dataframe-friends', 'test-dataframe-simple', 'test-dataframe-snapshot', 'test-datasource-more', 'test-datasource-trivial', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail due to a `heap-use-after-free`:; * `pyunittests-pyroot-roofit-roodatahist-ploton`; * `pyunittests-pyroot-roofit-roodataset-numpy`; * `tutorial-roofit-rf402_datahandling-py`; * `tutorial-roofit-rf403_weightedevts-py`; * `tutorial-roofit-rf712_lagrangianmorphfit-py`. The top of the stack trace (for the first test) is:; ```; 53: READ of size 5 at 0x6030003a2f70 thread T0; 53: #0 0x7f6595352d5c (/usr/lib64/clang/13.0.0/lib/linux/libclang_rt.asan-x86_64.so+0x71d5c); 53: #1 0x7f658fe16f2b in TString::TString(char const*) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:107:18; 53: #2 0x7f658d958fd9 in TNamed::TNamed(char const*, char const*) /home/jhahnfel/ROOT/src/core/base/inc/TNamed.h:37:50; 53: #3 0x7f656e97dc82 in RooAbsData::RooAbsData(RooStringView, RooStringView, RooArgSet const&, RooAbsDataStore*) /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsData.cxx:187:3; 53: #4 0x7f656ebe3990 in RooDataHist::RooDataHist(RooStringView, RooStringView, RooArgSet const&, RooAbsData const&, double) /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooDataHist.cxx:147:3; ```. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10008:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10008,4,['test'],"['test', 'tests']"
Testability,"After #10005 is merged, a couple of tests will fail with `Your application is linked against incompatible ASan runtimes.`:; * `roottest-python-cmdLineUtils-NameCyclesRootmvPrepareInput`; * `roottest-root-meta-genreflex-XMLParsing-*`; * `roottest-root-rint-BackslashNewline`. Note: There may be other problems in the tests after this issue is fixed. Please check locally with an instrumented build that the tests pass afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10017:36,test,tests,36,https://root.cern,https://github.com/root-project/root/issues/10017,3,['test'],['tests']
Testability,"After #10005 is merged, the test `TMVA-CrossValidation-Serialise` will fail due to a `stack-use-after-return`:; ```; 352: WRITE of size 4 at 0x7f7ff4e1b880 thread T0; 352: #0 0x7f800120c3b9 in frombuf(char*&, unsigned int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:310:7; 352: #1 0x7f800120c2bc in frombuf(char*&, int*) /home/jhahnfel/ROOT/src/core/base/inc/Bytes.h:442:48; 352: #2 0x7f7ffe26e9d0 in TBufferFile::ReadInt(int&) /home/jhahnfel/ROOT/src/io/io/inc/TBufferFile.h:401:4; 352: #3 0x7f80011965fc in TLeafI::ReadBasket(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TLeafI.cxx:165:9; 352: #4 0x7f8001055b29 in TBranch::ReadLeavesImpl(TBuffer&) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:2382:13; 352: #5 0x7f800106b4a9 in TBranch::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TBranch.cxx:1691:4; 352: #6 0x7f800125eea0 in TTree::GetEntry(long long, int)::$_3::operator()() const /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5628:23; 352: #7 0x7f800125d3c8 in TTree::GetEntry(long long, int) /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:5703:7; 352: #8 0x50a984 in TestContex::runApplicationPhase(TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:188:13; 352: #9 0x50b2a3 in TestCvSerialise(TMVA::Types::EMVA, TString, TString) /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:231:7; 352: #10 0x50b6e2 in TestCrossValidationSerialise() /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:240:7; 352: #11 0x50b8b3 in main /home/jhahnfel/ROOT/src/tmva/tmva/test/crossvalidation/TestCrossValidationSerialise.cxx:255:4; 352: #12 0x7f7ffad0aca2 in __libc_start_main (/lib64/libc.so.6+0x3aca2); 352: #13 0x42361d in _start (/home/jhahnfel/ROOT/build-clang-asan-debug/tmva/tmva/test/crossvalidation/testCrossValidationSerialise+0x42361d); 352:; 352: Address 0x7f7ff4e1b880 is located in stack of thread T0 at offset 128 in frame; 352: #0 0x7f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10010,1,['test'],['test']
Testability,"After #10005 is merged, the test `gtest-tree-treeplayer-test-treetreeplayertestUnit` will fail due to a `stack-use-after-scope`:; ```; 434: READ of size 4 at 0x7f17de5323ac thread T0; 434: #0 0x7f17e571e7e6 in TObject::TestBit(unsigned int) const /home/jhahnfel/ROOT/src/core/base/inc/TObject.h:187:72; 434: #1 0x7f17e571e7e6 in TTree::~TTree() /home/jhahnfel/ROOT/src/tree/tree/src/TTree.cxx:1011:23; 434: #2 0x5a626a in TTreeReaderBasic_EntryListAndEntryRange_Test::TestBody() /home/jhahnfel/ROOT/src/tree/treeplayer/test/basic.cxx:407:1. [...]. 434: Address 0x7f17de5323ac is located in stack of thread T0 at offset 940 in frame; 434: #0 0x5a4b3f in TTreeReaderBasic_EntryListAndEntryRange_Test::TestBody() /home/jhahnfel/ROOT/src/tree/treeplayer/test/basic.cxx:385; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10013:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10013,9,"['Test', 'test']","['TestBit', 'TestBody', 'test', 'test-treetreeplayertestUnit']"
Testability,"After #10005 is merged, the test `tutorial-fit-minuit2GausFit` will fail due to a `stack-use-after-scope`:; ```; 505: READ of size 8 at 0x7fa73033ca68 thread T0; 505: #0 0x7fa71035ba11 in ROOT::Minuit2::MnFcn::ErrorDef() const /home/jhahnfel/ROOT/src/math/minuit2/src/MnFcn.cxx:36:11; 505: #1 0x7fa71031298f in ROOT::Minuit2::InitialGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/InitialGradientCalculator.cxx:63:30; 505: #2 0x7fa7103e185a in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const /home/jhahnfel/ROOT/src/math/minuit2/src/Numerical2PGradientCalculator.cxx:39:27; 505: #3 0x7fa710305d22 in ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0::operator()(std::ostream&) const /home/jhahnfel/ROOT/src/math/minuit2/src/FumiliGradientCalculator.cxx:98:29; 505: #4 0x7fa7103059ff in decltype((fp0(fp)) , ((void)())) ROOT::Minuit2::MnPrint::HandleLambda<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::ostream&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&, int) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:171:7; 505: #5 0x7fa7103059ce in void ROOT::Minuit2::MnPrint::StreamArgs<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0 const&) /home/jhahnfel/ROOT/src/math/minuit2/inc/Minuit2/MnPrint.h:187:7; 505: #6 0x7fa71030576b in void ROOT::Minuit2::MnPrint::Log<ROOT::Minuit2::FumiliGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&) const::$_0>(ROOT::Minuit2::MnPrint::Verbosity, ROOT::Minuit2::FumiliGra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10014:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10014,1,['test'],['test']
Testability,"After #10005 is merged, the test `tutorial-legacy-thread-threadsh1` will fail due to a `heap-use-after-free`:; ```; 714: READ of size 4 at 0x6120000ce19c thread T0; 714: #0 0x7f6ac2652903 in TThread::Kill() /home/jhahnfel/ROOT/src/core/thread/src/TThread.cxx:597:8. [...]. 714: 0x6120000ce19c is located 92 bytes inside of 264-byte region [0x6120000ce140,0x6120000ce248); 714: freed by thread T0 here:; 714: #0 0x501778 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan-debug/bin/root.exe+0x501778); 714: #1 0x7f6ac8046364 in TStorage::ObjectDealloc(void*) /home/jhahnfel/ROOT/src/core/base/src/TStorage.cxx:362:4; 714: #2 0x7f6ac7fea2e8 in TObject::operator delete(void*) /home/jhahnfel/ROOT/src/core/base/src/TObject.cxx:1001:7; 714: #3 0x7f6ac26525c1 in TThread::~TThread() /home/jhahnfel/ROOT/src/core/thread/src/TThread.cxx:396:1; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10015:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10015,3,['test'],['test']
Testability,"After #10005 is merged, the test `tutorial-roofit-rf408_RDataFrameToRooFit-py` will fail due to a `heap-buffer-overflow`:; ```; 1177: READ of size 4 at 0x61e0000d0690 thread T15; 1177: #0 0x7f83a02588ec in TRandom3::Rndm() /home/jhahnfel/ROOT/src/math/mathcore/src/TRandom3.cxx:129:8; 1177: #1 0x7f83a024c8db in TRandom::Gaus(double, double) /home/jhahnfel/ROOT/src/math/mathcore/src/TRandom.cxx:306:11; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10016:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/10016,3,['test'],['test']
Testability,"After [those changes](https://github.com/root-project/root/commit/060e8d7afd8c47f61eee9f72004388b1a60d77f2), related to C++ modules on Windows, the following tests:. roottest-root-dataframe-writeFcc (Failed); roottest-root-dataframe-test_readFcc (Failed); roottest-root-dataframe-regression_snapshot (Failed); roottest-root-dataframe-test_glob (Failed); roottest-root-dataframe-test_reduce (Failed); roottest-root-dataframe-ctors (Failed). Are failing with the following errors:. ```; 1306: Processing C:/Users/sftnight/git/roottest/root/dataframe/test_ctors.C+...; 1306: Info in <TWinNTSystem::ACLiC>: creating shared library C:/Users/sftnight/build/release/roottest/root/dataframe/test_ctors_C.dll; 1306: In file included from input_line_9:9:; 1306: In file included from C:/Users/sftnight/git/roottest/root/dataframe/test_ctors.C:4:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDataFrame.hxx:20:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDF/RInterface.hxx:15:; 1306: In file included from C:/Users/sftnight/build/release/include\ROOT/RDF/ActionHelpers.hxx:25:; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1434:36: error: use of undeclared identifier 'M_PI'; 1306: T DeltaPhi(T v1, T v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1455:68: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(const RVec<T>& v1, const RVec<T>& v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1473:55: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(const RVec<T>& v1, T v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1491:55: error: use of undeclared identifier 'M_PI'; 1306: RVec<T> DeltaPhi(T v1, const RVec<T>& v2, const T c = M_PI); 1306: ^; 1306: C:/Users/sftnight/build/release/include\ROOT/RVec.hxx:1510:113: error: use of undeclared identifier 'M_PI'; 1306: RVec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6727:158,test,tests,158,https://root.cern,https://github.com/root-project/root/pull/6727,1,['test'],['tests']
Testability,"After a bit more testing, my previous though does not work. We need to link with everything `LLVMConfig.cmake` specifies, otherwise we get linking issues. Not a big problem anyway. https://github.com/root-project/root/pull/13420 is a minimal PR for master to fix both #12156 and #12152.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1670315705:17,test,testing,17,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1670315705,1,['test'],['testing']
Testability,"After changes to RDF's internal logic, some of the classes used; during the event loop were triggering unnecessary, slow cling nullptr; checks. This patch turns these checks off. This resolves a performance regression in v6.23 w.r.t. v6.22 for RDF; macros run via the interpreter (`root dfMacro.C`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7004:32,log,logic,32,https://root.cern,https://github.com/root-project/root/pull/7004,1,['log'],['logic']
Testability,"After considering with @lmoneta, I disabled the hanging stress test. It was meant to test the pub-sub connection between master and workers, but this is in fact already done in the `Messenger` constructor now. The ctor connection check is also more robust than the stress test, so it is unnecessary. I also removed remaining debug prints. Ready to merge, from my side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979458753:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979458753,3,['test'],['test']
Testability,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3222#issuecomment-453516511:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/3222#issuecomment-453516511,1,['test'],['test']
Testability,"After discussion with Axel, I am closing it in favour of changing #274 to generate data as a test (probably multiple tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3279#issuecomment-455479587:93,test,test,93,https://root.cern,https://github.com/root-project/root/pull/3279#issuecomment-455479587,2,['test'],"['test', 'tests']"
Testability,"After discussion, we decided to only keep pickle tests, whereas cloudpickle usecase is implicitly tested with distributed RDataFrame. See the sibling PR in rottest for the additional test of the serialization of the facade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7886#issuecomment-822398523:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/7886#issuecomment-822398523,3,['test'],"['test', 'tested', 'tests']"
Testability,"After fixing the CMake file, I am getting this error:; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): Model file PyTorchModelConvolution.pt not found!; Aborted (core dumped); make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:77: SofieCompileModels_PyTorch] Error 134; make[1]: *** [CMakeFiles/Makefile2:55168: tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/all] Error 2; make: *** [Makefile:183: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9119#issuecomment-967308800:235,test,test,235,https://root.cern,https://github.com/root-project/root/pull/9119#issuecomment-967308800,2,['test'],['test']
Testability,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:; * Scalar multithread case: ~2.3x; * Vectorial serial case: ~2.2x; * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-317646597:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-317646597,2,['test'],"['test', 'tests']"
Testability,"After further discussion with @Axel-Naumann and @vepadulano we converged on the following strategy:. - check whether rdfentry_ is used in the computation graph; - if yes, check whether the RDatasetSpec provides entry numbers for any of the input trees; - if there is at least one input tree without an entry number, log a warning and open the necessary files once at the beginning of the event loop to retrieve the missing entry numbers. Now we have enough information to tell each task what the global offset of its TTree is. We could also automatically generate a ""patched up"" version of the dataset spec after this first run (one that contains all TTree entry numbers) and suggest to users that they switch to that one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1551717718:316,log,log,316,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1551717718,1,['log'],['log']
Testability,"After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface.; The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller.; Here, the big cleanup happens:; - Most uses of the legacy interface are replaced with the new interface; - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5514:192,test,testing,192,https://root.cern,https://github.com/root-project/root/pull/5514,1,['test'],['testing']
Testability,"After going back and forth between different resolutions, I've decided to for now only allow integral-type fields as index fields (thus dropping floating-point types and strings), and storing their values as `std::uint64_t`. For now, we don't have any concrete examples where a non-integral field is desired to be used for indexing, so to stay within the scope of ""initial prototype"", I think this approach should suffice. . While it will solve the potential index collisions, storing the separate values will incur some memory overhead, but preliminary benchmarks indicate it should be manageable (to be followed-up, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116#issuecomment-2341196031:554,benchmark,benchmarks,554,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2341196031,1,['benchmark'],['benchmarks']
Testability,"After having install XPM headers, I tried to build root to not repeat the same error but had this:; Making include/compiledata.h; g++ -O2 -DNDEBUG -pipe -m64 -std=c++11 -Wshadow -Wall -W -Woverloaded-virtual -fPIC -Iinclude -pthread -MMD -MP -o core/base/src/TObject.o -c /home/julien/projects/root/core/base/src/TObject.cxx; In file included from include/TObject.h:16:0,; from /home/julien/projects/root/core/base/src/TObject.cxx:38:; include/RConfigure.h:39:2: error: invalid preprocessing directive #@; #@has_found_attribute_always_inline@ R__HAS_ATTRIBUTE_ALWAYS_INLINE /**/; ^. I searched about this error and found https://root-forum.cern.ch/t/compile-error-related-to-directive-in-rconfigure-h/23546/3. I also tried to follow the INSTALL file but:; 1) there's not ""root"" directory but there's a ""rootx"" directory; however ""cmake ../rootx"" (from <main dir>/build) displays some config and seems ok; 2) ""cmake --build ."" does nothing (no console message, no build) idem for ""make -j"". In brief, I don't know how to build :-(. I'm on x86-64 with Debian testing:; gcc (Debian 7.2.0-12) 7.2.1 20171025; cmake version 3.9.3; ldd (Debian GLIBC 2.24-17) 2.24",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1239#issuecomment-341512534:1057,test,testing,1057,https://root.cern,https://github.com/root-project/root/pull/1239#issuecomment-341512534,1,['test'],['testing']
Testability,"After https://github.com/root-project/root/pull/15900, there should be four failing tests due to Clad:; ```; The following tests FAILED:; 206 - gtest-math-mathcore-test-CladDerivatorTests (Failed); 232 - gtest-roofit-histfactory-test-testHistFactory (Failed); 235 - gtest-roofit-hs3-test-testRooFitHS3 (Failed); 267 - gtest-roofit-roofitcore-test-testRooFuncWrapper (Failed); ```. They seem somehow related to `__builtin_pow`. For this reason, to keep green builds, clad was disabled for mac-beta in https://github.com/root-project/root/pull/15910. ### Reproducer. Install `MacOSX15.0.sdk`, build ROOT and try to run all tests. ### ROOT version. `master`. ### Installation method. build from source. ### Operating system. macOS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15912:84,test,tests,84,https://root.cern,https://github.com/root-project/root/issues/15912,7,['test'],"['test-', 'test-CladDerivatorTests', 'test-testHistFactory', 'test-testRooFuncWrapper', 'tests']"
Testability,"After https://sft.its.cern.ch/jira/browse/ROOT-10849 is fixed, we are now left with three test failures:. * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead; * projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead; * projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6331:90,test,test,90,https://root.cern,https://github.com/root-project/root/issues/6331,1,['test'],['test']
Testability,"After merging #10030 to fix #10012, the following two tests still fail with `heap-use-after-free`:; * `gtest-tree-tree-test-testBulkApiVarLength`; * `gtest-tree-tree-test-testBulkApiSillyStruct`. Stack trace (for the first test) is:; ```; 418: READ of size 8 at 0x617000086a48 thread T0; 418: #0 0x7f4f110c9e74 in TTreeReader::~TTreeReader() (/home/jhahnfel/ROOT/build-clang-asan/lib/libTreePlayer.so+0x213e74); 418: #1 0x522fcf in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x522fcf). [...]. 418: 0x617000086a48 is located 328 bytes inside of 712-byte region [0x617000086900,0x617000086bc8); 418: freed by thread T0 here:; 418: #0 0x51f5a8 in operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51f5a8); 418: #1 0x7f4f0c6ce44f in TObject::operator delete(void*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x2f544f); 418: #2 0x7f4f0c8251a6 in TList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x44c1a6); 418: #3 0x7f4f0c80cb9f in THashList::Delete(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libCore.so+0x433b9f); 418: #4 0x7f4f0d640e30 in TDirectoryFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x285e30); 418: #5 0x7f4f0d678f08 in TFile::Close(char const*) (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bdf08); 418: #6 0x7f4f0d678050 in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd050); 418: #7 0x7f4f0d67898d in TFile::~TFile() (/home/jhahnfel/ROOT/build-clang-asan/lib/libRIO.so+0x2bd98d); 418: #8 0x52289f in BulkApiVariableTest_stdRead_Test::TestBody() (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x52289f). [...]. 418: previously allocated by thread T0 here:; 418: #0 0x51ea88 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan/tree/tree/test/testBulkApiVarLength+0x51ea88); 418: #1 0x7f4f0c71e9ce in TS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10096:54,test,tests,54,https://root.cern,https://github.com/root-project/root/issues/10096,9,"['Test', 'test']","['TestBody', 'test', 'test-testBulkApiSillyStruct', 'test-testBulkApiVarLength', 'testBulkApiVarLength', 'tests']"
Testability,"After merging #12380, @Nowakus noticed issues when trying to fill entries for a model that includes the ATLAS' `DataVector<T>` type.; This is because a proxied collection, notably those deriving from `TGenCollectionProxy`, apparently rely on an active object also for using iterators. This PR should fix the error below.; ```; TGenCollectionProxy FATAL Size> Logic error - no proxy object set.; ```. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12466:359,Log,Logic,359,https://root.cern,https://github.com/root-project/root/pull/12466,2,"['Log', 'test']","['Logic', 'tested']"
Testability,"After merging this PR, the following RooFit commits in ROOT `master` (as of `7b1e9929c2`) are the ones that are not in `v6-28-00-patches` (as of `e41ae090ff4`). ```txt; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; [RF] Add intiial minimizer interface for RooFuncWrapper.; [RF] Improve code in `MinuitFcnGrad`; [RF] Code improvements in tests for new TestStatistics; [RF] Composition over inheritance in Ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12630#issuecomment-1498932509:299,test,testRooFuncWrapper,299,https://root.cern,https://github.com/root-project/root/pull/12630#issuecomment-1498932509,2,['test'],"['test', 'testRooFuncWrapper']"
Testability,"After merging this PR, the following commits in ROOT `master` (as of `6afa795f7e`) are the ones that are not in `v6-28-00-patches` (as of `af1ddec8fd`).; ```txt; 6afa795f7e [RF][HS3] Return node& in `set_seq()` and `set_map()` of JSON interface; 715db60b77 [RF][HS3] Add Luminosity parameter to HS3 HistFactory; 6059aad9df [RF][HS3] Fix small inconsistencies between old and HS3 HistFactory; ed3e269a70 [RF][HS3] Achieve HistFactory JSON1 -> WS -> JSON2 closure; d682e4da87 [RF][HS3] Add ROOT version info to exported JSON files; 5053f612b6 [RF][HS3] Work around the spurious weightVar problem in Asimov data; 52c0cff578 [RF][HS3] Export binned RooDataSets just like the RooDataHists; 7f364da7aa [RF][HS3] Make `RooJSONFactoryWSTool::name()` more predictable; d8c8739b0b [RF][HS3] Use info from simultaneous pdfs to split combined datasets; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 2bb0f40e74 [ci] Enable more on mac13; make it a diff to global.txt.; ecf76dfbe7 Suppress gif format from StressGraphics (#12611); 41370dd378 [RF] Make it possible to use parameter titles in `RooAbsPdf::paramOn()`; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 3f925503b4 [RF] Fix memory leaks from `RooAbsL::getParameters()`; fb891723bc [RF][HS3] Avoid code duplication in `JSONFactories_RooFitCore`; 9a605d7f35 [RF][HS3] Make `combined_data_name` optional; b87c368b6a [RF][HS3] Keep all info necessary to reconstruct simultaneous pdfs; f9348f857c [RF][HS3] Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12620#issuecomment-1497698813:901,test,testRooFuncWrapper,901,https://root.cern,https://github.com/root-project/root/pull/12620#issuecomment-1497698813,1,['test'],['testRooFuncWrapper']
Testability,"After messing up my git repository, I closed pull request 796 and re-created this one with the same changes. This pull request is the result of work done by David Clark as a summer intern at Argonne:; To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. This change will prevent additional reads from occurring when reading events out of sequence.; By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets.; By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained - the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory. If TTree CacheDoClusterPrefetch is set to true, GetEntry() will load the entire cluster into memory, not just the first basket. For this, GetBasket() is modified to call a new function GetFreshCluster(). This function is responsible for returning a new basket and clearing out clusters from memory. Because clusters can have varying numbers of baskets, GetFreshCluster() reuses the first basket and clear the rest of the baskets. Reusing all baskets may be more efficient, but adds significant complexity and would not affect the typical case where each cluster only contains a single basket (all the baskets will be reused here). To test the performance of the change, I read 1000 entries (about 1 GB) from a tree of randomly generated data consisting of 2000 branches. Every read had a 2.5% chance of reading 10 entries back or a 2.5% chance of reading 10 entries forward from the current entry.; Without the change enables there were 1.5 GB read in 31102 read calls.; With MaxVirtualSize set to -1 and CacheDoClusterPrefetch true, there were 1.1 GB read in 90 read calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1065:1346,test,test,1346,https://root.cern,https://github.com/root-project/root/pull/1065,1,['test'],['test']
Testability,"After modifying the logic to catch the error and fail the transaction rather than unloading the decl directly, repeated attempts at template instantiation from pyroot now behaves similarly to with TInterpreter::Declare. The remaining problems with incomplete rollback are almost certainly related to the issue which @jalopezg-git referred to, and can be fixed by his forthcoming PR. Still TODO for this PR:; Capture and print the relevant errors and warnings during template instantiation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1475425727:20,log,logic,20,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1475425727,1,['log'],['logic']
Testability,"After more investigation, it is less clear to me how the valgrind report and the `AddDataset` function are related. Still, the logic of the function seems faulty any way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433#issuecomment-1910477019:127,log,logic,127,https://root.cern,https://github.com/root-project/root/issues/14433#issuecomment-1910477019,1,['log'],['logic']
Testability,"After rerunning `cmake` and rebuilding so that the new path is taken in consideration, the tests that fails are now only:; ```; 1203 - tutorial-dataframe-df102_NanoAODDimuonAnalysis-py (Failed); 1205 - tutorial-dataframe-df104_HiggsToTwoPhotons-py (Failed); 1261 - tutorial-rcanvas-df104-py (Failed); 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_notebook (Failed); 1567 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 1568 - roottest-python-JupyROOT-tpython_notebook (Failed); 1664 - roottest-python-distrdf-backends-test_all (Failed); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242#issuecomment-2290087541:91,test,tests,91,https://root.cern,https://github.com/root-project/root/issues/16242#issuecomment-2290087541,1,['test'],['tests']
Testability,"After rerunning tests, I confirm RDF and TTreeReader read the same amount of bytes with this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3001#issuecomment-439819594:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/3001#issuecomment-439819594,1,['test'],['tests']
Testability,"After reviewing the implementation of `RPageSinkBuf` and starting to prototype parallel RNTuple writing, I would like to propose moving the code related to descriptor building and serialization into a new class. The main observation here is that ""wrapping"" `RPageSink`s do not need that functionality, only the ""final"" sink that actually writes to files or DAOS. For now, I named the class `RPagePersistentSink`, but that's of course up for debate. Other options include ""final"" (even though that is ambiguous in the context of a class hierarchy) and ""serializing"". The first two commits may be useful independent of the rest of the series; the one to ""Avoid calling `PageSink::UpdateSchema` from `RPageSinkBuf`"" depends on moving the `Commit` implementations first (which access `fOpenColumnRanges` and `fOpenPageRanges`. *If* we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two `virtual` function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142:908,benchmark,benchmark,908,https://root.cern,https://github.com/root-project/root/pull/14142,1,['benchmark'],['benchmark']
Testability,After some discussion with Axel we decided that there is no point to; assert here. This feature here is not related to C++ modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1017:70,assert,assert,70,https://root.cern,https://github.com/root-project/root/pull/1017,1,['assert'],['assert']
Testability,"After some investigation, it seems this issue is due to the priority level assigned to the two overloads. Specifically, the logic at https://github.com/root-project/root/blob/896940ef8c0936ad394a1cf6b98d1d8fbaabbfff/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx#L408-L412. seems to aim at assigning higher priority to class types that have a deeper inheritance chain. In the reproducer above, this should translate to class `B` having priority 1 (because it has 1 base class `A`) and class `C` having priority 2 (because it has 2 base classes `A,B`). The function this logic relies on ([GetNumBases](https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1212)) in turn calls [TClass::GetListOfBases](https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/core/meta/src/TClass.cxx#L3620) which does not return all the bases in the full inheritance chain of the class, rather just the direct bases of a class. So in this case:; ```; >>> import ROOT; >>> ROOT.gInterpreter.Declare(; ... '''; ... class A {};; ... class B: public A {};; ... class C: public B {};; ... '''); True; >>> c = ROOT.TClass.GetClass(""C""); >>> b = ROOT.TClass.GetClass(""B""); >>> len(c.GetListOfBases()); 1; >>> len(b.GetListOfBases()); 1; ```. In this case, if TClass:GetListOfBases returned a list of size 2 for class `C`, the correct overload would get assigned a higher priority and thus would be chosen at runtime. There is no clear general solution, but it is worth highlighting the cause of the issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8817#issuecomment-897023454:124,log,logic,124,https://root.cern,https://github.com/root-project/root/issues/8817#issuecomment-897023454,2,['log'],['logic']
Testability,"After some more thought, I decided to directly removed any usage of the headnode internal functions from the backend class and also from the Proxy module. The head node already had all the information needed to represent the computation graph locally, split the dataset in logical ranges, reconstruct and execute the graph in the distributed tasks. Taking inspiration from the RLoopManager class, the head node now also handles the execution, since anyway it has a reference to the backend and everything else needed already embedded. To clarify all the ingredients needed from a head node type, I also made it an abstract class with the methods that subclasses should define",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10560#issuecomment-1124072740:273,log,logical,273,https://root.cern,https://github.com/root-project/root/pull/10560#issuecomment-1124072740,1,['log'],['logical']
Testability,"After testing it, the IS_SYMLINK part is no longer necessary.; It's also better to just move the check as early as possible,; and not try to remove anything, as that doesn't work anyway,; since CMake creates the files and directories only at the end.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4132:6,test,testing,6,https://root.cern,https://github.com/root-project/root/pull/4132,1,['test'],['testing']
Testability,"After the commits of 14.10.2020, several roofit tutorials fail with this kind of error:; ```; Info in <TWinNTSystem::ACLiC>: creating shared library C:/build/night/LABEL/windows10/SPEC/default/V/master/build/runtutorials/MyPdfV3_cxx.dll; Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\night\LABEL\windows10\SPEC\default\V\master\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 73; ```; So let's disable them until the problem is understood and fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6647:238,Assert,Assertion,238,https://root.cern,https://github.com/root-project/root/pull/6647,1,['Assert'],['Assertion']
Testability,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```; cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja; ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict ; ------------ | ---------- | ------------ | ------------- | ------------ | ------------- ; after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 ; after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB ; Replacing the pch with modules add (as expected as the moment) **30** MB ; With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB;  Replacing the pch with modules add (as expected as the moment) **77** MB ; With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,;  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-473370043:116,test,test,116,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-473370043,1,['test'],['test']
Testability,"After the latest LLVM upgrade, changes in cling's symbol resolution; logic cause some unresolved symbol failures in RDF jitting. Adding RJittedAction to the rootmap should help cling autoloading; and work around the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7586:69,log,logic,69,https://root.cern,https://github.com/root-project/root/pull/7586,2,['log'],['logic']
Testability,"After the latest commit, I tested this on my Mac machine and I see the following categories of errors for the test; ```; Traceback (most recent call last):; File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 113, in test_XGBRegression_branchless; _test_XGBRegression(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""); File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 39, in _test_XGBRegression; ROOT.TMVA.Experimental.SaveXGBoost(xgb, ""myModel"", ""testXGBRegression{}.root"".format(label), num_inputs=10); File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 93, in SaveXGBoost; fill_arrays(tree, 0, len_inputs * i_tree, len_thresholds * i_tree); File ""/Users/vpadulan/Programs/rootproject/rootbuild/xgboost-testing/lib/ROOT/_pythonization/_tmva/_tree_inference.py"", line 72, in fill_arrays; thresholds[thresholds_base + index] = node[""leaf""]; ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: float& std::vector<float>::operator[](vector<float>::size_type __n) =>; TypeError: must be real number, not NoneType; ```. ```; ======================================================================; FAIL: test_XGBBinary_branchless (__main__.RBDT.test_XGBBinary_branchless); Test BranchlessForest backend for model trained with binary XGBClassifier; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 77, in test_XGBBinary_branchless; _test_XGBBinary(""TMVA::Experimental::BranchlessForest<float>"", ""branchlessForest""); File ""/Users/vpadulan/Programs/rootproject/rootsrc/tmva/tmva/test/rbdt_xgboost.py"", line 29, in _test_XGBBinary; np.testing.assert_array_almost_equal(y_xgb, y_bdt); File ""/opt/homebrew/Cellar/python@3.12/3.12.2_1/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15183#issuecomment-2046134260:27,test,tested,27,https://root.cern,https://github.com/root-project/root/pull/15183#issuecomment-2046134260,7,['test'],"['test', 'testXGBRegression', 'tested', 'testing']"
Testability,"After the new batch interface was merged, one can rewrite the Romberg integrator to use batch evaluations. It turned out that the old integrator has a bug: It sometimes stops too early. Here's the performance of different integrators as extracted from tests that come via this PR. The numbers are the relative deviation from the analytic solution:; ```; Integrating log(a*x), relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0016594	0.00161012	0.00193414	0.00225071	0.0168282	t=0.04; 	new:	0.000505525	0.00049051	0.000589222	0.000685661	0.0168282	t=0.03; 	ROOT:	3.45732e-08	3.36752e-08	4.03318e-08	4.62674e-08	0.0168282	t=0.14; Integrating log(a*x), relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	2.45769e-05	2.45769e-05	2.4577e-05	2.4577e-05	2.4577e-05	t=0.19; 	new:	3.25114e-07	3.25114e-07	3.25115e-07	3.25115e-07	2.4577e-05	t=0.41; 	ROOT:	7.94638e-14	7.95337e-14	7.9692e-14	7.98497e-14	2.4577e-05	t=0.3; Old integrator reached poor precision: 2.45769e-05 +/- 4.91464e-11 instead of 1e-06; Integrating log(a*x), relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.383",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:252,test,tests,252,https://root.cern,https://github.com/root-project/root/pull/6632,3,"['log', 'test']","['log', 'tests']"
Testability,"After the official release, we tested and found there is no slowdown of the fit. Thanks a lot for the updates and reply! I think we can close the issue now;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15479#issuecomment-2142343791:31,test,tested,31,https://root.cern,https://github.com/root-project/root/issues/15479#issuecomment-2142343791,1,['test'],['tested']
Testability,"After the recent updates to ROOT master, only these test failures remain:; ```txt; 384:test-stressgraphics-chrome; 1403:tutorial-roofit-rf617_simulation_based_inference_multidimensional-py; 1404:tutorial-roofit-rf618_mixture_models-py; 1634:roottest-python-cling-class; 1726:roottest-python-numba-numba; 1731:roottest-python-regression-regression; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16748#issuecomment-2459588584:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2459588584,2,['test'],"['test', 'test-stressgraphics-chrome']"
Testability,"After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing.; Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4948:111,test,tests,111,https://root.cern,https://github.com/root-project/root/pull/4948,1,['test'],['tests']
Testability,"After the upgrade to LLVM 13, the test `roottest-root-meta-tclass-execInitOrder` will *crash* with AddressSanitizer instrumentation:; ```; 2187: Processing /home/jhahnfel/ROOT/src/roottest/root/meta/tclass/execInitOrder.cxx+...; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Derived is found to inherit from TObject; 2187:; 2187: *** Break *** segmentation violation; 2187:; 2187:; 2187:; 2187: ===========================================================; 2187: There was a crash.; 2187: This is the entire stack trace of all threads:; 2187: ===========================================================; 2187: #0 0x00007f2a616e15db in waitpid () from /lib64/libc.so.6; 2187: #1 0x00007f2a61643ce7 in do_system () from /lib64/libc.so.6; 2187: #2 0x00007f2a630125cb in TUnixSystem::StackTrace (this=<optimized out>) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:2395; 2187: #3 0x00007f2a6301c2df in TUnixSystem::DispatchSignals (this=0x617000000080, sig=kSigSegmentationViolation) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:3615; 2187: #4 <signal handler called>; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:34,test,test,34,https://root.cern,https://github.com/root-project/root/issues/11867,1,['test'],['test']
Testability,"After these make fixes for the tests program, I think the PR is good to be merged.; Thank you Anirudh for this nice contribution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757#issuecomment-689452080:31,test,tests,31,https://root.cern,https://github.com/root-project/root/pull/5757#issuecomment-689452080,1,['test'],['tests']
Testability,"After this bug fix: https://github.com/root-project/root/pull/3914. Testing now in a newer version, ROOT 6.24/07. Operating system:; ```; cat /etc/redhat-release. CentOS Linux release 7.8.2003 (Core); ```. ROOT version:; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.24/07 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 21 2022, 09:57:00 |; | From tag , 2 September 2021 |; | With g++ (GCC) 10.3.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. Setup:; ```; scram list -a | grep CMSSW_12_4_0; export SCRAM_ARCH=slc7_amd64_gcc10; cmsrel CMSSW_12_4_0; cd CMSSW_12_4_0/src; cmsenv; ```. This works without errors in ROOT 6.24/07:; ```; hadd -v 0 target.root file_1.root file_2.root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11372#issuecomment-1247078921:68,Test,Testing,68,https://root.cern,https://github.com/root-project/root/issues/11372#issuecomment-1247078921,1,['Test'],['Testing']
Testability,"After updating ROOT to 026a1a701b, the first error is gone. But dictionary generation still fails due to ""Missing lambda call operator"". Build log: [link](https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-2c2cf9/30616/build.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240#issuecomment-1429784113:143,log,log,143,https://root.cern,https://github.com/root-project/root/issues/12240#issuecomment-1429784113,2,['log'],['log']
Testability,"After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11601:77,test,tests,77,https://root.cern,https://github.com/root-project/root/issues/11601,2,['test'],['tests']
Testability,"Again, an [unrelated test failed](https://phsft-jenkins.cern.ch/job/root-pullrequests/200/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/393#issuecomment-288094528:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/393#issuecomment-288094528,1,['test'],['test']
Testability,"Agreed, that a test notebook is merited. To be explicit this should add support for the following:; * TGraph2D; * TH3; * TGraphPolar; * TProfile; * TF2; * TGeo; * TH2Poly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1191#issuecomment-336920814:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/1191#issuecomment-336920814,1,['test'],['test']
Testability,"Ah I start to remember why it's so complicated. We set the flags in the `SetUp(Linux|MacOS|Windows).cmake` scripts called in the `CheckCompiler.cmake` [here](https://github.com/root-project/root/blob/master/CMakeLists.txt#L130). But we have to call this after figuring out all the build flags, which is way after we call `project(ROOT)` [here](https://github.com/root-project/root/blob/master/CMakeLists.txt#L32). The questions is for me now whether we can ""just"" move the `project(ROOT)` after figuring out the build flags and then use the `*_INIT` instead of forcing the variable. Currently, we have to force it because otherwise we cannot change the defaults for which we want asserts in `RelWithDebInfo`. Edit: Moving `project(ROOT)` is definitely not an option because then nothing works in cmake, e.g. `find_package`. And now we are in a deadlock 😬",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-822270832:680,assert,asserts,680,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-822270832,1,['assert'],['asserts']
Testability,Ah ok ... fair enough... if it is already done that way elsewhere do it by testing fGLDevice only ... so your first implementation was correct. Sorry for the noise.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8190#issuecomment-844111636:75,test,testing,75,https://root.cern,https://github.com/root-project/root/pull/8190#issuecomment-844111636,1,['test'],['testing']
Testability,"Ah this patch is doing essentially the same thing as #2848, so we have to fix this cmsUnload test first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-433335760:93,test,test,93,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-433335760,1,['test'],['test']
Testability,Ah yes I understand now. Actually it seems to work fine :-). I will do one or two more tests and will commit it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/161#issuecomment-228050270:87,test,tests,87,https://root.cern,https://github.com/root-project/root/pull/161#issuecomment-228050270,1,['test'],['tests']
Testability,"Ah yes, I had not thought about the py2 compatibility! I have now pushed the fix for that. Hope that works. . Unfortunately I don't have access to the details of the failing tests. Is there something else to do for the other test that @hageboeck mentioned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7314#issuecomment-794102177:174,test,tests,174,https://root.cern,https://github.com/root-project/root/pull/7314#issuecomment-794102177,2,['test'],"['test', 'tests']"
Testability,"Ah yes, good point, the second category only needs one possible value. It's just important that there are different values for the first (inner) category such that I can test that the different values are correctly picked up from the proto dataset.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12020#issuecomment-1381067386:170,test,test,170,https://root.cern,https://github.com/root-project/root/issues/12020#issuecomment-1381067386,1,['test'],['test']
Testability,Ah yes. Well I've implemented this specially for a test! It will be merged soon too :+1:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8722#issuecomment-885122492:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/8722#issuecomment-885122492,1,['test'],['test']
Testability,"Ah, I didn't have the patience to run all the tests locally so I missed those. I have update the definitions of the template functions to only have one non-defaulted template argument. This should make for a truly transparent change. On the other hand in deduced contexts it should now be possible to have different floating point types. Maybe there should be an actual test that checks that when invoked from an RDataFrame from python. I could not find an immediate best place for that, but maybe you have one in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15101#issuecomment-2033923944:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/15101#issuecomment-2033923944,2,['test'],"['test', 'tests']"
Testability,"Ah, I need to update a test reference, the error message slightly changed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307#issuecomment-1235374946:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/11307#issuecomment-1235374946,1,['test'],['test']
Testability,"Ah, and the snapshot itself has some problems that are being worked on. If the TBufferMerger tests are fine, this PR should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333490920:93,test,tests,93,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333490920,1,['test'],['tests']
Testability,"Ah, sorry @AdvaitDhingra . Here it is:. ```; [ RUN ] TString.Basics; Error in <TString::Replace>: Negative number of replacement characters!; /Users/sftnight/build/workspace/root-pullrequests-build/root/test/unit_testing_support/ROOTUnitTestSupport.h:79: Failure; Value of: Seen; Expected: starts with ""Error in <TString::Append>: ""; Actual: ""Error in <TString::Replace>: Negative number of replacement characters!\n""; /Users/sftnight/build/workspace/root-pullrequests-build/root/test/unit_testing_support/ROOTUnitTestSupport.h:86: Failure; Value of: Seen; Expected: is equal to ""Error in <TString::Append>: Negative length!\n""; Actual: ""Error in <TString::Replace>: Negative number of replacement characters!\n""; ```. (you can also run the test locally if you compile ROOT with your changes). Anyway, looks like our expected error message does not match the actual error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7132#issuecomment-778183289:203,test,test,203,https://root.cern,https://github.com/root-project/root/pull/7132#issuecomment-778183289,3,['test'],['test']
Testability,"Ah, sorry, I just realized that on my Windows system I just installed it from the website. I have switched to my Ubuntu system, where I have built ROOT from source, and I now get this error:; ```; advait@advait-dhingra:~/Documents/Coding/HeatSimulation$ cmake .; CMake Error at CMakeLists.txt:11 (find_package):; By not providing ""FindROOT.cmake"" in CMAKE_MODULE_PATH this project has; asked CMake to find a package configuration file provided by ""ROOT"", but; CMake did not find one. Could not find a package configuration file provided by ""ROOT"" with any of; the following names:. ROOTConfig.cmake; root-config.cmake. Add the installation prefix of ""ROOT"" to CMAKE_PREFIX_PATH or set; ""ROOT_DIR"" to a directory containing one of the above files. If ""ROOT""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; See also ""/home/advait/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". ```; I have root in my PATH (as the command `root`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982#issuecomment-825609610:961,log,log,961,https://root.cern,https://github.com/root-project/root/issues/7982#issuecomment-825609610,1,['log'],['log']
Testability,"Ah, sorry, I was looking at the numbers for ReadUnLock. The differences between Std14 and Std17 are at least partly noise I think. I also have an implementation working now based on ```tbb::enumerable_thread_specific``` (https://software.intel.com/content/www/us/en/develop/documentation/tbb-documentation/top/intel-threading-building-blocks-developer-reference/thread-local-storage/enumerablethreadspecific-template-class.html) . Now in principle what tbb is doing underneath should not so different from ``` TTHREAD_TLS_DECL```, at least for the explicit pthread-based version, so we can think about whether this is really safe from deadlocks, but the numbers looks pretty good. In the test output below ""TBB"" is using ```tbb::enumerable_thread_specific<LocalCounts>``` and ""TBBUnique"" is using ```tbb::enumerable_thread_specific<LocalCounts, tbb::cache_aligned_allocator<LocalCounts>, tbb::ets_key_per_instance>``` which is limited to a small number of instances per process (but not strictly to 1). If you would be willing to have tbb as a dependency for core/thread then I can add this (and maybe even remove the shared_mutex versions). ```; 76: Test command: /usr/bin/cmake ""-DCMD=/scratchnvme/bendavid/rootdev2/build/core/thread/test/corethreadtestUnit"" ""-DCWD=/scratchnvme/bendavid/rootdev2/build/core/thread/test"" ""-DSYS=/scratchnvme/bendavid/rootdev2/build"" ""-P"" ""/scratchnvme/bendavid/rootdev2/root/cmake/modules/RootTestDriver.cmake""; 76: Environment variables: ; 76: ROOT_HIST=0; 76: Test timeout computed to be: 1500; 76: Running main() from /scratchnvme/bendavid/rootdev2/build/googletest-prefix/src/googletest/googletest/src/gtest_main.cc; 76: [==========] Running 126 tests from 3 test suites.; 76: [----------] Global test environment set-up.; 76: [----------] 6 tests from InterpreterLock; 76: [ RUN ] InterpreterLock.ConcurrentCalc; 76: [ OK ] InterpreterLock.ConcurrentCalc (87 ms); 76: [ RUN ] InterpreterLock.ReadLocks; 76: [ OK ] InterpreterLock.ReadLocks (78 ms); 76: [ RUN ] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:688,test,test,688,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['test'],['test']
Testability,"Aha, now I understand more of the rationale behind the code. Updating a class `K` seems to work, at least `GetDataMember(""i"")` returns something after giving the full definition (while it is `nullptr` before) - I hope this is tested somewhere? I didn't check, if not we should definitely have a test case here!. Regarding the namespaces, the following test gives what I would expect:; ```; root [0] namespace std { namespace ns { } }; root [1] auto c = TClass::GetClass(""ns"");; root [2] c->GetDataMember(""a""); (TDataMember *) nullptr; root [3] namespace std { namespace ns { int a = 0; } }; root [4] c->GetDataMember(""a""); (TDataMember *) 0x27eed80; root [5] namespace ns { int b = 1; }; root [6] c->GetDataMember(""b""); (TDataMember *) nullptr; ```. The only thing that doesn't work is getting a `TClass` of `::ns`, ie; ```; root [7] TClass::GetClass(""ns"")->GetDataMember(""b""); (TDataMember *) nullptr; ```. I think this is fine since you cannot use `ns` anyway:; ```; root [8] ns::b; ROOT_prompt_8:1:1: error: reference to 'ns' is ambiguous; ns::b; ^; ROOT_prompt_5:1:11: note: candidate found by name lookup is 'ns'; namespace ns { int b = 1; }; ^; ROOT_prompt_3:1:27: note: candidate found by name lookup is 'std::ns'; namespace std { namespace ns { int a = 0; } }; ^; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-939752234:226,test,tested,226,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-939752234,3,['test'],"['test', 'tested']"
Testability,Aligned with solution proposed upstream and added a test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5507#issuecomment-622283312:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/5507#issuecomment-622283312,1,['test'],['test']
Testability,All changes addressed. Checking again the tests and formatting...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1048#issuecomment-331985594:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/1048#issuecomment-331985594,1,['test'],['tests']
Testability,"All columns created during late model extension need to have their page and column ranges synthesized during reading. However, only *deferred* columns (i.e., principal columns of top-level fields) also require zero pages. This change aims to make this distinction more clear. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15786:282,test,tested,282,https://root.cern,https://github.com/root-project/root/pull/15786,1,['test'],['tested']
Testability,"All comments addressed, hopefully, and new code pushed. Waiting for the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16147#issuecomment-2260672947:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/16147#issuecomment-2260672947,1,['test'],['tests']
Testability,All failing tests have nothing to do with PR.; One can merge it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13523#issuecomment-1692895915:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/13523#issuecomment-1692895915,1,['test'],['tests']
Testability,"All good. @xvallspl do all commits build (i.e. I can do a rebase and merge), or can I do a squash (i.e. all commits actually amount to one logical change) or do you want to rebase and fix up commits on your side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5582#issuecomment-642482115:139,log,logical,139,https://root.cern,https://github.com/root-project/root/pull/5582#issuecomment-642482115,1,['log'],['logical']
Testability,"All kinds of classes, supported for writing, now also can be read from JSON.; Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON.; For the moment it made private, later one can put it in ROOT include directories.; Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. ; New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462:378,test,test,378,https://root.cern,https://github.com/root-project/root/pull/1462,2,['test'],"['test', 'testcases']"
Testability,"All of the code example/output in the PR description corresponds to with this PR included. Repeating the lookup without diagnostic suppression doesn't give the correct error message again; (this corresponds to the ""call attempt 1"" case in the output from test.py in the PR description). ie with superfluous debug output snipped out:; ```; declare ret True; creating helper; calling helper; call attempt 0; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug3/test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; /home/b/bendavid/pyrootdebug3/test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > >' requested here; /home/b/bendavid/pyrootdebug3/test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~; /home/b/bendavid/pyrootdebug3/test.h:18:10: error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; return helper();; ^~~~~~; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > *>' requested here; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; Failed to instantiate ""call_helper(Helper<vector<double> >*)""; Failed to instantiate ""call_helper(Helper<vector<double> >)""; call attempt 1; /home/b/bendavid/pyrootdebug3/test.h:18:10: error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; return helper();; ^~~~~~; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1460106107:255,test,test,255,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1460106107,4,['test'],['test']
Testability,"All ok, sorry for the delay. Just for reference a test with beryllium. quantity | G4 | TGeo | TGeo(G4); --- | --- | --- | ---; RadLen | 35.2 | 34.4 | 35.2; IntLen | 39.4 | 39.4 | 39.4. Will this go to 6.12?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1302#issuecomment-343186267:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/1302#issuecomment-343186267,1,['test'],['test']
Testability,All platforms fail b/c a new test was added in roottest and the PR was not rebased: the code was rebased.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16205#issuecomment-2282194856:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/16205#issuecomment-2282194856,1,['test'],['test']
Testability,"All remaining CI issues are not caused by this PR. If someone wants to review again, feel free. If not, I think we can merge this now. Note that I tried to keep commit history clean and used fixup commits + rebase to also make sure all commits compile and pass tests so it should be possible to merge without squashing. Since I made a few changes in the calculation area (Kahan sums, batch computation) which could affect precision and hence results (and hence tests) it would be nice if the commit history of this PR could be included fully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-918891228:261,test,tests,261,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-918891228,2,['test'],['tests']
Testability,All test failures are unrelated to RooFit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3509#issuecomment-472801704:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/3509#issuecomment-472801704,1,['test'],['test']
Testability,All test passed. This is ready to be merged in conjunction with root-project/roottest#447,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5028#issuecomment-587921733:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/5028#issuecomment-587921733,1,['test'],['test']
Testability,All test passes as reported my the related roottest PR: https://github.com/root-project/roottest/pull/906#issuecomment-1265687117.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11446#issuecomment-1267209295:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/11446#issuecomment-1267209295,1,['test'],['test']
Testability,"All test passing, failure is due to UNSTABLE. @Axel-Naumann this is ready to merge",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4835#issuecomment-578984122:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/4835#issuecomment-578984122,1,['test'],['test']
Testability,All tests are working now - one can merge PR.; Problem with `TObject::IsOnHeap()` connected with `= default` specifier for default object constructor. It MUST be avoided for any ROOT classes derived from TObject.; I will provide PR soon,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4305#issuecomment-526578602:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/4305#issuecomment-526578602,1,['test'],['tests']
Testability,All tests failures has nothing to do with PR - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-599373277:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-599373277,1,['test'],['tests']
Testability,All tests now are passing (not passing were disabled),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2815#issuecomment-430899124:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/2815#issuecomment-430899124,1,['test'],['tests']
Testability,"All tests pass except some which are related to something very different. A note about code formatting: I applied the suggestions of the bot, all but one, since I refuse to spreade a lambda function in a lambda function on two subsequent lines: the readability is severely affected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707739669:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707739669,1,['test'],['tests']
Testability,"All tests pass for `ctest -R '(rvec|vecops|numpy|rdf|dataframe)'`, I guess that's fine for now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806508603:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806508603,1,['test'],['tests']
Testability,"All tests passed, including my local ones, so I just merged this in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/608#issuecomment-306464399:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/608#issuecomment-306464399,1,['test'],['tests']
Testability,All tests remain exactly the same - just invocation order at the end little bit changed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16579#issuecomment-2388579658:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/16579#issuecomment-2388579658,1,['test'],['tests']
Testability,"All the RooFit tutorials were replicated in the `root/roofitcore/test` directory to be used as tests, which are never run as part of the unit tests. Actually, the RooFit tutorials made their way into a unit test in the `stressRooFit` test suite, which is run by `ctest` also in the CI. That means the tutorial files in `root/roofitcore/test` are redundant, and also badly out of sync with the actual tutorials and stressRooFit because they are never tested automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11361:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/11361,7,['test'],"['test', 'tested', 'tests']"
Testability,"All the fields are tested one way or another, but not all combinations. The problem here was specifically vector of bitset, not bitset alone. But we did discuss that it's time to give the unit tests more structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16595#issuecomment-2391482415:19,test,tested,19,https://root.cern,https://github.com/root-project/root/pull/16595#issuecomment-2391482415,2,['test'],"['tested', 'tests']"
Testability,All the test failure left are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11334#issuecomment-1243627660:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/11334#issuecomment-1243627660,1,['test'],['test']
Testability,All the test failures are timeouts and should not be related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568#issuecomment-362276546:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/1568#issuecomment-362276546,1,['test'],['test']
Testability,All the unit test failures appear to be due to the extra bytes serialized in the tree. Working on an equivalent `roottest` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1217#issuecomment-338427667:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/1217#issuecomment-338427667,1,['test'],['test']
Testability,"Allocate unique pointer pointees with `new`, so that it matches the default deleter. This appears actually already in our unit tests when ran under valgrind. In general, it would be useful to regularly run the unit tests under valgrind. @Dr15Jones FYI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16737:127,test,tests,127,https://root.cern,https://github.com/root-project/root/pull/16737,2,['test'],['tests']
Testability,Allow for globbing on Google Test sources,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/633:29,Test,Test,29,https://root.cern,https://github.com/root-project/root/pull/633,1,['Test'],['Test']
Testability,Allow parallel build of tests from roottest on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10247:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/10247,1,['test'],['tests']
Testability,"Allow users to adjust the number of entries per cluster and the number of elements per page using `RNTupleWriteOptions`. ; I also took the opportunity to fix some whitespace errors in `RNTupleOptions.hxx`. Fixes #7853. Usage (see tests as well): ; ```cpp; RNTupleWriteOptions opt;; opt.SetNClusterEntries(100000);; opt.SetNElementsPerPage(40000);; auto ntuple = RNTupleWriter::Recreate(; std::move(model), ""ntuple"", fileGuard.GetPath(), opt; );; ```. As was pointed out in https://github.com/root-project/root/pull/7112#issue-564081466, there are some `NElementsPerPage` inputs that could cause compression problems (i.e. those where the total page memory is larger than `0xffffff`). Should we have some error checking at the `RNTupleWriteOptions` level? Or maybe this should be considered a bug on the compression side of things. cc @jalopezg-r00t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8113:230,test,tests,230,https://root.cern,https://github.com/root-project/root/pull/8113,1,['test'],['tests']
Testability,Allowed `RVec` shorthand aliases in Numba.Declare.; Aliases are applied in `tutorials/pyroot/pyroot004_NumbaDeclare.py`. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #9898,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9950:127,test,tested,127,https://root.cern,https://github.com/root-project/root/pull/9950,1,['test'],['tested']
Testability,"Allows for direct processing of sqlite files under HTTP(S) URLs provided that Davix is available. Replaces #2578. I think it would be nice to have a unit test for reading of remote files. Unfortunately, Davix does not understand the `http:///path/to/file` trick to use a URL on local paths. Can we upload tree/dataframe/test/RSqliteDS_test.sqlite to https://root.cern.ch/... for testing?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2608:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/2608,3,['test'],"['test', 'testing']"
Testability,Allows for reading integers from other integer types. Includes bounds checking where necessary. The tests are a little mechanical but I'm not sure if the code would improve with more templates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16607:100,test,tests,100,https://root.cern,https://github.com/root-project/root/pull/16607,1,['test'],['tests']
Testability,Allows to configure CUDA sm level for Cling CUDA tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7190:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/7190,1,['test'],['tests']
Testability,"Almost all the tests in `testLikelihoodJob.cxx` have the same behavior. If we change the random seed, a bunch of them fail. We should change those to `EXPECT_DOUBLE_EQ` as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12832#issuecomment-1568457440:15,test,tests,15,https://root.cern,https://github.com/root-project/root/issues/12832#issuecomment-1568457440,2,['test'],"['testLikelihoodJob', 'tests']"
Testability,"Almost, now I have a different problem having to do with json:; ```; [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o; In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:; /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous; 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n); | ^~~~~~~~; In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,; from /usr/include/nlohmann/detail/exceptions.hpp:22,; from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,; from /usr/include/nlohmann/adl_serializer.hpp:14,; from /usr/include/nlohmann/json.hpp:35:; /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’; 61 | using json = basic_json<>;; | ^~~~; .....; ```; Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1207464193:144,Test,TestStatistics,144,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1207464193,1,['Test'],['TestStatistics']
Testability,"Already done :) The PR message is generated from the commit message!. Cheers,; Kim. > On 30 Apr 2018, at 18:17, Guilherme Amadio <notifications@github.com> wrote:; > ; > Could you please add to the commit message the description of your changes above? It's useful when looking at the log. Thanks.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-385454644:284,log,log,284,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-385454644,1,['log'],['log']
Testability,"Alright the bot is not helping, travis is green, I tested locally and everything works as expected, and the changes are small. I will go ahead and merge and keep a close eye on the incrementals for any issue that might arise on platforms different than my own.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1023#issuecomment-330819310:51,test,tested,51,https://root.cern,https://github.com/root-project/root/pull/1023#issuecomment-330819310,1,['test'],['tested']
Testability,"Alright, I added dictionary generation and fixed the tutorial. It now runs fine, as well as the tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/533#issuecomment-300310989:96,test,tests,96,https://root.cern,https://github.com/root-project/root/pull/533#issuecomment-300310989,1,['test'],['tests']
Testability,"Alright, I added docstrings to the functions in _facade.py . I also added some unittests, we need to discuss whether we want to include the tests with `cloudpickle` which were the origin of the linked issue, but we would need to install the packages on the nodes and probably add another `ROOTTEST` envvar to avoid running them in certain nodes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7886#issuecomment-821070732:140,test,tests,140,https://root.cern,https://github.com/root-project/root/pull/7886#issuecomment-821070732,1,['test'],['tests']
Testability,"Alright, I fixed this on master now. I ran the test more than 25000 times without failing. Thanks for your work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/798#issuecomment-317507649:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/798#issuecomment-317507649,1,['test'],['test']
Testability,"Alright, I think I managed to hunt down and fix the underlying issues that required removing the `assert` and disabling the IR verifier: https://reviews.llvm.org/D142352 and https://reviews.llvm.org/D142443 Assuming these go through upstream, we could either revert the ""hacky"" LLVM patch (and replace it by two backports for LLVM 13), or just wait for the next LLVM upgrade (and close this PR). What do you think @Axel-Naumann @vgvassilev?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12074#issuecomment-1401661431:98,assert,assert,98,https://root.cern,https://github.com/root-project/root/pull/12074#issuecomment-1401661431,1,['assert'],['assert']
Testability,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3232#issuecomment-454002634:217,test,tests,217,https://root.cern,https://github.com/root-project/root/pull/3232#issuecomment-454002634,1,['test'],['tests']
Testability,"Alright, I think the easiest way is an in-person chat with @dpiparo . > notice it's not an actual bug currently. I'm aware it's a new feature, but it still demands testing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3428#issuecomment-464022128:164,test,testing,164,https://root.cern,https://github.com/root-project/root/pull/3428#issuecomment-464022128,1,['test'],['testing']
Testability,"Alright, I'm building a simpler reproducer then! Good to have one anyway for a unit test. Strange, at least getting a pointer to the workspace works for me also without the ATLAS RooFit extensions (indeed, the workspace contains some custom ATLAS classes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1085634160:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1085634160,1,['test'],['test']
Testability,"Alright, compression algorithm and level are now split in snapshot options. Please let me know if you have any more comments. Otherwise, I will merge once tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/965#issuecomment-328838261:155,test,tests,155,https://root.cern,https://github.com/root-project/root/pull/965#issuecomment-328838261,1,['test'],['tests']
Testability,"Alright, final milestone: all tests pass on all platforms! :partying_face: (I cancelled the Jenkins build on `ROOT-debian10-i386`, not available at the moment). I updated the PR summary with some numbers on resource consumption, but looks all good for me. With that, the upgrade is ready from a technical point of view.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1835684559:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1835684559,1,['test'],['tests']
Testability,"Alright, issue was cleared by @etejedor and I was able to put in a test that works around it.; I think this can be merged if jenkins is green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1857#issuecomment-381656522:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/1857#issuecomment-381656522,1,['test'],['test']
Testability,"Alright, looking in Jenkins it seems this will now pass all tests. I will reorganize the commits again and push tonight or tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4108#issuecomment-514682612:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/4108#issuecomment-514682612,1,['test'],['tests']
Testability,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/423#issuecomment-286704453:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/423#issuecomment-286704453,1,['test'],['test']
Testability,"Alright, tests are green, I'm merging! Thanks for all help and input @eguiraud @etejedor !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8485#issuecomment-867668724:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/8485#issuecomment-867668724,1,['test'],['tests']
Testability,"Alright, thank you very much! That's very nice you chose ROOT to contribute to!. If you need any guidance on what you could help with, just ask me. Sometimes it's not easy to find the issues that are actually easy to work on, as the code is quite complex. Are you looking only Python-related issues, or would you also be interested in doing some C++ contributions to beef up your C++ skills and experience?. As for this PR, I'll merge it if the CI bot tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10853#issuecomment-1170576376:452,test,tests,452,https://root.cern,https://github.com/root-project/root/pull/10853#issuecomment-1170576376,1,['test'],['tests']
Testability,"Alright, thanks for the clarification! Then you need to rebase this PR now and force-push to the `roofit-dev/offsetting-teststatistics-interface` Maybe we can get around having to open a new PR just for the rebasing this time, to not spam the list of closed PRs to ROOT too much. If I remember correctly, the problem was that `roofit-dev` didn't allow force pushes? Maybe this can be changed? Thanks for considering this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11650#issuecomment-1327347048:120,test,teststatistics-interface,120,https://root.cern,https://github.com/root-project/root/pull/11650#issuecomment-1327347048,1,['test'],['teststatistics-interface']
Testability,"Alright, this looks better now in master, but there is still an error somewhere... ![image](https://user-images.githubusercontent.com/10653970/149142474-1e85146d-e8ea-488d-a109-d20deab8d3b9.png). Hmm weird, doxygen version is 1.9.3 as per the log. Could you share the corrupt index.qhp file ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011007761:243,log,log,243,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011007761,1,['log'],['log']
Testability,"Alright, with this new version all tests pass on my machine. I think the current version is essentially equivalent to what we already have now, except for the avoidance of the modulo operations in the beginning. I also have a last commit to add, but even though it's a bug fix, some tests do not work because of it, so I want to merge it separately. Here is the diff in any case:; ```diff; commit 02e4b62489d8764ef1b3c243183d8cf2f745979b (fill); Author: Guilherme Amadio <amadio@cern.ch>; Date: Wed Sep 27 15:01:38 2017 +0200. Fix errors that are not reported when fDirectory == nullptr. diff --git a/tree/tree/src/TTree.cxx b/tree/tree/src/TTree.cxx; index bc23e6ef82..7bb57aa8e8 100644; --- a/tree/tree/src/TTree.cxx; +++ b/tree/tree/src/TTree.cxx; @@ -4564,18 +4564,12 @@ Int_t TTree::Fill(); // If above, close the current file and continue on a new file.; // Currently, the automatic change of file is restricted; // to the case where the tree is in the top level directory.; - if (!fDirectory); - return nbytes;; + if (fDirectory); + if (TFile *file = fDirectory->GetFile()); + if ((TDirectory *)file == fDirectory && (file->GetEND() > fgMaxTreeSize)); + ChangeFile(file);; ; - TFile* file = fDirectory->GetFile();; - if (file && (file->GetEND() > fgMaxTreeSize)); - if (fDirectory == (TDirectory *)file); - ChangeFile(file);; -; - if (nerror); - return -1;; -; - return nbytes;; + return nerror ? -1 : nbytes;; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058#issuecomment-332520137:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/1058#issuecomment-332520137,2,['test'],['tests']
Testability,Alright. @Axel-Naumann @vgvassilev So CMS is not a good test for this. Do we have any other test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1151320366:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1151320366,2,['test'],['test']
Testability,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:; ```; $ sw_vers; ProductName:	macOS; ProductVersion:	12.6.5; BuildVersion:	21G531; $ xcodebuild -version; Xcode 14.2; Build version 14C18; $ root; ------------------------------------------------------------------; | Welcome to ROOT 6.26/10 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Jan 18 2023, 22:03:00 |; | From heads/v6-26-10-halla@ae05868143 |; | With Apple clang version 14.0.0 (clang-1400.0.29.202) |; ... (see above) ...; root [7] cout << TVirtualFitter::GetFitter() << endl;; 0x0; root [8] .q; $ brew install root; ...; ==> Installing root; ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz; ...; ==> Summary; 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB; $ /usr/local/bin/root; ------------------------------------------------------------------; | Welcome to ROOT 6.26/06 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Jul 28 2022, 18:08:51 |; | From tags/v6-26-06@v6-26-06 |; | With Apple clang version 14.0.0 (clang-1400.0.29.202) |; ... (see above) ...; root [7] cout << TVirtualFitter::GetFitter() << endl;; 0x0; ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13041#issuecomment-1595125499:47,test,tested,47,https://root.cern,https://github.com/root-project/root/issues/13041#issuecomment-1595125499,2,['test'],['tested']
Testability,"Also any suggestion for testing is probably better to go as PR against this base branch:; https://github.com/cms-sw/root/compare/cmscxx/master/610a87c0a2; which I don't know what Shahzad used to branch from (I think its master if we follow our name convention for naming branches) and which is now long list of commits behind (and as it seems unmergable); https://github.com/cms-sw/root/compare/cmscxx/master/610a87c0a2...vgvassilev:cmssw-no-rdicts?expand=1; A PR against this branch could be tested (for integration, not for performance) right away. ; This will make it easier to manual build with our tools and manually tested from there",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4088#issuecomment-511359239:24,test,testing,24,https://root.cern,https://github.com/root-project/root/pull/4088#issuecomment-511359239,3,['test'],"['tested', 'testing']"
Testability,"Also apply clang-format to the involved files in the process. ## Changes or fixes:; `RNTupleFileWriter::Recreate` and `RNTupleFileWriter::Append ` now return a `unique_ptr` rather than a raw pointer, to make it obvious that the caller gets ownership of that pointer. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15580:288,test,tested,288,https://root.cern,https://github.com/root-project/root/pull/15580,1,['test'],['tested']
Testability,Also make isBinnedDistribution depend on the vars rather than always return true. ## Changes or fixes:. Makes ParamHistFunc more flexible/powerful. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10516:169,test,tested,169,https://root.cern,https://github.com/root-project/root/pull/10516,1,['test'],['tested']
Testability,"Also note that the history won't show up on GitHub, but you would have to do something like `git log --follow math/mathmore/test/testStress.cxx` to see the full commit history of the file before moving/renaming. See [this](https://stackoverflow.com/a/2314757/1924825) thread.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/586#issuecomment-303107276:97,log,log,97,https://root.cern,https://github.com/root-project/root/pull/586#issuecomment-303107276,3,"['log', 'test']","['log', 'test', 'testStress']"
Testability,Also reduce log output when processing too many executions. Update JSROOT with eslint formating,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13758:12,log,log,12,https://root.cern,https://github.com/root-project/root/pull/13758,1,['log'],['log']
Testability,"Also reproducible on gentoo. ```; jonesmz@ymir ~ $ git clone git@github.com:root-project/cling.git; Cloning into 'cling'...; remote: Enumerating objects: 31202, done.; remote: Counting objects: 100% (651/651), done.; remote: Compressing objects: 100% (193/193), done.; remote: Total 31202 (delta 448), reused 561 (delta 442), pack-reused 30551; Receiving objects: 100% (31202/31202), 19.11 MiB | 22.64 MiB/s, done.; Resolving deltas: 100% (23380/23380), done.; jonesmz@ymir ~ $ cmake -S cling -B build-cling -Dbuiltin_llvm=OFF; -- The C compiler identification is GNU 11.3.1; -- The CXX compiler identification is GNU 11.3.1; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found LLVM_CONFIG as /usr/lib/llvm/15/bin/llvm-config; -- Performing Test HAVE_FFI_CALL; -- Performing Test HAVE_FFI_CALL - Success; -- Found FFI: /usr/lib64/libffi.so; -- Performing Test Terminfo_LINKABLE; -- Performing Test Terminfo_LINKABLE - Success; -- Found Terminfo: /usr/lib64/libtinfo.so; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.13""); -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.10.3""); -- Linker detection: GNU ld; -- Performing Test C_SUPPORTS_FPIC; -- Performing Test C_SUPPORTS_FPIC - Success; -- Performing Test CXX_SUPPORTS_FPIC; -- Performing Test CXX_SUPPORTS_FPIC - Success; -- Building with -fPIC; -- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION; -- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success; -- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION; -- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success; -- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:1117,Test,Test,1117,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,2,['Test'],['Test']
Testability,"Also support the `Offset(""bin"")` feature in simultaneous fits with the; legacy evaluation backend (e.g., the old test statistic classes). In this case, The top-level `RooNLLVar` actually doesn't do anything; but contains pointers to the NLLs for the individual channels. The; function call to enable the offsetting must be delegated to those. A unit test that covers this is also implemented. Note that for the new CPU evaluation backend, this is working already. A second commit in this PR is fixing a copy-paste error in the functions that define the evaluation backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13890:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/13890,2,['test'],['test']
Testability,Also test 6.32 CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16032:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/16032,1,['test'],['test']
Testability,"Also the previous comment about the handling of the case when a class is loaded, an instance printed, the class unloaded and the class reloaded but different has been addressed. For the cache of printing functions, now we do not use any more the class name, which is elegant but might not be unique in very rare corner cases, but the DeclID in the AST built by Cling.; For what concerns the test for this feature, I ran out of ideas since, as demonstrated before, PyROOT does not handle unloads and reloads properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13876#issuecomment-1770488953:391,test,test,391,https://root.cern,https://github.com/root-project/root/pull/13876#issuecomment-1770488953,1,['test'],['test']
Testability,"Also, `ctest -R minuit2` gives me; ```; 82% tests passed, 3 tests failed out of 17. Label Time Summary:; tutorial = 5.25 sec*proc (3 tests). Total Test time (real) = 19.52 sec. The following tests FAILED:; 	 80 - minuit2-Quad1FMain (Failed); 	 90 - minuit2-ReneTest (Failed); 	 93 - minuit2-testMinimizer (Failed); Errors while running CTest; ```; However, these may not be due to your changes. The first of the 3 tests above also fails on the master branch for me. The error is similar between tests:; ```; Start 80: minuit2-Quad1FMain. 80: Test command: /usr/bin/cmake ""-DCMD=/home/amadio/build/gcc7.3/math/minuit2/test/Quad1FMain"" ""-DSYS=/home/amadio/build/gcc7.3"" ""-P"" ""/home/amadio/src/root/cmake/modules/RootTestDriver.cmake""; 80: Test timeout computed to be: 1500; 80: Info --> MPIProcess::StartMPI: Start MPI on #0 processor; 80: Error --> MPIProcess::MPIProcess: more processors than elements!; 80: application called MPI_Abort(MPI_COMM_WORLD, -1) - process 0; 80: [unset]: write_line error; fd=-1 buf=:cmd=abort exitcode=-1; 80: :; 80: system msg for write_line failure : Bad file descriptor; 80: Info --> MPITerminate:: End MPI on #0 processor; 80: CMake Error at /home/amadio/src/root/cmake/modules/RootTestDriver.cmake:232 (message):; 80: error code: 255; 80: ; 80: ; 1/1 Test #80: minuit2-Quad1FMain ...............***Failed 0.03 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-369928210:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-369928210,12,"['Test', 'test']","['Test', 'test', 'testMinimizer', 'tests']"
Testability,"Also, it's not really math, but SOFIE is not built nor tested via GH actions, on any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14648#issuecomment-1938200634:55,test,tested,55,https://root.cern,https://github.com/root-project/root/pull/14648#issuecomment-1938200634,1,['test'],['tested']
Testability,"Alternatively we could enlarge the buffer for `snprintf`. However, this would change the print-out since the truncation feature of `snprintf` is a feature. @lmoneta What do you think?. Edit: The truncation warnings can be found here: https://sft.its.cern.ch/jira/secure/attachment/22139/build.log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3869:293,log,log,293,https://root.cern,https://github.com/root-project/root/pull/3869,1,['log'],['log']
Testability,Alternatively you can run `valgrind` to get more information on this kind of failure:; ```; valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp --log-file=val.01.log myexecutable myargs; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1446778005:150,log,log-file,150,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1446778005,2,['log'],"['log', 'log-file']"
Testability,"Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment.; Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10790:406,test,tested,406,https://root.cern,https://github.com/root-project/root/pull/10790,2,['test'],['tested']
Testability,"Although: I'm not exactly sure if already existing files that were serialized with a shorter enum correctly read back. I _think_ yes, but that needs to be tested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2320414722:155,test,tested,155,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2320414722,1,['test'],['tested']
Testability,Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1515:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/1515,1,['test'],['test']
Testability,"An attempt to build ROOT against the system Python3 on MacOS11/12 results in a build with no errors, but with some test failures:. https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac12,SPEC=soversion,V=master/3084/. The following is the relevant error:. ```; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac12/SPEC/soversion/V/master/build/lib/libROOTTPython.6.25.02.so, 0x0009): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; ```. According to:. ```; $ otool -l lib/libROOTTPython.so | grep -C2 Python3; cmd LC_LOAD_DYLIB; cmdsize 72; name @rpath/Python3.framework/Versions/3.8/Python3 (offset 24); time stamp 2 Thu Jan 1 01:00:02 1970; current version 3.8.0; --; cmd LC_RPATH; cmdsize 104; path /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib (offset 12); Load command 20; cmd LC_FUNCTION_STARTS; ```. RPATH is set, but the dylib load directive doesn't match.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9793:115,test,test,115,https://root.cern,https://github.com/root-project/root/issues/9793,1,['test'],['test']
Testability,"An even simpler example which doesn't depend on RDF:. ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). res = ROOT.call_helper(helper); print(res); ```. test.h:; ```cpp; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. Output (again with centos stream 8, root 6.26/10):; ```; declare ret True; creating helper; IncrementalExecutor::executeFunction: symbol '_ZNK6HelperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_11'!; You are probably missing the definition of Helper<std::vector<double, std::allocator<double> > >::operator()() const; Maybe you need to load the corresponding shared library?; 18446744073709551615; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1341802449:121,test,test,121,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1341802449,2,['test'],['test']
Testability,"An update from my side with ROOT master (as of June 8), there are much less warnings now. (right side is newer). ![image](https://user-images.githubusercontent.com/10653970/122217023-04195380-ce7b-11eb-8b68-c5994d17be6b.png). Attached the latest warnings.; [valgrind.txt](https://github.com/root-project/root/files/6662915/valgrind.txt). Suggestion: a CI test could be added on GitHub to automatically check that there are 0 definitely lost bytes when opening and closing, like now. This way, one would know if a new commit 'creates' some leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7207#issuecomment-862331983:355,test,test,355,https://root.cern,https://github.com/root-project/root/issues/7207#issuecomment-862331983,1,['test'],['test']
Testability,Analysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot/runtutorials/tutorial_dataframe_df101_h1Analysis/); - [projectroot.runtutorials.tutorial_dataframe_df103_NanoAODHiggsAnalysis](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot/runtutorials/tutorial_dataframe_df103_NanoAODHiggsAnalysis/); - [projectroot.runtutorials.tutorial_tmva_tmva103_Application](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot/runtutorials/tutorial_tmva_tmva103_Application/); - [projectroot.test.test_stressIOPlugins_xroot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot/test/test_stressIOPlugins_xroot/); - [projectroot.core.imt.test.gtest_core_imt_test_coreimttestUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot.core.imt/test/gtest_core_imt_test_coreimttestUnit/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTF1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_testTF1/); - [projectroot.math.mathcore.test.gtest_math_mathcore_test_stressMathCoreUnit](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot.math.mathcore/test/gtest_math_mathcore_test_stressMathCoreUnit/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_datasource_sqlite](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_datasource_sqlite/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treeprocessormt_remotefiles](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/86587/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-642850645:1730,test,test,1730,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-642850645,13,['test'],"['test', 'testReport']"
Testability,And 366 more. ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_glob](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_glob/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_reduce](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_reduce/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_ctors](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_ctors/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_regression_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_stringfiltercolumn/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.io.TFile.roottest_root_io_TFile_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.root.io/TFile/roottest_root_io_TFile_make/); - [projectroot.roottest.python.JupyROOT.roottest_python_JupyROOT_ROOT_kernel_notebook](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/162929/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_ROOT_kernel_notebook/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11908#issuecomment-1361250252:3382,test,testReport,3382,https://root.cern,https://github.com/root-project/root/pull/11908#issuecomment-1361250252,4,['test'],['testReport']
Testability,And add tests. This fixes #8465.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8468:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/8468,1,['test'],['tests']
Testability,"And by the way, I cannot reproduce locally these warnings. For example:; ```; ...; Info in <TCanvas::Print>: SVG file mathsymb.svg has been created; Info in <TCanvas::Print>: png file /Users/couet/rootdoc/html/pict1_latex5.C.png has been created; Info in <TCanvas::Print>: ps file mathsymb.ps has been created; ...; ```; On the log-ouput you pointed we can see a warning about `latex5.C` but locally, with a fresh build, it is fine. No warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614#issuecomment-1302271708:328,log,log-ouput,328,https://root.cern,https://github.com/root-project/root/pull/11614#issuecomment-1302271708,1,['log'],['log-ouput']
Testability,And for this test you can be certain that no other code in the same test binary turns on IMT?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8318#issuecomment-852883675:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/8318#issuecomment-852883675,2,['test'],['test']
Testability,"And interestingly enough, if I comment out the `clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`, the test failures on Windows `x64` decrease from about 30 down to 13",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9809#issuecomment-1046847415:105,test,test,105,https://root.cern,https://github.com/root-project/root/issues/9809#issuecomment-1046847415,1,['test'],['test']
Testability,"And oddly enough, the exact inverse operation was introduced by 3900b83fda07d9b2e5ba03088939615caef4140a with log; ```; Provide the definition of kDimension before use.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10617#issuecomment-1132898570:110,log,log,110,https://root.cern,https://github.com/root-project/root/pull/10617#issuecomment-1132898570,1,['log'],['log']
Testability,And the result of doing; ```; root [1] .L testDummy.hxx; root [2] Test1 t1;; target shape 1 2 3 4 ; root [3] Test2 t2;; target shape 1 2 3 ; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12164#issuecomment-1410444210:42,test,testDummy,42,https://root.cern,https://github.com/root-project/root/issues/12164#issuecomment-1410444210,1,['test'],['testDummy']
Testability,Another implication is that artifacts weren't uploaded anymore if testing failed; fixed in https://github.com/root-project/root/pull/12830,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307#issuecomment-1550927947:66,test,testing,66,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1550927947,1,['test'],['testing']
Testability,"Another longer set (see attachement array.vallog.txt; ) from. ```; cd roottest/root/tree/array; valgrind --suppression=$ROOTSYS/etc/vagrind-root.supp --log-file=array.vallog root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundUnnamedIncorrectFileLoc"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -e 'gROOT->ProcessLine("".L TestObj.cpp+"");' -q -l -b runobjArrayTest.C; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/589#issuecomment-307330211:152,log,log-file,152,https://root.cern,https://github.com/root-project/root/pull/589#issuecomment-307330211,2,"['Test', 'log']","['TestObj', 'log-file']"
Testability,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-789295272:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272,13,['test'],['test']
Testability,"Another reproducer:. ```; ~ root -l; root [0] Long32_t ba;; ROOT_prompt_0:1:9: error: expected ';' after expression; Long32_t ba;; ^; ;; ROOT_prompt_0:1:10: error: use of undeclared identifier 'ba'; Long32_t ba;; ^; root [1] Long64_t ba;; root.exe: ../../../../../../../../root_dbg/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:12576: clang::Decl* clang::Sema::ActOnFinishFunctionBody(clang::Decl*, clang::Stmt*, bool): Assertion `!Cleanup.exprNeedsCleanups() && ""Unaccounted cleanups in function""' failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-702023276:429,Assert,Assertion,429,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-702023276,1,['Assert'],['Assertion']
Testability,"Another thing I noticed is that the extra logs show this when I run and it fails : ; ```; { 'name': '/opt/o2/include', 'type': 'directory',; 'contents': [; { 'name': 'module.modulemap', 'type': 'file',; 'external-contents': '/opt/o2/etc/cling/vc.modulemap'; }; ```; whereas it shows something different before the packaging : ; ```; { 'name': '/home/alibuild/sw/slc8_x86-64/Vc/1.4.1-local7/include', 'type': 'directory',; 'contents': [; { 'name': 'vc.modulemap', 'type': 'file',; 'external-contents': '/data/sw/slc8_x86-64/ROOT/v6-30-01-alice5-local4/etc/cling/vc.modulemap'; }; ```; Could the name be the issue ? where it it coming from ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15318#issuecomment-2158265874:42,log,logs,42,https://root.cern,https://github.com/root-project/root/issues/15318#issuecomment-2158265874,1,['log'],['logs']
Testability,"Another thing that is broken with the new `RVec` is iteration:. ```python; import ROOT. rvec = ROOT.VecOps.RVec['float']((1, 2, 3)); c = 0; for x in rvec:; print(x); c += 1; if c > 5:; break; ```. ```bash; 1.0; 2.0; 3.0; 3.518908852129243e-05; 0.0; 0.0; ```. I vaguely remember this issue. We had something similar before (and that's why we have a test for it). I'll have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806460211:348,test,test,348,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806460211,1,['test'],['test']
Testability,"Another very simple example, less serious because at least it fails, but still problematic because it makes debugging very difficult. test.h:; ```cpp; template <typename T>; int some_template_function(const T &x) {; return x.size();; }; ```. test.py:; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). res0 = ROOT.some_template_function(ROOT.std.vector[""double""]()); print(""res0"", res0). res1 = ROOT.some_template_function(0.0); print(""res1"", res1); ```. output:; ```; declare ret True; res0 0; Traceback (most recent call last):; File ""/home/b/bendavid/pyrootdebug2/test.py"", line 10, in <module>; res1 = ROOT.some_template_function(0.0); TypeError: Template method resolution failed:; int ::some_template_function(const vector<double>& x) =>; TypeError: could not convert argument 1; Failed to instantiate ""some_template_function(double)""; ```; ; Compare to the same in c++ ; ```; #include ""test.h"". const int res = some_template_function(0.0);; ```; ; Then the output of clang++ with nice error message is:; ```; In file included from test.cpp:1:; ./test.h:3:11: error: member reference base type 'const double' is not a structure or union; return x.size();; ~^~~~~; test.cpp:3:17: note: in instantiation of function template specialization 'some_template_function<double>' requested here; const int res = some_template_function(0.0);; ^; 1 error generated.; ```. So in the pyroot case all of the useful compiler errors are suppressed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1410720055:134,test,test,134,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1410720055,8,['test'],['test']
Testability,Any chance for a test in cling’s teatsuite?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9691#issuecomment-1021344873:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/9691#issuecomment-1021344873,1,['test'],['test']
Testability,Any chance to have a test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9404#issuecomment-990316793:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/9404#issuecomment-990316793,1,['test'],['test']
Testability,Any ideas on the remaining windows failure would also be welcome (it doesn't happen on linux and I don't have a windows setup to test with at the moment),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449#issuecomment-1479783119:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/12449#issuecomment-1479783119,1,['test'],['test']
Testability,Any ideas why this may be failing @lmoneta? I don't have access to the Jenkins build logs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5936#issuecomment-650475052:85,log,logs,85,https://root.cern,https://github.com/root-project/root/pull/5936#issuecomment-650475052,1,['log'],['logs']
Testability,"Any updates? Does anything need changing? I think it's best to focus on this one before #1689, since that one will be easier to develop and test once this is in and standalone Minuit2 builds are possible. Note that Travis now tests the standalone build, both in source and copied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-373350286:140,test,test,140,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-373350286,2,['test'],"['test', 'tests']"
Testability,"Any way this PR make several test fail like ""tutorial-legacy-mlp-mlpRegression"" let see what @moneta think about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15766#issuecomment-2151570608:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/15766#issuecomment-2151570608,1,['test'],['test']
Testability,Apologies for letting this sit way too long. I think what we need is:; - get rid of `R__HAS_STD_SPAN` (incl the CMake code); - remove the option of `experimental::span` (incl CMake) as I don't manage to find any incarnation of this anyway.; - use the feature test macro `__cpp_lib_span`. I would totally understand if you'd find this unreasonable to update this PR at this point. Please let me know and I will close this PR and implement myself what I suggest here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1344293553:259,test,test,259,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1344293553,1,['test'],['test']
Testability,"Apologies for making this an annoying bug report :cry:, ; but I unfortunately, so far, wasn't able to create a small self-contained reproducer that triggers the bug. . But with LCG_99 and the following snippet I can at least show the problem. ; ```py; import cppyy; cppyy.cppdef(r""""""; using vec = SmartRefVector<DataObject>;; using ref = SmartRef<DataObject>;; """"""). vec = cppyy.gbl.vec(); ref = cppyy.gbl.ref(); vec.push_back(ref); vec.size(); print(vec[0]); print(vec.at(0)); ```. Running:; ```shell; source /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc10-opt/setup.sh; python test.py; ```; will print: ; ```; <cppyy.gbl.SmartRefVector<DataObject> object at 0x83e0f00>; <cppyy.gbl.SmartRef<DataObject> object at 0xcf6b7c0>; ```. If you try the same on an older ROOT version e.g. with LCG_97a (`source /cvmfs/sft.cern.ch/lcg/views/LCG_97a/x86_64-centos7-gcc9-opt/setup.sh`), this will print:; ```; <ROOT.SmartRef<DataObject> object at 0xaac7ac0>; <ROOT.SmartRef<DataObject> object at 0xaac7ac0>; ```. So in ROOT 6.22 the `operator[]` in python somehow doesn't work correctly for this class.; Now as I said, I wish I could have provided an easier reproducer, and I'll have another go at it tomorrow, but for now this is the best I could come up with. ; The `SmartRefVector` is part of the `Gaudi` project and can be found [here](https://gitlab.cern.ch/gaudi/Gaudi/-/blob/master/GaudiKernel/include/GaudiKernel/SmartRefVector.h). ; I've tried creating a simplified version of the `SmartRefVector`, but that didn't exhibit the same problem so it's apparently not as simple as blaming it on the inheritance on `std::vector` which of course isn't ideal... :see_no_evil:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7179:588,test,test,588,https://root.cern,https://github.com/root-project/root/issues/7179,1,['test'],['test']
Testability,"Apologies for the brevity before. In my attempts to set the alignment differently on the first and last labels, I found only one value seemed to be set. On trying to make a minimal reproducer, I'm finding that for certain, changing the LabelFont is not working if all labels are not set correctly. ```; python; >>> import ROOT; >>> h = ROOT.TH1D(""h"", """", 5, 0, 5); >>> for bin in range(h.GetXaxis().GetNbins()+1):; ... h.GetXaxis().ChangeLabel(bin, 10*bin, 4*bin, -1, -1, -1, """"); ...; >>> h.Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; >>> h = ROOT.TH1D(""h"", """", 5, 0, 5); for bin in range(11):; ... if bin < 2:; ... align = 11; ... elif bin > 7:; ... align = 12; ... else:; ... align = 13; ... h.GetXaxis().ChangeLabel(bin, 15*bin, .1, align, -1, 43, """"); ...; >>> h.Draw(); ```; Produced the attached axis, so the rotations are working, but a separate test suggests that alignments are not when the rotation is different than 0 (setting the rotation to 90 seems to produce identical alignment for all labels, as far as I can tell). Setting the pixel size to e.g. 10, of course, blows up those labels to greater-than-canvas size, they're being interpreted as fractions still. That is actually related to a problem I had a few days ago, accidentally passing fractional instead of integer (>1) values for size when the font precision is changed to absolute scale, but I'm not sure it's worth a warning or error message when it's being set. So, separate from the documentation: what is the appropriate way to find the number of labels? Trying to use the TAxis::GetLabels() method didn't lead me anywhere, maybe there's a good example somewhere though; <img width=""694"" alt=""ChangeLabels"" src=""https://user-images.githubusercontent.com/38217274/161010205-85424185-a64a-4829-992e-1982f16588d5.png"">; ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084252582:890,test,test,890,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084252582,1,['test'],['test']
Testability,"Apologies for the delay. Can you apply that patch and see which is the output it currently fails upon:. ```diff; diff --git a/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp; index 3829014415..e4a2fab675 100644; --- a/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp; @@ -2789,11 +2789,12 @@ unsigned ASTWriter::getLocalOrImportedSubmoduleID(Module *Mod) {; ; return SubmoduleIDs[Mod] = NextSubmoduleID++;; }; -; +extern ""C"" int printf(const char*,...);; unsigned ASTWriter::getSubmoduleID(Module *Mod) {; // FIXME: This can easily happen, if we have a reference to a submodule that; // did not result in us loading a module file for that submodule. For; // instance, a cross-top-level-module 'conflict' declaration will hit this.; + printf(""Submodule=%s\n"", Mod->Name.c_str());; unsigned ID = getLocalOrImportedSubmoduleID(Mod);; assert((ID || !Mod) &&; ""asked for module ID for non-local, non-imported module"");; ```. I need to remember how to reproduce your setup and I could be more helpful...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1246577880:1003,assert,assert,1003,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1246577880,1,['assert'],['assert']
Testability,"Apologies for the delay. Turning on LLVM debug really increases the build size, so I had to turn my test setup upside down. In any case, building with LLVM debug in particular triggers an [assert](https://github.com/root-project/root/blob/a88664672571c352f77b9d267e58600cbf9a3b78/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp#L479) to fail before the segfault happens, both with and without runtime_cxxmodules, and both before and after the commit I had identified before:; ```console; make[2]: Entering directory '/data/root-build-runtime_cxxmodules-ON'; [100%] Generating lib/modules.idx; cd /mnt/root-build-runtime_cxxmodules-ON/lib && /usr/bin/cmake -E remove -f modules.idx modules.timestamp; cd /mnt/root-build-runtime_cxxmodules-ON/lib && LD_LIBRARY_PATH=/mnt/root-build-runtime_cxxmodules-ON/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /mnt/root-build-runtime_cxxmodules-ON/bin/root.exe -l -q -b; resolveAArch64Relocation, LocalAddress: 0x55849bc010 FinalAddress: 0x55849bc010 Value: 0x7f7a5f8eb000 Type: 0x113 Addend: 0x0; root.exe: /mnt/root/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:488: void llvm::RuntimeDyldELF::resolveAArch64Relocation(const llvm::SectionEntry&, uint64_t, uint64_t, uint32_t, int64_t): Assertion `isInt<33>(Result) && ""overflow check failed for relocation""' failed.; Aborted (core dumped); make[2]: *** [CMakeFiles/modules_idx.dir/build.make:145: lib/modules.idx] Error 134; make[2]: Leaving directory '/data/root-build-runtime_cxxmodules-ON'; make[1]: *** [CMakeFiles/Makefile2:7643: CMakeFiles/modules_idx.dir/all] Error 2; make[1]: Leaving directory '/data/root-build-runtime_cxxmodules-ON'; make: *** [Makefile:156: all] Error 2; make: Leaving directory '/data/root-build-runtime_cxxmodules-ON'; ```; (The same happens with runtime_cxxmodules=OFF, just with different addresses.). The resolveAArch64Relocation diagnostic output is added by (since I only wanted debugging for the failing assert):; ```diff; diff --git ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845#issuecomment-1791689926:100,test,test,100,https://root.cern,https://github.com/root-project/root/issues/13845#issuecomment-1791689926,2,"['assert', 'test']","['assert', 'test']"
Testability,"Apologies, I said something in error. All the aforementioned tests can be found successfully running in the CI. I think we are dealing with a difference between the container setup of the CI and the local setup.; @pcanal could you double-check your setup against the one of the container (see [here](https://github.com/root-project/root-ci-images/blob/main/alma9/packages.txt) and the requirements.txt file)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16720#issuecomment-2424221788:61,test,tests,61,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2424221788,1,['test'],['tests']
Testability,"Apologies, rebasing the branch introduced some errors in using the Python environment in the SOFIE Keras test. I have fixed them now, it should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11055#issuecomment-1201425504:105,test,test,105,https://root.cern,https://github.com/root-project/root/pull/11055#issuecomment-1201425504,1,['test'],['test']
Testability,"Apparently it is the test itself that is not runnable a second time :(:(; ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 15.87 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.13 sec; jupyter-pcanal-rootdevel:quick-devel pcanal$ ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.29 sec. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 9.55 sec. The following tests FAILED:; 349 - gtest-tmva-pymva-TestRModelParserPyTorch (Failed); Errors while running CTest; Output from these tests are in: /home/pcanal/root_working/build/quick-devel/Testing/Temporary/LastTest.log; Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16719#issuecomment-2424123514:21,test,test,21,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2424123514,22,"['Test', 'log', 'test']","['Test', 'TestRModelParserPyTorch', 'Testing', 'log', 'test', 'tests']"
Testability,Apparently many tests are broken by the change in the command line processing.; I am having a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/516#issuecomment-296120992:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/516#issuecomment-296120992,1,['test'],['tests']
Testability,"Apparently xrootd 5.3.1 have a different sha256 hash (not clear how it could happened or if maybe in PR I was using old). Failure was detected on centos8 rootbench machine (https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/):; ```; -- verifying file...; file='/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz'; -- SHA256 hash of; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz; does not match expected value; expected: '1194ba435dc1e243f3cdb8273f6385407183799faf7622a582a828f4aff6807d'; actual: '0800b4c6444591a6514c5b81b2c4c79439875136ab2267ce4bed99cb94ead6e6'; -- Hash mismatch, removing...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9103:227,benchmark,benchmark,227,https://root.cern,https://github.com/root-project/root/pull/9103,3,['benchmark'],['benchmark']
Testability,"Apparently, `TClassEdit::ResolveTypedef()` is unable to resolve a typedef that aliases a fundamental data type if the `typedef` declaration is not known to cling. In non-C++-modules builds, making it known typically involves parsing the corresponding header. In addition, `TDataMember::GetTrueTypeName()`, however, correctly provides the information, which seems to be inconsistent behavior in ROOT meta. This pull request is twofold: _(i)_ it cleans up the code for type name normalization, and _(ii)_ circumvents this issue by directly using the resolved type name provided by `TDataMember::GetTrueTypeName()`. ## Changes or fixes:; - Separate the internal `GetNormalizedType()` function in `GetCanonicalTypeName()` (which returns the canonical name of a type, resolving typedefs where needed) and `GetNormalizedTypeName()` (which returns the RNTuple normalized name for a type, e.g. `const vector<T>` -> `std::vector<T>`.; - Add a protected `RFieldBase::Create()` overload that takes an already normalized type name + type alias.; - Use the aforementioned overload in `RClassField` to create fields associated to data members. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). (FYI, @Nowakus; this PR should solve the typedef issues that you were encountering)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13255:1151,test,tested,1151,https://root.cern,https://github.com/root-project/root/pull/13255,1,['test'],['tested']
Testability,"Apparently, this test continues to be broken for some CI configs, which needs to be investigated carefully; thus disable temporarily. Related PRs fixing issues found while investigating this test: #13021, #13022.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13023:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/13023,2,['test'],['test']
Testability,"Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:; ```; Debug Assertion Failed!; Program:; C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe; File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp; Line 36; Expression c > = -1 && c < = 255; ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:; ```; while ((wid == 0 || Length() < (Int_t)wid) &&; strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13584:236,Assert,Assertion,236,https://root.cern,https://github.com/root-project/root/pull/13584,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,Apply clang-tidy changes to the vectorized fitting tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2724:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/2724,1,['test'],['tests']
Testability,"Apply new naming convention in JSROOT; - all methods names starts with small letter; - all settings moved to `JSROOT.settings`; - remove several deprecated methods; - provide documentation for all ""public"" JSROOT classes. All http, webgui, v7 tutorials are tested and still working.; Also `iPython` is tested. If there are no other objections, major JSROOT release v6 will be done in next days",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6996:257,test,tested,257,https://root.cern,https://github.com/root-project/root/pull/6996,2,['test'],['tested']
Testability,"Apply several improvements and fixes in MethodDL , mainly: . - Use now Float instead of Double. This makes the network 2 times faster without loosing performances in quality of results; - Compute now the regularisation term in the loss once/epoch when evaluating ; - Optimise the MultiThread execution on CPU by setting a minimum number of elements to execute per task ; - Optimise evaluation of the networks, by implementing GetMvaValues in MethodDL. This reduces significantly the time spent for network testing and evaluating in a TMVA session",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2219:506,test,testing,506,https://root.cern,https://github.com/root-project/root/pull/2219,1,['test'],['testing']
Testability,Are the failed tests in Jenkins related to my PR? May I see the failed results?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1137209337:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1137209337,1,['test'],['tests']
Testability,Are the failed tests related to my PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-946551088:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-946551088,1,['test'],['tests']
Testability,Are the test failure pre-existing?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3830#issuecomment-493466718:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/3830#issuecomment-493466718,1,['test'],['test']
Testability,Are the tests for it in a PR for roottest?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/236#issuecomment-246630858:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/236#issuecomment-246630858,1,['test'],['tests']
Testability,"Are those tests failing because of the changes in this PR or were they already failing? I see on my laptop (I don't see the failure messages in Jenkins) that `testNaNPacker` fails on `FitAddPdf_DegenerateCoeff` with output:. ```; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3; [#0] WARNING:Eval -- RooAddPdf::updateCoefCache(sum WARNING: sum of PDF coefficients not in range [0-1], value=1.3 (no more will be printed); ../roofit/roofitcore/test/testNaNPacker.cxx:228: Failure; Warning in <ROOT::Math::Fitter::CalculateHessErrors>: Error when calculating Hessian; Value of: a1Final.getVal() < 0. || a1Final.getVal() > 1. || a2Final.getVal() < 0. || a2Final.getVal() > 1.; Actual: false; Expected: true; Recovery strength=0; ```. RooFit stress tests give the following output:. ```; /Users/pbos/projects/apcocsm/roofit-dev/root/cmake-build-debug/test/stressRooFit. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford Universit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-881412597:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-881412597,2,['test'],"['testNaNPacker', 'tests']"
Testability,"Are we guaranteed that any test excluded through `ROOT_runtime_cxxmodules_FOUND` is only temporarily excluded? If not (i.e. if some tests are only temporarily excluded and others are deemed to be ""inappropriate"" for modules) then please use a dedicated, greppable variable:; ```; if (ROOT_runtime_cxxmodules_FOUND); set(FIXME_TEMPORARILY_EXCLUDED_FOR_RUNTIME_CXXMODULES On); endif(); ```; and exclude these tests using; ```; if (NOT FIXME_TEMPORARILY_EXCLUDED_FOR_RUNTIME_CXXMODULES); ```; rather than testing for the underlying feature `ROOT_runtime_cxxmodules_FOUND`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992#issuecomment-387655602:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/1992#issuecomment-387655602,4,['test'],"['test', 'testing', 'tests']"
Testability,"Are you enabling the 'roottest' tests (with -Droottest=ON)? Because all the failing tests are in this category. Lets take for example `roottest-cling-function-refClasses-build`, I get this error:; ```; Start 634: roottest-cling-function-refClasses-build. 634: Test command: /Applications/CMake.app/Contents/bin/cmake ""--build"" ""/Users/mato/Development/ROOT/build.master"" ""--target"" ""roottest-cling-function-refClasses-compile-macro/fast"" ""--"" ""--always-make""; 634: Test timeout computed to be: 1500; 634: Error in <UnknownClass::FindDynamicLibrary>: libCling[.so | .dll | .dylib | .sl | .dl | .a] does not exist in .:/Users/mato/Development/ROOT/root.prefix/lib/root:/usr/local/lib:/usr/X11R6/lib:/usr/lib:/lib:/lib/x86_64-linux-gnu:/usr/local/lib64:/usr/lib64:/lib64:; 634: Fatal in <TROOT::InitInterpreter>: cannot load symbol dlsym(RTLD_DEFAULT, CreateInterpreter): symbol not found; 634: make[1]: *** [roottest/cling/function/CMakeFiles/roottest-cling-function-refClasses-compile-macro] Error 1; 634: make: *** [roottest-cling-function-refClasses-compile-macro/fast] Error 2; 1/1 Test #634: roottest-cling-function-refClasses-build ...***Failed 0.11 sec. 0% tests passed, 1 tests failed out of 1; ```; Another type of failures are the following, which involves the location of Clang resources.; ```; Start 1020: roottest-root-meta-expressiveErrorMessages-libgen-build. 1020: Test command: /Applications/CMake.app/Contents/bin/cmake ""--build"" ""/Users/mato/Development/ROOT/build.master"" ""--target"" ""roottest-root-meta-expressiveErrorMessages-libgen/fast"" ""--"" ""--always-make""; 1020: Test timeout computed to be: 1500; 1020: Generating expressiveErrorMessages.cxx, expressiveErrorMessages.rootmap; 1020: ERROR in cling::CIFactory::createCI():; 1020: resource directory /Users/mato/Development/ROOT/root.prefix/etc/root/cling/lib/clang/3.9.0 not found!; 1020: input_line_2:1:10: fatal error: 'cling/Interpreter/RuntimeUniverse.h' file not found; 1020: #include ""cling/Interpreter/RuntimeUniverse.h""; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-273492132:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-273492132,5,"['Test', 'test']","['Test', 'tests']"
Testability,"Are you sure the PCH is needed for running that test ? The test is not using any dictionary or ROOT I/O but only depends on the SOFIE libraries and protobuffer. I have removed the PCH dependency since some time and I have not seen this error before. ; It is true that the target `SOFIECompileModules_ONNX` is having issue on ubunutu 18, but this is due to the old Protobuf version of the machine and I need to disable `tmva-sofie` on Ubuntu18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1401927484:48,test,test,48,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1401927484,2,['test'],['test']
Testability,"Argh, Professor Jenkins doesn't like me. Tests don't compile. How do I compile / run tests locally (I need complete error messages or the console output)? Putting std::move instead of std::forward on a T&& seems wrong. I just re-ran make (with success), so I probably didn't compile tests and that's why this is now causing a problem. As for the other comments:; a) agree with const removal in TDFNodes.cxx; b) the const fCanGrow: clang-tidy suggested me to replace = default with =delete. I thought it might be more useful to be able to copy, thus I removed const instead. But I cannot really comment on that, not having used any v7 stuff yet. Finally the large modernize-loops: I think I should improve loop variable names before it is committed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585#issuecomment-363247629:41,Test,Tests,41,https://root.cern,https://github.com/root-project/root/pull/1585#issuecomment-363247629,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"As I can see from log output - difference are in **OLD** svg files, generated not with the JSROOT but with TSVG. ; Like here:. ```; 166, 166: <path d=""M216.21,421.836l 12, -12h 125v -160l 12, -12v 184h -149z"" fill=""#917f6e""/> <-> <path d=""M216.21,421.836l 12, -12h 125v -160l 12, -12v 184h -149z"" fill=""#6f2da8""/>; 207, 207: <path d=""M429.154,421.836l 12, -12h 100v -160l 12, -12v 184h -124z"" fill=""#917f6e""/> <-> <path d=""M429.154,421.836l 12, -12h 100v -160l 12, -12v 184h -124z"" fill=""#6f2da8""/>; 248, 248: <path d=""M357.251,382.288l 3, -3h 13v -99l 3, -3v 105h -19z"" fill=""#67494e""/> <-> <path d=""M357.251,382.288l 3, -3h 13v -99l 3, -3v 105h -19z"" fill=""#92dadd""/>; 255, 255: <path d=""M418.092,382.288l 3, -3h 13v -99l 3, -3v 105h -19z"" fill=""#67494e""/> <-> <path d=""M418.092,382.288l 3, -3h 13v -99l 3, -3v 105h -19z"" fill=""#92dadd""/>; SVG test failed for archi; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328137963:18,log,log,18,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328137963,2,"['log', 'test']","['log', 'test']"
Testability,"As I can see from the full log, `'-Dbuiltin_nlohmannjson:BOOL=OFF'` is set there.; Means external `nlohmann/json.hpp` will be used when building ROOT. In such case all tests also have to use external includes. I will try to provide fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769#issuecomment-1956315314:27,log,log,27,https://root.cern,https://github.com/root-project/root/issues/14769#issuecomment-1956315314,2,"['log', 'test']","['log', 'tests']"
Testability,"As I said in the description on my pull request, this is work in progress and I will review the changes and break the commit up into several pieces. Once I do that, than we can discuss the code. For now, I just want to run the tests on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058#issuecomment-332271434:227,test,tests,227,https://root.cern,https://github.com/root-project/root/pull/1058#issuecomment-332271434,1,['test'],['tests']
Testability,"As ROOT cannot catch JITted exceptions on Apple Silicon (see the bug report https://github.com/root-project/root/issues/7541 for context), some tests are currently failing there due to the use of exceptions in the compatibility code for `RDataSource`. Implement this with a boolean flag and a pattern inspired by `errno`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9731:144,test,tests,144,https://root.cern,https://github.com/root-project/root/pull/9731,1,['test'],['tests']
Testability,"As RVec is a class template, even if ROOT is compiled with -DNDEBUG; these asserts might be compiled in user code depending on whether or; not they remember to include `-DNDEBUG` in their debug flags.; I think the performance penalty is too high w.r.t. the benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9376:75,assert,asserts,75,https://root.cern,https://github.com/root-project/root/pull/9376,1,['assert'],['asserts']
Testability,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787#issuecomment-1744852013:114,test,test,114,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013,8,"['Test', 'test']","['TestDefinePerSample', 'TestPropagateExceptions', 'test']"
Testability,"As a developer and maintainer of Delphes, I am quite happy with TClonesArray. As far as I know, storing TClonesArray in TTree was the fastest and least crash-prone method for all ROOT 5 versions and early ROOT 6 versions. If there is a newer and better method that meets all of the Delphes requirements, I would be interested in seeing and evaluating a few examples. Before doing any pull requests, let's start with something more basic. I think a very basic example showing how to write/read a collection of generated particles to/from a file would be a good starting point. > something that works well with today's software world :-). Newer doesn't always mean better :smiley: Especially in the HEP community where some researchers are still happy with CERNLIB and PAW and do not want to migrate to ROOT :smiley:. At the moment, Delphes maintains compatibility with ROOT 5 and I still receive questions from researches who use Delphes with ROOT 5. So, Delphes is still regularly tested with Ubuntu 14.04, GCC 4.8 and ROOT 5. If the new IO method only works with recent versions of ROOT 6 and requires the change of file format and programming interface, it will be a major change for Delphes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8644#issuecomment-878284568:981,test,tested,981,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-878284568,1,['test'],['tested']
Testability,"As a follow-up from PR #12975, this pull request enables fetching up-to-date content for the given branch of a related repository. Before this patch, a related repository (roottest, etc.), was cloned if not found. It is, however, useful to be able to also checkout an up-to-date branch in an existing repository, e.g. for the new CI. This behavior is controlled by defining the `xxx_force_checkout=ON` CMake variable. Therefore, this PR also adds `roottest_force_checkout=ON` for the new CI. For rootbench, the upstream `master` branch is fetched in any case, but for the sake of code reuse this PR also allows the local clone to be _optionally_ updated. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13003:676,test,tested,676,https://root.cern,https://github.com/root-project/root/pull/13003,1,['test'],['tested']
Testability,"As a logical extension, the same happens for any additional branch that later files have, for example:; ```c++; void printBranches(const char *path) {; printf(""%s:\n"", path);; std::unique_ptr<TFile> file(TFile::Open(path));; auto *tree = file->Get<TTree>(""tree"");; for (auto *branch : TRangeDynCast<TBranch>(tree->GetListOfBranches())) {; printf("" %s\n"", branch->GetName());; }; }. void ROOT_4716_2() {; {; std::unique_ptr<TFile> file(TFile::Open(""a.root"", ""RECREATE""));; TTree *tree = new TTree(""tree"", ""title"");; int value;; tree->Branch(""a"", &value);; value = 42;; tree->Write();; }. {; std::unique_ptr<TFile> file(TFile::Open(""b.root"", ""RECREATE""));; TTree *tree = new TTree(""tree"", ""title"");; int value;; tree->Branch(""a"", &value);; tree->Branch(""b"", &value);; value = 42;; tree->Fill();; tree->Write();; }. {; TFileMerger merger;; merger.OutputFile(""c.root"");; merger.AddFile(""a.root"");; merger.AddFile(""b.root"");; merger.Merge();; }. printBranches(""a.root"");; printBranches(""b.root"");; printBranches(""c.root"");; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14558#issuecomment-1941464888:5,log,logical,5,https://root.cern,https://github.com/root-project/root/issues/14558#issuecomment-1941464888,1,['log'],['logical']
Testability,"As a normalization set within `evaluate()`, the RooGenericPdf used the; `RooAbsPdf::_normSet` member, and the RooFormulaVar used the; `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used; outside the implementation of `RooAbsPdf::getValV()` and; `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set; from the proxy, which is in this case a RooArgList (see for example how; the RooAddition does it). This commit suggests to do that for the; RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:; [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem; reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10873:697,test,test,697,https://root.cern,https://github.com/root-project/root/pull/10873,2,['test'],"['test', 'testGenericPdf']"
Testability,"As a side note, it appears that `dataframe_simple` printouts:; ```; [ RUN ] MT/RDFSimpleTests.WritingToFundamentalType/0; input_line_164:2:41: error: cannot assign to variable 'var0' with const-qualified type 'const int'; auto func22(const int var0){return var0 = 42; ~~~~ ^; input_line_164:2:23: note: variable 'var0' declared const here; auto func22(const int var0){return var0 = 42; ~~~~~~~~~~^~~~; [ OK ] MT/RDFSimpleTests.WritingToFundamentalType/0 (1 ms); ```; but it does not make that sub-test fails. Is that intentional?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552#issuecomment-1276684488:497,test,test,497,https://root.cern,https://github.com/root-project/root/pull/11552#issuecomment-1276684488,1,['test'],['test']
Testability,"As all libraries, executabls have to use source directories for build. ; In this case only includes from linked libraries are allowed to be used. Affects all executables and all tests. Should improve building with `-Dcxxmodules=ON`. Several generated includes moved to ""ginclude/"" path while used only in ROOT:; * `hist2workspaceCommandLineOptionsHelp.h`; * `haddCommandLineOptionsHelp.h`; * `rootCommandLineOptionsHelp.h`. Several adjustments in tests are required. . Also in several places replace `include_directories` by `target_include_directories`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5459:178,test,tests,178,https://root.cern,https://github.com/root-project/root/pull/5459,2,['test'],['tests']
Testability,"As an initial test, running tests in tutorials/dataframe returns the similar CPU timings:. Current master branch:; ![master](https://github.com/root-project/root/assets/29475282/f38dd84e-218c-4a26-825c-a6f026ce384d). With updated pass manager:; ![newpassmanager](https://github.com/root-project/root/assets/29475282/1ba6421e-1880-4996-9251-b13f66080d77)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1860538797:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1860538797,2,['test'],"['test', 'tests']"
Testability,"As discussed at https://github.com/root-project/root/pull/10753#issuecomment-1155514143 , the current way we run `TROOT::EndOfProcessCleanups` twice when using PyROOT is necessary, but we don't understand why. The change in the PR removed the double use of the function and the original reproducer still works. It would be nice to have test coverage for this particular pattern used in PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11279:336,test,test,336,https://root.cern,https://github.com/root-project/root/issues/11279,1,['test'],['test']
Testability,"As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13566:191,test,tested,191,https://root.cern,https://github.com/root-project/root/pull/13566,1,['test'],['tested']
Testability,"As discussed in the meeting of today: This is ready to be merged *but* for a broader testing with rapidcheck as linked by @pseyfert previously. Broader since not only the MLP is affected by the change. I'll take care of that and report back when done. This kind of testing should at some point be automated, but that is a separate task.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/121#issuecomment-331132834:85,test,testing,85,https://root.cern,https://github.com/root-project/root/pull/121#issuecomment-331132834,2,['test'],['testing']
Testability,"As discussed offline, I can enable cling-test in ROOT's ctest once the call to `sudo` is gone (e.g. by disabling the clang-unloading test) and once the two XFAIL tests are addressed that actually work with ROOT-patches (and thus ROOT).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6206#issuecomment-677400786:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/6206#issuecomment-677400786,3,['test'],"['test', 'tests']"
Testability,"As discussed, for `std::vector` with a non-default allocator we should likely go through the collection proxy support. For maps and sets, we may already support (via the collection proxies) and it's just a matter of relaxing the partial specializations and maybe the logic in `RFieldBase::Create`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16754#issuecomment-2440854804:267,log,logic,267,https://root.cern,https://github.com/root-project/root/issues/16754#issuecomment-2440854804,1,['log'],['logic']
Testability,"As discussed, this PR isn't ready because it doesn't handle class subfields correctly, e.g. this test fails: ; ```cpp; struct CustomStruct {; float a = 0.0;; std::vector<float> v1;; std::vector<std::vector<float>> v2;; std::string s;; };; ... ; auto ptrKlass = model->MakeField<CustomStruct>(""klass"");; // fails; EXPECT_TRUE(model->HasField(""klass.a"")); ; ```; A better approach might be to traverse the model tree to check field names.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7480#issuecomment-801292594:97,test,test,97,https://root.cern,https://github.com/root-project/root/pull/7480#issuecomment-801292594,1,['test'],['test']
Testability,"As discussed, this should be merged only after a final round of tests with RC3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16769#issuecomment-2450151422:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/16769#issuecomment-2450151422,1,['test'],['tests']
Testability,As expected - on several platforms these status bits does not appear.; Therefore I rebase and just fully exclude these bits from testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7056#issuecomment-762127953:129,test,testing,129,https://root.cern,https://github.com/root-project/root/pull/7056#issuecomment-762127953,1,['test'],['testing']
Testability,"As explained in #15405, the documentation for the `ExternalConstraints` option in RooMCStudy is misleading. People should just pass this to the `FitOptions`, so it actually needs no own docs. The logic to forward the `ExternalConstraints` to the FitOptions is kept for backwards compatibility. Closes #15405.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15682:196,log,logic,196,https://root.cern,https://github.com/root-project/root/pull/15682,1,['log'],['logic']
Testability,"As explained in https://github.com/root-project/root/issues/8745, if we look up the `Detail` namespace first and then define something else in it, there is an assertion failure. That crash does not happen if there is no prior lookup. Example:. ```; root [0] auto c = TClass::GetClass(""Detail""); (TClass *) @0x7fffd0908fc0; root [1] namespace Detail { int i; }; root.exe: /home/etejedor/root/fork/root/interpreter/llvm/src/include/llvm/Support/Casting.h:105: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::TagType; From = clang::Type]: Assertion `Val && ""isa<> used on a null pointer""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828:159,assert,assertion,159,https://root.cern,https://github.com/root-project/root/issues/8828,2,"['Assert', 'assert']","['Assertion', 'assertion']"
Testability,"As far as I can tell support for TEntryLists in TTreeProcessorMT is broken, and I'm not sure how to fix it.; I have disabled the MT tests for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3245:132,test,tests,132,https://root.cern,https://github.com/root-project/root/pull/3245,1,['test'],['tests']
Testability,As far as I know roottest compares the output of of stressGraphics to a reference. Having this extra printout will make it different from the reference. My guess is that we will get a test failure..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/155#issuecomment-228018586:184,test,test,184,https://root.cern,https://github.com/root-project/root/pull/155#issuecomment-228018586,1,['test'],['test']
Testability,"As far as I understand, the new test is still failing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13900#issuecomment-1866331940:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/13900#issuecomment-1866331940,1,['test'],['test']
Testability,"As it is now, cling is not capable to load library for outlined; functions. As long as modules not enabled by default - add; R__LOAD_LIBRARY macro to all test scripts",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4517:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/4517,1,['test'],['test']
Testability,"As measured, there is an improvement if the expansion of `R__ASSERT()` is out of the inlined code path due to slighly more compact code.; Additionally, the `R__ASSERT(count > 0)` has been removed, given that `ClusterSize_t::ValueType` is an unsigned integral type. This was seen during the evaluation of the relative overhead of RField's post-read callbacks, which for reference I provide below. Two different tests were carried out: _(i)_ 4 fields of type `std::uint32_t`; and _(ii)_ 2 fields of type `std::uint32_t` + 2 fields of a user-defined struct, where:; - BASE refers to the current `master` with `RFieldBase::Read()` slightly changed to not support read callbacks.; - [1] refers to the current `master` + the changes in this PR; - [2] refers to the current `master` where `RFieldBase::InvokeReadCallbacks()` is also outlined by moving it to RField.cxx. All tests used a Release `-O3` build, 40M entries and 505 compression; results in $us$, averaged over 10 executions. _(i)_ 4 fields of type `std::uint32_t`:; ```; | Average | Rel. increase; ---------------------------+-----------+--------------; BASE | 871502.4 |; No callbacks [1] | 867523.1 | 0.9954; No callbacks [1][2] | 878027.7 | 1.0075; 1 callback | 1068704.3 | 1.2263; 2 callbacks | 1233821.7 | 1.4157; ```; _(ii)_ 2 fields of type `std::uint32_t` + 2 user-defined structs:; ```; | Average | Rel. increase; ---------------------------+-----------+--------------; BASE | 2500244.7 |; No callbacks [1] | 2688342.6 | 1.0752; No callbacks [1][2] | 2746363.6 | 1.0984; 1 callback | 2883271.0 | 1.1532; 2 callbacks | 3016407.0 | 1.2064; ```. As noted in test _(ii)_ for 'No callbacks [1]', non-simple fields have an overhead due to the additional branch. Still, the change in this PR is beneficial. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13487:410,test,tests,410,https://root.cern,https://github.com/root-project/root/pull/13487,4,['test'],"['test', 'tested', 'tests']"
Testability,"As mentioned by @Teemperor , please rebase your branch rather than adding a merge commit, and please combine commits by amending them instead of adding a broken commit and then another one with fixes. The addition of broken commits make it really hard to do a git bisect if we find problems in the future. No commit hash is allowed not to compile. Please check on [CDash](http://cdash.cern.ch/index.php?project=ROOT) and [Jenkins](https://epsft-jenkins.cern.ch/view/ROOT) the build for this PR, and make sure you also do not introduce any warnings or failing tests. For Jenkins the PR itself has a link, and for CDash you can check towards the end of the page to find the specific builds. Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/693#issuecomment-313629802:559,test,tests,559,https://root.cern,https://github.com/root-project/root/pull/693#issuecomment-313629802,1,['test'],['tests']
Testability,"As noted in GitHub issue #7103, the interpolation code 3 is the same as code 2 in the `FlexibleInterpVar` and the `PiecewiseInterpolation` classes. According to some comments in the source code, interpolation code 3 was meant to be ""a parabolic version of log-normal"". There were two options to fix this:. 1) Actually implement this parabolic interpolation with linear; extrapolation, analogous to code 2 but in log space. 2) Clearly mark interpolation code 3 as non-existing. This commit implements solution 2, because the interpolation code 3 is not mentioned anywhere outside the ROOT source code. Especially not is the HistFactory paper:; https://cds.cern.ch/record/1456844/files/CERN-OPEN-2012-016.pdf. Implementing a new interpolation scheme that apparently was not needed in the last 10 years anyway would increase the burden on the user to understand all these different settings unnecessarily. Closes #7103.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13809:256,log,log-normal,256,https://root.cern,https://github.com/root-project/root/pull/13809,2,['log'],"['log', 'log-normal']"
Testability,"As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11674:302,test,tested,302,https://root.cern,https://github.com/root-project/root/pull/11674,1,['test'],['tested']
Testability,"As per failed tests, the new logic fails to recognize variable length arrays in some cases.; Maybe @pcanal can suggest what is the right condition to check to distinguish between scalars and arrays (we don't care about the difference between fixed and variable length, that's taken care of transparently by `TTreeReaderArray`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1532#issuecomment-358999475:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1532#issuecomment-358999475,2,"['log', 'test']","['logic', 'tests']"
Testability,"As pointed out by @eguiraud: We have to investigate the behaviour with different optimization levels. Here a test on just 1k LOC:. ```bash; $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags); 4.27user 0.18system 0:04.64elapsed 96%CPU (0avgtext+0avgdata 316668maxresident)k; 146312inputs+5224outputs (652major+69301minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags); 19.59user 0.27system 0:20.00elapsed 99%CPU (0avgtext+0avgdata 485228maxresident)k; 152088inputs+3984outputs (681major+157387minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O2 -c compile_1k.cxx $(root-config --cflags); 171.13user 0.82system 2:52.27elapsed 99%CPU (0avgtext+0avgdata 680344maxresident)k; 153304inputs+2608outputs (688major+243079minor)pagefaults 0swap; ```. Doing the same exercise with 10k LOC results in a crazy compile time of >1h for O1! See here:. ```bash; $ /usr/bin/time clang++ -O0 -c compile_10k.cxx $(root-config --cflags); 29.44user 0.65system 0:30.36elapsed 99%CPU (0avgtext+0avgdata 1727376maxresident)k; 146312inputs+37672outputs (652major+317460minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_10k.cxx $(root-config --cflags); 3963.21user 16.08system 1:06:27elapsed 99%CPU (0avgtext+0avgdata 17906760maxresident)k; 213696inputs+25224outputs (967major+7615032minor)pagefaults 0swaps; ```. Here the same exercise with 1k LOC but another STL version. Surprisingly, with `-stdlib=libc++` O1 is reasonably fast, though O2 takes ages:. ```bash; $ /usr/bin/time clang++ -O0 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++; 3.92user 0.14system 0:04.18elapsed 97%CPU (0avgtext+0avgdata 275288maxresident)k; 145816inputs+4088outputs (653major+57802minor)pagefaults 0swaps. $ /usr/bin/time clang++ -O1 -c compile_1k.cxx $(root-config --cflags) -stdlib=libc++; 13.17user 0.18system 0:13.49elapsed 98%CPU (0avgtext+0avgdata 353276maxresident)k; 150736inputs+3160outputs (679major+86578minor)pagefaults 0swaps. $ /usr/bin/time clan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7604#issuecomment-802808997:109,test,test,109,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-802808997,1,['test'],['test']
Testability,"As proposed in https://root-forum.cern.ch/t/chord-diagram/48785,; implement chord diagram and circular graphs for TH2; For chord diagram reuse d3.chord component of d3.js. Many other improvements - see jsroot log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9893:209,log,log,209,https://root.cern,https://github.com/root-project/root/pull/9893,1,['log'],['log']
Testability,"As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test; `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```; ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50; READ of size 4 at 0x616000617c20 thread T1; #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8; #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25; #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11; #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10; #4 0x7f8851931ee7 in TStreamerInfoActions::TConfigu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:112,test,test,112,https://root.cern,https://github.com/root-project/root/issues/12715,2,['test'],['test']
Testability,"As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. ; (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863); This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3516:440,test,testing,440,https://root.cern,https://github.com/root-project/root/pull/3516,1,['test'],['testing']
Testability,"As reported by CMSSW tests (for example: https://github.com/cms-sw/cmsdist/pull/6314#issuecomment-713547097) where the data appear odd/corrupted, there is an issue in TStreamerInfo::GenerateInfoForPair (which is almost always used for std::pair in the tip of v6.22 and master). The problem is when calculating the offset of the second data member, TStreamerInfo::GenerateInfoForPair uses (unwittingly, of course :) ), the value zero for the size of the enums. In addition (see https://github.com/root-project/root/issues/6725), the TEnum size information is no yet available in rootpcm files. (i.e. a fix to this bug will work only for default size enums until #6725 is fixed).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6726:21,test,tests,21,https://root.cern,https://github.com/root-project/root/issues/6726,1,['test'],['tests']
Testability,"As reported in ROOT-9463, the result of GetColumnNames is redundant. A simple reproducer:; ```; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; int a;; t.Branch(""a"", &a);; a = 42;; t.Fill();; t.Write();; f.Close();; ROOT::RDataFrame df(""t"", ""f.root"");. for (auto x : df.GetColumnNames()); std::cout <<x <<std::endl;; ```. This redundancy is now not exposed to the user. **It would be nice** to have more tests on real use cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:408,test,tests,408,https://root.cern,https://github.com/root-project/root/pull/2443,1,['test'],['tests']
Testability,"As reported in https://root-forum.cern.ch/t/th3-covariance-computation-issue/43724; sumw should be used instead of sumw2 in the computation of the diagonal elements of the covariance. ; ```; if (axis1 == 1 && axis2 == 1) {; return TMath::Abs(sumwx2/sumw - sumwx*sumwx/sumw2);; }; ```; should be : ; ```; if (axis1 == 1 && axis2 == 1) {; return TMath::Abs(sumwx2/sumw - sumwx*sumwx/(sumw*sumw));; }; ```; The computation of the off-diagonal element is correct!. To reproduce just do: ; ```; {; TH3D h1(""h1"",""h1"",10,0,10,10,0,10,10,0,10);; h1.Fill(1,1,1,2);; h1.Fill(3,3,3,4);; R__ASSERT( h1.GetCovariance(1,1) == h1.GetCovariance(1,2));; R__ASSERT ( TMath::AreEqualAbs( h1.GetCovariance(1,1), h1.GetStdDev(1)*h1.GetStdDev(1), 1.E-10) ); ; cout << ""test passed"" << endl;; }",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7319:747,test,test,747,https://root.cern,https://github.com/root-project/root/issues/7319,1,['test'],['test']
Testability,"As reported in https://root-forum.cern.ch/t/unexpected-additional-bins-appear-in-histogram-projection-when-using-bin-labels/41828/. projection of histogram with labels created additional bins.; This is due to scaling TH1::FindBin instead of TH1::FindFixBin and TH1::SetBinContent that internally extends also the axis if extendable. . Also as shown in test below, projection of TH2 and TH3 to Profille's do not preserve labels. . ```; void dinko() {; gStyle->SetLabelSize(0.1);; ; auto hist = new TH2F(""hist"", """", 2, 0, 2, 2, 0, 2);; printf( ""2D x-axis N bins: %d \n"", hist->GetXaxis()->GetNbins());; TH1D* hist_px = hist->ProjectionX();. printf( ""1D N bins: %d \n"",hist_px->GetXaxis()->GetNbins());. hist->GetXaxis()->SetBinLabel(1, ""A"");; hist->GetXaxis()->SetBinLabel(2, ""B"");; printf( ""2D x-axis N bins: %d \n"", hist->GetXaxis()->GetNbins());. hist_px = hist->ProjectionX();; auto c1 = new TCanvas();; c1->Divide(1,4);; c1->cd(1);; hist_px->DrawCopy();. printf( ""1D N bins: %d \n"", hist_px->GetXaxis()->GetNbins() );; hist_px->LabelsDeflate();; printf( ""1D N bins: %d \n"", hist_px->GetXaxis()->GetNbins() );. // test profile projection. auto prof_px = hist->ProfileX();; c1->cd(2);; prof_px->Draw();; printf( ""PROFILE N bins: %d \n"", prof_px->GetXaxis()->GetNbins() );; ; ; //// Test 3D; printf(""\nTEST 3D case \n"");; auto hist3 = new TH3F(""hist3"", """", 2, 0, 2, 2, 0, 3, 2, 0, 4);; hist3->GetXaxis()->SetBinLabel(1, ""A"");; hist3->GetXaxis()->SetBinLabel(2, ""B"");; hist_px = hist3->ProjectionX(""x"");; printf( ""1D N bins: %d \n"", hist_px->GetXaxis()->GetNbins() );; c1->cd(3);; hist_px->DrawCopy();. auto prof2_px = hist3->Project3DProfile(""yx"");; printf( ""PROFILE N bins: %d \n"", prof2_px->GetXaxis()->GetNbins() );; c1->cd(4);; prof2_px->Draw();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6658:352,test,test,352,https://root.cern,https://github.com/root-project/root/issues/6658,3,"['Test', 'test']","['Test', 'test']"
Testability,"As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3440/LABEL=ROOT-centos9,SPEC=noimt,V=master/testReport/junit/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level1 : ; ```; hadd Target file: hsimple401.root; hadd compression setting for all output: 401; hadd Source file 1: hsimple.root; hadd Target path: hsimple401.root:/; -- TEST COMMAND -- ; cd /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/roottest/root/io/filemerger; /usr/bin/timeout -s USR2 270s /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/bin/root.exe -q -l -b /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7); -- BEGIN TEST OUTPUT --. Processing /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7)...; Checking hsimple401.root; (int) 1000. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Error in <testSimpleFile>: Disk size of hsimple401.root should have been 418980 but is 418988 (tolerance 7 bytes). -- END TEST ERROR --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 255 but expected 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438:124,test,testReport,124,https://root.cern,https://github.com/root-project/root/issues/12438,9,"['TEST', 'test']","['TEST', 'testReport', 'testSimpleFile']"
Testability,As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/157773/console which the result of; ```; @phsft-bot build just on ROOT-performance-centos8-multicore/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF; ```. Several tutorials fails because they can load the intentionally non existent roofit libraries. ```; 15:15:19 The following tests FAILED:; 15:15:19 	909 - tutorial-roostats-FourBinInstructional-py (Failed); 15:15:19 	910 - tutorial-roostats-IntervalExamples-py (Failed); 15:15:19 	911 - tutorial-roostats-MultivariateGaussianTest-py (Failed); 15:15:19 	912 - tutorial-roostats-Zbi_Zgamma-py (Failed); 15:15:19 	913 - tutorial-roostats-rs101_limitexample-py (Failed); 15:15:19 	914 - tutorial-roostats-rs401c_FeldmanCousins-py (Failed); 15:15:19 	915 - tutorial-roostats-rs601_HLFactoryexample-py (Failed); 15:15:19 	916 - tutorial-roostats-rs701_BayesianCalculator-py (Failed); 15:15:19 	917 - tutorial-roostats-rs_bernsteinCorrection-py (Failed); 15:15:19 	918 - tutorial-roostats-rs_numbercountingutils-py (Failed); 15:15:19 	1193 - roottest-python-pickle-write (Failed); 15:15:19 	1194 - roottest-python-pickle-read (Failed); 15:15:19 	1195 - roottest-python-pythonizations-pythonizations (Failed); 15:15:19 	1197 - roottest-python-regression-regression (Failed); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11605:375,test,tests,375,https://root.cern,https://github.com/root-project/root/issues/11605,1,['test'],['tests']
Testability,"As seen in the [build logs for the most recent Windows build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/131507/console) ([this thread comment](https://github.com/root-project/root/pull/9349#issuecomment-984563179)), the Windows configuration now correctly fails when trying to manually set `roofit_multiprocess=ON` with log message:. ```; 13:01:05 CMake Error at cmake/modules/RootBuildOptions.cmake:353 (message):; 13:01:05 >>> Option 'roofit_multiprocess' is not supported on Windows.; 13:01:05 Call Stack (most recent call first):; 13:01:05 CMakeLists.txt:157 (include); ```. The other builds run as previously (they are not affected by the changes in the configuration, which only takes out `WIN32` from `if` statements). I will now fixup rebase the two commits into the 8 main commits of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349#issuecomment-984569246:22,log,logs,22,https://root.cern,https://github.com/root-project/root/pull/9349#issuecomment-984569246,2,['log'],"['log', 'logs']"
Testability,"As shown by the new CI, this breaks the test on `mac14arm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14048#issuecomment-1825235272:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/14048#issuecomment-1825235272,1,['test'],['test']
Testability,"As soon as the PR builds and passes all tests, it can be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3571#issuecomment-479020223:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/3571#issuecomment-479020223,1,['test'],['tests']
Testability,"As soon as ~~`T const&` is switched to `const T&` and~~ a test is added the PR has green light from me.; I slightly disagree with @dpiparo here and I think it would be nice to add a gtest in this same PR, but I'm not going to complain if this won't be the case :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/965#issuecomment-328134580:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/965#issuecomment-328134580,1,['test'],['test']
Testability,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible.; As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651#issuecomment-2074886748:89,test,testing,89,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-2074886748,1,['test'],['testing']
Testability,"As suggested by @pcanal in #12220, adds unit tests to verify the on-disk encoding of split encoded columns",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12393:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/12393,1,['test'],['tests']
Testability,"As the test failures are only related to HistFactory, I think it is better to split this PR in a non-HistFactory and a HistFactory part. The non-HistFactory part is now opened: https://github.com/root-project/root/pull/12392. Once that one is merged, I will rebase this PR such that only the HistFactory commits remain.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12340#issuecomment-1448129203:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/12340#issuecomment-1448129203,1,['test'],['test']
Testability,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"". In particular, in this commit:; - move alias management from RLoopManager to RBookedColumns; - remove alias-managing logic from RLoopManager; - refactor several functions so they only take RBookedColumns as input; rather than a list of defined names plus a map of aliases; (CheckForDefinition, CheckForRedefinition, FindUnknownColumns,; GetValidatedColumnNames, BookFilterJit, FindUsedColumns,; ParseRDFExpression); - use RBookedColumns::ResolveAlias instead of ResolveAlias helper function; - adapt dataframe_utils test to the new signature of FindUnknownColumns. Note that this is a backward-incompatible change for user code that; relied on this global definition of Aliases. We expect this to be an; exceedingly rare usecase, and if such code exists it will produce a; clear error message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9496:607,log,logic,607,https://root.cern,https://github.com/root-project/root/pull/9496,2,"['log', 'test']","['logic', 'test']"
Testability,"As this is refactoring stressMathMore, should we disable the old test in favor of the new one with Google test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/586#issuecomment-303045264:65,test,test,65,https://root.cern,https://github.com/root-project/root/pull/586#issuecomment-303045264,2,['test'],['test']
Testability,"As this needs a rebase anyway, the easiest way to move it forward is probably to split it in 2 PRs: one for the changes in cling and PyROOT (where we can try to solve the remaining related issues), one for the new RDF features (where we can add the new features to Filter too, and the corresponding tests -- I can help here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9174#issuecomment-1038844071:299,test,tests,299,https://root.cern,https://github.com/root-project/root/pull/9174#issuecomment-1038844071,1,['test'],['tests']
Testability,"As we cannot even know whether the other TDirectory has been deleted in the meantime, we have to; skip the optimization of erasing globalptr from the list of the oldvalue. This is expected to fix MT crashes observed by Alice. (cherry picked from commit 79a669bb1cd0ccd8bcaeb6c8f6b09c5ced761ac7). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8929:361,test,tested,361,https://root.cern,https://github.com/root-project/root/pull/8929,1,['test'],['tested']
Testability,"As we discovered in a CMSSW ROOT `master` sync PR, the new RooFit CPU; backend treats empty datasets differently from the legacy NLL evaluation; backend:; https://github.com/cms-sw/cmsdist/pull/9025. This commit is fixing this, in particular removing the assumption that; datasets used for fits with the new CPU backend are never empty. A unit test that validates the behavior for empty data objects is also; added. I set the priority to ""high"" because this is a blocker for CMSSW to use ROOT master.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14817:344,test,test,344,https://root.cern,https://github.com/root-project/root/pull/14817,1,['test'],['test']
Testability,"As we discussed in #2644, the nicest interface for printing is; printValue, and we should support people using this rather than going; through cling::Value::print(). This patch contains:; - Implementation of declarePrintValue; - Re-Implementation of ClingPrintValue because I changed to use Evaluate; some time ago; - removing of RVec version of printValue which wasn't used at all; - Fix test/vecops_rvec.cxx, printValue is never supposed to be called by; a normal user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2664:389,test,test,389,https://root.cern,https://github.com/root-project/root/pull/2664,1,['test'],['test']
Testability,As we don't converge quickly enough we will just release v6.26/00 with broken cling tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1048537447:84,test,tests,84,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1048537447,1,['test'],['tests']
Testability,As you might see the the ticket mentioned above I have no clue how to display a GL application coming from lxplus. So I am stuck and cannot test your problem. sorry for that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13418#issuecomment-1682359083:140,test,test,140,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1682359083,1,['test'],['test']
Testability,"AsDouble(); > Which is: -1.9812626051377354e-49; > [ FAILED ] CladDerivator.erf2 (18 ms); > [ RUN ] CladDerivator.erfc1; > [ OK ] CladDerivator.erfc1 (10 ms); > [ RUN ] CladDerivator.erfc2; > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; > 0.83021499484118955; > value->GetAsDouble(); > Which is: 1.9812626051377354e-49; > [ FAILED ] CladDerivator.erfc2 (13 ms); > ```. @arora-vidushi, here is some more debug output from the windows machine:; ```; C:\Users\vvdebug\source\repos\root\out>C:\Users\vvdebug\source\repos\root\out\math\mathcore\test\Debug\CladDerivatorTests.exe --gtest_filter=""CladDerivator.logx6""; Running main() from C:\Users\vvdebug\source\repos\root\out\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; Note: Google Test filter = CladDerivator.logx6; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from CladDerivator; [ RUN ] CladDerivator.logx6; (const char *) ""double l6_d2arg0(double x) {; double _d_x = 1;; double _d__d_x = 0;; double _d_x0 = 1;; clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > _t0 = Log10_pushforward_pushforward(x, _d_x0, _d_x, _d__d_x);; ValueAndPushforward<double, double> _d__t0 = _t0.pushforward;; ValueAndPushforward<double, double> _t00 = _t0.value;; return _d__t0.pushforward;; }; ""; (clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > (*)(double, double, double, double)) Function @0xf1a02d0; clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > Log10_pushforward_pushforward(double x, double d_x, double _d_x, double _d_d_x) {; ValueAndPushforward<double, double> _t0 = clad::custom_derivatives::TMath::Log10_pushforward(x, _d_x);; clad::ValueAndPushforward<Double_t, Double_t> _t1 = Ln10_pushforward();; double &_t2 = _t1.va",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1399226357:2198,test,test,2198,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1399226357,1,['test'],['test']
Testability,"AsDouble(); > Which is: 4.4274168156280442e+20; > [ FAILED ] CladDerivator.logx6 (13 ms); > [ RUN ] CladDerivator.minimum; > [ OK ] CladDerivator.minimum (24 ms); > [ RUN ] CladDerivator.erf1; > [ OK ] CladDerivator.erf1 (31 ms); > [ RUN ] CladDerivator.erf2; > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(245): error: Expected equality of these values:; > -0.83021499484118955; > value->GetAsDouble(); > Which is: -1.9812626051377354e-49; > [ FAILED ] CladDerivator.erf2 (18 ms); > [ RUN ] CladDerivator.erfc1; > [ OK ] CladDerivator.erfc1 (10 ms); > [ RUN ] CladDerivator.erfc2; > C:\build\workspace\root-pullrequests-build\root\math\mathcore\test\CladDerivatorTests.cxx(269): error: Expected equality of these values:; > 0.83021499484118955; > value->GetAsDouble(); > Which is: 1.9812626051377354e-49; > [ FAILED ] CladDerivator.erfc2 (13 ms); > ```. @arora-vidushi, here is some more debug output from the windows machine:; ```; C:\Users\vvdebug\source\repos\root\out>C:\Users\vvdebug\source\repos\root\out\math\mathcore\test\Debug\CladDerivatorTests.exe --gtest_filter=""CladDerivator.logx6""; Running main() from C:\Users\vvdebug\source\repos\root\out\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; Note: Google Test filter = CladDerivator.logx6; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from CladDerivator; [ RUN ] CladDerivator.logx6; (const char *) ""double l6_d2arg0(double x) {; double _d_x = 1;; double _d__d_x = 0;; double _d_x0 = 1;; clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > _t0 = Log10_pushforward_pushforward(x, _d_x0, _d_x, _d__d_x);; ValueAndPushforward<double, double> _d__t0 = _t0.pushforward;; ValueAndPushforward<double, double> _t00 = _t0.value;; return _d__t0.pushforward;; }; ""; (clad::ValueAndPushforward<ValueAndPushforward<double, double>, ValueAndPushforward<double, double> > (*",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021#issuecomment-1399226357:1847,test,test,1847,https://root.cern,https://github.com/root-project/root/pull/12021#issuecomment-1399226357,1,['test'],['test']
Testability,Asked the originator to test. See https://sft.its.cern.ch/jira/browse/ROOT-9032,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1080:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/1080,1,['test'],['test']
Testability,Assert does not work on Linux?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1248:0,Assert,Assert,0,https://root.cern,https://github.com/root-project/root/pull/1248,1,['Assert'],['Assert']
Testability,Assert isn't included from the STL/libc module as it's a textual; header which needs to be textually parsed. Let's add it to the; TCling `declare` call to cheaply get assert with modules into; the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1387:0,Assert,Assert,0,https://root.cern,https://github.com/root-project/root/pull/1387,2,"['Assert', 'assert']","['Assert', 'assert']"
Testability,Assert when trying to write RNTuple to full disk,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14487:0,Assert,Assert,0,https://root.cern,https://github.com/root-project/root/issues/14487,1,['Assert'],['Assert']
Testability,Assertion Declaration context must already be complete!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/14186,1,['Assert'],['Assertion']
Testability,Assertion exception including header file with GaudiPython module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7950:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/7950,1,['Assert'],['Assertion']
Testability,Assertion failure in TMVA `can't dereference value-initialized vector iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13498:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/13498,1,['Assert'],['Assertion']
Testability,Assertion failure in TMVA with `vector iterators incompatible` error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13497:0,Assert,Assertion,0,https://root.cern,https://github.com/root-project/root/issues/13497,1,['Assert'],['Assertion']
Testability,"Assigning to @pcanal - but expect a higher response time. This is a well known issue with TTree: not all code paths allow for robust handling of data errors (even though here, Philippe seems to suggest that it can indeed be caught). Having access to this file could indeed be very useful. We should then be able to create another, public file from that which we can use for testing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-950921176:374,test,testing,374,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-950921176,1,['test'],['testing']
Testability,"Assume to have a TH1D object, with non-uniform binning, representing some kind of differential quantity (for example, a particle flux as a function of the particle energy, dN/dE). The `TH1D::GetRandom` method will return random numbers distributed according to the histogram bins height, rather than the histogram bins area. The code attached here (a ROOT macro) reproduces this behavior (I attach it as a .txt file, since .C files are not supported); [test.txt](https://github.com/root-project/root/files/7845002/test.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9530:453,test,test,453,https://root.cern,https://github.com/root-project/root/issues/9530,2,['test'],['test']
Testability,"Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4159:531,assert,assert,531,https://root.cern,https://github.com/root-project/root/pull/4159,1,['assert'],['assert']
Testability,"At a fundamental level the problem is that `RDataFrame` has some homegrown logic to figure out the type of a branch/leaf that is sensible to changes in behavior of `TTree::GetBranch` or `TTree::GetLeaf`. The problem RDataFrame has with this patch is that in the following repro, in which a `TClonesArray` branch is added to a `TTree`, behavior of `tree.GetLeaf(""clonesarray"")` has changed: before this patch, it would return a nullptr (while `tree.GetBranch(""clonesarray"")` would return the branch; after this patch `tree.GetLeaf(""clonesarray"")` returns a valid `TLeaf`, so RDataFrame thinks the type of the branch is `leaf->GetTypeName()`, which is `Int_t` for this branch containing `TClonesArray`. I don't think this change in behavior is intentional given that the PR is supposed to fix retrieval of leaves by their full name, not change the behavior of retrieval of leaves with no dot in their names?. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TTree.h>; #include <TClonesArray.h>; #include <TH1D.h>. int main(); {; TClonesArray arr(""TH1D"", 3);; for (int i = 0; i < 3; ++i) {; auto *h = static_cast<TH1D *>(arr.ConstructedAt(i));; h->SetBins(25, 0, 10);; h->Fill(i);; }; TTree t(""t"", ""t"");; t.Branch(""arr"", &arr);; t.Fill();. auto l = t.GetLeaf(""arr"");; if (l == nullptr) {; std::cout << ""leaf is null"" << std::endl; // this is what happens before this PR; return 0;; }. // this prints ""Int_t"", and it is what happens with this PR; std::cout << ""leaf has type name "" << l->GetTypeName() << std::endl;; return 0;; }; ```. P.S.; note that both before and after this patch, `TTree::GetListOfLeaves` does not report `""arr""` as a leaf:. ```; root [4] for (auto e : *t->GetListOfLeaves()) std::cout << e->GetName() << std::endl;; arr_; arr.TH1; arr.TArrayD; ```. P.P.S. it seems the problem is that with this patch `tree->GetLeaf(""arr"")` returns leaf called `""arr_""`:. ```cpp; ~/S/d/getleaf_problem root -l df_readwritetclonesarray.root ; root [0] ; Attaching file df_readwritetclonesarray.root ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6258#issuecomment-682390615:75,log,logic,75,https://root.cern,https://github.com/root-project/root/pull/6258#issuecomment-682390615,1,['log'],['logic']
Testability,"At least according to my limited tests, removing the queuing mechanism from TBufferMerger is equally fast because it avoids the overhead of preparing a TBufferFile for queuing, and uses less memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/14034,1,['test'],['tests']
Testability,"At least on my machine substituting `Declare` with `ProcessLine` fixed the test failure, let's see what the CI has to say",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14358#issuecomment-1894171975:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/14358#issuecomment-1894171975,1,['test'],['test']
Testability,"At least these test and tutorial failures are already fixed in my branch, so I hope it will be temporary temporary until we land that patch. But I'm completely fine to use `FIXME_TEMPORARILY_EXCLUDED_FOR_RUNTIME_CXXMODULES` if you have a strong opinion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992#issuecomment-387664342:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/1992#issuecomment-387664342,1,['test'],['test']
Testability,"At least with the [llvm13 branch](https://github.com/vgvassilev/root/tree/llvm13) on macOS, `cling::DynamicLibraryManager::searchLibrariesForSymbol` sometimes finds non-exported symbols and confuses the rest of the autoloading infrastructure because the symbol is not available after loading that library. ### Reproducer. Slightly modify the new `AutoloadLibraryGenerator`:; ```diff; diff --git a/core/metacling/src/TClingCallbacks.cxx b/core/metacling/src/TClingCallbacks.cxx; index 1401f04ee6..b538695533 100644; --- a/core/metacling/src/TClingCallbacks.cxx; +++ b/core/metacling/src/TClingCallbacks.cxx; @@ -188,6 +188,8 @@ public:; continue;; }. + printf(""found symbol '%s' in '%s'\n"", (*name).str().c_str(), libName.c_str());; +; found[libName].push_back(name);; }. ```. Then execute the following Python file:; ```py; import ROOT; print(ROOT.kTRUE); ```. The output (on `macitois22`) is:; ```; found symbol '__ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy' in '/Users/sftnight/jhahnfel/root.build.asserts/lib/libCling.so' ; found symbol '__ZL5kTRUE' in '/Users/sftnight/jhahnfel/root.build.asserts/lib/libRIO.so'; 1; ```; where `kTRUE` should not be found. Or at least the symbols is still not available after loading `libRIO`, and:; ```; $ nm /Users/sftnight/jhahnfel/root.build.asserts/lib/libRIO.so | grep kTRUE; 0000000000272988 s __ZL5kTRUE; ```; From the `man`-page of `nm`:; > If the symbol is local (non-external), the symbol's type is instead represented by the corresponding lowercase letter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10970:1011,assert,asserts,1011,https://root.cern,https://github.com/root-project/root/issues/10970,3,['assert'],['asserts']
Testability,"At the moment, `push` workflows pass `--base_ref master` to `build_root.py`. This means that they may actually pick up a later commit (= the current commit on the branch) at the time the job actually starts to run. In order to be usable as indications when a certain configuration broke, it would be more useful to test exactly the pushed commit, identified by its hash. Unfortunately, fixing this isn't as easy as replacing; https://github.com/root-project/root/blob/db6ff452b032b23251970046fd1febe066e4fa4d/.github/workflows/root-ci.yml#L456-L465; to pass `--base_ref ${{ github.sha }}` because `build_root.py` calls `git clone --branch {branch} --single-branch {repository}`. Passing a hash here doesn't work (in local tests), and would otherwise probably result in a detached `HEAD`. Another complication is that the sources are included in the build artifacts used by PR builds, so they have to look like an ordinary clone for the rebase operation to work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14061:315,test,test,315,https://root.cern,https://github.com/root-project/root/issues/14061,2,['test'],"['test', 'tests']"
Testability,"At this point `R__ASSERT` is confusing and unusable, it is used as a `run-time pre-requisite check` in lots of places (but not all) and for that ""need"" to not behave like `assert` which is confusing and in some place use as a typical `assert` (detecting supposedly ""impossible"" cases). I think that we ought to:; * Add two new (because user may or may not be using R__ASSERT and relying on its behavior) behavior; * `R__DEBUG_ASSERT` or `R__REQUIRE` that behaves like `assert` but use `::Fatal` (or better yet the new error logger :) ); * `R__VALIDATE` that behaves like the current R__ASSERT; * Open a ticket to remind us to replace (eventually all) the usage of `R__ASSERT` which the appropriate new macro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-873129755:172,assert,assert,172,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-873129755,4,"['assert', 'log']","['assert', 'logger']"
Testability,Attempt to solve race conditions on roostats tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/362:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/362,1,['test'],['tests']
Testability,"Attribute lookup of the `RDF` property of the `ROOTFacade` class can; potentially lead to issues with the facade not being initialised yet at; that moment. This can happen since creation of the distributed RDataFrame; module is also part of the logic of the `RDF` property. An example of such issues can be reproduced by adding the line; `from DistRDF import CppWorkflow` to the `__init__.py` file. Without; this commit, it would trigger this error:. ```python; >>> import DistRDF; Traceback (most recent call last):; File "".../lib/ROOT/_facade.py"", line 326, in RDF; ns.Experimental.Distributed = _create_rdf_experimental_distributed_module(ns.Experimental); File "".../lib/ROOT/_facade.py"", line 65, in _create_rdf_experimental_distributed_module; return DistRDF.create_distributed_module(parent); AttributeError: partially initialized module 'DistRDF' has no attribute 'create_distributed_module' (most likely due to a circular import). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File "".../lib/DistRDF/__init__.py"", line 20, in <module>; from DistRDF import CppWorkflow; File "".../lib/DistRDF/CppWorkflow.py"", line 16, in <module>; RunGraphs = ROOT.RDF.RunGraphs; File "".../lib/ROOT/_facade.py"", line 328, in RDF; raise Exception('Failed to pythonize the namespace RDF'); Exception: Failed to pythonize the namespace RDF; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10069:245,log,logic,245,https://root.cern,https://github.com/root-project/root/pull/10069,1,['log'],['logic']
Testability,Automated documentation test for new PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9953:24,test,test,24,https://root.cern,https://github.com/root-project/root/issues/9953,1,['test'],['test']
Testability,Automatically adjust C++ version of PCH in Cling's test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13283:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/13283,1,['test'],['test']
Testability,"Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases; more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and; consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is; the 'public' address since only information are IP, port and name ... and the name is more or so; arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try; to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to; a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen; by the server.; For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine); ```; void GetPrimaryIp(char* buffer, size_t buflen); {; assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);; assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;; uint16_t kDnsPort = 53;; struct sockaddr_in serv;; memset(&serv, 0, sizeof(serv));; serv.sin_family = AF_INET;; serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);; serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));; assert(err != -1);. sockaddr_in name;; socklen_t namelen = sizeof(name);; err = getsockname(sock, (sockaddr*) &name, &namelen);; assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);; assert(p);. close(sock);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4310:1059,assert,assert,1059,https://root.cern,https://github.com/root-project/root/pull/4310,5,['assert'],['assert']
Testability,Avoid inclusion of arrow testing stuff,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13523:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/13523,1,['test'],['testing']
Testability,Avoid testing that an exception is thrown by cling on Apple M1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9544:6,test,testing,6,https://root.cern,https://github.com/root-project/root/pull/9544,2,['test'],['testing']
Testability,"Avoid using forward-declared class as default template arguments in; `RooMinimizer` and `MinuitFcnGrad`. This is the fix for the following test failures in the nightlies:. ```; projectroot.roottest.python.cling.roottest_python_cling_class; projectroot.roottest.python.cling.roottest_python_cling_api; projectroot.roottest.root.meta.tclass.regression.roottest_root_meta_tclass_regression_execNormalizationInfPy; projectroot.roottest.python.cling.roottest_python_cling_cling; projectroot.roottest.root.meta.enumPayloadManipulation.roottest_root_meta_enumPayloadManipulation_checkEnumFwdDecl; ```. For sure we know that these failures got introduced by; root-project#8700. The failures that we see since [root-project#8700](root-project#8700), here are the comments where the bot reported them first:; First Ubuntu 16 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). First Windows 10 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). I narrowed down the origin of this regression to a small part of the; diff of the full PR. The bad guy is some change in one of these files:. * roofit/roofitcore/inc/RooMinimizer.h; * roofit/roofitcore/test/CMakeLists.txt; * roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx. What was fishy in `RooMinimizer.h` was the usage of a forward-declared; class as default template argument. The default template arguments are; commented out now, because these will only become relevant in later; developments by @egpbos.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:139,test,test,139,https://root.cern,https://github.com/root-project/root/pull/8997,5,"['Test', 'test']","['TestStatistics', 'test', 'testLikelihoodSerial']"
Testability,"Avoids some memory allocations when the internal unzip buffer is never used throughout the decompressor's lifetime (since RNTupleDecompressor allocates a Buffer_t when default constructed).; With this change, RPageStorageDaos doesn't need to allocate a decompressor anymore. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15982:296,test,tested,296,https://root.cern,https://github.com/root-project/root/pull/15982,1,['test'],['tested']
Testability,Awesome! Can we also add `codecov` to measure given PR test coverage? You can take a look at https://github.com/vgvassilev/clad/blob/57345cfae9fd3c1ad2fc1f5a4e2e95e0ee4a68ac/.github/workflows/ci.yml#L737-L741,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12314#issuecomment-1430887529:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/12314#issuecomment-1430887529,1,['test'],['test']
Testability,Axel and I had a very quick chat:; * The preferred option for ATLAS is to have 6.24/06a which contains just the fix/commit for https://github.com/root-project/root/pull/10369 - Axel warns us that this will not be tested at all at and that is his main worry - we did not conclude if this could done by the ROOT team or if this could be handled directly on top LCG build by the SPI team ?; * As a backup solution in addition we could get a full 6.24/08 release will all the commits/fixes since the ROOT 6.24/06 release.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10515#issuecomment-1116998329:213,test,tested,213,https://root.cern,https://github.com/root-project/root/issues/10515#issuecomment-1116998329,1,['test'],['tested']
Testability,"Axel dug out https://sft.its.cern.ch/jira/browse/ROOT-8273 and it even has a patch that fixes the test for me. However, the change only works if the interpreter knows about the template instantiation before the `TClass` is initialized :neutral_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9543#issuecomment-1013005027:98,test,test,98,https://root.cern,https://github.com/root-project/root/issues/9543#issuecomment-1013005027,1,['test'],['test']
Testability,"Axel has observed a flaky test on fedora30, which collects too late objects being already out of scope and the fails the test of the refcounts. I've put invokations of the GC now always before we test refcounts to prevent such failures.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6127:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/6127,3,['test'],['test']
Testability,BANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -std=c++17 -MD -MT interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o.d -o interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/PPCaching.cpp; [6494/9540] /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:2620,test,tests,2620,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability,"BBUnique (1070 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsSpin; 76: [ OK ] RWLock.VeryLargeconcurrentReadsSpin (392 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesTL; 76: [ OK ] RWLock.concurrentReadsAndWritesTL (3193 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesTL; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesTL (3102 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsAndWritesTL; 76: [ OK ] RWLock.VeryLargeconcurrentReadsAndWritesTL (6246 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsTL; 76: [ OK ] RWLock.VeryLargeconcurrentReadsTL (1072 ms); 76: [----------] 110 tests from RWLock (213032 ms total); 76: ; 76: [----------] 10 tests from TThreadedObject; 76: [ RUN ] TThreadedObject.CreateAndDestroy; 76: [ OK ] TThreadedObject.CreateAndDestroy (1 ms); 76: [ RUN ] TThreadedObject.Get; 76: [ OK ] TThreadedObject.Get (10 ms); 76: [ RUN ] TThreadedObject.GetAtSlot; 76: [ OK ] TThreadedObject.GetAtSlot (0 ms); 76: [ RUN ] TThreadedObject.GetAtSlotUnchecked; 76: [ OK ] TThreadedObject.GetAtSlotUnchecked (0 ms); 76: [ RUN ] TThreadedObject.GetAtSlotRaw; 76: [ OK ] TThreadedObject.GetAtSlotRaw (0 ms); 76: [ RUN ] TThreadedObject.SetAtSlot; 76: [ OK ] TThreadedObject.SetAtSlot (0 ms); 76: [ RUN ] TThreadedObject.Merge; 76: [ OK ] TThreadedObject.Merge (159 ms); 76: [ RUN ] TThreadedObject.SnapshotMerge; 76: [ OK ] TThreadedObject.SnapshotMerge (1 ms); 76: [ RUN ] TThreadedObject.GrowSlots; 76: [ OK ] TThreadedObject.GrowSlots (0 ms); 76: [ RUN ] TThreadedObject.GetNSlots; 76: [ OK ] TThreadedObject.GetNSlots (1 ms); 76: [----------] 10 tests from TThreadedObject (172 ms total); 76: ; 76: [----------] Global test environment tear-down; 76: [==========] 126 tests from 3 test suites ran. (213929 ms total); 76: [ PASSED ] 126 tests.; 1/1 Test #76: gtest-core-thread-test-corethreadtestUnit ... Passed 214.25 sec. The following tests passed:; gtest-core-thread-test-corethreadtestUnit. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 215.09 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:14071,test,tests,14071,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,12,"['Test', 'test']","['Test', 'test', 'test-corethreadtestUnit', 'tests']"
Testability,"BOOL=OFF -Dbuiltin_vc:BOOL=OFF -Dbuiltin_vdt:BOOL=OFF -Dbuiltin_veccore:BOOL=OFF -Dbuiltin_xrootd:BOOL=OFF -Dbuiltin_xxhash:BOOL=OFF -Dbuiltin_zeromq:BOOL=OFF -Dbuiltin_zlib:BOOL=OFF -Dbuiltin_zstd:BOOL=OFF -DXROOTD_ROOT_DIR=/scratch/greenc/test-products/xrootd/v5_4_3b/Linux64bit+3.10-2.17-c14-p3913-debug -Dalien:BOOL=OFF -Darrow:BOOL=OFF -Dasimage:BOOL=ON -Dcefweb:BOOL=OFF -Dclad:BOOL=ON -Dcuda:BOOL=OFF -Dcudnn:BOOL=OFF -Ddaos:BOOL=OFF -Ddataframe:BOOL=ON -Ddavix:BOOL=OFF -Ddcache:BOOL=OFF -Dfcgi:BOOL=OFF -Dfftw3:BOOL=ON -Dfitsio:BOOL=OFF -Dgdml:BOOL=ON -Dgfal:BOOL=OFF -Dgsl_shared:BOOL=ON -Dgviz:BOOL=OFF -Dhttp:BOOL=ON -Dimt:BOOL=ON -Djemalloc:BOOL=OFF -Dmathmore:BOOL=ON -Dminuit2:BOOL=ON -Dmlp:BOOL=ON -Dmonalisa:BOOL=OFF -Dmpi:BOOL=OFF -Dmysql:BOOL=OFF -Dodbc:BOOL=OFF -Dopengl:BOOL=ON -Doracle:BOOL=OFF -Dpgsql:BOOL=ON -Dpyroot:BOOL=ON -Dpyroot_legacy:BOOL=OFF -Dpythia6:BOOL=ON -Dpythia6_nolink:BOOL=OFF -Dpythia8:BOOL=OFF -Dqt5web:BOOL=OFF -Dqt6web:BOOL=OFF -Dr:BOOL=OFF -Droofit:BOOL=ON -Droot7:BOOL=ON -Dshadowpw:BOOL=OFF -Dspectrum:BOOL=ON -Dsqlite:BOOL=OFF -Dssl:BOOL=ON -Dtcmalloc:BOOL=OFF -Dtmva-cpu:BOOL=ON -Dtmva-gpu:BOOL=OFF -Dtmva-pymva:BOOL=ON -Dtmva-rmva:BOOL=OFF -Dtmva:BOOL=ON -During:BOOL=OFF -Dunuran:BOOL=OFF -Dvc:BOOL=OFF -Dvdt:BOOL=OFF -Dveccore:BOOL=OFF -Dvecgeom:BOOL=OFF -Dvmc:BOOL=OFF -Dwebgui:BOOL=ON -Dx11:BOOL=ON -Dxml:BOOL=ON -Dxproofd:BOOL=OFF -Dxrootd:BOOL=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_STANDARD=17 -DCMAKE_C_COMPILER=clang -DCMAKE_C_STANDARD=11 -DCMAKE_Fortran_COMPILER=gfortran -DCMAKE_Fortran_FLAGS=-std=legacy -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DLLVM_ENABLE_LIBCXX:BOOL=ON -Dlibcxx:BOOL=ON /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99; ```; Notes:; * Source built is 66df8b8ee6b336197678950c4f9c83f2c479662a, attached patches recommended:; * [fermi_root_6_27_99.patch](https://github.com/root-project/root/files/10393538/fermi_root_6_27_99.patch); * [fermi_root_6.patch](https://github.com/root-project/root/files/103",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1378895796:3155,test,test-products,3155,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1378895796,1,['test'],['test-products']
Testability,"BOOST_SPIRIT_THREADSAFE -DPHOENIX_THREADSAFE -DBOOST_MATH_DISABLE_STD_FPCLASSIFY -DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DCMSSW_GIT_HASH=\""CMSSW_14_2_ROOT6_X_2024-09-03-2300\"" -DPROJECT_NAME=\""CMSSW\"" -DPROJECT_VERSION=\""CMSSW_14_2_ROOT6_X_2024-09-03-2300\"" -Isrc -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/alpaka/1.1.0-4d4f1220bfca9be4c4149ab758d15463/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/pcre/8.43-e34796d17981e9b6d174328c69446455/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-7ac88d918a6883d593abc133ee0eb2e9/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/bz2lib/1.0.6-d065ccd79984efc6d4660f410e4c81de/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/cuda/12.4.1-fc5cb0e72dba64b6abbf00089f3a044c/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/libuuid/2.34-27ce4c3579b5b1de2808ea9c4cd8ed29/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/lcg/root/6.33.01-48fd78c793bc73bd3f87499c5ca7bf90/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/tbb/v2021.9.0-2391c941213c757dc9a1835b31681235/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/xz/5.2.5-6f3f49b07db84e10c9be594a1176c114/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/zlib/1.2.11-1a082fc322b0051b504cc023f21df178/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/eigen/3bb6a48d8c171cf20b5f8e48bfb4e424fbd4f79e-39786ff94f8aa2f543922cad720e1b32/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/eigen/3bb6a48d8c171cf20b5f8e48bfb4e424fbd4f79e-39786ff94f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2331366418:2355,test,tests,2355,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2331366418,2,['test'],"['testBuildDir', 'tests']"
Testability,"BShape.cxx""); ```; should be sufficient. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; The `.cxx` and `.h` files can be found on the [forum](https://root-forum.cern.ch/t/import-custom-pdf-in-rooworkspace/43478?u=mwilkins).; ```python; import os. import ROOT as r. # declare PDF; r.gROOT.ProcessLine("".x RooSDSCBShape.cxx""). # manually set Decl and Impl files; cls = r.TClass.GetClass(""RooSDSCBShape""); cls.SetDeclFile(f""{os.getcwd()}/RooSDSCBShape.h"", 0); cls.SetImplFileName(f""{os.getcwd()}/RooSDSCBShape.cxx""). # store the class in a workspace; ws = r.RooWorkspace(""ws""); ws.addClassDeclImportDir(os.getcwd()); ws.addClassImplImportDir(os.getcwd()); ws.importClassCode(cls); ws.writeToFile(""test.root""). # extract the class from the workspace; f = r.TFile.Open(""test.root""); inws = f.Get(""ws""); ```. Output:; ```; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. (RooSDSCBShape) An instance of RooSDSCBShape.; [#1] INFO:ObjectHandling -- RooWorkspace::autoImportClass(ws) importing code of class RooSDSCBShape from /<path/to>/RooSDSCBShape.cxx and /<path/to>/RooSDSCBShape.h; [#1] INFO:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() creating code export directory .wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws to extract coded embedded in workspace; [#1] INFO:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() Extracting declaration code of class RooSDSCBShape, file .wscode.305a6bb0-6f9d-11eb-9678-a001a8c0beef.ws/RooSDSCBShape.h; [#1] INFO:ObjectHandling -- RooWorkspace::CodeRepo::compileClasses() Extracting implementation code of class RooSDSCBShape, file .wscode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7249:1803,test,test,1803,https://root.cern,https://github.com/root-project/root/issues/7249,1,['test'],['test']
Testability,"BTW, do we have any specific test for this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-800880842:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-800880842,1,['test'],['test']
Testability,"BTW, here's the current output:; `massif.out.40644`. ```massif; desc: (none); cmd: root -l -q xAna_monoZ_preselect.C++(""../../../infiles_NCUGlobal/infiles_signal_Mx2-150_Mv-500_Mx1-1_ctau-1/NCUGlobalTuples_13.root"", ""testOutSignal.root"", true, true); time_unit: i; #-----------; snapshot=0; #-----------; time=0; mem_heap_B=0; mem_heap_extra_B=0; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=1; #-----------; time=5315179; mem_heap_B=72704; mem_heap_extra_B=8; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=2; #-----------; time=5317821; mem_heap_B=72782; mem_heap_extra_B=18; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=3; #-----------; time=5317958; mem_heap_B=72860; mem_heap_extra_B=28; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=4; #-----------; time=5319013; mem_heap_B=72938; mem_heap_extra_B=38; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=5; #-----------; time=5320789; mem_heap_B=72938; mem_heap_extra_B=38; mem_stacks_B=0; heap_tree=peak; n2: 72938 (heap allocation functions) malloc/new/new[], --alloc-fns, etc.; n1: 72704 0x4A783A5: ??? (in /nix/store/lg104nh0szci8slz5z6494m457jm5y3p-gcc-10.3.0-lib/lib/libstdc++.so.6.0.28); n1: 72704 0x400FBCD: call_init (in /nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/ld-2.33.so); n1: 72704 0x400FCB3: _dl_init (in /nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/ld-2.33.so); n1: 72704 0x4001089: ??? (in /nix/store/cvr0kjg2q7z2wwhjblx6c73rv422k8cm-glibc-2.33-47/lib/ld-2.33.so); n1: 72704 0x3: ???; n1: 72704 0x1FFEFFE4AA: ???; n1: 72704 0x1FFEFFE4AF: ???; n1: 72704 0x1FFEFFE4B2: ???; n0: 72704 0x1FFEFFE4B5: ???; n0: 234 in 3 places, all below massif's threshold (1.00%); #-----------; snapshot=6; #-----------; time=5320789; mem_heap_B=72860; mem_heap_extra_B=28; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=7; #-----------; time=5322033; mem_heap_B=72782; mem_heap_extra_B=18; mem_stacks_B=0; heap_tree=empty; #-----------; snapshot=8; #-------",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087#issuecomment-950973036:217,test,testOutSignal,217,https://root.cern,https://github.com/root-project/root/issues/9087#issuecomment-950973036,1,['test'],['testOutSignal']
Testability,"BTW, if it's a blocker for you, you can replace `fprintf` by a more C++ version. For example:; ```; std::ofstream fid(""testfile.txt"");; fid << ""text\n"";; fid << 1 << ""\n"";; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11533#issuecomment-1274788630:119,test,testfile,119,https://root.cern,https://github.com/root-project/root/issues/11533#issuecomment-1274788630,1,['test'],['testfile']
Testability,"BTW, is there a place to add test cases for `thisroot.sh`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11557#issuecomment-1281873390:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/11557#issuecomment-1281873390,1,['test'],['test']
Testability,"BTW, why doing this test ? we have something working with all bash versions, simply use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081920556:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081920556,1,['test'],['test']
Testability,BUILD TESTING - no change,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2846:6,TEST,TESTING,6,https://root.cern,https://github.com/root-project/root/pull/2846,1,['TEST'],['TESTING']
Testability,Backport #16819. On the MacOS same unix sockets cannot be opened twice for listening -; when using with netcat or socat; Therefore start nc -k -l -U $socketfile > $socketfile.log to redirect; socket output into the plain file permanently.; And then monitor this file content - line by line. Use trap command to cleanup all temporary files afterwards. And from ROOT side need to send \n to ensure new lines in produced log file. This changes required to be able use rootssh from the MacOS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16820:175,log,log,175,https://root.cern,https://github.com/root-project/root/pull/16820,2,['log'],['log']
Testability,Backport fixes for Cling tests [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13318:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/13318,1,['test'],['tests']
Testability,Backport in 6.26 fix for KolmogorovSmirnov test in GoFTest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9855:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/9855,1,['test'],['test']
Testability,Backport in 6.28 fixes in pymva to avoid timeout in keras tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/13807,1,['test'],['tests']
Testability,"Backport of commit 1b5404aff3. Original commit message:; ```; We would previously pick between calling an initializer list constructor; and calling a default constructor unstably in this situation, depending; on whether the inherited default constructor had already been used; elsewhere in the program.; ```. This commit first appeared in LLVM 10 and fixes some problems with modules when building with GCC 12, for example ODRHash asserts in `roottest-root-io-uniquePointer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11359:431,assert,asserts,431,https://root.cern,https://github.com/root-project/root/pull/11359,1,['assert'],['asserts']
Testability,"Backport of commit 1b5404aff3. Original commit message:; ```; We would previously pick between calling an initializer list constructor; and calling a default constructor unstably in this situation, depending; on whether the inherited default constructor had already been used; elsewhere in the program.; ```. This commit first appeared in LLVM 10 and fixes some problems with modules when building with GCC 12, for example ODRHash asserts in `roottest-root-io-uniquePointer`. (cherry picked from commit cf32d2bc738367fe0d5c8ccbc0856d345f824228). Backport of PR https://github.com/root-project/root/pull/11359",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11362:431,assert,asserts,431,https://root.cern,https://github.com/root-project/root/pull/11362,1,['assert'],['asserts']
Testability,"Backport of https://github.com/root-project/root/pull/9802 without the fix for pymva tests, since the corresponding tests were not there yet in 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10206:85,test,tests,85,https://root.cern,https://github.com/root-project/root/pull/10206,2,['test'],['tests']
Testability,"Backport of; * https://github.com/root-project/root/pull/16258 (partial, the change in `CIFactory.cpp` is not needed); * https://github.com/root-project/root/pull/16268 (which fixes two Cling tests on macOS and is not exercised by ROOT). The reason I propose these is that `v6-32-00-patches` is the current release with LLVM 16, which would be good to have in a fully working state before merging the upgrade to LLVM 18.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16297:192,test,tests,192,https://root.cern,https://github.com/root-project/root/pull/16297,1,['test'],['tests']
Testability,Backport some PRs related to CI testing:; * https://github.com/root-project/root/pull/14685; * https://github.com/root-project/root/pull/15286; * https://github.com/root-project/root/pull/15290,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15291:32,test,testing,32,https://root.cern,https://github.com/root-project/root/pull/15291,2,['test'],['testing']
Testability,Backport some PRs related to CI testing:; * https://github.com/root-project/root/pull/15278; * https://github.com/root-project/root/pull/15276; * https://github.com/root-project/root/pull/15275; * https://github.com/root-project/root/pull/14685; * https://github.com/root-project/root/pull/15286; * https://github.com/root-project/root/pull/15290,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15289:32,test,testing,32,https://root.cern,https://github.com/root-project/root/pull/15289,1,['test'],['testing']
Testability,Backport some PRs related to TMVA CI testing:; * https://github.com/root-project/root/pull/15278; * https://github.com/root-project/root/pull/15276; * https://github.com/root-project/root/pull/15258; * https://github.com/root-project/root/pull/15275,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15281:37,test,testing,37,https://root.cern,https://github.com/root-project/root/pull/15281,2,['test'],['testing']
Testability,"Backport the fix of four memory leaks when reading from files, #5466. A read test with a v6.20 file is backported as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5564:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/5564,1,['test'],['test']
Testability,Backport two PRs to fix the usage of the `ROOT_ADD_GTEST` macro in builds with `testing=OFF`. * https://github.com/root-project/root/pull/16243; * https://github.com/root-project/root/pull/16255,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16279:80,test,testing,80,https://root.cern,https://github.com/root-project/root/pull/16279,1,['test'],['testing']
Testability,Backport: correct for Logx when drawing histogram errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5358:22,Log,Logx,22,https://root.cern,https://github.com/root-project/root/pull/5358,1,['Log'],['Logx']
Testability,Backporting parts of 363373bb987 to make the tests green.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15193:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/15193,1,['test'],['tests']
Testability,"Backporting some PRs to avoid test failures in the nightlies:; * https://github.com/root-project/root/pull/12693; * https://github.com/root-project/root/pull/13712; * https://github.com/root-project/root/pull/13718; * https://github.com/root-project/root/pull/13765; * https://github.com/root-project/root/pull/13524; * https://github.com/root-project/root/pull/13525; * https://github.com/root-project/root/pull/13613. After these trivial backports, the only PR that needs to be backported to fix the remaining failures is this one:; * https://github.com/root-project/root/pull/13533. However, this would not be a simple conflict-less backport because the changes interact with new feature development for ROOT 6.30. It's maybe better if @lmoneta takes care of this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13777:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/13777,1,['test'],['test']
Testability,BaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.test.test_stressmathcore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot/test/test_stressmathcore/); - [projectroot.test.test_stressfit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot/test/test_stressfit/); - [projectroot.test.test_stressmathmore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot/test/test_stressmathmore/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm1CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootrm1CheckOutput/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm3CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootrm3CheckOutput/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootrm2CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootrm2CheckOutput/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmkdir1CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2386/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_SimpleRootmkdir1CheckOutput/). And 423 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313416099:1674,test,testReport,1674,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313416099,4,['test'],['testReport']
Testability,BaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.multicore.roottest_root_multicore_generate_imt_tree](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_generate_imt_tree/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_RunMyClass](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_RunMyClass/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_writeFcc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_writeFcc/); - [projectroot.io.io.test.gtest_io_io_test_TROMemFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.io.io/test/gtest_io_io_test_TROMemFile/); - [projectroot.math.mathcore.test.mathcore_testTMath](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29316/testReport/projectroot.math.mathcore/test/mathcore_testTMath/). And 113 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2153#issuecomment-395413188:1530,test,testReport,1530,https://root.cern,https://github.com/root-project/root/pull/2153#issuecomment-395413188,9,['test'],"['test', 'testReport']"
Testability,BaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.bindings.pyroot.test.pyunittests_pyroot_ttree_asmatrix](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.bindings.pyroot/test/pyunittests_pyroot_ttree_asmatrix/); - [projectroot.core.base.test.gtest_core_base_test_CoreBaseTests](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.core.base/test/gtest_core_base_test_CoreBaseTests/); - [projectroot.core.cont.test.gtest_core_cont_test_coreconttestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.core.cont/test/gtest_core_cont_test_coreconttestUnit/); - [projectroot.bindings.pyroot.test.pyunittests_pyroot_pretty_printing](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.bindings.pyroot/test/pyunittests_pyroot_pretty_printing/); - [projectroot.roottest.root.multicore.roottest_root_multicore_generate_imt_tree](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29700/testReport/projectroot.roottest.root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-396084359:1220,test,test,1220,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-396084359,1,['test'],['test']
Testability,BaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.runtutorials.tutorial_multicore_mp104_processH1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot/runtutorials/tutorial_multicore_mp104_processH1/); - [projectroot.roottest.python.pickle.roottest_python_pickle_write](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.python/pickle/roottest_python_pickle_write/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_RunMyClass](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_RunMyClass/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD32](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD32/); - [projectroot.roottest.root.multicore.roottest_root_multicore_generate_imt_tree](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root/mult,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2380#issuecomment-409331781:1910,test,testReport,1910,https://root.cern,https://github.com/root-project/root/pull/2380#issuecomment-409331781,1,['test'],['testReport']
Testability,BaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.runtutorials.tutorial_multicore_mp104_processH1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot/runtutorials/tutorial_multicore_mp104_processH1/); - [projectroot.roottest.python.pickle.roottest_python_pickle_write](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.python/pickle/roottest_python_pickle_write/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_RunMyClass](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_RunMyClass/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD32](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34450/testReport/projec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2380#issuecomment-409331781:1649,test,testReport,1649,https://root.cern,https://github.com/root-project/root/pull/2380#issuecomment-409331781,1,['test'],['testReport']
Testability,BaseClass_v2/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDictTXMLFile/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_readUniqPtrColls](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_readUniqPtrColls/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_hadd_autoload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_hadd_autoload/); - [projectroot.roottest.root.io.tuple.roottest_root_io_tuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_baseClass_merge1](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/89329/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_baseClass_merge1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_baseClass_merge2](https://lcgapp-services.c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6009#issuecomment-655970019:1941,test,testReport,1941,https://root.cern,https://github.com/root-project/root/pull/6009#issuecomment-655970019,1,['test'],['testReport']
Testability,BaseClass_v2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_RunMyClass](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_RunMyClass/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.cling.dict/ROOT-8096/roottest_cling_dict_ROOT_8096_build/); - [projectroot.tree.dataframe.test.gtest_tree_dataframe_test_dataframe_simple](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_simple/); - [projectroot.roottest.cling.dict.ROOT-8096.roottest_cling_dict_ROOT_8096_load](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.cling.dict/ROOT-8096/roottest_cling_dict_ROOT_8096_load/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_chainZombieFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_chainZombieFile/); - [projectroot.roottest.root.io.alloc.roottest_root_io_alloc_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/72977/testReport/projectroot.roottest.root.io/alloc/roottest_root_io_alloc_make/); - [projectroot.roottest.root.io.buffer.roottest_root_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5207#issuecomment-603168070:1243,test,test,1243,https://root.cern,https://github.com/root-project/root/pull/5207#issuecomment-603168070,1,['test'],['test']
Testability,"Based on PR #858. Implements only parts relevant for CV. Rudimentary performance benchmark with ~60000 events with 2-fold CV; ```; Multiproc: root -l -b -q TMVACrossValidation.C 15.82s user 0.46s system 152% cpu 10.679 total; Standard: root -l -b -q TMVACrossValidation.C 14.31s user 0.25s system 99% cpu 14.652 total; ```; Which translates into a 4 second speed up. A different example, with a deeper bdt forest and 10-fold CV, almost halves the required time on my machine :); ```; Single : root -l -b -q TMVACrossValidation.C 33.66s user 1.99s system 98% cpu 36.369 total; Multiproc 2: root -l -b -q TMVACrossValidation.C 39.14s user 2.68s system 167% cpu 25.016 total; Multiproc 4: root -l -b -q TMVACrossValidation.C 46.52s user 3.50s system 233% cpu 21.420 total; ```. For the second example, these changes to `TMVACrossValidation.C` were used.; ```; /* ...snip... */; TString cvOptions = Form(""!V:NumWorkerProcs=4""; /* ...snip... */; cv.BookMethod(TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=1000:MinNodeSize=2.5%:BoostType=Grad""; "":NegWeightTreatment=Pray:Shrinkage=0.10:nCuts=20""; "":MaxDepth=6"");; /* ...snip... */; // cv.BookMethod(TMVA::Types::kFisher, ""Fisher"",; // ""!H:!V:Fisher:VarTransform=None"");; /* ...snip... */; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1869:81,benchmark,benchmark,81,https://root.cern,https://github.com/root-project/root/pull/1869,1,['benchmark'],['benchmark']
Testability,"Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/594:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/594,6,"['Test', 'assert', 'log', 'test']","['Test', 'assertions', 'logical', 'test']"
Testability,"Batch mode, which is now only supported by Chrome, allows to run; JS code loaded from file and dump result to output file - no any; communication with host application required. Now extra headless mode is introduced, which allows to run client; code in the headless browser and communicate with it. It was original; way to produce batch images, therefore need to rename some methods; to clearly separate from old functionality. Adjust `tutorials/webgui/ping` tutorial to let it run in ""headless"" mode when -b specified.; In such case macro waits until 200 round-trip packets arrived and automatically ends.; Can be used in PR/Nightly testings. Testes on Windows/Mac/Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7839:634,test,testings,634,https://root.cern,https://github.com/root-project/root/pull/7839,2,"['Test', 'test']","['Testes', 'testings']"
Testability,"Because of ROOT-10144, the unit test for RooJohnson crashes occasionally.; Unless TFormula v5 is fixed or RooFit is updated to use TFormula v6 (ROOT-10164),; the test needs to stay disabled.; This is ROOT-10173.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3950:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/3950,2,['test'],['test']
Testability,"Because the CI and/or testing has been unstable and we can use this (type of) PR to check whether a problem is pre-existing or brougth forth by another PR you are looking at. (For older releases, there is often no 'recent' PR to compare to and for master things move fast enough that it has also often been unclear).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10188#issuecomment-1920070193:22,test,testing,22,https://root.cern,https://github.com/root-project/root/pull/10188#issuecomment-1920070193,1,['test'],['testing']
Testability,"Before I code too far away . This is first showcase, how new attributes will be introduced to `RFrame`. First important change. `RFrame` is normal drawable and will be inserted into list of primitives. ; In the future we could enforce `RFrame` have to be always on the first place (to be discuss). `RFrame` is not required to draw histogram. All defaults can be obtained via `RStyle`, therefore object can be created on the client side and all necessary attributes can be obtained. As first members of `RFrame` I introduce `RAttrMargin` and `RAttrAxis` attributes.; `RAttrMargin` contains margins from pad borders and can be defined as `RPadLength` without user components. In the CSS one could use syntax like: `frame { margin_left: 0.1 + 10px; }` ; As Idea: one also can allow something like: `frame { margin: 0; }` to set all sides at same time. `RAttrAxis` are graphical axis attributes plus min/max range, lin/log scale, invert flag, ...; For now only line attributes are really used. . Idea for next steps with `RAttrAxis`.; When min/max values not specified, axis ranges defined by first drawable like histogram or graph.; One should be able to set only min or only max value. Also visible range should be able to specify same way. . You can see how code will look like in new macro: `draw_frame.cxx`. It drawing in two sub-pads. On first sub-pad RFrame configured programatically, on second sub-pad - via CSS file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5044:915,log,log,915,https://root.cern,https://github.com/root-project/root/pull/5044,1,['log'],['log']
Testability,"Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14598",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14622:298,test,tested,298,https://root.cern,https://github.com/root-project/root/pull/14622,1,['test'],['tested']
Testability,"Before this PR, the lambda passed to VecOps::Map could not; take arguments by non-const reference as the implementation was; adding a const qualifier to the RVec arguments. We now instead forward RVecs from Map to MapImpl keeping their; cv qualifiers. A test has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11108:254,test,test,254,https://root.cern,https://github.com/root-project/root/pull/11108,1,['test'],['test']
Testability,"Before this commit, RDataSource columns were treated like a special; kind of Defined columns: they were registered in RBookedCustomColumn; and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns; corresponding to the RDS columns. Instead, we store the RDS column value; pointers in a dedicated std::map and teach RDSColumnReader to directly; use that. Logic is simpler, we avoid an extra function call and an extra; copy upon data-source value accesses, and we move closer to implementing; column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6208:220,log,logic,220,https://root.cern,https://github.com/root-project/root/pull/6208,2,"['Log', 'log']","['Logic', 'logic']"
Testability,"Before this commit, RVec<T> objects were written to file as a normal; object with a single data member of type `std::vector<T, RAdoptAllocator<T>>`.; However, we want to:; - make use of the more generic ""collection proxy"" I/O mechanism that; reads/writes STL-like collections in a generic way making use of their; begin()/end()/size() API. This makes it possible to implicitly convert; RVec to any other collection at the I/O level, and it also makes it possible to...; - evolve RVec internals to implement a small-buffer optimization and; remove the `std::vector<T, RAdoptAllocator<T>>` data member without; breaking I/O. The most important changes performed:; - added ROOT::ESSTLType::kROOTRVec; - added special case for RVec in dictionary generation:; - RVecs are setup to use CollectionProxy; - RVecs are treated as an STL container (even if not in namespace std); - added special treatment of RVec<bool> (reusing the VectorLooper; specialized for std::vector<bool>). Philippe, Axel: what tests would you like to see?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6960:993,test,tests,993,https://root.cern,https://github.com/root-project/root/pull/6960,1,['test'],['tests']
Testability,"Before this commit, the logic in SnapshotHelper did not take into; account the case of RVecs that are being read from an input TTree; (that was not possible until v6.26). Because of how the logic was; structured, that meant that Snapshot was trying to write out those; RVecs as C-style arrays instead, obviously badly failing at it. This patch tries to make the flow of this logic a bit more readable; and fixes the problem mentioned above by treating input branches; of RVec type the same way we already treat std::vectors. This fixes https://github.com/root-project/root/issues/10225.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10288:24,log,logic,24,https://root.cern,https://github.com/root-project/root/pull/10288,3,['log'],['logic']
Testability,"Before this commit, the logic in SnapshotHelper did not take into; account the case of RVecs that are being read from an input TTree; (that was not possible until v6.26). Because of how the logic was; structured, that meant that Snapshot was trying to write out those; RVecs as C-style arrays instead, obviously badly failing at it. This patch tries to make the flow of this logic a bit more readable; and fixes the problem mentioned above by treating input branches; of RVec type the same way we already treat std::vectors. This fixes https://github.com/root-project/root/issues/10225. @pcanal the logic in this commit could be simplified if instead of ""if it's not every other case, it must be a C-style array"" I could do instead ""if it's not a C-style array, then it must be one of the other cases"". But I'm not sure how to check for ""branch is a C-style array"", see https://mattermost.web.cern.ch/root/pl/4n1qbh363tdfjc1hs3khe6y84o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10268:24,log,logic,24,https://root.cern,https://github.com/root-project/root/pull/10268,4,['log'],['logic']
Testability,"Before this commit, we had a generic RAction and two template; specializations for `RAction<SnapshotHelper>` and; `RAction<SnapshotHelperMT>`. Common logic between the three was kept; in the common base class `RActionCRTP<RAction<...>>`. This is unnecessarily complex. Instead, we now have a single RAction; class and a helper ActionImpl type that contains the parts of the; logic that needs to differ for `RAction<SnapshotHelper>` and; `RAction<SnapshotHelperMT>`. A single specialization of ActionImpl is; used for both helpers to reduce code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6220:150,log,logic,150,https://root.cern,https://github.com/root-project/root/pull/6220,2,['log'],['logic']
Testability,"Before this commit, whenever a function was constructing a node; of the computation graph it had to ""remember"" to also register; that node with the RLoopManager, which needs to know which nodes; are around so it can tell them e.g. to execute task initialization; and task finalization logic.; Deregistration happened in the node's destructors. With this patch, registration happen in the constructor and; deregistration in the destructor of a node, i.e. this logic is; where a reader might expect it to be and new code does not have; to ""remember"" to register objects with the RLoopManager. Jitted nodes of the computation graph (e.g. RJittedAction,; RJittedDefine) don't need to register themselves with the; RLoopManager: the _concrete_ nodes will be registered right; before the event loop, at jitting time, and that is good enough.; RJittedFilter is an exception: RLoopManager needs to know what; filters have been booked even before the event loop (i.e. before; concrete filters are instantiated by jitted code) in order to; return a correct list from RLoopManager::GetFiltersNames().; So RJittedFilters register themselves with RLoopManager at; construction time and deregister themselves in; RJittedFilter::SetFilter, i.e. when they can be sure that the; concrete filter has been instantiated in jitted code and it has; been registered with RLoopManager, making the RJittedFilter; registration redundant. To the reviewers: I'll make the naming more uniform (Register/Deregister instead of Book/Deregister) in a subsequent PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10653:285,log,logic,285,https://root.cern,https://github.com/root-project/root/pull/10653,2,['log'],['logic']
Testability,"Before this patch RDF would first, eagerly, declare a dummy lambda; that contained the user-defined expression to check verify the cling; could understand it; then, lazily, the actual lambda variable used; by the nodes of the computation graph was jitted, together with all; other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks; that the expression is just-in-time compilable _and_ jits precisely the; definition that will be required during the event loop. This removes; redundant logic and results in strictly less work required of the; interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5487:564,log,logic,564,https://root.cern,https://github.com/root-project/root/pull/5487,1,['log'],['logic']
Testability,"Before this patch, RCustomColumnBase's destructor could access; RLoopManager after deletion in some cases, e.g. when jitting code after; the computation graph was already out of scope or when the RLoopManager; was kept alive only by another node's shared_ptr to it. I think we never; saw a crash due to this bug because the use is _right after_ deletion,; and there is never an allocation between deletion and use. Valgrind; still sees it though. Thanks to the previous commit, all the logic that entangled RLoopManager; and RCustomColumns can actually be removed, and in particular; RCustomColumnBase's destructor does not need to access RLoopManager; anymore, fixing the use after delete. A minimal reproducer for the use after delete:. ```cpp; auto f = ROOT::RDataFrame(1).Filter([] { return true; });; ```. Before RFilter is destructed, it deletes its fPrevNode (shared_ptr to; the previous node), which triggers destruction of RLoopManager. Later,; RFilterBase is destructed, which triggers destruction of its registered; custom columns (in this case, the default ""rdfentry_"" or ""rdfslot_""; columns) and ~RCustomColumnBase tries to access RLoopManager.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5544:486,log,logic,486,https://root.cern,https://github.com/root-project/root/pull/5544,1,['log'],['logic']
Testability,"Before this patch, friend branches or leaves were listed in the output of `GetColumnNames` twice, as `friendname.bname` and as `bname`. Now we only list the longer version. This fixes #8450 as a side-effect. This PR also adds a test and improves the related docs. Rationale for the change in behavior of `GetColumnNames`: currently, in RDataFrame we have (fairly convoluted) logic to retrieve 3 different lists of branch names given a TTree/TChain:. 1. a user-readable of list of available column names returned by `df.GetColumnNames()`; 2. a larger list of all valid spellings for all column names, used to validate user inputs (this includes all names returned by `df.GetColumnNames()` plus alternative spellings such as `branchname.leafname` when `branchname == leafname`, shorthands for `friendname.branchname` as just `branchname`, etc.; 3. a list of only top-level branches that we use as the list of branches to `Snapshot` by default. Before this patch `df.GetColumnNames()` returned multiple valid spellings for the same friend branch. That can be confusing, so I'd rather (try to) return only one valid spelling for each available branch/leaf. For consistency with `Display` and to not withhold information from users, among the two valid spellings we always show the ""fully qualified friendname.branchname"". Users can still use the shorthand ""branchname"" if it's not ambiguous, as the relevant documentation now points out.; I think this solution is the sweet spot between not being surprising (to users and to RDF developers), being easy to implement without further complicating or completely refactoring the branch-retrieval logic and being somewhat backward-compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8529:228,test,test,228,https://root.cern,https://github.com/root-project/root/pull/8529,3,"['log', 'test']","['logic', 'test']"
Testability,"Before this patch, in cases in which t.GetBranch(""a.b"") and; t.GetBranch(""b"") both returned a valid address, RDataFrame was adding; only ""a.b"" to the list of valid TTree columns.; With this patch, both ""a.b"" and ""b"" are recognized as valid column names. We need this change in behavior to avoid a _worse_ change in behavior,; described in detail in ROOT-10942: since ROOT-10702 was fixed,; TTree::GetBranch became more powerful and started returning non-null; addresses for branch names with form ""a.b"" while it was returning a; nullptr until v6.20/06. With RDataFrame's previous logic, this in turn; meant that valid code that was using ""a"" as a column broke as RDataFrame; was now adding the ""a.b"" spelling to the list of valid columns instead. This fixes the RDF-related part of ROOT-10942: ""a"" is recognized as a; valid spelling again, and ""a.b"" is kept as a new valid spelling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6072:580,log,logic,580,https://root.cern,https://github.com/root-project/root/pull/6072,1,['log'],['logic']
Testability,"Before this patch, in order to assert that the column type; returned by a Vary expression matched the type of the column we; always asked cling to provide a type id for the existing column; via TypeName2TypeID(GetColumnType(colName)). That failed if the; column had a type not known to the interpreter, e.g. because it; was Define'd and the expression returned a user-defined type. With this patch we use the typeid information coming from the; RDefine node if it is available, otherwise we try with cling. A corresponding test is coming soon in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10602:31,assert,assert,31,https://root.cern,https://github.com/root-project/root/pull/10602,2,"['assert', 'test']","['assert', 'test']"
Testability,"Before this patch, we were iterating until the end of the map; rather than until the end of the equal_range (this was not a; problem in practice because program logic guaranteed that we would; find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10847:161,log,logic,161,https://root.cern,https://github.com/root-project/root/pull/10847,1,['log'],['logic']
Testability,"Before we can merge (or even test) this, the version needs to be uploaded at https://lcgpackages.web.cern.ch/tarFiles/sources/. The checksum of the github files are not stable (somehow the files are 'routinely' regenerated sometimes with different version of tar or gzip), so we can not rely on downloading it directly from github.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10725#issuecomment-1151358394:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/10725#issuecomment-1151358394,1,['test'],['test']
Testability,Before we close this I'd like to see the roottest / gtest tests re-enabled that were disabled because of this issue. I cannot find a registry of the changes we did because of this; do we need to grep for `-i arm` since M1 came out to find all occurrences? :-(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-1317033012:58,test,tests,58,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1317033012,1,['test'],['tests']
Testability,"Before, the leaf count was assumed to exist at the same level as the leaf to be read,; e.g. a.b.x[n] would look for a.b.n. That fails if n is coming from a ""higher level"".; Now, TUIntOrIntReader also looks for a.n and n, if a.b.n is not found. And add the repro test for this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5436:262,test,test,262,https://root.cern,https://github.com/root-project/root/pull/5436,1,['test'],['test']
Testability,"Benchmark numbers in the PR description have been updated to reflect the latest changes. The PR is not a WIP anymore, the test failures in `pyroot_dependency_versions` and `roottest_python_cpp_cpp` are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-873919881:0,Benchmark,Benchmark,0,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-873919881,2,"['Benchmark', 'test']","['Benchmark', 'test']"
Testability,"Benchmarks for my RDF use-case with 256 threads look like:; ```; Std (current default); ROOT::gCoreMutex = new ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCounts>();. Percent of CPU this job got: 18920%; Elapsed (wall clock) time (h:mm:ss or m:ss): 3:08.67. Unique (subject to deadlocks previously); ROOT::gCoreMutex = new ROOT::TRWMutexImp<std::mutex, ROOT::Internal::UniqueLockRecurseCount>;. Percent of CPU this job got: 19670%; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:54.53. Std17; ROOT::gCoreMutex = new ROOT::TRWMutexImp<std::shared_mutex, ROOT::Internal::RecurseCountsShared>();. Percent of CPU this job got: 18352%; Elapsed (wall clock) time (h:mm:ss or m:ss): 3:07.97. TBB; ROOT::gCoreMutex = new ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBB>();. Percent of CPU this job got: 19507%; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:55.56. TBBUnique; ROOT::gCoreMutex = new ROOT::TRWMutexImp<std::mutex, ROOT::Internal::RecurseCountsTBBUnique>();. Percent of CPU this job got: 19725%; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:49.24; ```. So the general penalty from the shared_mutex appears to compensate for avoiding the exclusive lock in ReadLock(). This could be further optimized by using the shared_mutex only in RecurseCountsShared, but given the results, the tbb-based solution looks rather promising. In terms of sorting out the dependencies, one thing I could imagine is making core/imt an optional extra dependency of core/thread, and hiding the tbb stuff there (but open to other suggestions)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-744404292:0,Benchmark,Benchmarks,0,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-744404292,1,['Benchmark'],['Benchmarks']
Testability,"Between silently not running tutorials (like we were doing until this PR, thank you very much for spotting and fixing it) and leaving those very rare users that run our full test suite with a few red python tutorials/tests (with error messages that say ""please install pandas/numba""), I'd say the latter is preferable :smile: . There might be a third option I don't see at the moment. In any case, I'm leaving the approval in the hands of who knows better than me :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938#issuecomment-650302807:174,test,test,174,https://root.cern,https://github.com/root-project/root/pull/5938#issuecomment-650302807,2,['test'],"['test', 'tests']"
Testability,"Binary data has to be transferred as separate data packet; This makes logic complicated especially when many small raw packets should be used; Using `JSON_base64` marker in class info, one can insert raw data in ROOT JSON and ; use such binary at the place. This significantly simplifies data handling. ; Same approach can be later used for eve7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146:70,log,logic,70,https://root.cern,https://github.com/root-project/root/pull/4146,1,['log'],['logic']
Testability,Bits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx TUnixSystem.h root_std_complex.h GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/core/base/inc/LinkDef.h; 1.	/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/include/c++/v1/ctype.h:38:2: current parser token 'include_next'; 2.	/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/include/c++/v1/__config:827:1 <Spelling=/scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/include/c++/v1/__config:824:37>: parsing namespace 'std'; 3.	/usr/include/string.h:159:3: current parser token 'include'; 4.	<eof> parser at end of file; 5.	<module-includes>:1:8: serializing; Segmentation fault; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377607040:63514,test,test-products,63514,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377607040,4,['test'],['test-products']
Testability,Blocked on #6073 because of the case handling logic there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-663685206:46,log,logic,46,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-663685206,1,['log'],['logic']
Testability,"Both Vc and VecCore are now installed into `${CMAKE_BINARY_DIR}/externals` with `${CMAKE_PREFIX_INSTALL}` appended (unfortunately necessary to make Vc work at the end, since Vc is not relocatable). This PR needs https://github.com/root-project/roottest/pull/65 to be merged for tests to pass (that PR properly propagates the new necessary include directories when running tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/830#issuecomment-320956955:278,test,tests,278,https://root.cern,https://github.com/root-project/root/pull/830#issuecomment-320956955,2,['test'],['tests']
Testability,"Both on CentOS 8 Stream and Arch Linux, when compiling with Clang 13.0.0, there are a number of RooFit test failures due to crashes. Example crash when running `tutorials/roofit/rf201_composite.C`:; ```; root.exe: /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113: std::size_t RooSTLRefCountList<RooAbsArg>::size() const [T = RooAbsArg]: Assertion `_storage.size() == _refCount.size()' failed.; ```. ### Backtrace; ```; #0 0x00007ffff66c2a4f in raise () from /lib64/libc.so.6; #1 0x00007ffff6695db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff6695c89 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff66bb3a6 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffe0dea553 in RooSTLRefCountList<RooAbsArg>::size (this=0x1aa32f8); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113; #5 RooSTLRefCountList<RooAbsArg>::findByNamePointer (this=this@entry=0x1aa32f8, item=item@entry=0x7fffffff72d0); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:153; #6 0x00007fffe0de1848 in RooAbsArg::findServer (this=0x1aa32b0, arg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:211; #7 RooAbsArg::dependsOn (this=this@entry=0x1aa32b0, testArg=..., ignoreArg=ignoreArg@entry=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:870; #8 0x00007fffe0de1a80 in RooAbsArg::dependsOn (this=0x1aa32b0, serverList=..., ignoreArg=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:847; #9 RooAbsArg::observableOverlaps (this=<optimized out>, nset=<optimized out>, testArg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:923; #10 0x00007fffe0e6d04d in RooAddPdf::checkObservables (this=<optimized out>, nset=<optimized out>); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAddPdf.cxx:832; #11 0x00007fffe0de178d in RooAbsArg::recursiveCheckObservables (this=0x7fffffff6bc8, nset=0x7fffffff6360); at /home/jhahnfel/ROOT/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547:103,test,test,103,https://root.cern,https://github.com/root-project/root/issues/9547,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,"Both tests fail due to the change in the default value for `IgnorePromptDiags`, but see comments below. > * [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_ROOT9975](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/172473/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_ROOT9975/); > . Taking a look at the [test](https://github.com/root-project/roottest/blob/master/root/dataframe/test_ROOT9975.C), to return something from the entry point of a macro seems legal even if the function is `void`-returning. I guess that's why https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/IncrementalParser.cpp#L173 is there.; I would vote for either dropping that legacy behavior or always filtering the diagnostic. Any personal preferences, @Axel-Naumann @hahnjo @vgvassilev ?. > * [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/172473/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/). This seems a legitimate error that was being filtered (see [here](https://github.com/root-project/roottest/blob/master/root/core/execStatusBitsCheck.C#L4)); I think the test should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1506825011:5,test,tests,5,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1506825011,5,['test'],"['test', 'testReport', 'tests']"
Testability,Both; ```; projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rtensor; projectroot.runtutorials.tutorial_v7_line.cxx; ```; failed and then succeeded on the same machine macphsft18 with no changes in code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4583#issuecomment-546710256:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/4583#issuecomment-546710256,1,['test'],['test']
Testability,"Boundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:2412,test,test,2412,https://root.cern,https://github.com/root-project/root/pull/16442,2,['test'],"['test', 'tested']"
Testability,"BranchAddress' reading 'unknown branch -> i'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::SetBranchAddress' reading 'unknown branch -> g'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 13; [ FAILED ] TRootTDS.FromARDFMT (9 ms); [ RUN ] TRootTDS.FromARDFWithJittingMT; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::LoadTree' reading 'Cannot find tree with name t in file C:/build/workspace/root-pullrequests-build/build/tree/dataframe/test/specTestDescribe3.root'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\core\testsupport\src\TestSupport.cxx(77): error: Failed; Received unexpected diagnostic of severity 3000 at 'TChain::LoadTree' reading 'Cannot find tree with name t in file C:/build/workspace/root-pullrequests-build/build/tree/dataframe/test/testDescribeDataset3.root'.; Suppress those using ROOT/TestSupport.hxx; C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\datasource_root.cxx(186): error: Expected equality of these values:; 5.; Which is: 5; *max; Which is: 0; C:\build\workspace\root-pullrequests-build\root\tree\dataframe\test\datasource_root.cxx(187): error: Expected equality of these values:; 5.; Which is: 5; *min; Which is: 7; [ FAILED ] TRootTDS.FromARDFWithJittingMT (587 ms); ```; These dataframes are constructed from a `RRootDS` with `fileGlob = ""TRootTDS_input_*.root""` - *why* do `RCsvDS_test_headers.cs` (note the missing `v`!), `specTestDescribe3.root` and `testDescribeDataset3.root` show up to the party?! Is this maybe causing the spurious dataf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13460#issuecomment-1681726222:2089,test,testsupport,2089,https://root.cern,https://github.com/root-project/root/pull/13460#issuecomment-1681726222,2,"['Test', 'test']","['TestSupport', 'testsupport']"
Testability,"Brian, could you rebase/retry this test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/61#issuecomment-135560556:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/61#issuecomment-135560556,1,['test'],['test']
Testability,"Brief conclusions based on the discussion via Zoom we just had with @lmoneta @guitargeek @manolismih and @wverkerke:. Conclusions from discussion via Zoom:. 1. RooRealL does not need I/O. Basic principle: pdfs and datasets are persistable, test statistics are not.; 2. Keep how it is.; 3. Keep them and add docstring.; 4. Removed TODO, it's fine. Added assert will make sure. Additional items:. 1. Jonas will investigate. Will write in PR.; 2. Next PR, time constraints.; 3. Yes. Good. Rename to ...Func and pass evalData as reference, not unique_ptr.; 4. It's a step in the right direction. Keep like it is. Keep legacy in default to ease transition. Additional todo's:; - Batched test: compare to batched RooNLLVar.; - Fix CI issues.; - Fix remaining failing tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-915288991:240,test,test,240,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915288991,4,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,"Btw, one way I've ""documented"" one of these fundamental limits is by hardcoding some ""random"" numbers that failed and then testing *those* with EXPECT_DOUBLE_EQ (and maybe also EXPECT_NE to be even more precise), while another random number that does EXPECT_EQ match you could also hardcode. It's very tedious, but I think it makes our tests actually useful for tracing bugs in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1505066410:123,test,testing,123,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1505066410,2,['test'],"['testing', 'tests']"
Testability,Build again because tests were changed. Want to rerun them in the CI.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3083#issuecomment-444049165:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/3083#issuecomment-444049165,1,['test'],['tests']
Testability,Build also the guitest executable (but don't add it in the tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5169:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/5169,1,['test'],['tests']
Testability,Build and test failures on RHEL+EPEL 8 ppc64le,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:10,test,test,10,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['test']
Testability,"Build error with ""nlohmann/json.hpp: No such file or directory"" in spack (unit tests build, with --test=root option)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14769:79,test,tests,79,https://root.cern,https://github.com/root-project/root/issues/14769,2,['test'],"['test', 'tests']"
Testability,Build failed on ROOT-centos7/default.; Running on lcgapp-centos7-x86-64-24.cern.ch:/build/jenkins/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/107762/console).; ### Errors:; - [2021-02-24T10:46:01.488Z] /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/test/dataframe_snapshot.cxx:1081:26: error: no match for ‘operator&lt;’ (operand types are ‘int’ and ‘std::initializer_list&lt;int&gt;’) ; - [2021-02-24T10:46:01.491Z] /mnt/build/jenkins/workspace/root-pullrequests-build/root/tree/dataframe/test/dataframe_snapshot.cxx:1125:41: error: no matching function for call to ‘TTree::SetMaxTreeSize(std::initializer_list&lt;long long int&gt;&)’,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7278#issuecomment-784986531:360,test,test,360,https://root.cern,https://github.com/root-project/root/pull/7278#issuecomment-784986531,2,['test'],['test']
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48556/console).; ### Errors:; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/tree/tree/test/G__ElementStruct.cxx: No such file or directory ; - c++: error: CMakeFiles/ElementStruct.dir/G__ElementStruct.cxx.o: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/io/xmlparser/G__XMLParser.cxx: No such file or directory ; - c++: error: CMakeFiles/XMLParser.dir/G__XMLParser.cxx.o: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/net/http/G__RHTTP.cxx: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/io/xml/G__XMLIO.cxx: No such file or directory ; - c++: error: CMakeFiles/RHTTP.dir/G__RHTTP.cxx.o: No such file or directory ; - c++: error: CMakeFiles/XMLIO.dir/G__XMLIO.cxx.o: No such file or directory ; - c++: error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/net/net/G__Net.cxx: No such file or directory ; - c++: error: CMakeFiles/Net.dir/G__Net.cxx.o: No such file or directory . And 4 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-439636040:229,test,test,229,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-439636040,1,['test'],['test']
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48681/console).; ### Errors:; - ../../root/test/stress.cxx:1239:48: error: ‘kLZMA’ is not a member of ‘ROOT’ ; - c++: error: CMakeFiles/stress.dir/stress.cxx.o: No such file or directory ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ ; - /usr/include/GL/glxew.h:1659:32: error: expected initializer before ‘glxewIsSupported’ ; - /usr/include/GL/glxew.h:1663:32: error: expected initializer before ‘glxewGetExtension’ . And 16 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-439967494:159,test,test,159,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-439967494,1,['test'],['test']
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48926/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48926/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-440745316:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-440745316,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48936/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48936/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.root.io.compression.roottest_root_io_compression_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48936/testReport/projectroot.roottest.root.io/compression/roottest_root_io_compression_make/); - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorTreeTest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48936/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorTreeTest/); - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorProcess](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48936/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorProcess/); - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_test_numberBranchesRead](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48936/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_test_numberBranchesRead/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-440757919:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-440757919,6,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48941/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48941/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorTreeTest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48941/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorTreeTest/); - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorProcess](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48941/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorProcess/); - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_test_numberBranchesRead](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48941/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_test_numberBranchesRead/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3021#issuecomment-440771269:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3021#issuecomment-440771269,5,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48946/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48946/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-440951648:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-440951648,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48951/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48951/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-440968501:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-440968501,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48966/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48966/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2122#issuecomment-440972186:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/2122#issuecomment-440972186,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48972/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/48972/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3020#issuecomment-440976086:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3020#issuecomment-440976086,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49000/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49000/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-441004971:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-441004971,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49007/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49007/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3026#issuecomment-441017283:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3026#issuecomment-441017283,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49017/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49017/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3020#issuecomment-441028281:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3020#issuecomment-441028281,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49022/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49022/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3009#issuecomment-441052987:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3009#issuecomment-441052987,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49027/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49027/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3005#issuecomment-441058531:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3005#issuecomment-441058531,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49032/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49032/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3027#issuecomment-441063041:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3027#issuecomment-441063041,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49038/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49038/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3022#issuecomment-441085550:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3022#issuecomment-441085550,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49043/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49043/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3020#issuecomment-441101148:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3020#issuecomment-441101148,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49049/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49049/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2985#issuecomment-441205064:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/2985#issuecomment-441205064,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49059/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49059/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030#issuecomment-441207835:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3030#issuecomment-441207835,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49069/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49069/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3032#issuecomment-441210644:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3032#issuecomment-441210644,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49074/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49074/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3031#issuecomment-441213328:145,test,tests,145,https://root.cern,https://github.com/root-project/root/pull/3031#issuecomment-441213328,2,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.meta.roottest_root_meta_checkEnumFwdDecl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.root/meta/roottest_root_meta_checkEnumFwdDecl/); - [projectroot.roottest.root.meta.roottest_root_meta_expressiveErrorMessages](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.root/meta/roottest_root_meta_expressiveErrorMessages/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49078/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3033#issuecomment-441252755:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3033#issuecomment-441252755,9,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49088/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3035#issuecomment-441257387:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3035#issuecomment-441257387,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.root.meta.roottest_root_meta_namespaceconflict](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.root/meta/roottest_root_meta_namespaceconflict/); - [projectroot.roottest.root.meta.ROOT-7181.roottest_root_meta_ROOT_7181_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49094/testReport/projectroot.roottest.root.meta/ROOT-7181/roottest_root_meta_ROOT_7181_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3024#issuecomment-441270344:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3024#issuecomment-441270344,9,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49110/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3037#issuecomment-441290109:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3037#issuecomment-441290109,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49116/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3038#issuecomment-441294198:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3038#issuecomment-441294198,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49121/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3036#issuecomment-441297685:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3036#issuecomment-441297685,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49126/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3039#issuecomment-441300576:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3039#issuecomment-441300576,8,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49131/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2984#issuecomment-441318250:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/2984#issuecomment-441318250,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49136/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030#issuecomment-441327970:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3030#issuecomment-441327970,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49141/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49141/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49141/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49141/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49141/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49141/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2983#issuecomment-441355026:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/2983#issuecomment-441355026,6,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49146/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2984#issuecomment-441357943:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/2984#issuecomment-441357943,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49157/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3040#issuecomment-441363514:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3040#issuecomment-441363514,7,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_graphics_tmathtext](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot/runtutorials/tutorial_graphics_tmathtext/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49163/testReport/projectroot.roottest.root.treeformula/parse/roottest_root_treeformula_parse_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1306#issuecomment-441396143:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/1306#issuecomment-441396143,9,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.root.meta.enumPayloadManipulation.roottest_root_meta_enumPayloadManipulation_checkEnumFwdDecl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49169/testReport/projectroot.roottest.root.meta/enumPayloadManipulation/roottest_root_meta_enumPayloadManipulation_checkEnumFwdDecl/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3033#issuecomment-441464927:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3033#issuecomment-441464927,8,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49174/console).; ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49174/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49174/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49174/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49174/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49174/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3041#issuecomment-441470312:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/3041#issuecomment-441470312,6,['test'],"['testReport', 'tests']"
Testability,Build failed on ROOT-centos7/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/console).; ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_execStatusBitsCheck](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_smartptr/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49179/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2435#issuecomment-441471318:147,test,tests,147,https://root.cern,https://github.com/root-project/root/pull/2435#issuecomment-441471318,7,['test'],"['testReport', 'tests']"
