quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1289308682:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1289308682,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3404/15/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1290648058:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1290648058,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3588/15/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1405080951:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1405080951,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/354**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7a990b6ba0c3227736a072e7c36880f88b613967_; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/222**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 1c5f59c1f1809038f087f994e5f6ddba4999824c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1620562359:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1620562359,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3889/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/350**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ef6854426ef5fd28319ef5fc258fe2a94b1a7f04_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1591004678:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1591004678,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/272**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 255fb151774d9480fe30bb16fb0d4bbefbd5b3c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2046851262:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2046851262,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3959/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/362**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c0dfe37b6e7605a5a09c589a540e6296dd660d25_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1693065320:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1693065320,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/15/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1801324688:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1801324688,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/15/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1932113348:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1932113348,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG b45ee24754d78223533bea5cd04bae6a8c3441c6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 07c1d112e418cf57bdf40ca29b09ad8a06eba52d_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1968640370:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1968640370,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/15/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328251957:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328251957,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2198/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/150**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 065297bed92e89c6648a53a6cd439241fc9c8aba_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2198#issuecomment-868594941:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2198#issuecomment-868594941,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1008943492:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1008943492,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a373e9649d47b755f8ef395509ed489b4614ec0c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1080911963:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1080911963,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1106059593:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1106059593,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2890/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/19**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0b1a524b4725810f9ddcf4df83fca9f9350a0a3a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1178446574:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1178446574,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1122289793:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1122289793,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 73de20be7773ab0902fa15b17a01d08839b2ec60_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 30200f8e1e51c09cefcb50b073f9b6756159c10f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1444453295:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1444453295,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1177433349:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1177433349,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1289350395:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1289350395,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3404/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1291771006:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1291771006,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3588/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1405269121:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1405269121,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/354**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7a990b6ba0c3227736a072e7c36880f88b613967_; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/222**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 1c5f59c1f1809038f087f994e5f6ddba4999824c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1620834958:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1620834958,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3889/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/350**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 227bf080aa6d7dd166d4329f8fbbb06c5ae0de70_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1600084486:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1600084486,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/272**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 6a73e1e775929a09bee2f4aafe49f01cdf3970be_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2046851876:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2046851876,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3959/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1693394079:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1693394079,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830464614:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830464614,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG c2af4de99fa12672052164a8205db6ab07771ed8_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969775511:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969775511,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/16/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328816637:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328816637,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2198/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/150**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 065297bed92e89c6648a53a6cd439241fc9c8aba_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2198#issuecomment-868661966:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2198#issuecomment-868661966,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1008956873:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1008956873,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a373e9649d47b755f8ef395509ed489b4614ec0c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1082382266:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1082382266,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1106059812:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1106059812,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2890/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/19**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 3fff3c3e55b3154e94de81f2ba6914ff527e3679_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1178455939:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1178455939,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/17/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1122340521:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1122340521,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445307975:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445307975,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/17/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1178396060:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1178396060,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1289383096:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1289383096,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3404/17/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1291917855:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1291917855,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/17/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1623126475:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1623126475,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3889/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/350**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 227bf080aa6d7dd166d4329f8fbbb06c5ae0de70_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1609415551:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1609415551,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/272**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 6a73e1e775929a09bee2f4aafe49f01cdf3970be_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2054240655:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2054240655,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/17/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830502008:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830502008,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG c2af4de99fa12672052164a8205db6ab07771ed8_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969891332:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969891332,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/17/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328826334:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328826334,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2198/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/150**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 065297bed92e89c6648a53a6cd439241fc9c8aba_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2198#issuecomment-868674362:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2198#issuecomment-868674362,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009027383:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009027383,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2890/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/19**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 3fff3c3e55b3154e94de81f2ba6914ff527e3679_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1178541009:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1178541009,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1124965115:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1124965115,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_; - **Merge or close https://github.com/sofa-framework/ci/pull/18**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG 0570c25092434d8d734ebdafae5a21ece68bf320_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445312521:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445312521,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1189996956:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1189996956,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290052368:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290052368,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3404/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1308889546:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1308889546,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1624946275:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1624946275,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3889/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1616999675:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1616999675,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/272**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 6a73e1e775929a09bee2f4aafe49f01cdf3970be_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2062737454:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2062737454,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830515831:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830515831,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/18/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1996710143:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1996710143,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #18](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/18/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328954009:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328954009,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/19/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009033487:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009033487,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2890/19/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/12**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 5d350841651deff1887d7aebabb1a36d143276b8_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1179860065:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1179860065,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1127421042:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1127421042,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/19/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_; - **Merge or close https://github.com/sofa-framework/ci/pull/18**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG cdb80f16c5700c381353f4bd4b99e05ff8065560_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445352120:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445352120,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1190162730:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1190162730,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/19/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290113330:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290113330,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3404/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1308890832:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1308890832,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1629891942:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1629891942,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2068488120:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2068488120,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830544468:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830544468,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1997144305:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1997144305,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #19](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/19/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328985063:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2328985063,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2237/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/17**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 50041e3c7632c90927db540ddbb7b8edcddc126f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877047035:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877047035,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911382644:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911382644,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2342/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/177**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG da87b82c3ab8c199b7ad026c29cdffa0cf22f102_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2342#issuecomment-918937616:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2342#issuecomment-918937616,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2381/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/19**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 3a670e8c8ac5d233e7e9f5af680058dbfb6be337_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-933892471:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-933892471,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2540/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/22**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 190ae6150745e205199ac168121a5669372c16c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2540#issuecomment-993843029:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2540#issuecomment-993843029,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG fc7e4dc760f3993a6021994f14e3a275d5b44b3c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1020170732:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1020170732,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2773/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/241**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 2ca795da0c1b85e4b8ebf4a402ba1a57ae4f2317_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1063771977:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1063771977,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1064066500:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1064066500,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2800/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/25**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG c190f5a9a206cb9a51ae2ee8ec63bfe6e6385e63_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075439058:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075439058,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2905/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/252**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG cd3d7ec2f81472e5aba9779dadf9c06689cc2d50_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1111973769:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1111973769,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3035/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/26**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 35602a85ef930422a261163db7b0779a0ee2d523_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1152338824:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1152338824,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/298**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 3416644a5e83e7ef32e28f013656b55251ee7a94_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1227078189:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1227078189,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/302**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ad86795b1c264f37968c6e19bdc312ab007307e6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239160695:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239160695,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3326/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/35**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 227c41168f2c863d66fca5706912367521e94f34_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3326#issuecomment-1254636448:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3326#issuecomment-1254636448,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3367/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/37**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 07f2a8ca62ca896036a0812dabf15b9e1676ea2c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1271587630:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1271587630,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ba43756ec0bd9e0bc7d55dae23fd5e08495c9295_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282242831:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282242831,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3757/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/41**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 0ffb20e4f73dc3ecd0db23840cf902c420222d06_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1488285615:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1488285615,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3905/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/47**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG a4361abc7f83624b838e8f7327d7aa51413fc8b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1569402561:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1569402561,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4034/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 43e5dba0246cd134fe7122d1e4a9d46909378fce_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1633033407:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1633033407,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4055/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/48**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 644cf81b3331268be797cf6079c5e2acce171c2c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1643565056:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1643565056,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4526/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/61**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 69032360df52c2684b30b87997afbc64c40a2cc2_; - **Merge or close https://github.com/sofa-framework/ci/pull/46**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG a48da1a05cd029c4a995f6b8fadc7f60733573b1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1961522814:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1961522814,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4532/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 6db61ef369d29d513c75e3d9f632cb5a67628797_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/CGALPlugin/pull/14**; _For this build, CGALPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/CGALPlugin; GIT_TAG c247b49b69dd9cc98b84d691b0fe9fe1b79f5623_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4532#issuecomment-1964076930:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4532#issuecomment-1964076930,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 6db61ef369d29d513c75e3d9f632cb5a67628797_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/CGALPlugin/pull/14**; _For this build, CGALPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/CGALPlugin; GIT_TAG c247b49b69dd9cc98b84d691b0fe9fe1b79f5623_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1964079078:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1964079078,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7359fb0f775997a5607bb7f61f20e4f31ce9d9b4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2225867807:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2225867807,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4859/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/Cosserat/pull/119**; _For this build, Cosserat/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/Cosserat; GIT_TAG 2fbde3290a58ac16b05938b6b0f8b317190a4111_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4859#issuecomment-2255023104:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4859#issuecomment-2255023104,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2314851842:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2314851842,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5036/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/71**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9f3d7e489f3278b1e885d2345d8c9422c7df68b5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5036#issuecomment-2387057707:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5036#issuecomment-2387057707,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/145**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG b3dc458461c168c70e3909d5be09f72dcd2a3bd8_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2422681104:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2422681104,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2050/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-848588963,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/20/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009962597:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009962597,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2890/20/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/12**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 5d350841651deff1887d7aebabb1a36d143276b8_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1179863542:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1179863542,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1127428930:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1127428930,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/20/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_; - **Merge or close https://github.com/sofa-framework/ci/pull/18**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG cdb80f16c5700c381353f4bd4b99e05ff8065560_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445356509:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445356509,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1190223428:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1190223428,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/20/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290198247:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290198247,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1631986903:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1631986903,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284361785:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284361785,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/20/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830988037:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1830988037,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #20](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/20/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329005225:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329005225,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/21/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009992538:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1009992538,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/21/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_; - **Merge or close https://github.com/sofa-framework/ci/pull/18**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG cdb80f16c5700c381353f4bd4b99e05ff8065560_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445445527:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445445527,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/21/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290539361:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290539361,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/21/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1637282534:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1637282534,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/21/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284477135:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284477135,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/21/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1876882481:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1876882481,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4496/21/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/411**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9c607d30d5d63c1a79fbb315af8504ef5a8d323d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4496#issuecomment-2035832804:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4496#issuecomment-2035832804,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #21](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/21/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329028111:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329028111,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/22/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1018426861:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1018426861,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/22/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1446332779:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1446332779,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/22/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290593885:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1290593885,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/22/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284490173:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284490173,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/22/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1877485397:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1877485397,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4496/22/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/411**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9c607d30d5d63c1a79fbb315af8504ef5a8d323d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4496#issuecomment-2073764468:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4496#issuecomment-2073764468,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #22](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/22/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329045510:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329045510,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #23](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/23/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1021220299:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1021220299,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #23](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/23/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1447038413:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1447038413,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #23](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/23/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284490588:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2284490588,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #23](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/23/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1877490245:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1877490245,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #23](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/23/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329074281:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329074281,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #24](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/24/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c502a62a0410e1f15487c195b186d46ddad8d3cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1021229375:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1021229375,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #24](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2975/24/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/268**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f53529cb4c5637f7b0eb853b37578f8697bc9c62_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1155145736:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1155145736,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #24](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/24/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1447834587:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1447834587,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #24](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/24/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2287027581:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2287027581,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #24](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/24/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/258**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG bdbc961e86bbbf4b7b0057debc646e726c5e5e5f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1877649068:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1877649068,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #24](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/24/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329121890:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329121890,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #25](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/25/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 29589bf9d20cdc777a472a1135e11f9fd6ddac9a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1021970158:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1021970158,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #25](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2975/25/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/268**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f53529cb4c5637f7b0eb853b37578f8697bc9c62_; - **Merge or close https://github.com/sofa-framework/Registration/pull/2**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 9cae45acfd36fc20cd551ee1d16ed42a57ea59dc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1155180781:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1155180781,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #25](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2988/25/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/305**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941eea2a17f394574ca0f5449a8221ef43c201bf_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/56**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 821cd35912044ce84a89eb401be168a8ff70db80_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1448157040:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1448157040,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #25](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/25/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2288820861:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2288820861,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #25](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/25/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1884448237:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1884448237,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #25](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/25/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329146013:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329146013,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #26](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/26/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 5d2f4215bc14d591748bfe4c13b6e0649faaf945_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1028021317:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1028021317,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #26](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2975/26/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/268**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e4d8fb0fa7202d571da72d600a6d77fe702cc391_; - **Merge or close https://github.com/sofa-framework/Registration/pull/2**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 9cae45acfd36fc20cd551ee1d16ed42a57ea59dc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1156212151:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1156212151,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #26](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/26/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2288820973:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2288820973,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #26](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/26/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1884449252:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1884449252,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #26](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/26/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/141**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG da1133c8fe067d0d8496be0bfea00209d3ce0f65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329178526:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329178526,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #27](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/27/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 5d2f4215bc14d591748bfe4c13b6e0649faaf945_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1046972115:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1046972115,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #27](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2975/27/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/268**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e4d8fb0fa7202d571da72d600a6d77fe702cc391_; - **Merge or close https://github.com/sofa-framework/Registration/pull/2**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 9cae45acfd36fc20cd551ee1d16ed42a57ea59dc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1156214598:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1156214598,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #27](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/27/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2301390371:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2301390371,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #27](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/27/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1884450978:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1884450978,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #27](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/27/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329274167:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2329274167,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #28](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2554/28/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/224**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 4d73445ecbd73b9afa06312d96ac72056ef2dc66_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1054056958:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1054056958,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #28](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2975/28/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/268**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG d2b3313260198afd1f8382669c073df06dd00941_; - **Merge or close https://github.com/sofa-framework/Registration/pull/2**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 9cae45acfd36fc20cd551ee1d16ed42a57ea59dc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1157152783:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1157152783,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #28](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/28/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2348266261:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2348266261,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #28](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/28/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2330948678:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2330948678,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #29](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/29/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349470825:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349470825,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #29](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/29/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2330956659:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2330956659,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2237/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/17**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 50041e3c7632c90927db540ddbb7b8edcddc126f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877066303:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877066303,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911569690:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911569690,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2342/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/177**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG da87b82c3ab8c199b7ad026c29cdffa0cf22f102_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2342#issuecomment-919242035:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2342#issuecomment-919242035,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2381/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/19**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 3a670e8c8ac5d233e7e9f5af680058dbfb6be337_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-934137831:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-934137831,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-940960550:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-940960550,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2425/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/210**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG d61fc2f48be3da34d619ebb901a4f8038956daaf_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2425#issuecomment-945582031:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2425#issuecomment-945582031,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2524/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/219**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7ff5cd0e4e4364677f3530c33e72dc41b5b1d00b_; - **Merge or close https://github.com/sofa-framework/Regression/pull/20**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9c6aba653a4749dabe10e92ac1ce023850a111c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-984771999:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-984771999,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2525/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/219**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7ff5cd0e4e4364677f3530c33e72dc41b5b1d00b_; - **Merge or close https://github.com/sofa-framework/Regression/pull/20**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9c6aba653a4749dabe10e92ac1ce023850a111c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-984843403:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-984843403,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2540/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/22**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 190ae6150745e205199ac168121a5669372c16c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2540#issuecomment-993845464:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2540#issuecomment-993845464,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG fc7e4dc760f3993a6021994f14e3a275d5b44b3c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1020458046:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1020458046,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2773/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/241**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 2ca795da0c1b85e4b8ebf4a402ba1a57ae4f2317_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1064307241:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1064307241,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1064307498:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1064307498,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2800/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/25**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG c190f5a9a206cb9a51ae2ee8ec63bfe6e6385e63_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075443522:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075443522,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109420611:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109420611,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2905/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/252**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG cd3d7ec2f81472e5aba9779dadf9c06689cc2d50_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1111977262:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1111977262,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3035/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/26**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 35602a85ef930422a261163db7b0779a0ee2d523_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1152364531:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1152364531,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 0b05df16a548edaee6a9ae8c6dbb0f55748de170_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1171990540:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1171990540,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/298**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 3416644a5e83e7ef32e28f013656b55251ee7a94_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1227324574:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1227324574,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/302**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ad86795b1c264f37968c6e19bdc312ab007307e6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239283745:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239283745,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3326/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/35**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 227c41168f2c863d66fca5706912367521e94f34_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3326#issuecomment-1254637524:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3326#issuecomment-1254637524,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3367/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/37**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 07f2a8ca62ca896036a0812dabf15b9e1676ea2c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1271793094:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1271793094,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ba43756ec0bd9e0bc7d55dae23fd5e08495c9295_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282269342:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282269342,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3702/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/337**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7957a69c147b5cae97293d4a57ae7e7c7d802cb1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3702#issuecomment-1453521553:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3702#issuecomment-1453521553,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3756/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/43**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 59f0984523a441538eb4330c003eabc6592934f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1490378854:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1490378854,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3757/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/41**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 0ffb20e4f73dc3ecd0db23840cf902c420222d06_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1488693610:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1488693610,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3905/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/47**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG a4361abc7f83624b838e8f7327d7aa51413fc8b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1569419704:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1569419704,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4034/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 43e5dba0246cd134fe7122d1e4a9d46909378fce_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1633034888:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1633034888,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4040/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1644464613:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1644464613,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4055/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/48**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 644cf81b3331268be797cf6079c5e2acce171c2c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1643794027:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1643794027,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4056/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1644484648:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1644484648,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1645183439:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1645183439,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4065/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ManifoldTopologies/pull/7**; _For this build, ManifoldTopologies/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ManifoldTopologies; GIT_TAG 10cf9884208c68c6902d43a543324a7224fecbe7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1646804073:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1646804073,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG c16f4bc9f412aa60271349e78ac8a78cd4dc42c8_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1689904064:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1689904064,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4420/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/56**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 4d160b90f2e54fc6bfa25e260f3c25dd1af81500_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1880780980:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1880780980,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4526/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/61**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 69032360df52c2684b30b87997afbc64c40a2cc2_; - **Merge or close https://github.com/sofa-framework/ci/pull/46**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG a48da1a05cd029c4a995f6b8fadc7f60733573b1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1961523455:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1961523455,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2177907370:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2177907370,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2224750289:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2224750289,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7359fb0f775997a5607bb7f61f20e4f31ce9d9b4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2225874258:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2225874258,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4859/2/). . To unlock the merge button, you must; - **Edit Cosserat/ExternalProjectConfig.cmake.in** with; GIT_TAG origin/master",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4859#issuecomment-2265775576:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4859#issuecomment-2265775576,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2314851917:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2314851917,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5036/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/71**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9f3d7e489f3278b1e885d2345d8c9422c7df68b5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5036#issuecomment-2387236332:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5036#issuecomment-2387236332,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/2/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2430776850:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2430776850,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #30](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/30/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349472417:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349472417,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #30](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/30/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331055491:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331055491,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #31](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/31/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349747394:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349747394,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #31](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/31/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331076038:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331076038,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #32](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/32/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349752089:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2349752089,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #32](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/32/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331125021:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331125021,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #33](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/33/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2370616428:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2370616428,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #33](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/33/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331333982:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2331333982,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #34](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/34/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2413217697:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2413217697,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #35](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/35/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2413777947:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2413777947,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #38](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3927/38/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2415575691:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2415575691,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2237/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/17**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 50041e3c7632c90927db540ddbb7b8edcddc126f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877094565:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877094565,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2305/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/18**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 33ddee276cc37f2c70c30934afb913724341c9a3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-904668600:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-904668600,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911607425:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911607425,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2342/3/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2342#issuecomment-922935254:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2342#issuecomment-922935254,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2381/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/19**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 3a670e8c8ac5d233e7e9f5af680058dbfb6be337_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-937306113:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-937306113,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943216103:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943216103,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2425/3/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2425#issuecomment-951012404:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2425#issuecomment-951012404,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2524/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/219**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7ff5cd0e4e4364677f3530c33e72dc41b5b1d00b_; - **Merge or close https://github.com/sofa-framework/Regression/pull/20**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9c6aba653a4749dabe10e92ac1ce023850a111c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-984820955:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-984820955,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2525/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/219**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7ff5cd0e4e4364677f3530c33e72dc41b5b1d00b_; - **Merge or close https://github.com/sofa-framework/Regression/pull/20**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9c6aba653a4749dabe10e92ac1ce023850a111c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-984852028:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-984852028,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56a42c9dc220bd8140c5540f659833a16694e503_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1022265253:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1022265253,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1067781393:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1067781393,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2800/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/25**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG c190f5a9a206cb9a51ae2ee8ec63bfe6e6385e63_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075722856:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075722856,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084290809:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084290809,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109428204:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109428204,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3035/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/26**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 35602a85ef930422a261163db7b0779a0ee2d523_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1167409818:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1167409818,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172005800:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172005800,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/298**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ea00c8f06070b1685d264b20c43c6a7d0b4ef0cf_; - **Merge or close https://github.com/sofa-framework/Registration/pull/4**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 34d8c39791ed54da56cfa34cd53ec712f220992d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1241627402:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1241627402,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/302**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a96cb261b98799a729012434aca62c93ccd47209_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240484060:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240484060,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3326/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/35**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 227c41168f2c863d66fca5706912367521e94f34_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3326#issuecomment-1254998772:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3326#issuecomment-1254998772,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3367/3/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1276706382:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1276706382,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ba43756ec0bd9e0bc7d55dae23fd5e08495c9295_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282349834:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282349834,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3702/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/337**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7957a69c147b5cae97293d4a57ae7e7c7d802cb1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3702#issuecomment-1459845157:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3702#issuecomment-1459845157,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3742/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/40**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 355d9f06109015a3a030591cb1393330890f83ac_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3742#issuecomment-1481341804:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3742#issuecomment-1481341804,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3756/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/43**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 59f0984523a441538eb4330c003eabc6592934f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1496152614:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1496152614,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3757/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/41**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 0ffb20e4f73dc3ecd0db23840cf902c420222d06_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1496171516:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1496171516,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3833/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/42**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 49538a6a4ce44bd297568df74dca9d162c6a6359_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3833#issuecomment-1537570954:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3833#issuecomment-1537570954,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3905/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/47**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG a4361abc7f83624b838e8f7327d7aa51413fc8b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1569493478:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1569493478,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4034/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1689674702:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1689674702,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4040/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1647467568:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1647467568,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4055/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/48**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 644cf81b3331268be797cf6079c5e2acce171c2c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1643801563:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1643801563,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4056/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1645131672:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1645131672,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1661614608:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1661614608,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4065/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ManifoldTopologies/pull/7**; _For this build, ManifoldTopologies/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ManifoldTopologies; GIT_TAG 10cf9884208c68c6902d43a543324a7224fecbe7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1713473365:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1713473365,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG bed3e279c688c4697ec9837b833c544ea6bb7ca2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1691322304:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1691322304,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4420/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/56**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 4d160b90f2e54fc6bfa25e260f3c25dd1af81500_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/125**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 3295e868abc0f700b24df81c9fa4a50fdfd455ee_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1880875946:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1880875946,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f529cc9d674a845c29a07c1f3827614af86be224_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1940141739:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1940141739,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4526/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/61**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 69032360df52c2684b30b87997afbc64c40a2cc2_; - **Merge or close https://github.com/sofa-framework/ci/pull/46**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG a48da1a05cd029c4a995f6b8fadc7f60733573b1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967478436:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967478436,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4588/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/CSparseSolvers/pull/3**; _For this build, CSparseSolvers/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/CSparseSolvers; GIT_TAG e5fe70ef40cd4086b1b9a9fd0f6c45a0344a4234_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-1994784886:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-1994784886,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/118**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 19bc3066274e000ee08512b075928a8a93250ad3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2081521110:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2081521110,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4769/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/66**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 861f11b7ea9a726a5cfbe1ac8455ebd37744974a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4769#issuecomment-2152842469:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4769#issuecomment-2152842469,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2178729872:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2178729872,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2224886198:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2224886198,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7359fb0f775997a5607bb7f61f20e4f31ce9d9b4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2227858145:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2227858145,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4859/3/). . To unlock the merge button, you must; - **Edit Cosserat/ExternalProjectConfig.cmake.in** with; GIT_TAG origin/master",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4859#issuecomment-2266716383:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4859#issuecomment-2266716383,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4863/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/296**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 4e0970206145d6f47ed9b947022c1e5f112dfd48_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2257478250:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2257478250,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4920/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/442**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9f746d4a6c177082b1251c3271cd296c7d18024e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4920#issuecomment-2289019009:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4920#issuecomment-2289019009,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/138**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 36822aea4edefc629b3f3d2938e207510d048237_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2315658727:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2315658727,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/306**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG ba321a1745c0d4fc32d66717a1f90b93e83607ec_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2381973557:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2381973557,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5036/3/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5036#issuecomment-2387502543:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5036#issuecomment-2387502543,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5053/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/463**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 919627d7de86d2fa84fbdcfc5d040b3c7d4aa291_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2406314331:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2406314331,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/3/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2441061650:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2441061650,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2237/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/17**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 50041e3c7632c90927db540ddbb7b8edcddc126f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877157396:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-877157396,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2305/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/18**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 33ddee276cc37f2c70c30934afb913724341c9a3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-905605641:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-905605641,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912477719:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912477719,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2381/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/19**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 3a670e8c8ac5d233e7e9f5af680058dbfb6be337_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-937729561:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2381#issuecomment-937729561,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943232753:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943232753,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944267176:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944267176,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2524/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/219**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7ff5cd0e4e4364677f3530c33e72dc41b5b1d00b_; - **Merge or close https://github.com/sofa-framework/Regression/pull/20**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9c6aba653a4749dabe10e92ac1ce023850a111c7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-985701957:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-985701957,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2525/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-986714874:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-986714874,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56a42c9dc220bd8140c5540f659833a16694e503_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028158189:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028158189,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 736265fed7b2dd20a033ec6f054851bb680996b4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1061983173:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1061983173,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1069099601:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1069099601,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2800/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/25**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 6f77823a47e4cb3c94f6500f3b065305bccc0068_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075779318:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1075779318,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084347277:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084347277,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109441259:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109441259,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2905/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/252**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG cd3d7ec2f81472e5aba9779dadf9c06689cc2d50_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1112342059:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1112342059,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3035/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/26**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 35602a85ef930422a261163db7b0779a0ee2d523_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1167410474:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1167410474,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172027581:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172027581,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/298**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 878dac5a9ca7afa4425dfc1792a6057d53d3fc4b_; - **Merge or close https://github.com/sofa-framework/Registration/pull/4**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 34d8c39791ed54da56cfa34cd53ec712f220992d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1253383201:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1253383201,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/302**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a96cb261b98799a729012434aca62c93ccd47209_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240490466:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240490466,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7189d1d7d4b92612a2d132d16463719a1d51a739_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282982049:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282982049,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3687/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/39**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG cce0053f17acac0eed749911e242b555d918ff9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1461084716:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1461084716,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3702/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3702#issuecomment-1459968751:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3702#issuecomment-1459968751,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3742/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3742#issuecomment-1482069705:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3742#issuecomment-1482069705,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3756/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/43**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 59f0984523a441538eb4330c003eabc6592934f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1496172482:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1496172482,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3757/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/41**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 0ffb20e4f73dc3ecd0db23840cf902c420222d06_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1498302334:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1498302334,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3833/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3833#issuecomment-1541582677:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3833#issuecomment-1541582677,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3905/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/47**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG a4361abc7f83624b838e8f7327d7aa51413fc8b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1575922657:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1575922657,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4034/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1698680310:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4034#issuecomment-1698680310,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4040/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1658014380:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1658014380,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4055/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1644807335:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4055#issuecomment-1644807335,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4056/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1645855538:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1645855538,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1661655900:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1661655900,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4065/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ManifoldTopologies/pull/7**; _For this build, ManifoldTopologies/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ManifoldTopologies; GIT_TAG 10cf9884208c68c6902d43a543324a7224fecbe7_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1715708549:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1715708549,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG bed3e279c688c4697ec9837b833c544ea6bb7ca2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1691340537:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1691340537,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/5**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 56823196e7f8d1793d601707be1bd3efac4a056b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1918442718:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1918442718,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f529cc9d674a845c29a07c1f3827614af86be224_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1940244399:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1940244399,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4526/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/61**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 4c2c009eb891c51706eb20a7b4573dc0413db398_; - **Merge or close https://github.com/sofa-framework/ci/pull/46**; _For this build, ci/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ci; GIT_TAG a48da1a05cd029c4a995f6b8fadc7f60733573b1_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1969183132:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1969183132,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965339538:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965339538,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4588/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/CSparseSolvers/pull/3**; _For this build, CSparseSolvers/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/CSparseSolvers; GIT_TAG e5fe70ef40cd4086b1b9a9fd0f6c45a0344a4234_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-1994909885:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-1994909885,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4651/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/106**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d340d8167627d0331bcf3709d2498dcf434dcd3b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2058662933:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2058662933,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/64**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 8bc620beae82f70efa67cc8e8116f63788cdc6aa_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2124808970:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2124808970,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2178735375:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2178735375,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2224906374:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2224906374,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7359fb0f775997a5607bb7f61f20e4f31ce9d9b4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2228091464:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2228091464,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4863/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2257714849:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2257714849,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/138**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 2aec18c33c67513484b4f3c8e1f949929717d86f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2315875355:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2315875355,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/306**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 5d92f37e1d3d840ad0021ac5d2b26af74df78490_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2382164698:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2382164698,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5053/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/463**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 919627d7de86d2fa84fbdcfc5d040b3c7d4aa291_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2406315041:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2406315041,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/4/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2443315008:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2443315008,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #54](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/54/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-820425142,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #59](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/59/). . To unlock the merge button, you must; - **Edit SofaPython3/ExternalProjectConfig.cmake.in** with; GIT_REPOSITORY https://github.com/guparan/SofaPython3; GIT_TAG origin/updateDoc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-833694387,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2237/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/17**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 98d32788a4a80bd14acc2313a8c4cc03da09c7cd_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-878080207:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-878080207,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2305/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/18**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 33ddee276cc37f2c70c30934afb913724341c9a3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-910096616:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-910096616,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 4ec2b43247c7d4d0dd9d5a66eb8e3c5cfca180c7_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912603953:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912603953,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943427879:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943427879,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944272214:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944272214,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2524/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-986654877:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-986654877,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2525/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-986764089:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-986764089,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56a42c9dc220bd8140c5540f659833a16694e503_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028158597:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028158597,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9d6e386b71c47c6ef718be34e8a9386d8403f604_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1068846608:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1068846608,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1069100268:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1069100268,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084693280:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084693280,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109683406:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1109683406,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2905/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1117125026:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2905#issuecomment-1117125026,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3035/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/26**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 35602a85ef930422a261163db7b0779a0ee2d523_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1168603726:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035#issuecomment-1168603726,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172047628:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172047628,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/4**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 34d8c39791ed54da56cfa34cd53ec712f220992d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1255919912:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1255919912,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/302**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a96cb261b98799a729012434aca62c93ccd47209_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240731894:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240731894,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ea1f50b401dab3c896923dfdc9c84d1a573dbe65_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1285479784:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1285479784,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3687/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/39**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG cce0053f17acac0eed749911e242b555d918ff9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1461484210:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1461484210,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3756/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1498302146:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1498302146,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3757/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1498652549:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757#issuecomment-1498652549,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3905/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1594679527:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905#issuecomment-1594679527,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4040/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1658014435:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1658014435,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4056/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1658769138:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1658769138,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/101**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 0107fb8b8c546126bc8732e551b5b6cba191efd6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1661656099:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1661656099,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4065/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1716748657:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1716748657,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG bed3e279c688c4697ec9837b833c544ea6bb7ca2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1692874585:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1692874585,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4258/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/378**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9b5eeb61e5e30c3760402e2fd46cd493742ce1f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1782953025:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1782953025,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1919204230:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1919204230,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f529cc9d674a845c29a07c1f3827614af86be224_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1940352079:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1940352079,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4526/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1969192426:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1969192426,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4588/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/CSparseSolvers/pull/3**; _For this build, CSparseSolvers/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/CSparseSolvers; GIT_TAG e5fe70ef40cd4086b1b9a9fd0f6c45a0344a4234_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-1994940727:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-1994940727,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4651/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/106**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d340d8167627d0331bcf3709d2498dcf434dcd3b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2058678368:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2058678368,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/64**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 8bc620beae82f70efa67cc8e8116f63788cdc6aa_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2124995164:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2124995164,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2182619923:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2182619923,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2225045388:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2225045388,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 7359fb0f775997a5607bb7f61f20e4f31ce9d9b4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2232470309:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2232470309,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4848/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/67**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 8beab36ca2abb65aaf9109fcf7d32d8aada542d3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2282755560:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2282755560,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4863/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2263055212:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2263055212,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/138**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 1320f98f0a04f8298c2dd9fd097be4c3409be341_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2316383957:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2316383957,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5003/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/142**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 5b6b56e93bf47e2793a587c81e55e811398f56bc_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2358685450:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2358685450,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/306**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 5d92f37e1d3d840ad0021ac5d2b26af74df78490_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2382165207:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2382165207,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5053/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/463**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f5951202817c25b0ac58825f7669538d106a1421_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2406365694:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2406365694,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/5/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2443366569:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2443366569,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #62](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1961/62/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1961#issuecomment-845207422,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2237/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/17**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG f15a4109ce76996b28f5f21cf185021ae9d4f43c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-878851257:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2237#issuecomment-878851257,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2305/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/18**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG ffe2d4ebd8f34381dc1ce3031874144691357573_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-910650300:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-910650300,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-913580967:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-913580967,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2349/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/2**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 3e1ef8923d4c13cb2f9d409af600e2e8b4c656a6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2349#issuecomment-923713263:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2349#issuecomment-923713263,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-947492684:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-947492684,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945404864:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945404864,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2524/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-986733875:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2524#issuecomment-986733875,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2525/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-989918704:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2525#issuecomment-989918704,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 56a42c9dc220bd8140c5540f659833a16694e503_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028236339:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028236339,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 2eb85191d7a977b1446dc6c155e8f68e58e56a9d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1073953861:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1073953861,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1069549823:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1069549823,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084777579:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1084777579,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1111029997:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1111029997,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3053/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/27**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 3b4eb82c4d33982fbf60011df6fb937ed5e7744a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1171403847:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1171403847,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172052149:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172052149,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3104/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/30**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 034d63c02e8121cee428c9c31c57187d6d5b1192_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3104#issuecomment-1189696645:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3104#issuecomment-1189696645,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/4**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 34d8c39791ed54da56cfa34cd53ec712f220992d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1266924134:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1266924134,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/302**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a96cb261b98799a729012434aca62c93ccd47209_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1241019703:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1241019703,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 142fe7139365a9e2f4e651b916055c72e441b6f5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1286958361:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1286958361,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3588/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/38**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 55a3a25a1ff9e35af9f5e5b0eeecfa3358dbc025_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1385379242:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1385379242,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3634/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/OptiTrackNatNet/pull/2**; _For this build, OptiTrackNatNet/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/OptiTrackNatNet; GIT_TAG ed648c9c2acc997228eca729a17fb7c490efad71_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429664407:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429664407,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3649/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/3**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 91e19c464e875daf9598bd31953655a7a84aef86_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1430365297:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1430365297,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3687/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1469615227:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1469615227,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/STLIB/pull/106**; _For this build, STLIB/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/STLIB; GIT_TAG d8f277e29d0376ec1e6979fb8bea1d52b6a16e09_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1586890032:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1586890032,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4040/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1700065913:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4040#issuecomment-1700065913,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4056/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1700369588:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1700369588,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1713461547:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1713461547,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG bed3e279c688c4697ec9837b833c544ea6bb7ca2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1693010263:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1693010263,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4258/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/378**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9b5eeb61e5e30c3760402e2fd46cd493742ce1f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1789952200:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1789952200,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922633618:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922633618,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f529cc9d674a845c29a07c1f3827614af86be224_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1943805553:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1943805553,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4588/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/CSparseSolvers/pull/3**; _For this build, CSparseSolvers/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/CSparseSolvers; GIT_TAG e5fe70ef40cd4086b1b9a9fd0f6c45a0344a4234_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-2011784607:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-2011784607,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4651/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/106**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d340d8167627d0331bcf3709d2498dcf434dcd3b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2058812535:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2058812535,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2133516816:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2133516816,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2182634323:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2182634323,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2225070318:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2225070318,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e37c070cf814e019631b2a09a7f2e34b3d8946f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2236802744:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2236802744,2,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4848/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/67**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 8beab36ca2abb65aaf9109fcf7d32d8aada542d3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2283813308:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2283813308,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4863/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2264261554:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2264261554,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/138**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 1320f98f0a04f8298c2dd9fd097be4c3409be341_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2316645078:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2316645078,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5003/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/142**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d958db1af69c4105c549325feb1f9b25185d012c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2358801227:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2358801227,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5012/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/143**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG b5a7ad49e0d2b2317af8b748d9ed52371e25a0d3_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/458**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ff7c0bcc33e7ad3d70b8ecb1d4224a1da240ea06_; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/305**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d1483c6ba1e8f634fb4e15f4b1dbb25a27844496_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2369927967:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2369927967,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/306**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 5d92f37e1d3d840ad0021ac5d2b26af74df78490_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2382196458:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2382196458,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5052/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/462**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e4041c29106bfae1fe95240f0235fa22024acd7a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2404117275:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2404117275,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5053/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/463**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG fe72559c174fffd216fd01dd7df18399b1ba4633_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2427930297:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2427930297,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/6/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2445555950:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2445555950,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2199/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/regression/pull/15**; _For this build, regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/regression; GIT_TAG b2ab6375727242ddf63721f62ec36b363e93e5f0_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-875638985:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-875638985,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2305/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/18**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG ffe2d4ebd8f34381dc1ce3031874144691357573_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-912625286:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-912625286,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-914060262:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-914060262,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG fc5b448a5de22989477f6cde08d9b58d322a02ae_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG 8b5787f459de8ad885af8a3710333308f1853999_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945759963:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945759963,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG c6ea6e0fe7d0b7c0b344d40a2c4c27dea37face2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028376246:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028376246,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG f516acb17e01820bb01a4d0f41114f367e78872e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1075203366:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1075203366,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 7a1a1dd7e9cfe308bb877b17ad4b577f8ef48220_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1073969216:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1073969216,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1085627560:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1085627560,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1111560825:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1111560825,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3053/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/27**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 3b4eb82c4d33982fbf60011df6fb937ed5e7744a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1176560982:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1176560982,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172484588:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172484588,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/4**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 34d8c39791ed54da56cfa34cd53ec712f220992d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1282000986:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1282000986,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253449168:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253449168,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 142fe7139365a9e2f4e651b916055c72e441b6f5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1288623603:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1288623603,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3588/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/38**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 55a3a25a1ff9e35af9f5e5b0eeecfa3358dbc025_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1386021150:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1386021150,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3634/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/OptiTrackNatNet/pull/2**; _For this build, OptiTrackNatNet/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/OptiTrackNatNet; GIT_TAG 6ed981088badeed632e0c7179e79ce408abd4e93_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429668553:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429668553,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3649/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1438551052:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1438551052,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/STLIB/pull/106**; _For this build, STLIB/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/STLIB; GIT_TAG 9ec7355493c218cbbf8af4b299e0f0a2a3e3d9cb_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1587571335:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1587571335,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4056/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1707745441:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4056#issuecomment-1707745441,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1714747506:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1714747506,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG bed3e279c688c4697ec9837b833c544ea6bb7ca2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1694802953:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1694802953,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/247**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 2f712ee474812f31ab328fc9ce59b307521d2747_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1776784649:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1776784649,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4258/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/378**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9b5eeb61e5e30c3760402e2fd46cd493742ce1f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1789954739:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1789954739,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922773826:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922773826,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 0926fe46474630a1775f5ba67e825dc11110f214_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1947007935:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1947007935,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966012024:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966012024,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4588/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-2022066595:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-2022066595,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4651/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/106**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d340d8167627d0331bcf3709d2498dcf434dcd3b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2060887466:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2060887466,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2134745843:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2134745843,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2205547941:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2205547941,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2227732129:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2227732129,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e37c070cf814e019631b2a09a7f2e34b3d8946f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2241860393:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2241860393,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4848/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/67**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 119638d2dee8bc8f61d8ee25b1cc902e5e68a94f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2288661461:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2288661461,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/136**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 5277b0e946f237b09dcc6ed1731a6a3480902ded_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2255985489:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2255985489,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4863/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2266717414:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2266717414,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4942/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/68**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG d0a4d25cf3e5ba80f58245782b6db3bc6a14d7cc_; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/138**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG b8399002afa2e16230290723914c8586eb135a8d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2316999456:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942#issuecomment-2316999456,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5003/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/142**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d958db1af69c4105c549325feb1f9b25185d012c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2367008900:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2367008900,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5012/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/143**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG b5a7ad49e0d2b2317af8b748d9ed52371e25a0d3_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/458**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 941d4deebd418b6a594b6e4021e96c0adfe2ee89_; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/305**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d1483c6ba1e8f634fb4e15f4b1dbb25a27844496_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2370057560:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2370057560,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2384663438:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2384663438,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5052/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/462**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e4041c29106bfae1fe95240f0235fa22024acd7a_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2407363360:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2407363360,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5053/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/463**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG d2bb27f04be5bf21469587e99fd8b5899170e082_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2433826586:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2433826586,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/7/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2445860161:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2445860161,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2199/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/regression/pull/15**; _For this build, regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/regression; GIT_TAG b2ab6375727242ddf63721f62ec36b363e93e5f0_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-876243141:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-876243141,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916016614:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916016614,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2505/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/220**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 16d46f2947dd5fdadd1ac3b72fd6ad7464402839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990046930:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990046930,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 27ae8ce89012d70298bfee4269281d57d8d54b06_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028760858:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028760858,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a373e9649d47b755f8ef395509ed489b4614ec0c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1076447733:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1076447733,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 2281b660044053cf0ac3e716561573436365caac_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1076527804:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1076527804,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1085902484:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1085902484,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 6117d4839a200fef187df40da95896f6373c6b92_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1111866537:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1111866537,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3053/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/27**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 9f2982cea50c735c782e0eeacca882006ddbd1be_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1181396701:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1181396701,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172807104:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1172807104,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/4**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 33248202c3f2031162c0f67cfc2585060ea21a42_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1291959311:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1291959311,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3280/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253584907:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253584907,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 142fe7139365a9e2f4e651b916055c72e441b6f5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1288761422:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1288761422,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3588/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/38**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 55a3a25a1ff9e35af9f5e5b0eeecfa3358dbc025_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1386078133:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1386078133,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3634/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/OptiTrackNatNet/pull/2**; _For this build, OptiTrackNatNet/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/OptiTrackNatNet; GIT_TAG 15c81dbd9b84f80f9f4fc8a48f9a077f16190e8c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429726014:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429726014,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3649/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1439234036:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1439234036,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/354**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG aec36b40c24e58d9e9616293bf3740b5aaafb777_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1589168452:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1589168452,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3889/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/350**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG d53251cd082e3984221487478946830aab65ae1c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1564100229:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1564100229,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1714785977:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1714785977,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1**; _For this build, ShapeMatchingPlugin/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ShapeMatchingPlugin; GIT_TAG bed3e279c688c4697ec9837b833c544ea6bb7ca2_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1695000912:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1695000912,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4138/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/50**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 689caa304997f104a984cb8a58f8061f7aabeeeb_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1721271430:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1721271430,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/247**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 2f712ee474812f31ab328fc9ce59b307521d2747_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1776785022:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1776785022,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4258/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/378**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 9b5eeb61e5e30c3760402e2fd46cd493742ce1f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1819507245:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1819507245,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922816991:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922816991,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 0926fe46474630a1775f5ba67e825dc11110f214_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1948126522:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1948126522,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966114619:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966114619,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4588/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-2024189740:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4588#issuecomment-2024189740,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4651/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/106**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 11631bacd64e8a336e550f7e4002795c1b57cb5b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2060916146:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2060916146,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2135617523:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2135617523,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2205580316:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2205580316,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 50033e58449dbc76a9938a31179cf6069d5ab570_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/153**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 6277256cee40af54c58870a062fd091796c3028f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2229780688:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2229780688,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4848/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/67**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 119638d2dee8bc8f61d8ee25b1cc902e5e68a94f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2288662095:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2288662095,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/136**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 5277b0e946f237b09dcc6ed1731a6a3480902ded_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2256060710:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2256060710,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4863/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2267957122:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4863#issuecomment-2267957122,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4976/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/302**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 5b0acb83606d59f04e2d59ebe6a2386702b41208_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4976#issuecomment-2337080777:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4976#issuecomment-2337080777,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5003/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/142**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG d958db1af69c4105c549325feb1f9b25185d012c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2371135797:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2371135797,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5012/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2378194349:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2378194349,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2387795239:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2387795239,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5052/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/462**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 0e4e604af3b855fea0175bcd9b08189183efd74f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2418345657:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2418345657,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5053/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2439636046:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5053#issuecomment-2439636046,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5070/8/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2446007820:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2446007820,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #93](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/93/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 703e720346f69132529e8f9ca6c927f2fc217a94_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1497219128:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1497219128,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #94](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/94/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 703e720346f69132529e8f9ca6c927f2fc217a94_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1497221974:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1497221974,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #95](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/95/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG fcab26217fd3486b6fa5839614b178e663ec6c3d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1500409325:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1500409325,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #96](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/96/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG bf25074537d35a1e1601509b88ccd5ac6c88f5b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1500436698:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1500436698,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #97](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/97/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG bf25074537d35a1e1601509b88ccd5ac6c88f5b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1500445149:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1500445149,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #98](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/98/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG bf25074537d35a1e1601509b88ccd5ac6c88f5b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1504950408:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1504950408,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #99](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2777/99/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/44**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG bf25074537d35a1e1601509b88ccd5ac6c88f5b3_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1505247834:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1505247834,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2199/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/regression/pull/15**; _For this build, regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/regression; GIT_TAG b2ab6375727242ddf63721f62ec36b363e93e5f0_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-876332294:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-876332294,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916050289:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916050289,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 26efcf7698a861e6df66a6b30b7318725df14f9d_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG 8b5787f459de8ad885af8a3710333308f1853999_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949368920:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949368920,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2505/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/220**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 16d46f2947dd5fdadd1ac3b72fd6ad7464402839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990055659:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990055659,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2631/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/228**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 27ae8ce89012d70298bfee4269281d57d8d54b06_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028762912:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028762912,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2766/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/239**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG a373e9649d47b755f8ef395509ed489b4614ec0c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1076448466:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1076448466,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2776/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/23**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 2281b660044053cf0ac3e716561573436365caac_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1076529910:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1076529910,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2820/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/THMPGSpatialHashing/pull/1**; _For this build, THMPGSpatialHashing/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/THMPGSpatialHashing; GIT_TAG bb5605350e64c084b6a31fa965baf607705d6bf5_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1087566241:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1087566241,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2895/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaGLFW/pull/31**; _For this build, SofaGLFW/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaGLFW; GIT_TAG 031154805e814e1b08ae761773c8eb701270b8ac_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1112721282:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2895#issuecomment-1112721282,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3053/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/27**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 4fd3f83d2cc39b37310dc58fc949cae35fae6cee_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1188574537:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1188574537,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3090/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Registration/pull/3**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 50efba04a2b1e2b987cf88358884713aff79f17e_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1173463217:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1173463217,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3242/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1294302210:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1294302210,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3402/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/309**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e140d59dd11cbfddb7cf8991c6b0043e9204989c_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1288911392:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1288911392,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3404/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/ManifoldTopologies/pull/6**; _For this build, ManifoldTopologies/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/ManifoldTopologies; GIT_TAG 7e63fdff87d8dea05beaa2668fbc84d364404821_; - **Merge or close https://github.com/sofa-framework/Registration/pull/6**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG 65155e9985b4b31d24d169fb69f7fd6bab74dfbe_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1286744432:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1286744432,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3588/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/38**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 55a3a25a1ff9e35af9f5e5b0eeecfa3358dbc025_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1386940677:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3588#issuecomment-1386940677,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3634/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/OptiTrackNatNet/pull/2**; _For this build, OptiTrackNatNet/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/OptiTrackNatNet; GIT_TAG 30b463128985a76fdb4a8a28dec3c2c80cff8310_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429754911:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3634#issuecomment-1429754911,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3882/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/354**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG aec36b40c24e58d9e9616293bf3740b5aaafb777_; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/222**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG c9f3cb28d44741fbd7af3f3db0fa0acd1e23e7a4_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1589248708:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1589248708,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3889/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/350**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ef6854426ef5fd28319ef5fc258fe2a94b1a7f04_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1564266575:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889#issuecomment-1564266575,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4058/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1714795529:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4058#issuecomment-1714795529,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4106/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1698459870:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106#issuecomment-1698459870,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4138/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/50**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 689caa304997f104a984cb8a58f8061f7aabeeeb_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1722600238:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1722600238,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4205/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1778278325:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1778278325,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922840400:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922840400,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4495/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/397**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 0926fe46474630a1775f5ba67e825dc11110f214_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1953273935:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495#issuecomment-1953273935,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966144751:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966144751,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4651/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/106**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG f9315099803ad0e7083d695854a3698f42187724_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2082560379:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651#issuecomment-2082560379,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4687/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2139925584:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4687#issuecomment-2139925584,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4778/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/133**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 4ef2eea7e5e89044990ffa1acd89c1512cd5bc27_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2222547220:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778#issuecomment-2222547220,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4827/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/423**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 4e59e1351995920e3f2e16fedf6a9cec2ff407ec_; - **Merge or close https://github.com/sofa-framework/SofaSphFluid/pull/1**; _For this build, SofaSphFluid/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaSphFluid; GIT_TAG e745fcbb470a2388710ca613d1c11a3003457053_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2246630652:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4827#issuecomment-2246630652,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4828/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/425**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG e37c070cf814e019631b2a09a7f2e34b3d8946f9_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2244303936:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2244303936,1,['depend'],['depends-on']
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4848/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Regression/pull/67**; _For this build, Regression/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Regression; GIT_TAG 119638d2dee8bc8f61d8ee25b1cc902e5e68a94f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2303280200:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2303280200,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4852/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2257709684:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852#issuecomment-2257709684,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4976/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4976#issuecomment-2359256444:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4976#issuecomment-2359256444,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5003/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/ModelOrderReduction/pull/142**; _For this build, ModelOrderReduction/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/ModelOrderReduction; GIT_TAG 5cc3118b3daf2be9bf4045902aed54a0f2a13442_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2371304157:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003#issuecomment-2371304157,1,['depend'],['depends-on']
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5012/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2392894685:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2392894685,2,['depend'],"['dependencies', 'depends-on']"
Integrability,**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5033/9/). . All dependencies are merged/closed and all ExternalProject pointers are up-to-date. Congrats! :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2403665423:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5033#issuecomment-2403665423,2,['depend'],"['dependencies', 'depends-on']"
Integrability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-5052/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/462**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG 0e4e604af3b855fea0175bcd9b08189183efd74f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2427927389:6,depend,depends-on,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5052#issuecomment-2427927389,1,['depend'],['depends-on']
Integrability,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:2768,integrat,integrating,2768,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,4,['integrat'],['integrating']
Integrability,"- I agree that we should test data's value more thoroughly ; the only problem is that there are potentially thousands of combination to test (depending the component obviously); - as for the data gathering in the GUI, I am not sure but it is already done for Data related to visualization (tab ""Visualization"" when you double-click the component). If I remember well, the process checks that the data's name contains ""draw"" or ""show"" words. The problem is, how to tell the GUI that for Lights, it has to group all d_shadow* in a ""Shadow"" tab ? ; Otherwise, a solution could be to to add a ""Collection of Data"" type into SofaObject and register it at the construction. E.g ; ```; //In Light; DataCollection dc_shadow(""Shadowing"");; this->addCollectionData(dc_shadow);; dc_shadow.add(d_shadowEnabled);; dc_shadow.add(d_shadowTextureSize);. //In the GUI; foreach(component->getDataCollections() as dc ); {; tab = createNewTab(dc->getName()); foreach(dc.getAllData as data ); tab.add(data); }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178:142,depend,depending,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178,1,['depend'],['depending']
Integrability,". 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject hav",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1668,protocol,protocol,1668,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['protocol'],['protocol']
Integrability,". ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3468,depend,depending,3468,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['depend'],['depending']
Integrability,.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cp,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20999,interface,interfaces-global-init,20999,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['interface'],['interfaces-global-init']
Integrability,"1) Indeed I changed the linear solver used in the scene. In the master branch, the code actually compute another matrix which is not the one we need. Hence the simulation fail at the first step. For this branch the smilation failed when the message ""D(k,k) is zero"" appear. I don't know if there is an issue with this scene or with the solver. 2) In the code, we exploit the LDL factorization in order to solve only one triangular system (and not two). We are allowed to do that by rewriting the matricial product we need to compute. It will then write as A *D^-1 * A^t. We need to apply D^-1 and it won't commute, that is why there is two matrices in memory (we could store only one with the Cholesky factorization).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1148348342:241,message,message,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1148348342,1,['message'],['message']
Integrability,2 tests are considered as failing since the message of RemovedData is thrown as an `Error`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1600428420:44,message,message,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1600428420,1,['message'],['message']
Integrability,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3476,message,message,3476,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614,2,['message'],['message']
Integrability,":-) The differences between LGPL and GPL are everything but subtle. It has a huge impact for the users. For example: GPL requires in general, that someone who uses the code, has to make the own code GPL as well and hence it must be open source, too. This is not acceptable for many organizations and companies. And this is why the two licenses are not compatible at all. :/ Unfortunately, it is very easy to ""poison"" own code this way without even noticing by having a dependency that has a minor GPL part.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275418771:469,depend,dependency,469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275418771,1,['depend'],['dependency']
Integrability,"> ### Problem; > **Description** hello, I wanted to use Sofa 23.06.00 in M1 Mac Book Pro But I can not use Sofa. This error message indicates: (have 'x86_64', need 'arm64e' or 'arm64')) I'd like to know the solution. I want to use Sofa 23.06.00; > ; > **Steps to reproduce** < LIST THE STEPS TO REPRODUCE YOUR PROBLEM HERE >; > ; > 1. install anaconda and make virtual environment; > 2. install sofa framework; > 3. define the environment variables; > 4. import Sofa in python; > ; > **Expected behavior** < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >; > ; > Success importing Sofa in python without any error.; > ; > ### Environment; > **Context**; > ; > * System: Mac OS X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudS",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:124,message,message,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['message'],['message']
Integrability,"> 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > ; > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > ; > ; > ```; > <EulerExplicitSolver />; > <EulerImplicitSolver />; > <EulerSemiImplicitSolver />; > ```; > ; > and might speak to more people. I definitively agree with both your suggestions.; I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658:251,integrat,integrator,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658,2,['integrat'],['integrator']
Integrability,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:109,message,message,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068,2,"['depend', 'message']","['depends', 'message']"
Integrability,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:135,message,message,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372,3,"['depend', 'message']","['depends', 'message', 'messages']"
Integrability,"> ; > ; > Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; > So I would say that there is a problem with the nightlies (and the CI is correct). But SofaValidation does not link on SofaGeneralEngine nor SofaBoundaryCondition :raised_eyebrow:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632:155,depend,dependencies,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632,1,['depend'],['dependencies']
Integrability,"> ; > ; > Are you building DiffusionSolver out-of-tree?. Nope; > ; > I think the issue is coming from the fact that CImgPlugin does not use imported targets for its dependencies (JPEG, TIFF and PNG).; > We should have something like `target_link_libraries(${PROJECT_NAME} PUBLIC PNG::PNG JPEG::JPEG TIFF::TIFF)` in CImgPlugin/CMakeLists.txt. A solution as well. > Exporting `<src>/include` in the include directories of SofaHelper is overkill 😄. Exporting this directory is already done if you have GLEW 👺 (+SOFA_NO_OPENGL disabled)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739847443:165,depend,dependencies,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739847443,1,['depend'],['dependencies']
Integrability,"> ; > ; > I am curious to know more about those two functions. In appearance, they do nothing. Can you explain how they work?. (Assumptions) ; In my opinion, the init() was done to force the compiler to need the library at linktime, thus forcing it to load it at runtime, thus initializing some static stuff (you can see that in the init file of SofaHelper, with the messageDispatcher thingy).; For the most libs in SofaFramework, it should not be necessary as it will always been loaded as everybody needs those I suppose.; But as for the cleanup(), it ***seems*** (emphasis 🧐) it is related with the order of destructions of things. But I am not really sure.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876:367,message,messageDispatcher,367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1987#issuecomment-815582876,1,['message'],['messageDispatcher']
Integrability,"> ; > ; > If I understood correctly, there are two testing libraries for `Sofa.LinearAlgebra`:; > ; > 1. An interface which is only an abstract code waiting to be instantiated with some types. Only header files. This one is Sofa.LinearAlgebra.Testing; > ; > 2. The actual library which includes some tests in cpp files. This one is Sofa.LinearAlgebra_test. But I don't see any CMakeLists.txt. Did I miss something?. I forgot to add the file 🙃; > ; > ; > I approve this architecture. (the names of the libraries are not explicit. It's difficult to understand the difference.). One naming convention could be: implementations of the tests themselves always end with _test, and the frameworks helping write tests will be suffixed with Testing (i.e sofa::blablabla::testing for Sofa.Blablabla.Testing); Actually I have more or less convert the existing sofadefaulttype.test and sofadefaulttype.testing for SofaLinearAlgebra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2383#issuecomment-934160920:108,interface,interface,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2383#issuecomment-934160920,1,['interface'],['interface']
Integrability,"> > > But it is unclear to me if the implementation proposed in the PR is enough because:; > > > ; > > > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",; > > ; > > ; > > Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr); > ; > What I did in the matrix assembly branch: 2 classes:; > ; > 1. An abstract class describing the API; > ; > 2. Another class deriving from the interface **AND** from BaseObject. In my case, I needed to add the object in the graph. I see ( a pure interface and then a kind of sofaobject interface)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228130020:181,interface,interface,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228130020,4,['interface'],['interface']
Integrability,"> > And by curiosity, why are the methods of the SofaPhysicsAPI class not defined in SofaPhysicAPI.cpp?; > ; > Very good question... I'm not sure, I think it was done so SofaPhysicsAPI can be shipped/share easily? or to look like an interface ? @fredroy any idea?. At that time, it was to give a public API to any external program using SOFA as a lib (no exposition whatsoever to any SOFA code).; You just needed this .h and the compiled libs.; ; Note that because of the config.h stuff, this is not the case anymore 🙊",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1336769813:233,interface,interface,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1336769813,1,['interface'],['interface']
Integrability,"> > But it is unclear to me if the implementation proposed in the PR is enough because:; > > ; > > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",; > ; > Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). What I did in the matrix assembly branch: 2 classes:; 1) An abstract class describing the API; 2) Another class deriving from the interface **AND** from BaseObject. In my case, I needed to add the object in the graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228125246:175,interface,interface,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228125246,2,['interface'],['interface']
Integrability,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:207,integrat,integrator,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001,2,['integrat'],['integrator']
Integrability,"> > I took the liberty to retrieve the ArticulatedControllers (which were deprecated/removed some years ago) and put it back into it. Especially because I retrieved the ""man-walking"" example which is quite cool in my opinion. But the code was created by DigitalTrainers, I dont know if it could be bothersome license-wise.; > ; > Are you sure ? If it's the case it's only the controller... because the code of the articulatedSystemMapping was done in the SHACRA team... In any case we had a contract at that time with Digital Trainers on suture that said that the SOFA code developed in the project was open-source and that Inria keeps the property.; > . Yes it is only the controllers. I checked the git log history and it was made by P.J Bensoussan 🧐 on behalf of Digital Trainers.; But good to know that Inria has the property in any case.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056596552:491,contract,contract,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056596552,1,['contract'],['contract']
Integrability,"> > In which case is a Mat1x1 used instead of a Real?; > ; > [Here](https://github.com/sofa-framework/sofa/blob/9234b0885ae2686660f1ae737f7ff0a387134ba6/Sofa/Component/SolidMechanics/Spring/src/sofa/component/solidmechanics/spring/StiffSpringForceField.h#L71). The size of Mat depends on DataTypes, which can be Vec1d. ok why not... 🚀 🧑‍🔬 ; as we said it is: 🍆 🪰",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3498#issuecomment-1324869308:277,depend,depends,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3498#issuecomment-1324869308,1,['depend'],['depends']
Integrability,"> > Remove all Data and method related to triangle selection on a plan.; > ; > I guess this should now be done through a ROI?. yes exactly, I already put it in the deprecated message:; ```core::objectmodel::lifecycle::DeprecatedData normal{ this, ""v24.06"", ""v24.12"", ""normal"", ""Plan selection using normal, dmin, dmax has been removed. Triangles should be selected using an Engine.Select and passed using Data triangleList"" };```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4743#issuecomment-2122711707:175,message,message,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4743#issuecomment-2122711707,1,['message'],['message']
Integrability,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:114,depend,dependencies,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910,4,['depend'],['dependencies']
Integrability,"> > ```; > > 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > > ; > > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ```; > > <EulerExplicitSolver />; > > <EulerImplicitSolver />; > > <EulerSemiImplicitSolver />; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > and might speak to more people.; > ; > I definitively agree with both your suggestions.; > I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday. Unfortunately, I'm not sure I will be able to join this Wednesday and the next. Could we do something like this?. 1. If `EulerExplicitSolver` is used with default parameters or with explicit `sympletic=True`, then warn the user that he should use `EulerSemiImplicitSolver` instead, and create this new component automatically for him (this is the part where I'm not sure it's feasible..); 2. Else, the user manually specified `sympletic=False`, warn him that this option no longer exists and that he can remove it from its scene file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841:266,integrat,integrator,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841,2,['integrat'],['integrator']
Integrability,"> @alxbilger `distanceLMConstraint` depends on LMConstraint which is soon leaving us :) so I do not really care; > ; > > What about the backward compatibility with old names?; > ; > good point, but not sure howto ... any idea?. You can introduce a map, mapping the old names to the new names. When you detect an old name, you warn that there is a new name and you change the variable value. It can be done in `DefaultContactManager::init()` or parse",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984464024:36,depend,depends,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984464024,1,['depend'],['depends']
Integrability,"> @fredroy I think all the problems you found are only due to RestShapeSpringForceField. I am now able to run (properly I think) both scenes SingleBeamDeployment.scn and 3instruments_collis.scn. Could you confirm that?. Good news, it works well !; And a bad news but not directly related to your PR, if `parallelCollisionDetectionAndFreeMotion` is activated for the animationloop in `scenes/3instruments_collis.scn `, there is a crash on the message mechanism. Here is the backtrace:; ```; 	[Inline Frame] Sofa.Helper.dll!std::_Check_C_return(int _Res) Line 131	C++; 	[Inline Frame] Sofa.Helper.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:442,message,message,442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,4,"['Message', 'message']","['Message', 'MessageDispatcher', 'message']"
Integrability,"> @fredroy you labelled this PR as to backport. However, it leads to compilation error due to another PR which is only in master and not v23.06 :; > ; > ```; > BarycentricMapper.inl:33:19: error: 'sofa::component::mapping::linear::_barycentricmapper_::BarycentricMapper<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3, double>, sofa::type::Vec<3, double>, double>, sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3, double>, sofa::type::Vec<3, double>, double> >::MatrixType' {aka 'class sofa::linearalgebra::CompressedRowSparseMatrix<sofa::type::Mat<3, 3, double> >'} has no member named 'wblock'; did you mean 'wbloc'?; > ```; > ; > I will have to remove the commit from v23.06. No worries, this warning only ""makes sense"" with v23.12 and the integration of the CRSM anyway",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3911#issuecomment-1597880749:751,integrat,integration,751,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3911#issuecomment-1597880749,1,['integrat'],['integration']
Integrability,> @jnbrunet Why did you set SofaModeler library SHARED instead of STATIC?. @guparan Because static libraries bring their dependencies with them. This is especially bad in this case since the SofaModeler (the exec) is the only one depending on SofaModeler (the lib). This was the main cause of having to find tinyxml in every project that links against Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601275605:121,depend,dependencies,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1272#issuecomment-601275605,2,['depend'],"['dependencies', 'depending']"
Integrability,"> And by curiosity, why are the methods of the SofaPhysicsAPI class not defined in SofaPhysicAPI.cpp?. Very good question... I'm not sure, I think it was done so SofaPhysicsAPI can be shipped/share easily? or to look like an interface ?; @fredroy any idea?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1335005868:225,interface,interface,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1335005868,1,['interface'],['interface']
Integrability,"> And why did it work before and not now?. Because with the ""binary"" dependencies, the registration was made implicitly when the system are loading the dll, unbeknownst to the pluginmanager . ; So for example when one is importing explicitly the plugin `Sofa.Component.Visual`, the OS is also loading the plugin (dyn.library) `Sofa.Component.Topology.Container.Grid` implicitly, and this triggered the registration of all `Grid` components because the registration is (was) automatic. But from the PluginManager point of view `Sofa.Component.Topology.Container.Grid` is/was not loaded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2375432898:69,depend,dependencies,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2375432898,1,['depend'],['dependencies']
Integrability,"> But I see no message warning that a scene is not being run with the version set in APIVersion. That's either because you're running a scene with no APIVersion component in it, or, and it's most likely, because you're using an up-to-date version of SOFA, so even if there's an APIVersion in it, you will be at best running the scene with a higher version, at worst with the same version that's mentioned in APIVersion::level.; My understanding of APIVersion is that error messages should only appear if your scene is ran with an old version of SOFA while the APIVersion's level expects a newer version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715:15,message,message,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689389715,2,['message'],"['message', 'messages']"
Integrability,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:238,wrap,wrap,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409,4,"['protocol', 'wrap']","['protocol', 'wrap']"
Integrability,"> Could be nice to describe the list of the fetched deps in the comment (or an other visible place) Otherwise the user will think it will fetch all dependencies (boost, eigen, qt... etc). Agreed. Done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4273#issuecomment-1790453101:148,depend,dependencies,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4273#issuecomment-1790453101,1,['depend'],['dependencies']
Integrability,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:95,integrat,integration,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911,8,['integrat'],['integration']
Integrability,"> Hello @alxbilger,; > ; > Thanks for the PR, removing that ""verbose"" looks fine to. As a deprecation worklfow I recommand:; > ; > * deprecate the data field (as done in the PR); > * updates all call points that are using d_verbose: either replace them with msg_info or remove the message depending on the situation ?. I agree but in the case of this PR, the Data `d_verbose` was really not used at all. So no need to do anything.; > * in the parse method () (or init() method), detect that the verbose argument is used and print a deprecation indicating to the user that the field is either removed or replace by ""printLog"". Yes, I will do it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556742205:281,message,message,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556742205,2,"['depend', 'message']","['depending', 'message']"
Integrability,"> Hi @fredroy; > ; > Several questions:; > ; > * shouldn't we drop the dependency to SceneCreator (as discussed ([SceneCreator dependencies #417](https://github.com/sofa-framework/sofa/issues/417)) ?; > ; See https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403. > * why not defining the test in Sofa.component.ODESolver.tests in place of Sofa.component.ODESolver_test ? To me this looks more consistant and coherent with our naming scheme as well as having the tests in a child directory of ODESolver. Hum I kept the naming from before, and this is an executable, not a library so maybe something to differenciate. But I dont really care the naming, and we can change it if needed. > ; > * why centralizing the testing.tools which breaks modularity instead of letting them at their right logical location ?; > To me having something like; > ; > ; > ```; > SofaDeformable.testing.tools/MassSpringSystemCreation ; > ```; > ; > Is much better than; > ; > ```; > Sofa.testing.tools/MassSpringSystemCreation ; > ```. For those two (`MassSpringSystemCreation` and `SunSystemCreation`), it is not really creating something ODESolver-specific so there is no ""logical"" place by itself.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040496377:71,depend,dependency,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040496377,2,['depend'],"['dependencies', 'dependency']"
Integrability,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:892,message,messages,892,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930,1,['message'],['messages']
Integrability,"> Hi Fred,; > ; > Thanks for the work.; > ; > Can you elaborate a bit about moving Vector3 to Vec<3, SReal> instead of Vec3.; > . I did not touch Vector3, just I am saying that it seems people thought `Vector3 = Vec<3, SReal>` and not `Vector3 = Vec3d` as it is now. It is inconsistent with the fact that Matrix3 really is `Matrix<3,3,SReal>` ; So you have Vector3 always on double and Matrix3 depending on SReal.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2560#issuecomment-1001679805:394,depend,depending,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2560#issuecomment-1001679805,1,['depend'],['depending']
Integrability,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:65,depend,dependency,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403,4,['depend'],['dependency']
Integrability,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:199,integrat,integrator,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125,2,['integrat'],['integrator']
Integrability,"> I also wonder if your message in the `parse` function is a good strategy. `parse` means that `canCreate` returns true. Is it possible if both templates are provided?. Not 100% sure (ObjectFactory stuff is a mess) but canCreate() is this case will try all the possible templates and is testing against the template of the present MechanicalObject (ForceField::canCreate). So the template string of the mass itself is not really read, and it essentially depends on the MechanicalObject.; I already tried on a example with rigid and it worked well. (ArticulationSystemMapping.scn)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1025925776:24,message,message,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1025925776,2,"['depend', 'message']","['depends', 'message']"
Integrability,"> I removed the module from the `Sofa.Component.Mapping` dependencies. I also removed all the files from the module. And there is a warning message if someone uses the module. In conclusion, the module exists only to warn that it should not be used. Yes that is what I wanted to say 😅 ; Just I wanted to say that its content (components) itself was purged already one year ago",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2434549134:57,depend,dependencies,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2434549134,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"> I took the liberty to retrieve the ArticulatedControllers (which were deprecated/removed some years ago) and put it back into it. Especially because I retrieved the ""man-walking"" example which is quite cool in my opinion. But the code was created by DigitalTrainers, I dont know if it could be bothersome license-wise. Are you sure ? If it's the case it's only the controller... because the code of the articulatedSystemMapping was done in the SHACRA team...; In any case we had a contract at that time with Digital Trainers on suture that said that the SOFA code developed in the project was open-source and that Inria keeps the property. . > ; > * ArticulatedSystem as an external repository which would be referenced in _applications/plugin_ (react with 🚀 ). I vote for a separate plugin to advertise it, as suggested by Eulalie. One of the thing that should be added to the plugin is the support of Unified Robot Description Format (URDF). ; We should add a loader for it.; This is the new standard format in the community (and compatible with ROS). Thanks !. Christian",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056530424:483,contract,contract,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056530424,1,['contract'],['contract']
Integrability,"> If I understand correctly, the problem comes from the fact that two equivalent cubes (in terms of the comparison predicate) are not in the same order depending on the platform (compiler). In my opinion, it creates collision responses that are also ordered differently. And the order in collision responses is important (see #2067). Yes, but a small precision in this case the determinism is set across the different compilers (and more precisely the different implementations of the STL). A priori the same compiler/libstd will create the same result. > But I also wonder how two cubes can be equivalent. We compare two floating-point types, more specifically, the center of a cube along the largest dimension. I suspect that both cubes are perfectly aligned in an orthogonal dimension. It is probably due to the construction of the scene (torus are aligned along the X axis), or the symmetry of the geometry. @fredroy do you know when the discrepancy happens? Is it at the very beginning?. Yes, at the very beginning.; Here is a dump of the container being sorted (left linux/gcc and right windows/msvc), after running 1 step ; showing { minBBox maxBBox } for each element. ![diff_gcc_msvc](https://user-images.githubusercontent.com/11028016/221719424-3d8e3a07-23cc-47ce-b277-08673889b83e.png). It is trying to sort according to the axis X and you can see the highlighted lines have the same X. > ; > If we don't want to use `stable_sort` because it is slower, maybe we can make a smarter comparison predicate? For example, if the largest dimension is equivalent, let's compare the second largest dimension etc. Yes, it could be an other solution, but in this end, does `sort() + multiple_test_axis_predicate < stable_sort() + oneaxis_predicate` ? not so sure and it would need more benchmarks. And I am sure it will also depend on the data itself...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1447335507:152,depend,depending,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1447335507,2,['depend'],"['depend', 'depending']"
Integrability,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:521,depend,dependencies,521,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777,2,['depend'],['dependencies']
Integrability,"> In which case is a Mat1x1 used instead of a Real?. [Here](https://github.com/sofa-framework/sofa/blob/9234b0885ae2686660f1ae737f7ff0a387134ba6/Sofa/Component/SolidMechanics/Spring/src/sofa/component/solidmechanics/spring/StiffSpringForceField.h#L71). The size of Mat depends on DataTypes, which can be Vec1d.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3498#issuecomment-1324849532:269,depend,depends,269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3498#issuecomment-1324849532,1,['depend'],['depends']
Integrability,"> It's not a very common situation, so thanks for the report. Many of the scenes I am working on right now kind of depend on that. :sweat_smile: ; Do you already have an idea where to look for the difference between the solvers that might cause the behavior?; I would love to create a PR, but I have no idea how solvers work in SOFA. :D . Cheers,; Paul",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1322609102:115,depend,depend,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1322609102,1,['depend'],['depend']
Integrability,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:521,integrat,integrate,521,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741,1,['integrat'],['integrate']
Integrability,"> Maybe just one last point (for @guparan) why are the `find_package` in the MyPlugin.cmake.in files always QUIET REQUIRED? is that normal or should it be coherent with the CMakeList.txt sofa_find_package ?. It is normal.; **QUIET** because we don't want to spam the users of our package (people doing `find_package(MyPlugin)`) with all our dependency solving. It will still fail with a message if the dependency is not found.; **REQUIRED** because if our package was built-with and linked-to a dependency (even a soft one), then this dependency becomes mandatory for the users of our package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625:341,depend,dependency,341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-700803625,5,"['depend', 'message']","['dependency', 'message']"
Integrability,"> My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. There is no existing `str` function for python component wrappers (`grep tp_str`), the default python implementation is used. In python the semantic of `str` is to provide a concise representation of an object as a string, which is exactly what `BaseObject.getLinkPath` does. So really, using `str` seems the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308048324:189,wrap,wrappers,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308048324,1,['wrap'],['wrappers']
Integrability,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:105,depend,dependencies,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985,2,['depend'],['dependencies']
Integrability,"> Thank you @ziqiu-zeng for the PR, I can see I did some mistake in the compat files grimacing; > ; > > Enable compilation with cuda plugins: SofaAsyncSolvers, SofaCUDALDI, SofaCUDASolvers, SofaCUDADev Please also update the plugins; > ; > Unfortunately, these plugins are private plugins from the mimesis team so we cannot access/fix/update them thinking. Hello,. I have fixed the bugs in these private plugins.; What I mean is that the users of these plugins should pull the modifications.; Sorry for the misunderstanding, I will edit the commit message.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102767377:548,message,message,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102767377,1,['message'],['message']
Integrability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:325,depend,dependencies,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586,1,['depend'],['dependencies']
Integrability,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:507,integrat,integration,507,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816,2,['integrat'],['integration']
Integrability,"> That's a very popular library. I agree with this move.; > ; 17.5k ⭐ 😗 (one day, SOFA, one day...). but yes glfw+imgui+stb is a well-known triplet . > I don't understand in your PR how it replaces the need for CImgPlugin. Probably, because I don't know how images loading is managed. Image loading is managed through a factory (""png"" -> use this, ""bmp"" -> use that, etc) and this factory is populated at run-time. ; Before this PR, it was done by CImgPlugin (cimg was used because it can manage several file formats). But it was decided to be optional for some reason, so it was a plugin (and not a ""hard"" component in the framework).; Now that stb does not depend on any external library, no hassle with cmake/deps/dlls so thats why I put it in SofaHelper.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2551#issuecomment-997816638:659,depend,depend,659,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2551#issuecomment-997816638,1,['depend'],['depend']
Integrability,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:207,Message,MessageDispatcher,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997,5,"['Message', 'message']","['MessageDispatcher', 'message']"
Integrability,"> This change makes all tests using the ConstantForceField fail due to a bug in SingleStateAccessor solved in #4917 . To solve the tests, merge #4917 first and rebase. Then, the PR should be fine. #4917 has been integrated (not rebased due to anterior conflicts) and there are still errors because of ; `No input force has been set. Please define one of both Data: forces or totalForce` 🥲. I guess there is an error of logics (if, else, etc) somewhere",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4918#issuecomment-2297674122:212,integrat,integrated,212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4918#issuecomment-2297674122,1,['integrat'],['integrated']
Integrability,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:191,interface,interface,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154,2,['interface'],['interface']
Integrability,> What happens if you forget the required plugins in the ci-dependent PRs?. An error message and no object instantiated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2372631309:60,depend,dependent,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2372631309,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"> What is the problem with manually updating the pointer?. We will forget to do it, I'm sure of it. > In my opinion it is much less a pain than having ALL pull-request going red after a SofaPython3 merge. How could that happen? No SOFA components depend on it, and SP3 has its own CI on github.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820434947:247,depend,depend,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820434947,1,['depend'],['depend']
Integrability,"> You described the usual workflow, but in this case it was not respected. The features should have been disabled in v22.06.; Before the release we discussed during a sofadevmeeting that it was not wise to disable the features at release time. The final agreement was on the ""timing"" of action (before or after the release) and not about the conformance to the three step workflow (deprecate-disable-remove) we have. . A lot of people don't read warning(deprecation) messages and only fix their code base when it does not compile I think we should stick to the workflow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3265#issuecomment-1239328441:467,message,messages,467,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3265#issuecomment-1239328441,1,['message'],['messages']
Integrability,> You kind of renamed an alias. Does it break anything?. Indeed... I don't think it was used in the plugin. Maybe in external plugins. I can add support + deprecated message,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2673#issuecomment-1033746822:166,message,message,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2673#issuecomment-1033746822,1,['message'],['message']
Integrability,> did you do anything regarding the Qt version @damienmarchal ?; > ; I just stick to the old Qt API (the one we are currently using in sofa) so it succeed on the CI (despite this API emit deprecation message on more recent qt version).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2943#issuecomment-1137147605:200,message,message,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2943#issuecomment-1137147605,1,['message'],['message']
Integrability,"> few CUDA scenes are failing, all with the messages `[ERROR] [CGLinearSolver(cGLinearSolver1)] Required data ""threshold"" has not been set. (Current value is 1e-05)` so I suppose these scenes must be updated too. @fredroy ok I did not catch them. Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949364341:44,message,messages,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949364341,1,['message'],['messages']
Integrability,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:45,interface,interface,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116,2,['interface'],['interface']
Integrability,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:724,depend,depending,724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820,6,['depend'],"['dependent', 'depending']"
Integrability,@ErwanDouaille could you check (very shortly) the API of argument parser in this PR please? we would like to integrate it in v17.12 release ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270:109,integrat,integrate,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270,1,['integrat'],['integrate']
Integrability,"@EulalieCoevoet is right, changing parameter without warning is bad ; @hugtalbot it is very easy, there is two options. One consist in adding some test in the init() function of the component to detect if the data is set or not by the user and provide the adequate message. The other is to add a dedicated rules in the SceneChecker at the following of: ; ```cpp. void SceneCheckAPIChange::installDefaultChangeSets(); {; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""BoxStiffSpringForceField"" ); msg_warning(o) << ""BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'"" ;; }) ;; ```. @fredroy Eulalie also report that there was some changes in the way shaders are pass to components and that old working behavior stopped working without warnings so adding warning in the same way would be nice (@EulalieCoevoet).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674:265,message,message,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674,1,['message'],['message']
Integrability,"@ScheiklP Here is a branch with a simple object tracker: https://github.com/alxbilger/sofa/tree/objecttracker. It counts the number of creation and destruction for each class managed with the `SOFA_CLASS` macro. Note that if `Y` derives from `X`, it counts both `X` and `Y`. Finally, it prints a summary when the program finishes (properly). But I cannot guarantee that more destructions does not happen after the summary (static destruction order depends on construction order and https://en.cppreference.com/w/cpp/language/siof). Is this useful to you? Can you spot which component is not destroyed?. The diff is here: https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofa:objecttracker?expand=1. For example, there are a couple of components in caduceus where I see a difference between nb of allocations and destructions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783:448,depend,depends,448,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783,2,['depend'],['depends']
Integrability,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:147,integrat,integrate,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819,2,['integrat'],['integrate']
Integrability,"@adagolodjo , I drop the official version, and use the brew install qt@5. When I compile in the Cmake-GUI. ; ERROR OCCURS:; CMake Error at Sofa/GUI/Qt/CMakeLists.txt:28 (message):; Sofa.GUI.Qt: Could not find either Qt5 or Qt6.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1371939008:170,message,message,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1371939008,1,['message'],['message']
Integrability,"@alxbilger . In addition to have very component not relying anymore on a dependency to opengl should be moved to a generic module. ; I would suggest having a layer of compatibility/deprecation (possibly build on top of the generic module) to to tell users that scenes like:; ```console; RequiredPlugin(""Sofa.GL.Component"") ; OglModel(); OglGrid() ; ```; Are still working but displays nice guidance on how to update to more or less something of that kind:; ```console; RequiredPlugin(""Sofa.Components.Visual"") ; VisualModel() ; VisualGrid() ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812:73,depend,dependency,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812,2,['depend'],['dependency']
Integrability,"@alxbilger . Thanks for your relevant question, actually this is why the PR is in wip. . So more details. ; Fundamentally the TypeInfo system is a strange beast compose of two things. One is a type-traits API designed to be used in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Prop",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:266,interface,interface,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,6,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"@alxbilger I got the same error (and message) with my builds on Windows.; And interestingly, it is working well with my Linux setup. ; Therefore I am suspecting a export/import symbol mismatch or something like that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973885939:37,message,message,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973885939,1,['message'],['message']
Integrability,@alxbilger I think the question raised by @guparan is why not removing `SOFA_NO_UPDATE_BBOX` directly from here.; Is there an advantage / a sense to keep a CMake variable making the behavior (default value) CMake-dependent ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176221927:213,depend,dependent,213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176221927,1,['depend'],['dependent']
Integrability,"@alxbilger `distanceLMConstraint` depends on LMConstraint which is soon leaving us :) so I do not really care. > What about the backward compatibility with old names?. good point, but not sure howto ... any idea?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984432610:34,depend,depends,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984432610,1,['depend'],['depends']
Integrability,"@alxbilger thanks for the carefull review, I integrated the requested changes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2976#issuecomment-1149852334:45,integrat,integrated,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2976#issuecomment-1149852334,1,['integrat'],['integrated']
Integrability,"@bakpaul I'm afraid the current PR to have a metis 5.2.1 package on conda-forge (https://github.com/conda-forge/metis-feedstock/pull/41) is stalling... and as the official repository is not active anymore (PR not merged anymore neither) and the official build chain is broken, it can take a lot of time before a 5.2.1 comes up on conda-forge. ; I think we would better be safe and ensure that we have a working solution, so we would need you to backport the changes of your metis fork on the 5.1.0 branch, in order to have a consistent version of used metis, wether it's external or fetched dependency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1927068556:591,depend,dependency,591,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1927068556,1,['depend'],['dependency']
Integrability,"@courtecuisse . I can't believe my eyes when reading your message. It is highly inappropriate, childish, unprofessional and overreacted. Let's restart the chronology of this PR:; 1) A suggestion has been made to remove some unused functions. The suggestion is made using the PR system.; 2) Reviews have been requested from you and @pedroperrusi ; 3) @pedroperrusi did not find any harm to remove the function, while you did not review the PR, nor answered to comments.; 4) Therefore it has been decided to approve the PR. Nevertheless, the depreciation has been forgotten. > I'd like to know how many messages should we send to justify that a code is needed and should not be ""savagely"" removed?. Only one! But I cannot see any. > especially if the same person has already discussed the need for this method in this PR :). Still no sign from you in this PR. If the removed function is really critical, a new PR can re-introduce it, associated with an example that the CI can execute. Please, choose your words more carefully.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171018883:58,message,message,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171018883,2,['message'],"['message', 'messages']"
Integrability,@damienmarchal ; Could you resolve the conflicts (due to the merge of #213) in MessageDispatcher please?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/257#issuecomment-301464292:79,Message,MessageDispatcher,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-301464292,1,['Message'],['MessageDispatcher']
Integrability,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:337,depend,depend,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224,3,"['depend', 'message']","['depend', 'dependencies', 'message']"
Integrability,"@damienmarchal Actually, the force formulation is time-dependent. It does not vary with positions. Therefore, its derivative with respect to positions is null.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3973#issuecomment-1608943790:55,depend,dependent,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3973#issuecomment-1608943790,1,['depend'],['dependent']
Integrability,"@damienmarchal I came accross the problem of RotationMatrix being in Sofa.Core, whereas all the other *Matrix class were contained into SofaBaseLinearSolver (with a nice include from Sofa.Core to SofaBaseLinearSolver 😗); Plus the fact that IMO, instead of all the *Matrix being in SofaBaseLinearSolver, I would put all of them into SofaFramework actually. Reasons are that some stuff being not LinearSolver still need SparseMatrix for example, and need a SofaBaseLinearSolver dependency just for it. ; My interrogation would be where exactly in SofaFramework, as BaseMatrix (and BaseVector) being into Sofa.Defaulttype, which is a bit weird. Maybe in Sofa.Type ? or alongside LinearSolver.h in Sofa.Core ?; Could be of interest of @alxbilger as well.; Otherwise we can move RotationMatrix into SofaBaseLinearSolver indeed, to solve the crappy soft dependency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-883482218:476,depend,dependency,476,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-883482218,2,['depend'],['dependency']
Integrability,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:33,depend,depends,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"@damienmarchal Thanks for your suggestion. Indeed, some components can now be moved to a generic module not depending on OpenGL 👍 🎊 . But I am confused by your comment. Did you want to suggest other things than just moving the components?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181688238:108,depend,depending,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181688238,1,['depend'],['depending']
Integrability,"@damienmarchal, @fredroy: Why isn't CImg directly inside CImgPlugin? We would then just have to depend on CImgPlugin to use CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357254965:96,depend,depend,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357254965,1,['depend'],['depend']
Integrability,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:175,integrat,integration,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312,5,['integrat'],"['integrate', 'integration']"
Integrability,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:772,Message,MessageAsTestFailure,772,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830,2,"['Message', 'message']","['MessageAsTestFailure', 'message']"
Integrability,@epernod can we consider that your PR on visualizing Data dependency #1187 corresponds to this issue?; Have you noticed it @mjbarrow,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/688#issuecomment-592180966:58,depend,dependency,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/688#issuecomment-592180966,1,['depend'],['dependency']
Integrability,"@epernod yes, these functions are the one used to queue in the object's message log all the msg_info/warnig/error/deprecation. ; basically this means that when an object receive a new message increment the component_state counter so we can detect ""something happened"". . On day we may wonder if, for msg_error() the component_state shouldn't be flipped to ""Invalid"", but for the moment the state counter is just ""incremented"" but not changed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2397#issuecomment-943187451:72,message,message,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2397#issuecomment-943187451,2,['message'],['message']
Integrability,@epernod you integrated Guillaume's remark. @guparan fine for you? :traffic_light:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1359#issuecomment-631273444:13,integrat,integrated,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359#issuecomment-631273444,1,['integrat'],['integrated']
Integrability,@fjourdes: your opinion on latest comment?; I prefer this version as I think we should keep an interface to gtest.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338598004:95,interface,interface,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338598004,1,['interface'],['interface']
Integrability,"@fredroy I prefer not adding another implicit complex mechanism for templates. If there are two templates, the user must set 2 templates. If the user set only one, there is an error message containing the list of all available templates. It should give a hint about the fact that there are two templates to provide.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1286655914:182,message,message,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1286655914,1,['message'],['message']
Integrability,@fredroy Thanks for trying.; So the regression depends on the OS. Great!; I added a regression test for this scene in https://github.com/sofa-framework/sofa/pull/4055,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1643591728:47,depend,depends,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1643591728,1,['depend'],['depends']
Integrability,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:765,depend,dependency,765,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955,2,['depend'],['dependency']
Integrability,"@fredroy thanks for the link. Also please correct me for the steps that will follow so that I will not kill myself:; 1. download https://github.com/sofa-framework/sofa/releases/download/v22.06.00/SOFA_v22.06.00_Linux.zip. 2. download dependencies; - Qt (>= 5.12.0) with Charts and WebEngine ; - OpenGL `sudo apt install libopengl0`; - Boost (>= 1.65.1) `sudo apt install libboost-all-dev`; - Python 3.8 + pip + numpy + scipy `sudo apt install python3.8-dev`; - Additional libraries: libPNG, libJPEG, libTIFF, Glew, Zlib `sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev`; - SOFA v20.06 and newer also need Eigen (>= 3.2.10) `sudo apt install libeigen3-dev`. 3. run ./bin/runSofa from https://github.com/sofa-framework/sofa/releases/download/v22.06.00/SOFA_v22.06.00_Linux.zip folder. There is no need for building in this case right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1316778833:234,depend,dependencies,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1316778833,1,['depend'],['dependencies']
Integrability,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:64,message,message,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052,1,['message'],['message']
Integrability,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:535,message,message,535,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885,4,['message'],['message']
Integrability,@guparan : I think it is fine to rebase with the updated issofa_constraint_solving branch. I believe the conflicts come from the `override` keyword that was added in many places in the code recently. ; The integration branch [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration) will still work if someone wants want to try.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578:206,integrat,integration,206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578,1,['integrat'],['integration']
Integrability,"@guparan : good question. Actually I also believe it should be split to actually match the current architecture. That is to say each library gets its own test exectuable ( provided one exist ). But for me that was beyond the scope of this pull request, which was to propose the removal of the `SofaTest` dependency from the `framework_test` executable, for the aforementioned reasons.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601:304,depend,dependency,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601,1,['depend'],['dependency']
Integrability,"@guparan ; You are right, this branch should be our integration branch with all contribution from the coding sprint and when we fell it ready we will merge it into master (but not right now). I made a PR just to see if the removale of SOFA_DECL and typedef's file was viable. . Maybe this integration branch could also contains the PR #414 #424 and #425 so that we don't have to much workload after the sprint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427:52,integrat,integration,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427,2,['integrat'],['integration']
Integrability,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:350,Interface,Interface,350,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270,1,['Interface'],['Interface']
Integrability,"@guparan Your proposition does not work in the unlikely case of a plugin name containing "".dll"" in its name. The initial contract was, from the comments, to find the extension in the end of the string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188:121,contract,contract,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188,1,['contract'],['contract']
Integrability,"@guparan here it is... Not 100% sure of what I did.; Is it:; ```if(SOFAGUIQT_HAVE_NODEEDITOR)``` or ```if (SOFAGUIQT_ENABLE_NODEGRAPH)``` ?. just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546874968:195,depend,dependency,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546874968,1,['depend'],['dependency']
Integrability,"@guparan, @Younesssss, @hugtalbot any volunteer to integrate the test in the normal test framework so we can merge this asap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742:51,integrat,integrate,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742,1,['integrat'],['integrate']
Integrability,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:331,interface,interface,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429,2,['interface'],['interface']
Integrability,"@guparan, @hugtalbot ; I really would like to see new features for the 17.12 release and to me this is more important that having the 17.12 release released in 2017 ;) . So please @ErwanDouaille , @bcarrez (and me) please finish your work.; For those that have nearly finish work please make a PR in the WIP state so that we can see. . For the binary distribution... i think that the pre-build binaries may/should not include the experimental feature but at least the tagged version on the repository may have them. . EDIT: @fredroy the sofa from python integration should be also a nice addendum, but there is no PR yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284:554,integrat,integration,554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284,1,['integrat'],['integration']
Integrability,"@hdeling, @guparan, I think the idea would be to combine both the use of OptionsGroup with the wrapping of enums as described in the link Guillaume posted. Wouldn't something like this POC address your problem without manipulating strings from the C++?:. ```cpp; #include <sofa/helper/OptionsGroup.h>; #include <sofa/core/objectmodel/Data.h>. struct NumericalIntegrationMethod : public sofa::core::objectmodel::BaseObject; {; struct Method {; enum; {; One = 1,; Two,; Last; };; };. Data<sofa::helper::OptionsGroup> d_method;. NumericalIntegrationMethod(); : d_method(initData(&d_method, ""method"",; ""sets the chosen numerical integration method"")); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNames(2, ""One"", ""Two"");; o->setSelectedItem(Method::One);; d_method.endEdit();; }. unsigned method() { return d_method->getSelectedID(); }; void setMethod(unsigned m) { d_method->setSelectedItem(m); }; };. struct NewNumericalIntegrationMethod : public NumericalIntegrationMethod; {; struct Method : public NumericalIntegrationMethod::Method{; enum; {; Three = NumericalIntegrationMethod::Method::Last,; Last; };; };. NewNumericalIntegrationMethod(); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNbItems(NumericalIntegrationMethod::Method::Last + 1);; o->setItemName(3, ""Three"");; o->setSelectedItem(NewNumericalIntegrationMethod::Method::Three);; d_method.endEdit();; }. };. /*; /// From C++; NewNumericalIntegrationMethod method;; method->setMethod(NewNumericalIntegrationMethod::Method::Two);. # in Pyhton || XML:; <NewNumericalIntegrationMethod method=""Two"" />; */; ```. (I coded this quickly, didn't try nor compile it, but this should work I believe)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683:95,wrap,wrapping,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683,2,"['integrat', 'wrap']","['integration', 'wrapping']"
Integrability,"@hugtalbot , @guparan and everyone else ; This PR; - have discussed with as much as possible persons,; - and is now one month old, ; - succeed on all Tests on the CI since several days. I suggest to have a last look at it & merge it rapidly that we can start working on top of it to improve it and to remove all the dependencies to SofaTest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584:316,depend,dependencies,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584,1,['depend'],['dependencies']
Integrability,"@hugtalbot , I added a test with an error message;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1551107805:42,message,message,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1551107805,1,['message'],['message']
Integrability,"@hugtalbot ; My guess is the following:; When loading the SofaCUDA plugin, the module check if it can detect a cuda device. If there is no such a device, it now triggers an error, whereas it was just a print before. In other words, the behavior does not change (loading of the plugin), but the log message is now counted as an error. ; I think it is a good thing. It helps to identify the scenes that cannot be executed on the CI. For the case of the failing scene. I'll just remove the `<RequiredPlugin name=""SofaCUDA""/>` which is even not required.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503:298,message,message,298,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503,1,['message'],['message']
Integrability,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:108,interface,interface,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622,1,['interface'],['interface']
Integrability,@hugtalbot The code seems ok to me and fix test that are bugued. ; I vote for fast integration ASAP we have an all green dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127:83,integrat,integration,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127,1,['integrat'],['integration']
Integrability,"@hugtalbot it depends. In some other libraries, there are different levels of verbosity. We have only one. Adding an extra Data `d_verbose` could be a way to simulate a second level of verbosity. But it is not clean :). I think for now we just stick to `f_printLog`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1557202278:14,depend,depends,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1557202278,1,['depend'],['depends']
Integrability,"@hugtalbot the error was ` no template named 'Vector' in namespace 'Eigen'; const Eigen::Vector<Real, 3>& eigenvalues = eigensolver.eigenvalues();`. I no longer use the type `Vector`. Therefore, I expect the error message (if any) to be different. Is it the same?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2107541462:214,message,message,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2107541462,1,['message'],['message']
Integrability,"@jnbrunet How implicit solvers could take advantage of a diagonal mass matrix? There is already the function `addMDx` which depends on how the mass is stored. For example, it multiply dx by a single value in UniformMass, instead of multiplying by a matrix. What more can we do in implicit solvers?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-803984406:124,depend,depends,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-803984406,1,['depend'],['depends']
Integrability,"@jnbrunet If I understand correctly, your problem with this solver is not the approximation equations on which I asked your opinion, but with the way `a_{n+1}` is computed. From your document, `a_{n+1}` should be computed differently depending on if it symplectic or not. In EulerExplicitSolver, we just compute `a` in `Ma=f` for both symplectic and non-symplectic, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-861362694:234,depend,depending,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-861362694,1,['depend'],['depending']
Integrability,"@jnbrunet have you taken a look at this PR?. Latest proposal of Damien is to have:; - Unique identifier for topologies (as Datafield); - Create QuadratureMethod component (datafield method, datafield topology → datafield function pointer with integration points)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-600522140:243,integrat,integration,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-600522140,1,['integrat'],['integration']
Integrability,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:328,message,messages,328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536,1,['message'],['messages']
Integrability,@matthieu-nesme ; If you really want to be able from the script to activate/de-activate the reloading... the proper way of implementing that is to make a python function that adds the <Reload> component in the scene if it does not exist. Such implementation will be safe to use for the users compared to calling the __uninstall__ stuff as the existing approach do. . In case of several calls to the doReload function from multiple python script may even return a nice message warning the user that what he is doing is 'not needed'. . EDIT: I will give this version a try in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286717459:468,message,message,468,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286717459,1,['message'],['message']
Integrability,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:348,message,message,348,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180,4,['message'],['message']
Integrability,"@maxime-tournier : indeed that makes a lot more sense to do as you suggested. I just wrote down something to emphasize on what you mentioned above, which is that the concrete chunk type that will be used in the end could not be inferred beforehand at the level of the API, since it is something that depends on the template type.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292928137:300,depend,depends,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292928137,1,['depend'],['depends']
Integrability,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:737,message,messages,737,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829,4,['message'],['messages']
Integrability,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:95,depend,dependencies,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167,4,"['depend', 'message']","['dependencies', 'depending', 'message']"
Integrability,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:103,message,message,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531,4,['message'],['message']
Integrability,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1595,depend,dependency,1595,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370,2,['depend'],['dependency']
Integrability,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:464,depend,dependency,464,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372,1,['depend'],['dependency']
Integrability,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:457,message,message,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662,5,"['Message', 'message']","['MessageDispatcher', 'message', 'messages']"
Integrability,A linking error appeared @alxbilger ; The CMakeLists from SofaConstraint should explicit its dependency to SofaSimulationCore (where the visitor is located),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1030087337:93,depend,dependency,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1030087337,1,['depend'],['dependency']
Integrability,"A little update:; - added `wrap/unwrap` mechanism: there are wrapping traits in `PythonToSofa.inl` specifying wrapped type (`PySPtr` or `PyPtr`) for a given type (defaults to `PyPtr`); - wrapping traits specializations for `Base`, `BaseData` and `BaseLink`-derived classes. `Base`-derived classes are wrapped as `PySPtr<Base>`, `BaseData`-derived as `PyPtr<BaseData>`, etc. this should cover most cases.; - `unwrap<T>(py_obj)` first recovers the wrapped type and the object pointer, then `dynamic_casts<T*>` ; - `unwrap_self<T>(py_obj)` does the same but with `static_cast` (this is for `self` arguments, python enforces that `self` is an instance of this type). Extension code should look like this now:. ```c++; Node* node = sofa::py::unwrap_self<Node>(self);; BaseObject* obj = sofa::py::unwrap<BaseObject>(py_obj); if(!obj) { ... }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600:27,wrap,wrap,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-310324600,6,['wrap'],"['wrap', 'wrapped', 'wrapping']"
Integrability,"A more detail approach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous excep",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:521,message,message,521,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494,2,['message'],['message']
Integrability,"A solution could be to replace the concerned Data with new Data **with different names** using SVector. The backward compatibility could be ensure by having a specific ""parse"" function, looking for the old data names, and filling the new SVector by splitting at every spaces (the old way). W/o forgetting the deprecated message. A similar process has been done in RigidMapping (Data 'rigidIndexPerPoint' replacing 'repartition').",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/21#issuecomment-251437176:320,message,message,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-251437176,1,['message'],['message']
Integrability,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:366,interface,interface,366,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812,2,['interface'],['interface']
Integrability,A word about organization: ; - we will work by groups of 4; - we will use specific branches (ignored by the CI) on this repository for our commits + integration branches (built by the CI); - I will create a team to handle permissions so please make sure everyone has a GitHub account,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333149231:149,integrat,integration,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333149231,1,['integrat'],['integration']
Integrability,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:183,message,messages,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636,4,['message'],"['message', 'messages']"
Integrability,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:66,depend,dependency,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171,2,['depend'],['dependency']
Integrability,"Actually almost all components in the SofaBoundaryCondition (module of FixedConstraint) depends on SofaBaseTopology (which is were is the TopologySubsetData thing). So I guess more discussion would be needed how to avoid this kind of dependency (maybe move TopologyEngineImpl & co to SofaCore, along TopologyEngine.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657:88,depend,depends,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-774097657,2,['depend'],"['dependency', 'depends']"
Integrability,Actually i think 'msgInfoVerbosity' may be a better name because it explain that the control is only on the amount of INFO messages and that it left untouched the warning or error (that are import functional messages and shouldn't probably be removed).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041:123,message,messages,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278290041,2,['message'],['messages']
Integrability,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:44,message,messages,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829,2,['message'],"['message', 'messages']"
Integrability,"Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; So I would say that there is a problem with the nightlies (and the CI is correct)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375:145,depend,dependencies,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375,1,['depend'],['dependencies']
Integrability,Add a warning message when used in scene without RequiredPlugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1299#issuecomment-607128752:14,message,message,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1299#issuecomment-607128752,1,['message'],['message']
Integrability,"After a certain number of iterations (on my computer), an error message appears in the terminal and the simulation becomes unstable (it explodes) and that doesn't append with LU or Cholesky.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1148550547:64,message,message,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1148550547,1,['message'],['message']
Integrability,"Also, I'm seeing this pattern over and over again:; ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; PyErr_BadArgument();; return NULL;; }; ```; Please don't do that since it replaces the slightly helpful error message set by `PyArg_ParseTuple` by a generic one. Simply return `NULL` instead:. ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; return NULL;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870:217,message,message,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870,1,['message'],['message']
Integrability,"Alternatively, we could have a naive custom ""find or fetch"" mechanism such as ; ```; # find or fetch TinyXML2; find_package(TinyXML2); if(NOT TinyXML2_FOUND); include(FetchContent); FetchContent_Declare(; tinyxml2; URL https://github.com/leethomason/tinyxml2/archive/refs/tags/9.0.0.tar.gz; URL_HASH MD5=afecd941107a8e74d3d1b4363cf52bd7; ); set(tinyxml2_SHARED_LIBS ON); FetchContent_MakeAvailable(tinyxml2); endif(); ```; But, we typically want to avoid this call at each dependency requirement (so here replacing the current `find_package(TinyXML2)` calls, especially in the fetch case.; We could have these lines in a top-level CMakeLists instead, but this go in the opposite direction of our CMake dependencies management where it seems that we search the specific dependency on each target CMakeLists.; I believe (to be confirmed) that this can be avoid with the new mechanism introduced in cmake v3.24, by calling once the `FetchContent_Declare` (so in a kind of top-level cmake) and calling `FetchContent_MakeAvailable` for each target that needs it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1766827939:473,depend,dependency,473,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1766827939,3,['depend'],"['dependencies', 'dependency']"
Integrability,"Another thought about this issue:; If penality forces are integrated implicitly (`addKToMatrix` is implemented and matrices are mapped), the structure of the linear system can change between 2 time steps. In that case, the matrix will need a new symbolic factorization each time it changes. This is very costly, and it will slow down the simulation a lot. It is the same problem occurring after a topological change.; Some solutions (such as https://dl.acm.org/doi/abs/10.1145/3478513.3480505) exist, but require a lot of work (and a dedicated solver).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343:58,integrat,integrated,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-996545343,1,['integrat'],['integrated']
Integrability,"Another way to fix this could be by disabling the native menu bar and use the Qt one. That would also have the benefit of having the same menu bar for every version. Here is one way to do it:. ```; diff --git a/applications/sofa/gui/qt/RealGUI.cpp b/applications/sofa/gui/qt/RealGUI.cpp; index b6546a8..efb29c5 100644; --- a/applications/sofa/gui/qt/RealGUI.cpp; +++ b/applications/sofa/gui/qt/RealGUI.cpp; @@ -221,6 +221,7 @@ void RealGUI::InitApplication( RealGUI* _gui); QString pathIcon=(sofa::helper::system::DataRepository.getFirstPath() + std::string( ""/icons/SOFA.png"" )).c_str();. application->setWindowIcon(QIcon(pathIcon));; + _gui->menubar->setNativeMenuBar(false);. // show the gui; _gui->show(); // adding extra line in the console?; ```. This works perfectly on my mac. The menu bar will be directly on the Sofa's interface like it would with another OS. <img width=""1095"" alt=""screen shot 2017-04-29 at 11 09 38 pm"" src=""https://cloud.githubusercontent.com/assets/6951981/25561053/0eb91f68-2d31-11e7-975b-d80fcf977a9a.png"">. Edit : I can add this patch as a pull request if you want to go forward with this solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/183#issuecomment-298208141:829,interface,interface,829,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/183#issuecomment-298208141,1,['interface'],['interface']
Integrability,"Are you building DiffusionSolver out-of-tree?; `<src>/include` is supposed to by added to CMAKE_INCLUDE_PATH here: https://github.com/sofa-framework/sofa/blob/master/CMakeLists.txt#L138. I think the issue is coming from the fact that CImgPlugin does not use imported targets for its dependencies (JPEG, TIFF and PNG).; We should have something like `target_link_libraries(${PROJECT_NAME} PUBLIC PNG::PNG JPEG::JPEG TIFF::TIFF)` in CImgPlugin/CMakeLists.txt. Exporting `<src>/include` in the include directories of SofaHelper is overkill :smile:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739839094:283,depend,dependencies,283,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650#issuecomment-739839094,1,['depend'],['dependencies']
Integrability,"As @hugtalbot said 4years ago (!), the dependency TopologyData was more or less removed and this issue should be closed.; Actually the include and some code is supposed to be enabled if SOFA_HAVE_NEW_TOPOLOGYCHANGES is enabled.; This macro is only present in MechanicalObject and seems NEVER enabled anywhere, so concretely the TopologyData dependency is removed.; Issue closed then. (macro issue cited in #1786)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-774043440:39,depend,dependency,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-774043440,2,['depend'],['dependency']
Integrability,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:132,depend,dependency,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270,4,['depend'],"['dependencies', 'dependency']"
Integrability,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:1138,depend,dependencies,1138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331,2,['depend'],['dependencies']
Integrability,"As an information, we are working on a first set of basic components, implementing the main virtual classes defined in SofaFramework and SofaSimulation. This first step helps us in detecting unexpected/undesired dependencies. The list of these basic components will soon be presented and the resulting SOFA NG sources released as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847:212,depend,dependencies,212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/226#issuecomment-295246847,1,['depend'],['dependencies']
Integrability,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:456,message,messages,456,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662,8,['message'],"['message', 'messages']"
Integrability,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:137,depend,dependencies,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111,1,['depend'],['dependencies']
Integrability,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:22,depend,dependency,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672,2,['depend'],['dependency']
Integrability,"As far as I remember, it was said that to encourage PR submission & reviewing the policy on which we agreed was something like ""if no one complains then the PR get merged after if they pass the CI"". . I did a quik review of the PR:; - cpack control seems ok (if I understand correctly this is only for cpacking, which is mostly used by the consortium so in case of problem will be fixed quickly); - sofa_find_package is ok ; - about glob_recurse, you make the assumption that it is mainly for linux but sofa_install_libraries which is often used in the following code: ; ```console; if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif() ; ```; or ; ```; if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(PATHS ${Boost_LIBRARIES}) # Boost_LIBRARIES covers Boost internal dependencies; endif(); ``` ; I would say that it is actually mostly a windows side effect to use it and only Sofa.GL seem to use it for Linux. ; So I wonder if it is worth at all expect for a very limited number of specific corner case that maybe could be detected specifically to activate glob_recurse instead of glob . . About the vitalness of the PR... If the timing is still faster than O(n) with n the number of package we will have to face it oneday (and as with modularization we are making more and more package this day will come earlier that we expect).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786627964:852,depend,dependencies,852,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786627964,1,['depend'],['dependencies']
Integrability,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:335,message,messages,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645,1,['message'],['messages']
Integrability,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:115,integrat,integration,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906,1,['integrat'],['integration']
Integrability,Build fails because of a dependency from MouseOperations to multiple deprecated components in SofaUserInteraction.; Any clue on this component guys?; @damienmarchal @fredroy @ErwanDouaille @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/586#issuecomment-365922786:25,depend,dependency,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-365922786,1,['depend'],['dependency']
Integrability,But I see no message warning that a scene is not being run with the version set in APIVersion.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689364724:13,message,message,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473#issuecomment-689364724,1,['message'],['message']
Integrability,"By letting the PR open, the Changelog will never be up-to-date.; I feel comfortable with adding manually (through the GitHub interface) the new items in the Changelog.; Is this fine ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/263#issuecomment-300544505:125,interface,interface,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/263#issuecomment-300544505,1,['interface'],['interface']
Integrability,"By message in ```addMessage``` this means any msg_info / warning error, etc. ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2397#issuecomment-940833554:3,message,message,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2397#issuecomment-940833554,1,['message'],['message']
Integrability,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:521,integrat,integration,521,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649,2,['integrat'],['integration']
Integrability,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:378,message,message,378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421,1,['message'],['message']
Integrability,"CI fails due to [ExternalBehaviorModel](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/ExternalBehaviorModel) plugin, depending on SofaGraphComponent (_InteractingBehaviorModel_ class) itself deprecated ... Question: isn't it time to deprecate this plugin gleichzeitig?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1256502124:143,depend,depending,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1256502124,1,['depend'],['depending']
Integrability,"CI looks happy, I'll merge the dependent PRs :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949461758:31,depend,dependent,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949461758,1,['depend'],['dependent']
Integrability,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:277,message,message,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116,1,['message'],['message']
Integrability,Changes done in this PR will be integrated in PR #2086,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-841260799:32,integrat,integrated,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2013#issuecomment-841260799,1,['integrat'],['integrated']
Integrability,"Closed as :; - ""find or fetch"" mechanism has been abandoned; - embedded header-only libraries are acceptable and compatible with conda-forge package requirements; - the only feature using this dependency **might** be removed in the future (or will be based on another mechanism)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4257#issuecomment-1801372796:193,depend,dependency,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4257#issuecomment-1801372796,1,['depend'],['dependency']
Integrability,"Compilation error on CI, e.g. :; ```bash; /Users/ci/Jenkins/workspace/sofa-framework/PR-4996/macos_clang_options_release/src/Sofa/Component/Mapping/Linear/src/sofa/component/mapping/linear/Mesh2PointMechanicalMapping.inl:53:54: error: use 'template' keyword to treat 'get' as a dependent template name; l_topologicalMapping.set(this->getContext()->get<Mesh2PointTopologicalMapping>());; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4996#issuecomment-2355876487:278,depend,dependent,278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4996#issuecomment-2355876487,1,['depend'],['dependent']
Integrability,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:82,depend,dependencies,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951,4,['depend'],"['dependencies', 'dependency']"
Integrability,Congrats Lionel for this nice integration PR !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/501#issuecomment-339616673:30,integrat,integration,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501#issuecomment-339616673,1,['integrat'],['integration']
Integrability,Congratulation Bruno @bcarrez for the new log messages ! !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125:46,message,messages,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125,1,['message'],['messages']
Integrability,"Congratulations @fredroy for finding this problem. If I understand correctly, the problem comes from the fact that two equivalent cubes (in terms of the comparison predicate) are not in the same order depending on the platform (compiler). In my opinion, it creates collision responses that are also ordered differently. And the order in collision responses is important (see https://github.com/sofa-framework/sofa/pull/2067). But I also wonder how two cubes can be equivalent. We compare two floating-point types, more specifically, the center of a cube along the largest dimension. I suspect that both cubes are perfectly aligned in an orthogonal dimension. It is probably due to the construction of the scene (torus are aligned along the X axis), or the symmetry of the geometry. @fredroy do you know when the discrepancy happens? Is it at the very beginning?. If we don't want to use `stable_sort` because it is slower, maybe we can make a smarter comparison predicate? For example, if the largest dimension is equivalent, let's compare the second largest dimension etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1445913597:201,depend,depending,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1445913597,1,['depend'],['depending']
Integrability,Could you let us know about the json dependency and its related license?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-321189888:37,depend,dependency,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-321189888,1,['depend'],['dependency']
Integrability,"Current the component says it:; /** ; Impose a motion to all the boundary points of a mesh. The motion of the 4 corners are given in the data m_cornerMovements and the movements of the edge points are computed by linear interpolation. ; */; Which looks wrong and probably the result of copy-pasting. ; But what should it be instead ? . Then I bumped into these two:; ```cpp; , m_beginConstraintTime( initData(&m_beginConstraintTime,""beginConstraintTime"",""Begin time of the bilinear constraint"") ); , m_endConstraintTime( initData(&m_endConstraintTime,""endConstraintTime"",""End time of the bilinear constraint"") ); ```; I dream of a day when this kind of code will be removed (or moved into single ""unique"" component that controls ""activation/deactivation"" of a component according to specific rules (time, key, message whatever)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/824#issuecomment-441599038:810,message,message,810,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/824#issuecomment-441599038,1,['message'],['message']
Integrability,"Dear @alxbilger dear @epernod ; I'm wondering why did you ""savagely"" removed our work, and I'm writing to know what are the alternatives to this function? If there is no other solution to perform this critical operation, I'd like to know how many messages should we send to justify that a code is needed and should not be ""savagely"" removed?. To answer your question @epernod, yes this function was indeed written for topological changes, but on the mechanical side (not geometrical). Indeed, independently of the method that you use for topological modifications, you will need to recompute your mechanical matrices. Since you don't know which forcefield is used in your scene you cannot put that directly in a plugin. I guess that without this function you have to call reinit of your forcefield (assuming that the function is correctly implemented). However, there are many cases where these topological modifications only change some elements and not the entire mesh (there are many papers that describe this point on the web if you are interested...). In this case, the reinit method will be very expensive for nothing! I'm sure you are aware that sofa is designed for real-time, so we have to provide a solution to only compute the elements that are modified. . In conclusion, if you combine the fact that you don't know the underlying forcefield and you want to recompute only subpart of Ke elements, you may think that it would be a great idea to have a method in BaseForcefield where you can specify which Ke you want to compute. This is precisely the goal of this function !. The question now is what is the alternative solution? I'm sure that the consortium does not ""savagely"" remove the work of other people without thinking of alternative solutions, especially if the same person has already discussed the need for this method in this PR :). Waiting for answers, I have a student that is stuck on this problem for one week on this point. . Hadrien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1170880124:247,message,messages,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1170880124,1,['message'],['messages']
Integrability,"Dear all, @faichele @fjourdes @JeremieA . Should we include this as a new plugin in SOFA ? How should it be articulated and integrated in SOFA ?; Thanks for your input.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540:124,integrat,integrated,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540,1,['integrat'],['integrated']
Integrability,"Dependencies packages were updated, we are testing it with standard builds.; And then we will launch new checks on this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146:0,Depend,Dependencies,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146,1,['Depend'],['Dependencies']
Integrability,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:0,Depend,Dependency,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314,3,"['Depend', 'depend']","['Dependency', 'dependency', 'dependency-management-or-why-we-built-buckaroo-']"
Integrability,Do everyone agrees on having the conditions I moved up into the NVI VisualModel::drawVisual() and with the one I added into the VisualVisitor ? . Eg: ; ```cpp; void VisualModel::drawVisual(const VisualParams* vparams); {; // don't draw if specified not to do so in the user interface; if (!vparams->displayFlags().getShowVisualModels()); return;. // don't draw if the component is not in valid state (we can change the condition so Loading/Unknow states are drawn differently) ; if( d_componentState.getValue() == sofa::core::objectmodel::ComponentState::Invalid ); return;. // don't draw if this component is specifically configured to be disabled (It is questionnable to have a data for that). ; // having a d_enable on Base would be better. ; if (!d_draw.getValue()); return;. // RAI to be sure the states changed during the rendering don't leaks ; const auto stateLifeCycle = vparams->drawTool()->makeStateLifeCycle();. doDrawVisual(vparams);; }; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3931#issuecomment-1592550546:274,interface,interface,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3931#issuecomment-1592550546,1,['interface'],['interface']
Integrability,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:189,depend,dependency,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679,2,['depend'],['dependency']
Integrability,Do we wait the end of the pluginization of SofaGeneral to see if other dependencies are broken?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526:71,depend,dependencies,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526,1,['depend'],['dependencies']
Integrability,"Drafted ideas. SofaCUDA; VolumetricRendering; VolumetricRendering; CMakeLists.txt; src; examples; VolumetricRendering.CUDA; CMakeLists.txt; src; examples; ; SofaCaribou; CMakeLists.txt; src; examples; ; SofaPython3; Sofa.Component.IO.Mesh; CMakeLists.txt; src; examples; Sofa.Component.IO.Mesh.Python; CMakeLists.txt (depend on: Sofa.Component.IO.Mesh, SofaPython3); src; examples; ; SofaCaribou.Python; CMakeLists.txt (depend on: Caribou, SofaPython3); src; examples; ; Cosserat; CMakeLists.txt; src; examples; ; Cosserat.Python; CMakeLists.txt; src; examples. Cosserat; Cosserat/; CMakeLists.txt; src/; examples/; ; Cosserat.CUDA/; CMakeLists.txt; src; examples; ; PythonBinding/; CMakeLists.txt; src; examples",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884518351:318,depend,depend,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884518351,2,['depend'],['depend']
Integrability,Error Win: ; `ContactIdentifier.h(39): error C2492: 'sofa::component::collision::response::contact::ContactIdentifier::cpt': data with thread storage duration may not have dll interface`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4582#issuecomment-2009121118:176,interface,interface,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4582#issuecomment-2009121118,1,['interface'],['interface']
Integrability,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:233,message,message,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149,1,['message'],['message']
Integrability,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:16,depend,depends,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240,7,"['depend', 'interface']","['dependency', 'depending', 'depends', 'interface']"
Integrability,Fixed ... a long time ago while working on dependencies.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/246#issuecomment-1499860175:43,depend,dependencies,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/246#issuecomment-1499860175,1,['depend'],['dependencies']
Integrability,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:70,message,messages,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026,2,['message'],['messages']
Integrability,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:97,depend,dependency,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404,2,['depend'],['dependency']
Integrability,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:617,depend,dependencies,617,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368,2,['depend'],"['dependencies', 'depends']"
Integrability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:64,depend,dependencies,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,4,"['depend', 'message']","['dependencies', 'message']"
Integrability,"From what I understand, you want to grab images from a sofa scene wihtout the GUI and without the QT gui ? If yes, the headlessRecorder might be a good solution. > I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don´t know how the current gui works so I can´t help :/; In my opinion. it depends of QT. QGLWidget + QGLFrameBuffer might be the trick. . From your idea, I like the ""component"" design. Be able to grab opengl context from any QWidget doesn´t make sense to me. In this case the only canvas you want is the canvas which display the sofa´s scene",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368613474:477,depend,depends,477,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368613474,1,['depend'],['depends']
Integrability,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1289,message,message,1289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515,2,['message'],['message']
Integrability,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:193,depend,dependencies,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928,2,['depend'],"['depend', 'dependencies']"
Integrability,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:329,depend,dependency,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790,2,['depend'],['dependency']
Integrability,"Great contribution, . I fully support any step toward smoother integration of Sofa with Python and this PR is one.; I also like the cleaning & factoring work with stuff like get_base function. . Really minor details: ; In SOFA we have plenty of TODOs forgotten since years that no one is responsible for, without any idea when this was added and when this will be done. To avoid that I suggest replacing things like; ```cpp; // TODO FIXME self is commented; ```; With one with more details; ```cpp; //TODO(mtournier 2017-05-30) Self, is commented there is possibly a problem (if not done in two years, you can remove this comment); ``` ; Or; ```cpp; //DEFECT(mtournier 2017-05-30) Self, is commented there is a problem when...; ``` ; To help general code maintenance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456:63,integrat,integration,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306728456,1,['integrat'],['integration']
Integrability,Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template).; Is there no way to have a more generic way for other Eigen types (like MatrixXf)? @Younesssss ; @jnbrunet @fredroy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-704803455:61,depend,depending,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-704803455,1,['depend'],['depending']
Integrability,Hello @Camille-K and @chhas thanks for very well done and helpfull analysis. . At first sight I would say that this change has nothing to do with the vector3 to vec3 change so it must be removed asap.; I will do that. That says the change is in fact this change was for a separated PR fixing this issue ttps://github.com/sofa-framework/sofa/issues/3384 ; But as the fix was breaking it was not supposed to be integrated that way;,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1339023892:409,integrat,integrated,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1339023892,1,['integrat'],['integrated']
Integrability,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:174,integrat,integrate,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705,2,['integrat'],['integrate']
Integrability,"Hello @alxbilger,. Thank for the careful review, I will integrate that if the feature is considered worth for inclusion. . About the ""addTargetName"" question. . The initial version proposed was using automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:56,integrat,integrate,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615,2,['integrat'],['integrate']
Integrability,"Hello @alxbilger,. Thanks for the PR, removing that ""verbose"" looks fine to. ; As a deprecation worklfow I recommand:; - deprecate the data field (as done in the PR); - updates all call points that are using d_verbose: either replace them with msg_info or remove the message depending on the situation ? ; - in the parse method () (or init() method), detect that the verbose argument is used and print a deprecation indicating to the user that the field is either removed or replace by ""printLog"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556707923:267,message,message,267,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556707923,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:131,message,message,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951,2,['message'],['message']
Integrability,"Hello @flm8620 . It is very interesting, I didn't even knew that stuff in a pair of "" "" could cause compilation problem. ; I'm also surprised that our Continuous integration system is compiling sofa with VS2015 but didn't reported a problem. Maybe something related with the language you use on your system ? . Anyway, thank you very much for your report. If you have time maybe you can submit a pull-request to fix that otherwise I will do it. . Regards,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372:162,integrat,integration,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/323#issuecomment-313322372,1,['integrat'],['integration']
Integrability,Hello @fredroy . Thanks for the review.; Removing glew everywhere is in PR #1071 ; I will add right now two deprecation message for the two data field that have been removed. [DONE]. If you agree can you pass it to ready & merge ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392999:120,message,message,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392999,1,['message'],['message']
Integrability,"Hello @jnbrunet ; Thanks a lot of the PR. Lot of interesting things. ; Few comments:; - one that repeat a lot about error/exception's message. ; - the other is about wether SofaPython is the proper place to put Simulation and GUIManager's manager binding. My feeling is that we should have second module like SofaApplication/SofaRuntimewhich exposes those, application specific bindings. . Please tell us your opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745:134,message,message,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745,1,['message'],['message']
Integrability,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:217,rout,routines,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,2,['rout'],['routines']
Integrability,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:107,depend,depends,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923,2,['depend'],['depends']
Integrability,Hello Erwan & @guparan . Was zmq installed on the CI ? ; I installed it on centos3 and ubuntu but not on macos & windows. ; It seems there is also a dependency on liboscpack that also needs to be installed Am I wrong ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307:149,depend,dependency,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307,1,['depend'],['dependency']
Integrability,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:482,message,message,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475,2,['message'],['message']
Integrability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:771,depend,dependencies,771,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,4,['depend'],"['dependencies', 'dependency']"
Integrability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:124,depend,dependency,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,12,"['depend', 'integrat']","['dependency', 'integrate']"
Integrability,"Hello Guillaume,. Maybe we should use PUBLIC/PRIVATE/INTERFACE keyword in the target_link_libraries, target_compiler_definition, target_include_directory to control how the parameters are exposed. . More specifically, in CImgPlugin/CMakeLists.txt I think we should replace; ```; set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${CIMG_CFLAGS} -DSOFA_BUILD_CIMGPLUGIN""); ```; by ; ```; target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_CIMGPLUGIN""); ```. By doing this we can totally remove the CImgPlugins_CFLAGS and only do:; ```; find_package(CImgPlugin REQUIRED); target_link_libraries(MyLib CImgPlugin); ```; The target_link_libraries will handle the dependencies of the public part of the included package in the right way and transitively. . All that is new to me so if you try and if this work please confirm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323:53,INTERFACE,INTERFACE,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependencies']"
Integrability,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:127,interface,interface,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041,4,"['interface', 'message']","['interface', 'message']"
Integrability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:216,depend,dependency,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,2,['depend'],['dependency']
Integrability,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:1897,Message,MessageDispatcher,1897,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333,1,['Message'],['MessageDispatcher']
Integrability,"Hello thank you for the feedback,. I'm strongly reluctant to hard code in c++ trivial keyboard controller because there is a lot of boilerplate code and because this also encourage software obesity by having all the application specific's user interfaces in Sofa Core, think about just changing the keypress ""a"" to ""b"" without recompiling sofa. . But I'm ok to implement that in a python controllers, does it would be ok ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587:244,interface,interfaces,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587,2,['interface'],['interfaces']
Integrability,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:1003,message,message,1003,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273,2,['message'],"['message', 'messages']"
Integrability,"Hello, ; yes sorry I messed up with my git client.; I cherry picked the right modifications, but I integrated many older commits somehow.; I guess we can close this PR, and pull Matthieu's one instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376:99,integrat,integrated,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263826376,1,['integrat'],['integrated']
Integrability,"Hello, I copied the 3 instruments on the Beam Adapter plug-in_ collis. The scn xml format is converted to the python format, and then it can be opened normally through SOFA, but it is stuck when you click animate. What is the reason?; import sys; import Sofa. def createScene(rootNode):; rootNode.addObject('RequiredPlugin',; pluginName='BeamAdapter SofaMeshCollision SofaBoundaryCondition SofaConstraint SofaMiscCollision SofaDeformable SofaGeneralLinearSolver SofaImplicitOdeSolver SofaLoader SofaOpenglVisual SofaTopologyMapping'); rootNode.addObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels showCollisionModels hideMappings hideForceFields'). rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('FreeMotionAnimationLoop'). rootNode.addObject('LCPConstraintSolver',mu='0.1',tolerance='1e-10',maxIt='1000',build_lcp='false'); rootNode.addObject('DefaultPipeline', draw='0', depth='6', verbose='1'); rootNode.addObject('BruteForceBroadPhase'); rootNode.addObject('BVHNarrowPhase'); rootNode.addObject('LocalMinDistance',name='localmindistance',alarmDistance='2',contactDistance='1',angleCone='0.8',coneFactor='0.8'); rootNode.addObject('DefaultContactManager',name='Response',response='FrictionContact'); rootNode.addObject('DefaultCollisionGroupManager',name='Group'). topoLines_cath = rootNode.addChild('topoLines_cath'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=600,spireDiameter=4000.0,spireHeight=0.0,densityOfBeams=[40,10],numEdges=200, numEdgesCollis=[40,20],youngModulus=10000 ,youngModulusExtremity=10000); topoLines_cath.addObject('EdgeSetTopologyContainer',name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_cath.addObject('MechanicalObject',template='Rigid3d',name='dofTopo1'). topoLines_guide = rootNode.addChild('topoL",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:46,Adapter,Adapter,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Adapter'],['Adapter']
Integrability,"Hello, it could also mean that one of CGALPlugin's dll dependencies were not found as well (namely gmp or mpfr).; Add [Where your cgal install is]\auxiliary\gmp\lib to your system PATH.; Or copy paste those dlls alongside CGALPlugin.dll (not recommended)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829:55,depend,dependencies,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636457829,1,['depend'],['dependencies']
Integrability,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:265,depend,dependent,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748,2,"['depend', 'integrat']","['dependent', 'integrations']"
Integrability,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:327,interface,interface,327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,2,['interface'],['interface']
Integrability,"Hello.; I have removed the margins around QLabel that present parameters names to make the size of components smaller.; Anyway, answering to your questions I could mark these issues.; 1. Unfortunately, I am not an expert in Qt. But I guess some rather tricky manipulations with layouts should be done to make the rendering absolutely the same.; 2. On different systems the rendering is different. I have a notebook with DebianStretch and desktop with Ubuntu 16.04 and I can say that Sofa GUI differs. The changes I've made, unfortunately, affect GUI differently. So, I guess it depends also on how QtWidgets are rendered on different platforms. Thus, if rendering structure is critical, may be it is better not to touch it at all. P.S. I have changed my nickname to make it more reasonable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324309298:578,depend,depends,578,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324309298,1,['depend'],['depends']
Integrability,"Hello.; Thank you for your comments, guys. @Younesssss , answering to your questions:. > 1. First the reference (paper where you got this force equation from) of the equation 1. It is a general spring equation. You could find it for example here: Nealen A. et al ""Physically Based Deformable Models in Computer Graphics"" ; https://matthias-research.github.io/pages/publications/egstar2005.pdf or in StiffSpringForceField SOFA component.; A spring force contains two parts: value and direction. Compared with linear spring the value now is computed like a result of polynomial. The computation of direction remains the same. The S (cross-section area) technically has to describe the characteristics of material, but since it depends on sample shape we are trying to simulate, finally we could say that we compute force intensity instead of object force and, thus, have to recompute it based on sample shape and amount of springs we are using for simulation. > 2. In the first image why you have absolute value on the current length (∆l) if this is a length it probably positif rigth?. Yes, the length is always positive. I added absolute value since square root, in general, might also mean negative value. . > 3. Why current length ∆l = (∆x^2 + ∆y^2 +∆z^2 )^(1/2) it looks more like the formula of the displacement right ?. Yes, it is a displacement, but this displacement describes a distance between spring endpoints (actually, p1 - p2), not the displacement between the object and its rest shape. Therefore, I marked these displacements with notation ∆. Spring length is a norm of this distance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-617800918:725,depend,depends,725,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-617800918,1,['depend'],['depends']
Integrability,"Hello @alxbilger,. Thanks for the PR. . I looked at the implementation and I'm not sure the Observer/Observable mechanism is needed.; At current time is seem to be used to notify that, when a mass change, the component using the mass need to be updated. . Tracking component and data changes can already be done using the Directed Dependency Graph (DDG) mechanisms. . When I want a component (B) to track component (A) and detect it changes I connect A.componentState (the observable) by adding B as a DDG output of A.componentState (so B is the obsever). By using the DDG machinery you can have the choice of when the updates is done... when A.componentState is changed or when B is needed ... (thanks the lazy DDG update mechanism). Finally if using the DDG it too heavy, it is also possible to use the DataTracker, this allows to detect data change (eg: A.componentState has changed) when you need to invalidate the cache.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042182871:331,Depend,Dependency,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042182871,1,['Depend'],['Dependency']
Integrability,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:555,interface,interface,555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360,2,['interface'],['interface']
Integrability,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:610,depend,dependency,610,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598,1,['depend'],['dependency']
Integrability,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:547,depend,depend,547,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,2,['depend'],['depend']
Integrability,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:349,depend,depending,349,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,1,['depend'],['depending']
Integrability,"Hey @JaggerYu928 . For the RequiredPlugin, please see : https://www.sofa-framework.org/community/doc/using-sofa/sofa-ng-migration/; For the other errors, please make sure to carefully read the deprecation / warning messages. If you do not successfully solve them, please list the error output down here; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1916555314:215,message,messages,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1916555314,1,['message'],['messages']
Integrability,Hey @Younesssss only some small last fixes are to bring to your PR in order to compile with options. Just grep all codes depending FixedConstraint to make sure about your PR. You're almost there!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288#issuecomment-326613658:121,depend,depending,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-326613658,1,['depend'],['depending']
Integrability,"Hey @guparan ,. Sorry for the late response, I'm having a slow week. Yeah I agree with your solution 2, if SofaValidation and SofaNonUniformFem are hard dependencies of core libraries, they becomes almost ""core"" libraries themselves and should be in ""lib"" (""bin"" on Windows). . Will this be in your big cmake refactoring branch (aka #1397)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825:153,depend,dependencies,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825,1,['depend'],['dependencies']
Integrability,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:932,Message,Message,932,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['Message'],['Message']
Integrability,"Hey @guparan, sorry for the delay. It looks much better now. The only thing that bugs me is, why make the ffmpeg option dependant on compilation checks if only the ffmpeg executable is needed. I would remove completely the compilation checks for ffmpeg, and always show the option in the GUI, with a textbox to specify the ffmpeg path. If no path are specified, check the INI file if it has one, if not then gray-out the options for ffmpeg output. If it is a valid path (checked during runtime), then save that path in the INI file. I think this would make much more sense and would not restrict the user if he have ffmpeg somewhere on his computer that was not found during compilation or if he downloaded a compiled version of Sofa with ffmpeg support but his ffmpeg path doesn't match the one used for compilation. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519:120,depend,dependant,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519,1,['depend'],['dependant']
Integrability,"Hey @hugtalbot , would you mind elaborate a little bit more on this? What was the problem? . We definitely need some doc on those integrating factors...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639:130,integrat,integrating,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625124639,1,['integrat'],['integrating']
Integrability,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:303,protocol,protocols,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533,2,['protocol'],"['protocol', 'protocols']"
Integrability,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:659,message,message,659,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525,2,"['Message', 'message']","['MessageDispatcher', 'message']"
Integrability,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:987,depend,dependency,987,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316,1,['depend'],['dependency']
Integrability,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:183,message,messages,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464,4,['message'],['messages']
Integrability,"Hi @ScheiklP, sorry to bother you again. I am trying to install sofa from source so that i can use a =>3.9 version of python as you suggested. I'm facing some problems though. when i compile sofa with cmake i get this error ; 'Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.18"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package)'",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804:340,message,message,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804,1,['message'],['message']
Integrability,"Hi @WilkGardariki, sorry for the late answer. The dependency packs have been updated.; Thank you for the report !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459:50,depend,dependency,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/295#issuecomment-312637459,1,['depend'],['dependency']
Integrability,"Hi @alxbilger . I think that what compiler's developers consider as ""default"" shouldn't have any consequence in our code architecture and thus, I'm 100% convinced it is way better to set the properly the compilation parameters to cope with a default compiler option compare to increase the dependency graph (#include) or code complexity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3334#issuecomment-1265179521:290,depend,dependency,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3334#issuecomment-1265179521,1,['depend'],['dependency']
Integrability,"Hi @courtecuisse , thanks for your PR. Concerning the DataCallback, it seems to me that it is a very similar to the DataTrackerFunctor class in SOFA.; Functors would allow you to trigger a call to your component's method, or any other object that you pass to your functor's ctor. You could also assign multiple functors to a single input data, just like you do with the DataCallback::addCallback() method, or assign only one functor, that then uses a vector of std::functions internally, called successively in its operator().; Sure it requires to wrap your callback method in a struct or class, but the cost is not very high IMHO, compared to adding a new Data tracking class in SOFA, where multiple tracking methods already exist, and aren't well known, nor very used by most users, as this PR, or a quick search in SOFA's codebase proves (DataTrackerCallback, DataTracker, DataTrackerDDGNode, DataTrackerEngine, DataTrackerFunctor, DataEngine.......). Maybe a better alternative would be to provide in SOFA a default functor for the DataTrackerFunctor, taking advantage of C++11's `std::function` function (as @damienmarchal mentioned) to store methods & call them in its operator()?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-460209030:548,wrap,wrap,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-460209030,1,['wrap'],['wrap']
Integrability,"Hi @damienmarchal ,. So point by point,; - _totalMass is set as readOnly in DiagonalMass while it is not in UniformMass_ : This should be implemented in a uniform way. On my opinion, mass components can (should) be initialized either with a massDensity or a totalMass (so not readOnly).; - _readOnly flag_ : I never really used this flag. But readOnly is not a bad thing, but it should be working !; - _no error message associated to readOnly_ : a warning should indeed be notified; - _totalMass parameter is re-computed in the un-specialized implementation of the reinit function_ sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation; - _data f_mass_ : I consider the name of this data pretty bad, it denotes the computed nodal mass. So readOnly can have a sense. What do you mean exactly with ""not tagged in the same way as totalMass"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518:412,message,message,412,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257833518,1,['message'],['message']
Integrability,"Hi @damienmarchal ,. Yes, the main idea is to have more control over the simulation. My work will allow to use Sofa as a real python module, in contrast to launching a binary executable that than execute a python script. It's really not a big feature since it only needs a valid entry point in the dynamic library so that python can initialise the module. After that, the wrappers will work the same way as now. The work will then be more around expending the current wrappers to have more control over Sofa's components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427:372,wrap,wrappers,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427,2,['wrap'],['wrappers']
Integrability,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:904,interface,interface,904,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780,2,['interface'],['interface']
Integrability,"Hi @fbridault ; Did you give a try to the latest v19.12 ?; If you face any issue, please poke me directly. I want to make sure your integration is working fine.; Best.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497:132,integrat,integration,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-592187497,1,['integrat'],['integration']
Integrability,Hi @fredroy . Several questions: ; - shouldn't we drop the dependency to SceneCreator (as discussed (https://github.com/sofa-framework/sofa/issues/417) ? ; - why not defining the test in Sofa.component.ODESolver.tests in place of Sofa.component.ODESolver_test ? To me this looks more consistant and coherent with our naming scheme as well as having the tests in a child directory of ODESolver. ; - why centralizing the testing.tools which breaks modularity instead of letting them at their right logical location ? ; To me having something like; ```console; SofaDeformable.testing.tools/MassSpringSystemCreation ; ``` ; Is much better than; ```console; Sofa.testing.tools/MassSpringSystemCreation ; ``` ; Because the latter creates a dependency from package SofaDeformable to package Sofa.testing.toos. ; While the First has only a dependency from SofaDeformable to SofaDeformable.testing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040482854:59,depend,dependency,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040482854,3,['depend'],['dependency']
Integrability,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882,4,['depend'],['dependency']
Integrability,"Hi @fredroy,. I have an update concerning this issue. I tried compiling SOFA with SofaPython3 in Debug mode and I encountered the issue again.; Firstly, in Visual Studio, I had to add the Python3 libs folder as additional library reference to the python3 related projects. (Otherwise python39.lib was not found). In `PythonEnvironment::Init()`, the line `py::module::import(""SofaRuntime"");` causes the crash. So apparently the import fails. . I think the cause could be that the .pyd files make reference to unreachable dependencies. So I ran Dependencies and did not notice anything wrong :; ![image](https://user-images.githubusercontent.com/24836743/108839575-87195400-75d5-11eb-8438-1cbf28fe8bb2.png). I precise that I installed the Python Debug binairies (so python39_d.dll exists).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337:520,depend,dependencies,520,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-784141337,2,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:107,integrat,integration,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581,2,['integrat'],['integration']
Integrability,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:382,integrat,integrating,382,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009,2,['integrat'],['integrating']
Integrability,"Hi @jjcasmar . MultiMapping need both an 'input' and 'output' data attributes pointing to valid mechanical objects. With your example:; `final.addObject(""CPFMapping"", template=""Vec3"", input=""path/to/mo1"", output=""path/to/mo2"" )`. We are working on better diagnostic message for such failed object creation, see #1266 and #1294",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605432979:266,message,message,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605432979,1,['message'],['message']
Integrability,Hi @jnbrunet ; Did you integrate what was done by @courtecuisse in #1549 or is it is still worth having a look at 1549 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983:23,integrat,integrate,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-752008983,1,['integrat'],['integrate']
Integrability,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805,1,['depend'],['dependency']
Integrability,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:469,integrat,integrated,469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631,1,['integrat'],['integrated']
Integrability,"Hi @raphaeldeimel,; Thank you for your PR. I just rebased it to remove the empty commit with duplicated message.; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328519306:104,message,message,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328519306,1,['message'],['message']
Integrability,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:542,depend,dependencies,542,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059,1,['depend'],['dependencies']
Integrability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:272,depend,dependencies,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,2,['depend'],['dependencies']
Integrability,"Hi @tgaugry ; I think I fixed the issue:; - first, I added a condition checking before resizing constraintReleased; - second, a beginEdit() on d_constraintFactor was actually forcing the d_constraintFactor.isSet() function to return true (since the the beginEdit is considered as ""setting"" the data); Let me know if it suits you, I tested your scene it works with or without specifying the constraintFactor; - third, use of bwdInit() function: when AttachedContraint focuses on subnodes (these might not be initialized yet) and the initialization of AttachedContraint requires MO size info. With the work on Data dependencies bwdInit() should be later removed. Thanks for noticing the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444:613,depend,dependencies,613,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444,1,['depend'],['dependencies']
Integrability,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:261,message,messages,261,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162,11,"['Message', 'message']","['Message', 'message', 'messages']"
Integrability,Hi @untereiner could you point us some examples scenes to run with your integration work ?; Cheers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762:72,integrat,integration,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762,1,['integrat'],['integration']
Integrability,"Hi Adrien,. Thank for the PR, and the detailed description. Few comments at first glance:; - are the class Callback & CallbackImpl not equivalent to the std::function and std::bind that are in the c++11 STL ? ; - about the ""if(m_updating)"" in the update function. I think it is there to avoid loops. Does it make sense to add a message warning if this happens ? ; - we don't use #pragma once in SOFA as this is not part of the standard . But I think the decision make sense 10 years ago but as the compiler support is now rather bit maybe we should switch to use it as managing the #include SOFA_SUPPER_LONG_NAME_H..is error prone. @guparan, do you think we can make a script to convert the complete code base for pragma once ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168:328,message,message,328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168,1,['message'],['message']
Integrability,"Hi Benjamin, . Maybe I'm wrong but it seems to integrate a lot of commit touching a lot of different sofa part (SofaKernel, SofaOpenGL) which does not precisely match the pull-request description. Wouldn't it be better to separate that into several more specific pull-request ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660:47,integrat,integrate,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76#issuecomment-263724660,1,['integrat'],['integrate']
Integrability,"Hi Bruno,. Thanks a lot for this PR that is really needed and made in a nice way. I will have a look if it complex to add a deprecation message in the binding so that when the user is using the ""old"" convention something is printed and replacement string is suggested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/740#issuecomment-409846505:136,message,message,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740#issuecomment-409846505,1,['message'],['message']
Integrability,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:1060,depend,depend,1060,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574,2,['depend'],['depend']
Integrability,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:527,message,message,527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657,2,['message'],['message']
Integrability,Hi Damien. Are there certain categories of components that tend to have more dependencies than others?; How much of this mess could be solved by reducing even further the functionalities of SOFA-NG? ; I'd like to help with this issue if I can.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372495482:77,depend,dependencies,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372495482,1,['depend'],['dependencies']
Integrability,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:221,message,message,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578,4,['message'],"['message', 'messages']"
Integrability,"Hi Erik,. Thanks for reporting this bug. . I looked into BaseContext and found the following:; ```cpp; core::topology::Topology* BaseContext::getTopology() const; core::topology::BaseMeshTopology* BaseContext::getMeshTopology() const; core::topology::BaseMeshTopology* BaseContext::getLocalMeshTopology() const; core::topology::BaseMeshTopology* BaseContext::getActiveMeshTopology() const; ```; All of them only returns the ""first"" topology found which can cause a lot of trouble to users. . I think your suggestion to provide warning message using the scene checker is a good idea unless there is good reasons for ppl to have multiple topologies in the same node (I don't know if this is the case). I can give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/744#issuecomment-410395436:535,message,message,535,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-410395436,1,['message'],['message']
Integrability,"Hi Eulalie, . The template instantiation part (in the .cpp) is not synchronized with the extern template part (in MechanicalMatrixMapper.h). ; But we can update that in a separate PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994:67,synchroniz,synchronized,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1703#issuecomment-758491994,1,['synchroniz'],['synchronized']
Integrability,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:338,depend,dependent,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855,2,['depend'],['dependent']
Integrability,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:108,depend,dependencies,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228,1,['depend'],['dependencies']
Integrability,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:421,depend,dependency,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406,3,"['depend', 'message']","['dependencies', 'dependency', 'messages']"
Integrability,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:58,depend,dependency,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818,4,['depend'],['dependency']
Integrability,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:220,depend,depends,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038,1,['depend'],['depends']
Integrability,"Hi Hugo,. The incompatibility I was talking about few days ago were because of issimo changes integrated in master.; So I don't think there is a need to wait for merge. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419:94,integrat,integrated,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419,1,['integrat'],['integrated']
Integrability,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:157,integrat,integration,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246,2,['integrat'],['integration']
Integrability,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:134,message,messages,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290,7,"['Message', 'message']","['Message', 'MessageAsTestFailure', 'messages']"
Integrability,"Hi Mathieu,. Thanks for the tick reporting ;). . FlowVR is currently used in DistanceField.cpp to load .fmesh files. We can probably refine the dependency to FlowVR to allow DistanceField object to work but without the fmesh support. This seems easy and I will try to do that. Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592:144,depend,dependency,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254765592,1,['depend'],['dependency']
Integrability,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:728,depend,dependency,728,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289,2,"['depend', 'synchroniz']","['dependency', 'synchronize']"
Integrability,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:75,message,message,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167,1,['message'],['message']
Integrability,"Hi Vlad. We have discussed your PR during the sofa dev meeting. And this is what came out : ; This is of interest but would require an example/context (plugin using it) of use to see how you use it. More over, it still need a lot to do to integrate it in a more standardized way to be more generic regarding the type of element. And finally, and we could help you for this, this feature would need unit tests. This pr is currently set to WIP, waiting for further comment from you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121:239,integrat,integrate,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121,1,['integrat'],['integrate']
Integrability,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:940,Depend,Dependency,940,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336,3,"['Depend', 'depend']","['Dependency', 'dependency']"
Integrability,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:325,depend,dependency,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481,2,['depend'],['dependency']
Integrability,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:331,message,messages,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583,1,['message'],['messages']
Integrability,"Hi all,; +1 to Igor and I add @olivier-goury to the discussion as he is very interested by the topic. . 1) Having SparseLDL crashing is a shame (or a joke) that was during since too long. The good news is that the issue was fixed last week in this PR: ; - https://github.com/sofa-framework/sofa/pull/655 (it shouldn't crash that much :)). 2) About the lack of get messages... I discovered there is a #define MULTIMATRIX_VERBOSE that can be changed and this is actually really helpfull to get a minimal amount of understanding of what is happening. https://github.com/sofa-framework/sofa/pull/660/commits/90f413eb2b79ba45fbc742e9777691203ca33886. Now having to change a #define in some obscure .h file is also a shame so as a first step we should replace this #define with a real variable that users can activate/deactivate at run time (without recompiling). This is easy to do. . 3) At Defrost those aspects are under heavy investigation and we are probably willing to help anyone that comes with a road map to improve the situation. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702:364,message,messages,364,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702,1,['message'],['messages']
Integrability,"Hi damien,; I was looking at the DigaongalMass and I saw you already committed the change about the init(). Thanks !. A general initialization process based on either mass or totalMass should still be implemented.; However, the DiagonalMass is not the most important mass to consider, the MeshMatrixMass is instead. Remaining (but a bit wider topics) : readOnly flags and readOnly messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268264030:381,message,messages,381,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268264030,1,['message'],['messages']
Integrability,"Hi erik,. You are totally right, . As far as i know there is no well defined error management pattern on sofa. Without using exceptions or changing function signature my current approch is, for each detected error, to emit an error messages with the msg_error() macro and set the componentState to invalid. Then in each function that needs a valid object...check it and exit if it is not.; Not perfect and rather invasive but at least the component does not crash sofa anymore.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067:232,message,messages,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278805067,1,['message'],['messages']
Integrability,"Hi everybody, I'm trying to work on this PR, but I'm quite busy with my PhD in this moment and I don't think I will be able to finish it within a short delay.; As suggested by Francois, I added the error message in Quater_test.cpp.; Now is failing, as with the old-code (without my commit) NaN values may appear. ; In Quater.inl (function toEulerVector) I went back to the old code commenting the modifications I made with my commit. This way, if someone else takes the hands on this PR, he will better know what to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483:204,message,message,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-346567483,1,['message'],['message']
Integrability,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:147,depend,depend,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277,2,['depend'],['depend']
Integrability,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:467,wrap,wrapper,467,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['wrap'],['wrapper']
Integrability,"Hi guys,. Interesting points indeed.; I wanted to add that topological changes are not of interest of everyone in the community. It actually does not represent the major use case. I therefore think that strong dependencies (to TopologyData for instance) and code optimizations for topological changes only should be avoided. Do you agree?. Today, we often have either one version of a component (supporting or not the topological changes). Would there be a nice design allowing for having the possibility to have the two behaviors for each component ?. Personal reminder: this issue is about the MechanicalObject. I think it can be closed as soon as the dependency of MechanicalObject on TopologyData is removed. We should later continue this discussion in a specific/dedicated thread. Agreed ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703:210,depend,dependencies,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295635703,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi mathieu,. The provided code force a reload of the dependencies *each* time the runFile function is called. . I see two problem with this approach: ; - there is a large 'un-needed' overhead that will be linear with the number of PythonScriptController in the scene as well as in the amount of modules to reload (the depth of import dependency graph). . - there is *possibly* memory problems here. Let's me explain, normally all PythonScriptController are binded to functions that are from the same module set (the groupe of imported modules), this is made possible because python is caching the imported modules. In the PR we flush the module set at each runFile so each PythonScriptController will be binded to its own reloaded (""private"") version of the module. . So for the moment I think that adding a single PythonEnvironment object automatically in a scene with a cleanup function to unload the module will be either conceptually cleaner and more efficient. . EDIT: What do you think about the idea of having the PythonEnvironment as an object in the scene ? I can easily code that but if you don't think it good I don't want to waste time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842:53,depend,dependencies,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286119842,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:314,message,message,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167,1,['message'],['message']
Integrability,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:535,message,message,535,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,2,['message'],['message']
Integrability,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:343,message,messages,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439,4,['message'],['messages']
Integrability,"Hi thomas,. Maybe the use of 'printLog' in my example was ambiuous sorry... . To me the 'error', 'warning', 'info' specifiers is the message 'type' and the set of types is un-ordred so it cannot be controlled via a single level. ; Eg of valid pattern: ; ```cpp; msg_info_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; msg_info_when( msgInfoVerbosity >= HIGH ) << ""This is printed not so often"";; ``` . Eg of in-valid pattern (should be rejected in the PR :)): ; ```cpp; msg_error_when( msgInfoVerbosity < LOW ) << ""This is printed often"";; ``` . 'msgInfoVerbosity' only control the amount of info messages emitted so is nothing related to ; error/warning. . Instead of level we may also have a 'verbosityMask' to control precisely which message are emitted ; Eg:; ```cpp; msg_info_when( verbosityMask & INFO ) << ""blabha"";; ```; but I think *we shouldn't do that*. About the 'msg_debug'...it is problematic because there is also a different set of macro for developers that are called dmsg_info, dmsg_warning, dmsg_error()...these dmsg_* macros leads to NO-op when compiled in RELEASE. So my thinking is that we should remove the msg_debug macro and use their dmsg_* ones instead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429:133,message,message,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278609429,3,['message'],"['message', 'messages']"
Integrability,"Hi, @Namdhari, ; as @fredroy mentioned, the error message could mean one of the dll used by CGALPlugin.dll is not present. If you are using the compiled version of CGAL, be sure to put the lib directy of CGAL into your env. paths or to copy the dll of CGAL inside the bin directory of SOFA where the CGALPlugin.dll is located. Anyway, if the header verison is working fine I think you can close this issue. thanks,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460:50,message,message,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-637383460,1,['message'],['message']
Integrability,"Hi, @polyakovkrylo! Thank you for your reply. When I run the scene with lindhd.so.3, there were no errors, but there was a warning; `Gtk-Message: 16:20:05.799: GtkDialog mapped without a transient parent. This is discouraged.; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution. ; - DefaultContactManager: 1 created with alias ""CollisionResponse"" ; - DefaultPipeline: 1 created with alias ""CollisionPipeline"" ; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; `. I was able to use the ForceDimension SDK examples as normal, and when I run the scene， the device was already connected but couldn't do anything, which confused me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1328008865:137,Message,Message,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1328008865,1,['Message'],['Message']
Integrability,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:202,message,message,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977,1,['message'],['message']
Integrability,"Hi, just wanted to add something here, I am now facing with a similar issue related Background setting object, with same error as above(object not in factory). I am using a .py file for scene creation. I can run it using runSofa, but not able to run it with python3 for integrating with gym. You can find the implementation here https://github.com/ScheiklP/sofa_env; the file I am trying to run : https://github.com/ScheiklP/sofa_env/blob/main/sofa_env/scenes/reach/reach_env.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3614#issuecomment-2263809050:270,integrat,integrating,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3614#issuecomment-2263809050,1,['integrat'],['integrating']
Integrability,"Hi,. Could you put your scene example here and the error message you get.; The Geomagic plugin just create SOFA components to be used in the scene graph so there should be no interference with the SofaPython3 mechanism.; But nothing is better than testing! 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580:57,message,message,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580,1,['message'],['message']
Integrability,"Hi,. The message is located here: https://github.com/sofa-framework/sofa/blob/b5aefb456472e05579913a806ee88bd171457f7a/Sofa/Component/SolidMechanics/FEM/NonUniform/src/sofa/component/solidmechanics/fem/nonuniform/HexahedronCompositeFEMMapping.h#L105. I don't think that the message is true. @epernod Do you remember why you added this message in https://github.com/sofa-framework/sofa/commit/0170a07db4edefb9d82c3c90ca9aa48e09da4e20#diff-a123e50be73be01f8474ca9ef41fb5da89fecf57c07cde10d88cfb39ec8f0f2a?. This function is called even with a direct solver. [Here](https://github.com/sofa-framework/sofa/blob/43f2e77657a0fd387b6e210a43739d889c5b02f5/Sofa/Component/LinearSystem/src/sofa/component/linearsystem/MatrixProjectionMethod.inl#L294) for example. According to the history of this function in the component HexahedronCompositeFEMMapping, I would say that nobody took the time to implement it. Unfortunately, without this function, the mapping will not be able to map stiffness matrices. In the case of your example, the only contribution of a mapped stiffness matrix would come from the collision. It means that the collision forces don't contribute to the stiffness matrix, i.e. they are considered explicit. The scene may behave correctly even in this case, especially if you don't have collision. If the message bothers you, and if you build SOFA yourself, you can comment it as a temporary solution. Unfortunately, I don't know the components of your scene, so I don't know why it diverges with the liver. You can always try the usual tricks: decrease the time step size, increase the nb of CG iterations, increase the number of elements etc. Does it work with DefaultAnimationLoop? Perhaps the function `applyJT` is important after all?.. Alex",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006090673:9,message,message,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006090673,4,['message'],['message']
Integrability,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:376,integrat,integration,376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359,2,['integrat'],['integration']
Integrability,"Hi,; I suggest you give a look to this repository: https://github.com/InfinyTech3D/SofaUnity; You can also open an issue or a GH discussion on this repository related to SOFA-Unity integration.; Thank you",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4621#issuecomment-2438943844:181,integrat,integration,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4621#issuecomment-2438943844,1,['integrat'],['integration']
Integrability,"How does it break the scenes? In my opinion, it breaks only if you refer to a component that you did not name, relying only on the component class name. I don't think it's a good practice. If you refer to a component, you have to give it a name. But maybe we missed other cases.; Same thing when you rely on a warning message to detect duplicate names. This warning is here only when the user actually provided two equal names. But a user can put two same components in the same Node without naming them and it's a valid situation. In this case, no warning.; I am open to discuss about removing the 0 suffix, because in most cases, the component is the only one in its Node. But I would like to keep the following suffixes (1, 2, 3 etc). Note that removing the 0 would not discourage users to rely on the component class name of an unnamed component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1057829751:318,message,message,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1057829751,1,['message'],['message']
Integrability,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:398,message,message,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351,9,['message'],['message']
Integrability,"I agree with all the points :F and I think we need to have a bit more info about this component...; ; > ; > But it is unclear to me if the implementation proposed in the PR is enough because:; > ; > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",. Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). > * using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... (I will reply to this in my next answer to alxb). > * the implementation in BTD also looks highly suspicious with:; > ; > * plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; > * a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs. The lack of comments, and the fact that the ""partial_solve"" API seems to come from this class is a bit difficult to follow yeah :p.; As far as I could see, the BTDblabla/LinearSolverCC is only used for the beam-related stuff.; All in all, I guess we need more information about it @ChristianDuriez",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506:275,interface,interface,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506,1,['interface'],['interface']
Integrability,"I agree with this idea. ; The only drawback is that all current `setRequired(true)` would require an update... To sum up, if I get it right:. - `isRequired()` should be true by default; - `hasDefaultValue()` should be true by default as well; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that...; - in BaseObject::init() print a warning/error message `if (!data->hasDefaultValue() && !data->isSet())`; - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; ; Is that all, and what you had in mind?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198:488,message,message,488,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767081198,1,['message'],['message']
Integrability,"I also believe the find package integration is not part of cmake 3.22 for the fetch mechanism (so you can use the `FIND_PACKAGE_ARGS` option in `FetchContent_Declare`). Just trying to build the minimal example on this topic on [CMake documentation]( https://cmake.org/cmake/help/latest/module/FetchContent.html#integrating-with-find-package) will not succeed with 3.22 but won't with 3.24. With 3.22, you have no integration of this and you have to call explicitly the `find_package` manually before the fetch (as we do so far in SOFA), but this leads to the problem was citing Paul (dependence not available for all targets). Starting with 3.24, using this option solves the problem (and no need for the `find_package` call before the fetch anymore).; But I understand that we should stick to v3.22 as it is part of ubuntu22.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4586#issuecomment-2004426365:32,integrat,integration,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4586#issuecomment-2004426365,4,"['depend', 'integrat']","['dependence', 'integrating-with-find-package', 'integration']"
Integrability,I also would like to get rid of the failure in Utils:; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1522/testReport/. Here is the associated msg_warning:; [WARNING] [Utils::widenString()] Invalid or incomplete multibyte or wide character. Could it be because this one is changing the locale and depending on the system things goes wrong with the french character used in the string ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709:307,depend,depending,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709,1,['depend'],['depending']
Integrability,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:215,message,message,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531,1,['message'],['message']
Integrability,I am not sure it is doable as things must depend on each other.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312869368:42,depend,depend,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312869368,1,['depend'],['depend']
Integrability,"I am not sure it is necessary to integrate the logger. It makes the code more complex, and IMO nobody will use it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1333575575:33,integrat,integrate,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1333575575,1,['integrat'],['integrate']
Integrability,"I assume that you use MeshMatrixMass. In MeshMatrixMass, the mass integration is distributed on vertices and edges. In a hexahedron, some vertices are not connected by edges. Therefore, this type of interaction is not taken into account in the mass matrix. And that is why, you see a lot more zeros in the matrix in SOFA. I guess you will have more accurate results with tetrahedra, where this situation does not happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324019674:66,integrat,integration,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324019674,1,['integrat'],['integration']
Integrability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:127,depend,depend,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,4,['depend'],"['depend', 'dependencies']"
Integrability,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:135,depend,dependency,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530,1,['depend'],['dependency']
Integrability,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:641,Depend,Depending,641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466,1,['Depend'],['Depending']
Integrability,I did not have a lot of time to progess here but still a reminder for later:; - in Flexible : BezierTetrahedron.scn should not be built anymore since it depends on SofaHighOrderTopologies; - CubeTopology : crashes since the CubeTopology does not implement the position (point) topology,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245:153,depend,depends,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245,1,['depend'],['depends']
Integrability,"I don't think so because components are destroyed in the unload. On Fri, Sep 23, 2022, 16:43 Paul Scheikl ***@***.***> wrote:. > @alxbilger <https://github.com/alxbilger> Thanks!; >; > Before unload; > Total Base: 31970 31936 Diff: 34; > After unload; > Total Base: 31970 31939 Diff: 31; > Before unload; > Total Base: 32002 31968 Diff: 34; > After unload; > Total Base: 32002 31971 Diff: 31; > Before cleanup; > Total Base: 32002 32000 Diff: 2; > Total Base: 32002 32000 Diff: 2; > After cleanup; > Total Base: 32002 32001 Diff: 1; >; > So that looks ok, right? At least the difference is more or less constant.; > :D; > But the tracker only tracks actual objects, right? So Creators, Factories,; > and others that do not inherit from base are not tracked.; >; > Could it be a vector/map that constantly receives new values but is not; > cleanup up with reset/cleanup?; > Similar to what was happening in sofa-framework/SofaPython3#304; > <https://github.com/sofa-framework/SofaPython3/pull/304>; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUANK4QVMDDWVFQIBHTV7W6ZRANCNFSM6AAAAAAQR3UB3M>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726:1319,Message,Message,1319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726,1,['Message'],['Message']
Integrability,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:309,interface,interface,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698,1,['interface'],['interface']
Integrability,I don't understand this conflict because I have no conflict on my machine even when I took an update. I resolved then the conflict on github interface. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622:141,interface,interface,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-323303622,1,['interface'],['interface']
Integrability,"I dont think the fix is good ; the ""toMatrix()"" is available for Mat3x3 but not for Mat4x4 (there was a ` toMatrix` for Mat4x4 but it was deleted and replace with `toHomogenousMatrix()` ).; This RigidCoord::toMatrix() is templated on the Mat type actually, and is really ill-formed (no assert on the size of the given matrix, etc).; I think the solution is to either:; - test if the matrix is 3x3 or 4x4 (and failed to compile with a message with a static assert) and calling the respective ` toMatrix()` or ` toHomogenousMatrix ()` ; - or remove the template, force it to Mat3x3 and create an other `toHomogenousMatrix` in RigidCoord. Consisntent with Quat but duplicating code and breaking. I am more for the first solution. > Thanks for your contribution. I wonder how it was not detected before. I guess this was not detected before because nobody was calling RigidCoord::toMatrix with a Mat4x4 with the code compiled on the CI. Actually, nobody calls RigidCoord::toMatrix, either with mat3 or mat4 apparently.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3360#issuecomment-1267742881:434,message,message,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3360#issuecomment-1267742881,1,['message'],['message']
Integrability,"I encountered a problem which I think is related: on my setup (Windows, debug) runSofa_d.exe crashes because it expects to find zlibd.dll, and only finds zlib.dll in build/bin/Debug. I manually copied zlibd.dll to try a quick fix, but then CImgPlugin could not load. Going to see it's dependencies, it seems to link with the non debug version zlib (which I had replaced), instead of zlibd, in the same way as it does for libpng16.; Trying to investigate, I found in the CImgPlugin CMakeLists.txt two lines (74-75) which could explain this :; ```; # Always link dependency targets in Release to avoid a Zlib debug/release mix.; # Because tiff needs zlib and tiff is only in Release in WinDepPack.; sofa_set_targets_release_only(${DEP_TARGETS}); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}); ```; If someone can check, I'm not entirely sure it is the same issue though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198:285,depend,dependencies,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-790656198,2,['depend'],"['dependencies', 'dependency']"
Integrability,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:15,message,message,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545,1,['message'],['message']
Integrability,I found a great wrapper around curl : https://github.com/libcpr/cpr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4648#issuecomment-2082298867:16,wrap,wrapper,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4648#issuecomment-2082298867,1,['wrap'],['wrapper']
Integrability,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:51,depend,dependencies,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546,1,['depend'],['dependencies']
Integrability,I fully support this... I regularly see people asking me what is wrong because the find_package() reports very hard to understand message.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/607#issuecomment-372311048:130,message,message,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607#issuecomment-372311048,1,['message'],['message']
Integrability,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:1076,message,message,1076,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098,2,['message'],['message']
Integrability,"I have added #ifdef to activate/deactivate the mutex on demand. . @matthieu-nesme I measured the performance with the mutex. On my machine, the message API is handling around 900000 messages per seconds. I got no noticeable difference when the mutex is there or not. Can someone confirm that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431:144,message,message,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/257#issuecomment-300826431,2,['message'],"['message', 'messages']"
Integrability,"I have an implementation suggestion, but it depends on the update callback mechanism (that we haven't yet merged into SOFA:; - We could plug in callbacks in the sofa::simulation::Node methods to guarantee that all bboxes in child nodes and child objects are connected to the bounding box field of their parent nodes; - We could use isPersistent() instead of isSet() to check for user input override (because isSet() doesn't tell you whether the user wrote down a value or not, but just whether or not the datafield has been modified. ANY call to beginEdit() basically sets the isSet flag to true... ); - We could leave the updateBoundingBoxVisitor as-is (except for swapping the isSet check for a isPersistent). Here would be the code:. ```cpp; // Bounding box update system proposal based on the updateCallback trackerEngines API:; // Making use of the persistent flag, if the bbox is given at component's creation (through an addObject call for instance, or manually edited through runSofa2), the bbox won't recalculate. DAGNode::doRemoveChild(BaseNode* c); {; [...];; removeUpdateCallback(""bbox_"" + c->getName());; }. DAGNode::doAddChild(BaseNode* c); {; [...];; addUpdateCallback(""bbox_"" + c->getName(), {&(c->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; for (auto object : this->object); 	bbox->include(object->f_bbox.getValue());; f_bbox.endEdit();; return sofa::core::objectmodel::ComponentState::Valid;; }, {&(f_bbox)});; }. DAGNode::doRemoveObject(BaseObject* o); {; [...];; removeUpdateCallback(""bbox_"" + o->getName());; }. DAGNode::doAddObject(BaseObject* o); {; [...];; addUpdateCallback(""bbox_"" + o->getName(), {&(o->f_bbox)}, [this]() {; sofa::defaulttype::BoundingBox* bbox = f_bbox.beginEdit();; if (!f_bbox.isPersistent()); 	bbox->invalidate();; for (auto child : this->child); 	bbox->include(child->f_bbox.getValue());; ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183:44,depend,depends,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-621885183,1,['depend'],['depends']
Integrability,"I have created a pull request with an initial working solution to this problem. I have updated the references to the unknown library _std::filesystem_ and rewrite them as namespace _fs_. Additionally, I have include the old headers for this library from its experimental version at **gcc-8**, so there is a possibility to use the correct ones depending on the compiler version it is used. I have created a pull request [#3994](https://github.com/sofa-framework/sofa/pull/3944).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019:343,depend,depending,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019,1,['depend'],['depending']
Integrability,"I have tried it in runSofa2 and it work like a charm and is actually a very useful warning (maybe we should add a line saying: ""to remove this warning message you need to ....""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/702#issuecomment-400499077:151,message,message,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702#issuecomment-400499077,1,['message'],['message']
Integrability,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:2,integrat,integrated,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721,2,['integrat'],['integrated']
Integrability,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:569,Message,MessageFormatter,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121,2,['Message'],['MessageFormatter']
Integrability,"I just added the performances tests... not very significant on ""classical"" scenes. So for the moment I suggest keeping the two version of DataContentValue<> but merge de PR to remove the dependency to DataTypeInfo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-910387440:187,depend,dependency,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-910387440,1,['depend'],['dependency']
Integrability,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:173,interface,interface,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851,2,['interface'],['interface']
Integrability,I just integrated your changes @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971:7,integrat,integrated,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1522#issuecomment-712304971,1,['integrat'],['integrated']
Integrability,I just took the liberty to change the commit message. Hope you don't mind :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/415#issuecomment-331914492:45,message,message,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/415#issuecomment-331914492,1,['message'],['message']
Integrability,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:778,message,message,778,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722,2,['message'],['message']
Integrability,"I ment using assimp to avoid redondency. Of course we need to keep the formats not supported by assimp! ; I do not understand exactly the package dependency problem, cmake can try to find the package if not dowload / compile / install it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286:146,depend,dependency,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286,1,['depend'],['dependency']
Integrability,I moved all changes related to `TopologicalMapping `into the PR #3428 for better clarity.; Therefor this one depends on this new PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3339#issuecomment-1291831058:109,depend,depends,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3339#issuecomment-1291831058,1,['depend'],['depends']
Integrability,I moved the checker code into RealGUI (to factorize code between all the viewers). ; One last small issue is that the message wont be raised on the CI...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346588377:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346588377,1,['message'],['message']
Integrability,"I personally never used neither fwdInit() nor bwdInit() and with implementations such as; ```cpp; // CollisionModel.h; virtual void bwdInit() override; {; getColor4f(); //init the color to default value; }; ```; I'd say it's most likely optional in most cases :); Plus it makes it much less likely to get a clean init when creating a component on the fly, except if you do the traditional and cumbersome init() / reinit() / bwdInit() routine...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-417004521:434,rout,routine,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-417004521,1,['rout'],['routine']
Integrability,"I prefer `false`. ; So probably the component won't be created and the scene might crash at creation or init with your error message. ; Otherwise the crash might happened later. Or worse, it will run with a wrong behavior. The second option is harder to debug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5075#issuecomment-2441068840:125,message,message,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5075#issuecomment-2441068840,1,['message'],['message']
Integrability,"I propagated SofaPython dep changes in more plugins.; I also added a few quick-cleans, see my nice commit messages to get the idea :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963:106,message,messages,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963,1,['message'],['messages']
Integrability,I really don't get the need for `nbOfMonomial` (Is not `listOfMonoMial.size()` sufficient?); It seems dangerous to keep them synchronized...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334134062:125,synchroniz,synchronized,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334134062,1,['synchroniz'],['synchronized']
Integrability,I removed the [ci-depends] as this PR must provide a compat layer (already done actually) not to break SofaPython3.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990764793:18,depend,depends,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2505#issuecomment-990764793,1,['depend'],['depends']
Integrability,"I removed the module from the `Sofa.Component.Mapping` dependencies. I also removed all the files from the module. And there is a warning message if someone uses the module. In conclusion, the module exists only to warn that it should not be used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2434537570:55,depend,dependencies,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070#issuecomment-2434537570,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"I see the benefit of having generic msg_xyz_when(cond) message, maybe they should be more general and not tied to a ""this"" pointer, like msg_xyz_when(sender, cond). In the component itself, I would rather see; component_msg_info() if (printLog) msg_info(this); with ""printLog"" data name updated; I also think ""warning"" and above (error...) levels should not depend on a flag; And last, I would call that flag ""msgInfoVerbose"" to better match what is a boolean flag name. here my 2 cents ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017:55,message,message,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278334017,2,"['depend', 'message']","['depend', 'message']"
Integrability,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:986,depend,depending,986,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943,2,['depend'],['depending']
Integrability,"I tested different scenarios:; If `ComponentA` is defined before `ComponentB`:. 1. A Data of `ComponentA` referring to a Data of `ComponentB` is not linked properly: the numeric value is not the right one, and Data that depends on the first Data are not updated accordingly.; 2. A Data of `ComponentB` referring to a Data that does not exist (and will not exist) does not warn the user. The link is created (pointing to nothing) with a default numeric value. Therefore, I suggest to restore the `else` statement with a warning to the user that the link does not have a parent. It seems that the case when a Data points to a Data that will be initialized later is not supported.; What do you think @damienmarchal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2211#issuecomment-872029650:220,depend,depends,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2211#issuecomment-872029650,1,['depend'],['depends']
Integrability,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:137,depend,dependending,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712,1,['depend'],['dependending']
Integrability,"I think the [depend-on] is used in the wrong ""direction"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239227595:13,depend,depend-on,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239227595,1,['depend'],['depend-on']
Integrability,I think this PR also add a huge speedup in term of compilation time and fix the include dependency graph. Many thanks Erik.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1976#issuecomment-812429239:88,depend,dependency,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1976#issuecomment-812429239,1,['depend'],['dependency']
Integrability,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:411,contract,contract,411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607,1,['contract'],['contract']
Integrability,"I totally agree with Damien.; Depending on the case, the comment should at least include the following informations:; - date of deprecation; - replacement method pointers. Furthermore, the deprecated method could issue a message on the console, to warn against its use.; In extreme cases, after a reasonable time delay, the method should not work anymore, just issue an error message with the previous informations. But as it is currently done in this example, nothing goes against its undiscontinued use in new pieces of code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233:30,Depend,Depending,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/272#issuecomment-301408233,3,"['Depend', 'message']","['Depending', 'message']"
Integrability,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:39,depend,dependencies,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473,4,['depend'],"['dependencies', 'dependency']"
Integrability,"I tried to at the Community Help:: Using Sofa, but I get this message. ![image](https://user-images.githubusercontent.com/5296582/83347681-2f9ad000-a344-11ea-972d-13af8256f792.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636437950:62,message,message,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402#issuecomment-636437950,1,['message'],['message']
Integrability,I updated (again) the CI jobs to ensure new dependency packs are installed.; I also launched a rebuild for Windows last builds.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317:44,depend,dependency,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292208317,1,['depend'],['dependency']
Integrability,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:22,message,message,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656,4,['message'],"['message', 'messages']"
Integrability,I was thinking again at this. It should definitively work...; Your BBox are overlapping such as the points on the interface are in both topology of the FEM ?; Are you sure TetrahedronHyperelasticityFEMForceField is using the edges? If yes could you try with a more commun TetrahedronFEMForceField with just diffrent your modulus.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2090328437:114,interface,interface,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2090328437,1,['interface'],['interface']
Integrability,"I would also recommand using a more ""reddish"" color for deprecation.; And move all deprecation warning as deprecation message :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573759432:118,message,message,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573759432,1,['message'],['message']
Integrability,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:57,synchroniz,synchronize,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576,2,['synchroniz'],['synchronize']
Integrability,I would not add a boolean because you would have a large number of tests in the case of a large mesh.; I would rather rename those functions and set them purely protected/private (then transforming them like utility methods for DrawToolGL). ; And then create other functions implementing the DrawTool interface (calling those private methods and glBegin(*)/glEnd calls),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856:301,interface,interface,301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856,1,['interface'],['interface']
Integrability,"I would vote for yes too. This has been discussed for a long time now. Online documentation is already updated to ""use your own Boost"".; Cleaning as much as possible Boost dependencies that are redundant with C++11 features is another topic in my opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230:172,depend,dependencies,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258135230,1,['depend'],['dependencies']
Integrability,I'm ok with the renaming but please make sure to add a WARNING in your commit message as it may break some algos for MultiThreading users.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308430717:78,message,message,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308430717,1,['message'],['message']
Integrability,"I'm pretty sure it's not a bug and it's located in an external dependency, thus not related to SOFA.; EDIT: it may be a bug actually, could you have a look @fredroy ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2108#issuecomment-853171833:63,depend,dependency,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2108#issuecomment-853171833,1,['depend'],['dependency']
Integrability,"I've put this PR in wip to avoid overloading the CI while you integrate all the comments. Once you've finished all the review, you can change the tag back to to review and then trigger the CI with the usual comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4679#issuecomment-2083052979:62,integrat,integrate,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4679#issuecomment-2083052979,1,['integrat'],['integrate']
Integrability,INFO MESSAGE: ; We are now updating the VS-2015 machine that are in charge of the the PRs. ; In case you detect any problem please report.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384:5,MESSAGE,MESSAGE,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-283613384,1,['MESSAGE'],['MESSAGE']
Integrability,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:294,message,message,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823,2,['message'],['message']
Integrability,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:14,message,message,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444,1,['message'],['message']
Integrability,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:44,protocol,protocol,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921,2,['protocol'],['protocol']
Integrability,"In that case why looking for '-' in `read`?; Note the `getUnsignedNumber` could have a signature imposing not to have a '-' in the input string. In `getUnsignedNumber`, the case where there is a '-' is the failing case, when we do not care about perfs (you create an error message , etc.), but in the good case, the one we should not disadvantage, I think it is preferable to check the strtoll sign rather than brassing strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797:273,message,message,273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302732797,1,['message'],['message']
Integrability,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:33,depend,dependency,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665,2,"['depend', 'integrat']","['dependency', 'integrate']"
Integrability,"Is there an Error message when loading the scene, telling that the mesh could not be found?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285:18,message,message,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285,1,['message'],['message']
Integrability,"It depends on your Qt version. The actual code is for Qt4 while removing QApplication::UnicodeUTF8 (like in your proposal) is for Qt5. A #ifdef should be added to check the Qt version. But what about renaming ""gridLayout"" in ""_14""?!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48#issuecomment-261490351:3,depend,depends,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-261490351,1,['depend'],['depends']
Integrability,"It is always the same problem, ; to reduce dependency between software components (header included in header) you may want to use forward declaration.; Such forward declaration allows to write code manipulating pointer or reference to the forwarded declared object. Not doing that requires to include the full definition of the manipulated class. Reducing the amount of edges in the dependency graph favor a good separation between software components, reducing compilation speed and reducing the need to recompile when something change. . D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704962809,2,['depend'],['dependency']
Integrability,"It is probably using the rest area since it is working with a Lagrangian formulation. This is also what we use in other FEM code (tetra and hexa) where the integral is computed on the rest (undeformed) domain. For linear elements (triangle, tetra), it will multiply the integrand with the initial volume (or area for triangle) to get the integral result over an element. For trilinear or higher degree elements, it will use Gauss integration points where derivatives of the shape function, and the determinant of the jacobian of the transformation matrix are computed at the initial (undeformed) domain. Kinematics quantities from the current state are transformed into the initial domain using a transformation matrix. . I would therefore think that the `TriangleFEMForceField ` is the ""good"" one in the sens that it is following the big majority of SOFA code with a Lagrangian formulation. . You could always compare the result against another FE software such as FEBio and FEnIcs which are free. I can help you with that if you want.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1063094133:430,integrat,integration,430,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1063094133,1,['integrat'],['integration']
Integrability,"It really appears as a proof of concept.This work will be very useful, especially regarding the recent discussion on matrix formats in SOFA relying on Eigen. Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template): Vec3 or Real. Let’s make it explicitly only for double. A test is also needed here (e.g. AbstractTypeInfo). We need in a future.a more generic way for other Eigen types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022:219,depend,depending,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022,1,['depend'],['depending']
Integrability,"It seems fine now.; Only the message does not appear yet, I get as long as the PR is not merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4079#issuecomment-1701791951:29,message,message,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4079#issuecomment-1701791951,1,['message'],['message']
Integrability,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:18,depend,dependency,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731,1,['depend'],['dependency']
Integrability,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:562,integrat,integration,562,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803,1,['integrat'],['integration']
Integrability,It took me time but I think I finally got the working of the collision responses stuff. As this PR change the way the component behave do you think it is possible to detect when a scene is using the old-style to print a warning message telling the users to update their scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181:228,message,message,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/91#issuecomment-265487181,1,['message'],['message']
Integrability,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:58,message,messages,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089,4,['message'],"['message', 'messages']"
Integrability,Just a note for the reviewers: SubsetMultiMapping was moved to SofaBaseMechanics for dependency reasons (but the problem will be solved in the new sofang architecture a priori),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1034734654:85,depend,dependency,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1034734654,1,['depend'],['dependency']
Integrability,Just in case someone have doubts:. **BaseContext.cpp** (line 172); ```cpp; /// Mesh Topology (unified interface for both static and dynamic topologies); core::topology::BaseMeshTopology* BaseContext::getMeshTopology(SearchDirection dir) const; {; return this->get<sofa::core::topology::BaseMeshTopology>(dir);; }. core::topology::BaseMeshTopology* BaseContext::getMeshTopologyLink(SearchDirection dir) const; {; return this->get<sofa::core::topology::BaseMeshTopology>(dir);; } ; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605872827:102,interface,interface,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605872827,1,['interface'],['interface']
Integrability,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:704,message,message,704,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942,1,['message'],['message']
Integrability,Just tested it on Windows and it's indeed a mess. | | QGLViewer | QtViewer |; | ----- | ----- | ----- |; | S key | - Opens a dialog to save a screenshot next to runSofa executable<br>- Opens a 2nd dialog for image settings<br>- Captures the viewer only<br>- Crashes if file exists | - Quietly saves a screenshot in the screenshots folder<br>- Captures the whole interface |; | Screenshot<br>button | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the whole interface<br>- Repeats 3 times | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the viewer only<br>- Repeats 2 times |. Which behavior is the right one? :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838:362,interface,interface,362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838,2,['interface'],['interface']
Integrability,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:572,message,message,572,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168,3,['message'],['message']
Integrability,Maybe warning and deprecated messages should not be seen as failure by default?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215:29,message,messages,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291901215,1,['message'],['messages']
Integrability,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:209,message,message,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263,1,['message'],['message']
Integrability,Message has been added by @marques-bruno looks good to me know.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666225397:0,Message,Message,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-666225397,1,['Message'],['Message']
Integrability,"Minor remaining change use pre processor #if condition instead of #ifdef (since it allows to detect more various cases: is defined and true, defined and false or undefined); CGAL : remove changes and integrate changes from #1308; → back to wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544:200,integrat,integrate,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281#issuecomment-607121544,1,['integrat'],['integrate']
Integrability,"Most probably another package is adding the includes for SofaBaseMechanics but not the library. . Actually, I have `SofaBaseMechanics` in my list of targets. ```; add_library(VNCS INTERFACE ${HEADERS}); target_link_libraries(VNCS INTERFACE; SofaCore; SofaBaseMechanics; SofaBaseTopology; Eigen3::Eigen; CGAL::CGAL; range-v3::range-v3; spdlog::spdlog; Eigen3::Eigen; nlohmann_json::nlohmann_json; ). add_library(VNCS2D SHARED ${SOURCES} ${HEADERS} ${PUBLIC_HEADERS}); set_target_properties(VNCS2D PROPERTIES PUBLIC_HEADER ""${PUBLIC_HEADERS}""); target_link_libraries(VNCS2D PUBLIC VNCS); ```. What I found when trying to workaround this is that the MechanicalObject was `extern` instantiated for the Vec2 and friends. I had to explciitely instantiate in my library.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216:180,INTERFACE,INTERFACE,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1752#issuecomment-780759216,2,['INTERFACE'],['INTERFACE']
Integrability,"My bad for Windows error, the dependency pack was updated too soon. #566 needs to be merged. In the meantime I restart your build with the old dependency pack ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900:30,depend,dependency,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900,2,['depend'],['dependency']
Integrability,"My point is that the discussion is not whether or not a PR can be breaking or not...because on that everyone agrees...the conclusion is that of course a PR can be breaking.; ; The real discussion is more on:; - how do we manage breaking change to avoid messing others code base and activity because of a sudden change. On that, please have a look at PR #329 ; - what kind of integration & merge flow we can have to facilitate merging of complex/changing PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097:375,integrat,integration,375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-315894097,1,['integrat'],['integration']
Integrability,"My take on this:. The CG solver should stay what it is: a linear solver. It should be up to the one using it (ODE solver) to set up the equations, both in LHS/RHS assembly, and application of _mechanical_ projections such as fixed constraints. The only projection a linear solver should make itself, in my opinion, is one that only depends on the shape of the system matrix itself, such as numerical ordering projections (AMD, metis, ...). Anything else made from ""contextual"" decisions (for example, mechanical constraints) should not be made by a linear solver.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2074#issuecomment-842071573:332,depend,depends,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2074#issuecomment-842071573,1,['depend'],['depends']
Integrability,"New library to factorize the functions that will be called for the tests of BaseMatrix.; Need the INTERFACE CMakeMake keyword to compile a ""header-only library"". Did you intend to add any further features/functions/codes in the PR @alxbilger ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390:98,INTERFACE,INTERFACE,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390,1,['INTERFACE'],['INTERFACE']
Integrability,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:105,protocol,protocols,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414,2,['protocol'],['protocols']
Integrability,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:96,message,messages,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232,5,"['Message', 'message']","['MessageBaseObject', 'MessageLoader', 'message', 'messages']"
Integrability,"No ""no-go"" message...so I assume this one is ok and will merge it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336393253:11,message,message,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336393253,1,['message'],['message']
Integrability,No need to this PR anymore...because it was for integration into stc5 branch. I will re-open a new one against master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072:48,integrat,integration,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072,1,['integrat'],['integration']
Integrability,"No problem, I just wanted to announce that I solved it, so devs don’t have ; to bother with it, I will add solution and close it when I get home. Have a nice day,; Michal. ---------- Původní e-mail ----------; Od: Alex Bilger ***@***.***>; Komu: sofa-framework/sofa ***@***.***>; Datum: 18.04.2024 09:38:09; Předmět: Re: [sofa-framework/sofa] Sofa compilation in provided docker ; (Issue ; #4656). "". Hey @majklost(https://github.com/majklost),. Could you add more details? Which target? Because it is already added here :; https://github.com/sofa-framework/sofa/blob/7ac489fdaaa782a0d3a86fd02cb046d; 59ca2d784/Sofa/GUI/Qt/CMakeLists.txt#L49; (https://github.com/sofa-framework/sofa/blob/7ac489fdaaa782a0d3a86fd02cb046d59ca2d784/Sofa/GUI/Qt/CMakeLists.txt#L49). Thanks. —; Reply to this email directly, view it on GitHub; (https://github.com/sofa-framework/sofa/issues/4656#issuecomment-2063222869); , or unsubscribe; (https://github.com/notifications/unsubscribe-auth/AO5ITU2OYXLGAPR3TOEC673Y55Z5VAVCNFSM6AAAAABGKDW75SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDANRTGIZDEOBWHE); .; You are receiving this because you were mentioned. Message ID: <sofa-; ***@***.***>. """,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4656#issuecomment-2063226493:1132,Message,Message,1132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4656#issuecomment-2063226493,1,['Message'],['Message']
Integrability,"No there are two, I've modified my first message, this one and the next one, but the real improvement is in the one you pointed exactly !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4324#issuecomment-1836385306:41,message,message,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4324#issuecomment-1836385306,1,['message'],['message']
Integrability,"Nope, nothing planned. I trust you guys for the cmake side. On Wed., Aug. 4, 2021, 11:06 Hugo, ***@***.***> wrote:. > New library to factorize the functions that will be called for the tests; > of BaseMatrix.; > Need the INTERFACE CMakeMake keyword to compile a ""header-only library"".; >; > Did you intend to add any further features/functions/codes in the PR; > @alxbilger <https://github.com/alxbilger> ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUH6LCJFLIWGUGITT3LT3D7J5ANCNFSM5BIERQAQ>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>; > .; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892979761:221,INTERFACE,INTERFACE,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892979761,1,['INTERFACE'],['INTERFACE']
Integrability,"Not really, but only because of my lack of understanding of these integration factors :-). I'm sure this PR is fine, I was just curious. Really looking forward to our next white board meeting !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738:66,integrat,integration,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-626135738,1,['integrat'],['integration']
Integrability,"Note to my future dummy-me: ; Dependency is present in CMakeLists but having it in Config.cmake.in propagates this dependency to downstream modules, unable to find tinyXML since it's linked privately :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138:30,Depend,Dependency,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138,2,"['Depend', 'depend']","['Dependency', 'dependency']"
Integrability,"Now that https://github.com/sofa-framework/sofa/pull/2165 is merged, I could remove the Data `optimizedForDiagonalMatrix` from the scenes. I confirm that the code goes to the right branch depending on the diagonal property of the mass matrix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-872033233:188,depend,depending,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-872033233,1,['depend'],['depending']
Integrability,"Now, each class has its own file. A unit test has been added. The error message is managed by a `Data<DisplayFlags>` (only if you include `Data[DisplayFlags].h`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1384992721:72,message,message,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1384992721,1,['message'],['message']
Integrability,"O] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12341,Message,Message,12341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['Message'],['Message']
Integrability,"Ok now it works, but I also need to gil-protect any module initialization that does python stuff, otherwise we get the (righteous) following error:. `Fatal Python error: PyThreadState_Get: no current thread`. and a segfault ensues. . On a related note, there really should be no naked (as in ""not wrapped in a proper `PythonEnvironment` method"") python call apart from bindings methods.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145:297,wrap,wrapped,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313618145,1,['wrap'],['wrapped']
Integrability,Ok so if the pr is just about wrong messages no need for test :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045:36,message,messages,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045,1,['message'],['messages']
Integrability,"Ok sorry my message was not totally clear. I meant, you check the option in the Node and it propagate the printLog to all child Node and their components.; So if you want all the printLog, you activate it in the root Node.; Just suggesting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853:12,message,message,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853,2,['message'],['message']
Integrability,"Ok, CImg seems to do the job as well.; The dependency is already in plugin image, we just need to move it back to SOFA (licence is compatible).; And then this one-header-only include will allow us to read jpeg.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759,1,['depend'],['dependency']
Integrability,"Ok, very nasty...; So I agree with your PR, we should not impose the `find_package(FFMPEG_exec)` to dependencies.; But it is not enough. We should clean this hardcoded path by installing the executable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862:100,depend,dependencies,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540045862,1,['depend'],['dependencies']
Integrability,Ok... Do we all consider that numpy is mandatory when using SOFA with python ? . It is just a question so that people are aware of that dependency. But I agree to remove the new implementation if less performant . Erwan will do it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217:136,depend,dependency,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/404#issuecomment-336471217,1,['depend'],['dependency']
Integrability,"On 14/02/2017 09:29, erik pernod wrote:; >; > closed?; >; unmerged...because it is minor and I have no time to understand why it ; does not compile... I will open it again one day...; But if you are willing to you can make it work in the meantime :). > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AMDyEmabTubGf2uk8Mg_N_ufzjqkfcLWks5rcWX-gaJpZM4L9dhW>.; >; > {""api_version"":""1.0"",""publisher"":{""api_key"":""05dde50f1d1a384dd78767c55493e4bb"",""name"":""GitHub""},""entity"":{""external_key"":""github/sofa-framework/sofa"",""title"":""sofa-framework/sofa"",""subtitle"":""GitHub ; > repository"",""main_image_url"":""https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png"",""avatar_image_url"":""https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png"",""action"":{""name"":""Open ; > in ; > GitHub"",""url"":""https://github.com/sofa-framework/sofa""}},""updates"":{""snippets"":[{""icon"":""PERSON"",""message"":""@epernod ; > in #169: closed?""}],""action"":{""name"":""View Pull ; > Request"",""url"":""https://github.com/sofa-framework/sofa/pull/169#issuecomment-279639584""}}}",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432:1179,message,message,1179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/169#issuecomment-279646432,1,['message'],['message']
Integrability,One (new) scene is failing: `SceneTests.applications/plugins/LMConstraint/examples.DOFBlockerLMConstraint.scn`; The error message is: ` [ERROR] [UncoupledConstraintCorrection(default67)] Cannot remove the requested constraint solver` ; It is possible that the scene itself was wrong but it is highlighted here because you add a msg_error(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940:122,message,message,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940,1,['message'],['message']
Integrability,"One component to rule them all, One component to find them, One component to bring them all, and in the printLog to flood the messaging system!. interesting remark @epernod : but could we be willing to have only the messages of the Node and not its content?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1193712985:216,message,messages,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1193712985,1,['message'],['messages']
Integrability,Open questions:; - do we set to activate by default (in classic mode or in interactive mode (-i option)); - any talented graphics designer could make a real button is welcome (but these ones are mine...so the license is DWYW => do waht you want) ; - do we want a better fix that do an in-depth cleaning that part of the code. There is a dependency to this rather harmless cleaning PR: https://github.com/sofa-framework/sofa/pull/3025,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3026#issuecomment-1162789750:337,depend,dependency,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3026#issuecomment-1162789750,1,['depend'],['dependency']
Integrability,"Other significant singletons:; - message mechanism (dispatchers/handlers),; - idFactory from timers; - Factories (contact, intersectors); - scheduling (TaskScheduler, registry); - scene loaders",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562569604:33,message,message,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562569604,1,['message'],['message']
Integrability,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:337,depend,depend,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769,3,['depend'],"['depend', 'dependencies']"
Integrability,"Quick summary:; Problem 1: ; Quaternion (when unnormalized) can be used to encode more than juste R3 orientation so we shouldn't force the normalization in the Quaternion operator>>().; We should have normalization detection and renormalization done only on object that we know for sure are R3 orientation. So to me the proper fix should be done in the operator>> of Rigid3Type. Problem 2:; About reporting warning to the users. This cannot be done in the Quater::normalize function. Because normalization is a perfectly valid operation to apply on an un-normalized quaternion and thus there is no meaning to report a warning. Actually it is like printing a warning when we are doing exactly what the function is supposed to do. . Now, the problem goes far beyond this PR as reporting error/exception is a complex issue in Sofa as we rely on 'message' instead of exception and C-style error handling vs exception vs printing (as in sofa) is an as old problem as c++ and in our code base all the approaches have been used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085:843,message,message,843,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085,1,['message'],['message']
Integrability,"Ready, merge if CI validates it. An issue should be open to point the dependency on the deprecated SofaGraphComponent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3302#issuecomment-1253446110:70,depend,dependency,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3302#issuecomment-1253446110,1,['depend'],['dependency']
Integrability,Regarding last review comments (as I'm not sure to be there for the next review):. - I would like to remove those header directly... do we have to go through the 6 months of deprecated before... ?; - Do you want me to put keep empty headers with the SOFA_DEPRECATED_HEADER macro? ; - I would keep the xxxSetGeometryAlgorithms and not put everything inside xxxSetTopologyXXX because the name Geometry make sense here to indicate we depend on the type of dof (aka mechanicalObject). Tests and scenes have been updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633:431,depend,depend,431,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633,1,['depend'],['depend']
Integrability,"SOFA dev meeting: @guparan will investigate a cleaner backward compatibility.; If no other, message warning user explaining which option to activate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624647049:92,message,message,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624647049,1,['message'],['message']
Integrability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:609,depend,dependency,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,2,['depend'],['dependency']
Integrability,"Scene angularSpringForceField.scn throws an error, related to the message you just added @epernod ; Is this normal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830:66,message,message,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1448#issuecomment-676050830,1,['message'],['message']
Integrability,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:28,message,message,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535,6,['message'],['message']
Integrability,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:595,depend,dependent,595,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143,2,['depend'],['dependent']
Integrability,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:369,depend,depends,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019,2,['depend'],"['dependency', 'depends']"
Integrability,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:336,message,message,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176,1,['message'],['message']
Integrability,"Similar feature is merged for the ConstantForceField in [#3924](https://github.com/sofa-framework/sofa/pull/3924). It adds separate callbacks for each data but a hacky flag allows to avoid data cross-dependency by de-activating all inputs non-set at the initialization. It could be done here as well but a more robust implementation (Data, callback) could be found. Add a unit test to make sure that no data cross-dependency is triggered. Manual test as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2034213815:200,depend,dependency,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2034213815,4,['depend'],['dependency']
Integrability,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:421,integrat,integration,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106,2,['integrat'],['integration']
Integrability,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:106,Message,Message,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802,2,['Message'],"['Message', 'MessageDispatcher']"
Integrability,So i pass this PR to read ? . Edit: if if the component should work then the correct way to emit the message is msg_warning instead of a msg_error.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/367#issuecomment-324286208:101,message,message,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367#issuecomment-324286208,1,['message'],['message']
Integrability,"So it's done. That answers my question. On Mon, Jan 23, 2023, 21:14 Hugo ***@***.***> wrote:. > Sorry I do not get the question @alxbilger <https://github.com/alxbilger>; > Here it's the ChangeLog for v22.06 is already available here :; > https://github.com/sofa-framework/sofa/blob/master/CHANGELOG.md#v220600; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/3573#issuecomment-1400919780>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUB5KC7PSWLPY7AYYSTWT3RBZANCNFSM6AAAAAATVQHW2U>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3573#issuecomment-1400962682:631,Message,Message,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3573#issuecomment-1400962682,1,['Message'],['Message']
Integrability,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:97,depend,dependencies,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358,2,['depend'],['dependencies']
Integrability,"So,; 1) there is no reason to have helper::ArgumentParser in SceneLoaders because a loader (py, scn, etc..) shouldn't be connected in any way to the command line (which is an user interface aspect), especially one relying on a static global object as ArgumentParser. ; 2) it make sense to load a scene with specific parameters...so having an array with scene specific parameters is in the load function seems sounded. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113:180,interface,interface,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-486584113,1,['interface'],['interface']
Integrability,"SofaConstraint links with SofaImplicitOdeSolver, which links with Sofa.Component.ODESolver.Backward, which links with SofaSimulationCore. Isn't the dependencies transferred in this case?. I launch a full build, just in case.; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1031474078:148,depend,dependencies,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1031474078,1,['depend'],['dependencies']
Integrability,"Some functionalities introduced by this PR looks redundant to the existing printLog data, and can replace it with great advantage. Moreover, the current usage of this printLog data varies from one component to an other, and could be cleaned in the same time.; Maybe a sdebug stream (in addition to sout, serr) could be introduced to cover some of the misusage of the printLog data.; Initially, printLog is to print or not the component messages to the standard output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447:436,message,messages,436,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276617447,1,['message'],['messages']
Integrability,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:236,message,message,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510,1,['message'],['message']
Integrability,"Some references:; - https://en.wikipedia.org/wiki/Dataflow_programming; - Blender's node co-exists with Blender SceneGraph https://docs.blender.org/manual/en/dev/editors/node_editor/introduction.html#interface (node is only for the shading... but object modifier on the geometry is using a ""stack"" based approache to express a linear relationship). ; - https://solarianprogrammer.com/2012/10/17/cpp-11-async-tutorial/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367286961:200,interface,interface,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367286961,1,['interface'],['interface']
Integrability,Sorry I didn't see the dependency SofaImplicitField -> SofaDistanceGrid.; Let's merge this right away.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/593#issuecomment-366641383:23,depend,dependency,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/593#issuecomment-366641383,1,['depend'],['dependency']
Integrability,"Sorry I should have given more details. The move I suggest is something that was around for quite a while now. I think it was suggested by @damienmarchal first. The legacy conditionally compiled code, mainly in SofaCUDA but it applies everywhere, is a bad practice for the following reasons:; - It is nearly impossible for the user to know what components are included in the conditionally compiled module. It would require a complex documentation to inform the user, which is not done for SofaCUDA.; - Testing becomes more complex. It's challenging to ensure that all possible combinations of conditions are thoroughly tested, increasing the risk of undetected bugs. See https://github.com/sofa-framework/sofa/pull/4227 for example.; - Other plugins (for example SoftRobots) cannot add their own CUDA components into SofaCUDA. So it's not true that all components are in the same plugin. We also have the example of the GPU-based solvers. What I suggest is to keep the cpu-based plugin, and create a new plugin for the gpu-based components. It would be applied to all plugins that are a conditional dependency in SofaCUDA (so not the `Sofa.Component.*` modules), not only `VolumetricRendering`. This PR is an illustration of the move of one particular plugin, but it should be generalized. The goal of the PR is also to approve the move, but also the folder architecture. If we can agree on an architecture inside the SOFA codebase, we can also apply it in external plugins (such as SoftRobots or MOR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900:1100,depend,dependency,1100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900,1,['depend'],['dependency']
Integrability,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:160,depend,dependency-pack,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284,2,['depend'],['dependency-pack']
Integrability,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:181,depend,dependencies,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346,1,['depend'],['dependencies']
Integrability,Super good initiative!. - these message handler should replace existing buffers. They should be removed because handling history with an handler is a way better idea. But the distributed gui should then use this new mechanism to print log history in the component widgets. - please stop adding Data in Base!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106:32,message,message,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106,1,['message'],['message']
Integrability,"TODO: resolve conflict then merge; Do not forget to add ""every code linking to those two modules will have to add the appropriate find_package"" to commit message.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/668#issuecomment-405845841:154,message,message,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-405845841,1,['message'],['message']
Integrability,"TODO:; - ~~check removed functions and insure compatibility layer~~; - ~~new creation mechanism of GravityForceField~~; - ~~self, GravityForceField checks if one is already here~~; - ~~have a callback and save the norm : if 0 exit all loops~~; - ~~what happens if no mass for GFF~~; - ~~update dates in messages (v22.12 -> v23.12)~~; - ~~update PR description~~; - test when a node is added. One issue remains in my tests :; - simulation starting without gravity, and then gravity is added; - mass added using python, since no init, the link in GravityForceField to the local mass is no performed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1238134724:303,message,messages,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1238134724,1,['message'],['messages']
Integrability,"Take a look at the removed overload. ; ```; SetDirectory::SetDirectory(const std::string& filename); {; SetDirectory(filename.c_str());; }; ``` ; is not valid object creation.; It is both wrong and unneeded. As for the link with #992, latest message mention failing tests, which are due to the aforementionned bug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712:242,message,message,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712,1,['message'],['message']
Integrability,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:99,message,message,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059,2,['message'],['message']
Integrability,Thank Mr tablot for cleaning message. . I like this small but yet usefull PR. ; I have added some suggestions to improve your PR a bit.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/503#issuecomment-342960849:29,message,message,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-342960849,1,['message'],['message']
Integrability,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:636,integrat,integration,636,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148,4,['integrat'],"['integrate', 'integration']"
Integrability,"Thank you :); 1. totally doable, and would in fact be the preferred way of ensuring smooth transition rather than complicating the c++ side; 2. I suspect my proposal has a memleak due to a GC cycle: ; - the python instance wraps and holds a ref to the c++ object, which in turns holds a ref to the instance.; - most likely we want the c++ object to hold a weakref to the python object, but i'm not very familiar with them (yet); - the previous approach had it too, if I'm not mistaken: `wrapper object -> c++ object -> control object -> c++ object` so by fixing it we kill two birds with one stone; 3. will do; 4. how?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368:223,wrap,wraps,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305549368,2,['wrap'],"['wrapper', 'wraps']"
Integrability,"Thank you @damienmarchal :-); It would be better to create the integration branch with these commits instead of merging in master, don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357:63,integrat,integration,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357,1,['integrat'],['integration']
Integrability,"Thank you @fredroy and @alxbilger for the quick response on this issue!. I cherry-picked your merged commit [3f59ca7] from sofa/master into my local branch based on sofa/v21.06, this issue still happens to me as before. I actually don't see any ERROR messages in the sofa console when I change mouse to attach-using-bilaterial-constraint mode and try to grasp the caduceus.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2495#issuecomment-976154055:251,message,messages,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2495#issuecomment-976154055,1,['message'],['messages']
Integrability,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:88,message,message,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289,4,['message'],['message']
Integrability,"Thanks @fredroy for the PR which address a legitimate concern. The problem adressed by the PR is often seen in SOFA's base classes where a parent class is having virtual function defined to print ""no implemented"" (or to print nothing). In general this pattern can be considered as a good code smell often related to some violation of SOLID's principle (eg: Liskov Substition Principle). The proposed solution of moving functions in a separated object is going in the right direction (as pointed by @alxbilger by segregating the intefaces). But it is unclear to me if the implementation proposed in the PR is enough because:; - having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"", ; - using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... ; - the implementation in BTD also looks highly suspicious with:; - plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; - a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937:701,interface,interface,701,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937,1,['interface'],['interface']
Integrability,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:30,message,messages,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967,4,['message'],['messages']
Integrability,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:629,rout,routine,629,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910,2,['rout'],['routine']
Integrability,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:164,depend,depends,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641,2,['depend'],['depends']
Integrability,Thanks a lot for your contribution @dennis2society ; Last check using the MacOS continuous integration. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4198#issuecomment-1746423490:91,integrat,integration,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4198#issuecomment-1746423490,1,['integrat'],['integration']
Integrability,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:493,integrat,integration,493,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209,2,['integrat'],['integration']
Integrability,Thanks erwan for the test.; The warning is also there in release. Maybe the problem is specific to Thomas application. ; Each application has to define and set-up its way to handle the messages. Have a look in runSofa on how it is one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201:185,message,messages,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201,1,['message'],['messages']
Integrability,"Thanks for pointing the issue...we should fix it rapidely... Now your question...; The short answer is no. . The long answer, ; I have never looked at this part of the code but my assumption is that, when SVector was introduced, it would have cost time to fix the whole code base & scenes & offer backward compatibility so SVector was implemented and used in some component without unifying the whole code base. This decision breaks the interface consistency which have very concrete drawback for users (some arrays use one syntax, others use a different syntax and there is no way to know which syntax need to be used) and for developpers as we now have to cope with two interfaces in our re-factoring. A quick fix, should be to check that the underlying object on which we are passing the array can understand the old array syntax or the python-like syntax. . Fixing all that will take time...this is the problem with technical debt.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531:437,interface,interface,437,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-312863531,2,['interface'],"['interface', 'interfaces']"
Integrability,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:173,integrat,integrate,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797,1,['integrat'],['integrate']
Integrability,"Thanks for the answers, I moved them to the PR description. . ""This work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. "" ; I searched in the issues and PRs if there was ever any debate on that topic so that I could provide a link in the description but I didn't found one. Maybe you are referring to face to face discussions ? If this was the case maybe writing a summary of these debate (pro/cons) would be very informative and helpful for all of us. . ""depends on the meaning of breaking""; In general we are considering the following:; - a PR is non breaking if its merge will be un-noticeable for people that don't care of the added feature. ; - a PR is breaking the scene if, after the PR, *any* scenes that was working before is not working anymore. ; - a PR is breaking the API if *any* plugin compiling with master is not compiling anymore after the PR. . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159:536,depend,depends,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159,1,['depend'],['depends']
Integrability,"Thanks for the reply @damienmarchal ; Error of link apparently is remaining. I guess that SofaGeneralExplicitOdeSolver and SofaGeneralImplicitOdeSolver which were depending on SofaSimulationTree, had also a dependency to the SofaSimulationTree's dependency: SofaSimulationCommon",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292:163,depend,depending,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1664#issuecomment-745947292,3,['depend'],"['dependency', 'depending']"
Integrability,"Thanks for the review @alxbilger, @epernod. I integrated your remarks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3020#issuecomment-1150340086:46,integrat,integrated,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3020#issuecomment-1150340086,1,['integrat'],['integrated']
Integrability,"Thanks for the review @alxbilger,. I integrates your comments.; More generally do you have any opinion on how we could improve the exceptions/component error in Sofa ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2344#issuecomment-927720383:37,integrat,integrates,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2344#issuecomment-927720383,1,['integrat'],['integrates']
Integrability,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:169,message,messages,169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967,2,['message'],['messages']
Integrability,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:184,integrat,integration,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673,1,['integrat'],['integration']
Integrability,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:316,message,messageTypePrefixes,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748,4,['message'],"['messageTypeColors', 'messageTypePrefixes', 'messages']"
Integrability,"That is to say, I need to download the source of the sofa in the docker container (/home), then compile the sofa according to the regular instructions based on dependencies in the docker",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758040613:160,depend,dependencies,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758040613,1,['depend'],['dependencies']
Integrability,That's what I call an explicit message :smile: :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2638#issuecomment-1027689128:31,message,message,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2638#issuecomment-1027689128,1,['message'],['message']
Integrability,The Data constraintForces is used to provide the intensities of constraint forces in the simulation. We use the constraint forces as the approximation of real contact forces. We use this Data to provide contact information for the catheter insertion. The user can easily check the constraint forces from the GenericConstraint component interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/840#issuecomment-443204446:336,interface,interface,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-443204446,1,['interface'],['interface']
Integrability,"The PR looks good, though I wonder whether we could use the abstract sequence protocol instead of the concrete list type. This way we could use numpy vectors directly for instance. The warning message will quickly become annoying, so maybe put it behind proper `#ifdefs`. @matthieu-nesme any thought?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177:78,protocol,protocol,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306500177,2,"['message', 'protocol']","['message', 'protocol']"
Integrability,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:165,message,message,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648,1,['message'],['message']
Integrability,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:337,depend,dependencies,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144,1,['depend'],['dependencies']
Integrability,"The advantage of a component specific macro/stream (like sdebug to stay in the current spirit) would be to automatically add the component as the ""sender"" of the message. ; Which is BTW required by the gui to get and display messages coming from a given component. . ----- Mail original -----. > De: ""Matthieu Nesme"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 2 Février 2017 14:18:28; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > I think that it is a good idea to treat the overall pb, not to miss; > something. > * removing msg buffers from Base; > * removing printLog Data (but reading it from a parse function for backward; > compatibility.; > * no need for sdebug, you can directly use msg_debug (or whatever). serr/sout; > can be kept not to become crazy, but no need to add more.; > * It should be powerful enough to move some of the Data you added in Base; > directly in the msghandler (and set more globally these parameters).; > * updating the gui to use the new msghandler buffers. > Something else ?. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614:162,message,message,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276982614,3,['message'],"['message', 'messages']"
Integrability,"The approach proposed by matthieu sounds ok to me. ; I strongly support the ""W/o forgetting the deprecated message"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/21#issuecomment-254796313:107,message,message,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-254796313,1,['message'],['message']
Integrability,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:41,message,messages,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062,1,['message'],['messages']
Integrability,"The current approach increments the counter of the componentState data to track when a message is received by a component so that the GUI can update accordingly by setting itself as an output of the componentState data. **TODO**: use the counter of a new generic data as the componentState does not seem a fine-enough level to be able to track and differentiate properly message reception, real change of state etc. Outsourcing the messaging outside the component in a singleton could be the solution : the GUI could then connect to this singleton for any message-related information/update, while connecting to the components for a status information/update. @damienmarchal might propose an alternative approach",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2398#issuecomment-953195106:87,message,message,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2398#issuecomment-953195106,3,['message'],"['message', 'message-related']"
Integrability,"The file `DisplayFlags.h` contained 3 classes. Now each class has its own specific file. Unit tests on DisplayFlags are added. In my previous proposition, I added an error message when a flag was unknown, and giving suggestions for closest matches. This error message was put directly when reading the flags as a string in the `FlagTreeItem` class. Now, the `FlagTreeItem` triggers the error message, but the function to trigger, including the code for the message, is now in `Data<DisplayFlags>`. Since `Data<DisplayFlags>` is a template specialization that is put in `Data[DisplayFlags].h`, you need to include `Data[DisplayFlags.h]`. If you do that, the owner of the `Data<DisplayFlags>` will know an error happened. Therefore, it will have an error icon in the GUI and the user can consult the errors in the GUI. Before, the component was not aware.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1385224169:172,message,message,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1385224169,4,['message'],['message']
Integrability,"The problem comes from the compilation of SofaPython3. In particular, it is related to one of its dependency `pybind11`. It is missing from your computer.; I recommend you to read the documentation: https://sofapython3.readthedocs.io/en/latest/menu/Compilation.html. You must install pybind11.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486749758:98,depend,dependency,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486749758,1,['depend'],['dependency']
Integrability,"The problem with the approach to have a name helper in each Node is that the Node must exist before using it. And it's not the case in the XML loader. A name is required before the object creation, and no Node is available at that time. Therefore, I used a single name helper inside the XML loading for all the components. In this case, the counter suffix does not depend on the Node. A problem with this approach (other than it's not consistent), Nodes' counters are not updated...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028170905:365,depend,depend,365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2631#issuecomment-1028170905,1,['depend'],['depend']
Integrability,"The problem with this function is that you cannot trust the returned value forever due to pointer invalidation. `std::vector` allocates dynamically the memory depending of the need. At creation, it allocates a small chunk of memory. If the memory is full when you try to insert an element, it will allocate a bigger chunk of memory and move everything in this new memory space. Everything that was in the previous memory space is invalidated. It stills points to something, but it is invalid. And using it leads to a crash. I made a small example on godbolt of this situation: https://godbolt.org/z/aqec8Krzo. You can see that the result of `data()` is invalidated after elements insertions. Conclusion: your solution is better than the previous. But this function must be used appropriately.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1328698963:159,depend,depending,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1328698963,1,['depend'],['depending']
Integrability,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:186,integrat,integrating,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,2,['integrat'],"['integrating', 'integration']"
Integrability,"The rational of the PR is sounded and the existing design in sofa that mix the base class with a kind of hardcoded singleton/registry is bad and should be refactored (thank for the PR so). . From my experience the refactoring step in such situation depends if the static part is actually implementing kind of singleton or a kind registry of instances. But in both case the refactoring consists in moving all the static methods and static attributes in a new class with the sole purpose of handle the registry/singleton. . In your PR you are moving the static method and the singleton into TaskSchedulerFactory. ; If found using ""factory"" is confusing as to me a factory's roles (and design pattern) is to map to different construction methods and not holding the created instances. In order to keep the registry separated from the factory part I recommend keeping the two concerns separated in different classes. . To me a clean layout separating implementions and concerns is the following:; ```cpp; class TaskScheduler {}; // The base class for a scheduler; class TaskSchedulerRegistry:: {}; // The class implementing a registry of taskschedulers; class TaskSchedulerFactory:: {}; // The class implementing a factory for taskscheduler; class MainTaskSchedulerRegistry::{}; // The ""static"" class which contains a singleton of a TaskSchedulerRegistry ; // and public static methods to manipulate it (with mutex in each of them) ; class MainTaskSchedulerFactory::{} // The ""static"" class which contains a singleton of a TaskSchedulerFactory; // and pubic static methods to manipulate it. ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905:249,depend,depends,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905,1,['depend'],['depends']
Integrability,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:185,message,message,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814,1,['message'],['message']
Integrability,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:205,Message,MessageDispatcher,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603,5,"['Message', 'message']","['MessageDispatcher', 'message']"
Integrability,"The unit tests on the StaticSolver failed because the Metis permutation using the Eigen API did not give the same result than the Metis permutation that was implemented before. This is intriguing... But the most concerning problem is that the result of the linear solver depends on the permutation. Hopefully, it is only a problem of numerical errors. Afterall, the operations are not the same depending on the permutation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1895627928:271,depend,depends,271,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1895627928,2,['depend'],"['depending', 'depends']"
Integrability,"The warning will be annoying but changing the behavior of a core function without warning users is also very problematic. . I see several option to control this message: ; - adds an optional parameter to the createObject function so that for a transitional period a warning is printed but people can remove the warning by calling createObject(..., silentConversion=true). After some time we set the silentConversion to true by default. ; - develops a complete system to handle API change in sofa to control the warnings we want to emit; eg: ; ```cpp ; runSofa -Wno-api-change vs runSofa -Wapi-change; ```; And something like that in the code; ```cpp ; msg_info_when( SofaPython::ReportAPIChange ) << ""Blah balh""; ```. Other approaches ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306513969:161,message,message,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306513969,1,['message'],['message']
Integrability,"Then I will change the CMakefiles in SofaKernel to remove useless dependencies.; Note that the CImgPlugin does not have a hard dependency on libpng (and zlib). If it does not find `libpng`/`zlib`, it will just not be able to read png files. So even if CImgPlugin is inside SofaKernel, `libpng `and `zlib ` wont be necessary.; (for now, CImgPlugin is searching for `libpng `for PNG, `libjpeg `for JPEG, `libtiff `for TIFF, and can load BMP files without any deps. It would be possible to read other kind of files with imagemagick but I dont consider it necessary)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344:66,depend,dependencies,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281641344,2,['depend'],"['dependencies', 'dependency']"
Integrability,There is PR in SofaPython3 to keep synchronized with this PR. ; https://github.com/sofa-framework/SofaPython3/pull/133,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810923695:35,synchroniz,synchronized,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1878#issuecomment-810923695,1,['synchroniz'],['synchronized']
Integrability,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:75,message,messages,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868,1,['message'],['messages']
Integrability,There is also a big challenge connected to deprecating/SofaNG and moving component. It is cutting the edge in the dependency graph. Some edge are of course legitimate...but for plenty of them this is the result of either:; - putting method definition in headers (which thus require the include of used components); - required for template instantiation. This make every code change a real nightmare.So buy a chainsaw and submit PR to cut into this forest of dependencies (again it is better to locate the object that are easily fix).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779:114,depend,dependency,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332342779,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Thinking about it again, Intel(R) UHD Graphics is not a cuda capable device, so it will not be used for computation (rendering maybe?). What's the content of DEVICE_ID and DEVICE_NAME in the log message `CUDA: Using device DEVICE_ID : DEVICE_NAME`?; What do you use to measure the performances?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884754342:195,message,message,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884754342,1,['message'],['message']
Integrability,This PR depends on https://github.com/sofa-framework/sofa/pull/734 and https://github.com/sofa-framework/sofa/pull/732,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-408805889:8,depend,depends,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-408805889,1,['depend'],['depends']
Integrability,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:129,integrat,integrate,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624,2,['integrat'],['integrate']
Integrability,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:499,message,messages,499,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834,1,['message'],['messages']
Integrability,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:329,message,message,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790,1,['message'],['message']
Integrability,"This PR makes me think that msg_info() << ""message"" is in fact something like:; ```cpp; if(notMuted(Base*)); info::queue << ""message""; ```; With notMuted implemented like that:; ```cpp; Base::noMuted() ; { ; f_printLog().getValue(). ; }; ``` ; ; So either we don't use msg_info in loops (which is a good idea by the way, but not easy to track and enforce in our code base) or we reduce the cost of notMuted by using internal caching of the state.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1277432848:43,message,message,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1277432848,2,['message'],['message']
Integrability,"This bug is fixed. . Fundamentally the problem is that when there is not topology associated to the force field a warning message is printed...but the draw function is still working ""as"" if there were.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/79#issuecomment-264580165:122,message,message,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/79#issuecomment-264580165,1,['message'],['message']
Integrability,This feature was already integrated directly into the two (lagrangian) ConstraintSolvers so this component is a bit superfluous. Closing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3294#issuecomment-1710899770:25,integrat,integrated,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3294#issuecomment-1710899770,1,['integrat'],['integrated']
Integrability,"This is a comment from @damienmarchal in #413 about deprecation task; __________________________________________; To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181:975,integrat,integrate,975,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181,1,['integrat'],['integrate']
Integrability,"This is how `Rigid` behaves, so I would agree. But really, coordinate transformations should go in Engines/Mappings where they can be performed in any order depending on what the user needs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969:157,depend,depending,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/259#issuecomment-303325969,1,['depend'],['depending']
Integrability,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:166,integrat,integration,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969,1,['integrat'],['integration']
Integrability,This sounds nice and mandatory...I'm looking how did the inversion of dependencies. EDIT: ok i saw,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787941292:70,depend,dependencies,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-787941292,1,['depend'],['dependencies']
Integrability,This was already fixed by #4227 making the dependency to GUI more explicit and not required. (see original line 333-342 and 509-516),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4312#issuecomment-1820876626:43,depend,dependency,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4312#issuecomment-1820876626,1,['depend'],['dependency']
Integrability,Those Configurations are also meant to be used by the CI to easily set the type of build. The full build will be the one used for PR and Releases. While plugin will be deactivated by the bash script depending on the installed dependencies on the OS.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645:199,depend,depending,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645,2,['depend'],"['dependencies', 'depending']"
Integrability,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:54,message,message,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033,2,['message'],['message']
Integrability,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:848,message,message,848,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,4,['message'],['message']
Integrability,To close this issue: what is expected is a message in `XX2XXTopologicalMapping` which checks whether the input topology includes the appropriate container,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3201#issuecomment-1251440322:43,message,message,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3201#issuecomment-1251440322,1,['message'],['message']
Integrability,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:694,interface,interfaces,694,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['interface'],['interfaces']
Integrability,"To inverse the dependency the registering should be moved into image.cpp; ```cpp; #ifdef SOFA_WITH_MULTITHREADING. int DataExchangeClass = core::RegisterObject(""DataExchange""); .add< DataExchange< sofa::defaulttype::ImageUC> >(); .add< DataExchange< sofa::defaulttype::ImageUS> >(); .add< DataExchange< sofa::defaulttype::ImageF> >();. #endif // SOFA_WITH_MULTITHREADING; ```. About the @fspadoni's answer I think that template can be instantiated as long as the template definition is #included (the .inl or the .h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-422710552:15,depend,dependency,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-422710552,1,['depend'],['dependency']
Integrability,"To me loading textures and logos is not a core functionality of a physics library, so I would vote for not putting it in SofaKernel. What is important is that this removes the dependencies to `zlib` and `libpng` from sofahelper, correct ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942:176,depend,dependencies,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942,1,['depend'],['dependencies']
Integrability,"To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965:861,integrat,integrate,861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-332496965,1,['integrat'],['integrate']
Integrability,"Too bad, I was just searching for this feature and discovered it was not integrated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1164402707:73,integrat,integrated,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1164402707,1,['integrat'],['integrated']
Integrability,Tracy integration in https://github.com/sofa-framework/SofaGLFW/pull/89,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1765861726:6,integrat,integration,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1765861726,1,['integrat'],['integration']
Integrability,Update the FIX but now this PR depends on change done in PR #2870,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1098890010:31,depend,depends,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1098890010,1,['depend'],['depends']
Integrability,"Very nice work @Wall-E-76 ! Impressive !; Thank you very much, let's wait the continuous integration !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823:89,integrat,integration,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1116#issuecomment-516328823,1,['integrat'],['integration']
Integrability,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:82,interface,interfaces,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178,2,['interface'],"['interface', 'interfaces']"
Integrability,We have a branch with our work on https://github.com/mimesis-inria/sofa/tree/wip_pythonAdvancedTimer; We try to create a class which wrap the advanced timer and that can be binded using Python... without success so far.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316434058:133,wrap,wrap,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316434058,1,['wrap'],['wrap']
Integrability,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:71,message,message,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188,2,['message'],['message']
Integrability,"Well after a quick look in the scene you provided:. I'm not surprised the BarycentricMapping is not able to work . . Let's me explain: ; - Object.DoFs is of type Rigid3d; - Object.Mechanical model.collisionDofs is of type Vec3d. What your are specifying by setting the input & output field of BarycentricMapping is that you are driving the collisionDofs(type Vec3d) from the one from the one of type Dofs(type Rigid3). So the corresponding mapping should be Rigid3d, Vec3d (an not Vec3d, Rigid3d). ; The possible available templates shows that this is not supposed to work, because a BarycentricMapping can only have Vec3 as input. Overriding the template values with one that exists in BarycentricMapping will not work because this will lead to a mismatch between the input/output types and thes type manually set in the template. . Now about the BeamLinearMapping...the situation is a bit different. There is a valid template from Rigid3 to Vec3. This is why:; ```xml; <BeamLinearMapping template=""Rigid3d,Vec3d""/>; ```; And; ```xml; <BeamLinearMapping""/>; ```; Work the same. ; You get an error in your case because there is a typo ""@collisionDOFs"" instead of ""@collisionDoFs"".; ; Now I have no idea why the BeamLinearMapping is not working as you expect:; - maybe there is a real issue there ? . NB to anyone:; It would be nice to have PRs to improve the error messages as they are mis-leading.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297:1365,message,messages,1365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487545297,1,['message'],['messages']
Integrability,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:281,integrat,integrated,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245,1,['integrat'],['integrated']
Integrability,"Well, the message sounded like ""you have to add an epsilon value"" 🙄 . I let @raffaellatrivisonne do her job here for now on... good luck",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338692184:10,message,message,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338692184,1,['message'],['message']
Integrability,"Well, today the long name is the returned string. And it does not depend on this PR. Look at the unit tests I added:. ```cpp; EXPECT_EQ(sofa::defaulttype::DataTypeName<float>::name(), ""f"");; const auto object = sofa::core::objectmodel::New<DefaultTemplate1<float> >();; EXPECT_EQ(object->getTemplateName(), ""float"");; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3461#issuecomment-1307402013:66,depend,depend,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3461#issuecomment-1307402013,1,['depend'],['depend']
Integrability,"What I would suggest :; 1. add big visible warnings generated in load() or parse() if `filename` is not empty, stating that this direct loading feature is deprecated as it is redundant with the `MeshXyzLoader` components and will be removed SOON. Bonus point if the warning message show the equivalent xml or python syntax to instantiate the corresponding component and link it.; 2. add an entry in the changelog saying this is now deprecated and will be removed SOON; 3. wait about a year; 4. then finally remove both these methods and the associated `sofa::helper::io::*` classes. It's long in calendar time, but quick and easy in term of code changes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546:274,message,message,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/118#issuecomment-271674546,1,['message'],['message']
Integrability,What happens if you forget the required plugins in the ci-dependent PRs?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2371015362:58,depend,dependent,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2371015362,1,['depend'],['dependent']
Integrability,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:78,message,message,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209,1,['message'],['message']
Integrability,Why not using the normal git submodule for this one?; It won't be linked to cmake config/build. Just like downloading the source code and its dependencies when you clone the repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252:142,depend,dependencies,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252,1,['depend'],['dependencies']
Integrability,"With the help of @guparan with made a few :) changes to this branch. To summarize:; - we made all changes I listed above to remove dead or unrelated code; - since the messages were not very helpfull, all the remaining commits were squashed in a single one which is the contribution. cgogn is for now an external dependency and has to be checkouted manually in the extlib directory in order to compile the branch. We have to discuss a way to do it automatically (maybe an ExternalProject_Add ?). After a quick check, this proposal is compatible with the last commit of the cgogn devel branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559:167,message,messages,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559,2,"['depend', 'message']","['dependency', 'messages']"
Integrability,"Wouldn't it be better if implemented in VisualStyle which is kind of our user interface instead of DisplayFlag ? ; This would also allow to use msg_error() instead of msg_error(""Blahblah)...(independently, i would say that msg_error(""String) version should always print something, unless the logging backend is not registerd).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873:78,interface,interface,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873,1,['interface'],['interface']
Integrability,"Wow, very old issue. Indeed CMake generation must tell you if some dependency is not satisfied. I think it has been fixed for a long time but feel free to reopen if not! Cheers :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/807#issuecomment-743072072:67,depend,dependency,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/807#issuecomment-743072072,1,['depend'],['dependency']
Integrability,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:107,message,messages,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642,10,"['Message', 'depend', 'message']","['Message', 'MessageAsTestFailure', 'depend', 'message', 'messages']"
Integrability,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:126,depend,dependency,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797,2,['depend'],['dependency']
Integrability,Yes it is: actions making changes in the repo (here a comment) are forbidden as long as it is not merged; See the end of the message: `Resource not accessible by integration`. You need to trust me :see_no_evil:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4267#issuecomment-1785524462:125,message,message,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4267#issuecomment-1785524462,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"Yes, this image is supposed to be used for compilation purpose. It doesn't contain sofa itself but all the dependency required to compile sofa and use it. So you can use it to compile sofa yourself or configure your own environment to do so.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1757901544:107,depend,dependency,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1757901544,1,['depend'],['dependency']
Integrability,You can add a thumb-up (with the Add your reaction icon... in the header of the message)) then sort by reactions in the issues listing.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/27#issuecomment-254795808:80,message,message,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/27#issuecomment-254795808,1,['message'],['message']
Integrability,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:405,depend,dependency,405,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310,2,['depend'],['dependency']
Integrability,You should not put a branch name in GIT_TAG.; Now SOFA master branch depends on SofaPython3. We don't want that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820394921:69,depend,depends,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-820394921,1,['depend'],['depends']
Integrability,"You weren't there this morning @marques-bruno but if your proposal is both :. - specifying in a descriptive way the type of numerical integration method; - the inheritance issue. and I think it does. We should go for it. I did not know the OptionsGroup class.; If not, we keep and merge Hervé's work. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361:134,integrat,integration,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361,1,['integrat'],['integration']
Integrability,"[ERROR]&nbsp; &nbsp;[SofaPython3::SceneLoader] Unable to completely load the scene from file 'D:/DefrostSofaBundle_win64_python3.8_v22.06.00-beta4/DefrostSofaBundle_win64_python3.8_v22.06.00-beta4/plugins/BeamAdapter/examples/python3/Cochlear-Implant-Insertion/cathter.py'.; Python exception:; &nbsp; ValueError: Object type Edge2QuadTopologicalMapping<&gt; was not created; The object is in the factory but cannot be created.; Requested template : None; Used template&nbsp; &nbsp; &nbsp; : None; Reason(s)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : Data attribute 'input' does not point to a valid mesh topology and none can be found in the parent node context. Thank you for your help. I found the following errors after following your reply. How to solve this problem?. 方得始终; ***@***.***. &nbsp;. ------------------&nbsp;原始邮件&nbsp;------------------; 发件人: ""sofa-framework/sofa"" ***@***.***&gt;;; 发送时间:&nbsp;2022年11月8日(星期二) 晚上7:11; ***@***.***&gt;;; ***@***.******@***.***&gt;;; 主题:&nbsp;Re: [sofa-framework/sofa] [ERROR] [WireRestShape(catheterRestShape)] EdgeSetController has no binding EdgeSetTopologyModifier. (Issue #3463). ; Hi,; ; you need to add a EdgeSetTopologyModifier in your first object:; topoLines_cath.addObject('EdgeSetTopologyModifier', name='meshLinesModif'); ; Hope it helps.; ; —; Reply to this email directly, view it on GitHub, or unsubscribe.; You are receiving this because you authored the thread.Message ID: ***@***.***&gt;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1307081793:1419,Message,Message,1419,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1307081793,1,['Message'],['Message']
Integrability,[ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/12],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1137430935:4,depend,depends-on,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1137430935,1,['depend'],['depends-on']
Integrability,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2171,message,message,2171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,13,"['Message', 'depend', 'message', 'rout']","['MessageAsTestFailure', 'depending', 'message', 'routed']"
Integrability,`SofaKernel\modules\SofaHelper\..\SofaDefaultType\src\sofa/defaulttype/Ray.h(6): error C2429: language feature 'nested-namespace-definition' requires compiler flag '/std:c++17'`. Dependency on #1249 @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384:179,Depend,Dependency,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-598093384,1,['Depend'],['Dependency']
Integrability,"`boost::intrusive_ptr`is very widely used within Sofa, and is not part of `c++11`, so this part of boost has to be there, even if most other boost dependencies may be able to be removed (on thread-related classes for instance). This initial idea of miniBoost was to make it easier to handle this dependency without having to maintain OS and compiler-specific binaries of the full boost libs, in cases where we only need small header-only libraries from boost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408:147,depend,dependencies,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/33#issuecomment-258133408,2,['depend'],"['dependencies', 'dependency']"
Integrability,"`zlib` is a dependency of `libpng`, which is why it was needed up to now. But indeed it is hopefully not used for anything else inside `sofahelper`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281636038:12,depend,dependency,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281636038,1,['depend'],['dependency']
Integrability,a/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-boun,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20910,interface,interfaces-global-init,20910,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['interface'],['interfaces-global-init']
Integrability,ahah I wanted to leave a message and merge... And I just left the message.; 🥇,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124:25,message,message,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705547124,2,['message'],['message']
Integrability,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:103,message,message,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493,4,['message'],['message']
Integrability,"backtrace:; ```; 	[Inline Frame] Sofa.Helper.dll!std::_Check_C_return(int _Res) Line 131	C++; 	[Inline Frame] Sofa.Helper.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1444,Message,MessageDispatcherImpl,1444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['Message'],"['Message', 'MessageDispatcherImpl']"
Integrability,"be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3172,depend,depending,3172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['depend'],['depending']
Integrability,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:162,interface,interface,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981,2,['interface'],['interface']
Integrability,"d to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1217,message,message,1217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['message'],['message']
Integrability,"damned I need to recompile it to get the full error message, sorry I will get back to you",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2110594936:52,message,message,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2110594936,1,['message'],['message']
Integrability,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1230,depend,dependencies,1230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,2,['depend'],['dependencies']
Integrability,"e difference between `MatrixLinearSolver<...,...,NoThreadManager>` and `MatrixLinearSolver<...,...,AsyncThreadManager>` is only in the class implementation. This template mechanism means that it is possible to explicitly instantiate any linear solver as an asynchronous solver. In that case, it will use `MatrixLinearSolver<AsyncThreadManager>` as its base class. On the contrary, `AsyncSparseLDLSolver` introduced in this PR is not generic. It derives from `SparseLDLSolver`. It is specific to `SparseLDLSolver`.; - Because of the previous point, in SofaAsyncSolvers, asynchronous solver components are differentiated only by the template name prefix `Async`. For example, in XML, it is declared as `<SparseLDLSolver template=""AsyncCompressedRowSparseMatrixMat3x3d""/>`, compared to the synchronous solver `<SparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`. In this PR, `AsyncSparseLDLSolver` is a different component than `SparseLDLSolver` and must use the usual templates: `<AsyncSparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`.; - `AsyncSparseLDLSolver` uses `std::async`, while `MatrixLinearSolver<AsyncThreadManager>` uses `boost::thread`, hence a dependency to boost. `std::async` may use a thread pool. In that case, it is guaranteed that threads waiting asynchronous tasks are not busy just waiting. I am not sure it is the case in SofaAsyncSolvers.; - In SofaAsyncSolvers, there are some references to an asynchronous matrix assembly. I don't know for sure that it is really used. Code refers to `ThreadSafeForceField`, and I don't know where those forces fields are. `AsyncSparseLDLSolver` assembles the matrix synchronously. In SofaAsyncSolvers, only `SparseLDLSolver` and `SSORPreconditioner` are specialized to be asynchronous. But I guess there must be other private plugins specializing solvers. For now, I only wanted a basic asynchronous LDL solver. Therefore I did not feel that it was necessary to have a generic base class for any asynchronous solver.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613:1630,depend,dependency,1630,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613,1,['depend'],['dependency']
Integrability,"e of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();; ; // ask my child to do their specific init, ; doBarycentricMappingInit();; }. MyChildOfBarycentricMapping::doBarycentricMapping() final; {; // ask my child to do their specific init, ; }; ```. This long naming scheme also has some good properties in case of multiple in-heritance, as it avoid colliding delegate function's name. . Of course, any other naming scheme suggestion is welcomed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:2059,contract,contract,2059,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,2,['contract'],['contract']
Integrability,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1152,rout,routing,1152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,12,"['message', 'rout']","['message', 'routed', 'routing']"
Integrability,"ely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seems that using a common prefix in the field's name is used to group input together (I have only a vague remembering about that with drawEnable then drawColor and drawLine but I cannot find back the example). For that I have not solution...but we can think about one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:1395,message,message,1395,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['message'],['message']
Integrability,"emPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(Depreca",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12269,Message,Message,12269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['Message'],['Message']
Integrability,"er != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl;; ; if (nbIter == -1) // Additional message for infinite iterations; {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ Command + period (mac) to stop "" << msgendl;; }; }. i++;; }; }; return 0;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:2080,message,message,2080,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087,1,['message'],['message']
Integrability,"er/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addDForce_kernel(int, real *, real *, real, real, real *) [with real=float]"" ; (1266): here. 2 errors detected in the compilation of ""/tmp/tmpxft_0000044c_00000000-6_CudaStandardTetrahedralFEMForceField.cpp1.ii"".; CMake Error at SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake:275 (message):; Error generating file; /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:2995,message,message,2995,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['message'],['message']
Integrability,"es"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1652,interoperab,interoperable,1652,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,['interoperab'],['interoperable']
Integrability,"few CUDA scenes are failing, all with the messages `[ERROR] [CGLinearSolver(cGLinearSolver1)] Required data ""threshold"" has not been set. (Current value is 1e-05)` so I suppose these scenes must be updated too",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949356046:42,message,messages,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949356046,1,['message'],['messages']
Integrability,"fferently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think about the differnt appraoch ? ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1385,message,message,1385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,2,['message'],['message']
Integrability,"first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these cons",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1868,interface,interface,1868,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,['interface'],['interface']
Integrability,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:2200,depend,dependent,2200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263,4,['depend'],['dependent']
Integrability,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:316,message,message,316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767,3,['message'],"['message', 'messages']"
Integrability,"hi,. please give the usage or link to the code you are refering.; Yes MeshMatrixMass has been changed in several PR: https://github.com/sofa-framework/sofa/issues?q=assignee%3Aepernod+is%3Aclosed+MeshMatrixMass. For me the old behavior was wrong but it might depends how you init the component and go through a case I didn't think about.; Maybe the used topology doesn't have edges?; Probably this PR: https://github.com/sofa-framework/sofa/pull/2193/files",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901669582:259,depend,depends,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901669582,1,['depend'],['depends']
Integrability,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1120,message,message,1120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,2,['message'],['message']
Integrability,"issofa_multithreading is a few commits behind our public integrated branch. ; Almost all the commits are directly related to the `Multithreading` plugin, see https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. There is also one particular fix related to the concurrent call to `DDGNode::update` method ; https://github.com/InSimo/sofa/commit/2e8d6f33b597ff6dbd568c67dfac7715850f8015",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228:57,integrat,integrated,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-292126228,1,['integrat'],['integrated']
Integrability,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1127,message,messages,1127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,4,['message'],"['message', 'messages']"
Integrability,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1620,depend,dependency,1620,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224,3,"['depend', 'integrat']","['dependency', 'integrate', 'integrating']"
Integrability,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1319,depend,depend,1319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,1,['depend'],['depend']
Integrability,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1173,depend,dependency,1173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['depend'],['dependency']
Integrability,"nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11913,depend,depends,11913,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['depend'],['depends']
Integrability,"nti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seem",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:997,interface,interface,997,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['interface'],['interface']
Integrability,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3774,message,message,3774,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566,2,['message'],['message']
Integrability,"ok sorry, got it. Yes I have duplicated this method in #1223. In the idea of deleting both. The idea was to make a smooth transition period:; - All updated component use now a SingleLink to the topology they want (allowing multiple topologies in the same context) and if not set, use GetMeshTopologyLink() with a warning telling that the result is uncertain.; - Component still using the old method GetMeshTopology should have a deprecated method message in 19.12 before deletion in 20.06. I let that unfinished. ; So as you want either we put the deprecated message or we replace directly both methods by a new one like ""GetFirstEncounteredTopology"" inside a breaking PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582:447,message,message,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605896582,2,['message'],['message']
Integrability,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:380,message,message,380,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211,12,['message'],"['message', 'messages']"
Integrability,"ok, as long as it doesn't crash and the user has error message. 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3400#issuecomment-1282019824:55,message,message,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3400#issuecomment-1282019824,1,['message'],['message']
Integrability,"onent.Collision.Detection.Intersection; Adding module Sofa.Component.Collision.Response; Adding module Sofa.Component.Collision.Response.Mapper; Adding module Sofa.Component.Collision.Response.Contact; Adding module Sofa.Component.Setting; Adding module Sofa.Component.Controller; Adding module Sofa.Component.Engine; Adding module Sofa.Component.Engine.Analyze; Adding module Sofa.Component.Engine.Generate; Adding module Sofa.Component.Engine.Select; Adding module Sofa.Component.Engine.Transform; Adding module Sofa.Component.Haptics; Adding library Sofa.GL; Found OpenGL: /usr/lib/x86_64-linux-gnu/libOpenGL.so ; Found GLEW: /usr/include (found version ""2.1.0"") ; Adding module Sofa.GL.Component; Adding module Sofa.GL.Component.Rendering2D; Adding module Sofa.GL.Component.Rendering3D; Adding module Sofa.GL.Component.Engine; Adding module Sofa.GL.Component.Shader; Adding module Sofa.GUI.Component; Adding library Sofa.GUI.Common; cxxopts version 2.2.0; -- Sofa.GUI.Common: Sofa.GL dependent features enabled.; Adding library Sofa.GUI.Batch; Adding library Sofa.GUI.Qt; Sofa.GUI.Qt: will use Qt5; Sofa.GUI.Qt: Qt5Charts not found. No chart nor Profile will be compiled; -- FFmpeg executable was found /usr/bin/ffmpeg; Sofa.GUI.Qt: QtCharts not found, SofaWindowProfiler will not be built.; Sofa.GUI.Qt: Qt5WebEngine not found, QDocBrowser will not be built.; Adding collection SofaGui; Adding collection SofaGuiCommon; Adding collection SofaGuiQt; Adding collection SofaFramework; Adding collection SofaSimulation; Adding collection SofaBase; Adding collection SofaSimpleFem; Adding collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collectio",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:5642,depend,dependent,5642,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['depend'],['dependent']
Integrability,"ory;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core::objectmodel::New;; using sofa::core::objectmodel::Data;. using sofa::simulation::DefaultAnimationLoop;. int main(int argc, char** argv); {; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainLoggingMessageHandler::getInstance());; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainPerComponentLoggingMessageHandler::getInstance());; sofa::helper::logging::MainLoggingMessageHandler::getInstance().activate();. sofa::helper::BackTrace::autodump();. sofa::simulation::graph::init();. sofa::simulation::setSimulation(new sofa::simulation::graph::DAGSimulation());. for (int i = 0; i < 1000; i++) {. Node::SPtr groot = sofa::simulation::getSimulation()->createNewGraph(""root"");; groot->setGravity({ 0,0,0 });; groot->setDt(0.02);. DefaultAnimationLoop::SPtr animationLoop = New<DefaultAnimationLoop>();; groot->addObject(animationLoop);. // collision pipeline; DefaultPipeline::SPtr collisionPipeline = New<DefaultPipeline>();; collisionPipeline->setName(""Collision Pipeline"");; groot->addObject(collisionPipeline);. // collision detection system; BruteForceBroadPhase::SPtr broadPhaseDetection = New<BruteForceBroadPhase>();; broadPhaseDetection->setName(""Broad Phase Collision Detection"");; groot->addObject(broadPhaseDete",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:2687,Message,MessageDispatcher,2687,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,2,['Message'],['MessageDispatcher']
Integrability,"or}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsolver::MatrixLinearSolver<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>,sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1680,Message,MessageDispatcher,1680,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,1,['Message'],['MessageDispatcher']
Integrability,"per.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsol",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1563,Message,MessageDispatcher,1563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['Message'],"['Message', 'MessageDispatcher']"
Integrability,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1555,Message,Message,1555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494,5,"['Message', 'message']","['Message', 'MessageAsTestFailure', 'message']"
Integrability,"r design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:1989,message,message,1989,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,4,['message'],['message']
Integrability,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:8798,message,message,8798,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['message'],['message']
Integrability,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1677,protocol,protocol,1677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,4,"['integrat', 'protocol']","['integration', 'protocol']"
Integrability,"re a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can only be used as a dependent DoF (for example, in this case, VNCS::F33D is a deformation gradient which is by definition a dependent DoF), that storeResetState could be specialized.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:1879,depend,dependent,1879,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184,3,['depend'],['dependent']
Integrability,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1576,message,messages,1576,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,4,['message'],"['message', 'messages']"
Integrability,still this package dependencies approach...why not considering using https://buckaroo.pm/ or similar project ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369907224:19,depend,dependencies,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369907224,1,['depend'],['dependencies']
Integrability,"sure @jnbrunet ; These integration factors are not widely used (actually almost not used at all!). These factors define how to bring back the results of the constraint problem (Lagrange multipliers ) as position or velocity field. These factors usually only depend on the scheme.; For practical reason (I guess), these factors can be manually tuned in the UncoupledCC. The API in ODESolver (integration schemes) defining these factors is unclear and could be updated. See the functions:; - *getPositionIntegrationFactor*; - *getVelocityIntegrationFactor*; - *getIntegrationFactor*; - *getSolutionIntegrationFactor*. Does this answer your point?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145:23,integrat,integration,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1369#issuecomment-625827145,3,"['depend', 'integrat']","['depend', 'integration']"
Integrability,"t.Collision.Detection; Adding module Sofa.Component.Collision.Detection.Algorithm; Adding module Sofa.Component.Collision.Detection.Intersection; Adding module Sofa.Component.Collision.Response; Adding module Sofa.Component.Collision.Response.Mapper; Adding module Sofa.Component.Collision.Response.Contact; Adding module Sofa.Component.Setting; Adding module Sofa.Component.Controller; Adding module Sofa.Component.Engine; Adding module Sofa.Component.Engine.Analyze; Adding module Sofa.Component.Engine.Generate; Adding module Sofa.Component.Engine.Select; Adding module Sofa.Component.Engine.Transform; Adding module Sofa.Component.Haptics; Adding library Sofa.GL; Adding module Sofa.GL.Component; Adding module Sofa.GL.Component.Rendering2D; Adding module Sofa.GL.Component.Rendering3D; Adding module Sofa.GL.Component.Engine; Adding module Sofa.GL.Component.Shader; Adding module Sofa.GUI.Component; Adding library Sofa.GUI.Common; cxxopts version 2.2.0; -- Sofa.GUI.Common: Sofa.GL dependent features enabled.; Adding library Sofa.GUI.Batch; Adding library Sofa.GUI.Qt; Sofa.GUI.Qt: will use Qt5; Sofa.GUI.Qt: Qt5Charts not found. No chart nor Profile will be compiled; -- FFmpeg executable was found /usr/bin/ffmpeg; Sofa.GUI.Qt: QtCharts not found, SofaWindowProfiler will not be built.; Sofa.GUI.Qt: Qt5WebEngine not found, QDocBrowser will not be built.; Adding collection SofaGui; Adding collection SofaGuiCommon; Adding collection SofaGuiQt; Adding collection SofaFramework; Adding collection SofaSimulation; Adding collection SofaBase; Adding collection SofaSimpleFem; Adding collection SofaRigid; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collectio",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:4252,depend,dependent,4252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,2,['depend'],['dependent']
Integrability,"the checkTopology Data is only used to activate/unactivate the method CheckTopology. ; It should not change message conditio. If it is the case, I missed it. Could you point the line?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631316753:108,message,message,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353#issuecomment-631316753,1,['message'],['message']
Integrability,"the fact that the two components presented two representations of the spring list: one gather more information than the other, and the second one being less practical to work with especially in scene building.; - In SpringFF every spring is listed in a data list of LinearSpring. Along with this the two topologySubestIndices where here to cope for topological changes; - In StiffSpringFF, along with the inherited data from SpringFF, lied the indices lists and a single data for stiffness and damping. . In order to be as conservative as possible, I tried in this PR to only do the merge while keeping every current features enabled. This leads in a double representation of the spring list: the list `d_springs` and the tuple `d_springsIndices[0], d_springsIndices[1], d_ks, d_kd, d_lengths, d_elongationOnly, d_enabled` that needs to be kept coherent constantly through call back. This is cumbersome because we cannot have a circular dependency, and has thus been solved by implicitly defining a hierarchy between the two representation : the tuple representation is the master one, and the spring list follows it. This would be better if we could have a read only data so that the user cannot access the spring list. . The spring list is still useful for three things :; 1. the CUDA implementation (but not mandatory, removing it would require a significant refactoring); 2. the huge number of existing example scenes using SpringForceField that uses this representation in the scene; 3. the extensive use of this representation in the python bindings (especially the linearSpring that has no other purpose that this API). Other than that, it has no real superiority over the proposed parallel representation using a single vector for each spring parameter except for the fact that we don't need to keep coherency over all of the vectors... ; Although the tuple enable more versatile scene description. For example, the input indices can now come from other component while no difficult assemblin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879:2218,depend,dependency,2218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879,1,['depend'],['dependency']
Integrability,"ties.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the old one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1924,depend,depends,1924,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['depend'],['depends']
Integrability,"time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1624,message,message,1624,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,2,['message'],['message']
Integrability,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2133,message,message,2133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['message'],['message']
Integrability,type dependant error could result from a missing typename or template keyword,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797:5,depend,dependant,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797,1,['depend'],['dependant']
Integrability,"users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At the beginning of a scene with OGLModel and ""rest_position"" would be enough to make the alias obvious to the user preserving the convenience of Alias to the developpers. What do you think a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:1272,message,message,1272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,2,['message'],['message']
Integrability,"using cmake-gui, I have now activated the plugin sofa cuda: . here is the output of cmake-gui:; `````; Found CUDA: /usr/local/cuda-11.2 (found version ""11.2"") ; SofaCUDA: Plugin VolumetricRendering was not enabled/found, therefore CudaTetrahedralVisualModel will not be compiled.; SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.; SofaCUDA: optional dependency SofaSphFluid not enabled. ; Autodetected CUDA architecture(s): 7.5; SofaCUDA: nvcc flags: -gencode;arch=compute_75,code=sm_75;-Xcompiler -fPIC; `````. I'm compling sofa on my laptop that has a decent graphical card (a Quadro T2000) but that maybe not inadequate in GPU memory or precision for sofa. Double precision is not activated for instance. Anyway, the same error occurs even if I delete all files from previous compilation adn regenerate the cmake files. `````; 1121/1599] Building CXX object modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o; FAILED: modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o ; /usr/bin/clang++ -DNDEBUG -DSOFA_BUILD_OPENGL_VISUAL -DSOFA_BUILD_SOFAOPENGLVISUAL -DSofaOpenglVisual_EXPORTS -I/home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../Sofa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:408,depend,dependency,408,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312,1,['depend'],['dependency']
Integrability,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:52,message,message,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235,1,['message'],['message']
Integrability,would there be a way to separate the cleaning and the changes actually related to the PR?; is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-958802655:134,interface,interface,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-958802655,1,['interface'],['interface']
Integrability,"x120)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x141)：undefined reference to ‘libusb_exit’; /home/dell/raid/hx/sigma7_hx/sdk-3.14.0/lib/release/lin-x86_64-gcc/libdhd.a(dhdComUSB-libusb.o)：in function‘dhdUSBGetDeviceCountList(int*, int*, int*, int)’：; dhdComUSB-libusb.cpp:(.text+0x215)：undefined reference to ‘libusb_init’; dhdComUSB-libusb.cpp:(.text+0x24e)：undefined reference to ‘libusb_get_device_list’; dhdComUSB-libusb.cpp:(.text+0x297)：undefined reference to ‘libusb_get_device_descriptor’; dhdComUSB-libusb.cpp:(.text+0x2eb)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x30c)：undefined reference to ‘libusb_exit’; ```. So I switched to using the dynamic linking SDK/lib/release/lin-x86_64-gcc/libdhd.so.3.14.0 for compilation, which compiled successfully, but the import of the plugin failed when running the scene example in the [force dimension plugin](https://gitlab.com/polyakovkrylo/forcedimensions). ```. Gtk-Message: 14:09:35.149: GtkDialog mapped without a transient parent. This is discouraged.; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; [ERROR] [RequiredPlugin(ForceDimensions)] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; ; Failed to load: [""ForceDimensions""]; [ERROR] [InfoComponent(Not created (OmegaDriver))] Object type OmegaDriver<> was not created ; The object is not in the factory. . [ERROR] [SceneLoaderXML] Node initialization failed. . [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot ope",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229:1733,Message,Message,1733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229,1,['Message'],['Message']
Integrability,yeah sorry @jnbrunet (good to hear from you as always!) this fix has not been integrated into v22.06 and regarding to the timing we might very probably wait for the v22.12 (at least for having the fix in the binary version),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3485#issuecomment-1326853997:78,integrat,integrated,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3485#issuecomment-1326853997,1,['integrat'],['integrated']
Integrability,"yes you have it, it's here; https://github.com/sofa-framework/sofa/pull/1186/files#diff-5a95499e7294bee7079356a42a6b2b00R196; No, I'm not using it directly, it is needed as a dependency by another one",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542690339:175,depend,dependency,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542690339,1,['depend'],['dependency']
Integrability,"you can let it open, we will close this issue when the error message will be added. (very soon)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304:61,message,message,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304,1,['message'],['message']
Integrability,"👍 for removing sofa::helper::io::Mesh*. There is however an issue that the support for loading texture coordinates was removed from MeshObjLoader, so the OglModel version on the master can only have textures when using these deprecated loaders. In our latest integration branch we reverted this removal of texcoords support and fixed it to have the same level of support using MeshObjLoader+OglModel as when loading the file directly in OglModel (most notably handling of ""seams"" where a single vertex has multiple texture coordinates). The relevant commits are:; - https://github.com/InSimo/sofa/commit/915ee46368efe140b242759a0110682f71200dc1; - https://github.com/InSimo/sofa/commit/08493b9ab5c8ea376ba9a7f9a2cea3e81f513511; - https://github.com/InSimo/sofa/commit/e6bec10562ab797963027003c2282cbc24a53bb9; - https://github.com/InSimo/sofa/commit/1925b381b7d8cb939d250ab24e92fb28df918c0b. To be merged to the master the first commit need to be done in a cleaner way than a full revert, which removed later refactorings like apparently the introduction of a File class.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553:259,integrat,integration,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-298865553,1,['integrat'],['integration']
Modifiability," /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Loc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11164,Plugin,PluginManager,11164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5aade6s7Ah995OVBks5qw6XNgaJpZM4JwvD8.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2189,plugin,plugin,2189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,4,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:6861,plugin,plugin,6861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,9,"['Config', 'config', 'plugin']","['Configuring', 'config', 'configuration', 'plugin', 'plugins']"
Modifiability, Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Preconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:4727,Plugin,PluginManager,4727,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1757,refactor,refactoring,1757,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,8,"['adapt', 'refactor']","['adapt', 'refactoring']"
Modifiability," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1504,Plugin,Pluginize,1504,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,5,"['Plugin', 'plugin', 'refactor']","['Pluginize', 'plugins', 'refactor']"
Modifiability," SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq2nsUCIg4ENi5a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:1301,plugin,plugin,1301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233,1,['plugin'],['plugin']
Modifiability, [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Fra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:4052,plugin,plugins,4052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['plugin'],['plugins']
Modifiability, [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [Plug,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5511,Plugin,PluginManager,5511,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plug,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:4957,Plugin,PluginManager,4957,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," automatic registration of the target name and I can revert back to this one. ; But I proposed a second, explicit, approach for two reasons:; - the automatic mecanism force the deployement of the new approach for all the sofa code components at once... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:1210,config,config,1210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615,2,['config'],['config']
Modifiability," be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ; > > > —; > > > You are receiving this because you are subscribed to this thread.; > > > Reply to this email directly, view it on GitHub , or mute the thread .; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251673936,; > > or mute the thread; > > https://github.com/notif",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:2022,plugin,plugin,2022,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,1,['plugin'],['plugin']
Modifiability," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1204,inherit,inherit,1204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236,8,['inherit'],"['inherit', 'inheriting']"
Modifiability," https://godbolt.org/z/xr56hnex6. ```cpp; struct BehaviorModel {};; struct BaseMapping {};; struct OdeSolver {};. template<class... T>; struct Identifier; {};. template <>; struct Identifier<BehaviorModel>; {; using type = std::set<BehaviorModel*>;; type behaviorModel;; void addBehaviorModel(BehaviorModel* o) { behaviorModel.insert(o); }; void removeBehaviorModel(BehaviorModel* o) { behaviorModel.erase(o);}; };. template <>; struct Identifier<BaseMapping>; {; using type = std::vector<BaseMapping*>;; type mapping;; void addMapping(BaseMapping* obj) { mapping.push_back(obj); }; void removeMapping(BaseMapping* obj) { }; };. template <>; struct Identifier<OdeSolver>; {; using type = std::vector<OdeSolver*>;; type solver;; void addOdeSolver(OdeSolver* obj) { solver.push_back(obj); }; void removeOdeSolver(OdeSolver* obj) { }; };. template<class T, class... Rest>; struct Identifier<T, Rest...> : public Identifier<T>, public Identifier<Rest...>; {};. template<class T, class... Rest>; auto get(const Identifier<T, Rest...>& i); {; return *(typename Identifier<T>::type*)&static_cast<const Identifier<T>&>(i);; }. using NodeComponentsContainer =; Identifier<BehaviorModel, BaseMapping, OdeSolver>;. int main(); {; NodeComponentsContainer n{};; n.solver.push_back(nullptr);; n.mapping.push_back(nullptr);; n.solver.push_back(nullptr);. n.addOdeSolver(nullptr);. get<BaseMapping>(n).push_back(nullptr);. return 0;; }; ```. This is very similar to a `std::tuple` except that the identifiers of the variables is maintained, as well as the added function (such as `addBehaviorModel` and `removeBehaviorModel`). There is a ""universal"" getter (you can equivalently do `n.mapping.push_back(nullptr);` or `get<BaseMapping>(n).push_back(nullptr);` or `n.addMapping(nullptr);`). If we decide to go to this direction, there is difficulty to implement it due to the inhertiance between `Node` and `BaseNode`. It's quite complex for not a big feature, so maybe it does not worth spending more time on this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3956#issuecomment-1638353746:1612,variab,variables,1612,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3956#issuecomment-1638353746,1,['variab'],['variables']
Modifiability," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1663,plugin,plugin,1663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,12,"['config', 'plugin']","['config', 'configuration', 'plugin', 'plugins']"
Modifiability," not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` will incorrectly use the `initData()` version without default value but with one boolean flag, as `""mydefaultvalue""` is a `const char*` which requires a ""user-defined"" conversion to `std::string`, while `""help message""` is implicitely convertible to `bool` without any ""user-defined"" conversion, so preferred by the compiler. So if we break the compatibility to the current `initData()` API, I would strongly suggest to remove this issue, by removing the two optional bool flags which are seldom used anyway (and can be replaced by a call to `setDisplayed()` or `setReadOnly()`).; * compared to when this code was originally written, c++ now allows to put initializers of member variables in the class declaration directly, which for Data members could be preferable to initializing them in the constructor (the name and help message would be visible in the header instead of the implementation, it does not need to be duplicated in case there are multiple constructors, and there would no longer be any unhelpful warnings on some compilers about mismatched initialization orderings). I'm not suggesting to do that in all the components in this PR (as the diff would be horible to review), but any new designs of `initData` should check that this is possible (last time I looked at that, gcc and msvc did not agree on if we needed to write `Data<> d = initData(...)` versus `Data<> d { initData(...) }` versus `Data<> d = { initData(...) }`, but it was a long time ago...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:2679,variab,variables,2679,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,2,['variab'],['variables']
Modifiability," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:2539,plugin,plugin,2539,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,2,['plugin'],['plugin']
Modifiability, plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] L,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:7683,Plugin,PluginManager,7683,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability, plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Utility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Visual.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSystem.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Iterative.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Direct.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.Preconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Releas,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:3907,Plugin,PluginManager,3907,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability," to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be enough to have types such as string, int, float, array, matrix, etc. Here one could use the identifiers already used in python. Also, the user has to state the type he wants for the Output, since there is no way of inferring automatically when both ends are subject to the user’s choice. Therefore, this would be limited to declaring the desired type of an Output. The types for the Inputs should always be derived automagically, I think. I hope this ideas are useful!. Cheers!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:3051,extend,extended,3051,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416,2,['extend'],['extended']
Modifiability, │   │   │   └── Submodule_Simulation_doc.h; │   │   └── Types; │   │   └── Binding_BoundingBox.h; │   ├── SofaBaseTopology; │   │   ├── Binding_RegularGridTopology_doc.h; │   │   ├── Binding_RegularGridTopology.h; │   │   ├── Binding_SparseGridTopology_doc.h; │   │   └── Binding_SparseGridTopology.h; │   ├── SofaDeformable; │   │   ├── Binding_LinearSpring_doc.h; │   │   ├── Binding_LinearSpring.h; │   │   ├── Binding_SpringForceField_doc.h; │   │   └── Binding_SpringForceField.h; │   ├── SofaGui; │   │   ├── Binding_BaseGui.h; │   │   └── Binding_GUIManager.h; │   ├── SofaRuntime; │   │   └── Timer; │   │   ├── Submodule_Timer_doc.h; │   │   └── Submodule_Timer.h; │   └── SofaTypes; │   ├── Binding_Mat.h; │   ├── Binding_Quat.h; │   └── Binding_Vec.h; ├── lib; │   ├── cmake; │   │   └── SofaPython3; │   │   ├── BindingsConfig.cmake; │   │   ├── BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-3,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:4329,Plugin,PluginTargets-debug,4329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['Plugin'],['PluginTargets-debug']
Modifiability,![image](https://acegif.com/wp-content/gifs/non-25.gif). file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-install/plugins/SceneCreator/lib.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462:140,plugin,plugins,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1154#issuecomment-534740462,1,['plugin'],['plugins']
Modifiability,![image](https://user-images.githubusercontent.com/12150715/159927035-5bb99efb-1453-42e2-b5dd-191e4b4c6d21.png); ![image](https://user-images.githubusercontent.com/12150715/159926857-6592505a-0fb8-4078-8312-78c266413965.png). It allows for instance to use config files `runSofa scene.py --argv myConfig.toml`.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2802#issuecomment-1077632153:256,config,config,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2802#issuecomment-1077632153,1,['config'],['config']
Modifiability,"### Conclusion suggested. - SofaCUDA; - VolumetricRendering (ICI CE SERAIT LA RACINE DU ""plugin""); - CMakeLists.txt; - src; - VolumetricRendering/BaseVolumetricRenderer.h; - examples; - python/; - all python examples; - volumetricrendering/\_\_init\_\_.py; - tests; - extensions; - CUDA (nom de la target VolumetricRendering.CUDA); - CMakeLists.txt `find_package(VolumetricRendering)`; - src/>>>>; - VolumetricRendering/CUDA/BaseCudaVolumetricRenderer.h; - examples; - tests; - OpenCL (nom de la target VolumetricRendering.OpenCL); - CMakeLists.txt `find_package(VolumetricRendering)`; - src/>>> ; - VolumetricRendering/OpenCL/BaseCLXX.h; - examples; - tests; - Python (bindings); - CMakeLists.txt `find_package(VolumetricRendering)`; - src; - examples; - tests; - libraries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884626282:89,plugin,plugin,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884626282,1,['plugin'],['plugin']
Modifiability,"#############; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Content of build_dir/CMakeCache.txt**; > ; > < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >; > ; > Thank you for your report. Have you been able to solve it cau",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:5819,plugin,plugins,5819,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"#2073 #2081 #2084; Instead, it will be moved in SofaMiscCollision instead of an independent plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1624#issuecomment-847873206:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1624#issuecomment-847873206,1,['plugin'],['plugin']
Modifiability,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1222,plugin,pluginization,1222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690,6,"['plugin', 'refactor']","['plugin', 'pluginization', 'refactoring']"
Modifiability,"&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1375,config,config,1375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['config'],['config']
Modifiability,"'); Collis.addObject('EdgeSetTopologyModifier',name='colliseEdgeModifier'); Collis.addObject('MechanicalObject',name='CollisionDOFs'); Collis.addObject('MultiAdaptiveBeamMapping',name='collisMap', controller='../m_ircontroller',useCurvAbs='1',printLog='0'); Collis.addObject('LineCollisionModel',proximity=0.0,group='1'); Collis.addObject('PointCollisionModel', proximity=0.0, group='1'). VisuCatheter = InstrumentCombined.addChild('VisuCatheter'); VisuCatheter.activated= True; VisuCatheter.addObject('MechanicalObject',name='Quads'); VisuCatheter.addObject('QuadSetTopologyContainer',name='ContainerCath'); VisuCatheter.addObject('QuadSetTopologyModifier',name='Modifier'); VisuCatheter.addObject('QuadSetGeometryAlgorithms',name='GeomAlgo', template='Vec3d'); VisuCatheter.addObject('Edge2QuadTopologicalMapping',nbPointsOnEachCircle='10',radius=2,input='@../../topoLines_cath/meshLinesCath',output='@ContainerCath',flipNormals=True); VisuCatheter.addObject('AdaptiveBeamMapping',name='VisuMapCath',useCurvAbs='1', printLog='0', interpolation='@../InterpolCatheter', input='@../DOFs', output='@Quads', isMechanical=False); VisuOgl = VisuCatheter.addChild('VisuOgl'); VisuOgl.activated= True; VisuOgl.addObject('OglModel',name='Visual',color='0.7 0.7 0.7', quads='@../ContainerCath.quads',material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20'); VisuOgl.addObject('IdentityMapping',input='@../Quads',output='@Visual'). VisuGuide = InstrumentCombined.addChild('VisuGuide'); VisuGuide.activated= True; VisuGuide.addObject('MechanicalObject',name='Quads'); VisuGuide.addObject('QuadSetTopologyContainer',name='ContainerGuide'); VisuGuide.addObject('QuadSetTopologyModifier',name='Modifier'); VisuGuide.addObject('QuadSetGeometryAlgorithms',name='GeomAlgo', template='Vec3d'); VisuGuide.addObject('Edge2QuadTopologicalMapping',nbPointsOnEachCircle='10',radius=1,input='@../../topoLines_guide/meshLinesGuide',output",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:6413,Adapt,AdaptiveBeamMapping,6413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability,"(not the PR itself) ; I am wondering why does the `plugins/` dir CMakefile tests the presence of Sofa.GL ?; IMO it should be in the CMakefile of the plugin itself, where it does ` find_package()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3514#issuecomment-1333215217:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3514#issuecomment-1333215217,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""cred",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4048,plugin,plugins,4048,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"**Update**; It was working before on Windows because we already have a user defined `FindEigen3.cmake` in sofa/cmake (on which I did some modifications not so long ago :facepalm:, sometime I have the memory of a red fish). The problem I had was probably because this `FindEigen3.cmake` isn't installed alongside SOFA, so if an external plugin links against SOFA, it will hit the `find_package(Eigen3 REQUIRED)` inside our ***Config.cmake and will fail to find it. @guparan Do you think we should install the `FindEigen3.cmake` (like CGAL is doing)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251:336,plugin,plugin,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-628708251,2,"['Config', 'plugin']","['Config', 'plugin']"
Modifiability,"**[ci-depends-on]** detected during [build #10](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/10/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG fbc130904462023496cbd330c7d815f0dfd95af1_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG ac7e23fb6aec5979c97b84a4feecdbb9dd340256_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949425223:485,Flexible,Flexible,485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949425223,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #10](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/10/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966175549:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966175549,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #11](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/11/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966308036:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966308036,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #12](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/12/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966316632:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966316632,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #13](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/13/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966335062:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966335062,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #14](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/14/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG b45ee24754d78223533bea5cd04bae6a8c3441c6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 8261e01ea5c338bc065fbf1af007418b022bf2ae_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966791015:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966791015,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #15](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/15/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG b45ee24754d78223533bea5cd04bae6a8c3441c6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG 07c1d112e418cf57bdf40ca29b09ad8a06eba52d_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1968640370:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1968640370,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #16](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/16/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG c2af4de99fa12672052164a8205db6ab07771ed8_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969775511:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969775511,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #17](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/17/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG 3ee9780863a1ecd73a4c13e130633b21f0b20eb1_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG c2af4de99fa12672052164a8205db6ab07771ed8_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 305d7ce1912b8b450a0ce86e5ce6651c4fe9c839_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969891332:1052,Plugin,PluginExample,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1969891332,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #1](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/1/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911382644:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911382644,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911569690:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911569690,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #2](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/2/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-940960550:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-940960550,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911607425:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-911607425,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #3](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/3/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943216103:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943216103,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a2059bdbe0539e8d307cdb25aa5826eaf26f0a3b_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG c3a994fa1f587b4ded8608a45a71851dc82459c6_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912477719:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912477719,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943232753:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943232753,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944267176:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944267176,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #4](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4471/4/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/5**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 56823196e7f8d1793d601707be1bd3efac4a056b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1918442718:208,Plugin,PluginExample,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1918442718,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 4ec2b43247c7d4d0dd9d5a66eb8e3c5cfca180c7_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912603953:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-912603953,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2404/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/2**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG a32899850b208ef465581eba33f8a0ba3e0b638b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943427879:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404#issuecomment-943427879,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #5](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/5/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944272214:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-944272214,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-913580967:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-913580967,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 3a11f7365fa08c998fb4e07e23fc64f50233a273_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945404864:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945404864,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #6](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3649/6/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/3**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 91e19c464e875daf9598bd31953655a7a84aef86_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1430365297:208,Plugin,PluginExample,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3649#issuecomment-1430365297,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-914060262:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-914060262,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG fc5b448a5de22989477f6cde08d9b58d322a02ae_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG 8b5787f459de8ad885af8a3710333308f1853999_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945759963:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945759963,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #7](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/7/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966012024:1050,Plugin,PluginExample,1050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966012024,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2316/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Flexible/pull/1**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 1b36e6ff3f81b7a1b2ef1c2d62ea0c282c3bce48_; - **Merge or close https://github.com/sofa-framework/Compliant/pull/1**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG 34a3f2489e1f1950c3b31407318501be5a14ca9b_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916016614:208,Flexible,Flexible,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316#issuecomment-916016614,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #8](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/8/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966114619:1050,Plugin,PluginExample,1050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966114619,3,['Plugin'],['PluginExample']
Modifiability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2419/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/sofa-framework/Compliant/pull/4**; _For this build, Compliant/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Compliant; GIT_TAG aa799839804a3860135eb30c88ab8c39bf388ec1_; - **Merge or close https://github.com/sofa-framework/Flexible/pull/3**; _For this build, Flexible/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Flexible; GIT_TAG 26efcf7698a861e6df66a6b30b7318725df14f9d_; - **Merge or close https://github.com/sofa-framework/SofaPython/pull/2**; _For this build, SofaPython/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython; GIT_TAG 8b5787f459de8ad885af8a3710333308f1853999_; - **Merge or close https://github.com/sofa-framework/SofaPython3/pull/211**; _For this build, SofaPython3/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/SofaPython3; GIT_TAG ec9320ca0a3bec4ffc5e55abe5cd099ccdbff18f_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949368920:483,Flexible,Flexible,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-949368920,3,['Flexible'],['Flexible']
Modifiability,"**[ci-depends-on]** detected during [build #9](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4533/9/). . To unlock the merge button, you must; - **Merge or close https://github.com/SofaDefrost/SoftRobots/pull/265**; _For this build, SoftRobots/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/SofaDefrost/SoftRobots; GIT_TAG d31b5bf89cc2330e469fbb4f70f8a182ade2b0e6_; - **Merge or close https://github.com/sofa-framework/BeamAdapter/pull/139**; _For this build, BeamAdapter/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/BeamAdapter; GIT_TAG e44eaa6ca0a753a79b1de6d4cc19ec094ae03817_; - **Merge or close https://github.com/sofa-framework/Registration/pull/12**; _For this build, Registration/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/Registration; GIT_TAG cef0d410c58eddad420c96c1970dbd2e672d7a3a_; - **Merge or close https://github.com/sofa-framework/PluginExample/pull/6**; _For this build, PluginExample/ExternalProjectConfig.cmake.in will be edited by builders with; GIT_REPOSITORY https://github.com/sofa-framework/PluginExample; GIT_TAG 55c66ce48579be5e72cdc037ee8c87b46a40439d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966144751:1050,Plugin,PluginExample,1050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1966144751,3,['Plugin'],['PluginExample']
Modifiability,"+1. To CmakeLists.txt guys, . just a small question I have ; - what is this for ?; if(NOT TARGET CImgPlugin); include(""${CMAKE_CURRENT_LIST_DIR}/CImgPluginTargets.cmake""); endif(). - shouldn't we also export something like ; CImgPlugin_INCLUDE_DIR ? . To make the plugin relocatable ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/544#issuecomment-351674660:264,plugin,plugin,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544#issuecomment-351674660,1,['plugin'],['plugin']
Modifiability,"- I made to PR trying to have symetry in the implementation: https://github.com/alxbilger/sofa/pull/2; - I also tested the code with Vec2 and Vec1 and it does not compile (so the use of template there is highly questionnable) . It could also be a good use case for c++ 20 concepts; . More comments (to go totally out of the scope of the PR):; - the methods ""addContact"" are probably not properly name... as this component has nothing to do with contact maybe addConstraint (?); - the ""merge"" data field is only in in Vec3 which means either the data field should be only on that specialization or that it should be used in Rigid3Type (or at least printing an ""unsupproted behavior"" when set) ; - the ""keepOrientDiff"" data field is only for Rigid, it shouldn't exists at all in the Vec3 version (it can be considered an favor of having inheritance in addition to specialization). ; - the ""numericalTolerance"" data field is only used for rigid specialization (so same comment as for keepOrientDiff"" and it seems it is only for rotational part.; - why BilateralInteractionConstraint<Rigid>::getVelocityViolation() is empty ? ; - in BilateralInteractionConstraint<Rigid3Types>::getConstraintResolution() there is getValue() in for loops(); - accessors are not used in BilateralInteractionConstraint<Rigid3Types>::buildConstraintMatrix()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187581578:835,inherit,inheritance,835,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187581578,1,['inherit'],['inheritance']
Modifiability,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:111,Plugin,PluginExample,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270,1,['Plugin'],['PluginExample']
Modifiability,"- Regarding your first comment: ; The second point had indeed nothing to do with the actual issue. I was just mentionning that it may be beneficial to use CMAKE_DEBUG_POSTFIX as the default value - provided it is not an empty string - for SOFA_LIBSUFFIX in terms of portability, ""_d"" being the fallback default value if CMAKE_DEBUG_POSTFIX is empty.; On the main CMakeLists.txt, CMAKE_DEBUG_POSTFIX could be set with ""_d"" as the default value. - Regarding the second comment: ; Right now setting the `DEBUG_POSTFIX` at the target level is the consistent way to do it with respect to how things are done in the current implementation. - Finally right now I **don't** know what is the best way to do it, I guess some experiments could be made by just setting the `CMAKE_DEBUG_POSTFIX` at the main CMakeLists.txt level, keeping in mind the probable problem with executables mentioned in https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name. Maybe it has been fixed / changed in recent versions of CMake, however portability must remain a strong concern here. ; Ultimately whatever the best option is, it is **important** that these sort of decisions are **well documented**, including potential side effects.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686:266,portab,portability,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686,2,['portab'],['portability']
Modifiability,-----; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so; [INFO] [runSofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/So,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:3466,Plugin,PluginManager,3466,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"-> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""DefaultAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showBehaviorModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""DefaultContactManager"", response=""PenalityContactForceField""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=3.0,; contactDistance=0.5,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""); #############; # Cutting Sphere; #############; cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.addObject(""EulerImplicitSolver""); cutting_sphere_node.addObject(""PointSetTopologyContainer""); cutting_sphere_node.addObject(""MechanicalObject"", temp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251:1144,plugin,pluginName,1144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251,3,['plugin'],"['plugin', 'pluginName']"
Modifiability,"-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:78:10: note: in instantiation of template class 'Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2>, Eigen::Sparse>' requested here; public CwiseBinaryOpImpl<; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:669:32: note: in instantiation of template class 'Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; return derived() = derived() + other.derived();; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyHelper.h:53:14: note: in instantiation of function template specialization 'Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> >::operator+=<Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; lval += rval;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:536:27: note: in instantiation of function template specialization 'sofa::add<Eigen::SparseMatrix<double, 1, int>, Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; if( !empty(Jp0) ) add( it->J, shift_left<rmat>( 0, it->ff->getMechModel1()->getMatrixSize(), it->H.rows() ) * Jp0 );; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:539:66: note: partial specialization matches [with LhsKind = Eigen::Sparse, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:4615,plugin,plugins,4615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499,1,['plugin'],['plugins']
Modifiability,"-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11472,Plugin,PluginManager,11472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/runSofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:1512,Plugin,PluginManager,1512,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [I,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:9644,Plugin,PluginManager,9644,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:9896,Plugin,PluginManager,9896,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,".Engine.Transform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:10099,Plugin,PluginManager,10099,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,".Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatrix.so; [INFO] [PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:1",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:11252,plugin,plugins,11252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['plugin'],['plugins']
Modifiability,.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1h,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2596,Plugin,PluginManager,2596,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2221,plugin,plugin,2221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['plugin'],['plugin']
Modifiability,.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-r,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27352,variab,variable-declaration,27352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['variab'],['variable-declaration']
Modifiability,.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-s,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2745,Plugin,PluginManager,2745,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Grid.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:1674,Plugin,PluginManager,1674,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Env vars**; > ; > ```shell; > python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.app",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:2548,plugin,plugins,2548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4395,plugin,plugins,4395,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Projective.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.AnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.MechanicalLoad.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Geometry.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Detection.Algorithm.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Detection.Intersection.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:6632,Plugin,PluginManager,6632,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaConstraint/lib/libSofaConstraint.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLoader/lib/libSofaGeneralLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExporter/lib/libSofaExporter.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSparseSolver/lib/libSofaSparseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaPreconditioner/lib/libSofaPreconditioner.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaHaptics/lib/libSofaHaptics.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaValidation/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:6996,Plugin,PluginManager,6996,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,/home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_co,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:4426,Plugin,PluginManager,4426,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3441,Plugin,PluginManager,3441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plug,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:5444,Plugin,PluginManager,5444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.dll; [INFO] [PluginManag,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:5599,Plugin,PluginManager,5599,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3310,Plugin,PluginManager,3310,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.0,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:1793,Plugin,PluginManager,1793,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"1/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:1231,plugin,plugins,1231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['plugin'],['plugins']
Modifiability,1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:8429,Plugin,PluginManager,8429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"2080: 20% of the components make 80% of the result. Components list: https://docs.google.com/spreadsheets/d/1mPGnMrC-3Yo8dEdm5549dRhKcquK4mDmWoNRQt711gs/edit#gid=0. General idea: Repackage components ina way that a subset of the components will be mandatory. These selected components will be maintained with a high level of quality (tests, doc, comments, etc...); Binary distribution will include only this subset. On a fist time:; All the other components will remain available in the repo, but optionnal. (plugins?) ; Once the transition is mature enough, move the deprecated components to another repo ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442:509,plugin,plugins,509,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442,1,['plugin'],['plugins']
Modifiability,"238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12670,config,config,12670,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['config'],['config']
Modifiability,24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Shader.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Batch.so; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GUI.Qt.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SceneCreator/lib/libSceneCreator.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/ArticulatedSystemPlugin/lib/libArticulatedSystemPlugin.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/MultiThreading/lib/libMultiThreading.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins/SofaMatrix/lib/libSofaMatr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:10559,Plugin,PluginManager,10559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:6848,Plugin,PluginManager,6848,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManag,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:7405,Plugin,PluginManager,7405,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good idea to have a repo per plugin,; > > > even if it; > > > becomes more difficult to update them when the sofa core is modified.; > > > But in this specific case, it would be great to add this plugin to this; > > > github repo, so Flexible can still benefit from your code.; > > > ; > > > Another solution, could be to add a third plugin in your independent; > > > repository, that would link with both SOFA-HighOrderTopology and; > > > Flexible,; > > > and that would contain the high order shape functions.; > > > ; > > > What do you think?; > > > ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:1362,plugin,plugin,1362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,4,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,7-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:6697,Plugin,PluginManager,6697,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2844,plugin,plugins,2844,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['plugin'],['plugins']
Modifiability,7nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Geometry.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/li,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:8570,Plugin,PluginManager,8570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec] Compliant's Vec.py is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('Un",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:1657,plugin,plugins,1657,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,1,['plugin'],['plugins']
Modifiability,8bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Algorithm.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.Intersection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Detection.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Mapper.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/l,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:8702,Plugin,PluginManager,8702,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Projective.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.AnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.MechanicalLoad.so; [INFO] [PluginManager] Loaded plugin: /nix/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:6542,Plugin,PluginManager,6542,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,":\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT an",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4183,plugin,plugins,4183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,; Adding collection SofaDeformable; Adding collection SofaObjectInteraction; Adding collection SofaMeshCollision; Adding collection SofaEngine; Adding collection SofaExplicitOdeSolver; Adding collection SofaImplicitOdeSolver; Adding collection SofaLoader; Adding collection SofaGeneralVisual; Adding collection SofaGraphComponent; Adding collection SofaGeneralMeshCollision; Adding collection SofaBoundaryCondition; Adding collection SofaGeneralAnimationLoop; Adding collection SofaGeneralDeformable; Adding collection SofaGeneralEngine; Adding collection SofaGeneralExplicitOdeSolver; Adding collection SofaGeneralImplicitOdeSolver; Adding collection SofaGeneralLinearSolver; Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:7734,plugin,plugin,7734,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,10,['plugin'],"['plugin', 'plugins']"
Modifiability,"; import Sofa; import Sofa.Core. def createScene(; root_node: Sofa.Core.Node,; ) -> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""DefaultAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showBehaviorModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""DefaultContactManager"", response=""PenalityContactForceField""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=3.0,; contactDistance=0.5,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""); #############; # Cutting Sphere; #############; cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.addObject(""EulerImplicitSolver""); cutting_sphere_node.addObject(""Po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251:1065,Plugin,Plugins,1065,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251,1,['Plugin'],['Plugins']
Modifiability,"; public CwiseBinaryOpImpl<; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:669:32: note: in instantiation of template class 'Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::SparseMatrix<double, 1, int>, const Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; return derived() = derived() + other.derived();; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyHelper.h:53:14: note: in instantiation of function template specialization 'Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> >::operator+=<Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; lval += rval;; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:536:27: note: in instantiation of function template specialization 'sofa::add<Eigen::SparseMatrix<double, 1, int>, Eigen::Product<Eigen::SparseMatrix<double, 1, int>, Eigen::SparseMatrix<double, 1, int>, 2> >' requested here; if( !empty(Jp0) ) add( it->J, shift_left<rmat>( 0, it->ff->getMechModel1()->getMatrixSize(), it->H.rows() ) * Jp0 );; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:539:66: note: partial specialization matches [with LhsKind = Eigen::Sparse, LhsOrder = 1, RhsOrder = 0]; template <typename LhsKind, int LhsOrder, int RhsOrder> struct cwise_promote_storage_order<LhsKind,Sparse,LhsOrder,RhsOrder> { enum { value = RhsOrder }; };; ^; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/util/XprHelper.h:540:66: note: partial specialization matches [with RhsKind = Eigen::Sparse, LhsO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:5017,plugin,plugins,5017,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499,1,['plugin'],['plugins']
Modifiability,"; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected (a input named ""points"" will only be bound to an output named EXACTLY ""points_out""... . So that's it, It's not perfect but does the job w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3602,variab,variable,3602,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816,2,['variab'],['variable']
Modifiability,"> ### Problem; > **Description** hello, I wanted to use Sofa 23.06.00 in M1 Mac Book Pro But I can not use Sofa. This error message indicates: (have 'x86_64', need 'arm64e' or 'arm64')) I'd like to know the solution. I want to use Sofa 23.06.00; > ; > **Steps to reproduce** < LIST THE STEPS TO REPRODUCE YOUR PROBLEM HERE >; > ; > 1. install anaconda and make virtual environment; > 2. install sofa framework; > 3. define the environment variables; > 4. import Sofa in python; > ; > **Expected behavior** < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >; > ; > Success importing Sofa in python without any error.; > ; > ### Environment; > **Context**; > ; > * System: Mac OS X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudS",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:439,variab,variables,439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['variab'],['variables']
Modifiability,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:573,plugin,plugins,573,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797,2,['plugin'],['plugins']
Modifiability,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:170,config,config,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503,6,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"> ; > ; > @fspadoni do you think this could be breaking on your side ?. He send a mail : ""It's OK, no problem to remove the SMP code , my plugin doesn't link to it.""; So I guess we are good to go 😚",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1613#issuecomment-744741888:138,plugin,plugin,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1613#issuecomment-744741888,1,['plugin'],['plugin']
Modifiability,"> ; > ; > Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; > So I would say that there is a problem with the nightlies (and the CI is correct). But SofaValidation does not link on SofaGeneralEngine nor SofaBoundaryCondition :raised_eyebrow:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632:20,Flexible,Flexible,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:59,plugin,plugin,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655,4,['plugin'],['plugin']
Modifiability,"> ; > ; > I suspect a Static Initialization Order Fiasco. I am not sure your changes really fixes the issue. It may be because your changes changed the initialization order. Luckily, it's the good one, but other changes could modify the initialization order later. It's just a guess... Thank you for the keywords `Static Initialization Order Fiasco` , I never really encountered such a problem before (lucky I guess).; It seems that the fact that the initialization of the static constexpr variable is done at compilation time (oh really?) solves the SIOF (e.g https://www.py4u.net/discuss/88472)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929328909:490,variab,variable,490,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929328909,1,['variab'],['variable']
Modifiability,"> ; > ; > Is this plugin not supported by the CI? It should have failed if it was. `-DPLUGIN_SENSABLE=OFF`. If I remember well, the OpenHaptics/Geomagic SDK is bothersome (I am polite 😇) to install (more so on the CI nodes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846414016:18,plugin,plugin,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846414016,1,['plugin'],['plugin']
Modifiability,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:151,plugin,plugins,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590,3,"['plugin', 'sandbox']","['plugin', 'plugins', 'sandbox']"
Modifiability,"> > > But it is unclear to me if the implementation proposed in the PR is enough because:; > > > ; > > > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",; > > ; > > ; > > Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr); > ; > What I did in the matrix assembly branch: 2 classes:; > ; > 1. An abstract class describing the API; > ; > 2. Another class deriving from the interface **AND** from BaseObject. In my case, I needed to add the object in the graph. I see ( a pure interface and then a kind of sofaobject interface)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228130020:134,inherit,inheriting,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228130020,1,['inherit'],['inheriting']
Modifiability,"> > @alxbilger you did not keep the (git) history of the files when moving to the new plugin.; > ; > It's such a pain. I suspect you don't like me much to request such a task. . 🥰. > In this branch https://github.com/alxbilger/CSparseSolvers/tree/move_csparse_files, I have the same plugin but with all the SOFA history. I guess it's not really what we want neither. Do you know how to proceed?. I would proceed like this:; - in a fresh clone of SOFA, on master move (git mv) all the CSParse_plugin related files into the new folder (application/plugins/cparseplugin), commit; - use git filter-repo, see the doc: https://docs.github.com/en/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository. This will only keep the history of the files you kept in the folder.; - push all of that into the new repo. Credit to @hugtalbot https://github.com/sofa-framework/sofa/issues/1442",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1782307176:86,plugin,plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1782307176,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"> > And by curiosity, why are the methods of the SofaPhysicsAPI class not defined in SofaPhysicAPI.cpp?; > ; > Very good question... I'm not sure, I think it was done so SofaPhysicsAPI can be shipped/share easily? or to look like an interface ? @fredroy any idea?. At that time, it was to give a public API to any external program using SOFA as a lib (no exposition whatsoever to any SOFA code).; You just needed this .h and the compiled libs.; ; Note that because of the config.h stuff, this is not the case anymore 🙊",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1336769813:472,config,config,472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1336769813,1,['config'],['config']
Modifiability,"> > But it is unclear to me if the implementation proposed in the PR is enough because:; > > ; > > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",; > ; > Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). What I did in the matrix assembly branch: 2 classes:; 1) An abstract class describing the API; 2) Another class deriving from the interface **AND** from BaseObject. In my case, I needed to add the object in the graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228125246:128,inherit,inheriting,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228125246,1,['inherit'],['inheriting']
Modifiability,"> > Did you try to compile with `SReal=float` ? 🙊; > ; > Nope, I don't like to hurt myself. I did 🤐 with a minimal configuration and it *compiles* well",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3915#issuecomment-1579638820:115,config,configuration,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3915#issuecomment-1579638820,1,['config'],['configuration']
Modifiability,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:171,plugin,plugin,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910,8,"['config', 'plugin', 'variab']","['config', 'plugin', 'variable']"
Modifiability,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:496,extend,extend,496,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548,2,['extend'],['extend']
Modifiability,"> @EulalieCoevoet apparently one of the change does change something, some (all?) scenes using this plugin) crashes:; > so maybe the typo was not one... Oops I forgot that `input2` was an option. ; The problem should be fixed now : in `applyJT()` I moved the `m_fromRootModel->read()` after the check that it is not a nullptr.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1490409382:100,plugin,plugin,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1490409382,1,['plugin'],['plugin']
Modifiability,"> @alxbilger `distanceLMConstraint` depends on LMConstraint which is soon leaving us :) so I do not really care; > ; > > What about the backward compatibility with old names?; > ; > good point, but not sure howto ... any idea?. You can introduce a map, mapping the old names to the new names. When you detect an old name, you warn that there is a new name and you change the variable value. It can be done in `DefaultContactManager::init()` or parse",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984464024:375,variab,variable,375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984464024,1,['variab'],['variable']
Modifiability,"> @alxbilger you did not keep the (git) history of the files when moving to the new plugin. It's such a pain. I suspect you don't like me much to request such a task. In this branch https://github.com/alxbilger/CSparseSolvers/tree/move_csparse_files, I have the same plugin but with all the SOFA history. I guess it's not really what we want neither. Do you know how to proceed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780797420:84,plugin,plugin,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780797420,2,['plugin'],['plugin']
Modifiability,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:64,refactor,refactor,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232,2,['refactor'],['refactor']
Modifiability,"> @fredroy Is it possible in a plugin?. Hum you are right, it is possible to do it in a plugin but the CI (jenkins) wont do it automatically I think 👺",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717186150:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717186150,2,['plugin'],['plugin']
Modifiability,"> @fredroy It's good to know that it does not apply in case of `constexpr`.; > You just kept a static variable (`InvalidSet`), which is not `constexpr`. SIOF can apply. `InvalidSet` constructor can be `constexpr` only from C++20. You dont miss a thing 😆 Indeed std::vector constructor is constexpr in c++20 only.; But luckily in our case, InvalidSet is supposed to be an empty vector, so it will be zero-construct in any case. (so we will get an empty vector whatever the init order is)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929895463:102,variab,variable,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929895463,1,['variab'],['variable']
Modifiability,> @fredroy Totally removed or in an external plugin?. I would put it in an external plugin (but just for storage so kind of removed in the same time).; We dont like removing code 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085983504:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085983504,2,['plugin'],['plugin']
Modifiability,"> @fredroy as a matter of fact, I already saw people using the plugin manager UI. I stand corrected then 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2265228178:63,plugin,plugin,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2265228178,1,['plugin'],['plugin']
Modifiability,"> @guparan @fredroy I guess this plugin is not compile by the CI. Would it make sense to add it?. IMO, this plugin was doomed to be removed in a near future. But we can still compile on the CI it if necessary",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085910367:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085910367,2,['plugin'],['plugin']
Modifiability,"> @jnbrunet no existing example scene to my knowledge; > ; > other comments taken into account +1 thanks to the reviewers!; > ; > PS: plugin is listed in the CMakeLists in _applications/plugins_. Hey @hugtalbot . From a quick grep, I got these scene files :. - examples/Components/constraint/Compare_FixConstraints.scn; - examples/Components/constraint/DOFBlockerLMConstraint.scn; - examples/Components/constraint/DistanceLMConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint_DirectSolver.scn; - examples/Components/constraint/FixedLMConstraint.scn; - examples/Components/constraint/LMConstraintCollisionResponse.scn. Do you think we should move them to the plugin?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547:134,plugin,plugin,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547,2,['plugin'],['plugin']
Modifiability,"> @olivier-roussel The findGTest https://cmake.org/cmake/help/v3.19/module/FindGTest.html of cmake only works for CMake >= 3.20 😭 (tested with cmake 3.16 and 3.19 ❌ whereas cmake 3.20 and 3.28 ✅). Indeed again :cry: ; Another option but maybe a bit conda-specific would be to switch to config mode `find_package(GTest CONFIG QUIET)`, as the conda package comes with the GTest cmake config files. Tested with conda + cmake 3.19.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923358310:286,config,config,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923358310,3,"['CONFIG', 'config']","['CONFIG', 'config']"
Modifiability,"> After discussion with @courtecuisse, the function is supposed to be used when cutting meshes.; > In our plugins it is not used anymore, although it might still have relevance in the future.; > Whether to keep it in SOFA sources or not... any option is ok for us. @epernod Would this function be useful for topological changes?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878254798:106,plugin,plugins,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878254798,1,['plugin'],['plugins']
Modifiability,"> And why did it work before and not now?. Because with the ""binary"" dependencies, the registration was made implicitly when the system are loading the dll, unbeknownst to the pluginmanager . ; So for example when one is importing explicitly the plugin `Sofa.Component.Visual`, the OS is also loading the plugin (dyn.library) `Sofa.Component.Topology.Container.Grid` implicitly, and this triggered the registration of all `Grid` components because the registration is (was) automatic. But from the PluginManager point of view `Sofa.Component.Topology.Container.Grid` is/was not loaded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2375432898:176,plugin,pluginmanager,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2375432898,4,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'pluginmanager']"
Modifiability,"> Any interest to keep newmat ? I remember a discussion during a sofadevmeeting with @jnbrunet saying that we should remove the usage of newmat. Especially because it seems this library is really old and not maintained anymore.; > http://robertnz.net/nm_intro.htm; > Latest update seems to be 2008 for newmat11 (beta)... Good point. I just saw an opportunity to easily benefit from the type-parameterized tests that I introduced for `BaseMatrix`. An option is to remove it, but it could also be moved into an external plugin. Let's discuss it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2311#issuecomment-909026838:391,parameteriz,parameterized,391,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2311#issuecomment-909026838,2,"['parameteriz', 'plugin']","['parameterized', 'plugin']"
Modifiability,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:802,plugin,plugin,802,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969,1,['plugin'],['plugin']
Modifiability,"> Before, the default name was `FreeMotionAnimationLoop`, for instance, and now it is `freeMotionAnimationLoop` which still breaks my (our) scenes. Sorry, I thought it was the opposite due to https://peps.python.org/pep-0008/#function-and-variable-names. So, let's merge https://github.com/sofa-framework/sofa/pull/2801",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1076284129:239,variab,variable-names,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1076284129,1,['variab'],['variable-names']
Modifiability,"> By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync. I don't know about this branch. We'll need a discussion to understand what I should do with this.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046687038:148,plugin,pluginSofaCoreAsync,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046687038,1,['plugin'],['pluginSofaCoreAsync']
Modifiability,"> Can I still ask a small question ? :-); > ; > Why keeping the Framework directory? Would something like this be simpler?:; > ; > ```; > /; > plugins; > BeamAdapter; > ...; > Sofa; > Compat; > Config; > Core; > DefaultType; > Geometry; > ...; > Component; > Collision; > ...; > scripts; > tools; > ...; > ```. like @hugtalbot said, it is to keep the sepearation framework (i.e APIs & stuff) and components (implementations).; Ideally like @guparan we should have made a framework dir/namespace structure but we decided not to break the framework code (so we still have sofa::core, sofa::helper....)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670:143,plugin,plugins,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670,3,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"> Cool @alxbilger so if there is Required data and in `Inherit::init()` is called then the error gets not triggered. Correct? We should investigate other components with this Required feature. That's the opposite: to catch an error if a required Data is missing, the component must call `Inherit::init()`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945407074:55,Inherit,Inherit,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945407074,2,['Inherit'],['Inherit']
Modifiability,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:514,Inherit,Inheritance,514,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911,7,"['Inherit', 'extend', 'inherit', 'plugin']","['Inheritance', 'extended', 'inheritance', 'plugin']"
Modifiability,"> Could you tell us the cases when the warnings will pop up with your changes?. It will pop-up if you use the deprecated functions/stuff outside of the library you are building.; For example, if one user uses/inherits a deprecated function in a component in its plugin, he will be notified.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3236#issuecomment-1225363308:209,inherit,inherits,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3236#issuecomment-1225363308,2,"['inherit', 'plugin']","['inherits', 'plugin']"
Modifiability,"> Does that also fix the place where the view matrix is saved ? If so, this might be an issue. If not, the PR is ok for me !. All GUIs saves the view along the scenefile and do not use getConfigFolder(); i.e; - https://github.com/sofa-framework/sofa/blob/8aabef6621134b28d59c2bd55065f4905cd2573b/Sofa/GUI/Qt/src/sofa/gui/qt/viewer/qt/QtViewer.cpp#L1481; - https://github.com/sofa-framework/sofa/blob/8aabef6621134b28d59c2bd55065f4905cd2573b/Sofa/GUI/Qt/src/sofa/gui/qt/viewer/qgl/QtGLViewer.cpp#L1055; - https://github.com/sofa-framework/SofaGLFW/blob/676aeb03407f78cb26f55502d2d10cd8ec093bda/SofaGLFW/src/SofaGLFW/SofaGLFWBaseGUI.cpp#L209. But actually, nowhere it is enforced that the .view file is supposed to be along the scenefile (even the filename is not standardized !); Even more, I would personally advocate to set the view file in a config folder, instead of polluting the source directory 👮🫡",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4926#issuecomment-2300007299:844,config,config,844,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4926#issuecomment-2300007299,1,['config'],['config']
Modifiability,"> Does the CIs need to be updated with the new variable names?. I think the CI does not really set any GUI/Qt cmake variables.; In any case, as there is no forwarding from the new var to the old deprecated var, it should be yes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1135319702:47,variab,variable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1135319702,2,['variab'],"['variable', 'variables']"
Modifiability,"> Hello @epernod,; > ; > thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR); > ; > Maybe we could just keep the old deprecated name with something like:; > ; > ```; > class Base {; > [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; > DeprecatedAndRemoved m_componentstate; ; > }; > ```; > ; > Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do. Hi, @damienmarchal ; I was going to do what you suggested, but while reading again your comment I realized I don't remember what we said or I didn't really get it.; In this PR there are 2 potential breaking changes:. - The upper case letter S of the Data: . ```; Data< sofa::core::objectmodel::ComponentState > d_componentstate; ; into ; Data< sofa::core::objectmodel::ComponentState > d_componentState; ; ```. - And I uncomment the line [[ deprecated ... for the m_componentstate.; ```; [[deprecated(""m_componentstate was renamed to d_componentState. Please upgrade your code"")]]; Data< sofa::core::objectmodel::ComponentState >& m_componentstate{d_componentState}; ///< the object state; ```. For which one do you want to add what you suggested? And just to be sure, the idea is to create a class ""DeprecatedAndRemoved"" that does nothing so you can declare the variable but compilation will failed when using it in the code and you put a [[deprecated(""..."" above ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287:1423,variab,variable,1423,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287,1,['variab'],['variable']
Modifiability,"> Hello @marques-bruno; > ; > My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:839,refactor,refactoring,839,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769,1,['refactor'],['refactoring']
Modifiability,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:38,coupling,coupling,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174,2,['coupling'],['coupling']
Modifiability,"> Hello guys,; > ; > CMP0057 and any other policy added before CMake 3.12 are set to NEW by https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaFrameworkConfig.cmake.in#L2; > ; > @olivier-goury I think you have this issue because you do `include(SofaMacros)` instead of `find_package(SofaFramework)`. The latter (or any find_package leading to it) must be preferred because it's more transparent (no need to manually reach a file where all the SOFA macros are defined) and it calls `cmake_minimum_required(VERSION 3.12)` before actually doing `include(SofaMacros)`.; > ; > Another `cmake_minimum_required(VERSION 3.12)` could be added at the top of SofaMacros though, so this PR makes sense in a way. Hey I take over this PR since @olivier-goury is on holidays :); Indeed, after taking a look at the problematic plugin, there's a find_package(SofaFramework)... but there's also a `include(${SofaFramework_DIR}/SofaMacros.cmake)` that shouldn't be there obviously. So the problem does come from the plugin's CMakeLists.txt if I get it right.; So not a real problem. I guess we could still homogenize the list(FIND) vs IN_LIST calls in cmake, if we want to do this right =)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831:840,plugin,plugin,840,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831,2,['plugin'],['plugin']
Modifiability,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:321,plugin,plugin,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454,2,['plugin'],['plugin']
Modifiability,"> Heyy @fredroy Yes, you got it correctly. I am trying to read a haptic device written in py2.7 into sofapython controller in SOFA. And thanks for your advice, I just tried **run as admin** when execute the runSofa.exe, and it just does not work. So usually the SofaPython could be compatible with other python packages installed from pip, right? . Hum it should be (it has been a long time I did not use the python2 plugin that I am not 100% sure). > I think I will try to debug into my python drivers and for now I am going to run these two python processes at the same time(1. a normal python console and 2. a sofapython one), and probably let the 1. console write into a .np array and let the 2. process read continuously read the array to pass the msg from haptic device. Will it work in sense of real-time property in your opinios? @fredroy Or do you have a better idea about such temporal solution. Thanks any way !!!. Hum I dont think it will work unfortunately, at least for the real-time aspect. Writting in a console is very time-consuming so the whole process `serialize -> write in a console -> read the console -> deserialize` will be too slow in my opinion.; The other `least bad way` IMO ( because directly getting the value from the device would be much better 🙃) would be to pipe or open a comm channel between the two processes either RPC or TCP/IP or unix pipes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2786#issuecomment-1068117938:417,plugin,plugin,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2786#issuecomment-1068117938,1,['plugin'],['plugin']
Modifiability,"> Hi @EmDash00; > Welcome on the SOFA GitHub and thank you for the detailed issue. It helps a lot providing a maximum of information!; > A recent work in #1361 aimed at updating the OpenCL plugin, which remained inactive for some time. But it led to the duplication of an instantiation.; > ; > Removing the line 71 should make it work.; > If so, could you please contribute this change back?. Hi @hugtalbot, thanks for the quick response. That was the original solution I tried and it _seemed_ to work, but I was skeptical if it was a bandaid over a bigger problem or not. Thank you for confirming. I'd love to make a PR back later today.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-644175288:189,plugin,plugin,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-644175288,1,['plugin'],['plugin']
Modifiability,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:806,refactor,refactor,806,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930,1,['refactor'],['refactor']
Modifiability,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:577,Plugin,PluginExample,577,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301,4,"['Plugin', 'plugin']","['PluginExample', 'plugins']"
Modifiability,"> Hi,; > ; > What is exactly the ""Haptic module""? It's weird that is tries to use directly the constructors. You are right that the constructors are protected, so they cannot be used. So I am curious to know if this code ever worked....; > ; > To fix the code, you should have a look on the [tutorials](https://github.com/sofa-framework/sofa/tree/master/applications/tutorials), for example this line: https://github.com/sofa-framework/sofa/blob/master/applications/tutorials/oneTetrahedron/oneTetrahedron.cpp#L94 It uses the friend class `New` to instantiate the objects. There are also many examples in the unit tests. The code in plugins/Haption/HaptionDriver.cpp which support virtuose device; and i try to use the friend class ::New as. `visualHaptionDOF = sofa::component::container::MechanicalObject::New<sofa::defaulttype::Rigid3dTypes>();`. i'm sorry, still error",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840284644:633,plugin,plugins,633,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840284644,1,['plugin'],['plugins']
Modifiability,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1265,refactor,refactor,1265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125,2,['refactor'],['refactor']
Modifiability,"> Hummm the code of PointSplatRenderer is strangely _very_ similar to PointSplatModel (which is also in SofaOpenGLVisual ); > Intentional ?; > The difference I could see is that the new one takes explicit data (PointSplatModel gets context, etc); > ; > In any case, I would be against copy/paste and more about refactoring/cleaning the existing code. Thanks for the comment! That code was written by @damienmarchal , I let him reply on this one. Maybe I can remove those files from this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701480994:311,refactor,refactoring,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701480994,1,['refactor'],['refactoring']
Modifiability,"> I agree. Sofa/gpu/cuda only make sens if we have sofa/gpu/opencl or sofa/multithread.... but it would be in other plugin. So if you keep the SofaCuda as first level in your namespace/hierarchy, it will work. It's also what I think. Thanks @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406189525:116,plugin,plugin,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406189525,1,['plugin'],['plugin']
Modifiability,"> I also agree that MassType should by an alias inside the class.; > ; > > This is more elegant indeed, but I am just wondering if there will be more than VecTypes and RigidTypes ?; > ; > Cuda types?. Indeed, I thought CudaVectorTypes was inheriting VecTypes but seems not...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1024066223:239,inherit,inheriting,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1024066223,1,['inherit'],['inheriting']
Modifiability,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:829,variab,variables,829,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670,2,['variab'],['variables']
Modifiability,> I did not check but I thought it was using `addData` here:; > ; > https://github.com/sofa-framework/sofa/blob/9096c3eed599622ec9eb77a3d8a61bf3932a81a7/Sofa/Component/StateContainer/src/sofa/component/statecontainer/MechanicalObject.inl#L1310. Not necessarily there is another codepath that initialize the state vectors and registe the data. Refactoring the whole part would be interesting to make that clear but it is far outside the scope of this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585:343,Refactor,Refactoring,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585,1,['Refactor'],['Refactoring']
Modifiability,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:160,config,config,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584,4,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"> I find that the intermediate directories sofa/gpu/cuda are superfluous, and redundant with the name of the plugin. It is also in the prevision of changing the namespaces (which is not done in this PR).; > What do you think @hugtalbot @epernod @damienmarchal @fredroy ?. agreed @alxbilger !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1411679270:109,plugin,plugin,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1411679270,1,['plugin'],['plugin']
Modifiability,"> I guess I would need more info with a sofadev meeting but unfortunately I wont be able to attend this week cry as far as I understood you introduce a new macro defining the type of the project, which looks good to me (and defined library/collection/module/plugin as we said) and removed the _external suffix. Looks good to me as far as I can see ! (even if I would have wished you keep the Sofa/framework/CMakeLists.txt :p ). Exactly, I refactored the sofa_add_* macros under one sofa_add_subdirectory macro. The reason is that I didn't want to create a misleading sofa_add_library macro. I like the fact that sofa_* macro have the same name than the standard CMake macro they override.; I'll resolve the conflicts and revert the framework/CMakeLists removal :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200893780:258,plugin,plugin,258,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200893780,2,"['plugin', 'refactor']","['plugin', 'refactored']"
Modifiability,"> I have two questions:; > ; > 1. Why having ""Plugin"" in the name? Not sure we have a strict policy on that but it looks like a bad practice to me. Good question, just ArticulatedSystem alone sounded a bit weird to me but I am open to remove the Plugin suffix; ; > 2. Why creating this plugin in SOFA repo and not in an external one?. Another good one 😗, I did not think about it but in my mind the process was ` <in the main codebase> -> ""hard"" applications/plugins -> ""remote"" applications/plugins`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1040050517:46,Plugin,Plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1040050517,5,"['Plugin', 'plugin']","['Plugin', 'plugin', 'plugins']"
Modifiability,"> I like this kind of refactoring. Thanks for the tremendous work!; > ; > I guess you can also implement `computeBBox` in BaseROI. Done.; But the bbox itself does not take into account the input vertices, as it should be already taken into account by the other component from which the positions come from. It avoids doing twice the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4839#issuecomment-2244302449:22,refactor,refactoring,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4839#issuecomment-2244302449,1,['refactor'],['refactoring']
Modifiability,"> I made some tests on godbolt, but I was not able to reproduce the crash. In any case, one day it would be great to remove the public inheritance from `std::vector` (but SofaCUDA probably doesn't agree). I tried to switch to at least to private inheritance but I can tell you that not only SofaCUDA is complaining 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724973503:135,inherit,inheritance,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724973503,2,['inherit'],['inheritance']
Modifiability,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:355,inherit,inheriting,355,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755,2,['inherit'],['inheriting']
Modifiability,"> I think we only have 2 ways to keep the CMake/C++ consistency we want:; > ; > 1. having a `Sofa` directory at repo root containing `Core`, `Components`, etc.; > 2. having `Core`, `Components`, etc. directly at repo root; > ; > I like the idea of having all the Framework related stuff in a subdirectory but you know what it implies: `sofa::framework::core::...`. My suggestion for the final repository layout is from root directory:; - move all plugins from ROOT/applications/plugins into a ROOT/plugins; - move all modules from ROOT/SofaKernel/modules into ROOT/modules (or in ROOT/framework i don't care); - make Sofa.XXX into ROOT/modules (resp. ROOT/framework). And the namespace in c++ file start after ""plugins"", ""modules"", ""framework"" and is fully consistant. So having all Type, Core etc... into Sofa sub-directories.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109575096:447,plugin,plugins,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109575096,4,['plugin'],['plugins']
Modifiability,"> I took the liberty to retrieve the ArticulatedControllers (which were deprecated/removed some years ago) and put it back into it. Especially because I retrieved the ""man-walking"" example which is quite cool in my opinion. But the code was created by DigitalTrainers, I dont know if it could be bothersome license-wise. Are you sure ? If it's the case it's only the controller... because the code of the articulatedSystemMapping was done in the SHACRA team...; In any case we had a contract at that time with Digital Trainers on suture that said that the SOFA code developed in the project was open-source and that Inria keeps the property. . > ; > * ArticulatedSystem as an external repository which would be referenced in _applications/plugin_ (react with 🚀 ). I vote for a separate plugin to advertise it, as suggested by Eulalie. One of the thing that should be added to the plugin is the support of Unified Robot Description Format (URDF). ; We should add a loader for it.; This is the new standard format in the community (and compatible with ROS). Thanks !. Christian",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056530424:786,plugin,plugin,786,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056530424,2,['plugin'],['plugin']
Modifiability,"> I tried with the imgui GUI in a clean build. I confirm that `runSofa -l SofaImGui -g imgui` creates a file _lastUsedGUI.ini_, with `imgui` inside. Then, if I run `runSofa -l SofaImGui`, as expected, it loads the last used gui (found in the file). However, it does not work with `runSofa` (without the `-l SofaImGui`). Normal, since the plugin is not loaded. It would be the same situation with a double-click on the executable. But do you think this is a bad or good behavior?; In my opinion it's good. The only issue is with batch GUI, hence @hugtalbot's idea to never put ""batch"" in lastUsedGUI.ini but keep the mechanism for all other GUIs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1142177121:338,plugin,plugin,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1142177121,1,['plugin'],['plugin']
Modifiability,"> I use the Windows system, sofa22.06 version. I don't know whether you mean compile in tree or compile out of tree. I compile on pychar, and the crash occurs at the beginning.我使用的是 Windows 系统，sofa22.06 版本。我不知道你的意思是 compile in tree 还是 compile out of tree。我在 pychar 上编译，崩溃发生在开始时。. How to use PyCharm to run programs directly on an uncompiled version of Sofa; Do you know how to use PyCharm to run programs on Sofa compiled by yourself in Ubuntu/Windows system? Because previously I used already compiled versions of Sofa, now I need to use a plugin Optimus (the official website only has self compiled methods).Thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-2316909409:541,plugin,plugin,541,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-2316909409,1,['plugin'],['plugin']
Modifiability,"> I was wondering if there is a way to catch the missing symbols at compile-time and I found this: https://cmake.org/cmake/help/latest/module/CheckCXXSymbolExists.html#module:CheckCXXSymbolExists. It's configuration time but it could be helpful. I tried to play with it but I was not able to make it work. I added the check in the `sofa_create_package_with_targets` macro. It could be interesting to enforce that the necessary symbols are defined at configure-time yes 🤔 . EDIT: I did some tests and it is quite bothersome to set up, (the file itself needs to be compilable, the symbol need to be defined and not only declared, adding variable in cache, etc) And I think if we do that for all potential loadable libraries, it will slow down considerably the cmake configure process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1915860120:202,config,configuration,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1915860120,4,"['config', 'variab']","['configuration', 'configure', 'configure-time', 'variable']"
Modifiability,"> Is this PR a fix for a breaks because of the merge of the NameDecoder refactoring ?. No, it's to apply the idea to matrices that `Vec3` corresponds to `Vec3d` if `SReal` is a double, and `Vec3f` if it is a `float`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387264272:72,refactor,refactoring,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387264272,1,['refactor'],['refactoring']
Modifiability,"> It has been some time now that this PR is stalled.; > As far as I know, there is still no implementation of VisitorAsync, so IMO it should be deleted.; > (and it is not really complicated to replicate if needed, it just inherits Visitor and adds a ""Status"" member). I agree. Manipulation of a `status` is understood. Setting to ""to review"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886501908:222,inherit,inherits,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886501908,1,['inherit'],['inherits']
Modifiability,"> It seems to be coming from a setup/system/configuration error than something related to SOFA itself, as the error is coming from the Windows SDK itself. Which version of MS Visual Studio are you using ?. i use vs 2022(Windows SDK version 10.0.22621.0 to target Windows 10.0.19045 MSVC 19.37.32822.0)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835503584:44,config,configuration,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835503584,1,['config'],['configuration']
Modifiability,> Just to understand @alxbilger the objects from plugins were not properly loaded ? How could it have worked before your PR ?. Does people really load plugins using the Qt GUI (with the PluginManager widget) at run-time ? I doubt a bit... 🧐,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264259624:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264259624,3,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability,> My hero! It was so frustrating to use cmake on SOFA (on Windows). Thanks a lot!; > ; > Could you tell me how you profile the cmake configuration?. https://github.com/sofa-framework/sofa/issues/1838 🥳,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277266711:133,config,configuration,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277266711,1,['config'],['configuration']
Modifiability,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:294,plugin,plugins,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083,2,['plugin'],['plugins']
Modifiability,"> Note that there are still Data variables that are not been renamed in `Sofa/Component/Topology/Container/Grid/src/sofa/component/topology/container/grid/SparseGridTopology.h`. You intend to rename them in this PR, or should we merge as it is ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2125954752:33,variab,variables,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2125954752,1,['variab'],['variables']
Modifiability,"> Note: collision pipeline must be refactored if we want to reduce the ridiculous high number of calls to `getValue`. Every time there is a check between two primitives, there is a `getValue` call to `MechanicalObject::position`, `proximity` and `alarmDistance`. Will be a very funny task to do. . EDIT: CTRL+F on 'getValue()[' shows +1000 hits.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1265522619:35,refactor,refactored,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1265522619,1,['refactor'],['refactored']
Modifiability,"> Ok so maybe I misunderstood your last comment, but the GTest find module you added in your last commit works fine on my side with cmake >= 3.12 (which is our min required version). So I guess you meant that the embedded GTest find module in recent cmake version (>=3.20) was required to have the correct targets defined, which is not the case in earlier <3.20 version of cmake (tested in 3.12), but this recent GTest find module was not building if used with cmake <3.20. In the end, your last commit seems to fix everything, so looks like a more generic option that relying on cmake config files as suggested in my last comment. I just added the cmake module from v3.20 for GTest directly in our cmake folder modules; not very clean but it does the job apparently 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1924180211:586,config,config,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1924180211,1,['config'],['config']
Modifiability,"> Several points here:; > ; > * this PR might be breaking for plugin compilation (including move of files). No it is not. The only change that could be called ""breaking"" is the renaming of the CMake options to enable/disable libraries and modules. However, those options keep the same default behavior so it will only affect people who build their own SOFA with custom options. New option names are very close to old option name so it's pretty easy to do the transition. . > ; > * this PR changes the way we organize / name the code (which is good!); > ; > ; > It would be therefore nice to rediscuss it with you both @guparan and @fredroy to all agree on the organization and merge it, but a question comes: does this seem realistic to merge it before the release?. Yes because having everything called PLUGIN_* is a nightmare.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200963331:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200963331,1,['plugin'],['plugin']
Modifiability,> Should it be replaced by `Sofa.Component`?. Does it exists? ; I'm doing it in a clean way by adding the needed plugin in the tests...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3266#issuecomment-1237943547:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3266#issuecomment-1237943547,1,['plugin'],['plugin']
Modifiability,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:162,plugin,plugin,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985,4,"['config', 'plugin', 'variab']","['config', 'plugin', 'variable']"
Modifiability,"> Some `image` plugin scenes fail because the template used is not compiled in the standard set. It needs the full set. Only the standard set is compiled on the CI.; > ; > Decision to take:; > ; > 1. The failing scenes are ignored on the CI; > ; > 2. The failing scenes are modified to use a templated available in the standard set; > ; > 3. The CI compiled the full set; > ; > ; > I am in favor of the third option, but we already talked about it in [sofa-framework/ci#15](https://github.com/sofa-framework/ci/pull/15). It seems to take too much time at the compilation. I think there is a 4th solution, adding the ImageB type in the ""standard"" set, as it is seems quite important if lots of scenes need it after all",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1289796406:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1289796406,1,['plugin'],['plugin']
Modifiability,"> Sorry, my question was more, do you know why the index 5 was inserted multiple time?. Ah, yes, because of:; https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaCarving/CarvingManager.cpp#L183-L194. We could change `elemsToRemove` from `vector` to `set` at the cost of a bit performance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1244059611:174,plugin,plugins,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1244059611,1,['plugin'],['plugins']
Modifiability,"> TODO: decide if autoloading should off by default (and force the users to explicitly load their own necessary libs in their scenes). Even if autoloading is disabled, the Qt GUI loads its own list of plugins (the one saved by the plugin manager GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3103#issuecomment-1177256086:201,plugin,plugins,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3103#issuecomment-1177256086,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"> Tested by @fredroy and ready to be merged !. Not ready to be merged unfortunately; on Windows, CMake complains:; ```; CMake Error at Sofa/framework/Config/cmake/SofaMacrosInstall.cmake:858 (get_target_property):; get_target_property() called with non-existent target ""ZSTD::ZSTD"".; Call Stack (most recent call first):; applications/plugins/CImgPlugin/CMakeLists.txt:101 (sofa_install_libraries). ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2132471684:150,Config,Config,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2132471684,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"> Thank you @ziqiu-zeng for the PR, I can see I did some mistake in the compat files grimacing; > ; > > Enable compilation with cuda plugins: SofaAsyncSolvers, SofaCUDALDI, SofaCUDASolvers, SofaCUDADev Please also update the plugins; > ; > Unfortunately, these plugins are private plugins from the mimesis team so we cannot access/fix/update them thinking. Hello,. I have fixed the bugs in these private plugins.; What I mean is that the users of these plugins should pull the modifications.; Sorry for the misunderstanding, I will edit the commit message.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102767377:133,plugin,plugins,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102767377,6,['plugin'],['plugins']
Modifiability,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:98,config,configuration,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034,2,['config'],['configuration']
Modifiability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:1626,config,configuration,1626,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719,1,['config'],['configuration']
Modifiability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:318,plugin,plugin,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586,1,['plugin'],['plugin']
Modifiability,"> Thanks again @ScheiklP for these investigations !; > ; > Normally the reset function is not supposed to have any cleanup results as it is only there to set again (re-set) the component in a previous state.; > ; > It is the ""cleanup"" that is called before removal/deletion of the component from the graph. Most of these components also do not have a `cleanup` function :D . I adapted the `sofaProjectExample` to match the python scene above to make memory profiling and debugging a bit easier. Same memory leak occurs. The code:; ```cpp; #include <sofa/defaulttype/VecTypes.h>. #include <sofa/component/collision/detection/algorithm/BruteForceBroadPhase.h>; #include <sofa/component/collision/detection/algorithm/BVHNarrowPhase.h>; #include <sofa/component/collision/detection/algorithm/DefaultPipeline.h>. #include <sofa/component/collision/detection/intersection/NewProximityIntersection.h>. #include <sofa/component/collision/response/contact/DefaultContactManager.h>. #include <sofa/component/collision/geometry/PointModel.h>. #include <sofa/simulation/graph/DAGNode.h>; #include <sofa/simulation/graph/DAGSimulation.h>; #include <sofa/simulation/graph/init.h>. #include <sofa/simulation/DefaultAnimationLoop.h>. #include <sofa/component/statecontainer/MechanicalObject.h>. #include <sofa/core/objectmodel/Context.h>; #include <sofa/simulation/Node.h>; #include <sofa/simulation/Simulation.h>; #include <SofaComponentAll/initSofaComponentAll.h>. #include <sofa/helper/system/FileRepository.h>; #include <sofa/helper/logging/LoggingMessageHandler.h>; #include <sofa/core/logging/PerComponentLoggingMessageHandler.h>; #include <sofa/helper/BackTrace.h>. using namespace sofa::defaulttype;. using sofa::simulation::Node;; using sofa::simulation::graph::DAGNode;; using sofa::helper::system::DataRepository;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::com",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:377,adapt,adapted,377,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,1,['adapt'],['adapted']
Modifiability,"> That's a very popular library. I agree with this move.; > ; 17.5k ⭐ 😗 (one day, SOFA, one day...). but yes glfw+imgui+stb is a well-known triplet . > I don't understand in your PR how it replaces the need for CImgPlugin. Probably, because I don't know how images loading is managed. Image loading is managed through a factory (""png"" -> use this, ""bmp"" -> use that, etc) and this factory is populated at run-time. ; Before this PR, it was done by CImgPlugin (cimg was used because it can manage several file formats). But it was decided to be optional for some reason, so it was a plugin (and not a ""hard"" component in the framework).; Now that stb does not depend on any external library, no hassle with cmake/deps/dlls so thats why I put it in SofaHelper.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2551#issuecomment-997816638:582,plugin,plugin,582,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2551#issuecomment-997816638,1,['plugin'],['plugin']
Modifiability,"> The right syntax is the following:; > ; > ```c++; > const auto visualHaptionDOFSPtr = sofa::core::objectmodel::New<sofa::component::statecontainer::MechanicalObject<sofa::defaulttype::Rigid3dTypes>>();; > visualHaptionDOF = visualHaptionDOFSPtr.get();; > nodeHaptionVisual->addObject(visualHaptionDOFSPtr);; > visualHaptionDOF->name.setValue(""rigidDOF"");; > ```; > ; > Note that this plugin has not been maintained for a long time. You should expect some changes in order to make it work. Here are some changes I made today to fix the configuration: #4338. But it does not fix the compilation.; > ; > If you succeed to make it work, a pull request would be very welcome ;). We are in the process of adapting the sofa22.12 plugin for homebrew devices, with reference to the Haptic plugin. No problem of course, I'll commit our code as soon as it's aligned and tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1841943965:386,plugin,plugin,386,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1841943965,5,"['adapt', 'config', 'plugin']","['adapting', 'configuration', 'plugin']"
Modifiability,"> This is breaking, right @fredroy ?. Breaking in term of user configuration, yes ; as the cmake option names changed 🫤",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1143218000:63,config,configuration,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1143218000,1,['config'],['configuration']
Modifiability,"> To answer the `dynamic_cast` concern, the link `l_linearSolver` can be of type `PartialLinearSolver` instead of `LinearSolver`. That is a big question: does a Partial Linear Solver implies that it also implements Linear Solver ? (and so inherits from LinearSolver, and BTD inherits only from PartialLinearSolver); In this case your answer is right.; But in the case that it is not (could be partial and unable to solve complete system), we cannot do a link to a partial linear solver, as we need some other functions from the LinearSolver API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227872942:239,inherit,inherits,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227872942,2,['inherit'],['inherits']
Modifiability,"> To be noted @fredroy : in _Sofa/GUI/Qt/CMakeLists.txt_, Sofa.GL is only found in a QUIET way and it was not linked explicitely (no where `target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL)`). Could you let me know whether the proposed change seems reasonable to you. If I remember well. the find_package() is just used to see if Sofa.GL has been enabled and enable the 2 Viewers (which needs GL for themselves) in the CMake config.; Sofa.Gui.Qt does not need Sofa.GL by itself as the viewer *may* not necessarily use OpenGL (practically it was the case only with the RHI plugin). So no, you dont need to link Sofa.GL to Sofa.Gui.Qt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4844#issuecomment-2246948999:429,config,config,429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4844#issuecomment-2246948999,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:481,extend,extend,481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002,2,['extend'],['extend']
Modifiability,> What happens if you forget the required plugins in the ci-dependent PRs?. An error message and no object instantiated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2372631309:42,plugin,plugins,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2372631309,1,['plugin'],['plugins']
Modifiability,"> Would it be the right time to put metis in a separate module in order to link it in a plugin? If you agree with this approach of course. This is a really good idea, but it will take a little time so I think it would be better to do it in an other PR 🤠",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1048793893:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1048793893,1,['plugin'],['plugin']
Modifiability,> You kind of renamed an alias. Does it break anything?. Indeed... I don't think it was used in the plugin. Maybe in external plugins. I can add support + deprecated message,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2673#issuecomment-1033746822:100,plugin,plugin,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2673#issuecomment-1033746822,2,['plugin'],"['plugin', 'plugins']"
Modifiability,> `sofa::component::mass::RigidMass` in Compliant must also implement `isDiagonal`. Any clue what it should return? @jnbrunet. Looks like it is not diagonal because of the [rotational part](https://github.com/sofa-framework/sofa/blob/8d3fcd247583af0ba1fe3da7b113c6bf5a7f7006/applications/plugins/Compliant/misc/RigidMass.h#L267).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-802776407:288,plugin,plugins,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-802776407,1,['plugin'],['plugins']
Modifiability,> ahah.... shame all the config for PR are with options... so we don't know if it works... Now I understand how we didn't noticed that before...I only look at PR much often that the full master dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778490561:25,config,config,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778490561,1,['config'],['config']
Modifiability,> did you fix all the ` unused-but-set-variable` warnings @fredroy ?. Yep (but only for the set I mentioned),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1424993650:39,variab,variable,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1424993650,1,['variab'],['variable']
Modifiability,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:59,inherit,inherit,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116,6,['inherit'],"['inherit', 'inheritance']"
Modifiability,"> the ../lib directory for other platforms like linux, where the plugins are usually stored in a lib sub folder of the parent directory where the application reside. For example from the directory where the runSofa executable is, you can look for the directory where SofaPython.lib is located by doing cd ../lib. I understand that and I agree but I'm confused because that's NOT what you were doing [here](https://github.com/sofa-framework/sofa/commit/f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c#diff-7d60c79bd19129acd6a97363d9130f2cR82) with `FileRepository PluginRepository(""SOFA_PLUGIN_PATH"", ""./"");`.; Nevermind, I'm gonna open a new PR to change this and fix the consistency issue with `Utils::getPluginDirectory()`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158:65,plugin,plugins,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158,2,"['Plugin', 'plugin']","['PluginRepository', 'plugins']"
Modifiability,> the ci does not compile this plugin in any case so I guess it is ready 😅. trust me 🙈 ; ![image](https://github.com/sofa-framework/sofa/assets/21199245/277cd645-99da-408b-8d74-b6d58d3b05d2),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4661#issuecomment-2063311567:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4661#issuecomment-2063311567,1,['plugin'],['plugin']
Modifiability,"> you turn SofaCUDA plugin to on by my fault? :). @epernod no don't worry, the CI was not happy in SofaCUDA with one of my PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2440#issuecomment-948609845:20,plugin,plugin,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2440#issuecomment-948609845,1,['plugin'],['plugin']
Modifiability,@Camille-K there are several places where you declare variables with the same name than another variable already declared before. Please keep names unique,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713:54,variab,variables,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713,2,['variab'],"['variable', 'variables']"
Modifiability,"@ChristianDuriez ; One scene was crashing in SensableEmulation plugin : testOmniDriverEmu.scn ; I fixed it by adding the option : ```solveVelocityConstraintFirst=""true""```. I have no idea why actually! Could you give some insight?. I fixed some added warnings, let me know if this was normal:; Note that : ; - in GenericConstraintSolver.cpp line 368 : none of the function parameter (cParams, res1 and res2) were unused.; - in GenericConstraintCorrection.cpp line 277 : the complianceFactor is not used. What appears really necessary, is to have some documentation on this constraint pipeline. This could be a good task for the STC#5 don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258:63,plugin,plugin,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258,1,['plugin'],['plugin']
Modifiability,"@EulalieCoevoet , @VannesteFelix can one of you test this branch with our plugins SoftRobots & MOR on the big's felix machine to see if this work well ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625:74,plugin,plugins,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625,1,['plugin'],['plugins']
Modifiability,"@EulalieCoevoet ; Thanks for this PR. Just for the record, why ?; `What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797#issuecomment-444036298:98,refactor,refactor,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-444036298,1,['refactor'],['refactor']
Modifiability,"@EulalieCoevoet apparently one of the change does change something, some (all?) scenes using this plugin) crashes:; ```; [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm.robot.py](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples_ArticulatedArm/robot_py/); [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples.ArticulatedHierarchyBVHController.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples/ArticulatedHierarchyBVHController_scn/); [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples.ArticulatedSystemMapping.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples/ArticulatedSystemMapping_scn/); ```; The trace tells it crashes here:; ```; sofa::component::mapping::ArticulatedSystemMapping<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<1u, double>, sofa::type::Vec<1u, double>, double>, sofa::defaulttype::StdRigidTypes<3u, double>, sofa::defaulttype::StdRigidTypes<3u, double> >::applyJT(sofa::defaulttype::MapMapSparseMatrix<sofa::type::Vec<1u, double> >&, sofa::defaulttype::MapMapSparseMatrix<sofa::defaulttype::RigidDeriv<3u, double> > const&, sofa::defaulttype::MapMapSparseMatrix<sofa::defaulttype::RigidDeriv<3u, double> >*); ```; so maybe the typo was not one... 🧐😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1489730917:98,plugin,plugin,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1489730917,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"@JeremieA ; Hi Jeremie, as you might know, I am currently working on multithreaded simulation with SOFA.; In this PR, I propose to remove the checkValidStorage() test in Node::ExecuteVisitor function because it prevents some parallel execution and also suggest to remove the thread specific declaration for ExecParams variable.; Do you see a reason to keep the ExecParams specific for each thread?; I especially noticed accessing the thread local memory of a thread A from the thread B with these different ExecParams is significantly slow (~20%) . ; Your opinion would be valuable for us. Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929:318,variab,variable,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929,1,['variab'],['variable']
Modifiability,@JeremieA I re-read carefully your comment on #113 to compare to what @maxime-tournier is proposing (which look an improvement against the actual code). I actually forgot that you made your own refactoring of theses classes and don't want to interfere so do you prefer we can just close this PR and wait for your refactoring ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782:194,refactor,refactoring,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782,2,['refactor'],['refactoring']
Modifiability,"@agpetit @fspadoni after discussion, we are wondering whether the declaration type should rather be done within the image plugin instead of the multithreading plugin ? what's your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923:122,plugin,plugin,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923,2,['plugin'],['plugin']
Modifiability,"@alxbilger . > Hello, I think the actual error is in the output of the Cmake Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Perf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:969,Config,Config,969,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,1,['Config'],['Config']
Modifiability,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:29,refactor,refactoring,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386,4,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,@alxbilger I think the question raised by @guparan is why not removing `SOFA_NO_UPDATE_BBOX` directly from here.; Is there an advantage / a sense to keep a CMake variable making the behavior (default value) CMake-dependent ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176221927:162,variab,variable,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176221927,1,['variab'],['variable']
Modifiability,"@alxbilger Thanks!. ```; Before unload; Total Base: 31970 31936 Diff: 34; After unload; Total Base: 31970 31939 Diff: 31; Before unload; Total Base: 32002 31968 Diff: 34; After unload; Total Base: 32002 31971 Diff: 31; Before cleanup; Total Base: 32002 32000 Diff: 2; Total Base: 32002 32000 Diff: 2; After cleanup; Total Base: 32002 32001 Diff: 1; ```. So that looks ok, right? At least the difference is more or less constant. :D ; But the tracker only tracks actual objects, right? So Creators, Factories, and others that do not inherit from base are not tracked. Could it be a vector/map that constantly receives new values but is not cleanup up with `reset`/`cleanup`?; Similar to what was happening in https://github.com/sofa-framework/SofaPython3/pull/304",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109:532,inherit,inherit,532,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109,1,['inherit'],['inherit']
Modifiability,@alxbilger you did not keep the (git) history of the files when moving to the new plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780223067:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780223067,1,['plugin'],['plugin']
Modifiability,"@alxbilger, @bakpaul was the problem of fetched plugin solved ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4343#issuecomment-2058976267:48,plugin,plugin,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4343#issuecomment-2058976267,1,['plugin'],['plugin']
Modifiability,"@alxbilger, @fredroy, @hugtalbot I welcome some nameing & refactoring suggestion here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1544686998:58,refactor,refactoring,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1544686998,1,['refactor'],['refactoring']
Modifiability,"@bakpaul This PR does not take the latest commits in sofa-framework/ci. Hence, it does not fetch and compile the plugin CSparseSolvers. Here is what I see in the logs:; ```; --------------- Clone CI scripts ---------------; pwd = /builds/workspace/sofa-framework/PR-4258/ubuntu_gcc_options_release; Cloning into 'ci'...; 640400517e592bfa826a46dea29b6ddd512abf02 Merge pull request #21 from hugtalbot/202308_remove_meshsteploader_from_list; CI scripts are available in /builds/workspace/sofa-framework/PR-4258/ubuntu_gcc_options_release/ci/scripts; ```; It's not the latest commit in the master branch. Can you investigate why?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1822533494:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1822533494,1,['plugin'],['plugin']
Modifiability,"@damienmarchal , discussions during the SOFA-dev meeting lead to a question over the developed design and your opinion is needed. . The problem was that some scenes tests where crashing at exit. This is due to the SofaPython3 cache (`s_objectcache` there https://github.com/sofa-framework/SofaPython3/blob/1b5d271aa21df06c4c5ab75599e364adb0c1e9be/Plugin/src/SofaPython3/DataHelper.cpp#L252C1-L252C73) . The problem was that this is a static object containing python objects and is thus cleaned at the very end of the program exit, after the python interpreter, which is not authorized. . To fix it, following [pybind11 suggestions](https://pybind11.readthedocs.io/en/stable/advanced/misc.html) I've added a member to the module Sofa.Core that insured that the cleanup is called while the interpreter is still alive (see the PR https://github.com/sofa-framework/SofaPython3/pull/425). But is was not enough because the interpreter is not cleaned correctly either : the static method ""Release"" of SofaPython3, in charge of cleaning up python and deleting the interpreter was never called when launching scene in runSofa. . This lead to the need of cleaning up *explicitly* the plugin before exiting the main function. This design was not liked by every dev, some wanting a Raii-like cleanup, in the destructor of some member, which is in my mind not possible because the interpreter instance is static in the SofaPython3 plugin and thus we have no guaranty that it would not be deleted before any other static member.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2233357216:347,Plugin,Plugin,347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2233357216,3,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"@damienmarchal ; As @fjourdes stated, it could happen that the target name is just different from the binary (compiled) name.; For now, the CMake process generates the config name using the target name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312813481:168,config,config,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312813481,1,['config'],['config']
Modifiability,"@damienmarchal ; This is yet another instance of the ""most vexing parse"", which I assume most c++ programmers are familiar with (c++ really is a terrible language). However, clang issues a warning and I suspect gcc does too, so this is not really an issue to me. An elegant fix is to turn this warning into an error :-) . I understand the problem can go unnoticed since the value is never used elsewhere and won't get to trigger a type error down the road, so removing the default value for the constructor argument seems like a reasonable (and portable) fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138:545,portab,portable,545,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138,1,['portab'],['portable']
Modifiability,@damienmarchal Do you still plan to change the variable name?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446646296:47,variab,variable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446646296,1,['variab'],['variable']
Modifiability,@damienmarchal I am not so sure. It is not excluded that this variable is actually used in a CUDA-based template specialization of the linear solvers (in a private plugin).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556779609:62,variab,variable,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556779609,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:273,plugin,plugin,273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064,1,['plugin'],['plugin']
Modifiability,@damienmarchal I was looking for errors with this scene : . > ./runSofa -g batch -s dag -n 100 /home/douaille/SOFA/fixTestScene/applications/plugins/Flexible/examples/demos/steak.scn. The segfault comes from : https://github.com/sofa-framework/sofa/commit/e65ef095fd96b69b3c9036b2e839f9429b4b022b#diff-179a1b721f69963e4d1fd5ee846ffe22R57. What does this line ? I tried remove it but exception_mode is used everywhere in Cimg.h and for its next call it crash.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560:141,plugin,plugins,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"@damienmarchal ok for the test. To have an example, could you point me out an example of test done in a plugin. Thanks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076:104,plugin,plugin,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076,1,['plugin'],['plugin']
Modifiability,"@damienmarchal thanks for your suggestion. It makes sense.; I am not against making things more generic, but here I just noticed that StandardTetrahedralFEMForceField does not show up when I wanted do display force fields (similar to the other tetra force fields). To make a quick fix, I just used the same code than TetrahedronHyperelasticityFEMForceField.; If it is decided to make a deeper refactoring, I'll quit this job as it is not my primary goal.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088787859:393,refactor,refactoring,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088787859,1,['refactor'],['refactoring']
Modifiability,"@damienmarchal yes totally agree on the different points. But as you say: ""for the future"".; I will move one step at a time, by making this plugin works again first. But indeed it is a topic I wanted to speak about but the meeting was already too long.; It would be good to either merge some plugins or have some high level option in the cmake of sofa, for example, SOFA_HAVE_FLUID which will add, Sph, Eulerian, Volumetric rendering plugins etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470:140,plugin,plugin,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"@damienmarchal yes, setValue is public, but if you look at the implementation of setValue():; ```. void setValue(const std::string& v); {; *beginEdit()=v;; endEdit();; }; ```; it uses the operator=() that is private (and not implemented..):; ```; private:; DataFileName(const Inherit& d);; DataFileName& operator=(const DataFileName&);. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/321#issuecomment-313107628:276,Inherit,Inherit,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/321#issuecomment-313107628,1,['Inherit'],['Inherit']
Modifiability,"@damienmarchal you mean, delete cmake variables ? or something else ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333556507:38,variab,variables,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333556507,1,['variab'],['variables']
Modifiability,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:623,plugin,pluginization,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312,1,['plugin'],['pluginization']
Modifiability,"@damienmarchal, headlessrecorder is ready. For the communication plugin I found à bug in zmq matrix support. And I'm in holiday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353144382:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353144382,1,['plugin'],['plugin']
Modifiability,@damienmarchal:. - BVHNarrowPhase is in SofaBaseCollision; - ParallelBVHNarrowPhase is in MultiThreading and inherits from BVHNarrowPhase. Can I add ParallelBVHNarrowPhase as BVHNarrowPhase in the ObjectFactory? We would have SofaBaseCollision.BVHNarrowPhase and MultiThreading.MultiThreading. Does it make sense to do that?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-996795781:109,inherit,inherits,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-996795781,1,['inherit'],['inherits']
Modifiability,@dessteph I prepared the test in Sofa/Component/LinearSolver/Direct/tests/SparseLDLSolver_test.cpp. Could you add the check of the result at the end? You will need to use another software (matlab?) to compute the ground truth and compare it to the variable `JMInvJt` containing our result. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1174910942:248,variab,variable,248,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1174910942,1,['variab'],['variable']
Modifiability,"@dessteph I suggest you start again your investigation but taking into account https://github.com/sofa-framework/sofa/pull/3072. In other words, in your CMake, enable the variable `METIS-GKLIB_GKRAND`. This way we should have comparable results across different architectures.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1167289730:171,variab,variable,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1167289730,1,['variab'],['variable']
Modifiability,@epernod this PR fixes ParticleSink alright but two other tests fail _because_ of the new msg_error() in [ParticleSink.inl](https://github.com/sofa-framework/sofa/blob/aeea55fbd91e165ee323e3f4fcecb2e430135328/applications/plugins/SofaSphFluid/src/SofaSphFluid/ParticleSink.inl#L82) 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998:222,plugin,plugins,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998,1,['plugin'],['plugins']
Modifiability,"@fjourdes ; - The SOFA_LIBSUFFIX variable is only used by PluginManager to find a lib. The problem here is that we are in a debug build and some libs like SceneCreator are not suffixed with ""_d"". I don't see where SOFA_LIBSUFFIX would be helpful.; - Not yet for #502. Will do asap... @damienmarchal ; I'm on it. Quick and easy fix is to add `set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ""_d"")` in SceneCreator's CMakeLists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755:33,variab,variable,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755,2,"['Plugin', 'variab']","['PluginManager', 'variable']"
Modifiability,@fjourdes: Ok I understand your suggestion but I didn't touch to PluginRepository construction because I didn't understand what you wanted to do in f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c; Could you explain?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342552853:65,Plugin,PluginRepository,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342552853,1,['Plugin'],['PluginRepository']
Modifiability,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:62,refactor,refactor,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805,2,['refactor'],['refactor']
Modifiability,@fredroy Is it possible in a plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717181731:29,plugin,plugin,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717181731,1,['plugin'],['plugin']
Modifiability,"@fredroy It's good to know that it does not apply in case of `constexpr`.; You just kept a static variable (`InvalidSet`), which is not `constexpr`. SIOF can apply. `InvalidSet` constructor can be `constexpr` only from C++20.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929889207:98,variab,variable,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929889207,1,['variab'],['variable']
Modifiability,"@fredroy So Dediced to follow the small step strategy... just move RotationMatrix in SofaBaseLinearSolver for the moment.; For the moment I suggest to keep everything in SofaBaseLinearSolver... as a refactoring of this part would requieres to:; - unify the namespaces to match the modules names; - and if needed to move all the matrices in their proper module (Sofa.Matrix, Sofa.Type).; - and imply a change in a lot of #include everwhere of our code base. . In addition, after this PR is supposed to be the cleaning or other part of SofaBaseLinearSolver (see #2238)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-886712665:199,refactor,refactoring,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-886712665,1,['refactor'],['refactoring']
Modifiability,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:399,plugin,plugin,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955,4,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:369,refactor,refactored,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825,2,['refactor'],['refactored']
Modifiability,@fredroy Totally removed or in an external plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085942769:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085942769,1,['plugin'],['plugin']
Modifiability,"@fredroy Yeah! The scene no longer crashes! But I have the following errors:. ```; [ERROR] [GLSLShader] ERROR: Compilation of Fragment shader failed:; [ERROR] [GLSLShader] From File: C:\Users\Alex\Dev\sofa1\src\applications\plugins\VolumetricRendering\examples/share/shaders/tetra.frag; [ERROR] [GLSLShader] 0(8) : warning C7555: 'varying' is deprecated, use 'in/out' instead; 0(16) : error C7616: global variable gl_Color is removed after version 140; 0(35) : warning C7533: global variable gl_FragColor is deprecated after version 120. [ERROR] [GLSLShader] ERROR: Compilation of Vertex shader failed:; [ERROR] [GLSLShader] From File: C:\Users\Alex\Dev\sofa1\src\applications\plugins\VolumetricRendering\examples/share/shaders/tetra.vert; [ERROR] [GLSLShader] 0(20) : error C7616: global variable gl_ModelViewProjectionMatrix is removed after version 140; 0(23) : error C7616: global variable gl_ClipVertex is removed after version 140; 0(23) : error C7616: global variable gl_ModelViewMatrix is removed after version 140; 0(23) : error C7616: global variable gl_Vertex is removed after version 140. [ERROR] [GLSLShader] ERROR: Compilation of Geometry shader failed:; [ERROR] [GLSLShader] From File: C:\Users\Alex\Dev\sofa1\src\applications\plugins\VolumetricRendering\examples/share/shaders/tetra_triangles.geo; [ERROR] [GLSLShader] 0(45) : warning C7533: global variable gl_FrontColor is deprecated after version 120; 0(46) : error C7616: global variable gl_ClipVertex is removed after version 140. [ERROR] [GLSLShader] SHADER compilation failed.; [ERROR] [OglFloat4Attribute(OglFloat4Attribute1)] Variable ""a_vertexColor"" NOT FOUND in shader ""[ 'share/shaders/tetra.vert' ]""; [ERROR] [Node()] Object 'OglFloat4Attribute1' already has a node (/OglFloat4Attribute1). Please remove it from this node before adding it to a new one.; [ERROR] [OglFloat4Attribute(OglFloat4Attribute1)] TopologyData: value already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1867351181:224,plugin,plugins,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1867351181,8,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:86,plugin,plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877,4,['plugin'],['plugin']
Modifiability,"@fredroy as a matter of fact, I already saw people using the plugin manager UI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264811372:61,plugin,plugin,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264811372,1,['plugin'],['plugin']
Modifiability,@fredroy could you try to add :; ``` cpp; Inherit::init();; ```. to call Mapping `init()` which include the function `testMechanicalState()` checking the `isMechanical` property.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3473#issuecomment-1325267101:42,Inherit,Inherit,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3473#issuecomment-1325267101,1,['Inherit'],['Inherit']
Modifiability,@fredroy interesting. I did search for this class in the SOFA repo and found nothing. I counted on the CI to warn if it was in an external plugin. But the ultimate check from senior SOFA developers was more reliable 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4985#issuecomment-2348170266:139,plugin,plugin,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4985#issuecomment-2348170266,1,['plugin'],['plugin']
Modifiability,@fredroy it seems a problem due to the plugin appear (VS2013).; Any idea of its origin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292519112:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292519112,1,['plugin'],['plugin']
Modifiability,@fredroy thanks for the PR but I still crash in `applications/plugins/VolumetricRendering/examples/OglTetrahedralModel.scn` and `applications/plugins/VolumetricRendering/examples/OglVolumetricModel_hexa.scn`.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1866736213:62,plugin,plugins,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1866736213,2,['plugin'],['plugins']
Modifiability,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:86,Plugin,Plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320,1,['Plugin'],['Plugin']
Modifiability,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:458,plugin,plugin,458,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257,10,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:338,plugin,plugins,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052,1,['plugin'],['plugins']
Modifiability,"@fspadoni i am using this feature for multithreading a RealSense RGB-D camera, through a RealSense grabber component in the image plugin (for which i will prepare another PR :-)), with other components in another plugin for non-rigid tracking goals. And it works well!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705:130,plugin,plugin,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705,2,['plugin'],['plugin']
Modifiability,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:384,variab,variable,384,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,6,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,@guparan @fredroy I guess this plugin is not compile by the CI. Would it make sense to add it?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085728300:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085728300,1,['plugin'],['plugin']
Modifiability,"@guparan @hugtalbot could you check this plugin is compiled on the CI, I have a doubt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542637878:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542637878,1,['plugin'],['plugin']
Modifiability,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:453,Plugin,PluginManager,453,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292,1,['Plugin'],['PluginManager']
Modifiability,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:121,refactor,refactoring,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270,1,['refactor'],['refactoring']
Modifiability,@guparan Thank you for the help. I have refactored it accordingly. It is also able to handle the case for number of iterations set to 1.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378657803:40,refactor,refactored,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378657803,1,['refactor'],['refactored']
Modifiability,"@guparan Your proposition does not work in the unlikely case of a plugin name containing "".dll"" in its name. The initial contract was, from the comments, to find the extension in the end of the string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188,1,['plugin'],['plugin']
Modifiability,@guparan can you enable the HeadlessRecorder plugin ? It looks like this plugin is not turned on on CI :/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781,2,['plugin'],['plugin']
Modifiability,@guparan do you remember what is the status of CGal plugin config on windows?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,@guparan faut il changer ce fichier: https://github.com/sofa-framework/ci/blob/master/scripts/configure.sh#L338-L344,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662089855:94,config,configure,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662089855,1,['config'],['configure']
Modifiability,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:16,plugin,plugins,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552,2,['plugin'],['plugins']
Modifiability,"@guparan thanks for the reply!; Actually, ASAP would be great: I need to this setup the CI for the plugin SofaPython3 alongside our other plugins @SofaDefrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813:99,plugin,plugin,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:309,config,configured,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117,2,['config'],['configured']
Modifiability,"@guparan what's this macro for actually (sofa_auto_set_target_properties) ? apparently it is only used in external plugins (only SoftRobots.Inverse it seems...) maybe the macro should be removed, and SoftRobots.Inverse updated..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575:115,plugin,plugins,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575,1,['plugin'],['plugins']
Modifiability,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:175,plugin,plugin,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429,14,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"@guparan, @hugtalbot, @fredroy I have done the split of PR #548... Here is CImg related changed...; fix a serie of failing scene in Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/562#issuecomment-358634718:132,Flexible,Flexible,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562#issuecomment-358634718,1,['Flexible'],['Flexible']
Modifiability,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:187,Plugin,PluginRepository,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134,2,['Plugin'],['PluginRepository']
Modifiability,@guparan:; `/media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-975/ubuntu_gcc-5.4_options_release/src/applications/plugins/image/extlibs/DiffusionSolver/DiffusionSolver.h:4:33: fatal error: CImgPlugin/SOFACImg.h: Aucun fichier ou dossier de ce type; compilation terminated.`. Looks like it's used also that way in the SOFA codebase. How should I proceed? should I put back the include of `CImgPlugin/../` and remove the include of `CImgPlugin` + cleanup the codebase of all direct inclusions? Or do the opposite..?; Or should I just revert my previous commit?...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105:119,plugin,plugins,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105,1,['plugin'],['plugins']
Modifiability,"@hugtalbot , I think it's not possible to move the declaration of the new DataExchange type class in the Image plugin.; The DataExchange component is a template class and it can't be used across the dynamic libraries but it must be instantiate and exported in the library where they are defined for every data type.; For instance in the image plugin the DataExchange template class can't be used to defined the class DataExchange< ImageUC > because the DataExchange template class is defined in another dynamic library. That should be allow only across static libraries.; correct me if I am wrong.; I didn't realize that this morning when we talked about it at the SOFA meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279:111,plugin,plugin,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279,2,['plugin'],['plugin']
Modifiability,"@hugtalbot ; My guess is the following:; When loading the SofaCUDA plugin, the module check if it can detect a cuda device. If there is no such a device, it now triggers an error, whereas it was just a print before. In other words, the behavior does not change (loading of the plugin), but the log message is now counted as an error. ; I think it is a good thing. It helps to identify the scenes that cannot be executed on the CI. For the case of the failing scene. I'll just remove the `<RequiredPlugin name=""SofaCUDA""/>` which is even not required.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503:67,plugin,plugin,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503,2,['plugin'],['plugin']
Modifiability,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:95,refactor,refactor,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622,1,['refactor'],['refactor']
Modifiability,"@hugtalbot CI is not happy with this one... ; ``` ; applications/plugins/CGALPlugin/CylinderMesh.inl:503:6: error: ; ‘void cgal::CylinderMesh<DataTypes>::draw() ; [with DataTypes = sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>]’ ; marked ‘override’, but does not override; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407:65,plugin,plugins,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407,1,['plugin'],['plugins']
Modifiability,@hugtalbot For me the term global applied on a variable is not appropriate for a static class member. Is it?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3491#issuecomment-1332049529:47,variab,variable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3491#issuecomment-1332049529,1,['variab'],['variable']
Modifiability,@hugtalbot Is plugin Sensable now obsolete with the new Geomagic plugin out ?; Otherwise these fix were solving my issues at the time.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799:14,plugin,plugin,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799,2,['plugin'],['plugin']
Modifiability,"@hugtalbot The label is actually ""postponed"". The reason is I'm not convinced that the variable also states that there are zeros in the compressed values. I did not see anything about that property in the code. In any case, I do not need this PR to continue. So it can be closed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1128663819:87,variab,variable,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1128663819,1,['variab'],['variable']
Modifiability,"@hugtalbot Yes, It is related to QT configuration, and It's hard to build in MAC M2 Processor with. I tried to compile and install the qt with source code, but it is not adapted to my laptop. I hope the successful case can be provided if possible and I will follow it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1302025698:36,config,configuration,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1302025698,2,"['adapt', 'config']","['adapted', 'configuration']"
Modifiability,@hugtalbot `UnilateralInteractionConstraint` inherits from `PairStateAccessor` which checks at init that it has valid links to mechanical objects. So an error should normally trigger...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3533#issuecomment-1573276801:45,inherit,inherits,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3533#issuecomment-1573276801,1,['inherit'],['inherits']
Modifiability,@hugtalbot any news ? Maybe from the Caribou plugin ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/224#issuecomment-774035825:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/224#issuecomment-774035825,1,['plugin'],['plugin']
Modifiability,@hugtalbot could you review my review in commit cb4eb09; I had to split your VecCoord position device into 2 variables. As in fact the original Data is linked to rigid mechanical Object in the scene and so changing its size and adding new position change the behavior of the rigid objects.; I tested your Demo scene and I can still nicely see the omni moving. Well done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983:109,variab,variables,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983,1,['variab'],['variables']
Modifiability,@hugtalbot the variable m_savedPositions is not defined.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-743479048:15,variab,variable,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-743479048,1,['variab'],['variable']
Modifiability,@jnbrunet did you do something similar in the plugin SofaCaribou ? aka set an EigenMatrix in a Data?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-884057216:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-884057216,1,['plugin'],['plugin']
Modifiability,@jnbrunet no existing example scene to my knowledge. other comments taken into account :+1: thanks to the reviewers!. PS: plugin is listed in the CMakeLists in _applications/plugins_,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-744738890:122,plugin,plugin,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-744738890,1,['plugin'],['plugin']
Modifiability,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:118,config,config,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485,2,['config'],['config']
Modifiability,@m4n4n @guparan These lines of code:; https://github.com/m4n4n/sofa/blob/7a0b89cb0c9420930a862312466c8f7bfdcc218a/applications/sofa/gui/BatchGUI.cpp#L55-L63; is duplicated in `else` condition following it. Wouldn't it be better to refactor it so they appear only once?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-377978125:231,refactor,refactor,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-377978125,1,['refactor'],['refactor']
Modifiability,"@maddin200 OK for us to keep it as is :+1: ; Could you open a second PR based on this one, where the naming of the variable would be improved and the for loop would be modernized. Let's keep this one to review until next PR is opened",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3224#issuecomment-1225456455:115,variab,variable,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3224#issuecomment-1225456455,1,['variab'],['variable']
Modifiability,@marques-bruno Please update/enhance the Doxygen for both methods :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602:29,enhance,enhance,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602,1,['enhance'],['enhance']
Modifiability,"@marques-bruno: Inheriting from the PythonScriptDataEngine seems to be a good solution! I didn't really know this was possible, but like you describe, covers most of the intended use-case. I'll keep it in mind in case I might need it myself. Ohh, and maybe it makes for a good example for a more advanced usage of the PSDE that could be added to the codebase?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-423536069:16,Inherit,Inheriting,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-423536069,1,['Inherit'],['Inheriting']
Modifiability,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:471,maintainab,maintainability,471,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139,3,"['Refactor', 'maintainab']","['Refactor', 'maintainability']"
Modifiability,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:214,variab,variable,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536,1,['variab'],['variable']
Modifiability,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:446,extend,extend,446,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,4,"['extend', 'plugin']","['extend', 'plugin']"
Modifiability,@matthieu-nesme and @maxime-tournier do you agree if we cut this PR in four on a per files basis instead of per commit ?; It could be:; - Sofa base; - SofaPython; - Flexible; - Compliant,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312731984:165,Flexible,Flexible,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312731984,1,['Flexible'],['Flexible']
Modifiability,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:238,Flexible,Flexible,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429,3,"['Flexible', 'config']","['Flexible', 'configuration']"
Modifiability,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:648,inherit,inherits,648,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370,4,['inherit'],['inherits']
Modifiability,"@thomas-lemaire After some digging into internet I found a non-portable solution to support the 'non this' version. . ```cpp ; #define INFO_0() ldmsg_info(this); #define INFO_1(A) oldmsg_info(A); #define INFO_X(x, A, FUNC, ...) FUNC; #define msg_info(...) INFO_X(, \; ##__VA_ARGS__,\; INFO_1(__VA_ARGS__),\; INFO_0(__VA_ARGS__)); ```. I hate (and love) so much these macro trick (template wizard are welcome for a better solution)... ; but with this macro we can now write:; ```cpp; msg_info() << ""This is sended with an automatic 'this' parameter' provided as emitter;; msg_info(this) << ""This is sended with an explicit BaseObject provided as emitter "" ; ; msg_info(""SomeSPecifcSource"") << ""This is sended with a string as emitter"";; ```; which look perfect to me. . The problem is that this solution is not portable because it uses the ## GCC extension. ; Any idea on how to make a portable solution ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957:63,portab,portable,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957,3,['portab'],['portable']
Modifiability,@untereiner could you please include CGOGN as an external library + separate the core changes and the pluginizable changes; Any scene to test ?; We are all curious to test it !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064:102,plugin,pluginizable,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064,1,['plugin'],['pluginizable']
Modifiability,"A CentoOS config has been added to our dashboard, and the problem is reproductible. ; https://www.sofa-framework.org/dash; Now, time to fix it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276308722:10,config,config,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276308722,1,['config'],['config']
Modifiability,"A follow-up from the comment in the report (`PR is fine, usage of Vec1 should be checked with all teams`); If a team really needs 1D for those, they can still do in their own code/plugin with their own explicit instanciation of {Hexa/Quand/Triangle/...}SetGeometryAlgorithms.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2291#issuecomment-903552138:180,plugin,plugin,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2291#issuecomment-903552138,1,['plugin'],['plugin']
Modifiability,A more generic was asked in #3592 all scenes are usually using template=Vec3d we should use the SReal version template=Vec3 allowing us to test the float cases. Is float really useful?. A CI (nightly?) should test the float configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1403263559:224,config,configuration,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1403263559,1,['config'],['configuration']
Modifiability,"A possible option for a first move towards the use of multiple mesh data structures would be to put all the ""using"" out of the xxxTopologyContainer classes into a traits. `; template <T>; struct Cell { };; `; `; template <>; struct Cell<SofaBaseMesh> {; using Vertex = index_type;; using Edge = index_type;; ....; };; `. The someone else could write (in a plugin); `; template<>; struct Cell<MyOwnMeshDataStructure> {; using Vertex = another_type;; ....; };; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/866#issuecomment-449626170:356,plugin,plugin,356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866#issuecomment-449626170,1,['plugin'],['plugin']
Modifiability,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:209,plugin,plugin,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"A remark about cimg : if I remember well it is an extlib of the plugin 'image', it would be great to share it in-between plugins (by moving it back as a sofa extlib?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604:64,plugin,plugin,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"A small TLDR of the discussion at [SofaDefrost/plugin.SofaPython3#110](https://github.com/SofaDefrost/plugin.SofaPython3/pull/110):. In python, it is frequent to use a controller component to drive the simulation. Sometime, the controller needs to pre-compute some stuff before the simulation begins. To do so, it might need the data of the components found in the scene. We didn't have any event until this PR that makes the controller (or any component) know when the scene as finished its initialization process (when the init function has been called in every components of the scene graph). With this PR, we can now listen to the **onSimulationInitStart** and **onSimulationInitDone** events, which will be triggered by the simulation before and after the call to the init visitor of the scene graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751:47,plugin,plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751,2,['plugin'],['plugin']
Modifiability,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:204,plugin,plugins,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157,1,['plugin'],['plugins']
Modifiability,"ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1428,plugin,plugins,1428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['plugin'],['plugins']
Modifiability,"About sofa-spm, it is possible to submit new plugins install recipes by making PR to https://github.com/SofaDefrost/SPM-RECIPES",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952:45,plugin,plugins,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952,1,['plugin'],['plugins']
Modifiability,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:431,plugin,plugin,431,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067,4,['plugin'],['plugin']
Modifiability,"About the `[[maybe_unused]]` :; this is triggered only with clang(15), not with gcc and it seems to be because of :; `-Wunused-but-set-variable now also warns if the variable is only used by unary operators.` (https://releases.llvm.org/15.0.0/tools/clang/docs/ReleaseNotes.html); So all the added `[[maybe_unused]]` are used with variables because of the `++` later on, which is a bit weird to me too.🤓. I can just revert https://github.com/sofa-framework/sofa/pull/3627/commits/c168efba2f0ff912c3ace3ffe81c179f9712e02d if needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1423384347:135,variab,variable,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1423384347,3,['variab'],"['variable', 'variables']"
Modifiability,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1588,refactor,refactor,1588,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,2,['refactor'],['refactor']
Modifiability,According to the CI there is one test in Flexible that is failing in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428:41,Flexible,Flexible,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428,1,['Flexible'],['Flexible']
Modifiability,"Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; So I would say that there is a problem with the nightlies (and the CI is correct)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375:10,Flexible,Flexible,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"Actually, I dont even know if anybody uses the GUI with the docker installation 😅. I think it is a matter of configuration of docker to access the local X server. You may try setting some environment variables; https://stackoverflow.com/questions/69872788/docker-could-not-connect-to-any-x-display",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315521495:109,config,configuration,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315521495,2,"['config', 'variab']","['configuration', 'variables']"
Modifiability,"After a quick look here are my notes:; - CM is for CombinatorialMap (in case you wonder :)), . - there are changes on some core mapping that seems to add only minor details as the 'useRestPosition' ; in SofaKernel/modules/SofaBaseMechanics/BarycentricMapping.h; Could this be merged independenty using a fast path. . - could the the extlibs/NGOGN should be removed to help in readbility of the PR. - is it possible that the new topology layer (from sofa/core/topology and SofaBaseTopology) to be moved out of the core in a module/plugin CMTopology and be part of the same cmtopology namespace. . - could the new CMforcefields moved to a module/plugins CMMechanics ? . - why there is files that appears like new files but does not seems to use the cmtopology like ?:; modules/SofaMiscFem/ElementFEMForceField.cpp; modules/SofaMiscMapping/BeamMapping.h; is this a mistake or do I mis-understood something ? . DM. ; NOTE: I will edit my notes if after more reading I found some note are not relevant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885:530,plugin,plugin,530,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"After a successful build, I have the following trace when running:. ```; [INFO] [runSofa] PluginRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/collections:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib; [INFO] [runSofa] DataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/runSofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-so",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:90,Plugin,PluginRepository,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginRepository', 'plugins']"
Modifiability,After discussion we would suggest the following tree:. applications/plugins/VolumetricRendering/; - examples/; - src/VolumetricRendering/; - CUDA; - src/VolumetricRendering/CUDA/. is this correct @fredroy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1875014355:68,plugin,plugins,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1875014355,1,['plugin'],['plugins']
Modifiability,"After discussion with @JeremieA, this PR breaks the meaning of the variable `compressed`. The comment after this variable says `true if the additional storage is empty or has been transfered to the compressed data structure`. But @JeremieA claims the variable also says if there are zeros in the compressed values. A suggestion was to use the refactored `CompressedRowSparseMatrix` class from https://github.com/InSimo/ISSofa, which brings more clarity on the meanings of the variables (among other important things).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1117396358:67,variab,variable,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1117396358,5,"['refactor', 'variab']","['refactored', 'variable', 'variables']"
Modifiability,"After discussion with @courtecuisse, the function is supposed to be used when cutting meshes.; In our plugins it is not used anymore, although it might still have relevance in the future.; Whether to keep it in SOFA sources or not... any option is ok for us.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878215670:102,plugin,plugins,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878215670,1,['plugin'],['plugins']
Modifiability,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776,2,['plugin'],['plugin']
Modifiability,"Ah, yes, then you can do the same as described here https://scheiklp.github.io/sofa_env/setting_up_sofa.html#manually-linking-sofapython3-to-python. In the downloaded zip, the path is the same (plugins/SofaPython3/lib/python3/site-packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750424803:194,plugin,plugins,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750424803,1,['plugin'],['plugins']
Modifiability,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:335,plugin,plugin,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728,2,['plugin'],['plugin']
Modifiability,Ahem... configuring a RECENT version of libavcodec and co. is a pain in the... back on Centos. I kindly suggest we disable this feature on centos...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360820037:8,config,configuring,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360820037,1,['config'],['configuring']
Modifiability,"All scene examples in the Communication plugin crash, I guess the plugin is not activating thus generating these errors/crashes right @guparan ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236:40,plugin,plugin,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236,2,['plugin'],['plugin']
Modifiability,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:22,config,config,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645,6,['config'],['config']
Modifiability,"Also further above ""I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342830102:72,Plugin,PluginRepository,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342830102,1,['Plugin'],['PluginRepository']
Modifiability,"Although I understand your wish not to break too much and do this transition form custom to stl containers, wouldn't it be more logical to make the Sofa Vec<N,T> inherit from stl fixed_array ? I don't know if this is desirable, but if it is ever done, wouldn't this pr be somehow reverted by his change ? What I mean is that, an RGBA value is still a vector of fixed size, so there is no problem regarding this inheritance that allows to do vector operations with it right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4263#issuecomment-1790440999:162,inherit,inherit,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4263#issuecomment-1790440999,2,['inherit'],"['inherit', 'inheritance']"
Modifiability,An example of a plugin update further to this PR: https://github.com/SofaDefrost/SoftRobots/pull/213,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1541472870:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1541472870,1,['plugin'],['plugin']
Modifiability,"An other big singleton to refactor is ObjectFactory.; Especially bothering because its getInstance() is called in the RegisterObject function, which is called when the library is loaded.; One solution would be to move those RegisterObject() into the plugin initialisation (where it has been given a pointer to the ObjectFactory). The drawbacks are:; - cumbersome; - the init's plugin file would need all the headers of the components it need to register.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562520621:26,refactor,refactor,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562520621,3,"['plugin', 'refactor']","['plugin', 'refactor']"
Modifiability,"And maybe a slight warning on the breaking side, as people implementing new Mappings will certainly have to include `<sofa/core/Mapping.inl>`; (as they will complain about missing references with the linking of their plugin/code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1622#issuecomment-742390601:217,plugin,plugin,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1622#issuecomment-742390601,1,['plugin'],['plugin']
Modifiability,AnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sof,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:5986,Plugin,PluginManager,5986,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:71,plugin,plugins,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128,4,"['config', 'plugin']","['configuration', 'configure', 'plugins']"
Modifiability,"Another suggestion:; ```; /; plugins; BeamAdapter; ...; framework; Sofa; Compat; Config; Core; ...; modules; Sofa; Component; Collision; ...; scripts; tools; ...; ```; but in this case we have 2 Sofa projects which is not possible in CMake, so we would have to find a trick. I still prefer the solution 1 from my previous comment. It's the cleanest and most consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109818555:29,plugin,plugins,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109818555,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:763,plugin,plugins,763,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,2,['plugin'],['plugins']
Modifiability,Any reason to have re-opened this ? I thought we all agreed that this PR would be discarded and closed as the initial behavior of having Sofa.Testing built for other plugins TU is OK and the problem with conda was fixed thanks to #447.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1964698947:166,plugin,plugins,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1964698947,1,['plugin'],['plugins']
Modifiability,"Apparently on the source master, so something pretty recently.; Sorry for not investigating yet, but I rather prefer create an issue not to forget it. Associated post: https://www.sofa-framework.org/community/forum/topic/meshsteploader-plugin-loading-failed/#post-10306",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123:236,plugin,plugin-loading-failed,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123,1,['plugin'],['plugin-loading-failed']
Modifiability,Are all pluginisation finished? I would wait for it otherwise you will need to re-update all the scene.; By the way I would be happy to set an option to automatically include the main plugin...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559:8,plugin,pluginisation,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559,2,['plugin'],"['plugin', 'pluginisation']"
Modifiability,Are you targeting a special plugin? Since we really don't have python scenes in Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-851365305:28,plugin,plugin,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-851365305,1,['plugin'],['plugin']
Modifiability,As @untereiner said in kind of jokes...we need a gantt diagram.; Which actually I agree because such refactoring effort requires a massive amount of work and coordination.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626997:101,refactor,refactoring,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626997,1,['refactor'],['refactoring']
Modifiability,"As Guillaume open the sofa refactoring pandora box by submitting this PR and we are full of energy after holiday here is a bit unrelated question... . Do we seriously needs bwdInit ? . I looked into the code base and ; init() => 1057 matches; reinit() => 388 matches; bwdInit() => 60 matches. on the 60 match, half of that is for .h, in the 30 remaining... lot of other seems 'weird'. So, should keep this mechanism ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613:27,refactor,refactoring,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613,1,['refactor'],['refactoring']
Modifiability,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:174,plugin,plugin,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270,10,['plugin'],"['plugin', 'plugins']"
Modifiability,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:36,adapt,adapted,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750,4,"['adapt', 'variab']","['adapted', 'variables']"
Modifiability,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:201,plugin,plugin,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437,8,['plugin'],['plugin']
Modifiability,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:984,extend,extending,984,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662,2,['extend'],['extending']
Modifiability,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:68,plugin,plugins,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111,2,['plugin'],['plugins']
Modifiability,"As explained on the [forum](https://www.sofa-framework.org/community/forum/topic/error-plugin-not-foundsofamiscforcefielddev/#post-9786), the scene makes no sense since it uses deprecated components or components in private plugin. Another scene already shows ShapeMatching example using the ShapeMatching engine: ICPRegistration_ShapeMatching_Engine.scn. There fore the [PR#331](https://github.com/sofa-framework/sofa/pull/331) removes this scene.; Thank you for the notice @lujaindong",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578:87,plugin,plugin-not-foundsofamiscforcefielddev,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578,2,['plugin'],"['plugin', 'plugin-not-foundsofamiscforcefielddev']"
Modifiability,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:536,variab,variable,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672,8,"['config', 'variab']","['configuration', 'variable', 'variables']"
Modifiability,"As it is using SofaPython3 to run, should not it be ... in the SofaPython3 plugin 😶 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2361#issuecomment-927965087:75,plugin,plugin,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2361#issuecomment-927965087,1,['plugin'],['plugin']
Modifiability,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:3,plugin,plugins,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778,5,['plugin'],"['plugin', 'plugins', 'plugins-concerned']"
Modifiability,"As suspected, the two missing unit tests were not yours. Two plugins were ignored in PR builds on Windows, implying 2 unit tests.; It's fixed :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002:61,plugin,plugins,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002,1,['plugin'],['plugins']
Modifiability,"As those tests does not inherit SofaTest anymore, I think this issue is kind of fixed.; Feel free to re-open if it is not actually the case",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081:24,inherit,inherit,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081,1,['inherit'],['inherit']
Modifiability,"As you noted, `Utils::getPluginDirectory()` use should be somewhat discouraged, because it offers less functionality compared to `PluginRespository` which can be expanded by an external application, provided it takes the responsibility of defining the content of the environment variable `SOFA_PLUGIN_PATH`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270:130,Plugin,PluginRespository,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270,2,"['Plugin', 'variab']","['PluginRespository', 'variable']"
Modifiability,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:277,plugin,plugins,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489,3,['plugin'],['plugins']
Modifiability,"BLEM HERE >; > ; > 1. install anaconda and make virtual environment; > 2. install sofa framework; > 3. define the environment variables; > 4. import Sofa in python; > ; > **Expected behavior** < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >; > ; > Success importing Sofa in python without any error.; > ; > ### Environment; > **Context**; > ; > * System: Mac OS X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:1328,variab,variable,1328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['variab'],['variable']
Modifiability,BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2180,Plugin,PluginManager,2180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"BaseVector/BaseMatrix and their inherited classes uses int as Index, because some fields are required to be signed (offset mechanism); An idea could be to create a SignedIndex.; Issue raised in the PR #1792",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1539#issuecomment-780642089:32,inherit,inherited,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1539#issuecomment-780642089,1,['inherit'],['inherited']
Modifiability,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:173,plugin,plugin,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217,4,['plugin'],['plugin']
Modifiability,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:59,plugin,plugins,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499,8,"['Plugin', 'plugin']","['PluginManager', 'Plugins', 'plugins']"
Modifiability,Because currently this PR does not break anything.; Removing `SOFA_NO_UPDATE_BBOX` would change the behavior and would be candidate for a depreciation period etc. I would prefer to merge this PR now during the time of the reflection about what to do with this variable.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176244612:260,variab,variable,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176244612,1,['variab'],['variable']
Modifiability,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:429,refactor,refactor,429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645,1,['refactor'],['refactor']
Modifiability,"Because it is creating a new type, and we will break instancing templated class like Mapping and so on. If you do MyMapping<Vec3, ExtVec3> it will complain that there is no BaseMapping<Vec3, ExtVec3> and so on. (basically).; I remember asking people in a weekly meeting, and we agreed it was better to do a typedef instead of an inheritance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1139#issuecomment-528832117:329,inherit,inheritance,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1139#issuecomment-528832117,1,['inherit'],['inheritance']
Modifiability,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906,1,['plugin'],['plugins']
Modifiability,"Build failing on MacOS (the only config with MeshSTEPLoader plugin enabled):; ```text; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/applications/plugins/MeshSTEPLoader/MeshSTEPLoader.cpp:60:45: error: use of undeclared identifier 'm_filename'; did you mean 'd_filename'?; dmsg_info() << ""Loading STEP file: "" << m_filename;; ^~~~~~~~~~; d_filename; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/SofaKernel/modules/SofaCore/src/sofa/core/loader/BaseLoader.h:53:31: note: 'd_filename' declared here; objectmodel::DataFileName d_filename;; ^; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/applications/plugins/MeshSTEPLoader/MeshSTEPLoader.cpp:65:28: error: use of undeclared identifier 'm_filename'; did you mean 'd_filename'?; const char* filename = m_filename.getFullPath().c_str();; ^~~~~~~~~~; d_filename; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/SofaKernel/modules/SofaCore/src/sofa/core/loader/BaseLoader.h:53:31: note: 'd_filename' declared here; objectmodel::DataFileName d_filename;; ^; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/applications/plugins/MeshSTEPLoader/MeshSTEPLoader.cpp:70:71: error: use of undeclared identifier 'm_filename'; did you mean 'd_filename'?; msg_error() << ""Error: MeshSTEPLoader: Cannot read file '"" << m_filename << ""'."";; ^~~~~~~~~~; d_filename; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/SofaKernel/modules/SofaCore/src/sofa/core/loader/BaseLoader.h:53:31: note: 'd_filename' declared here; objectmodel::DataFileName d_filename;; ^; 3 errors generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2095#issuecomment-843142727:33,config,config,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2095#issuecomment-843142727,5,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:121,plugin,plugin,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490,2,['plugin'],['plugin']
Modifiability,C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:5291,Plugin,PluginManager,5291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:259,VARIAB,VARIABLES,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421,1,['VARIAB'],['VARIABLES']
Modifiability,"CGAL is now enabled on CI for configs mac_clang-3.4_options, ubuntu_gcc-5.4_options, ubuntu_clang-3.8_options and ubuntu_clang-3.8_options-debug.; Thus, I close this issue :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/352#issuecomment-343490254:30,config,configs,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352#issuecomment-343490254,1,['config'],['configs']
Modifiability,CI complains about 4 crashing scenes (timeout) on all configs:; ```; examples/Components/collision/RayTraceCollision.scn; examples/Components/misc/MeshTetraStuffing.scn; examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.scn; examples/Tutorials/StepByStep/Dentistry_Python/5_MeshGeneration.scn; ```; Any idea?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383:54,config,configs,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383,1,['config'],['configs']
Modifiability,"CI fails due to [ExternalBehaviorModel](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/ExternalBehaviorModel) plugin, depending on SofaGraphComponent (_InteractingBehaviorModel_ class) itself deprecated ... Question: isn't it time to deprecate this plugin gleichzeitig?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1256502124:104,plugin,plugins,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1256502124,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:72,plugin,plugins,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418,2,['plugin'],['plugins']
Modifiability,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:69,plugin,plugin,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116,2,['plugin'],['plugin']
Modifiability,CMake has the version 3.16.3 on the CI. It will not configure if you use the find_or_fetch feature,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1766399795:52,config,configure,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1766399795,1,['config'],['configure']
Modifiability,Can I still ask a small question ? :-) . Why keeping the Framework directory? Would something like this be simpler?:. ```; /; plugins; BeamAdapter; ...; Sofa; Compat; Config; Core; DefaultType; Geometry; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438:126,plugin,plugins,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438,3,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,Can we close this issue..? ^^ Or rename it to plugin.SofaPython3 and redirect to the trello board maybe:; https://trello.com/b/snWTMlCN/pluginsofapython3-the-turtle-speed-project,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-510393071:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-510393071,1,['plugin'],['plugin']
Modifiability,Clarifying this issue:; The goal is to port the previous SofaPython scenes (from the deprecated Python2) to the newer SofaPython3 plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-777505294:130,plugin,plugin,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-777505294,1,['plugin'],['plugin']
Modifiability,"Closing (postponing), several issues detected in this PR; - PluginManager is not satisfactory; - meta-modules are not well designed so induced too much complexities",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-1968548437:60,Plugin,PluginManager,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-1968548437,1,['Plugin'],['PluginManager']
Modifiability,"Compilation issue on Windows. Modernize the CUDA Cmake before this PR. This plugin adds C source file, making it harder than other reordering done before. Problem arise from the fact that CMake passes compile option to NVCC that the compiler doesn't understand.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4878#issuecomment-2342998697:76,plugin,plugin,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4878#issuecomment-2342998697,1,['plugin'],['plugin']
Modifiability,"Concerning backward compatibility:; - The MutationListener is inherited by only 2 classes in the SOFA repository, if we exclude SofaQtQuick for which this PR is profitable anyway:; - GraphListenerQListView, which is used in runSofa to display the scene graph; - ChangeListener: which is an unused & unimplemented class hanging around in SofaKernel/framework/sofa/simulation and should be removed. - Nodes and its child classes (DAGNode & GNode in SOFA, FailNode in Compliant) are the only ones affected by the refactoring, and there's probably not much code inheriting those classes & modifying their notification behavior. So While we can't guarantee that nobody rewrote a GUI using the MutationListener, IMHO we should be able to provide support through the forum / gitter channels if that breaks anything to anyone.; Let's be breaking ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693:62,inherit,inherited,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693,3,"['inherit', 'refactor']","['inherited', 'inheriting', 'refactoring']"
Modifiability,Cool @alxbilger so if there is Required data and in `Inherit::init()` is called then the error gets not triggered. Correct?; We should investigate other components with this Required feature.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945112990:53,Inherit,Inherit,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945112990,1,['Inherit'],['Inherit']
Modifiability,Could you share your CMakeCache.txt please @MingshanHe ?; It could be related to your Qt configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1296256287:89,config,configuration,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1296256287,1,['config'],['configuration']
Modifiability,Create Issue to rethink the way it is done: maybe centralize the regression-tests files in Regression plugin. This would require multiple changes like being able to find the path of all plugins to find the scenes and the regression files when they are inside of the plugin instead of Regression. . --> https://github.com/sofa-framework/sofa/issues/4424,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1884536809:102,plugin,plugin,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1884536809,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:160,config,configuration,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599,1,['config'],['configuration']
Modifiability,"Dear @alxbilger dear @epernod ; I'm wondering why did you ""savagely"" removed our work, and I'm writing to know what are the alternatives to this function? If there is no other solution to perform this critical operation, I'd like to know how many messages should we send to justify that a code is needed and should not be ""savagely"" removed?. To answer your question @epernod, yes this function was indeed written for topological changes, but on the mechanical side (not geometrical). Indeed, independently of the method that you use for topological modifications, you will need to recompute your mechanical matrices. Since you don't know which forcefield is used in your scene you cannot put that directly in a plugin. I guess that without this function you have to call reinit of your forcefield (assuming that the function is correctly implemented). However, there are many cases where these topological modifications only change some elements and not the entire mesh (there are many papers that describe this point on the web if you are interested...). In this case, the reinit method will be very expensive for nothing! I'm sure you are aware that sofa is designed for real-time, so we have to provide a solution to only compute the elements that are modified. . In conclusion, if you combine the fact that you don't know the underlying forcefield and you want to recompute only subpart of Ke elements, you may think that it would be a great idea to have a method in BaseForcefield where you can specify which Ke you want to compute. This is precisely the goal of this function !. The question now is what is the alternative solution? I'm sure that the consortium does not ""savagely"" remove the work of other people without thinking of alternative solutions, especially if the same person has already discussed the need for this method in this PR :). Waiting for answers, I have a student that is stuck on this problem for one week on this point. . Hadrien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1170880124:712,plugin,plugin,712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1170880124,1,['plugin'],['plugin']
Modifiability,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:78,plugin,plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830,3,['plugin'],['plugin']
Modifiability,"Dear @michael-barrow . Normally the grayed out entries means that the corresponding data field has the ""readOnly"" flag set, so it is surprising the this behave differently in Modeller & runSofa. Maybe this is caused by some non-initialized variable somewhere in the Modeller, in runSofa or in the Data itself. . When I will have time I will give a lookt at that to be sure it is not in the Data. If it turns out to be a problem specific to the Modeller well...as the Modeller is deprecated and should be replaced by runSofa2 (code it here https://github.com/sofa-framework/SofaQtQuick) I prefer to devote more time to this one :) . Anyhow Michael, thanks again for your investigation, feel free also to update the issue if you notice similar problem. . Regards,; Damien. ; EDIT: I changed my mind, so I changed the comment :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653:240,variab,variable,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653,1,['variab'],['variable']
Modifiability,"Dear all, @faichele @fjourdes @JeremieA . Should we include this as a new plugin in SOFA ? How should it be articulated and integrated in SOFA ?; Thanks for your input.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540:74,plugin,plugin,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540,1,['plugin'],['plugin']
Modifiability,"Default CMake build compiles, now all the plugins, and disabled options that activate code using DataEngines need to be activated to propagate that change.; I'm counting on you...!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/814#issuecomment-437094880:42,plugin,plugins,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/814#issuecomment-437094880,1,['plugin'],['plugins']
Modifiability,"Definitely @EulalieCoevoet , you can ignore it by adding a `.scene-tests` in the applications/plugins/ArticulatedSystemPlugin/examples/_ repository and define in it:. ```; ignore ""robotGUI.py""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1106242947:94,plugin,plugins,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1106242947,1,['plugin'],['plugins']
Modifiability,Delay problem still exists using Geomagic plugin.; See https://www.sofa-framework.org/community/forum/topic/problem-about-geomagic-plugin-in-v18-12/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347,2,['plugin'],"['plugin', 'plugin-in-']"
Modifiability,Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-862106120:49,plugin,plugin,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-862106120,1,['plugin'],['plugin']
Modifiability,"Discussion on the improvement of FE codes in SOFA, Caribou plugin etc.; Clarifying the FEM codes is really good, using utility classes (static functions) can help the reading, understanding of the physical model. The loss of performance in addDForce must be investigated; → keep wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1010907207:59,plugin,plugin,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1010907207,1,['plugin'],['plugin']
Modifiability,Do everyone agrees on having the conditions I moved up into the NVI VisualModel::drawVisual() and with the one I added into the VisualVisitor ? . Eg: ; ```cpp; void VisualModel::drawVisual(const VisualParams* vparams); {; // don't draw if specified not to do so in the user interface; if (!vparams->displayFlags().getShowVisualModels()); return;. // don't draw if the component is not in valid state (we can change the condition so Loading/Unknow states are drawn differently) ; if( d_componentState.getValue() == sofa::core::objectmodel::ComponentState::Invalid ); return;. // don't draw if this component is specifically configured to be disabled (It is questionnable to have a data for that). ; // having a d_enable on Base would be better. ; if (!d_draw.getValue()); return;. // RAI to be sure the states changed during the rendering don't leaks ; const auto stateLifeCycle = vparams->drawTool()->makeStateLifeCycle();. doDrawVisual(vparams);; }; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3931#issuecomment-1592550546:623,config,configured,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3931#issuecomment-1592550546,1,['config'],['configured']
Modifiability,Do no forget this one : sofa-framework/Flexible#4,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/978#issuecomment-490821271:39,Flexible,Flexible,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/978#issuecomment-490821271,1,['Flexible'],['Flexible']
Modifiability,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:81,plugin,plugin,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679,2,['plugin'],['plugin']
Modifiability,Do we wait the end of the pluginization of SofaGeneral to see if other dependencies are broken?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526:26,plugin,pluginization,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526,1,['plugin'],['pluginization']
Modifiability,"Drive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Env vars**; > ; > ```shell; > python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PAT",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:2362,plugin,plugins,2362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"During the meeting several point were identified as open question. . One proposed approach was to implement automatic loading of plugins when a component is ; called in the scene.; An alternative approach was to make it more explicit in the form of ; <RequiredPlugin ='sofaAll'/>. Which would required to create kind of ""packages"" of plugins (maybe all the plugin in a directory?). Then is how to we handle backward compatibility or help users during the transition.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255:129,plugin,plugins,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Errors start from Compliant. First error on MacOS:; ```; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:1:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.h:5:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/MechanicalVisitor.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Visitor.h:26:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Node.h:50:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:167,plugin,plugins,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499,2,['plugin'],['plugins']
Modifiability,"Et voilà, no more change in Flexible & Compliant. For discussion the last revision continaing them is this one.; https://github.com/sofa-framework/sofa/pull/190/commits/50d6ccd23f6f52e22518710f6ef8187294a562bd",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285663614:28,Flexible,Flexible,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285663614,1,['Flexible'],['Flexible']
Modifiability,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:82,Plugin,PluginManager,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487,6,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Except it is not !. `install/include/SofaSimulation/sofa/simulation/config.h`; `install/include/SofaFramework/sofa/simulation/simulationcore.h`. **SofaSimulation** include path is only included if I link against **SofaSimulationCommon**, **SofaSimulationTree** or **SofaSimulationGraph**. Here I don't need those targets, but only the **SofaSimulationCore** target.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343:68,config,config,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343,1,['config'],['config']
Modifiability,FO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Co,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:9240,Plugin,PluginManager,9240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3705,Plugin,PluginManager,3705,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Setting.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Controller.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Analyze.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Generate.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Select.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Transform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:9173,Plugin,PluginManager,9173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FO] [runSofa] GuiDataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/applications/projects/runSofa/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:1541,Plugin,PluginManager,1541,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FVM plugin should now be fixed . [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965901959:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965901959,1,['plugin'],['plugin']
Modifiability,FYI external plugins can already be compiled with compilation mode c++17,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-591330540:13,plugin,plugins,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-591330540,1,['plugin'],['plugins']
Modifiability,FYI: unit tests are OK; there are no scene tests or regression however.; ```; Plugin SoftRobots: built (found libSoftRobots.so libSoftRobots.so.1.0); Plugin SoftRobots: no examples/ nor scenes/ directories.; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569299565:78,Plugin,Plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569299565,2,['Plugin'],['Plugin']
Modifiability,Final architecture after discussions:; ```; /; plugins; BeamAdapter; ...; Sofa; framework <-- this directory is not a CMake target (lower case); Compat; Config; Core; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1112227436:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1112227436,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,Fix with patch; [SofaNonUniformFem] Remove shadow variable; pr: clean pr: fast merge status: ready; #1874 by maddin200 was merged yesterday • Approved,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878:50,variab,variable,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878,1,['variab'],['variable']
Modifiability,"Following our recent discussions, the ""find or fetch"" is replaced by a more classical find package strategy. The package management is fully left to the user. ; As some package managers were not providing cmake config files for tinyxml2 (at least APT), this PR also provides a cmake find module to look for a config file first, and if none found, look manually for the tinyxml2 library. ; Tested with:; - APT package libtinyxml2-dev (v9.0.0), no cmake config file provided; - conda package tinyxml2 (v9.0.0), cmake config file provided; - vcpkg package tinyxml2 (v9.0.0), cmake config file provided.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1785355094:211,config,config,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1785355094,5,['config'],['config']
Modifiability,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:398,inherit,inheritance,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601,1,['inherit'],['inheritance']
Modifiability,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:368,plugin,plugins,368,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:401,variab,variables,401,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,4,"['refactor', 'variab']","['refactored', 'variables']"
Modifiability,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"For the record, I saved and will maintain this scene (with Regression) in my plugin:; https://github.com/InfinyTech3D/InfinyToolkit/blob/main/examples/TetrahedronBeamMultiMaterials.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2147677144:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2147677144,1,['plugin'],['plugin']
Modifiability,"Forgive me @fredroy, I savagely used your branch to add a clean commit in Sofa.Config :angel:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2210#issuecomment-869820820:79,Config,Config,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2210#issuecomment-869820820,1,['Config'],['Config']
Modifiability,François is right but isn't doing this will only fix the find plugin problem... this can be problematic as there is other part of Sofa that are using the executable with relative path to locate resources directory (eg: GuiDataRepository).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596,1,['plugin'],['plugin']
Modifiability,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:100,plugin,plugins,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:607,refactor,refactored,607,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,2,['refactor'],['refactored']
Modifiability,"Give a try to the mouse described in Compliant (note this mouse implementation is fully compatible with non-Compliant solvers).; For that, compile the Compliant plugin and then add these components to your scene:; `<RequiredPlugin name=""Compliant""/>; <CompliantAttachButton />`; (Note that CompliantAttachButton has parameters you can set in your scene and access from the runSofa gui)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926:161,plugin,plugin,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926,1,['plugin'],['plugin']
Modifiability,"Glad to see someone asking question on that topic. Since the release of sofapython3, I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:321,plugin,plugin,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,4,['plugin'],['plugin']
Modifiability,Good news !; We have been accepted for the GSoC 2018 !; Congratulations to the students selected by Google @firedranzer (Communication Plugin) and @m4n4n (SOFA Pulse) ! Let's start the code !!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633#issuecomment-383644444:135,Plugin,Plugin,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-383644444,1,['Plugin'],['Plugin']
Modifiability,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:99,plugin,plugin,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928,12,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:409,plugin,plugin,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790,2,['plugin'],['plugin']
Modifiability,"Header only usage should work even if CGAL has been built before. I will try to force header_only, there is a CMake variable for that in CGAL.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958#issuecomment-477076904:116,variab,variable,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-477076904,1,['variab'],['variable']
Modifiability,"Hello ! ; I've read your PR and I am currently compiling it on my side to test the GUI and the Modeler. . Some changes will need to be performed in order to accept your PR : ; 1. You have added some commented code that need to be removed. ; 2. You have expended the namespaces of some files, which is not in accordance with our standard, it is certainly your IDE. But could you please revert those changes ? ; 3. You have set default value to attributes directly in the class declaration, this should be done only in the constructor. ; 4. You have made some breaking changes: for instance, you removed the call to the superinit of ConfigurationSetting. Do you have any justification for that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2097577135:631,Config,ConfigurationSetting,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2097577135,1,['Config'],['ConfigurationSetting']
Modifiability,"Hello @Camille-K . Thanks for the PR:; several comments to be conformant with sofa coding standards:; - use #pragma once everywhere; - use c++11 compact namespaces eg; ```cpp; namespace sofa::core::objectmodel {}; ```; - about namespace, the current idea in sofa is that each plugin's namespace should have the name of the plugin. ; Eg:; ```cpp; namespace sofa::plugin::beamplastic::component ; {; class BeamPlasticForceField {};; class StiffnessContainer {};; class PoissonContainer {};; }; ```; - rename basic_example in just example; - there shouldn't have no definition(code) in the .h, only declaration. ; - shouldn't PlasticConstitutiveLaw::getXXXX be pure virtual ? ; - the SOFA_TARGET is not defined in the init.h; - remove or use StiffnessContainer and PoissonContainer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358:276,plugin,plugin,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358,3,['plugin'],['plugin']
Modifiability,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:735,plugin,plugin,735,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716,2,['plugin'],['plugin']
Modifiability,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:510,refactor,refactoring,510,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690,6,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:314,variab,variable,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951,2,['variab'],['variable']
Modifiability,"Hello @damienmarchal . I tried to execute tests manually using python. And I got import errors like:; _Traceback (most recent call last):; File ""test_mass.py"", line 8, in <module>; from SofaTest.Macro import *; ImportError: No module named SofaTest.Macro_; or; _Traceback (most recent call last):; File ""test_MeshLoader.py"", line 1, in <module>; import SofaPython.MeshLoader; ImportError: No module named SofaPython.MeshLoader_. It seems I should attach some additional modules (plugins), but I don't know what exactly I should do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331:479,plugin,plugins,479,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331,1,['plugin'],['plugins']
Modifiability,"Hello @epernod,. For the future: ; Shouldn't we move the SpatialGridContainer into SofaVolumetricData ? In addition there is in SofaEulerianFluid some dedicated data structure for storing the quantities. ; Merging al that could be intereting. . Shouldn't we merge everything into a single SofaFluids plugins ? . EDIT: And the MarchingCube code is also duplicated in several places; EDIT2: And the FastMarching algorithm either :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537466462:300,plugin,plugins,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537466462,1,['plugin'],['plugins']
Modifiability,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:286,refactor,refactoring,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717,2,['refactor'],['refactoring']
Modifiability,"Hello @hugtalbot,. Thanks for the PR which fix old code. But I think this is not the way to fix that as you rely on #ifdef #endif which is almost as deprecated as the code to fix. ; I suggest you to:; - remove all #ifdef #endif ; - replace gl code with the use of the drawTools in draw(); - you can still use real gl functions but only if you are in drawVisual() function (the objec's function is to render something). If this is the case the better is to move these object in a rendering specific plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-692275848:498,plugin,plugin,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-692275848,1,['plugin'],['plugin']
Modifiability,"Hello @marques-bruno . My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level. . My current approach to handle this kind of scenario was to implement an easing function like that:; ```cpp; std::string sofa::helper::objectmodel::getPathName(Base* o); {; BaseNode *node = dynamic_cast<BaseNode>(o);; if(node); return node->getPathName();; BaseObject *object = dynamic_cast<BaseNode>(o);; if(object); return object->getPathName();; ...; }; ```; To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's. ; But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450:792,refactor,refactoring,792,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450,1,['refactor'],['refactoring']
Modifiability,"Hello @rodriguesvinay ,. It seems it comes from the fact that Qt could not connect to the display (`Warning [Qt] could not connect to display`).; And xcb is linked to X11, so I think your docker configuration cannot connect to your X server (if existing).; Whats your system you are trying to launch the docker on ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315400680:195,config,configuration,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315400680,1,['config'],['configuration']
Modifiability,"Hello @valeryozenne , did you fix your problem yet ?. ```; /home/vozenne/NVIDIA_CUDA-11.2_Samples/common/inc/GL/glew.h:12318:51: note: '__glewVertexAttribIPointer' declared here; GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTERPROC __glewVertexAttribIPointer;; ```. Seems like your config is using glew.h from the samples of CUDA, which is maybe not appropriate/standard. Would it be possible to switch with the one from your distrib (provided by libglew-dev) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-797386120:275,config,config,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-797386120,1,['config'],['config']
Modifiability,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:151,plugin,plugin,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812,2,['plugin'],['plugin']
Modifiability,"Hello Erik,. As said in the PR description. This PR is converting the code into a properly package module/plugin. ; The move of the files is to enforce package encapsulation. Currently in Sofa a module/plugin that can be search through the find_package() CMake macro. A lot of ; modules are exporting ""{CMAKE_CURRENT_DIRECTORY}../"" when they are imported. ; Example:; SofaExporter ; SofaPython. If a third module SofaX is just doing find_package(SofaExporter) it is possible to write; ```#include <SofaExporter/aaa.h>```; which is expected....but also ; ```#include <SofaPython/bbb.h>```; This work because of the ../ in SofaExporter allows the SofaX to include SofaPython which is bad as this breaks package encapsulation. . The solution to fix that is to have the files to include in a subdirectory of the module/plugin. ; So in our case SofaExporter is exporing its include path as ""{CMAKE_CURRENT_DIRECTORY}/src/""; If done that we... the SofaX module can still do; ```#include <SofaExporter/aaa.h>```; But the ```#include <SofaPython/bbb.h>``` will fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450:106,plugin,plugin,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450,3,['plugin'],['plugin']
Modifiability,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:438,inherit,inherit,438,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740,1,['inherit'],['inherit']
Modifiability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:681,inherit,inheriting,681,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,10,"['coupling', 'inherit', 'plugin']","['coupling', 'inheriting', 'plugin', 'plugins']"
Modifiability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:276,inherit,inheriting,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,8,"['coupling', 'inherit']","['coupling', 'inherit', 'inheriting']"
Modifiability,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:36,coupling,coupling,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418,2,['coupling'],['coupling']
Modifiability,"Hello Guillaume,. As you are in this kind of things...the solution to handle scenes that rely on plugins and that should be started only if the required plugin is there should be to generate the .test-scene file with the adequate ignore command from CMake. I can give it a try or, as you are fluent in Cmake you can do it :).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780:97,plugin,plugins,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:170,plugin,pluginizing,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963,4,['plugin'],"['pluginization', 'pluginizing']"
Modifiability,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1494,plugin,plugins,1494,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041,1,['plugin'],['plugins']
Modifiability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:134,inherit,inheriting,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,2,['inherit'],['inheriting']
Modifiability,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:1304,refactor,refactoring,1304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261,2,['refactor'],['refactoring']
Modifiability,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:677,variab,variable,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333,4,['variab'],"['variable', 'variables']"
Modifiability,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:174,inherit,inheritance,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236,10,['inherit'],"['inheritance', 'inherited']"
Modifiability,"Hello! ; Thanks for reporting the issue; I've not seen such error during my SOFA compilations and I'm not sure it is CUDA related...; I'll keep an eye out when configuring a new PC for an intern on Monday 💻 . @valeryozenne, I'd like to ask just to be sure.; Did you install the libraries needed for SOFA Core (as shown [here](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)):; ```; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev; ```; There might be something off with`libglew-dev` in special since CMake is looking for it in a CUDA samples folder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561:160,config,configuring,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561,1,['config'],['configuring']
Modifiability,"Hello, . On that PR I recommand that some voluntary people, not involved in the refactoring, to add some additionals tests to see if their understanding match what is implementation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181:80,refactor,refactoring,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181,1,['refactor'],['refactoring']
Modifiability,"Hello, ; You are totally right ! ; I think that I made the same mistake (not making a difference between finding a plugin & having it activated) in several other place...SofaOpenCL ?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/523#issuecomment-346565350:115,plugin,plugin,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523#issuecomment-346565350,1,['plugin'],['plugin']
Modifiability,"Hello, Hugo,. CMakeLists are really not my up of tea...; The faced was that SOFA_EXTERNAL_DIRECTORY is internally using add_subdirectory. While the plugins in applications/pluins are using sofa_add_plugin. This results in different behavior. Eg SOFA_EXTERNAL_DIRECTORY/add_subdirectory does not generate a build option named ""PLUGIN_XXXXX"" to activate/deactivate the plugin which is inconsistent with the other plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074:148,plugin,plugins,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello, I copied the 3 instruments on the Beam Adapter plug-in_ collis. The scn xml format is converted to the python format, and then it can be opened normally through SOFA, but it is stuck when you click animate. What is the reason?; import sys; import Sofa. def createScene(rootNode):; rootNode.addObject('RequiredPlugin',; pluginName='BeamAdapter SofaMeshCollision SofaBoundaryCondition SofaConstraint SofaMiscCollision SofaDeformable SofaGeneralLinearSolver SofaImplicitOdeSolver SofaLoader SofaOpenglVisual SofaTopologyMapping'); rootNode.addObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels showCollisionModels hideMappings hideForceFields'). rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('FreeMotionAnimationLoop'). rootNode.addObject('LCPConstraintSolver',mu='0.1',tolerance='1e-10',maxIt='1000',build_lcp='false'); rootNode.addObject('DefaultPipeline', draw='0', depth='6', verbose='1'); rootNode.addObject('BruteForceBroadPhase'); rootNode.addObject('BVHNarrowPhase'); rootNode.addObject('LocalMinDistance',name='localmindistance',alarmDistance='2',contactDistance='1',angleCone='0.8',coneFactor='0.8'); rootNode.addObject('DefaultContactManager',name='Response',response='FrictionContact'); rootNode.addObject('DefaultCollisionGroupManager',name='Group'). topoLines_cath = rootNode.addChild('topoLines_cath'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=600,spireDiameter=4000.0,spireHeight=0.0,densityOfBeams=[40,10],numEdges=200, numEdgesCollis=[40,20],youngModulus=10000 ,youngModulusExtremity=10000); topoLines_cath.addObject('EdgeSetTopologyContainer',name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_cath.addObject('MechanicalObject',template='Rigid3d',name='dofTopo1'). topoLines_guide = rootNode.addChild('topoL",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:46,Adapt,Adapter,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,2,"['Adapt', 'plugin']","['Adapter', 'pluginName']"
Modifiability,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:676,refactor,refactoring,676,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683,2,['refactor'],['refactoring']
Modifiability,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:218,plugin,plugins,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178,6,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:475,variab,variable,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901,2,['variab'],['variable']
Modifiability,"Hello,. The issue I have with this approach is that this make it very invasive, as Sofa is adding operators in std namespace for all types, even not its own. So within an application that could also does the same, we would get conflicts / redefinition / ambiguity compiler errors, or worse silently override the application's own operators that could have relied on a different string syntax. I agree that the approach of subclassing the standard containers just to be able to package them within a Data is wrong. In our current branch we are refactoring the approach, relying more on `DataTypeInfo` to generically access features like string parsing, without having to put them in the type itself. But this is work in progress so it is not ready to be pushed yet. So in the meantime this change could be pushed, but with the understanding that it may be a temporary solution only. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525:543,refactor,refactoring,543,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525,1,['refactor'],['refactoring']
Modifiability,"Here are the screenshots:. Before:; ![Screenshot 2021-11-09 092420](https://user-images.githubusercontent.com/10572752/140892200-629ad881-ecda-4566-8e6f-565194cec7cb.png). After:; ![Screenshot 2021-11-09 094012](https://user-images.githubusercontent.com/10572752/140892246-c1d4909b-d5df-44b5-9dbe-5ec36da16549.png). As you can see, the graph is more visible, but the application window is no longer centered on the screen. I fixed it in another PR. Notes:; - The viewer size does not change with this PR; - The window size (changed from 800x600 to 1280x900 in this PR) has no effect because it is overwritten when setting the viewer resolution. With this PR, it remains unchanged (still 800x600), so no effect on the final window size.; - The minimum window height (changed from 481 to 700) seems to have an effect when the window is dragged from one monitor to the other and back (at least on Windows). During this movement, the window is resized (probably to adapt to the resolution of the other monitor). If the window is dragged from monitor 1 to monitor 2, and then from monitor 2 to monitor 1, the window size is different from the initial window size. This does not happen when the minimum window height is 481. Since it does not change the initial window size, I recommend to keep the value to 481.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-964013103:961,adapt,adapt,961,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-964013103,1,['adapt'],['adapt']
Modifiability,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:954,extend,extended,954,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360,2,['extend'],['extended']
Modifiability,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:482,plugin,plugins,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598,8,"['plugin', 'refactor']","['plugin', 'plugins', 'refactoring', 'refactors']"
Modifiability,Here is another contribution to handle in an organized and smooth way sofa's components lifetime and deprecation. The idea is to have three sets of components in the CMakeList.txt. ; - the first sets contains more or less the SofaNG components.; - the second sets contains all existing sofa components. ; - the third sets contains deprecated components. . Selecting which set to compile is controlled using a CMakeList argument in an inclusive way (AllComponent include SofaNG while deprecated includes allComponent) . When a component is in the deprecated set we should add the corresponding line to the ; SceneChecker to warn users in a friendly way. This approach is complementary to the pluginization of module which allow user to control the kinds of feature they need and don't compile the others. . What do you think about it ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332151757:691,plugin,pluginization,691,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332151757,1,['plugin'],['pluginization']
Modifiability,"Here is our way of organizing a plugin at defrost:; ```; MyPlugin/; components/; forcefield/; MyForceFieldCompoent.cpp; MyForceFieldCompoent.h; mapping/; visual/; objects/; MyClassThatIsNotAComponent.cpp; MyClassThatIsNotAComponent.h; deprecated/; CMakeList.txt; ```. And we mimick that into the namespaces; ```cpp; namespace sofa::myplugin::components::forcefield::MyForceFieldComponent; ```. Then we ""export"" that into sofa namespace to be consistent with the rest of sofa. ; ```cpp; namespace sofa; {; namespace components; {; using namespace sofa::myplugin::components; }; }; ```. I think this is very close to what Stephane is proposing (it is unclear to me what ""un-supported"" is)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334413515:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334413515,1,['plugin'],['plugin']
Modifiability,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:391,Plugin,PluginManager,391,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435,5,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Here it is @fspadoni; and I just checked the configure script of the CI, this plugin is compiled.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612:45,config,configure,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,"Here you are @alxbilger :; ![image](https://github.com/sofa-framework/sofa/assets/21199245/c963c193-a3eb-4d19-8f91-998731b643aa). ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" showBoundingTree=""0"" gravity=""0 -9 0"">. <Node name=""plugins"">; <RequiredPlugin name=""Sofa.Component.AnimationLoop""/> <!-- Needed to use components [FreeMotionAnimationLoop] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Correction""/> <!-- Needed to use components [LinearSolverConstraintCorrection] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Solver""/> <!-- Needed to use components [GenericConstraintSolver] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Projective""/> <!-- Needed to use components [FixedProjectiveConstraint] -->; <RequiredPlugin name=""Sofa.Component.Engine.Select""/> <!-- Needed to use components [BoxROI] -->; <RequiredPlugin name=""Sofa.Component.LinearSolver.Direct""/> <!-- Needed to use components [SparseLDLSolver] -->; <RequiredPlugin name=""Sofa.Component.LinearSystem""/> <!-- Needed to use components [ConstantSparsityPatternSystem] -->; <RequiredPlugin name=""Sofa.Component.Mass""/> <!-- Needed to use components [MeshMatrixMass] -->; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/> <!-- Needed to use components [EulerImplicitSolver] -->; <RequiredPlugin name=""Sofa.Component.SolidMechanics.FEM.HyperElastic""/> <!-- Needed to use components [TetrahedronHyperelasticityFEMForceField] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Dynamic""/> <!-- Needed to use components [TetrahedronSetGeometryAlgorithms,TetrahedronSetTopologyContainer,TetrahedronSetTopologyModifier] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Grid""/> <!-- Needed to use components [RegularGridTopology] -->; <RequiredPlugin name=""Sofa.Component.Topology.Mapping""/> <!-- Needed to use components [Hexa2TetraTopologicalMa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2112008399:243,plugin,plugins,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2112008399,1,['plugin'],['plugins']
Modifiability,"Here you go.; It may be better to check if FFMPEG and X11 are installed before enabling the plugin.; EDIT: I'll add an `if` block to enable only on Linux, my bad.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590,1,['plugin'],['plugin']
Modifiability,Hey @Younesssss ; Thank you for the code review but we wanted a bit more insight from your previous experience:. - can you confirm me that you implemented a similar feature during your PhD?; - in which case you were having fixed points although drifting ?; - does it make sense to add such a projectVelocity variable?. We want to know if this contribution still makes sense. Thank you @Younesssss,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-746025687:308,variab,variable,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-746025687,1,['variab'],['variable']
Modifiability,"Hey @bakpaul In the renaming data process I use the Refactor option in Clion (IDE), sometimes it does this that it even renames the data in the double quotes even though I specify that the renaming should only be for the code.sorry for that I rechecked all the code base even for the PRS that got merged I think now the code is clean",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2196476181:52,Refactor,Refactor,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2196476181,1,['Refactor'],['Refactor']
Modifiability,"Hey @damienmarchal . what is the scope of this PR? Is it part of the ""refactoring the whole class introspection system"" as you mentioned in your [1087's reply](https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891)?. anyway, I see here two topics in one PR:; - introduction of the future namespace : I understand that it is for keeping compatibility with previous codes, but that's the purpose of the dev branch to include new features, isn't?; - refactoring of the ObjectFactory : why not just updating the existing ObjectFactory ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1050726646:70,refactor,refactoring,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1050726646,2,['refactor'],['refactoring']
Modifiability,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:320,Plugin,PluginManager,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,3,"['Plugin', 'plugin']","['PluginManager', 'pluginName']"
Modifiability,"Hey @epernod and @damienmarchal . I fully agree on removing `canCreate`, however I do not see any better way here without refactoring all forcefields, and since this solution works without too much effort, I think we should use this as a first step, and ultimately do another refactoring for the canCreate with a better solution (which we have to find first). @epernod , to answer your question, the mechanical state found during the `canCreate` (or `create`) method exists (its constructor has been called and the pointer is valid), but hasn't been initialized (its size will be 0). These two methods follow the order in which the scene was _parsed_ (eg xml or python), and after that the init stage will follow the scene graph order. The constructor of the forcefield is called _after_ the `canCreate` by a static call to `forcefield::create`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109:122,refactor,refactoring,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109,2,['refactor'],['refactoring']
Modifiability,"Hey @guparan ,. Sorry for the late response, I'm having a slow week. Yeah I agree with your solution 2, if SofaValidation and SofaNonUniformFem are hard dependencies of core libraries, they becomes almost ""core"" libraries themselves and should be in ""lib"" (""bin"" on Windows). . Will this be in your big cmake refactoring branch (aka #1397)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825:309,refactor,refactoring,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825,1,['refactor'],['refactoring']
Modifiability,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:50,plugin,plugin,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533,4,['plugin'],['plugin']
Modifiability,"Hey @jangirrishabh ,. You can already clone [this branch](https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable). Once compiled, you will find the file libSofaPython.so in your **sofa_build_directory**/lib folder. Simply add this folder's path to your python sys path, and finally import the lib to your python script with `from libSofaPython import Sofa`. If you are not on Linux, you will have to manually copy the library name to the same file name but with the "".so"" extension (ex: libSofaPython.dylib -> libSofaPython.so). Also, I've stop the development of this feature since @damienmarchal is working on a newer python plugin that will support this feature much better than what I've done here. You can follow the development [here](https://github.com/sofa-framework/sofa/pull/771).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876:641,plugin,plugin,641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876,1,['plugin'],['plugin']
Modifiability,"Hey @jjcasmar . Thank you, this is indeed a good suggestion. There are probably other places where such operator overload is used and should be replaced by a free function. We should decide on where to place these free functions and maybe try to list all operator overloads usage in the rest of SOFA and its plugins. J-N",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706542777:308,plugin,plugins,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706542777,1,['plugin'],['plugins']
Modifiability,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:721,plugin,plugin,721,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:311,plugin,plugin,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204,2,['plugin'],['plugin']
Modifiability,Hey @simogasp thank you again for your contribution on the HAPI plugin! Do not hesitate to join us in Paris to present your work related to simulations at the [SOFA Week 2019](https://www.sofa-framework.org/sofa-events/sofa-week-2019/#Symposium%20Program)! Even more if you have some haptics demo!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1189#issuecomment-545341375:64,plugin,plugin,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1189#issuecomment-545341375,1,['plugin'],['plugin']
Modifiability,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:309,inherit,inherits,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316,1,['inherit'],['inherits']
Modifiability,"Hey there,. Sorry for the late response. I have solved the problem. One of the forum posts (cannot find which one or even on which forum) mentioned about computer's ""time zone"" and ""language"" and ""formats"" settings being effective on using Geomagic devices. . Although they worked fine in their own demo software, and with Sofa Framework; the devices were not working with SofaPython3 plugin. I have no idea why but the problem was with the ""formats"" settings of my computer. When I change it to ""United States"" the problem was resolved.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1340581964:385,plugin,plugin,385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1340581964,1,['plugin'],['plugin']
Modifiability,"Hi @EmDash00 ; Welcome on the SOFA GitHub and thank you for the detailed issue. It helps a lot providing a maximum of information!; A recent work in #1361 aimed at updating the OpenCL plugin, which remained inactive for some time. But it led to the duplication of an instantiation. Removing the line 71 should make it work.; If so, could you please contribute this change back?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-643992298:184,plugin,plugin,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-643992298,1,['plugin'],['plugin']
Modifiability,Hi @ErwanDouaille . How are you doing? It's been some time since your last update. Any news on the Communication plugin?; @tgaugry did you use this work on Communication for your own purposes ?. Best!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462,1,['plugin'],['plugin']
Modifiability,"Hi @FabienPean, ; Any idea why RigidLinearDeformationMappings_test is failing on Windows ?; See [windows7_VS-2015_amd64_origin_options tests report](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_2_options/266/testReport/). EDIT: This is certainly nothing related to your PR. It is also failing for sofa-framework/sofa#261. EDIT 2: The problem is known, see issue sofa-framework/Flexible#4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659:390,Flexible,Flexible,390,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659,1,['Flexible'],['Flexible']
Modifiability,Hi @Gabriele111 I do not have any experience with the cmake-gui. That's also why I did not include it in the sofa_env instructions on how to build SOFA. ;); https://github.com/ScheiklP/sofa_env_devel/blob/main/docs/source/setting_up_sofa.rst. Also the default plugin list is manually adapted AFTER compiling SOFA.; https://github.com/ScheiklP/sofa_env_devel/blob/main/docs/source/setting_up_sofa.rst#:~:text=Add%20SofaPython3%20to%20the%20list%20of%20default%20plugins%20so%20that%20SOFA%20loads%20it%20by%20default.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768316751:260,plugin,plugin,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768316751,2,"['adapt', 'plugin']","['adapted', 'plugin']"
Modifiability,"Hi @Iwillsd ,. I am sorry to hear the plugin does not work for you. Could you share your scene or try the example scene in the latest commit on the master branch? You can also use the version of the plugin from the master branch, it uses the static version of the library, so, in principle, there should not be problems with linking. Best regards,; Vlad",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1322280580:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1322280580,2,['plugin'],['plugin']
Modifiability,"Hi @RainVector ; Thank you very much for your interest in our open-source project.; Some codes are available in SOFA for fluid simulation but it is not widely developed. You can for instance find: ; - examples in _examples/Components/behaviormodel/_; - and 2 plugins (in _applications/plugins_):; - SofaEulerianFluid ; - SofaSphFluid. Note: for user questions, please the [SOFA online forum](https://www.sofa-framework.org/community/forum/) instead. GitHub is restricted for developer discussions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519:259,plugin,plugins,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519,1,['plugin'],['plugins']
Modifiability,"Hi @ScheiklP ,. `MeshROI` is a SOFA engine, it inherite from ... `DataEngine` I think (without looking at the code).; The design of the the engine is to call the method `DataEngine::update` when one of the output Data is accessed and if any of the input Data is dirty. Meaning we need to recompute the output from new input value. . But as several mechanisms are required for this design, the `update `method is calling the method `doUpdate `which has to be implemented in each specific engine in middle of other code. So it is normal you don't see call of doUpdate inside the MeshRoi. DO you have a scenario which doesn't work as expected?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3484#issuecomment-1315100053:47,inherit,inherite,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3484#issuecomment-1315100053,1,['inherit'],['inherite']
Modifiability,"Hi @ScheiklP, ; i built sofa from source using python 3.9.18. The problem is SofaPython3 plugin is not present in sofa when i run it and it's not in the plugin list either, even though, when building sofa, i don't get any errors. . Thank you for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1784870087:89,plugin,plugin,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1784870087,2,['plugin'],['plugin']
Modifiability,"Hi @ScheiklP, i have a doubt: i managed to configure sofa with cmake, when i add sofapython3 plugin from the camke-gui i don't get any errors but when i check the plug-in list (plugin_list.conf.default), sofapython3 is not there. is it normal?. thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768181910:43,config,configure,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768181910,3,"['config', 'plug-in', 'plugin']","['configure', 'plug-in', 'plugin']"
Modifiability,"Hi @ScheiklP, sorry to bother you again. I am trying to install sofa from source so that i can use a =>3.9 version of python as you suggested. I'm facing some problems though. when i compile sofa with cmake i get this error ; 'Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.18"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package)'",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804:234,plugin,plugin,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:143,plugin,plugins,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188,2,['plugin'],['plugins']
Modifiability,Hi @aleblanc30 ; A **very** nice PR for a first PR! Thanks a lot reviews have been shared to you:. MOR plugin need to be fixed (we will take care of it) and take reviews into account regarding the object registration.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4991#issuecomment-2373399567:103,plugin,plugin,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4991#issuecomment-2373399567,1,['plugin'],['plugin']
Modifiability,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:422,refactor,refactored,422,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891,2,['refactor'],['refactored']
Modifiability,"Hi @damienmarchal . Thanks for your remarks!. I'll address those probably later this week, meanwhile this PR is back to WIP. For the bindings of **Simulation** and **GUIManager**, I completely agree with you, however, I'm not sure how I would address this without having to create a new binary (new plugin?). I can remove those from this PR while I think of a better way to do this. Anyway, beside **GUIManager::setDimension** which can be used dynamically with current GUIs, those bindings were mostly useful when using the SofaPython plugin as a module loaded into an external python interpreter, which is not yet supported in Sofa (we kinda ""hacked"" the current SofaPython plugin to make it work for some of our work here in the team).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207:299,plugin,plugin,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207,3,['plugin'],['plugin']
Modifiability,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:327,plugin,plugin,327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780,2,['plugin'],['plugin']
Modifiability,"Hi @epernod,. Thanks for the report. I will give that some time after the refactoring done :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1502#issuecomment-704745014:74,refactor,refactoring,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1502#issuecomment-704745014,1,['refactor'],['refactoring']
Modifiability,"Hi @fjourdes, thanks for the suggestion. I used HOBAK for the implementation, adapting it to SOFA `TetrahedronHyperelasticityFEMForceField`. I implemented only the material. Therefore, everything outside of the material, such as matrix clamping, is not yet implemented. Note that HOBAK has also a test suite, with some similarities with mine (test derivative against finite differences). I guess we can check that both test suites match for the same input.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024912176:78,adapt,adapting,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024912176,1,['adapt'],['adapting']
Modifiability,"Hi @flargilliere, sorry for the late answer.; Tutorials have been broken since the start of [pluginization work](https://github.com/sofa-framework/sofa/pulls?utf8=%E2%9C%93&q=is%3Apr%20pluginize).; They indeed need a massive fix+cleanup but unfortunately this is not in our task list for the moment (at least until v17.12). ; See https://github.com/sofa-framework/sofa/pull/453 and https://github.com/sofa-framework/sofa/commit/6803323aab31e1889315f93697d48c44a7099bfa for details.; Is this problem critical for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/445#issuecomment-343488320:93,plugin,pluginization,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445#issuecomment-343488320,1,['plugin'],['pluginization']
Modifiability,"Hi @fredroy, thank you for your reply,. I recently pulled Sofa 20.12 and SofaPython3 and I did not observe this issue. But it is maybe because my cmake variable `SP3_PYTHON_PACKAGES_DIRECTORY` was already set to `bin/python3/site-packages`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-783522388:152,variab,variable,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-783522388,1,['variab'],['variable']
Modifiability,"Hi @fredroy, thank you for your reply. I tried as you suggested but i got this error:. ' [ERROR] [DAGSimulation(Simulation)] Cannot load file 'C:\Users\gfurn\Downloads\liver.py': extension (py) is only supported if the plugin SofaPython3 is loaded. SofaPython3 must be loaded first before being able to load the file. '",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786726505:219,plugin,plugin,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786726505,1,['plugin'],['plugin']
Modifiability,Hi @fredroy. Here it is:. [INFO] [runSofa] PluginRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/plugins;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/collections;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release; [INFO] [runSofa] DataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/share;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/examples;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [runSofa] GuiDataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/applications/projects/runSofa/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_sourc,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:43,Plugin,PluginRepository,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,3,"['Plugin', 'config', 'plugin']","['PluginRepository', 'config', 'plugins']"
Modifiability,"Hi @guparan,. Thanks for the careful review. ; Here are the changes:; - I fixed the erroneous GetMechanical... in plugins; - I removed all the comment code in /* mparams = xxxx */ because these lines makes no sense neither before the PR or after. ; - The /// is just the normal code comment and I have not expectation for them to generate any doxygen comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-792929065:114,plugin,plugins,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-792929065,1,['plugin'],['plugins']
Modifiability,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:277,plugin,plugin,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703,1,['plugin'],['plugin']
Modifiability,"Hi @hugtalbot,. Apologies for the delayed response. I've recently updated my CMakeLists in the ext_plugin_repo, switching from sofa_add_plugin to sofa_add_subdirectory, which has successfully enabled the build of this plugin. Below is the revised CMakeLists for your reference:. ```; cmake_minimum_required(VERSION 3.12). find_package(SofaFramework REQUIRED). # Changed from sofa_add_plugin to sofa_add_subdirectory; #sofa_add_plugin(SofaTearing/ SofaTearing); sofa_add_subdirectory(plugin SofaTearing/ SofaTearing); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1960547563:218,plugin,plugin,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1960547563,2,['plugin'],['plugin']
Modifiability,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:102,plugin,plugin,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009,4,['plugin'],['plugin']
Modifiability,Hi @lagarkane . Thank for your PR. . About the general question of outsourcing plugins builds...I think issues is the proper place to discuss about this.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395#issuecomment-328455753:79,plugin,plugins,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395#issuecomment-328455753,1,['plugin'],['plugins']
Modifiability,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:71,plugin,plugins,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805,1,['plugin'],['plugins']
Modifiability,"Hi @lakehanne, thank you for your PR and welcome to the SOFA community :wave: . I just retargeted your PR towards sofa-framework:master because it seems that you merged master into your v19.06 so it makes more sense (the diff is now readable). About the changes you made, we have our own way to include external repositories in SOFA (we don't use git submodules). Please have a look at applications/plugins/SofaHighOrder or applications/projects/Regression. Moreover, I'm not sure we want to add ROS, SoftRobots and STLIB in SOFA as external repos. This should be discussed with @sofa-framework/reviewers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-523345808:399,plugin,plugins,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-523345808,1,['plugin'],['plugins']
Modifiability,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:134,plugin,plugin,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631,2,['plugin'],['plugin']
Modifiability,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:246,plugin,plugins,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267,2,['plugin'],['plugins']
Modifiability,"Hi @maddin200; after discussion with the SOFA reviewers, we would be really glad if you could propose the change you suggested (removing the uninitialized variable ind and make the for loop over [i] instead of [ind]).; Could you contribute your proposal?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-527897456:155,variab,variable,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-527897456,1,['variab'],['variable']
Modifiability,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:174,Flexible,Flexible,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,3,['Flexible'],['Flexible']
Modifiability,"Hi @nawuxicaa ; Welcome on the SOFA github repository.; The CGAL plugin can (for now) only be built within SOFA, in other words, you have to clone SOFA (which includes the SOFA [CGAL plugin](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/CGALPlugin)), activate the CGAL cmake option and build the whole project. Hope this helps.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:559,Plugin,PluginExample,559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667,3,"['Plugin', 'plugin']","['PluginExample', 'plugins']"
Modifiability,"Hi @polyakovkrylo,. When I call the plugin of the SDK/lib/release/lin-x86_64-gcc/libdhd.a version to compile, I encounter an undefined reference issue.; ``` bash; lib/libSofa.Type.so.20.12.99 lib/libSofa.Compat.so.20.12.99 lib/libSofa.Config.so.20.12.99 -Wl,-rpath-link,/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib && :; /home/dell/raid/hx/sigma7_hx/sdk-3.14.0/lib/release/lin-x86_64-gcc/libdhd.a(dhdComUSB-libusb.o)：in function‘dhdUSBGetDeviceCount(int, int)’：; dhdComUSB-libusb.cpp:(.text+0x9d)：undefined reference to ‘libusb_init’; dhdComUSB-libusb.cpp:(.text+0xba)：undefined reference to ‘libusb_get_device_list’; dhdComUSB-libusb.cpp:(.text+0xed)：undefined reference to ‘libusb_get_device_descriptor’; dhdComUSB-libusb.cpp:(.text+0x120)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x141)：undefined reference to ‘libusb_exit’; /home/dell/raid/hx/sigma7_hx/sdk-3.14.0/lib/release/lin-x86_64-gcc/libdhd.a(dhdComUSB-libusb.o)：in function‘dhdUSBGetDeviceCountList(int*, int*, int*, int)’：; dhdComUSB-libusb.cpp:(.text+0x215)：undefined reference to ‘libusb_init’; dhdComUSB-libusb.cpp:(.text+0x24e)：undefined reference to ‘libusb_get_device_list’; dhdComUSB-libusb.cpp:(.text+0x297)：undefined reference to ‘libusb_get_device_descriptor’; dhdComUSB-libusb.cpp:(.text+0x2eb)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x30c)：undefined reference to ‘libusb_exit’; ```. So I switched to using the dynamic linking SDK/lib/release/lin-x86_64-gcc/libdhd.so.3.14.0 for compilation, which compiled successfully, but the import of the plugin failed when running the scene example in the [force dimension plugin](https://gitlab.com/polyakovkrylo/forcedimensions). ```. Gtk-Message: 14:09:35.149: GtkDialog mapped without a transient parent. This is discouraged.; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file o",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229:36,plugin,plugin,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229,2,"['Config', 'plugin']","['Config', 'plugin']"
Modifiability,Hi @sergeiNikolaev . I'm not sure what you want. ; There is actually several tests of python functionality in different plugins. ; SofaPython_test and SofaTest are good starting point. . Now if you want to lauch automatically something like 'unittest' or 'coverage' I have no idea but this is a good question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083:120,plugin,plugins,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083,1,['plugin'],['plugins']
Modifiability,"Hi @sofa-framework/reviewers,. August was a quiet month for SOFA-NG. ## Sofa.Helper.Bvh; The [pull-request](https://github.com/sofa-framework/sofa/pull/741) has been merged. ; We have now 2 NG modules in the [ng branch](https://github.com/sofa-framework/sofa/tree/ng) of SOFA! :tada:. ## Sofa.Helper.*; Here is an overview of the other Sofa.Helper parts and how hard factorization should be.; Reminder: architecture proposal comes from [SofaDefrost cleanTheMessStep1 branch](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa).; ```; Sofa.Helper.Image; 3 classes: Image, ImageDDS, ImageRAW; sofa::helper::io -> sofa::helper::image; easy. Sofa.Helper.Types; Many classes; some sofa::helper -> sofa::helper::types; some sofa::helper::types -> sofa::helper::types; hard, may need sofa2ng modifications. Sofa.Helper.Rendering; 2 classes: FrameBufferObject, Transformation; sofa::helper::gl -> sofa::helper::rendering; easy. Sofa.Helper.Rendering.Gl; Many classes; sofa::helper::gl -> sofa::helper::rendering::gl; medium. Sofa.Helper.Mesh; 9 classes (everything from sofa/helper/io except Image*); sofa::helper::io -> sofa::helper::mesh; medium; ```. Everyone is more than welcome to do a part (or at least try to). ; Keep me informed in the comments, I can help if you have trouble using sofa2ng. ## Next steps; - Continue discussions about SofaFramework refactoring with vonlunteers (who does what and how); - Finish refactoring SofaHelper -> insure 100% coverage; - Move on with SofaCore. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209:1374,refactor,refactoring,1374,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209,2,['refactor'],['refactoring']
Modifiability,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:68,Plugin,Plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491,13,"['Plugin', 'config', 'refactor']","['Plugin', 'PluginManager', 'config', 'refactor', 'refactoring']"
Modifiability,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:153,refactor,refactoring,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,9,"['Refactor', 'adapt', 'refactor']","['Refactoring', 'adapt', 'adapting', 'refactoring']"
Modifiability,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:675,refactor,refactoring,675,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414,2,['refactor'],['refactoring']
Modifiability,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:351,plugin,pluginized,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059,1,['plugin'],['pluginized']
Modifiability,"Hi @sofa-framework/reviewers,. Long time no see, the NG task has been quite slow this last months.; Here is a quick follow up of October and November activity. ## Sofa.Helper.Types; I finished the refactoring for Sofa.Helper.Types. ## Next objectives; Update NG branch; Open PR for Sofa.Helper.Types; Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942:197,refactor,refactoring,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942,2,['refactor'],['refactoring']
Modifiability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:148,Plugin,Pluginization,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,1,['Plugin'],['Pluginization']
Modifiability,"Hi @vmagno ; Great job, could you please update the PR to take into account the changes made in master ? ; (Small tips: Most of the the problematic files have been moved in the plugins directory :))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316:177,plugin,plugins,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316,1,['plugin'],['plugins']
Modifiability,"Hi Adrien, . I'm looking into the SofaCUDA plugin but I don't understand where the problem you happens. ; Is it in a separated branch or clone ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/320#issuecomment-313344108:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320#issuecomment-313344108,1,['plugin'],['plugin']
Modifiability,"Hi Bruno . I forgot to say that few weeks ago during the meeting was asked why not naming ""doXXX"" the methods to override to receive event. I think there is a good reason for that...it is because those are not delegates...those are more like ""events"". . So to me I expect this convention:; - doXXXX when there is an XXX method called delegating some part to the an inherited class; - onXXXX to do something when the XXX ""event is received. . I'm sorry to remind me that so late as I see you have changes all the names in your PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466505145:365,inherit,inherited,365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466505145,1,['inherit'],['inherited']
Modifiability,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:196,plugin,plugins,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366,5,"['plugin', 'variab']","['plugin', 'pluginName', 'plugins', 'variable']"
Modifiability,"Hi Damien,. I think this discussion is not ""Moving from SofaKernel ot plugin"" but rather ""Moving SOFA modules to plugins"".; Moreover, I think we can involve many people, like @fjourdes who already brainstormed about it some years ago! Let's start the discussions!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352:70,plugin,plugin,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Damien,; Thanks for the input,I see now why a different type naming was used for the factory, I didn't know it was the type ""encoding"" for python. I also think that explicit data typing is a necessary feature to override an implicit type introspection. In my plugin for instance I have some ""relatively complex"" data structures that are reduced to basic numpy arrays when passed to python, and for which type introspection from python back to cpp wouldn't give the correct type. Also, wouldn't it make sense to completely override the datatype::name() string for the python style typename, already in the sofa DataTypeInfo, not just in the python factory?; It would break scenes that explicits template types, but it would be more consistent. Looking fwd to see how things goes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977:262,plugin,plugin,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977,1,['plugin'],['plugin']
Modifiability,"Hi Damien,; aren't the two features redundant ?; I was actually already using this functionality for a repository including several plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831:132,plugin,plugins,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831,1,['plugin'],['plugins']
Modifiability,"Hi Damien. I understand what you want to do (I think) and it's certainly an important aspect of cleaning SOFA. If by moving a component to a specific location we change its 'status' to 'deprecated' (and the user receives the appropriate warning), it seems a very good solution.; However, I did not understand how we'll do this in practice with SOFA-NG. In the many components that would go in plugins, some of them need to be flagged as 'deprecated' and others as 'too buggy for SOFA-NG', i.e. how / when do we decide where a component sits on its own life cycle? Knowing that I would be very tempted to put many of these in a 'close to retirement' state ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180654:393,plugin,plugins,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180654,1,['plugin'],['plugins']
Modifiability,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:190,plugin,plugins,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538,1,['plugin'],['plugins']
Modifiability,Hi François . Fred recently proposed to remove the ImagePng.cpp to use the plugin CImgPlugin. ; So I think we can close this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/446#issuecomment-336573258:75,plugin,plugin,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446#issuecomment-336573258,1,['plugin'],['plugin']
Modifiability,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:80,plugin,plugin,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228,2,"['coupling', 'plugin']","['coupling', 'plugin']"
Modifiability,"Hi Fred,. If possible I think SVector should stay where it is because we want to deprecate it anyway. . About SVector deprecation/refactoring. ; To me this class only exists to implement a different parser [a, b, c] instead of a b c. It is a mistake to have a different vector class just to customize the parser. The good news is that adding a parser that understand the two syntax is possible and quite easy to do se we can just use helper:vector everywhere.; But this should be in its own PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893#issuecomment-799436428:130,refactor,refactoring,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893#issuecomment-799436428,1,['refactor'],['refactoring']
Modifiability,"Hi Fred,. Thanks for the work. . Can you elaborate a bit about moving Vector3 to Vec<3, SReal> instead of Vec3. . On my side I was using the parametrized version (Vec<A, B>) only when the templates parameters are really variables (eg: in something like Vec3<DataType::NDim, DataType::Real>). When the type I want is actually fully definied I was more on using Vec3, Vec3f, Vec3d (to be obvious and explicit that the type is fixed). . I also searched in our code base to see what was the most common option and found:; - 1192 matches for ""Vec<3""; - 4907 matches for ""Vec3""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2560#issuecomment-1001667363:220,variab,variables,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2560#issuecomment-1001667363,1,['variab'],['variables']
Modifiability,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:260,variab,variables,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038,1,['variab'],['variables']
Modifiability,"Hi Guillaume,. I hesitated to do what you suggest...but I concluded that it be better to have people to configure the feature properly instead of living with a partially working approach (no line jump). . But...maybe with a big msg_warning() <<; ""You didnt configured your editor properly...falling back to a shitty solution without line jump""... ; until properly configured it would be ok :) . Can you make it ? I'm focus on something else and have not time until tomorrow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392:104,config,configure,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392,3,['config'],"['configure', 'configured']"
Modifiability,"Hi Guillaume,. Thanks for the PR, contains useful things. About the ""plugins"" directory I personally like the idea of stopping to mix shared libraries with sofa plugin, so it is all right to me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694:69,plugin,plugins,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905,5,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:149,plugin,plugins,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481,6,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Hugo,. If I remember correctly there is still an inconsistency between the internal logic between DiagonalMass and UniformMass. I started with these two because I wanted to review all the component we are using in our soft-robots plugins. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516:233,plugin,plugins,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516,1,['plugin'],['plugins']
Modifiability,"Hi Hugo,. Thanks for the question and @jnbrunet for the very interesting answer. . To me #define activated feature must always be removed in any case. So the question should be,; do we transform that into a runtime feature that is activated by a data<boolean> or to directly remove it. If version ""optimized"" is always faster we could probably keep it...but refactoring the API using c++11&c++17 so it look shorter and nicer. . I just notice this ugly #ifdef DISPLAY_TIME in CGLinearSolver......cleaning... cleaning...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026:358,refactor,refactoring,358,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026,1,['refactor'],['refactoring']
Modifiability,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:193,refactor,refactoring,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631,4,['refactor'],['refactoring']
Modifiability,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:240,plugin,plugin,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289,1,['plugin'],['plugin']
Modifiability,"Hi Maxime,. It is funny because I pointed this SPTr stuff in my yesterday's slides for STC4 presenting some of the Sofa anti-patterns. . So on my side I totally agree on the general objective of reducing the coupling between .h and I also fully agree on the method you are proposing on doing that incrementally. . As the topic interest you I would be happy to have your opinion on the following:; - should we advocate to have forward definition only header (something like base_fwd.h) to avoid repeating the same namespace { namespace { namespace {class MyClass;} }} ?; - should we advocate for the use of more opaque object either using PIMPL or storing all data as you suggested in a previous issue:; ```cpp; struct MyObjectData ; ; class MyObject ; {; private: ; struct MyObjectData m_data; ; }; ```. While in the cpp file having; ```cpp; #include <Data.h>; #include <DataFilename.h>; #include <SuperOtherComplexObject>. stuct MyObjectData; {; Data<int> myint;; DataFilename filename;; SuperOtherComplexObject object;; };; ```. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235:208,coupling,coupling,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235,1,['coupling'],['coupling']
Modifiability,"Hi Mimesis-bot, I'm happy to hear you have an opinion on this PR :); AI is making super impressive progress nowaydays. EDIT: . To me the good design should be to have:; - SofaOpenglRendering (which contains the DrawToolGl implementation and the gl helpers). ; - SofaOpenglVisual (which contains component that draw stuff using ogl). The PR only wanted to isolate in a plugin the sofa (object/component) so the SofaOpenglVisual that are used for rendering not the remove all gl rendering from Sofa so gl rendering is handle in away similar to the other plugin and now with this #ifdef SOFA_NO_OPENGL. . EDIT: ; But I would prefer to focus on having that done for either:; - SofaOpengl4Rendering; - SofaOpengl4Visuals. Or; - SofaQt3DRendering; - SofaQt3DVisuals; ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448:368,plugin,plugin,368,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448,2,['plugin'],['plugin']
Modifiability,"Hi Sergei, . Sorry to reply that late. So to answer your question... I think a separate python script is fine. To ease the sharing of those utilitary python script we (at Defrost) have started a dedicated library called STLIB (for Sofa Template Library). I would actually be interested to add your OrientedBoxROI there. . You can find more information by browsing the auto-generated documentation at:; http://stlib.readthedocs.io/en/latest/index.html. While the plugin is there: ; https://github.com/SofaDefrost/STLIB. It is a work in progress but as we are now basing our other plugins examples and scenes to this I hope it to grow fast.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705:462,plugin,plugin,462,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Vlad. We have discussed your PR during the sofa dev meeting. And this is what came out : ; This is of interest but would require an example/context (plugin using it) of use to see how you use it. More over, it still need a lot to do to integrate it in a more standardized way to be more generic regarding the type of element. And finally, and we could help you for this, this feature would need unit tests. This pr is currently set to WIP, waiting for further comment from you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121:152,plugin,plugin,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121,1,['plugin'],['plugin']
Modifiability,"Hi all, . Defrost is happy to announce that we have dropped the SOFA_FLOAT from our SoftRobots & SoftRobots.Inverse plugins. . About PR #853,  If you think this is not the way to go...please tell it now because otherwise it will happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-446570554:116,plugin,plugins,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-446570554,1,['plugin'],['plugins']
Modifiability,"Hi all, . I close this PR because this plugin is now here: https://github.com/SofaDefrost/plugin.SofaPython3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449,2,['plugin'],['plugin']
Modifiability,"Hi all, . It was pointed by Bruno Marques that this format if very close to mhd. So we should use it. ; As Mhd is supported by Image plugin we can close this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/353#issuecomment-325370348:133,plugin,plugin,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353#issuecomment-325370348,1,['plugin'],['plugin']
Modifiability,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:118,config,config,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498,7,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:178,maintainab,maintainable,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877,2,['maintainab'],['maintainable']
Modifiability,"Hi all, . The problem with this whole SofaNG project is that it imply a major refactoring of Sofa and thus involve a lot of changes to the existing code base and imply lot of file move (which is know to be a troublemaker with git). . To evaluate how hard it would be to have sofa that match our whishes I decided to put my hand-on; https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa. Now the problem is that it is not possible to reach this state without breaking a lot of things validating each step incrementally. I don't know how to do that but I really think we need to find either a solution or stop talking about sofang. . I have done a small tool to automate a set of changes to generate an NG directory and the corresponding cmakelists straigh from the existing master code base. ; Example of a changeset: ; ```python; {; ""commands"" : [; [""git"", ""checkout"", """" ,""Sofa.Helper.Types""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""init""],; [""mkdir"", ""Sofa/Helper/Types/src/sofa/helper/types/""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.h"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.h"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Moving all the file to their new location""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133:78,refactor,refactoring,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133,1,['refactor'],['refactoring']
Modifiability,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:283,plugin,plugin,283,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583,1,['plugin'],['plugin']
Modifiability,"Hi all,. I'm still not sure if moving the whole VolumetricData into a plugin is a move we want to make so I pushed the current version to get your opinion if the direction is ok for you (or not). ; If we are courageous... is suggest re-organizing the directory/file layout otherwise we could just have all the file dropped into the plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135:70,plugin,plugin,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135,2,['plugin'],['plugin']
Modifiability,"Hi all,. On my side I have no plan to clean or refactor the existing sofa code in the next week.; It was just there for helping student to debug their implicit field and without the RaymarchingEngine to generate the splats it is of very small use. So let's move PointSplatRender shouldn't out of this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-704146619:47,refactor,refactor,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-704146619,1,['refactor'],['refactor']
Modifiability,"Hi all,; +1 to Igor and I add @olivier-goury to the discussion as he is very interested by the topic. . 1) Having SparseLDL crashing is a shame (or a joke) that was during since too long. The good news is that the issue was fixed last week in this PR: ; - https://github.com/sofa-framework/sofa/pull/655 (it shouldn't crash that much :)). 2) About the lack of get messages... I discovered there is a #define MULTIMATRIX_VERBOSE that can be changed and this is actually really helpfull to get a minimal amount of understanding of what is happening. https://github.com/sofa-framework/sofa/pull/660/commits/90f413eb2b79ba45fbc742e9777691203ca33886. Now having to change a #define in some obscure .h file is also a shame so as a first step we should replace this #define with a real variable that users can activate/deactivate at run time (without recompiling). This is easy to do. . 3) At Defrost those aspects are under heavy investigation and we are probably willing to help anyone that comes with a road map to improve the situation. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702:779,variab,variable,779,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702,1,['variab'],['variable']
Modifiability,"Hi all. I really would like to see this happen! It's something I've been advocating for a long time. Feel free to add me to the workgroup.; From a user perspective (and organization standpoint) we could do something like what's done in python. Plugins could be grouped in packages (or to stay closer to the current architecture we could split ""modules"" into ""plugins""). Then if someone wants just a plugin from a package we could explicitly load it this way:; from FEMpackage import 2DFEMplugin; and if you want all of it; from FEMpackage import *",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292:244,Plugin,Plugins,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292,3,"['Plugin', 'plugin']","['Plugins', 'plugin', 'plugins']"
Modifiability,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:354,variab,variables,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,2,['variab'],['variables']
Modifiability,"Hi everyone, this this is an ""all in one"" branch that adds functions in Sofa ; before we can make a PR with the PSL plugin. The PR is two month old...no one complains and now all the added function are tested & documented so it may be merged soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765:116,plugin,plugin,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765,1,['plugin'],['plugin']
Modifiability,"Hi folks,. I was just passing by and notice the work done by fred so thanks for the work done. . I made a branch where I refactor the DataCallback to make it use the std lib #include<functional> and lambdas instead of re-implementing a similar system with the class Callback/CallbackImpl. ; See: https://github.com/mimesis-inria/sofa/pull/12. But now this is done I wonder what are the difference with the DataCallback and the existing DataTrackerFunctor implemented in DataTracker.h ? Can you explain a bit ? . To me the differences are:; - the DataTrackerFunctor is allowing one callback and not multiple (but should be easy to change); - the DataTrackerFunctor is templated by the callback (which look not needed to me) ; - the DataTrackerFunctor is not using lambda/functional (but should be easy to change); - the DataTrackerFunctor is passing itself to the functor (which I think is a good idea to access the list of data that have changed, but...lambda are much more easy to work with.); - the DataCallback is storing the tracked data in m_data but this is also done in its parent ""inputs"" is this data duplication useful ? ; - the DataTrackerFunctor is ""hacking"" the setDirtyValue() to trigger the callback while the DataCallback is using notifyEndEdit(). It is unclear to me if this stricly equivalent but the DataTrackerFunctor implementation is shorter. => So this is not equivalent...setDirtyValue is called before the value is changed while notifyendEndif ...when it has changed. . To me the two approach needs to be either unified and/or cleaned so we have a consistent API. . @marques-bruno can you confirm that DataTrackerFunctor is notified before the value is changed, if so this is a big difference (well I wonder what the DataTrackerFunctor is used for)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674:121,refactor,refactor,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674,1,['refactor'],['refactor']
Modifiability,"Hi fred,. Thanks for this PR. I made some totally minor cosmetic comment in the source code. I understand correctly what it does is that is loads by default the plugin that are compiled with sofa. . Maybe I misunderstood the initial purpose of your first PR but I though it was more to autoload a plugin if the one of its component was requested from the scene. Is this stil the purpose of the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805:161,plugin,plugin,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805,2,['plugin'],['plugin']
Modifiability,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1081,plugin,plugin,1081,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908,2,['plugin'],['plugin']
Modifiability,"Hi guys :); You could let cmake generate for you for each module the config.h (basically only defines for import/export symbols rules, If I am right) using [generete_export_header](https://cmake.org/cmake/help/v3.7/module/GenerateExportHeader.html).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461045251:69,config,config,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461045251,1,['config'],['config']
Modifiability,"Hi guys @ChristianDuriez @fjourdes ,. I wanted to address this issue.; What would be your advice then ? Implementing only one code for everything (FixedConstraint), make two of them (FixedC and PartialFixedC) but using inheritance? another approach ?; Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/440#issuecomment-340473861:219,inherit,inheritance,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440#issuecomment-340473861,1,['inherit'],['inheritance']
Modifiability,"Hi guys, This PR breaks the headless plugin, at least the version I am using. @jnbrunet or @guparan if one of you have time to explain me more on monday. Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-632717414:37,plugin,plugin,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-632717414,1,['plugin'],['plugin']
Modifiability,"Hi matt,. I wanted to test a very basic approach based on completely reinitializing the Python environment ; you can have a look here: https://github.com/SofaDefrost/sofa/tree/reinit-plugin. But there is problem with numpy (an probably other modules) that does not support to be reloaded and crashing sofa. But if I comment the numpy parts it is working ok. . Now the challenge is either to fix the numpy crash or to come with a different approach (probably closer to what I implemented in the livecoding module) in which we don't destroy the python environment but only reload some of the modules. D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373:183,plugin,plugin,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373,1,['plugin'],['plugin']
Modifiability,"Hi rainvector. . As far as can say there is some fluid implementations that are relatively out-dated in the plugin SofaEulerianFluid. Maybe you will have more answers on the user's forum https://www.sofa-framework.org/community/forum/section/user-forum/. Regards,; Damien.; EDIT1: And you are right, i quickly looked into the plugin and it does not contains documentation.; EDIT2: There is several examples which contains fluids simulations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626:108,plugin,plugin,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626,2,['plugin'],['plugin']
Modifiability,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:277,adapt,adapt,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220,1,['adapt'],['adapt']
Modifiability,"Hi vlad, this PR has also been discussed during the dev meeting. ; The conclusions are the same as for the #4226 : we need more context/example of use (for instance to see how you use it in your scenes or plugin). . We are also curious to know how you handle differences between this and the group mechanism : what happens if you are in the same time in the same group and in the same layer ? Are the two mechanism really necessary ? ; It could be also possible to remplace the group mechanism by yours to have a more positive mechanism (same layer = collision instead of diffrent group = collision). But for this it would need to handle multiple layer by object. . And finally, again, some unit testing would be great if we manage to find a mechanism that suites every one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1757168402:205,plugin,plugin,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1757168402,1,['plugin'],['plugin']
Modifiability,"Hi, ; It looks fine to me, and everything is working well with our plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/869#issuecomment-454837833:67,plugin,plugins,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/869#issuecomment-454837833,1,['plugin'],['plugins']
Modifiability,"Hi, ; thank you for your report.; Could you please specify your setup:; OS, SOFA version and BeamAdapter plugin version and if it is compiled in or out of tree?. Does the crash happened at start?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1314960371:105,plugin,plugin,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1314960371,1,['plugin'],['plugin']
Modifiability,"Hi, @alxbilger! It works the opposite way the collision groups work. With collision groups, collision can only occur between the models' group sets do not overlap (no common groups). With the collision layers it' s the opposite -- collision can only occur if the models are in the same layer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1747167800:202,layers,layers,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1747167800,1,['layers'],['layers']
Modifiability,"Hi, I just discovered that you can select the device using the `CUDA_DEVICE` environment variable. I've never tried it though. Normally, you should have a console print looking like `CUDA: Using device DEVICE_ID : DEVICE_NAME` at the initialization of the CUDA module.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884544191:89,variab,variable,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884544191,1,['variab'],['variable']
Modifiability,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:246,config,configure,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942,2,['config'],['configure']
Modifiability,"Hi, can you explain me in which case you need a contoller to inherite from this class to active or not the sphereModel compare to having a controller that search for the sphereModel and change the Data<bool> activate ; is it to be able to activate only a set of spheres?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590795653:61,inherit,inherite,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590795653,1,['inherit'],['inherite']
Modifiability,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:61,plugin,plugin,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977,1,['plugin'],['plugin']
Modifiability,"Hi, sorry for the delay. If all the contributors of the plugin agree, I see no objection merging this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/793#issuecomment-431791551:56,plugin,plugin,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/793#issuecomment-431791551,1,['plugin'],['plugin']
Modifiability,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:146,plugin,plugin,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853,2,['plugin'],['plugin']
Modifiability,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:184,Plugin,PluginManager,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865,16,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'plugins']"
Modifiability,"Hi,. Could you put your scene example here and the error message you get.; The Geomagic plugin just create SOFA components to be used in the scene graph so there should be no interference with the SofaPython3 mechanism.; But nothing is better than testing! 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580,1,['plugin'],['plugin']
Modifiability,"Hi,. I just read this comment. I'm not 100% sure but I think that these operations are specified for cuda. I don't really know what will be the consequences for the cuda plugins if this pr is merged, but I guess it will break the parallel implementation. . Hadrien;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1260827157:170,plugin,plugins,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1260827157,1,['plugin'],['plugins']
Modifiability,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295,8,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:89,config,configuration,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567,1,['config'],['configuration']
Modifiability,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:33,inherit,inheritance,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359,2,"['inherit', 'variab']","['inheritance', 'variable']"
Modifiability,"Hi,; You need to add the correct plugin into your scene requiredPlugin. It should be `SofaTopologyMapping` in your version. I'm moving this issue to the Discussions section as it is related to your scene creation rather than a bug inside SOFA.; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1308563217:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1308563217,1,['plugin'],['plugin']
Modifiability,"Hi,; could you post what you wrote in the Cmakelists.txt of your plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-605446157:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-605446157,1,['plugin'],['plugin']
Modifiability,"Hi. . Regarding the update of the plugin for newest version of SOFA : we are a small team of developer for this open source project. The maintenance of all the plugins that are actually used by the community takes most of our time. We need to focus on what most of the community needs and so, if only one person is interested in an old plugin, we cannot take a lot of time on updating it. . This being said, because SOFA is an open-source project, you can contribute by updating it yourself and the making pul-requests to give you fix to the community ! Or wait that more people gain interest in the same plugin as yourself so that it becomes a priority for us. . I am sorry if this answer is not very helpful, and I wished I could help you more. If you encounter any big issue while trying to update it, you can come and seek help, we will help you in such journey.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4934#issuecomment-2311981772:34,plugin,plugin,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4934#issuecomment-2311981772,4,['plugin'],"['plugin', 'plugins']"
Modifiability,Hi; i use plugin manager in release and debug mode without any problem,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530:10,plugin,plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530,1,['plugin'],['plugin']
Modifiability,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:44,config,config,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038,6,"['config', 'portab']","['config', 'configuration', 'portable']"
Modifiability,How can you do `#include <sofa/simulation/simulationcore.h>` and not `#include <sofa/simulation/config.h>` ? ; Both files are in the same place :confused:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540955130:96,config,config,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540955130,1,['config'],['config']
Modifiability,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:146,config,config,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680,2,['config'],['config']
Modifiability,"Hummm the code of PointSplatRenderer is strangely *very* similar to PointSplatModel 🤔(which is also in SofaOpenGLVisual 🙃 ); Intentional ?; The difference I could see is that the new one takes explicit data (PointSplatModel gets context, etc). In any case, I would be against copy/paste and more about refactoring/cleaning the existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701446275:302,refactor,refactoring,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701446275,1,['refactor'],['refactoring']
Modifiability,"I Maxime,. Thanks to rise up this kind of debate. . I agree with you that the cost for data init may be large. I see two problems:; - a lot of informations are duplicated in each instance of the component while most of the time they are per component informations (like the namestring, the helping docstring, etc...). I would be great to have that shared informations to be factored somewhere either it is per-class or per data.; - the iniData done in the constructor. As you mentioned the cost may be large at component creation. Do you have a code suggestion for refactoring so that we can have an idea on: ; - how invasive would it be (number of line of code to change :)) ? ; - what would be the performance difference ? . I do add Data at run time from time to time but it is not crucial for me and I could be handle by something called a DynamicData :) . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984:565,refactor,refactoring,565,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984,1,['refactor'],['refactoring']
Modifiability,I actually just finished a much better version that is not deleting the environment anymore... please have a look. EDIT: and it is not crashing with numpy. ; EDIT: Instead of using a per plugin reinit we could probably trigger the cleaning by calling the cleaning code when the scene is destructed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284736038:187,plugin,plugin,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284736038,1,['plugin'],['plugin']
Modifiability,"I actually just used grep to parse clang's compilation output to find the files and lines where the warning occurred, then sed to add the override keyword. I didn't do all plugins so there might still be a lot to add. But for the ones I went through, the number of override warnings went from over 1000 to none (with clang 5 on Linux).; It's true that I didn't test on Mac... At least now when we add override somewhere it should remove warnings rather than add more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909:172,plugin,plugins,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909,1,['plugin'],['plugins']
Modifiability,"I added deprecation for the removed variable, and renamed the Data variable name (with deprecation). It will trigger warnings in SoftRobots and Cosserat.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4786#issuecomment-2188231439:36,variab,variable,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4786#issuecomment-2188231439,2,['variab'],['variable']
Modifiability,"I agree with all the points :F and I think we need to have a bit more info about this component...; ; > ; > But it is unclear to me if the implementation proposed in the PR is enough because:; > ; > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",. Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). > * using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... (I will reply to this in my next answer to alxb). > * the implementation in BTD also looks highly suspicious with:; > ; > * plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; > * a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs. The lack of comments, and the fact that the ""partial_solve"" API seems to come from this class is a bit difficult to follow yeah :p.; As far as I could see, the BTDblabla/LinearSolverCC is only used for the beam-related stuff.; All in all, I guess we need more information about it @ChristianDuriez",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506:228,inherit,inheriting,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506,1,['inherit'],['inheriting']
Modifiability,"I agree. Sofa/gpu/cuda only make sens if we have sofa/gpu/opencl or sofa/multithread.... but it would be in other plugin. So if you keep the SofaCuda as first level in your namespace/hierarchy, it will work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406181444:114,plugin,plugin,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406181444,1,['plugin'],['plugin']
Modifiability,"I already worked on binding Data vectors on this branch: [sofapython_containers](https://github.com/Anatoscope/sofa/tree/sofapython_containers). It is not finished yet, but any help is welcome. Mainly making proper binding for vector of vectors (of vectors...) with different sizes (and SVector).; I had to enhance DataTypeInfo for that, it implies quite deep modifications. The SofaPython/examples/SofaNumpy.py example shows what is doable (even non-numpy related stuff). But it is a pain in the ass to fix codes that were beneficing from those undefined/incorrect behaviors. It is why it is not yet PR, but maybe it could become a wip PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306523435:307,enhance,enhance,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306523435,1,['enhance'],['enhance']
Modifiability,I am not on Ubuntu. It seems to be a problem with a test in the Flexible plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983:64,Flexible,Flexible,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"I am surprised people are still using this plugin (considering its state) and it would be more than advised to use SofaGLFW instead 🧐; Nevertheless, I already fixed the compilation in the PR removing boost::program_options #2263",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2274#issuecomment-887598926:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2274#issuecomment-887598926,1,['plugin'],['plugin']
Modifiability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:788,coupling,coupling,788,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['coupling'],['coupling']
Modifiability,"I call that 'un doigt dans l'engrenage', nice ! . I totally agree on the fact that those methods should be final otherwise the 'delegate' pattern used here makes no sense because we cannot trust it for child class... . But then I don't fully agree on the protected part : it might become cumbersome to test them in unit test with such protection . It might be good to understand why those base methods where overridden instead of the ""delegate' one, maybe old artifact on un-refactored components ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2315676097:475,refactor,refactored,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2315676097,1,['refactor'],['refactored']
Modifiability,"I can see two errors:; - one is that it seems you switched on SOFA_FETCH_PYTHON, which was the plugin related to python2 and which is not supported anymore -> just switch `SOFA_FETCH_PYTHON` off, and disable `PLUGIN_SOFAPYTHON` if it is present; - `Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS` it seems you did not install the package developement for python3 ; did your execute `sudo apt-get install python3-dev` (or `sudo apt-get install python3.8-dev`) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489531612:95,plugin,plugin,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489531612,1,['plugin'],['plugin']
Modifiability,I can't push on your branch. Did you forbid it?; Removing `using namespace std;` in applications/plugins/ARTrack/extlibs/ARTrackLib/mainTracker.cpp does fix the error on Windows.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458:97,plugin,plugins,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458,1,['plugin'],['plugins']
Modifiability,"I close this @marques-bruno but is an example / doc on ""how to build a binding"" for [SofaPython3](https://github.com/SofaDefrost/plugin.SofaPython3) available?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896:129,plugin,plugin,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896,1,['plugin'],['plugin']
Modifiability,"I close this PR, It changes a lot the behavior of the plugin loader, that now complains that many symbols are not defined. I guess it's the same behavior for CPU alreadydefine symbols. I d'ont know how we could remove the thousands of warnings it generates anyway.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597:54,plugin,plugin,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597,1,['plugin'],['plugin']
Modifiability,I close this one to open a new one without the move to plugin directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/663#issuecomment-392523906:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663#issuecomment-392523906,1,['plugin'],['plugin']
Modifiability,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:577,portab,portable,577,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466,1,['portab'],['portable']
Modifiability,I completely agree @fredroy ; There seems to be a lot to refactor and clean in the CGALPlugin and maybe it deserves a big PR on its own.; I'll modernize our calls to the draw functions on this component and let you know when I'm done,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-834176965:57,refactor,refactor,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-834176965,1,['refactor'],['refactor']
Modifiability,I confirm the configuration is way faster. Still too slow on Windows though. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277302677:14,config,configuration,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277302677,1,['config'],['configuration']
Modifiability,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:363,plugin,plugins,363,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380,2,['plugin'],['plugins']
Modifiability,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:372,refactor,refactor,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360,8,"['plugin', 'refactor']","['plugin', 'refactor', 'refactored']"
Modifiability,I did not have a lot of time to progess here but still a reminder for later:; - in Flexible : BezierTetrahedron.scn should not be built anymore since it depends on SofaHighOrderTopologies; - CubeTopology : crashes since the CubeTopology does not implement the position (point) topology,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245:83,Flexible,Flexible,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245,1,['Flexible'],['Flexible']
Modifiability,"I did the modification in `TypeInfo_Text.h`, but build fails if I extend it to `FixedArrayTypeInfo.h`, apparently because of the template specialisations on Rigid types, for instance :; ```; FixedArrayTypeInfo.h:195: error: ‘const DataType’ {aka ‘const class sofa::defaulttype::RigidDeriv<2, double>’} has no member named ‘data’; 195 | return data.data();; | ~~~~~^~~~; ```; (which makes sense).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329533975:66,extend,extend,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329533975,1,['extend'],['extend']
Modifiability,"I did, the plugins are activated by default in the others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-330531075:11,plugin,plugins,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-330531075,1,['plugin'],['plugins']
Modifiability,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:145,refactor,refactor,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522,2,['refactor'],['refactor']
Modifiability,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:586,plugin,plugins,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630,4,"['flexible', 'plugin']","['flexible', 'plugins']"
Modifiability,"I don't know about the status of this component, but I just want to keep the compatibility with this component in my matrix refactoring branch. Note that there is a similar component in BeamAdapter: AdaptiveBeamForceFieldAndMass",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1272876179:124,refactor,refactoring,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1272876179,2,"['Adapt', 'refactor']","['AdaptiveBeamForceFieldAndMass', 'refactoring']"
Modifiability,"I don't think so because components are destroyed in the unload. On Fri, Sep 23, 2022, 16:43 Paul Scheikl ***@***.***> wrote:. > @alxbilger <https://github.com/alxbilger> Thanks!; >; > Before unload; > Total Base: 31970 31936 Diff: 34; > After unload; > Total Base: 31970 31939 Diff: 31; > Before unload; > Total Base: 32002 31968 Diff: 34; > After unload; > Total Base: 32002 31971 Diff: 31; > Before cleanup; > Total Base: 32002 32000 Diff: 2; > Total Base: 32002 32000 Diff: 2; > After cleanup; > Total Base: 32002 32001 Diff: 1; >; > So that looks ok, right? At least the difference is more or less constant.; > :D; > But the tracker only tracks actual objects, right? So Creators, Factories,; > and others that do not inherit from base are not tracked.; >; > Could it be a vector/map that constantly receives new values but is not; > cleanup up with reset/cleanup?; > Similar to what was happening in sofa-framework/SofaPython3#304; > <https://github.com/sofa-framework/SofaPython3/pull/304>; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUANK4QVMDDWVFQIBHTV7W6ZRANCNFSM6AAAAAAQR3UB3M>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726:723,inherit,inherit,723,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726,1,['inherit'],['inherit']
Modifiability,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:459,refactor,refactoring,459,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698,1,['refactor'],['refactoring']
Modifiability,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:150,config,config,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734,4,"['config', 'plugin']","['config', 'plugin']"
Modifiability,I fixed the issue by refactoring deeply the component. But I have no idea why it appears.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/673#issuecomment-440318363:21,refactor,refactoring,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-440318363,1,['refactor'],['refactoring']
Modifiability,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:293,Flexible,Flexible,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:1143,config,configurations,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546,1,['config'],['configurations']
Modifiability,"I generated a list of all the uniques Data typenames present in the caduceus scene's components (on the left hand side, 1 example of datafield name matching to given typename:. **BaseData::getValueTypeInfo()->name()**|**BaseData::getName()**; -- | --; bool | listening; double | zFar; fixed_array&lt;Vec3d,2> | box; float | exponent; int | pivot; Mat4x4d | transformation; Quatd | orientation; ResizableExtVector&lt;Edge> | edges; ResizableExtVector&lt;int> | vertNormIdx; ResizableExtVector&lt;Quad> | quads; ResizableExtVector&lt;Triangle> | triangles; ResizableExtVector&lt;Vec2f> | texcoords; ResizableExtVector&lt;Vec3f> | bitangents; std::set&lt;int> | group; string | name; TagSet | tags; unknown | bbox; unsigned int | shadowTextureSize; unsigned short | textureUnit; Vec2f | translationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of u",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:1558,plugin,pluginName,1558,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613,2,['plugin'],['pluginName']
Modifiability,"I got the problem with Windows (no Eigen3Config.cmake) with a custom out-of-tree plugin.; The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly.; You need a pass of Cmake/""compilation""/install to have a full directory with a configured Eigen3Config.cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757:81,plugin,plugin,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757,2,"['config', 'plugin']","['configured', 'plugin']"
Modifiability,I guess this is just because the first fetchable plugins' configuration file started with `3.11` and with the game of copy-paste....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4886#issuecomment-2270108490:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4886#issuecomment-2270108490,2,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:28,Flexible,Flexible,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716,5,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,I guess yes because this is an empty variable. It is only used in the callbacks code to check: .empty() and not using it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2459#issuecomment-963959595:37,variab,variable,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2459#issuecomment-963959595,1,['variab'],['variable']
Modifiability,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:238,plugin,plugin,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098,4,['plugin'],['plugin']
Modifiability,"I have another question for `ninja`.; When I select the ninja option. Then the error occurs like this.; `CMake Error: CMake was unable to find a build program corresponding to ""Ninja"". CMAKE_MAKE_PROGRAM is not set. You probably need to select a different build tool.; CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage; CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage; Configuring incomplete, errors occurred!`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1372047102:393,Config,Configuring,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1372047102,1,['Config'],['Configuring']
Modifiability,"I have created a pull request with an initial working solution to this problem. I have updated the references to the unknown library _std::filesystem_ and rewrite them as namespace _fs_. Additionally, I have include the old headers for this library from its experimental version at **gcc-8**, so there is a possibility to use the correct ones depending on the compiler version it is used. I have created a pull request [#3994](https://github.com/sofa-framework/sofa/pull/3944).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019:155,rewrite,rewrite,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019,1,['rewrite'],['rewrite']
Modifiability,"I have no preference.; Either at each QApplication::translate (more verbose but more explicit) or using a more global preprocess variable (less verbose, as suggested by Damien)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264839355:129,variab,variable,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264839355,1,['variab'],['variable']
Modifiability,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:116,plugin,plugin,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,14,"['plugin', 'variab']","['plugin', 'plugins', 'variables']"
Modifiability,"I have tried something like that and doesnt work. Following what I found in the Flexible plugin I have two files. DeformationGradientTypes.h; ```; using Vec9 = sofa::defaulttype::Vec<9, double>;; using F33D = sofa::defaulttype::StdVectorTypes<VNCS::Vec9, VNCS::Vec9, double>;. } // namespace VNCS. template <>; struct sofa::defaulttype::DataTypeInfo<VNCS::F33D::Deriv>; : public FixedArrayTypeInfo<VNCS::F33D::Deriv, VNCS::F33D::Deriv::total_size> {; static std::string name(); {; std::ostringstream o;; o << ""F33D"";; return o.str();; }; };. template <>; struct sofa::defaulttype::DataTypeName<VNCS::F33D::Coord> {; static const char *name() { return ""F33D::CoordOrDeriv""; }; };. template <>; inline const char *VNCS::F33D::Name(); {; return ""F33D"";; }; ```. and in my initPlugin.cpp. ```; #include ""DeformationGradientTypes.h""; ...; template class sofa::core::State<VNCS::F33D>;; template class sofa::component::container::MechanicalObject<VNCS::F33D>;; static sofa::defaulttype::RegisterTemplateAlias alias0(""F33D"", VNCS::F33D::Name());; ```. All this gives me the error I showed previously",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225:80,Flexible,Flexible,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"I have tried the same steps as in #4130 before. But its been showing the same thing. I am a bit new to libpython, my system showed something like this when I tried; C:\Users\legion>python -m find_libpython; C:\Users\legion\AppData\Local\Programs\Python\Python39\python39.dll; But my PYTHON_ROOT and other variables point to python 3.8",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4493#issuecomment-1948146570:305,variab,variables,305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4493#issuecomment-1948146570,1,['variab'],['variables']
Modifiability,"I have two questions:; 1. Why having ""Plugin"" in the name? Not sure we have a strict policy on that but it looks like a bad practice to me.; 2. Why creating this plugin in SOFA repo and not in an external one?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1039317930:38,Plugin,Plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1039317930,2,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:92,variab,variable,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121,2,"['polymorphi', 'variab']","['polymorphic', 'variable']"
Modifiability,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:195,refactor,refactoring,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143,2,['refactor'],['refactoring']
Modifiability,"I just created separated issues for our 3 main tasks: deprecation, pluginization and issofa branches. Please use the appropriate ones (not this one) for future discussions. If issues are also needed for cleaning and documentation tasks, feel free to create them.; This issue can still be used for new suggestions or remarks so I let it open.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333147769:67,plugin,pluginization,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333147769,1,['plugin'],['pluginization']
Modifiability,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:19,plugin,plugin-concerned,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500,2,['plugin'],['plugin-concerned']
Modifiability,"I just saw that only `applications/plugins/CGALPlugin/src/CGALPlugin/CuboidMesh.inl` needs OpenGL (calling directly gl*() functions).; I guess it was easier for you to include directly Sofa.GL but in my mind, it would be better to remove all the direct calls to OpenGL and use the drawtool functions (from `sofa/helper/visual/DrawTool.h`), especially it seems it is only to render points and tetrahedra.; Thus you wont need Sofa.GL (and be able to compile CGALPlugin without OpenGL)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-833605919:35,plugin,plugins,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-833605919,1,['plugin'],['plugins']
Modifiability,"I like the PR, but I am concern about the modifs in Compliant/Flexible.; I totally agree we did not use the printLog flag the right way, but the PR cannot be merged as it as it will create troubles in those plugins.; What would be the right way to keep the same semantic we wanted?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257:62,Flexible,Flexible,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"I made some tests on godbolt, but I was not able to reproduce the crash. In any case, one day it would be great to remove the public inheritance from `std::vector` (but SofaCUDA probably doesn't agree).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724957130:133,inherit,inheritance,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724957130,1,['inherit'],['inheritance']
Modifiability,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:96,variab,variable,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840,2,['variab'],['variable']
Modifiability,"I managed to solve the issue. The main reason appeared to be the location of the ""python3"" directory. Apperently, it should be located one directory higher than the directory containing all the built DLLs. ; So I changed the the CMake variable `SP3_PYTHON_PACKAGES_DIRECTORY` from ""python3/site-packages"" to ""**bin**/python3/site-packages"".; I also downgraded python from 3.9.1 to 3.7.9 and pulled the last commits from sofa master but I think the issue came from the python3 directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432:235,variab,variable,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432,1,['variab'],['variable']
Modifiability,"I may also add two related old pr to the list, they are on the refactoring of create and canCreate methods :; - #3309; - #3311",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1708524747:63,refactor,refactoring,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1708524747,1,['refactor'],['refactoring']
Modifiability,"I mean the only thing that could be considered is whether on platforms like gcc the PluginRepository should contain **both** the working directory and `../lib`. But this question has never been an issue so far, so the default behaviour for initialisation should remain the one exposed in ca0402d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746:84,Plugin,PluginRepository,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746,1,['Plugin'],['PluginRepository']
Modifiability,I noticed this issue here and I am wondering if it is related to this issue I recently opened in the CGAL plugin repo: [issue](https://github.com/sofa-framework/CGALPlugin/issues/2) and [pull request](https://github.com/sofa-framework/CGALPlugin/pull/3). Just putting these links here for reference.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3058#issuecomment-1227685739:106,plugin,plugin,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3058#issuecomment-1227685739,1,['plugin'],['plugin']
Modifiability,"I presume it has nothing to do with Flexible, but it rather seems related to the mstate size. Maybe the test could be fixed, but what is important to notice is that this PR can have unexpected behaviors with existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437:36,Flexible,Flexible,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437,1,['Flexible'],['Flexible']
Modifiability,"I propagated SofaPython dep changes in more plugins.; I also added a few quick-cleans, see my nice commit messages to get the idea :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963:44,plugin,plugins,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963,1,['plugin'],['plugins']
Modifiability,I really don't see the link of the two new crashes on Max / Linux : ; - optiTrack : with a crash from a libc++abi; ```; libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl; ```; - a CPU scene with beams in SofaCUDA plugin with a strange timeout (that I can't reproduce locally). Does anyone has a clue?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788:260,plugin,plugin,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788,1,['plugin'],['plugin']
Modifiability,"I see no usage of addSubMBKToMatrix in our team's plugins, so it should be ok to remove it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878144095:50,plugin,plugins,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878144095,1,['plugin'],['plugins']
Modifiability,"I see that this PR is adding ~10MB of data (from the stl files).; I think we should wait for this plugin to be externalized (on an other repo) to merge this example, otherwise the history of this repo will contain those files, and the SOFA repo history is already so cluttered 🤪; what do you think @hugtalbot ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1078786133:98,plugin,plugin,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1078786133,1,['plugin'],['plugin']
Modifiability,"I see two options:; - We remove it and @fspadoni copies it in his plugin; - We keep it (or move it in the multithreadplugin). In this case, we need to have a reason to keep it, such as an example of an implementation of such a visitor. @fspadoni Would you like to explain how it works? I may have some interests to implement some myself.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-818443752:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-818443752,1,['plugin'],['plugin']
Modifiability,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:225,refactor,refactoring,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707,2,['refactor'],['refactoring']
Modifiability,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:318,plugin,plugins,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943,10,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:147,variab,variable,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259,2,['variab'],['variable']
Modifiability,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:481,plugin,plugins,481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,I think - except by implementing a complicated check on time step change in both of the above components - we are good here. Only one thing remain TMO as discussed with @alxbilger : we could create a test scene inspired from caduceus using a python controller decreasing progressively the time step to check that in this configuration the simulation smoothly handles the change of time step. Anything else?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1564497074:321,config,configuration,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1564497074,1,['config'],['configuration']
Modifiability,I think that this task is connected to several topics:. - connection of SOFA with other libraries (other modeling / visualization / collision tools); - adapt the simulation pipeline and have more control on it (ASSIST..) ; - hot restart of the simulation ; - helping the debug (which is not due to C++ problem but wrong parametrization / init of the simulation),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805:152,adapt,adapt,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805,1,['adapt'],['adapt']
Modifiability,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:1240,evolve,evolve,1240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802,2,['evolve'],['evolve']
Modifiability,I think there is some issues with the CI as the communication plugin ran fine on my MacOS. What do you say @ErwanDouaille ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-387009105:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-387009105,1,['plugin'],['plugin']
Modifiability,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:304,config,config,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607,1,['config'],['config']
Modifiability,"I think this is because you need to call the bwdInit after the init and addContact calls when this parameter is used (by checking quickly the code). It is harmless when the template is Vec3D but it prepares the computation for when you want to keep the orientation -> again this is really a bad API and might require some refactoring. . If you still have the diff locally, could you try this ? I guess the usability of your feature would really gain from this if it was working. But if this doesn't make any change, I am ok with the state of the PR. . Tell me how it goes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086:322,refactor,refactoring,322,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086,2,['refactor'],['refactoring']
Modifiability,"I thought Flexible or Compliant would have needed it but after grepping into them, no result as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040551486:10,Flexible,Flexible,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040551486,1,['Flexible'],['Flexible']
Modifiability,I thought it was as well...; I will check if we could easily put the openHaptics code into ifdef so we still compile the rest of the plugin.; (parce que ya pas marqué CI sur mon front ;) ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846618094:133,plugin,plugin,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846618094,1,['plugin'],['plugin']
Modifiability,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:110,refactor,refactoring,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772,3,['refactor'],"['refactor', 'refactoring']"
Modifiability,I totally agree on the fact that the PluginManager widget in the Qt GUI is irrelevant now (useless to load a plugin manually AFTER loading the scene using element from it).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715:37,Plugin,PluginManager,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"I tried with some scenes with BeamAdapter and there are crashes & stuff 😬; - the one in RestShapeSS was quite easy to spot.; - got problem too with `AdaptiveBeamForceFieldAndMass<DataTypes>::addForce` too when trying `SingleBeamDeployment.scn`.; I am suspecting there are some problems with size/resize/topologyChange because SingleBeam.scn works well (I think 😅); - the much more complicated scene `scenes/3instruments_collis.scn` has a problem with AdvancedTimer, while trying to find an id in the idmap. I am suspecting a corruption going somewhere else but no idea where.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432511853:149,Adapt,AdaptiveBeamForceFieldAndMass,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432511853,1,['Adapt'],['AdaptiveBeamForceFieldAndMass']
Modifiability,"I tried with the imgui GUI in a clean build.; I confirm that `runSofa -l SofaImGui -g imgui` creates a file _lastUsedGUI.ini_, with `imgui` inside.; Then, if I run `runSofa -l SofaImGui`, as expected, it loads the last used gui (found in the file).; However, it does not work with `runSofa` (without the `-l SofaImGui`). Normal, since the plugin is not loaded. It would be the same situation with a double-click on the executable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1137219817:339,plugin,plugin,339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1137219817,1,['plugin'],['plugin']
Modifiability,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:192,variab,variable,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519,2,['variab'],['variable']
Modifiability,"I was able to reproduce this issue, when compiling Sofa and SofaPython3 in Debug mode. When trying to add `libSofaPython3.so` through the PluginManager, it first warns the user, that the `.so` was compiled in debug mode, while Sofa was compiled in Release mode (which is incorrect).; Then, on adding the library, the above mentioned error is printed. I confirmed with `ldd libSofaPython3.so` that ` libpython3.9.so.1.0` is actually `not found`. In Release mode, it also does not find it, but does not seem to care. When adding the path to `libpython3.9.so.1.0` to the `LD_LIBRARY_PATH`, it finds it, but `SofaRuntime` is missing required functions/attributes.; In Release; ```python; >>> dir(SofaRuntime); ['DataRepository', 'PluginRepository', 'Sofa', 'SofaRuntime', 'Timer', '__SofaPythonEnvironment_importedModules__', '__SofaPythonEnvironment_modulesExcludedFromReload', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'formatStackForSofa', 'getCategories', 'getPythonCallingPoint', 'getPythonCallingPointAsString', 'getSofaFormattedStringFromException', 'getStackForSofa', 'importPlugin', 'importlib', 'init', 'inspect', 'os', 'sendMessageFromException', 'sofaExceptHandler', 'sofaFormatHandler', 'sys', 'traceback', 'unloadModules']; ```; In Debug, only `'DataRepository', 'PluginRepository'` are present (error is thrown, that `unloadModules` is missing).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3192#issuecomment-1209157858:138,Plugin,PluginManager,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3192#issuecomment-1209157858,3,['Plugin'],"['PluginManager', 'PluginRepository']"
Modifiability,"I was looking at he ""stalled"" PR,. And was wondering about this one, it contains a lot of valuable work and it seems to be connected to the cleanig & refactoring work on topologies started by @epernod. . @guparan , @epernod , @untereiner, @StephaneCotin; what are your suggestion on how to move forward and have that work ""not lost"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-448503161:150,refactor,refactoring,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-448503161,1,['refactor'],['refactoring']
Modifiability,"I was testing a benchmark scene with quite a lot of constraints (frictions) and:; (exactly the same scene); ```; master : 5000 iterations done in 203.986 s ( 24.5115 FPS); this PR : 5000 iterations done in 134.177 s ( 37.2643 FPS); ```; with just having to set `multithread=""true""` (and building multithreading plugin) this is **cool** 🥳. Edit: and it was with Windows/MSVC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252:311,plugin,plugin,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252,1,['plugin'],['plugin']
Modifiability,I was wondering if there is a way to catch the missing symbols at compile-time and I found this: https://cmake.org/cmake/help/latest/module/CheckCXXSymbolExists.html#module:CheckCXXSymbolExists. It's configuration time but it could be helpful. I tried to play with it but I was not able to make it work. I added the check in the `sofa_create_package_with_targets` macro.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1914295607:200,config,configuration,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1914295607,1,['config'],['configuration']
Modifiability,I would add ImplicitEuler + CGSolver that are the initial reasons for being of SOFA. Personally I would remove the assembled solver for the first sofa-ng. For me it should become an external plugin and this code should be removed from the main sofa (the same way Compliant does).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295683125:191,plugin,plugin,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295683125,1,['plugin'],['plugin']
Modifiability,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531,2,['plugin'],['plugin']
Modifiability,"I'd like this PR to be reviewed as I think the new features are really nice, especially for the SoftRobots plugin. ; @damienmarchal would you agree to remove the WIP label?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1738#issuecomment-892055859:107,plugin,plugin,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1738#issuecomment-892055859,1,['plugin'],['plugin']
Modifiability,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:125,plugin,pluginPath,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571,12,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'pluginName', 'pluginPath']"
Modifiability,I'll try to take some time to refactor this.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404097996:30,refactor,refactor,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404097996,1,['refactor'],['refactor']
Modifiability,"I'll try, as soon as I can compile Sofa and all the plugins ( you know what I mean @hugtalbot ;) )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334714700:52,plugin,plugins,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334714700,1,['plugin'],['plugins']
Modifiability,I'm a bit confused about config.h inclusion pipeline. Could you explain the necessity of having both initModule.h and config.h headers?; see #904,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431:25,config,config,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431,2,['config'],['config']
Modifiability,I'm closing this issue because this is now handlede into the sofapython3 refactoring.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-436678166:73,refactor,refactoring,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-436678166,1,['refactor'],['refactoring']
Modifiability,I'm closing this issue since SOFA is now available as a python module in the [SofaPython3](https://github.com/sofa-framework/plugin.SofaPython3) project.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741:125,plugin,plugin,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741,1,['plugin'],['plugin']
Modifiability,"I'm closing this since the new awesome [SofaPython3 plugin](https://github.com/SofaDefrost/plugin.SofaPython3 ) does everything this PR was doing, but better.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558,2,['plugin'],['plugin']
Modifiability,"I'm sorry I can't make a minimal example. I tried in vain, all the crashing scenes I found are using private plugins.; @pedroperrusi is it the same for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887586263:109,plugin,plugins,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887586263,1,['plugin'],['plugins']
Modifiability,"I'm surprised this hasn't caused problem before, especially with mac os since I have a feeling its XCode's clang compiler often has different default settings (could be the reason why Stephane had weird problems when overriding some SOFA methods in his plugin on his mac, whereas no problem with GCC or Ubuntu's clang version). I just realized that we aren't using LTO in SOFA. At some points, we could converge towards a clean :. - visibility=hidden everywhere; - explicit public visibility with SOFA_EXPORT_DYNAMIC_LIBRARY; - LTO. Anyway, +1 for this PR, and I think we should discuss the default visibility and link-time optimizations at some point.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843:253,plugin,plugin,253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843,1,['plugin'],['plugin']
Modifiability,"I've added the `v5.1.0-ModernInstall` branch to our fork. Actually this code wasn't on the repo itself so I just copied the files presents in SOFA and added my CMake configuration files. It compiles, you can try to add the find or fetch mechanism using this",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1938474654:166,config,configuration,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1938474654,1,['config'],['configuration']
Modifiability,"I've had another look at the code, and I've found:; - All `init` functions are trivial, except `helper::init` which calls `Console::init()` which *does* involve other `static` variables in `Console`; - All `init` functions happen in dlls which are linked in the `runSofa` binary (so they are not `dlopen`-ed on runtime as I thought they were). Based on this, my suggestion is to get rid of all `init/cleanup` functions, and put console data behind a 'nifty counter' to make sure `static` initialization and finalization is done correctly and automatically.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280284346:176,variab,variables,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280284346,1,['variab'],['variables']
Modifiability,"I've prepared a local version of the MultiThreading plugin that uses STL classes instead of boost, minus currently:; - boost::thread_specific_ptr; - boost::pool. I can create a pull request for this if there is interest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-289836125:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-289836125,1,['plugin'],['plugin']
Modifiability,"I've tried to use this macro to insert the variable description into the Doxygen. Doxygen must use `MACRO_EXPANSION` to expand the macro and generate proper documentation. However, I couldn't find a way to add the description to the variable. I tried things similar to:; ```cpp; #define DOXYGEN_COMMENT_START / ## / ## /; #define SOFA_DATA(Type, VariableName, Help) \; Type VariableName; DOXYGEN_COMMENT_START Help. struct Foo; {; ///Classic class member; unsigned int m;. SOFA_DATA(unsigned int, n, ""A class member defined with SOFA_DATA""); };; ```. The Doxygen shows the variable with the right name, but not with the `Help`. ![image](https://user-images.githubusercontent.com/10572752/150516043-84224f48-2336-4ebe-9069-a6030a08a176.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2614#issuecomment-1018403897:43,variab,variable,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2614#issuecomment-1018403897,5,"['Variab', 'variab']","['VariableName', 'variable']"
Modifiability,"IMO the complexity price we are paying right know in term of maintainability, code uglyness, bugs and weird issues it far bigger than the ""un-measure"" performance gain we expect. An our engineering time should be more useful in fixing all the crash/segfaul or performance issues because of n^2 algorithm (as in) than trying to get a totally minor (if any) performance increase because of switching from double to float. . So I recommand to only use Vec3Type in sofa instead of having both Vec3dType / Vec3fType, it will save thousand of man-month to invest more intelligent things. . As said by @jnbrunet, using Vec3Type allows to switch from float/double.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059:61,maintainab,maintainability,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059,1,['maintainab'],['maintainability']
Modifiability,INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Grid.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Utility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:2063,Plugin,PluginManager,2063,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"If Flexible compiles, this PR is ready to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293638606:3,Flexible,Flexible,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293638606,1,['Flexible'],['Flexible']
Modifiability,If I am not wrong the only difference is that it mutes the warnings of CImg and gtest with the `CMAKE_CURRENT_BINARY_DIR` variable in `SOFAFRAMEWORK_DEPENDENCY_INCLUDE_DIRECTORIES`. Why should I drop it ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/397#issuecomment-331203853:122,variab,variable,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397#issuecomment-331203853,1,['variab'],['variable']
Modifiability,"If you are using a Lagrange-multiplier-based resolution, you can use the [BilateralInteractionConstraint](https://github.com/sofa-framework/sofa/blob/master/examples/Components/constraint/BilateralInteractionConstraint.scn).; If not, you can use a projective attachement using [AttachConstraint](https://github.com/sofa-framework/sofa/blob/master/examples/Components/constraint/AttachConstraint.scn). A [post here](https://www.sofa-framework.org/community/forum/topic/attach-a-rigid-cube-to-flexible-fem-body/#post-17447) is discussing the difference between both.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2078#issuecomment-841470077:491,flexible,flexible-fem-body,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2078#issuecomment-841470077,1,['flexible'],['flexible-fem-body']
Modifiability,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:143,plugin,plugin,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444,1,['plugin'],['plugin']
Modifiability,"If you want to hide methods in a inherited class because they don't really make sense in its API, private inheritance is usually the way to go. Inherited methods can still be made public in the derived class by selecting them with the `using` directive. . See [https://stackoverflow.com/a/675451](https://stackoverflow.com/a/675451)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923:33,inherit,inherited,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923,3,"['Inherit', 'inherit']","['Inherited', 'inheritance', 'inherited']"
Modifiability,In PR description you should also say that there other stuff than Pluginmanager are removed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1612#issuecomment-730268703:66,Plugin,Pluginmanager,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1612#issuecomment-730268703,1,['Plugin'],['Pluginmanager']
Modifiability,"In debug, an exception is thrown and the program crashes. We can say that PSL.dll is not loaded. Try this code in debug:. ```c++; #include <iostream>; #include <algorithm>. int main(int argc, char *argv[]) ; {; std::string plugin(""PSL"");; std::string dotExt("".dll"");. const bool b = std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin());. if (b) std::cout << ""equal\n"";; else std::cout << ""not equal\n"";; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463:223,plugin,plugin,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463,2,['plugin'],['plugin']
Modifiability,"In f93e2b9 I wanted to restore the default behavior of ca0402d which had PluginRepository initialised with ; - the current working directory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment ht",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:73,Plugin,PluginRepository,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,3,"['Plugin', 'plugin']","['PluginRepository', 'plugins']"
Modifiability,"In that case, I fully agree with @fredroy's opinion on letting a third-party library handle the rendering code. Sofa is not a rendering tool after all, and given the pace at which frameworks evolve (and even replace each other..) I think it draws too much workload away from the actual SOFA stuff",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395036251:191,evolve,evolve,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395036251,1,['evolve'],['evolve']
Modifiability,Include of inl classes inheriting from ForceField should be done. Another PR will be open .; → closed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3806#issuecomment-1541600321:23,inherit,inheriting,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3806#issuecomment-1541600321,1,['inherit'],['inheriting']
Modifiability,"Indeed, @m4n4n could you try to refactor your code to avoid this big duplication?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844:32,refactor,refactor,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844,1,['refactor'],['refactor']
Modifiability,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:148,refactor,refactoring,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346,4,"['inherit', 'refactor']","['inheritance', 'refactoring']"
Modifiability,"Indeed, when compiled, SofaPython3 is not included in the automatically-loaded list of plugins.; But you can load the plugin at run-time using command-line arguments:; `runSofa -l SofaPython3 <yousceneinpython.py>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786455025:87,plugin,plugins,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786455025,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Indeed. I understand the problem, the mechanism also unloads the plugin's modules defined in c++. This modules are added to the sofa python environment while loading the plugin, so they cannot be imported again after being unloaded. I'll fix that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170,2,['plugin'],['plugin']
Modifiability,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:228,plugin,plugins,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665,1,['plugin'],['plugins']
Modifiability,"Instead of setting environment variables, we could call [imbue](http://en.cppreference.com/w/cpp/io/basic_ios/imbue) on input streams prior to parsing?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-284450056:31,variab,variables,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-284450056,1,['variab'],['variables']
Modifiability,"Interesting PR.; Work on merging BaseContext and BaseNode should first be addressed since the iterator would need to be able to iterate on both, but they have a different inheritance. To be further discussed in a STC!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1864102974:171,inherit,inheritance,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1864102974,1,['inherit'],['inheritance']
Modifiability,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:28,Plugin,PluginRepository,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769,4,"['Plugin', 'variab']","['PluginRepository', 'variable']"
Modifiability,Is there a removal date for the third plugin ? (To force developers to make the changes),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328460508:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328460508,1,['plugin'],['plugin']
Modifiability,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417,2,['plugin'],['plugin']
Modifiability,Is this PR a fix for a breaks because of the merge of the NameDecoder refactoring ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387218270:70,refactor,refactoring,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387218270,1,['refactor'],['refactoring']
Modifiability,"It has been some time now that this PR is stalled.; As far as I know, there is still no implementation of VisitorAsync, so IMO it should be deleted.; (and it is not really complicated to replicate if needed, it just inherits Visitor and adds a ""Status"" member)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886496855:216,inherit,inherits,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886496855,1,['inherit'],['inherits']
Modifiability,It might have been breaking becausr the configuration file might have changed. I prefered to put this tag if in the future we see that we havr issue regarding this we will find this pr quickly.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4842#issuecomment-2252112860:40,config,configuration,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4842#issuecomment-2252112860,1,['config'],['configuration']
Modifiability,"It seems it was introduced by @courtecuisse long time ago: https://github.com/sofa-framework/sofa/commit/1340fd20218a601ed385d5c9c4d5bcfe8ec42ced; And indeed, the visitor calling this function seems not used anywhere in the (public) repository.; But maybe some (external) plugins may use it. ; @courtecuisse (or @pedroperrusi ) do you still need it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878132756:272,plugin,plugins,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878132756,1,['plugin'],['plugins']
Modifiability,"It seems that the Win VM has space issues, while the MacOS does not compile due to Flexible plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395:83,Flexible,Flexible,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:136,plugin,plugins,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731,2,['plugin'],['plugins']
Modifiability,It seems that this PR is not building with SofaCUDA plugin.; See [ubuntu_clang-3.4_options](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.4_options/4513/) and [ubuntu_clang-3.4_options-debug](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.4_options-debug/193/) builds after merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/217#issuecomment-293195342:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217#issuecomment-293195342,1,['plugin'],['plugin']
Modifiability,"It seems to be coming from a setup/system/configuration error than something related to SOFA itself, as the error is coming from the Windows SDK itself.; Which version of MS Visual Studio are you using ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835458410:42,config,configuration,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835458410,1,['config'],['configuration']
Modifiability,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:533,plugin,plugin,533,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803,1,['plugin'],['plugin']
Modifiability,"It's a topic I wanted to get back, so that we could support adaptive time step solvers.; Do you remember what on a theoretical standpoint makes it not supported? I do not recall",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1541510463:60,adapt,adaptive,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1541510463,1,['adapt'],['adaptive']
Modifiability,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:488,variab,variable,488,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962,5,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,It's not easy to have a comfortable solution for both CMake experts and non-experts but we are trying to make everyone happy by providing highly factorized macros (big refactoring happened in #1433). ; Of course you are free to use them or not.; I close this issue since it's quite old. Feel free to reopen if necessary :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/490#issuecomment-743086496:168,refactor,refactoring,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490#issuecomment-743086496,1,['refactor'],['refactoring']
Modifiability,It's not very beautiful but the plugin manager is already here:. ![image](https://github.com/sofa-framework/sofa/assets/10572752/63ae2a71-8fb8-4f6c-ade5-0287fa79142f),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1737007332:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1737007332,1,['plugin'],['plugin']
Modifiability,It's ok to me as long as it does not something directly opposed to the astyle config :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1104000803:78,config,config,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1104000803,1,['config'],['config']
Modifiability,It's only msg refactoring. Title is misleading.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510018883:14,refactor,refactoring,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510018883,1,['refactor'],['refactoring']
Modifiability,"Just added ""pr: wip"" label because we need to fix Flexible plugin (make it use [plugin.HighOrder](https://github.com/sofa-framework/plugin.HighOrder)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179:50,Flexible,Flexible,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179,4,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:176,refactor,refactoring,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658,1,['refactor'],['refactoring']
Modifiability,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:491,variab,variables,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349,2,['variab'],['variables']
Modifiability,"Just my 2 cents, on macOS 10.14.5, Xcode 10.2.1 , Cmake 3.15.0 and Sofa sync with master, I don't have any error with the configuration.; **BUT** Cmake 3.15.0 wants to link the OpenGL framework from a non-existing /Applications/Xcode-beta.app (I dont have any beta version of XCode), and obviously breaks the make process.; So I suppose there are some bugs in the 3.15.0 version of cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931:122,config,configuration,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931,1,['config'],['configuration']
Modifiability,"Just one small concern ( that can be included if that is not already the case ).; Does the functionnality currently also work with a debug compilation ? ; There may be also some extra care to be taken with multi configurations ide like visual studio, where the same build tree can generate multiple binairies in different folder, and possibly with different names ( for example the '_d' suffix that usually comes along with debug librairies ). On the ""bright side"", if the functionality is not yet there in this PR, I presume all the necessary informations can be extracted from the cmake target properties, so it **should** be feasible. Also it would be more generic since the cmake target name, and the name of the generated binary can differ ( even if this is not a common practice )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491:212,config,configurations,212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491,1,['config'],['configurations']
Modifiability,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:292,variab,variable,292,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942,2,['variab'],['variable']
Modifiability,Just to understand @alxbilger the objects from plugins were not properly loaded ?; How could it have worked before your PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2263040977:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2263040977,1,['plugin'],['plugins']
Modifiability,"Just tried to add commits in my external plugin and then re-fetch, nothing was erased :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389525666:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389525666,1,['plugin'],['plugin']
Modifiability,"LGTM; Remark: Bezier2MeshMechanicalMapping.scn, BezierTetrahedronSetTopologyContainer.scn, BezierTriangleSetTopologyContainer.scn and Mesh2BezierTopologicalMapping.scn should be pushed in https://github.com/sofa-framework/plugin.HighOrder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/505#issuecomment-342168964:222,plugin,plugin,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505#issuecomment-342168964,1,['plugin'],['plugin']
Modifiability,"Let's see this as a starting point of refactoring. This PR does the merge, the code is neither better nor worst than before, it just removes unnecessary duplication. . Still need to replace every iteration of StiffSpringForceField by SpringForceField and fix Cuda extension",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2052097036:38,refactor,refactoring,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2052097036,1,['refactor'],['refactoring']
Modifiability,Lets not wait for Sofa.Config... reopening.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-763807250:23,Config,Config,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-763807250,1,['Config'],['Config']
Modifiability,Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5660,Plugin,PluginManager,5660,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/l,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:4421,Plugin,PluginManager,4421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Looking at this plugin's CMakefile, I can see; ```; ...; AddCompilerDefinitions(""SOFA_BUILD_OPTICALFLOW""); AddLinkerDependencies(${OpenCV_LIBRARIES}); ...; ```. which is wayyyyy too old, these keywords have not been used since SOFA's v15.12 (7 years ago).; So you (or this plugin creator @rouge1616 Nazim 🤗) need to update it for your current version of SOFA (which I guess is v22.06). And the code itself will certainly need to be updated as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3440#issuecomment-1294975824:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3440#issuecomment-1294975824,2,['plugin'],['plugin']
Modifiability,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:531,parameteriz,parameterizations,531,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376,4,['parameteriz'],"['parameterization', 'parameterizations']"
Modifiability,"Many thanks, sorry I did not have any time to take care of it... I just added one commit ( without asking your permission... ) so that `Utils::getPluginDirectory()` returns the content of the first path stored in the `PluginRespository` global variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663:218,Plugin,PluginRespository,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663,2,"['Plugin', 'variab']","['PluginRespository', 'variable']"
Modifiability,"MatSym is indeed used, mainly in SofaMiscFem and apparently in the future Caribou plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1828#issuecomment-781249780:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1828#issuecomment-781249780,1,['plugin'],['plugin']
Modifiability,MeshCollision/lib/libSofaGeneralMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/S,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:5628,Plugin,PluginManager,5628,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"Might be breaking for some plugins I suppose, but fine for me",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1808#issuecomment-779822691:27,plugin,plugins,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1808#issuecomment-779822691,1,['plugin'],['plugins']
Modifiability,"More details about he problem. . The geomagic plugin is using:; ```cpp; sofa::component::mapping::RigidMapping< Rigid3dTypes , ExtVec3fTypes >::SPtr mapping;; ```; and; ```cpp; visualNode[i].mapping = sofa::core::objectmodel::New< sofa::component::mapping::RigidMapping< Rigid3dTypes, ExtVec3fTypes > >();; ``` ; This means that the mapping is transforming ```Rigid3dTypes``` (d stand for double) to ```ExtVec3fTypes``` (where f stand for float). Since the removal of SOFA_FLOAT/SOFA_DOUBLE these kind of combination mixing precision have been removed and are not expected to compile anymore. . The only mapping that remains in Sofa using the same precision on both sides that should be written that way: ; ```cpp; visualNode[i].mapping = sofa::core::objectmodel::New< sofa::component::mapping::RigidMapping< Rigid3Types, ExtVec3Types > >();; ``` ; By unifying the types precision this would fix the compilation issues. I don't have geomagic so if you can make the fix and the PR this would be nice. Otherwise maybe @epernod can do that. . Damien, ; PS: I have created an issue to reference all similar problems... its #893",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/892#issuecomment-454711219:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/892#issuecomment-454711219,1,['plugin'],['plugin']
Modifiability,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:138,plugin,plugins,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375,5,"['plugin', 'refactor']","['plugin', 'pluginized', 'plugins', 'refactoring']"
Modifiability,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:207,plugin,pluginName,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696,2,['plugin'],['pluginName']
Modifiability,My hero! It was so frustrating to use cmake on SOFA (on Windows). Thanks a lot!. Could you tell me how you profile the cmake configuration?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277254445:125,config,configuration,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277254445,1,['config'],['configuration']
Modifiability,My mistake ! This comes from my refactoring...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4946#issuecomment-2316910288:32,refactor,refactoring,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4946#issuecomment-2316910288,1,['refactor'],['refactoring']
Modifiability,"My two cents: if you are using core+plugins naming in SOFA, why not going for **core**+components instead of objects+components in plugins? ; Even if the name is not ""core"", just using **the same** in SOFA and plugins would be more consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185:36,plugin,plugins,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185,3,['plugin'],['plugins']
Modifiability,NFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3850,Plugin,PluginManager,3850,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,NFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManage,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:4858,Plugin,PluginManager,4858,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,NFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Grid.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Utility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Visual.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sof,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:2350,Plugin,PluginManager,2350,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Nice @WilkGardariki !; Please go ahead ! change the name of the folder in MT plugin ! thanks in advance,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-311593533:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-311593533,1,['plugin'],['plugin']
Modifiability,"Nice job, it is indeed faster on my computer too. ; For the artifact, it still appears at the top of the beam on the contact, at step 46 (see image) event with your modified scene (I saw only the ShewchukPCGLinearSolver that was different). . ![image](https://github.com/sofa-framework/sofa/assets/30337881/45010585-c1e3-4f89-9e9b-f201bd700a29). Would be great to know what are the difference between our compilation configurations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1640447331:417,config,configurations,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1640447331,1,['config'],['configurations']
Modifiability,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:72,plugin,plugin,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414,2,['plugin'],['plugin']
Modifiability,"Nice! The CI says no though:. ```; 25 | SOFA_DEPRECATED_HEADER_NOT_REPLACED(""v23.06"", ""v23.12""); | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ; In file included from include/Sofa.Config/sofa/config.h:24,; from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/config.h:25,; from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.h:24,; from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.cpp:22:; include/Sofa.Config/sofa/config/sharedlibrary_defines.h:26:38: error: expected identifier before '__attribute__'; 26 | # define SOFA_EXPORT_DYNAMIC_LIBRARY __attribute__ ((visibility (""default""))); | ^~~~~~~~~~~~~; /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/config.h:29:42: note: in expansion of macro 'SOFA_EXPORT_DYNAMIC_LIBRARY'; 29 | # define SOFA_MULTITHREADING_PLUGIN_API SOFA_EXPORT_DYNAMIC_LIBRARY; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~; /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.h:40:1: note: in expansion of macro 'SOFA_MULTITHREADING_PLUGIN_API'; 40 | SOFA_MULTITHREADING_PLUGIN_API StepTask : public sofa::simulation::CpuTask; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.cpp:22:; /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.h:40:41: error: expected initializer before ':' token; 40 | SOFA_MULTITHREADING_PLUGI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3607#issuecomment-1411703008:180,Config,Config,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3607#issuecomment-1411703008,10,"['Config', 'config', 'plugin']","['Config', 'config', 'plugins']"
Modifiability,"Nice, there seem to be some includes missing in some plugins for the CI to pass though (DistanceGridFF)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680725772:53,plugin,plugins,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680725772,1,['plugin'],['plugins']
Modifiability,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:467,plugin,plugins,467,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851,2,['plugin'],['plugins']
Modifiability,"No, the PR #797 is included in this one. ; I just wanted to split both contributions to ease the review somehow. ; It compiles on my two computers, isn't it a problem with plugins? The cleaning indeed could break some not updated code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220:172,plugin,plugins,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220,1,['plugin'],['plugins']
Modifiability,Nobody (in the sofa code base) was including this deprecated file (which is a not bad news by itself).; But I encountered some old plugins (implementing new Qt Widgets) including this file (thats why I could detect this problem),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940:131,plugin,plugins,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940,1,['plugin'],['plugins']
Modifiability,"Not a lot of contribution here. . In recent PR I'm doing moving code from modules to plugins. ; I think that the followin approach combining plugins & packages (group of selected plugin or components); plugins:; - plugin1; - plugin2; - plugin3; - plugin4. packages:; - SofaAdvanced (include pluin1, plugin2); - SofaMisc (include plugin3, plugin4); - SofaNG(include plugin1, and MechanicalFEM); .... What do you think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473:85,plugin,plugins,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Not exactly, the first is about refactoring canCreate and create while the other is about providing a system for template deduction. ; It seems connected because canCreate is widely used to implement template deduction (but it is not its sole purpose). If template deduction is merged this will remove a lot of canCreate... but some may still. So some ideas in #3309 may still have values independently of #3938.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1594710107:32,refactor,refactoring,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1594710107,1,['refactor'],['refactoring']
Modifiability,Not relevant anymore with SofaPython3 plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-2439637936:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-2439637936,1,['plugin'],['plugin']
Modifiability,Not sure I have your fix in mine. Lets wait for CI compilation.; Are you using the Sph plugin right now? I would be interested to see some use case.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542688805:87,plugin,plugin,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542688805,1,['plugin'],['plugin']
Modifiability,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:73,refactor,refactoring,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688,2,['refactor'],['refactoring']
Modifiability,Note that there are still Data variables that are not been renamed in `Sofa/Component/Topology/Container/Grid/src/sofa/component/topology/container/grid/SparseGridTopology.h`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2124387508:31,variab,variables,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2124387508,1,['variab'],['variables']
Modifiability,"Note to my future dummy-me: ; Dependency is present in CMakeLists but having it in Config.cmake.in propagates this dependency to downstream modules, unable to find tinyXML since it's linked privately :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138:83,Config,Config,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138,1,['Config'],['Config']
Modifiability,"Note: collision pipeline must be refactored if we want to reduce the ridiculous high number of calls to `getValue`. Every time there is a check between two primitives, there is a `getValue` call to `MechanicalObject::position`, `proximity` and `alarmDistance`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1263427240:33,refactor,refactored,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1263427240,1,['refactor'],['refactored']
Modifiability,Note: the build fail on OSX is due to API change in boost 1.64 that makes the Multithreading plugin fail to build. I would not pay attention to it until Multithreading is fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/314#issuecomment-313023233:93,plugin,plugin,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-313023233,1,['plugin'],['plugin']
Modifiability,"Now SoftRobots plugin have a repository `examples/`. Force full build triggered, let's wait CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1580175136:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1580175136,1,['plugin'],['plugin']
Modifiability,Now fundamentally to me they are the same. Module is probably a more adequate name than plugin as it convey the idea of 'modul'arization while plug'in' convey they idea of internal/external. Having a consortium supported Module compared to an external one doesn't change the nature (it is still a module). But honestly I don't really care...what really matter to me is to make more and more of them :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408807754:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408807754,1,['plugin'],['plugin']
Modifiability,"Now that Sofa.Config is in master, (#1674), we just have to remove the duplicated code in the CMakeFile of SofaPython3.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1661#issuecomment-780670499:14,Config,Config,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1661#issuecomment-780670499,1,['Config'],['Config']
Modifiability,"Now, as you said Maxime, the definitive solution would be to implement component specific tests where the components are implemented and not in a shared plugins like SceneCreator or SofaTest but this is still something to do (One step at a time).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669:153,plugin,plugins,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669,1,['plugin'],['plugins']
Modifiability,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:39,Flexible,Flexible,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233,8,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,O] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManage,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:4996,Plugin,PluginManager,4996,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:225,config,config,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442,1,['config'],['config']
Modifiability,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:152,plugin,plugin,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316,3,['plugin'],"['plugin', 'pluginiization']"
Modifiability,"Ok so maybe I misunderstood your last comment, but the GTest find module you added in your last commit works fine on my side with cmake >= 3.12 (which is our min required version). So I guess you meant that the embedded GTest find module in recent cmake version (>=3.20) was required to have the correct targets defined, which is not the case in earlier <3.20 version of cmake (tested in 3.12), but this recent GTest find module was not building if used with cmake <3.20. In the end, your last commit seems to fix everything, so looks like a more generic option that relying on cmake config files as suggested in my last comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923509418:584,config,config,584,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923509418,1,['config'],['config']
Modifiability,Ok thank for the extra details. After a quick glance this line is changing the way CImg is handling error. ; The problem is that it tries to lock mutex which somehow cause the crash. ; My current guess is that if it could be related to the fact that there is either image & CImage plugin which are both using CImg...which have static initialized structure...just a guess... EDIT: mmm I'm deeply thinking...in CImg; ```cpp; #if defined(cimg_module); Mutex_info& Mutex_attr();; #elif defined(cimg_main); Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #else; inline Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #endif; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077:281,plugin,plugin,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077,1,['plugin'],['plugin']
Modifiability,"Ok, CImg seems to do the job as well.; The dependency is already in plugin image, we just need to move it back to SOFA (licence is compatible).; And then this one-header-only include will allow us to read jpeg.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759,1,['plugin'],['plugin']
Modifiability,"Ok, I've just tried to compile SOFA v21.12 with Optimus v21.12 and STLIB v21.12. I've cleanly cloned them three and configured cmake with the following : `cmake /path/to/sofa -DSOFA_EXTERNAL_DIRECTORIES=/path/to/Optimus;/path/to/STLIB` and cmake works like a charm. Didn't compile it though, but the cmake shouldn't crash at least. So I suggest you to delete your cloned repositories and clone them again and then directly checkout v21.12. . Your issue is due to the fact that you are adding the project using this macro `sofa_add_subdirectory` which didn't exist at the time. I think the closes one was `sofa_add_plugin`. But using this macro is not mandatory, you can add such plugins with `SOFA_EXTERNAL_DIRECTORIES` if you don't have to much of them... . Sometimes, cloning first master then switching branch can generate issues, if so you can use this command line instead `git clone -b v21.12 --single-branch git@github.com:sofa-framework/sofa.git`. From now, I won't provide more help on this old release, if you face anything else, I highly suggest you to update your SOFA version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4941#issuecomment-2311917765:116,config,configured,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4941#issuecomment-2311917765,2,"['config', 'plugin']","['configured', 'plugins']"
Modifiability,On my PC this version does not compile...do the PR 797 is required to be merged before this one ?; On the CI the problem is probably caused by the Cuda version that is not refactored.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432542719:172,refactor,refactored,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432542719,1,['refactor'],['refactored']
Modifiability,One (new) scene is failing: `SceneTests.applications/plugins/LMConstraint/examples.DOFBlockerLMConstraint.scn`; The error message is: ` [ERROR] [UncoupledConstraintCorrection(default67)] Cannot remove the requested constraint solver` ; It is possible that the scene itself was wrong but it is highlighted here because you add a msg_error(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940:53,plugin,plugins,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940,1,['plugin'],['plugins']
Modifiability,"One approach discussed this meeting was:; keep the current config.h for compatibility to external code base but in sofa progressively stop using it and replace it with specific ones eg: ""config/comon_defines.h"" (that does not contains the inclusion of config/build_option_opengl.h/experimental/etc...""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422:59,config,config,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422,3,['config'],['config']
Modifiability,"One of the point remaining is to build an object that map the component to plugins. . The easy path is probably to make an application that loads all thall the plugins, load them and dump the infos in a file (json, xml, whatever). . Then having a queriable object to get that info through an API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607:75,plugin,plugins,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607,2,['plugin'],['plugins']
Modifiability,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:160,coupling,coupling,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799,2,['coupling'],['coupling']
Modifiability,"One small thing, should we mark this PR as breaking? ; From my experience (🥱), a lot of people don't really include what they use, so it could happen that a seemingly useless include in one could be useful further, in their plugin or whatever. I know this is really a bad practice from their part but still, people complain even if it is their fault 🤪.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2475#issuecomment-986582757:224,plugin,plugin,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2475#issuecomment-986582757,1,['plugin'],['plugin']
Modifiability,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:257,plugin,plugins,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176,7,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,PR is ready for me now. ; Still need to decide if I should refactor SofaOpenCL or not given the fact that it doesn't compile with the current SOFA's master branch --> to be discussed in the next SOFA-dev meeting.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2056960311:59,refactor,refactor,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2056960311,1,['refactor'],['refactor']
Modifiability,PR just got updated.; Several points are below this PR:; - define a new design for managing colors by component; - should the color API allow for new colors; - Should Prefab be refactored in Sofa.Core ? . → wip : PR should keep only the 2-line change,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4536#issuecomment-2022230108:177,refactor,refactored,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4536#issuecomment-2022230108,1,['refactor'],['refactored']
Modifiability,"PSL version. I'm not really sure but I think that with the Template mecanism of PSL (https://github.com/sofa-framework/sofa/tree/master/applications/plugins/PSL#templates) . Maybe it is possible to come up with a solution looking like that:; ```css; Node : {; Import : ""pythonlib"". // The implementation that create a BoxROI and transform the parameters from; // Use friendly to the one used in the component. ; Template : {; name : MyBoxROI; properties : { ; position : ""0 0 0""; orientation : ""0 0 0""; dimmension: ""10 10 10 ""; }; BoxROI : {; // The convertToOrientedBox is implemented in the ""pythonlib"" module.; orienteBox : convertToOrientedBox(position, orientation, dimmension); } ; }; ; /// One instance of the boxroi.; MyBoxROI : {; position : ""1 2 3""; orientation : ""0.5 0.5 0.5""; dimmension : ""3 4 5""; }. /// A second instance of the boxroi.; MyBoxROI : {; position : ""0 2 3""; orientation : ""0.5 0.5 0.5""; dimmension : ""7 4 5""; }. }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357356074:149,plugin,plugins,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357356074,1,['plugin'],['plugins']
Modifiability,"Pb de maintenabilité si on sort certains plugins sur des dépôts séparés (gestion des branches, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290706010:41,plugin,plugins,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290706010,1,['plugin'],['plugins']
Modifiability,Pb of compilation with Compliant (and probably Flexible as well),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-381521905:47,Flexible,Flexible,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-381521905,1,['Flexible'],['Flexible']
Modifiability,"Please create 2 feature branches for these 2 different topics: Bezier High Order elements removal, MSVC Plugin Manager fix.; I just sent you an email ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/14#issuecomment-243443973:104,Plugin,Plugin,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/14#issuecomment-243443973,1,['Plugin'],['Plugin']
Modifiability,Please someone merge. This is needed by external plugins.; @alxbilger @fredroy @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2958#issuecomment-1134802027:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2958#issuecomment-1134802027,1,['plugin'],['plugins']
Modifiability,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769,3,"['Plugin', 'plugin']","['Plugin', 'pluginSofaCoreAsync', 'plugins']"
Modifiability,Plugin to be externalized in the future?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103578828:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103578828,1,['Plugin'],['Plugin']
Modifiability,PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:4136,Plugin,PluginManager,4136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/ArticulatedSystemPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaMatrix.dll; [INFO] [PluginManager] 72 plugins have been loaded from C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config/loadedPlugins.ini. [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckCollisionResponse, SceneCheckDeprecatedComponents, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:11221,Plugin,PluginManager,11221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,11,"['Plugin', 'config', 'plugin']","['PluginManager', 'config', 'plugin', 'plugins']"
Modifiability,"Probably because:; [ERROR][PluginManager] Plugin not found: ""SceneCreator_d""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057:27,Plugin,PluginManager,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057,2,['Plugin'],"['Plugin', 'PluginManager']"
Modifiability,Problem (test failing) seems to be fixed with the Inherit::parse(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-861271861:50,Inherit,Inherit,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-861271861,1,['Inherit'],['Inherit']
Modifiability,"Process:; - remove all SOFA_WITH_FLOAT sections. ; - remove the #ifdef SOFA_WITH_DOUBLE line.; - replace all Vec3dTypes by Vec3Types (and Mass, and other types) with a refactoring tool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/836#issuecomment-441050788:168,refactor,refactoring,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-441050788,1,['refactor'],['refactoring']
Modifiability,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223,8,"['Plugin', 'config', 'plugin']","['PluginManager', 'Plugins', 'config', 'plugins']"
Modifiability,"Really good cleaning.; Should not break scenes, but could eventually break components in private plugins, but they should be easy to update.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805:97,plugin,plugins,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805,1,['plugin'],['plugins']
Modifiability,"Refactoring could be done in NameDecoder to keep only string resolution from the compiler, but for class template, the code could be moved in BaseClass using defaulttype. @damienmarchal will work on it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308480280:0,Refactor,Refactoring,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308480280,1,['Refactor'],['Refactoring']
Modifiability,"Refactoring to avoid confusion is good.; Another PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray); Issue created: #1255",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518:0,Refactor,Refactoring,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518,3,"['Refactor', 'refactor']","['Refactoring', 'refactor', 'refactoring']"
Modifiability,"Regarding this ""_d"" stuff ; - apparently it is possible to set it globally ( see https://cmake.org/cmake/help/v3.4/variable/CMAKE_CONFIG_POSTFIX.html#variable:CMAKE_%3CCONFIG%3E_POSTFIX and https://cmake.org/cmake/help/v3.4/variable/CMAKE_DEBUG_POSTFIX.html ) even though apparently it does not work for executables ( see https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name) Anyway, this decision should be carefully made, even though my first thought would be that it would be better compared to approches like the one taken with sofa_add_plugin macro. See https://github.com/sofa-framework/sofa/issues/490; - The value of this variable could be used as the default one to set the SOFA_LIBSUFFIX value in the SofaHelper CMakeLists.txt; - @guparan have you taken a look at the suggestion I made regarding PR #502 ? https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347:115,variab,variable,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347,4,['variab'],['variable']
Modifiability,Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Projective.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.AnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.MechanicalLoad.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Geometry.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anacon,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:6335,Plugin,PluginManager,6335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Replace ```<From ...>```; By: ```<Import from=""blabla"" component=""VisualModel"" as=""Toto""/>```. And multiple load with comma separation. ; ""toto tata titi ti ti"" ; "" 0 1 2 3 4"" . =====================; Compatibility with ; SOFA NG:; ```<From plugin=""Sofa.Component.ODESolver"" import=""*""/>``` => OK ? Sofa.Component.ODESolver.Backward; ```<From plugin=""Sofa.Component"" import=""*""/>``` => OK ? . In an xml Sofa scène: Sofa.Component.ODESolver.Backward; In a python sofa scene: Sofa.Component.ODESolver.Backward ; In the c++ namespace: sofa::component::odesolver::Backward; In the c++ include: sofa/component/odesolver/Backward; ...; All that is so nicely consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988709045:241,plugin,plugin,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988709045,2,['plugin'],['plugin']
Modifiability,Replacing `#include <math.h>` by `#include <cmath>` produces a `'M_PI': undeclared identifier` error on Windows for `applications/plugins/sofadistancegrid/components/collision/DistanceGridCollisionModel.h` (and only this one).; Any idea how to solve that?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320:130,plugin,plugins,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320,1,['plugin'],['plugins']
Modifiability,"Retrospectively, I would prefer the following structure:; ```; SofaCUDA; | - component; | - mapping; | - linear; | - nonlinear; ```. I find that the intermediate directories `sofa/gpu/cuda` are superfluous, and redundant with the name of the plugin. It is also in the prevision of changing the namespaces (which is not done in this PR).; What do you think @hugtalbot @epernod @damienmarchal @fredroy ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1403751883:242,plugin,plugin,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1403751883,1,['plugin'],['plugin']
Modifiability,"S X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (ha",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:1655,plugin,plugins,1655,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:315,Config,Config,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,1,['Config'],['Config']
Modifiability,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:280,plugin,plugins,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535,4,['plugin'],['plugins']
Modifiability,See the result [here](https://github.com/sofa-framework/sofa/blob/ab67a65a56a7c4d6ec04263de9b829e30b4f5ce1/applications/plugins/SofaMatrix/SofaMatrix.md),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2580#issuecomment-1008937788:120,plugin,plugins,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2580#issuecomment-1008937788,1,['plugin'],['plugins']
Modifiability,Seems to be fixed #1948 (just tried with master) but some enhancements could be done for exporting the graph IMO.; Issue itself is closed nonetheless.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1723#issuecomment-821018599:58,enhance,enhancements,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1723#issuecomment-821018599,1,['enhance'],['enhancements']
Modifiability,Segfault happens during SofaHelper_test exit and is somehow related to PluginManager_test. ; I tried to catch it in PluginManager::TearDown() without success.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604355702:116,Plugin,PluginManager,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604355702,1,['Plugin'],['PluginManager']
Modifiability,"Several alternatives choices for names:; ```xml; <From plugin=""SofaVisual"" import=""OglModel"" as=""VisualModel""/>; <FromPlugin name=""SofaVisual"" import=""OglModel"" as=""VisualModel""/>. <Plugin name=""SofaVisual"" import=""OglModel"" as=""VisualModel""/>; <Plugin import=""OglModel"" as=""VisualModel"" from=""SofaVisual"" />. <Import from=""SofaVisual"" component=""OglModel"" as=""VisualModel""/> ; <Import from=""SofaVisual"" components=""*""/>. <Import fromPlugin=""SofaVisual"" components=""OglModel OglShader""/>. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988822315:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988822315,3,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"Several points here: ; - this PR might be breaking for plugin compilation (including move of files); - this PR changes the way we organize / name the code (which is good!). It would be therefore nice to rediscuss it with you both @guparan and @fredroy to all agree on the organization and merge it, but a question comes:; does this seem realistic to merge it before the release?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1189985975:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1189985975,1,['plugin'],['plugin']
Modifiability,Shall we keep this as a module in Sofa.Components or as an external repo referenced in applications/plugins,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1048677806:100,plugin,plugins,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1048677806,1,['plugin'],['plugins']
Modifiability,"So I have tested the branch fjourdes:insimo_freemotion_integration with our plugins. Our tests and examples ran fine.; I have read the very well detailed changelog (thanks for that) and from what I know it looks fine. I didn't review the files changes, because there is too much to look at... but I would agree to merge.; Again, I'm really sorry for the late answer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780:76,plugin,plugins,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780,1,['plugin'],['plugins']
Modifiability,"So after discussion on gitter, the convention is ; ""each time you use the Template Method design pattern which delegate to its child private implementation then you must use the double _ to indicate it"".; https://isocpp.org/wiki/faq/strange-inheritance#private-virtuals. If it is not private then feel free (which is exactly how is the sofa code base right now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772598715:241,inherit,inheritance,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772598715,1,['inherit'],['inheritance']
Modifiability,So many things to rewrite in this component 🤪 but this is not really the point of this PR anyway,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1854#issuecomment-784900619:18,rewrite,rewrite,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1854#issuecomment-784900619,1,['rewrite'],['rewrite']
Modifiability,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:34,config,configuration,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860,1,['config'],['configuration']
Modifiability,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:154,plugin,plugin,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358,3,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/ana",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:10225,Plugin,PluginManager,10225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is und",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1615,plugin,plugins,1615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['plugin'],['plugins']
Modifiability,SofaDistanceGrid has been pluginized and (seems that) is now well exported at sofa install.; Closing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498:26,plugin,pluginized,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498,1,['plugin'],['pluginized']
Modifiability,SofaGeneral is now fully pluginized! :tada: ; Thanks a lot @fredroy :+1: :+1: :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1529#issuecomment-735659970:25,plugin,pluginized,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1529#issuecomment-735659970,1,['plugin'],['pluginized']
Modifiability,SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaConstraint/lib/libSofaConstraint.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLoader/lib/libSofaGeneralLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExporter/lib/libSofaExporter.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSparseSolver/lib/libSofaSparseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/So,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:6664,Plugin,PluginManager,6664,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,Sofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:3628,Plugin,PluginManager,3628,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,Solution proposed : creation a new plugin SofaPython with compatibility Python 2.7 & Python 3 with new architecture.; Advantages : ; - no disturbance for the users (no refactoring side effects); - the work around Python can progress,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013:35,plugin,plugin,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013,2,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginMana,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5367,Plugin,PluginManager,5367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Some `image` plugin scenes fail because the template used is not compiled in the standard set. It needs the full set. Only the standard set is compiled on the CI. Decision to take:; 1) The failing scenes are ignored on the CI; 2) The failing scenes are modified to use a templated available in the standard set; 3) The CI compiled the full set. I am in favor of the third option, but we already talked about it in https://github.com/sofa-framework/ci/pull/15. It seems to take too much time at the compilation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1288716378:13,plugin,plugin,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1288716378,1,['plugin'],['plugin']
Modifiability,Some news from DEFROST for 17.12; - I'm still working hard one SofaImplicitField & PSL ; - Bruno will make an extra effort to finalize the PR of a SofaPython3 plugin.; - Erwan will do the same for the Communication plugin. ; And Eulalie splitted ou soft-robots plugins in a public and a private part (the pattented one) so we can release it. . And you.. what are your plan for 17.12 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764:159,plugin,plugin,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:270,plugin,plugins,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963,1,['plugin'],['plugins']
Modifiability,"Sorry @alxbilger , I was working on a deeper refactoring of BaseData... and made the PR yesterday as a preliminary step without looking before if it was not done in a pending PR (which is the case of #3265). No problem in having the things dones in your PR. Do I close this one ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3279#issuecomment-1239330973:45,refactor,refactoring,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3279#issuecomment-1239330973,1,['refactor'],['refactoring']
Modifiability,"Sorry @alxbilger, typo in my rewrite of the output. In fact, the error starts with ""$EndNodes"", so no possibility to read the elements.; The `cmd==""$EndNodes\r""`, so the comparison is always wrong. ; @hugtalbot, yes, it works for the other file I have. This shouldn't change anything for files that don't put '\r' at the end of keywords.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3030#issuecomment-1152074953:29,rewrite,rewrite,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3030#issuecomment-1152074953,1,['rewrite'],['rewrite']
Modifiability,"Sorry I should have given more details. The move I suggest is something that was around for quite a while now. I think it was suggested by @damienmarchal first. The legacy conditionally compiled code, mainly in SofaCUDA but it applies everywhere, is a bad practice for the following reasons:; - It is nearly impossible for the user to know what components are included in the conditionally compiled module. It would require a complex documentation to inform the user, which is not done for SofaCUDA.; - Testing becomes more complex. It's challenging to ensure that all possible combinations of conditions are thoroughly tested, increasing the risk of undetected bugs. See https://github.com/sofa-framework/sofa/pull/4227 for example.; - Other plugins (for example SoftRobots) cannot add their own CUDA components into SofaCUDA. So it's not true that all components are in the same plugin. We also have the example of the GPU-based solvers. What I suggest is to keep the cpu-based plugin, and create a new plugin for the gpu-based components. It would be applied to all plugins that are a conditional dependency in SofaCUDA (so not the `Sofa.Component.*` modules), not only `VolumetricRendering`. This PR is an illustration of the move of one particular plugin, but it should be generalized. The goal of the PR is also to approve the move, but also the folder architecture. If we can agree on an architecture inside the SOFA codebase, we can also apply it in external plugins (such as SoftRobots or MOR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900:743,plugin,plugins,743,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:309,variab,variable,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284,1,['variab'],['variable']
Modifiability,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:51,plugin,pluginization,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346,2,['plugin'],"['plugin', 'pluginization']"
Modifiability,"SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ""Sofa.Component.LinearSolver.Direct"", # [SparseLDLSolver]; ""Sofa.Component.AnimationLoop"", # [FreeMotionAnimationLoop]; ""Sofa.Component.Constraint.Lagrangian.Correction"", # [LinearSolverConstraintCorrection, UncoupledConstraintCorrection]; ""Sofa.Component.Constraint.Lagrangian.Solver"", # [GenericConstraintSolver]; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""FreeMotionAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""GenericConstraintSolver""); root_node.addObject(""DefaultContactManager"", response=""FrictionContactConstraint""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=1.0,; contactDistance=0.2,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""). cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.addObject(""EulerImplicitSolver""); cutting_sphere_node.addObject(""PointSetTopologyContainer""); position = [6.0, 5.0, 0",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3269#issuecomment-1255376528:1628,plugin,plugin,1628,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3269#issuecomment-1255376528,1,['plugin'],['plugin']
Modifiability,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:260,config,configuration,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709,2,['config'],"['config', 'configuration']"
Modifiability,"Super great contrib :) The as-clean-as-possible way to implement a controller. From a quick review, everything looks good to me. A few suggestions:; 1- what about adding a python-based layer (inherited class) that would, in its `__init__`, set the Data member (like the name) from the kwargs + call an eventual 'createGraph' function + print a warning if 'onLoaded' exists ;); 2- check that everything is ok with the destruction and the reference counter (maybe it is, I am not yet sure); 3- update the ControllerVariable.py example; 4- mark the SofaPython.script.Controller as deprecated",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410:192,inherit,inherited,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410,1,['inherit'],['inherited']
Modifiability,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:272,refactor,refactored,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901,8,"['refactor', 'variab']","['refactor', 'refactored', 'variables']"
Modifiability,System::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2055,Plugin,PluginManager,2055,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,T and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /home/sergei/Source_code/Sofa_development/sofa/build_release/install; ---------------------------------------; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so; [INFO] [runSofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:3296,Plugin,PluginManager,3296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,TODO: ; 1. rename the repository plugin.SofaPython3 into SofaPython3; 2. report the change in this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1427#issuecomment-652273244:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1427#issuecomment-652273244,1,['plugin'],['plugin']
Modifiability,TODO: save the previous scenes in the new plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1801394698:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1801394698,1,['plugin'],['plugin']
Modifiability,TODO: try to edit the fetched plugin and configure again to see if CMake is not erasing user modifications.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950:30,plugin,plugin,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,"Thank Guillaume for the effort you are doing on this hard task. . For curious people here is a small test we did on how things could look like ; on the ""pluginization"" side (the idea is to be closer to python modules): ; https://github.com/SofaDefrost/sofa/blob/addModule/applications/pluginsNG/README.md",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252:153,plugin,pluginization,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252,2,['plugin'],"['pluginization', 'pluginsNG']"
Modifiability,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:972,refactor,refactoring,972,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148,4,"['plugin', 'refactor']","['pluginization', 'refactoring']"
Modifiability,Thank you @damienmarchal for this nice work as always.; I see you removed all the `typedef` but did not re-defined them in plugins. Won't this break user code?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330460694:123,plugin,plugins,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330460694,1,['plugin'],['plugins']
Modifiability,Thank you @fangzhouzisb for raising this again and your investigation.; Unfortunately I didn't had time to work on that issue specifically and I'm not expert of the constraint resolution pipeline. But I'm in a middle of a deadline involving the Geomagic plugin and I also found several wrong behavior that I'm trying to fix. ; I'm going to try your fix and merge all that in one PR. maybe @hugtalbot could you poke someone expert in FreeMotion and constraint pipeline to see if this fix will have side effects?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989:254,plugin,plugin,254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989,1,['plugin'],['plugin']
Modifiability,"Thank you @ziqiu-zeng for the PR, I can see I did some mistake in the compat files 😬. > Enable compilation with cuda plugins: SofaAsyncSolvers, SofaCUDALDI, SofaCUDASolvers, SofaCUDADev Please also update the plugins; > . Unfortunately, these plugins are private plugins from the mimesis team so we cannot access/fix/update them 🤔",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102753225:117,plugin,plugins,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102753225,4,['plugin'],['plugins']
Modifiability,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:484,plugin,plugins,484,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656,8,['plugin'],"['plugin', 'plugins']"
Modifiability,"Thank you for this PR, it highlights a more serious bug when adding elements in TopologySubsetData. A PR to fix the TopologySubsetData is coming, then we will update this PR to adapt UniformMass with the good callbacks. Right now the callback on PointRemoved event proposed in this PR will crash as the TopologySubsetData already has an internal mechanism to update its size. So you perform the deletion twice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1097837525:177,adapt,adapt,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1097837525,1,['adapt'],['adapt']
Modifiability,Thank you for this fix.; Starting the builds will be useless here since we do not have a VS-2015_options-debug config.; LGTM though. Anyone to confirm?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/300#issuecomment-307735750:111,config,config,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300#issuecomment-307735750,1,['config'],['config']
Modifiability,"Thank you for your comment; The interest is to be able to map the forcefields through the mapping in a sparse manner for many solvers of SOFA. I agree that this functionality is not directly available in the API and for now, would be only available in a private plug-in. But this is work in progress and we need more time to have a clean code available. Why does it break the API ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849:262,plug-in,plug-in,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849,1,['plug-in'],['plug-in']
Modifiability,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:70,enhance,enhancements,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216,2,['enhance'],['enhancements']
Modifiability,Thank you for your fixes @FabienPean !. Two remarks about consistency:; - `Sofa_test` default template is `SReal`. I would go for `Sofa_tests<>` inheritance. Unless there is a specific reason for inheriting from `Sofa_tests<SReal>` ?; - `#ifndef SOFA_FLOAT` block usually comes before `#ifndef SOFA_DOUBLE` block. I can push these tiny corrections if you're ok 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706:145,inherit,inheritance,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706,2,['inherit'],"['inheritance', 'inheriting']"
Modifiability,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:369,Config,Config,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,1,['Config'],['Config']
Modifiability,"Thank you for your update @nhnhan92 ; I added two reviews in the code. Regarding the license, we need the SOFA header to be added in order to display the official license of the project. If this is not possible, an alternative would be to create a dedicated plugin which could have its own open-source license. Finally, a last question would be : would it be possible to have a regression test comparing your material with a analytical/manufactured solution?. Thanks again for this nice piece of work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349:258,plugin,plugin,258,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349,1,['plugin'],['plugin']
Modifiability,"Thanks @alxbilger for the explanation and the perfect illustration :+1:; I understand the issue, although I don't know if the ""appropriate use"" of this method (`getValuePtr`) should be left to the user, or if additional safeguards should be put in the code. I did a quick search in the code of SOFA + a few plugins that I'm using, and I found a call to this particular method only in the `DataHelper` component in SofaPython3. I added a quick safeguard in this case, in the [PR](https://github.com/sofa-framework/SofaPython3/pull/318) I'm referring to in the description above. However the modification I suggested doesn't solve the type of problem you are describing here (so it would be left to the user to check data buffer coherence whenever the underlying data is modified...). Apart from that, I saw that the initial code I replaced (`return &data[0]`) is also used in two others `getValuePtr` methods : in `FixedArrayTypeInfo.h` and `TypeInfo_Text.h`. As I didn't find any other call to these methods, I would say this doesn't change much, but maybe the PR could be extended to these as well. I can do the modification if someone can confirm it is a good idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329331227:307,plugin,plugins,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329331227,2,"['extend', 'plugin']","['extended', 'plugins']"
Modifiability,"Thanks @bakpaul for reporting the problem.; After a quick check, the file to change is SofaMiscForceFieldConfig.cmake.in.; Its CmakeLists.txt refers to SofaBaseMechanics but its *Config.cmake.in does not. So the discrepancy is there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2707#issuecomment-1044449622:179,Config,Config,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2707#issuecomment-1044449622,1,['Config'],['Config']
Modifiability,Thanks @bcarrez for taking the time to check :-); @vmagno didn't you fix the plugin to work with latest CGAL? That's what @jnbrunet told us.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/510#issuecomment-343495382:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510#issuecomment-343495382,1,['plugin'],['plugin']
Modifiability,"Thanks @courtecuisse for this PR :+1: . Few changes to do (from sofa-dev meeting):; - [x] Move it in QtGLViewer, this should not be in RealGUI; - [x] Add ON/OFF with command line option or environment variable",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/722#issuecomment-408022677:201,variab,variable,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722#issuecomment-408022677,1,['variab'],['variable']
Modifiability,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:722,plugin,plugins,722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Thanks @damienmarchal. Could you detail a bit what has been done here? I see #475 commits, DisplacementTransformEngine files creation and DisplacementMatrixEngine deprecation.; Moreover, `git rename` and `git add` detections are a bit weird: ; modules/SofaMiscEngine/initMiscEngine.h → ...el/SofaFramework/build_option_opengl.h.in; modules/SofaMiscEngine/initMiscEngine.cpp → ...faMiscEngine/DisplacementMatrixEngine.cpp; applications/plugins/SofaMiscEngine/DisplacementMatrixEngine.h detected as created; modules/SofaMiscEngine/DisplacementMatrixEngine.h → ...Engine/DisplacementTransformEngine.h",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337:435,plugin,plugins,435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337,1,['plugin'],['plugins']
Modifiability,"Thanks @fredroy for the PR which address a legitimate concern. The problem adressed by the PR is often seen in SOFA's base classes where a parent class is having virtual function defined to print ""no implemented"" (or to print nothing). In general this pattern can be considered as a good code smell often related to some violation of SOLID's principle (eg: Liskov Substition Principle). The proposed solution of moving functions in a separated object is going in the right direction (as pointed by @alxbilger by segregating the intefaces). But it is unclear to me if the implementation proposed in the PR is enough because:; - having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"", ; - using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... ; - the implementation in BTD also looks highly suspicious with:; - plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; - a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937:654,inherit,inheriting,654,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937,1,['inherit'],['inheriting']
Modifiability,Thanks @hugtalbot for this PR !. Were there any example scenes in the sofa/examples folder that would need to be updated and maybe move in this plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925:144,plugin,plugin,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925,1,['plugin'],['plugin']
Modifiability,Thanks @marques-bruno !; Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103588809:97,config,configuration,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103588809,1,['config'],['configuration']
Modifiability,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:165,inherit,inherited,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540,1,['inherit'],['inherited']
Modifiability,"Thanks Matthieu !; To keep this PR clean, I edited the commit `[applications/plugins] FIX missing licenses` and rewrote my branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-274134737:77,plugin,plugins,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-274134737,1,['plugin'],['plugins']
Modifiability,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:665,variab,variable,665,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910,4,['variab'],['variable']
Modifiability,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:135,plugin,plugin,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641,2,['plugin'],['plugin']
Modifiability,Thanks for pointing that @fredroy. Are compliant and Flexible still compiling ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040573374:53,Flexible,Flexible,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040573374,1,['Flexible'],['Flexible']
Modifiability,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:238,plugin,plugins,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936,4,['plugin'],"['pluginSofaCoreAsync', 'plugins']"
Modifiability,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:59,plugin,plugins,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797,1,['plugin'],['plugins']
Modifiability,"Thanks for the answers, I moved them to the PR description. . ""This work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. "" ; I searched in the issues and PRs if there was ever any debate on that topic so that I could provide a link in the description but I didn't found one. Maybe you are referring to face to face discussions ? If this was the case maybe writing a summary of these debate (pro/cons) would be very informative and helpful for all of us. . ""depends on the meaning of breaking""; In general we are considering the following:; - a PR is non breaking if its merge will be un-noticeable for people that don't care of the added feature. ; - a PR is breaking the scene if, after the PR, *any* scenes that was working before is not working anymore. ; - a PR is breaking the API if *any* plugin compiling with master is not compiling anymore after the PR. . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159:874,plugin,plugin,874,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159,1,['plugin'],['plugin']
Modifiability,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:623,refactor,refactoring,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238,2,['refactor'],['refactoring']
Modifiability,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:67,config,config,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243,1,['config'],['config']
Modifiability,"Thanks for this PR @damienmarchal ; Just a question that may end into a debate: do we continue differentiating ""plugins"" and ""modules""? It induced only misunderstanding during STC#5.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408803173:112,plugin,plugins,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408803173,1,['plugin'],['plugins']
Modifiability,"Thanks for vigilance @hugtalbot. @lamriaimen as you can see in the following report, most of the deprecation warnings are in targets that you probably did not enable. I suggest that you activate in CMake ""internal"" plugins (the ones provided with the sources in `applications/plugins`), and I take care of the external plugins (such as ModelOrderReduction). https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4771/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/13/FullBuildWarnings-Clang/category.2119183113/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2182125913:215,plugin,plugins,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2182125913,3,['plugin'],['plugins']
Modifiability,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:296,plugin,plugins,296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,7,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:159,config,config,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673,1,['config'],['config']
Modifiability,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:279,variab,variable,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748,1,['variab'],['variable']
Modifiability,"Thanks guys for the reviews. Indeed, as @damienmarchal said, I wanted in this PR to remove the need to call parent init() in all BaseObject derived classes. This is more a proposal than a confident solution. . > data fields are conditionally needed when a third one is set to true/false (@damienmarchal). I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. The other data fields should be part of another Component linked to the first one or in an inherited Component. Unfortunately I guess this mechanism is already in a lot of Components... @epernod I understand and agree with your concern that each object should check it's own Datas but I'm not sure it's compatible with the idea of removing the need to call parent init(). I think we have to choose:; 1. removing the need to call parent init() but doing the check outside of the object with a Visitor; 2. doing the check inside the object but keeping the need to call parent init(). I'm open to any proposal combining the pros of 1 and 2.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416561180:529,inherit,inherited,529,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416561180,1,['inherit'],['inherited']
Modifiability,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:455,plugin,plugins,455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663,4,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,"Thanks, that's a start but not quite refactored. Here is a proposal (not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:37,refactor,refactored,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175,1,['refactor'],['refactored']
Modifiability,"That's a very good question....; I think that initially it was used to sort components by categories (Forcefields, masses, collision algorithms, etc.); There was a binding in SofaPython that was returning the categories associated to a component. Also, a class named SofaLibrary is using CategoryLibrary.; After your comment, a quick search in the sources shows me that SofaLibrary is not used anywhere actually:; - SofaLibrary itself is used nowhere. SofaModeler does hold a pointer to a SofaLibrary, but this pointer is never used antwhere in the code... ; - QSofaTreeLibrary inherits SofaLibrary -> not used anywhere in SOFA. So now that I see that, I vote for removing the CategoryLibrary / SofaLibrary / QSofaTreeLibrary from SOFA altogether. What do you say?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503449780:578,inherit,inherits,578,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503449780,1,['inherit'],['inherits']
Modifiability,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:684,config,configuration,684,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091,1,['config'],['configuration']
Modifiability,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:201,plugin,plugins,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637,1,['plugin'],['plugins']
Modifiability,"The CImgPlugin has been implemented. It can read bmp, png, jpeg, etc. using the CImg API.; ( http://cimg.eu ); The idea would be to remove ImageQt indeed (original goal of this issue) but also ImagePNG and ImageBMP which are in the core of Sofa.; So the remaining question is : should the plugin be in the core of Sofa (SofaKernel) ? or we consider the fact to read images as optional and the plugin will be in applications/plugins (or in the future in an other repository)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169:289,plugin,plugin,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169,3,['plugin'],"['plugin', 'plugins']"
Modifiability,The PR is deprecated since plugin.SofaPython3.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-536999763:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-536999763,2,['plugin'],['plugin']
Modifiability,"The PR shows there is still a lot of cleaning & refactoring work to do on this component, volunteer welcomed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3249#issuecomment-1246469800:48,refactor,refactoring,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3249#issuecomment-1246469800,1,['refactor'],['refactoring']
Modifiability,The `VirtualTypeInfoA` is there to ease the transition from static to dynamic (ie not breaking current code/plugins)? Or is it a long time design?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712786434:108,plugin,plugins,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712786434,1,['plugin'],['plugins']
Modifiability,"The above commit only adds trivial refactoring of a (too big) function to facilitate review, nothing more, so I think it belongs here. I also agree with @matthieu-nesme about the the right way to do it, but this should be another PR to keep concerns separate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/156#issuecomment-278159229:35,refactor,refactoring,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156#issuecomment-278159229,1,['refactor'],['refactoring']
Modifiability,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:46,plugin,plugins,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144,2,['plugin'],['plugins']
Modifiability,"The blinking test crash comes from Assembly_test.cpp:1051`createCompliantString( root, p0, p1, 2, 2.0, 1.0/stiffness, false, 1.0 );` (in Compliant plugin).; Could someone understanding this code investigate further?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379:147,plugin,plugin,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379,1,['plugin'],['plugin']
Modifiability,The branch is: https://github.com/SofaDefrost/sofa/tree/SofaPython3; And it also moved the SofaPython plugin to SofaPython27 dirctory (for backward-compatibility),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23#issuecomment-284981648:102,plugin,plugin,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-284981648,1,['plugin'],['plugin']
Modifiability,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:4,config,config,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903,2,['config'],['config']
Modifiability,The details to know:; - where (I vote for the 'salle du conseil' :)); - when (wednesday 4 ?); - who will attend to the coding sprint ? . My dream list:; - SofaNG (pluginizing the modules); - sofaqtquick (only if there is more than 2 QML expert); - Sofa code cleaning (as usual) :) ; - coding standard conformance; - we want more tests (they are crucial for refactoring) !!!; - remove & unify duplicated code (eg...how many fast marching algorithm do we need ?); - remove the not-needed includes. ; - Writing doc :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349:163,plugin,pluginizing,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349,2,"['plugin', 'refactor']","['pluginizing', 'refactoring']"
Modifiability,The error in the tests came from (applications/plugins/LMConstraint/src/LMConstraint/LMConstraintSolver.cpp) in `init`:; ```cpp; listConstraintCorrection[i]->removeConstraintSolver(this);; listConstraintCorrection[i]->addConstraintSolver(this);; ```; The first line removed the element from the list whereas the element was never added to the list (we are in the `init` method). It is added in the second line.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-940746618:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-940746618,1,['plugin'],['plugins']
Modifiability,The error on the CI :. ```; J:\0\src\applications\plugins\SofaCUDA\sofa/gpu/cuda/CudaSphereModel.h(26): error: This header has been DISABLED since v23.12 after being deprecated on v23.06. To fix this error you must include SofaCUDA/component/collision/geometry/CudaSphereModel.h instead. ; J:\0\src\applications\plugins\SofaCUDA\sofa/gpu/cuda/CudaPointModel.h(26): error: This header has been DISABLED since v23.12 after being deprecated on v23.06. To fix this error you must include SofaCUDA/component/collision/geometry/CudaPointModel.h instead. ; ```. has been fixed in the PR suite Lifecycle.; This will should therefore be automatically be fixed when #4058 will be merged,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1662943647:50,plugin,plugins,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1662943647,2,['plugin'],['plugins']
Modifiability,The failing scenes due to the changes in #1927 are:; - applications/plugins/MultiThreading/examples.livers.scn; - applications/plugins/MultiThreading/examples.liversMeanPositions.scn; - applications/plugins/image/examples.loadimage_mt.scn. They are all multithreaded.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756:68,plugin,plugins,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756,3,['plugin'],['plugins']
Modifiability,The getRelativePath function is not used in the CGAL plugin so I doubt this is linked.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300899410:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300899410,1,['plugin'],['plugin']
Modifiability,The inheritance to DataEngine brings Components (inherits from BaseObject) within a component.; Change inheritance for DDGNode to exploit only update mechanisms.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669:4,inherit,inheritance,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669,3,['inherit'],"['inheritance', 'inherits']"
Modifiability,The issue is about 'Refactor opengl rendering code' ...the CameraController is something different :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395008849:20,Refactor,Refactor,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395008849,1,['Refactor'],['Refactor']
Modifiability,The macro are not used anymore in our code base and has been commented in the plugin from DEFROST. ; Maybe we could remove it (or find a way to deprecated it for some time)).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1318366581:78,plugin,plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1318366581,1,['plugin'],['plugin']
Modifiability,"The major differences I see with the private plugin SofaAsyncSolvers:. - SofaAsyncSolvers implements a base class for asynchronous solver. It replaces the usual base class `MatrixLinearSolver` using a template specialization on the third template parameter `ThreadManager`. In the usual solvers, `NoThreadManager` is used. In asynchronous solvers, a new `ThreadManager` is introduced: `AsyncThreadManager`. It does not bring anything on its own. The difference between `MatrixLinearSolver<...,...,NoThreadManager>` and `MatrixLinearSolver<...,...,AsyncThreadManager>` is only in the class implementation. This template mechanism means that it is possible to explicitly instantiate any linear solver as an asynchronous solver. In that case, it will use `MatrixLinearSolver<AsyncThreadManager>` as its base class. On the contrary, `AsyncSparseLDLSolver` introduced in this PR is not generic. It derives from `SparseLDLSolver`. It is specific to `SparseLDLSolver`.; - Because of the previous point, in SofaAsyncSolvers, asynchronous solver components are differentiated only by the template name prefix `Async`. For example, in XML, it is declared as `<SparseLDLSolver template=""AsyncCompressedRowSparseMatrixMat3x3d""/>`, compared to the synchronous solver `<SparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`. In this PR, `AsyncSparseLDLSolver` is a different component than `SparseLDLSolver` and must use the usual templates: `<AsyncSparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`.; - `AsyncSparseLDLSolver` uses `std::async`, while `MatrixLinearSolver<AsyncThreadManager>` uses `boost::thread`, hence a dependency to boost. `std::async` may use a thread pool. In that case, it is guaranteed that threads waiting asynchronous tasks are not busy just waiting. I am not sure it is the case in SofaAsyncSolvers.; - In SofaAsyncSolvers, there are some references to an asynchronous matrix assembly. I don't know for sure that it is really used. Code refers to `ThreadSafeForceFie",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613,1,['plugin'],['plugin']
Modifiability,The name of the plugin has been changed.; PR can be merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1430#issuecomment-662326926:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1430#issuecomment-662326926,1,['plugin'],['plugin']
Modifiability,The ones remaining seem to be located in image and registration plugins (examples).; That's it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-972595503:64,plugin,plugins,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-972595503,1,['plugin'],['plugins']
Modifiability,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827,2,['plugin'],['plugin']
Modifiability,"The plugin should then have its own repository. In this PR or another one, up to you @fredroy; → wait for #2813 then ready",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103700495:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103700495,1,['plugin'],['plugin']
Modifiability,The problem is to have the uninstall function called when we need to reload the files (when the end user application is reloading). . This can be done per PythonScriptController in the 'cleanup' code. But the cost will be repeated each time a PythonScriptController is created/destructed in the scene so I'm not a big fan of it. Neither for the explicit reinit.; ; I don't understand your suggestion. A pure python solution may be to install a kind of hook in python that count the number of PythonScriptController that is created...and count the number of cleanup...and if this cleanup count is zero...it means we need to force a plugin reload. It may work but I'm not sure this is very good because creating PythonScriptController on the fly and deleting them would force module reload. . The last solution I can think abou tis to have the PythonEnvironment inheriting from BaseObject and thus...be part of the scene (automatically added in the root) ... this PythonEnvironment will thus receive a single cleanup event and do the cleaning when it deserve to. ; This solution sound conceptually ok to me if we accept that our scene contains an automatically added object.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340:631,plugin,plugin,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340,2,"['inherit', 'plugin']","['inheriting', 'plugin']"
Modifiability,"The problem is with external plugins, such as BeamAdapter, Cosserat, or SoftRobots, if they are built at the same time as SOFA, from external directories. In this case, by default, the `.so` are generated in `build/external_directories`.; I noticed that SofaPython3 automatically copies its `.so` in `lib` (or at least I believe it does ?). Another solution would be for each external plugin to do the same, but it's not the default behaviour at the moment. Regardless of what is the 'right' solution (which I'm definitely not the best to comment on), at the moment you have a different behaviour if you want to use one of these external plugins from the GUI, or in batch mode.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2927#issuecomment-1127842861:29,plugin,plugins,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2927#issuecomment-1127842861,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:121,plugin,plugin,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901,2,['plugin'],['plugin']
Modifiability,"The purpose of this PR is to completely encapsule all OpenGL code into that plugin?; (according to the description :wink: ).; Otherwise there are some stuff from the framework/kernel, especially DrawToolGL (in good ol' opengl 2 :cowboy_hat_face: )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499395521:76,plugin,plugin,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499395521,1,['plugin'],['plugin']
Modifiability,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,3,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,"The rational of the PR is sounded and the existing design in sofa that mix the base class with a kind of hardcoded singleton/registry is bad and should be refactored (thank for the PR so). . From my experience the refactoring step in such situation depends if the static part is actually implementing kind of singleton or a kind registry of instances. But in both case the refactoring consists in moving all the static methods and static attributes in a new class with the sole purpose of handle the registry/singleton. . In your PR you are moving the static method and the singleton into TaskSchedulerFactory. ; If found using ""factory"" is confusing as to me a factory's roles (and design pattern) is to map to different construction methods and not holding the created instances. In order to keep the registry separated from the factory part I recommend keeping the two concerns separated in different classes. . To me a clean layout separating implementions and concerns is the following:; ```cpp; class TaskScheduler {}; // The base class for a scheduler; class TaskSchedulerRegistry:: {}; // The class implementing a registry of taskschedulers; class TaskSchedulerFactory:: {}; // The class implementing a factory for taskscheduler; class MainTaskSchedulerRegistry::{}; // The ""static"" class which contains a singleton of a TaskSchedulerRegistry ; // and public static methods to manipulate it (with mutex in each of them) ; class MainTaskSchedulerFactory::{} // The ""static"" class which contains a singleton of a TaskSchedulerFactory; // and pubic static methods to manipulate it. ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905:155,refactor,refactored,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905,3,['refactor'],"['refactored', 'refactoring']"
Modifiability,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:242,plugin,plugins,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672,1,['plugin'],['plugins']
Modifiability,"The right syntax is the following:. ```C++; const auto visualHaptionDOFSPtr = sofa::core::objectmodel::New<sofa::component::statecontainer::MechanicalObject<sofa::defaulttype::Rigid3dTypes>>();; visualHaptionDOF = visualHaptionDOFSPtr.get();; nodeHaptionVisual->addObject(visualHaptionDOFSPtr);; visualHaptionDOF->name.setValue(""rigidDOF"");; ```. Note that this plugin has not been maintained for a long time. You should expect some changes in order to make it work. Here are some changes I made today to fix the configuration: https://github.com/sofa-framework/sofa/pull/4338. But it does not fix the compilation. If you succeed to make it work, a pull request would be very welcome ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840404388:362,plugin,plugin,362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840404388,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:60,plugin,plugins,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381,2,"['plugin', 'rewrite']","['plugins', 'rewrite']"
Modifiability,The thread pool is being refactored. Here are 3 pending PR:; - #3480 ; - #3482 ; - #3491,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318424915:25,refactor,refactored,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318424915,1,['refactor'],['refactored']
Modifiability,"The usual way of adding cuda support for cpu-based components was done through the SofaCUDA plugin. Many component of this plugin are compiled only if the cpu-based plugin of those components is found. This allowed to keep all the cuda-based code in the same plugin. What you propose here goes against this usual way of developing cuda based components. This has one important effect, it adds cuda-based codes in base plugins (as you did here, even if it is in sub project). Why doing it for this plugin and not the rest ?. I am not saying that what you propose is wrong, but that only one approach should be applied to the whole plugins either the old one or yours, to ease future developments. It may be interesting to discuss it with the other devs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1862893517:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1862893517,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"There are a few tests/scenes throwing the new warnings (especially with the image plugin), but this was to be expected I guess.; Strangely, I would have predicted Jenkins/gtest to consider those as ""FAILED"" (and having some additional failures in the summary) but it does not. 🤔",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2113900167:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2113900167,1,['plugin'],['plugin']
Modifiability,"There are too many changes for me to review this PR ;); But from a quick glance, personally I would have preferred to keep the optional ExecParams* parameter in the Data* APIs even if it is unused now. This would remove frustrations for downstream / plugin codes that could be broken by this change. One option would be to add them back with a [[deprecated]] attribute.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486:250,plugin,plugin,250,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486,1,['plugin'],['plugin']
Modifiability,There is a lot of code in the .h. ; Would it be possible to have the same refactoring while keeping the headers clean.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1001672501:74,refactor,refactoring,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1001672501,1,['refactor'],['refactoring']
Modifiability,"There is still a build problem with the ""image"" plugin. See issue #352 .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/351#issuecomment-318653165:48,plugin,plugin,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351#issuecomment-318653165,1,['plugin'],['plugin']
Modifiability,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:134,variab,variables,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790,2,['variab'],['variables']
Modifiability,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:46,config,configuration,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996,1,['config'],['configuration']
Modifiability,"This class is using a common ""ugly"" design pattern often found in Sofa which mix 1) the actual object implementation, 2) is singleton exposure, and 3) a static API. . My suggestion when we see this kind of pattern is to refactor it to separate the different concerns so that the thread safetyness is not mixed with implementation. . Here is a suggested design that does not break the API (to much):; In the .h; ```; /// Tag factory is only the public API forwarding to a totally private implementation. ; class TagFactory; {; public: ; static unsigned int getID(std::string name);; static std::string getName(unsigned int id);; };. In the .cpp; ```cpp; /// Non thread safe class (and there is no reason why it should) because only the singletong should be protected.; class TagFactoryImpl ; {; public:; std::string getId(int id);; void getName(); ; };. TagFactoryImpl::TagFactoryImpl::getInstance(); {; /// ...; }. std::string TagFactory::getName(); {; lock_mutex();; getSingleton()->getName(); }. std::string Tag::Factory::getId(); {; lock_mutex();; getSingleton()->getId() ; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2942#issuecomment-1124715243:220,refactor,refactor,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2942#issuecomment-1124715243,1,['refactor'],['refactor']
Modifiability,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:332,plugin,plugin,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038,3,"['Plugin', 'config', 'plugin']","['PluginManager', 'config', 'plugin']"
Modifiability,"This first PR was initially to answer to the question how to load automatically plugins we deem ""important"" such as SofaPython. ; This PR was quite easy and fast to implement (especially because people agreed on the previous (failed :( ) PR #253 ). And it would lead to an other PR which will remove Image* things in the core of Sofa (and deps and the JPEG bug in ImageQt); Anyway, in a second time, I(?) will think about the introspection system which will be detailed in the proposal page #281",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533:80,plugin,plugins,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533,1,['plugin'],['plugins']
Modifiability,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:46,inherit,inheriting,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479,4,['inherit'],"['inheriting', 'inherits']"
Modifiability,"This is more or less done with:; - the isolation of the SofaOpenGlVisual (and Sofa.GL); - anything else than components of SofaOpenGlVisual now use only DrawTool (well... I am sure exceptions exist 😒). A good application of this refactor task is the RHI plugin, which provides an other implementation of DrawTool and RhiModel (instead of OglModel). . Closing for now, if anybody wants to add something, one can re-open it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524:229,refactor,refactor,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524,2,"['plugin', 'refactor']","['plugin', 'refactor']"
Modifiability,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:203,refactor,refactor,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638,2,['refactor'],['refactor']
Modifiability,"This is weird, this should not happen if the plugin was loaded (i.e thanks to ""-l SofaPython3""on the command line); Can you post the entire log when you execute runSofa ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1788253936:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1788253936,1,['plugin'],['plugin']
Modifiability,"This may be outdated answer ... but isn't that because SofaNonUniformFEM plugin is missing ? ; I don't know what was its status back in july 2022 but at present time (april 2023) ; SofaNonUniformFEM is now ""Sofa.Component.SolidMechanics.FEM.NonUniform""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110#issuecomment-1499149075:73,plugin,plugin,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110#issuecomment-1499149075,1,['plugin'],['plugin']
Modifiability,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:314,plugin,plugin,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"This might be used in some CUDA private plugins, could you confirm this to us @ziqiu-zeng @courtecuisse ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1378487718:40,plugin,plugins,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1378487718,1,['plugin'],['plugins']
Modifiability,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:84,plugin,plugins,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981,1,['plugin'],['plugins']
Modifiability,"This plugin has been left unused for a long time now, closing the issue.; Feel free to re-open if need be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2023#issuecomment-1499798319:5,plugin,plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2023#issuecomment-1499798319,1,['plugin'],['plugin']
Modifiability,"This scene using the Mouse interaction (*Edit->MouseManager-> attach with bilateral constraint*) illustrates the bug @alxbilger : . ``` xml; <?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <RequiredPlugin pluginName=""Sofa.Component.Constraint.Projective Sofa.Component.LinearSolver.Iterative Sofa.Component.Mapping.Linear Sofa.Component.Mass Sofa.Component.ODESolver.Backward Sofa.Component.SolidMechanics.FEM.Elastic Sofa.Component.StateContainer Sofa.GL.Component.Rendering3D Sofa.Component.Topology.Container.Dynamic Sofa.Component.IO.Mesh Sofa.Component.Constraint.Lagrangian.Solver Sofa.Component.Constraint.Lagrangian.Correction Sofa.Component.Collision.Response.Contact Sofa.Component.Collision.Geometry Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Detection.Algorithm Sofa.Component.AnimationLoop"" />; <DefaultVisualManagerLoop/>. <FreeMotionAnimationLoop />; <!-- <LCPConstraintSolver tolerance=""0.001"" maxIt=""1000""/> -->; <GenericConstraintSolver tolerance=""0.001"" maxIterations=""1000"" />. <DefaultPipeline name=""CollisionPipeline"" verbose=""0"" />; <BruteForceBroadPhase/>; <BVHNarrowPhase/>; <DefaultContactManager name=""collision response"" response=""FrictionContactConstraint"" />; <DiscreteIntersection/>. <MeshOBJLoader name=""LiverSurface"" filename=""mesh/liver-smooth.obj"" />. <Node name=""Liver"" gravity=""0 -9.81 0"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <CGLinearSolver name=""linear solver"" iterations=""25"" tolerance=""1e-09"" threshold=""1e-09"" />; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" geometryState=""@dofs"" topology=""@topo""/>; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1169794916:232,plugin,pluginName,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1169794916,1,['plugin'],['pluginName']
Modifiability,"This won't be enough. All bindings made for SofaPython fail when building in C++17.; ```; [1208/2186] Building CXX object modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; FAILED: modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; < ... >; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.cpp:24:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.h:25:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonMacros.h:29:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonCommon.h:27:; In file included from /usr/include/python2.7/Python.h:88:; /usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```; See https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1284/CI_CONFIG=ubuntu_clang-6,CI_PLUGINS=options,CI_TYPE=release/2/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480:857,plugin,plugins,857,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480,2,['plugin'],['plugins']
Modifiability,Those Configurations are also meant to be used by the CI to easily set the type of build. The full build will be the one used for PR and Releases. While plugin will be deactivated by the bash script depending on the installed dependencies on the OS.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645:6,Config,Configurations,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645,2,"['Config', 'plugin']","['Configurations', 'plugin']"
Modifiability,"To answer directly the question of @epernod , yes 🫠. I think it was designed to mimic https://cmake.org/cmake/help/latest/module/FetchContent.html (kind of), at a time where it did not exist in CMake yet ; as `ExternalProject_Add` https://cmake.org/cmake/help/latest/module/ExternalProject.html have existed since much longer time ago (CMake 3.0 ?). Now that it is been introduced few years from now (2018 I think), I think the `ExternalProject_Add` mechanism should be phased out and replaced by the `FetchContent` one.; It would save the problem of getting the source being pulled into the source dir of SOFA (hence the .gitignore file); **AND** also the problem of plugins' updates, as (normally) the cmake configure step updates the source (except if `FETCHCONTENT_UPDATES_DISCONNECTED` is set)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1886033453:668,plugin,plugins,668,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1886033453,2,"['config', 'plugin']","['configure', 'plugins']"
Modifiability,To fix the last test I had to be able to detect that some data are child of BaseImage. So I have added inheritance mecanism in the DataTypeInfoWrapper.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330:103,inherit,inheritance,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330,1,['inherit'],['inheritance']
Modifiability,"To me compiler's specific default configuration shouldn't have consequence in our code base and we shouldn't design software architecture *because* of a specific compiler issue (which is actually not an issue..because it is something that can be change with command arguments). Compiler's options exists to be used and so I see no problem in using them. . Said differently, setting compiler's option in the CMake to have more inlining is much more legitimate ""and the good way"" than putting ""inline"" in front of every declaration. . EDIT: what surprise me is that this seems related to inlining... while I would have bet it would be more related to LTO/GO.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3343#issuecomment-1265270806:34,config,configuration,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3343#issuecomment-1265270806,1,['config'],['configuration']
Modifiability,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:524,plugin,plugin,524,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626,4,['plugin'],['plugin']
Modifiability,"To me there is several aspect in Sofa-NG: ; - one, I would called MiniSofa is about having a single plugin that contains ""selected component"" with the 20/80 rules presented by Stephane. ; - the other, I would called Sofa-HiQu (Sofa- High Quality), is the set of component possibly containing some with nearly similar function but all matching a minimal level of quality. ; - the last one, I would called Sofa-Garbage, that consist in removing components that are really ; unsupported and should not be supported in the core. . Of course Sofa-HiQu should at least contains the MiniSofa components and it should be the same code base :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/227#issuecomment-291093104:100,plugin,plugin,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/227#issuecomment-291093104,1,['plugin'],['plugin']
Modifiability,"To me these have two totally different usages.; ; config.h is containing the different parameters related to the module...and it should be included in every .h of a module because this is where the SOFA_MODULE_API is implemented. Appart from that is the initModule.cpp/initModule.h which contains the defintion/declaration for functions needed to intialize the module. In the past initModule.h was containing the initModule() function...but when it is a real plugin we are using the Plugin API and dlopen for that. If we want to allow people to use the module without using the dynamic library we add into initModule.h the declaration of the ""C"" function that are in initModule.cpp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362:50,config,config,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362,3,"['Plugin', 'config', 'plugin']","['Plugin', 'config', 'plugin']"
Modifiability,"To me, here are the important files to review if you agree with the changes made:; In SofaKernel:; - Vec.h; - VecTypes.h; - Mat.h; - Quat.h; - RigidTypes.h; - TemplateAlias.cpp ; - TemplateAlias.h. In Flexible; - StrainTypes; - DeformationGradientTypes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-448508844:201,Flexible,Flexible,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-448508844,1,['Flexible'],['Flexible']
Modifiability,"To motivate my vote (an external plugin). I think advertising this code is especially a good idea for us at DEFROST, advertising that we can also simulate articulated system, classic robotics you know. And if it has to be an external plugin to appear on the website (sofa-framework.org/applications/plugins right?)... then I vote for it. . Edit: I also have a nice example that I could add to the plugin . ![image](https://user-images.githubusercontent.com/12150715/156259946-1efb9a5a-5078-4f33-bc81-09f9ca4cbf0e.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1055913648:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1055913648,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:95,plugin,plugins,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670,3,['plugin'],['plugins']
Modifiability,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:25,plugin,plugins,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Unfortunately I did not find a better way to ensure full backward compatibility.; I vote for solution 2 (breaking but not too much): tell user to enable all needed MODULE_* variable, then fail.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624686655:173,variab,variable,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624686655,1,['variab'],['variable']
Modifiability,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:173,plugin,plugins,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589,4,['plugin'],"['plugin', 'plugins']"
Modifiability,Unfortunately no. SofaPython3 builds without error on my Ubuntu 18.04; My config:; - SOFA v20.06 binaries unzipped in my home; - pybind11 2.4.3 installed in my system; - python 3.8.3 installed in my system,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967:74,config,config,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967,1,['config'],['config']
Modifiability,Union may prevent to use a variable x if you wrote in y which is exactly our case here. Let's use the setParent() on Data.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4046#issuecomment-1698689077:27,variab,variable,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4046#issuecomment-1698689077,1,['variab'],['variable']
Modifiability,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:291,plugin,plugin,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264,1,['plugin'],['plugin']
Modifiability,Very nice work @fredroy :clap: :clap: :clap:. I have 2 side questions:; - shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; - is it planned to host the repository in sofa-framework organization ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342:144,plugin,plugins,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342,1,['plugin'],['plugins']
Modifiability,Waiting for Sofa.Config... closing for now,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-746011358:17,Config,Config,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-746011358,1,['Config'],['Config']
Modifiability,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:58,plugin,plugins,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904,9,['plugin'],['plugins']
Modifiability,"We can close this. it was not a ""real"" regression. ; A PR is PR is waiting to be merged refactoring this part of the codebase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/895#issuecomment-465262565:88,refactor,refactoring,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/895#issuecomment-465262565,1,['refactor'],['refactoring']
Modifiability,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:44,inherit,inheritance,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178,1,['inherit'],['inheritance']
Modifiability,We compile the plugin but can't run any CUDA simulation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/665#issuecomment-449041975:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/665#issuecomment-449041975,1,['plugin'],['plugin']
